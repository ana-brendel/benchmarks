File Information
- File name: defs
- Original Directory: /home/anabrendel/lfind/benchmarks/tree-automata/defs_tests/lemma_le_plus_l_170
- LFind Directory: /home/anabrendel/lfind/benchmarks/tree-automata/defs_tests/_lfind_lemma_le_plus_l_170
- Namespace: TreeAutomata
- Proof name: taille_aux_0
- Theorem: Theorem taille_aux_0: forall (a0 : ad) (la0 ls0 : prec_list),
le (S (taille_0 la0)) (taille_0 (prec_cons a0 la0 ls0)).
- Declarations: 
From lfind Require Import LFind.
Require Import Bool.
Require Import Arith.
Require Import ZArith.
From IntMap Require Import Allmaps.
Require Import EqNat.
From TreeAutomataCoqGym Require Import bases.

Proof Context
* Goal State: le (taille_0 la) (Init.Nat.add (taille_0 la) (taille_0 ls))

* Hypothesis:
la : prec_list
ls : prec_list
a : ad

* Types:
Set
Prop
nat
prec_list

* Polymorphic Types:


* Variables:
la : prec_list
ls : prec_list

* Terms:
prec_list : Set
taille_0 la : nat
le (taille_0 la) (Init.Nat.add (taille_0 la) (taille_0 ls)) : Prop
la : prec_list
ad : Set
ls : prec_list
taille_0 ls : nat
Init.Nat.add (taille_0 la) (taille_0 ls) : nat

* Functions:
taille_0  : forall _ : prec_list, nat
Init.Nat.add  : forall (_ : nat) (_ : nat), nat
le  : forall (_ : nat) (_ : nat), Prop

<---GENERALIZATION--->
Time elapsed: 2 seconds
Generalized Variables:
lf3 : nat = taille_0 ls
lf1 : nat = Init.Nat.add (taille_0 la) (taille_0 ls)
lf2 : nat = taille_0 la

Generalizations:
Lemma conj1: forall (lf2 : nat) (lf1 : nat), le lf2 lf1.
Lemma conj2: forall (la : prec_list) (lf1 : nat), le (taille_0 la) lf1.
Lemma conj3: forall (lf2 : nat) (lf3 : nat), le lf2 (Init.Nat.add lf2 lf3).
Lemma conj4: forall (la : prec_list) (lf3 : nat), le (taille_0 la) (Init.Nat.add (taille_0 la) lf3).
Lemma conj7: forall (lf2 : nat) (ls : prec_list), le lf2 (Init.Nat.add lf2 (taille_0 ls)).
Lemma conj8: forall (la : prec_list) (ls : prec_list), le (taille_0 la) (Init.Nat.add (taille_0 la) (taille_0 ls)).


<---VALIDITY CHECKS--->
Time elapsed: 39 seconds
Valid:
Lemma conj8: forall (la : prec_list) (ls : prec_list), le (taille_0 la) (Init.Nat.add (taille_0 la) (taille_0 ls)).
Lemma conj7: forall (lf2 : nat) (ls : prec_list), le lf2 (Init.Nat.add lf2 (taille_0 ls)).
Lemma conj4: forall (la : prec_list) (lf3 : nat), le (taille_0 la) (Init.Nat.add (taille_0 la) lf3).
Lemma conj3: forall (lf2 : nat) (lf3 : nat), le lf2 (Init.Nat.add lf2 lf3).

Invalid:
Lemma conj2: forall (la : prec_list) (lf1 : nat), le (taille_0 la) lf1.
Lemma conj1: forall (lf2 : nat) (lf1 : nat), le lf2 lf1.

<---ADD IMPLICATIONS--->
Time elapsed: 40 seconds
Generalizations:
Lemma conj2: forall (la : prec_list) (lf1 : nat), le (taille_0 la) lf1.
Lemma conj1: forall (lf2 : nat) (lf1 : nat), le lf2 lf1.


<---VALIDITY CHECKS--->
Time elapsed: 44 seconds
Valid:

Invalid:
Lemma conj1: forall (lf2 : nat) (lf1 : nat), le lf2 lf1.
Lemma conj2: forall (la : prec_list) (lf1 : nat), le (taille_0 la) lf1.


<---CREATE SKETCHES--->
Time elapsed: 44 seconds
Sketches:
Sketch conj2_sketch0 : le (##hole##) lf1
Sketch conj2_term_sketch0 : @eq nat (taille_0 la) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 63 seconds
Problems per Sketch:
Sketch conj2_term_sketch0 --> Problem  synth_2
Sketch conj2_sketch0 --> Problem  synth_1


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 78 seconds

Problem: synth_1

Problem: synth_2

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 79 seconds
Lemmas:
Lemma candidate_1: forall (ls : prec_list) (la : prec_list), le (taille_0 la) (Init.Nat.add (taille_0 la) (taille_0 ls)).
Lemma candidate_2: forall (ls : prec_list) (lf2 : nat), le lf2 (Init.Nat.add lf2 (taille_0 ls)).
Lemma candidate_3: forall (lf3 : nat) (la : prec_list), le (taille_0 la) (Init.Nat.add (taille_0 la) lf3).
Lemma candidate_4: forall (lf3 : nat) (lf2 : nat), le lf2 (Init.Nat.add lf2 lf3).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 90 seconds
Duplicates removed: 1
Filtered by Quickchick: 0
Filtered by script: 0
Remaining: 3

Lemmas: 
Lemma candidate_4: forall (lf3 : nat) (lf2 : nat), le lf2 (Init.Nat.add lf2 lf3).
Lemma candidate_2: forall (ls : prec_list) (lf2 : nat), le lf2 (Init.Nat.add lf2 (taille_0 ls)).
Lemma candidate_3: forall (lf3 : nat) (la : prec_list), le (taille_0 la) (Init.Nat.add (taille_0 la) lf3).