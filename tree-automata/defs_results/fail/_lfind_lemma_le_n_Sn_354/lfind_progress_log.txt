File Information
- File name: defs
- Original Directory: /home/anabrendel/lfind/benchmarks/tree-automata/defs_tests/lemma_le_n_Sn_354
- LFind Directory: /home/anabrendel/lfind/benchmarks/tree-automata/defs_tests/_lfind_lemma_le_n_Sn_354
- Namespace: TreeAutomata
- Proof name: term_occur_0_0
- Theorem: Theorem term_occur_0_0: forall (a1 : ad) (t1 : term_list) (_ : term_occur_def_1 t1),
term_occur_def_0 (app a1 t1).
- Declarations: 
From lfind Require Import LFind.
Require Import Bool.
Require Import Arith.
Require Import ZArith.
From IntMap Require Import Allmaps.
Require Import EqNat.
From TreeAutomataCoqGym Require Import bases.

Proof Context
* Goal State: le (term_high_0 t)
  (S
     ((fix term_high (t1 : term) : nat :=
         match t1 with
         | app _ l => S (term_high_0 l)
         end
       with term_high_0 (l : term_list) : nat :=
         match l with
         | tnil => O
         | tcons hd tl0 => Nat.max (term_high hd) (term_high_0 tl0)
         end
       for term_high_0) t))

* Hypothesis:
H4 : @eq term_list tl t
H0 : term_occur u (app a t)
H1 : @eq ad a0 a
H2 : @eq term t0 u
tl : term_list
a0 : ad
H : forall (u0 : term) (_ : term_list_occur u0 t),
le (term_high u0) (term_high_0 t)
t0 : term
t : term_list
H3 : term_list_occur u t
u : term
a : ad

* Types:
Set
Prop
term_list
ad
nat
term

* Polymorphic Types:


* Variables:
tl : term_list
a0 : ad
t0 : term
t : term_list
u : term
a : ad

* Terms:
S
  ((fix term_high (t1 : term) : nat :=
      match t1 with
      | app _ l => S (term_high_0 l)
      end
    with term_high_0 (l : term_list) : nat :=
      match l with
      | tnil => O
      | tcons hd tl0 => Nat.max (term_high hd) (term_high_0 tl0)
      end
    for term_high_0) t) : nat
tl : term_list
le (term_high_0 t)
  (S
     ((fix term_high (t1 : term) : nat :=
         match t1 with
         | app _ l => S (term_high_0 l)
         end
       with term_high_0 (l : term_list) : nat :=
         match l with
         | tnil => O
         | tcons hd tl0 => Nat.max (term_high hd) (term_high_0 tl0)
         end
       for term_high_0) t)) : Prop
@eq term t0 u : Prop
term_list_occur u t : Prop
term_list : Set
@eq ad a0 a : Prop
(fix term_high (t1 : term) : nat :=
   match t1 with
   | app _ l => S (term_high_0 l)
   end
 with term_high_0 (l : term_list) : nat :=
   match l with
   | tnil => O
   | tcons hd tl0 => Nat.max (term_high hd) (term_high_0 tl0)
   end
 for term_high_0) t : nat
u : term
forall (u0 : term) (_ : term_list_occur u0 t),
le (term_high u0) (term_high_0 t) : Prop
term_high_0 t : nat
term : Set
term_occur u (app a t) : Prop
a0 : ad
ad : Set
t0 : term
term_high _UNBOUND_REL_2 : nat
t : term_list
forall _ : term_list_occur _UNBOUND_REL_1 t,
le (term_high _UNBOUND_REL_2) (term_high_0 t) : Prop
le (term_high _UNBOUND_REL_2) (term_high_0 t) : Prop
app a t : term
@eq term_list tl t : Prop
term_list_occur _UNBOUND_REL_1 t : Prop
a : ad

* Functions:
term_high_0  : forall _ : term_list, nat
app  : forall (_ : ad) (_ : term_list), term
term_occur  : forall (_ : term) (_ : term), Prop
term_list_occur  : forall (_ : term) (_ : term_list), Prop
term_high  : forall _ : term, nat
le  : forall (_ : nat) (_ : nat), Prop
S  : forall _ : nat, nat
fix term_high (t1 : term) : nat :=
  match t1 with
  | app _ l => S (term_high_0 l)
  end
with term_high_0 (l : term_list) : nat :=
  match l with
  | tnil => O
  | tcons hd tl0 => Nat.max (term_high hd) (term_high_0 tl0)
  end
for term_high_0  : forall _ : term_list, nat
@eq  : forall (A : Type) (_ : A) (_ : A), Prop

<---GENERALIZATION--->
Time elapsed: 2 seconds
Generalized Variables:
lf3 : nat = term_high_0 t
lf1 : nat = S
  ((fix term_high (t1 : term) : nat :=
      match t1 with
      | app _ l => S (term_high_0 l)
      end
    with term_high_0 (l : term_list) : nat :=
      match l with
      | tnil => O
      | tcons hd tl0 => Nat.max (term_high hd) (term_high_0 tl0)
      end
    for term_high_0) t)
lf2 : nat = (fix term_high (t1 : term) : nat :=
   match t1 with
   | app _ l => S (term_high_0 l)
   end
 with term_high_0 (l : term_list) : nat :=
   match l with
   | tnil => O
   | tcons hd tl0 => Nat.max (term_high hd) (term_high_0 tl0)
   end
 for term_high_0) t

Generalizations:
Lemma conj1: forall (t : term_list) (lf3 : nat), le lf3
  (S
     ((fix term_high (t1 : term) : nat :=
         match t1 with
         | app _ l => S (term_high_0 l)
         end
       with term_high_0 (l : term_list) : nat :=
         match l with
         | tnil => O
         | tcons hd tl0 => Nat.max (term_high hd) (term_high_0 tl0)
         end
       for term_high_0) t)).
Lemma conj5: forall (t : term_list), le (term_high_0 t)
  (S
     ((fix term_high (t1 : term) : nat :=
         match t1 with
         | app _ l => S (term_high_0 l)
         end
       with term_high_0 (l : term_list) : nat :=
         match l with
         | tnil => O
         | tcons hd tl0 => Nat.max (term_high hd) (term_high_0 tl0)
         end
       for term_high_0) t)).


<---VALIDITY CHECKS--->
Time elapsed: 5 seconds
Valid:
Lemma conj5: forall (t : term_list), le (term_high_0 t)
  (S
     ((fix term_high (t1 : term) : nat :=
         match t1 with
         | app _ l => S (term_high_0 l)
         end
       with term_high_0 (l : term_list) : nat :=
         match l with
         | tnil => O
         | tcons hd tl0 => Nat.max (term_high hd) (term_high_0 tl0)
         end
       for term_high_0) t)).

Invalid:
Lemma conj1: forall (t : term_list) (lf3 : nat), le lf3
  (S
     ((fix term_high (t1 : term) : nat :=
         match t1 with
         | app _ l => S (term_high_0 l)
         end
       with term_high_0 (l : term_list) : nat :=
         match l with
         | tnil => O
         | tcons hd tl0 => Nat.max (term_high hd) (term_high_0 tl0)
         end
       for term_high_0) t)).

<---ADD IMPLICATIONS--->
Time elapsed: 10 seconds
Generalizations:
Lemma conj1: forall (t : term_list) (lf3 : nat), le lf3
  (S
     ((fix term_high (t1 : term) : nat :=
         match t1 with
         | app _ l => S (term_high_0 l)
         end
       with term_high_0 (l : term_list) : nat :=
         match l with
         | tnil => O
         | tcons hd tl0 => Nat.max (term_high hd) (term_high_0 tl0)
         end
       for term_high_0) t)).


<---VALIDITY CHECKS--->
Time elapsed: 12 seconds
Valid:

Invalid:
Lemma conj1: forall (t : term_list) (lf3 : nat), le lf3
  (S
     ((fix term_high (t1 : term) : nat :=
         match t1 with
         | app _ l => S (term_high_0 l)
         end
       with term_high_0 (l : term_list) : nat :=
         match l with
         | tnil => O
         | tcons hd tl0 => Nat.max (term_high hd) (term_high_0 tl0)
         end
       for term_high_0) t)).


<---CREATE SKETCHES--->
Time elapsed: 12 seconds
Sketches:
Sketch conj1_sketch0 : le lf3 (##hole##)
Sketch conj1_sketch1 : le lf3 (S (##hole##))
Sketch conj1_term_sketch0 : @eq nat
  (S
     ((fix term_high (t1 : term) : nat :=
         match t1 with
         | app _ l => S (term_high_0 l)
         end
       with term_high_0 (l : term_list) : nat :=
         match l with
         | tnil => O
         | tcons hd tl0 => Nat.max (term_high hd) (term_high_0 tl0)
         end
       for term_high_0) t)) (##hole##)
Sketch conj1_term_sketch1 : @eq nat
  ((fix term_high (t1 : term) : nat :=
      match t1 with
      | app _ l => S (term_high_0 l)
      end
    with term_high_0 (l : term_list) : nat :=
      match l with
      | tnil => O
      | tcons hd tl0 => Nat.max (term_high hd) (term_high_0 tl0)
      end
    for term_high_0) t) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 12 seconds
Problems per Sketch:
Sketch conj1_sketch1 --> Problem  synth_1
Sketch conj1_sketch0 --> Problem  synth_1
Sketch conj1_term_sketch0 --> Problem  synth_2
Sketch conj1_term_sketch1 --> Problem  synth_2


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 13 seconds

Problem: synth_1

Problem: synth_2

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 14 seconds
Lemmas:
Lemma candidate_1: forall (t : term_list), le (term_high_0 t)   (S      ((fix term_high (t1 : term) : nat :=          match t1 with          | app _ l => S (term_high_0 l)          end        with term_high_0 (l : term_list) : nat :=          match l with          | tnil => O          | tcons hd tl0 => Nat.max (term_high hd) (term_high_0 tl0)          end        for term_high_0) t)).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 14 seconds
Duplicates removed: 1
Filtered by Quickchick: 0
Filtered by script: 0
Remaining: 0

Lemmas: 