File Information
- File name: base
- Original Directory: /home/anabrendel/lfind/benchmarks/tree-automata/lemma_le_trans_172
- LFind Directory: /home/anabrendel/lfind/benchmarks/tree-automata/_lfind_lemma_le_trans_172
- Namespace: TreeAutomata
- Proof name: le_mult_l
- Theorem: Theorem le_mult_l: forall (n1 m0 p0 : nat) (_ : le n1 m0),
le (Init.Nat.mul n1 p0) (Init.Nat.mul m0 p0).
- Declarations: 
From lfind Require Import LFind.
Require Import Arith.
Require Import BinNat.
From IntMap Require Import Allmaps.

Proof Context
* Goal State: le (Init.Nat.mul n p) (Init.Nat.mul n0 p)

* Hypothesis:
H4 : le (Init.Nat.mul (S n) p) (Init.Nat.mul n0 p)
H0 : le (S n) (S n0)
H2 : le (S n) n0
H1 : or (@eq nat n n0) (le (S n) n0)
H : forall (p0 : nat) (_ : le (S n) n0),
le (Init.Nat.mul (S n) p0) (Init.Nat.mul n0 p0)
m : nat
Hrecn : forall (n1 : nat)
  (_ : forall (p0 : nat) (_ : le n n1),
       le (Init.Nat.mul n p0) (Init.Nat.mul n1 p0)) 
  (p0 : nat) (_ : le n (S n1)),
le (Init.Nat.mul n p0) (Init.Nat.mul (S n1) p0)
p : nat
H3 : le (Init.Nat.mul n p) (Init.Nat.mul (S n) p)
n : nat
n0 : nat

* Types:
Set
Prop
nat

* Polymorphic Types:


* Variables:
p : nat
n : nat
n0 : nat

* Terms:
forall
  (_ : forall (p0 : nat) (_ : le n _UNBOUND_REL_2),
       le (Init.Nat.mul n p0) (Init.Nat.mul _UNBOUND_REL_3 p0)) 
  (p0 : nat) (_ : le n (S _UNBOUND_REL_3)),
le (Init.Nat.mul n p0) (Init.Nat.mul (S _UNBOUND_REL_4) p0) : Prop
le (Init.Nat.mul n p) (Init.Nat.mul (S n) p) : Prop
S _UNBOUND_REL_3 : nat
forall (p0 : nat) (_ : le n _UNBOUND_REL_2),
le (Init.Nat.mul n p0) (Init.Nat.mul _UNBOUND_REL_3 p0) : Prop
le n (S _UNBOUND_REL_3) : Prop
le (S n) (S n0) : Prop
forall (p0 : nat) (_ : le (S n) n0),
le (Init.Nat.mul (S n) p0) (Init.Nat.mul n0 p0) : Prop
Init.Nat.mul (S n) p : nat
le (S n) n0 : Prop
le (Init.Nat.mul (S n) p) (Init.Nat.mul n0 p) : Prop
forall (n1 : nat)
  (_ : forall (p0 : nat) (_ : le n n1),
       le (Init.Nat.mul n p0) (Init.Nat.mul n1 p0)) 
  (p0 : nat) (_ : le n (S n1)),
le (Init.Nat.mul n p0) (Init.Nat.mul (S n1) p0) : Prop
S _UNBOUND_REL_4 : nat
Init.Nat.mul (S _UNBOUND_REL_4) _UNBOUND_REL_2 : nat
forall _ : le n (S _UNBOUND_REL_3),
le (Init.Nat.mul n _UNBOUND_REL_2)
  (Init.Nat.mul (S _UNBOUND_REL_4) _UNBOUND_REL_2) : Prop
S n0 : nat
n : nat
@eq nat n n0 : Prop
forall _ : le (S n) n0,
le (Init.Nat.mul (S n) _UNBOUND_REL_2) (Init.Nat.mul n0 _UNBOUND_REL_2) : Prop
Init.Nat.mul n0 _UNBOUND_REL_2 : nat
forall (p0 : nat) (_ : le n (S _UNBOUND_REL_3)),
le (Init.Nat.mul n p0) (Init.Nat.mul (S _UNBOUND_REL_4) p0) : Prop
le (Init.Nat.mul n p) (Init.Nat.mul n0 p) : Prop
Init.Nat.mul n _UNBOUND_REL_2 : nat
Init.Nat.mul n0 p : nat
Init.Nat.mul n p : nat
le n _UNBOUND_REL_2 : Prop
forall _ : le n _UNBOUND_REL_2,
le (Init.Nat.mul n _UNBOUND_REL_2)
  (Init.Nat.mul _UNBOUND_REL_3 _UNBOUND_REL_2) : Prop
Init.Nat.mul (S n) _UNBOUND_REL_2 : nat
or (@eq nat n n0) (le (S n) n0) : Prop
nat : Set
le (Init.Nat.mul n _UNBOUND_REL_2)
  (Init.Nat.mul _UNBOUND_REL_3 _UNBOUND_REL_2) : Prop
Init.Nat.mul _UNBOUND_REL_3 _UNBOUND_REL_2 : nat
le (Init.Nat.mul n _UNBOUND_REL_2)
  (Init.Nat.mul (S _UNBOUND_REL_4) _UNBOUND_REL_2) : Prop
p : nat
S n : nat
le (Init.Nat.mul (S n) _UNBOUND_REL_2) (Init.Nat.mul n0 _UNBOUND_REL_2) : Prop
n0 : nat

* Functions:
le  : forall (_ : nat) (_ : nat), Prop
S  : forall _ : nat, nat
@eq  : forall (A : Type) (_ : A) (_ : A), Prop
or  : forall (_ : Prop) (_ : Prop), Prop
Init.Nat.mul  : forall (_ : nat) (_ : nat), nat

<---GENERALIZATION--->
Time elapsed: 3 seconds
Generalized Variables:
lf1 : nat = Init.Nat.mul n0 p
lf2 : nat = Init.Nat.mul n p

Generalizations:
Lemma conj1: forall (lf2 : nat) (lf1 : nat), le lf2 lf1.
Lemma conj2: forall (lf1 : nat) (p : nat) (n : nat), le (Init.Nat.mul n p) lf1.
Lemma conj3: forall (lf2 : nat) (p : nat) (n0 : nat), le lf2 (Init.Nat.mul n0 p).
Lemma conj4: forall (p : nat) (n : nat) (n0 : nat), le (Init.Nat.mul n p) (Init.Nat.mul n0 p).


<---VALIDITY CHECKS--->
Time elapsed: 26 seconds
Valid:

Invalid:
Lemma conj4: forall (p : nat) (n : nat) (n0 : nat), le (Init.Nat.mul n p) (Init.Nat.mul n0 p).
Lemma conj3: forall (lf2 : nat) (p : nat) (n0 : nat), le lf2 (Init.Nat.mul n0 p).
Lemma conj2: forall (lf1 : nat) (p : nat) (n : nat), le (Init.Nat.mul n p) lf1.
Lemma conj1: forall (lf2 : nat) (lf1 : nat), le lf2 lf1.

<---ADD IMPLICATIONS--->
Time elapsed: 64 seconds
Generalizations:
Lemma conj4_imp: forall (p : nat) (n : nat) (n0 : nat), forall
  _ : and (le (Init.Nat.mul (S n) p) (Init.Nat.mul n0 p))
        (and (le (S n) n0)
           (and (or (@eq nat n n0) (le (S n) n0)) (le (S n) (S n0)))),
le (Init.Nat.mul n p) (Init.Nat.mul n0 p).
Lemma conj4: forall (p : nat) (n : nat) (n0 : nat), le (Init.Nat.mul n p) (Init.Nat.mul n0 p).
Lemma conj3: forall (lf2 : nat) (p : nat) (n0 : nat), le lf2 (Init.Nat.mul n0 p).
Lemma conj2_imp: forall (lf1 : nat) (p : nat) (n : nat), forall _ : le (Init.Nat.mul (S n) p) lf1, le (Init.Nat.mul n p) lf1.
Lemma conj2: forall (lf1 : nat) (p : nat) (n : nat), le (Init.Nat.mul n p) lf1.
Lemma conj1: forall (lf2 : nat) (lf1 : nat), le lf2 lf1.


<---VALIDITY CHECKS--->
Time elapsed: 79 seconds
Valid:
Lemma conj2_imp: forall (lf1 : nat) (p : nat) (n : nat), forall _ : le (Init.Nat.mul (S n) p) lf1, le (Init.Nat.mul n p) lf1.
Lemma conj4_imp: forall (p : nat) (n : nat) (n0 : nat), forall
  _ : and (le (Init.Nat.mul (S n) p) (Init.Nat.mul n0 p))
        (and (le (S n) n0)
           (and (or (@eq nat n n0) (le (S n) n0)) (le (S n) (S n0)))),
le (Init.Nat.mul n p) (Init.Nat.mul n0 p).

Invalid:
Lemma conj1: forall (lf2 : nat) (lf1 : nat), le lf2 lf1.
Lemma conj2: forall (lf1 : nat) (p : nat) (n : nat), le (Init.Nat.mul n p) lf1.
Lemma conj3: forall (lf2 : nat) (p : nat) (n0 : nat), le lf2 (Init.Nat.mul n0 p).
Lemma conj4: forall (p : nat) (n : nat) (n0 : nat), le (Init.Nat.mul n p) (Init.Nat.mul n0 p).


<---CREATE SKETCHES--->
Time elapsed: 79 seconds
Sketches:
Sketch conj2_sketch0 : le (##hole##) lf1
Sketch conj2_term_sketch0 : @eq nat (Init.Nat.mul n p) (##hole##)
Sketch conj3_sketch0 : le lf2 (##hole##)
Sketch conj3_term_sketch0 : @eq nat (Init.Nat.mul n0 p) (##hole##)
Sketch conj4_sketch0 : le (Init.Nat.mul n p) (##hole##)
Sketch conj4_sketch1 : le (##hole##) (Init.Nat.mul n0 p)
Sketch conj4_term_sketch0 : @eq nat (Init.Nat.mul n0 p) (##hole##)
Sketch conj4_term_sketch1 : @eq nat (Init.Nat.mul n p) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 134 seconds
Problems per Sketch:
Sketch conj4_term_sketch1 --> Problem  synth_2
Sketch conj2_term_sketch0 --> Problem  synth_2
Sketch conj3_sketch0 --> Problem  synth_3
Sketch conj3_term_sketch0 --> Problem  synth_4
Sketch conj4_term_sketch0 --> Problem  synth_4
Sketch conj4_sketch0 --> Problem  synth_5
Sketch conj2_sketch0 --> Problem  synth_1
Sketch conj4_sketch1 --> Problem  synth_6


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 196 seconds

Problem: synth_3

Problem: synth_6

Problem: synth_5

Problem: synth_4
 Nat.add (Nat.mul p n0) O
 Nat.add (Nat.mul n0 p) O
 Nat.mul p (Nat.mul n0 (S O))
 Nat.mul n0 (Nat.mul p (S O))
 Nat.mul p n0
 Nat.mul n0 p

Problem: synth_1

Problem: synth_2
 Nat.add (Nat.mul p n) O
 Nat.add (Nat.mul n p) O
 Nat.mul p (Nat.mul n (S O))
 Nat.mul n (Nat.mul p (S O))
 Nat.mul p n
 Nat.mul n p

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 196 seconds
Lemmas:
Lemma candidate_1: forall (n : nat) (p : nat) (lf1 : nat), forall _ : le (Init.Nat.mul (S n) p) lf1, le (Init.Nat.mul n p) lf1.
Lemma candidate_2: forall (n0 : nat) (n : nat) (p : nat), forall   _ : and (le (Init.Nat.mul (S n) p) (Init.Nat.mul n0 p))         (and (le (S n) n0)            (and (or (@eq nat n n0) (le (S n) n0)) (le (S n) (S n0)))), le (Init.Nat.mul n p) (Init.Nat.mul n0 p).
Lemma candidate_3: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.add (Nat.mul p n) O).
Lemma candidate_4: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.add (Nat.mul n p) O).
Lemma candidate_5: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul p (Nat.mul n (S O))).
Lemma candidate_6: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul n (Nat.mul p (S O))).
Lemma candidate_7: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul p n).
Lemma candidate_8: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul n p).
Lemma candidate_9: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.add (Nat.mul p n0) O).
Lemma candidate_10: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.add (Nat.mul n0 p) O).
Lemma candidate_11: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul p (Nat.mul n0 (S O))).
Lemma candidate_12: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul n0 (Nat.mul p (S O))).
Lemma candidate_13: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul p n0).
Lemma candidate_14: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul n0 p).
Lemma candidate_15: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.add (Nat.mul p n0) O).
Lemma candidate_16: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.add (Nat.mul n0 p) O).
Lemma candidate_17: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul p (Nat.mul n0 (S O))).
Lemma candidate_18: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul n0 (Nat.mul p (S O))).
Lemma candidate_19: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul p n0).
Lemma candidate_20: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul n0 p).
Lemma candidate_21: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.add (Nat.mul p n) O).
Lemma candidate_22: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.add (Nat.mul n p) O).
Lemma candidate_23: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul p (Nat.mul n (S O))).
Lemma candidate_24: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul n (Nat.mul p (S O))).
Lemma candidate_25: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul p n).
Lemma candidate_26: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul n p).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 249 seconds
Duplicates removed: 12
Filtered by Quickchick: 0
Filtered by script: 4
Remaining: 10

Lemmas: 
Lemma candidate_7: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul p n).
Lemma candidate_13: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul p n0).
Lemma candidate_3: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.add (Nat.mul p n) O).
Lemma candidate_9: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.add (Nat.mul p n0) O).
Lemma candidate_6: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul n (Nat.mul p (S O))).
Lemma candidate_5: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul p (Nat.mul n (S O))).
Lemma candidate_12: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul n0 (Nat.mul p (S O))).
Lemma candidate_11: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul p (Nat.mul n0 (S O))).
Lemma candidate_1: forall (n : nat) (p : nat) (lf1 : nat), forall _ : le (Init.Nat.mul (S n) p) lf1, le (Init.Nat.mul n p) lf1.
Lemma candidate_2: forall (n0 : nat) (n : nat) (p : nat), forall   _ : and (le (Init.Nat.mul (S n) p) (Init.Nat.mul n0 p))         (and (le (S n) n0)            (and (or (@eq nat n n0) (le (S n) n0)) (le (S n) (S n0)))), le (Init.Nat.mul n p) (Init.Nat.mul n0 p).