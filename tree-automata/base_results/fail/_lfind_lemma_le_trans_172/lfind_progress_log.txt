File Information
- File name: base
- Original Directory: /home/anabrendel/lfind/benchmarks/tree-automata/base_tests/lemma_le_trans_172
- LFind Directory: /home/anabrendel/lfind/benchmarks/tree-automata/base_tests/_lfind_lemma_le_trans_172
- Namespace: TreeAutomata
- Proof name: le_mult_l
- Theorem: Theorem le_mult_l: forall (n1 m0 p0 : nat) (_ : le n1 m0),
le (Init.Nat.mul n1 p0) (Init.Nat.mul m0 p0).
- Declarations: 
From lfind Require Import LFind.
Require Import Arith.
Require Import BinNat.
From IntMap Require Import Allmaps.

Proof Context
* Goal State: le (Init.Nat.mul n p) (Init.Nat.mul n0 p)

* Hypothesis:
H4 : le (Init.Nat.mul (S n) p) (Init.Nat.mul n0 p)
H0 : le (S n) (S n0)
H2 : le (S n) n0
H1 : or (@eq nat n n0) (le (S n) n0)
H : forall (p0 : nat) (_ : le (S n) n0),
le (Init.Nat.mul (S n) p0) (Init.Nat.mul n0 p0)
m : nat
Hrecn : forall (n1 : nat)
  (_ : forall (p0 : nat) (_ : le n n1),
       le (Init.Nat.mul n p0) (Init.Nat.mul n1 p0)) 
  (p0 : nat) (_ : le n (S n1)),
le (Init.Nat.mul n p0) (Init.Nat.mul (S n1) p0)
p : nat
H3 : le (Init.Nat.mul n p) (Init.Nat.mul (S n) p)
n : nat
n0 : nat

* Types:
Set
Prop
nat

* Polymorphic Types:


* Variables:
p : nat
n : nat
n0 : nat

* Terms:
forall
  (_ : forall (p0 : nat) (_ : le n _UNBOUND_REL_2),
       le (Init.Nat.mul n p0) (Init.Nat.mul _UNBOUND_REL_3 p0)) 
  (p0 : nat) (_ : le n (S _UNBOUND_REL_3)),
le (Init.Nat.mul n p0) (Init.Nat.mul (S _UNBOUND_REL_4) p0) : Prop
le (Init.Nat.mul n p) (Init.Nat.mul (S n) p) : Prop
S _UNBOUND_REL_3 : nat
forall (p0 : nat) (_ : le n _UNBOUND_REL_2),
le (Init.Nat.mul n p0) (Init.Nat.mul _UNBOUND_REL_3 p0) : Prop
le n (S _UNBOUND_REL_3) : Prop
le (S n) (S n0) : Prop
forall (p0 : nat) (_ : le (S n) n0),
le (Init.Nat.mul (S n) p0) (Init.Nat.mul n0 p0) : Prop
Init.Nat.mul (S n) p : nat
le (S n) n0 : Prop
le (Init.Nat.mul (S n) p) (Init.Nat.mul n0 p) : Prop
forall (n1 : nat)
  (_ : forall (p0 : nat) (_ : le n n1),
       le (Init.Nat.mul n p0) (Init.Nat.mul n1 p0)) 
  (p0 : nat) (_ : le n (S n1)),
le (Init.Nat.mul n p0) (Init.Nat.mul (S n1) p0) : Prop
S _UNBOUND_REL_4 : nat
Init.Nat.mul (S _UNBOUND_REL_4) _UNBOUND_REL_2 : nat
forall _ : le n (S _UNBOUND_REL_3),
le (Init.Nat.mul n _UNBOUND_REL_2)
  (Init.Nat.mul (S _UNBOUND_REL_4) _UNBOUND_REL_2) : Prop
S n0 : nat
n : nat
@eq nat n n0 : Prop
forall _ : le (S n) n0,
le (Init.Nat.mul (S n) _UNBOUND_REL_2) (Init.Nat.mul n0 _UNBOUND_REL_2) : Prop
Init.Nat.mul n0 _UNBOUND_REL_2 : nat
forall (p0 : nat) (_ : le n (S _UNBOUND_REL_3)),
le (Init.Nat.mul n p0) (Init.Nat.mul (S _UNBOUND_REL_4) p0) : Prop
le (Init.Nat.mul n p) (Init.Nat.mul n0 p) : Prop
Init.Nat.mul n _UNBOUND_REL_2 : nat
Init.Nat.mul n0 p : nat
Init.Nat.mul n p : nat
le n _UNBOUND_REL_2 : Prop
forall _ : le n _UNBOUND_REL_2,
le (Init.Nat.mul n _UNBOUND_REL_2)
  (Init.Nat.mul _UNBOUND_REL_3 _UNBOUND_REL_2) : Prop
Init.Nat.mul (S n) _UNBOUND_REL_2 : nat
or (@eq nat n n0) (le (S n) n0) : Prop
nat : Set
le (Init.Nat.mul n _UNBOUND_REL_2)
  (Init.Nat.mul _UNBOUND_REL_3 _UNBOUND_REL_2) : Prop
Init.Nat.mul _UNBOUND_REL_3 _UNBOUND_REL_2 : nat
le (Init.Nat.mul n _UNBOUND_REL_2)
  (Init.Nat.mul (S _UNBOUND_REL_4) _UNBOUND_REL_2) : Prop
p : nat
S n : nat
le (Init.Nat.mul (S n) _UNBOUND_REL_2) (Init.Nat.mul n0 _UNBOUND_REL_2) : Prop
n0 : nat

* Functions:
le  : forall (_ : nat) (_ : nat), Prop
S  : forall _ : nat, nat
@eq  : forall (A : Type) (_ : A) (_ : A), Prop
or  : forall (_ : Prop) (_ : Prop), Prop
Init.Nat.mul  : forall (_ : nat) (_ : nat), nat

<---GENERALIZATION--->
Time elapsed: 2 seconds
Generalized Variables:
lf1 : nat = Init.Nat.mul n0 p
lf2 : nat = Init.Nat.mul n p

Generalizations:
Lemma conj1: forall (lf2 : nat) (lf1 : nat), le lf2 lf1.
Lemma conj2: forall (lf1 : nat) (p : nat) (n : nat), le (Init.Nat.mul n p) lf1.
Lemma conj3: forall (lf2 : nat) (p : nat) (n0 : nat), le lf2 (Init.Nat.mul n0 p).
Lemma conj4: forall (p : nat) (n : nat) (n0 : nat), le (Init.Nat.mul n p) (Init.Nat.mul n0 p).


<---VALIDITY CHECKS--->
Time elapsed: 17 seconds
Valid:

Invalid:
Lemma conj4: forall (p : nat) (n : nat) (n0 : nat), le (Init.Nat.mul n p) (Init.Nat.mul n0 p).
Lemma conj3: forall (lf2 : nat) (p : nat) (n0 : nat), le lf2 (Init.Nat.mul n0 p).
Lemma conj2: forall (lf1 : nat) (p : nat) (n : nat), le (Init.Nat.mul n p) lf1.
Lemma conj1: forall (lf2 : nat) (lf1 : nat), le lf2 lf1.

<---ADD IMPLICATIONS--->
Time elapsed: 45 seconds
Generalizations:
Lemma conj4: forall (p : nat) (n : nat) (n0 : nat), le (Init.Nat.mul n p) (Init.Nat.mul n0 p).
Lemma conj4_imp: forall (p : nat) (n : nat) (n0 : nat), forall
  _ : forall (_ : le (S n) (S n0)) (_ : or (@eq nat n n0) (le (S n) n0))
        (_ : le (S n) n0), le (Init.Nat.mul (S n) p) (Init.Nat.mul n0 p),
le (Init.Nat.mul n p) (Init.Nat.mul n0 p).
Lemma conj3: forall (lf2 : nat) (p : nat) (n0 : nat), le lf2 (Init.Nat.mul n0 p).
Lemma conj2: forall (lf1 : nat) (p : nat) (n : nat), le (Init.Nat.mul n p) lf1.
Lemma conj2_imp: forall (lf1 : nat) (p : nat) (n : nat), forall _ : le (Init.Nat.mul (S n) p) lf1, le (Init.Nat.mul n p) lf1.
Lemma conj1: forall (lf2 : nat) (lf1 : nat), le lf2 lf1.


<---VALIDITY CHECKS--->
Time elapsed: 53 seconds
Valid:
Lemma conj2_imp: forall (lf1 : nat) (p : nat) (n : nat), forall _ : le (Init.Nat.mul (S n) p) lf1, le (Init.Nat.mul n p) lf1.

Invalid:
Lemma conj1: forall (lf2 : nat) (lf1 : nat), le lf2 lf1.
Lemma conj2: forall (lf1 : nat) (p : nat) (n : nat), le (Init.Nat.mul n p) lf1.
Lemma conj3: forall (lf2 : nat) (p : nat) (n0 : nat), le lf2 (Init.Nat.mul n0 p).
Lemma conj4_imp: forall (p : nat) (n : nat) (n0 : nat), forall
  _ : forall (_ : le (S n) (S n0)) (_ : or (@eq nat n n0) (le (S n) n0))
        (_ : le (S n) n0), le (Init.Nat.mul (S n) p) (Init.Nat.mul n0 p),
le (Init.Nat.mul n p) (Init.Nat.mul n0 p).
Lemma conj4: forall (p : nat) (n : nat) (n0 : nat), le (Init.Nat.mul n p) (Init.Nat.mul n0 p).


<---CREATE SKETCHES--->
Time elapsed: 54 seconds
Sketches:
Sketch conj2_sketch0 : le (##hole##) lf1
Sketch conj2_term_sketch0 : @eq nat (Init.Nat.mul n p) (##hole##)
Sketch conj3_sketch0 : le lf2 (##hole##)
Sketch conj3_term_sketch0 : @eq nat (Init.Nat.mul n0 p) (##hole##)
Sketch conj4_imp_sketch2 : forall
  _ : forall (_ : le (S n) (S n0)) (_ : or (@eq nat n n0) (le (S n) n0))
        (_ : le (S n) n0), le (##hole##) (Init.Nat.mul n0 p),
le (Init.Nat.mul n p) (Init.Nat.mul n0 p)
Sketch conj4_imp_sketch0 : forall
  _ : forall (_ : le (S n) (S n0)) (_ : or (@eq nat n n0) (le (S n) n0))
        (_ : le (S n) n0), le (Init.Nat.mul (S n) p) (##hole##),
le (Init.Nat.mul n p) (##hole##)
Sketch conj4_imp_sketch1 : forall
  _ : forall (_ : le (S n) (S n0)) (_ : or (@eq nat n n0) (le (S n) n0))
        (_ : le (S n) n0), le (Init.Nat.mul (S n) p) (Init.Nat.mul n0 p),
le (##hole##) (Init.Nat.mul n0 p)
Sketch conj4_imp_sketch3 : forall
  _ : forall (_ : le (S n) (##hole##)) (_ : or (@eq nat n n0) (le (S n) n0))
        (_ : le (S n) n0), le (Init.Nat.mul (S n) p) (Init.Nat.mul n0 p),
le (Init.Nat.mul n p) (Init.Nat.mul n0 p)
Sketch conj4_imp_sketch4 : forall
  _ : forall (_ : le (##hole##) (S n0))
        (_ : or (@eq nat n n0) (le (##hole##) n0)) 
        (_ : le (##hole##) n0),
      le (Init.Nat.mul (##hole##) p) (Init.Nat.mul n0 p),
le (Init.Nat.mul n p) (Init.Nat.mul n0 p)
Sketch conj4_imp_term_sketch2 : @eq nat (Init.Nat.mul (S n) p) (##hole##)
Sketch conj4_imp_term_sketch0 : @eq nat (Init.Nat.mul n0 p) (##hole##)
Sketch conj4_imp_term_sketch1 : @eq nat (Init.Nat.mul n p) (##hole##)
Sketch conj4_imp_term_sketch3 : @eq nat (S n0) (##hole##)
Sketch conj4_imp_term_sketch4 : @eq nat (S n) (##hole##)
Sketch conj4_sketch0 : le (Init.Nat.mul n p) (##hole##)
Sketch conj4_sketch1 : le (##hole##) (Init.Nat.mul n0 p)
Sketch conj4_term_sketch0 : @eq nat (Init.Nat.mul n0 p) (##hole##)
Sketch conj4_term_sketch1 : @eq nat (Init.Nat.mul n p) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 139 seconds
Problems per Sketch:
Sketch conj4_imp_sketch4 --> Problem  synth_9
Sketch conj4_imp_sketch2 --> Problem  synth_5
Sketch conj3_term_sketch0 --> Problem  synth_4
Sketch conj4_imp_term_sketch2 --> Problem  synth_10
Sketch conj4_imp_term_sketch0 --> Problem  synth_4
Sketch conj4_imp_term_sketch3 --> Problem  synth_11
Sketch conj4_sketch0 --> Problem  synth_13
Sketch conj4_sketch1 --> Problem  synth_14
Sketch conj4_term_sketch1 --> Problem  synth_2
Sketch conj4_imp_sketch1 --> Problem  synth_7
Sketch conj2_term_sketch0 --> Problem  synth_2
Sketch conj4_imp_term_sketch1 --> Problem  synth_2
Sketch conj3_sketch0 --> Problem  synth_3
Sketch conj4_term_sketch0 --> Problem  synth_4
Sketch conj4_imp_sketch0 --> Problem  synth_6
Sketch conj4_imp_sketch3 --> Problem  synth_8
Sketch conj2_sketch0 --> Problem  synth_1
Sketch conj4_imp_term_sketch4 --> Problem  synth_12


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 204 seconds

Problem: synth_14

Problem: synth_10
 Nat.mul (Nat.mul p (S O)) (S n)
 Nat.mul (Nat.mul p (S n)) (S O)
 Nat.add (Nat.mul p (S n)) O
 Nat.add (Nat.mul p (S O)) (Nat.mul n (Nat.mul p (S O)))
 Nat.add p (Nat.mul n p)
 Nat.mul p (S n)

Problem: synth_8
 S (Nat.add (Nat.mul n O) (Nat.mul n0 (S (Nat.mul n O))))
 S (Nat.add (Nat.mul p O) (Nat.mul n0 (S (Nat.mul p O))))
 S (Nat.add (Nat.mul n0 (S O)) O)
 S (Nat.add n0 O)
 S (Nat.mul n0 (S O))
 S n0

Problem: synth_3

Problem: synth_9
 S (Nat.add (Nat.mul n O) (Nat.mul n (S (Nat.mul n O))))
 S (Nat.add (Nat.mul p O) (Nat.mul n (S (Nat.mul p O))))
 S (Nat.add (Nat.mul n (S O)) O)
 S (Nat.add n O)
 S (Nat.mul n (S O))
 S n

Problem: synth_13

Problem: synth_12
 S (Nat.add (Nat.add n O) O)
 S (Nat.add (Nat.mul n O) (Nat.mul n (S (Nat.mul n O))))
 S (Nat.add (Nat.mul n (S O)) O)
 S (Nat.add n O)
 S (Nat.mul n (S O))
 S n

Problem: synth_6
 Nat.mul n0 (Nat.mul p (S O))
 Nat.mul p (Nat.mul p n0)
 Nat.mul p (Nat.mul n0 p)
 Nat.mul n0 (Nat.mul p p)
 Nat.mul p n0
 Nat.mul n0 p

Problem: synth_11
 S (Nat.add (Nat.add n0 O) O)
 S (Nat.add (Nat.mul n0 O) (Nat.mul n0 (S (Nat.mul n0 O))))
 S (Nat.add (Nat.mul n0 (S O)) O)
 S (Nat.add n0 O)
 S (Nat.mul n0 (S O))
 S n0

Problem: synth_7
 Nat.mul p (Nat.mul n (S n0))
 Nat.mul n (Nat.mul p (S n0))
 Nat.mul p (Nat.mul n (S O))
 Nat.mul n (Nat.mul p (S O))
 Nat.mul p n
 Nat.mul n p

Problem: synth_5
 Nat.mul (Nat.mul p (S O)) (S n)
 Nat.mul (Nat.mul p (S n)) (S O)
 Nat.add (Nat.mul p (S n)) O
 Nat.add (Nat.mul p (S O)) (Nat.mul n (Nat.mul p (S O)))
 Nat.add p (Nat.mul n p)
 Nat.mul p (S n)

Problem: synth_4
 Nat.mul n0 (Nat.mul p (S O))
 Nat.mul p (Nat.mul p n0)
 Nat.mul p (Nat.mul n0 p)
 Nat.mul n0 (Nat.mul p p)
 Nat.mul p n0
 Nat.mul n0 p

Problem: synth_1

Problem: synth_2
 Nat.add (Nat.mul p n) O
 Nat.add (Nat.mul n p) O
 Nat.mul p (Nat.mul n (S O))
 Nat.mul n (Nat.mul p (S O))
 Nat.mul p n
 Nat.mul n p

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 205 seconds
Lemmas:
Lemma candidate_1: forall (n : nat) (p : nat) (lf1 : nat), forall _ : le (Init.Nat.mul (S n) p) lf1, le (Init.Nat.mul n p) lf1.
Lemma candidate_2: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.add (Nat.mul p n) O).
Lemma candidate_3: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.add (Nat.mul n p) O).
Lemma candidate_4: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul p (Nat.mul n (S O))).
Lemma candidate_5: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul n (Nat.mul p (S O))).
Lemma candidate_6: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul p n).
Lemma candidate_7: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul n p).
Lemma candidate_8: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul n0 (Nat.mul p (S O))).
Lemma candidate_9: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul p (Nat.mul p n0)).
Lemma candidate_10: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul p (Nat.mul n0 p)).
Lemma candidate_11: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul n0 (Nat.mul p p)).
Lemma candidate_12: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul p n0).
Lemma candidate_13: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul n0 p).
Lemma candidate_14: forall (n0 : nat) (n : nat) (p : nat), forall   _ : forall (_ : le (S n) (S n0)) (_ : or (@eq nat n n0) (le (S n) n0))         (_ : le (S n) n0),       le (Nat.mul (Nat.mul p (S O)) (S n)) (Init.Nat.mul n0 p), le (Init.Nat.mul n p) (Init.Nat.mul n0 p).
Lemma candidate_15: forall (n0 : nat) (n : nat) (p : nat), forall   _ : forall (_ : le (S n) (S n0)) (_ : or (@eq nat n n0) (le (S n) n0))         (_ : le (S n) n0),       le (Nat.mul (Nat.mul p (S n)) (S O)) (Init.Nat.mul n0 p), le (Init.Nat.mul n p) (Init.Nat.mul n0 p).
Lemma candidate_16: forall (n0 : nat) (n : nat) (p : nat), forall   _ : forall (_ : le (S n) (S n0)) (_ : or (@eq nat n n0) (le (S n) n0))         (_ : le (S n) n0),       le (Nat.add (Nat.mul p (S n)) O) (Init.Nat.mul n0 p), le (Init.Nat.mul n p) (Init.Nat.mul n0 p).
Lemma candidate_17: forall (n0 : nat) (n : nat) (p : nat), forall   _ : forall (_ : le (S n) (S n0)) (_ : or (@eq nat n n0) (le (S n) n0))         (_ : le (S n) n0),       le (Nat.add (Nat.mul p (S O)) (Nat.mul n (Nat.mul p (S O))))         (Init.Nat.mul n0 p), le (Init.Nat.mul n p) (Init.Nat.mul n0 p).
Lemma candidate_18: forall (n0 : nat) (n : nat) (p : nat), forall   _ : forall (_ : le (S n) (S n0)) (_ : or (@eq nat n n0) (le (S n) n0))         (_ : le (S n) n0), le (Nat.add p (Nat.mul n p)) (Init.Nat.mul n0 p), le (Init.Nat.mul n p) (Init.Nat.mul n0 p).
Lemma candidate_19: forall (n0 : nat) (n : nat) (p : nat), forall   _ : forall (_ : le (S n) (S n0)) (_ : or (@eq nat n n0) (le (S n) n0))         (_ : le (S n) n0), le (Nat.mul p (S n)) (Init.Nat.mul n0 p), le (Init.Nat.mul n p) (Init.Nat.mul n0 p).
Lemma candidate_20: forall (n0 : nat) (n : nat) (p : nat), forall   _ : forall (_ : le (S n) (S n0)) (_ : or (@eq nat n n0) (le (S n) n0))         (_ : le (S n) n0),       le (Init.Nat.mul (S n) p) (Nat.mul n0 (Nat.mul p (S O))), le (Init.Nat.mul n p) (Nat.mul n0 (Nat.mul p (S O))).
Lemma candidate_21: forall (n0 : nat) (n : nat) (p : nat), forall   _ : forall (_ : le (S n) (S n0)) (_ : or (@eq nat n n0) (le (S n) n0))         (_ : le (S n) n0),       le (Init.Nat.mul (S n) p) (Nat.mul p (Nat.mul p n0)), le (Init.Nat.mul n p) (Nat.mul p (Nat.mul p n0)).
Lemma candidate_22: forall (n0 : nat) (n : nat) (p : nat), forall   _ : forall (_ : le (S n) (S n0)) (_ : or (@eq nat n n0) (le (S n) n0))         (_ : le (S n) n0),       le (Init.Nat.mul (S n) p) (Nat.mul p (Nat.mul n0 p)), le (Init.Nat.mul n p) (Nat.mul p (Nat.mul n0 p)).
Lemma candidate_23: forall (n0 : nat) (n : nat) (p : nat), forall   _ : forall (_ : le (S n) (S n0)) (_ : or (@eq nat n n0) (le (S n) n0))         (_ : le (S n) n0),       le (Init.Nat.mul (S n) p) (Nat.mul n0 (Nat.mul p p)), le (Init.Nat.mul n p) (Nat.mul n0 (Nat.mul p p)).
Lemma candidate_24: forall (n0 : nat) (n : nat) (p : nat), forall   _ : forall (_ : le (S n) (S n0)) (_ : or (@eq nat n n0) (le (S n) n0))         (_ : le (S n) n0), le (Init.Nat.mul (S n) p) (Nat.mul p n0), le (Init.Nat.mul n p) (Nat.mul p n0).
Lemma candidate_25: forall (n0 : nat) (n : nat) (p : nat), forall   _ : forall (_ : le (S n) (S n0)) (_ : or (@eq nat n n0) (le (S n) n0))         (_ : le (S n) n0), le (Init.Nat.mul (S n) p) (Nat.mul n0 p), le (Init.Nat.mul n p) (Nat.mul n0 p).
Lemma candidate_26: forall (n0 : nat) (n : nat) (p : nat), forall   _ : forall (_ : le (S n) (S n0)) (_ : or (@eq nat n n0) (le (S n) n0))         (_ : le (S n) n0), le (Init.Nat.mul (S n) p) (Init.Nat.mul n0 p), le (Nat.mul p (Nat.mul n (S n0))) (Init.Nat.mul n0 p).
Lemma candidate_27: forall (n0 : nat) (n : nat) (p : nat), forall   _ : forall (_ : le (S n) (S n0)) (_ : or (@eq nat n n0) (le (S n) n0))         (_ : le (S n) n0), le (Init.Nat.mul (S n) p) (Init.Nat.mul n0 p), le (Nat.mul n (Nat.mul p (S n0))) (Init.Nat.mul n0 p).
Lemma candidate_28: forall (n0 : nat) (n : nat) (p : nat), forall   _ : forall (_ : le (S n) (S n0)) (_ : or (@eq nat n n0) (le (S n) n0))         (_ : le (S n) n0), le (Init.Nat.mul (S n) p) (Init.Nat.mul n0 p), le (Nat.mul p (Nat.mul n (S O))) (Init.Nat.mul n0 p).
Lemma candidate_29: forall (n0 : nat) (n : nat) (p : nat), forall   _ : forall (_ : le (S n) (S n0)) (_ : or (@eq nat n n0) (le (S n) n0))         (_ : le (S n) n0), le (Init.Nat.mul (S n) p) (Init.Nat.mul n0 p), le (Nat.mul n (Nat.mul p (S O))) (Init.Nat.mul n0 p).
Lemma candidate_30: forall (n0 : nat) (n : nat) (p : nat), forall   _ : forall (_ : le (S n) (S n0)) (_ : or (@eq nat n n0) (le (S n) n0))         (_ : le (S n) n0), le (Init.Nat.mul (S n) p) (Init.Nat.mul n0 p), le (Nat.mul p n) (Init.Nat.mul n0 p).
Lemma candidate_31: forall (n0 : nat) (n : nat) (p : nat), forall   _ : forall (_ : le (S n) (S n0)) (_ : or (@eq nat n n0) (le (S n) n0))         (_ : le (S n) n0), le (Init.Nat.mul (S n) p) (Init.Nat.mul n0 p), le (Nat.mul n p) (Init.Nat.mul n0 p).
Lemma candidate_32: forall (n0 : nat) (n : nat) (p : nat), forall   _ : forall         (_ : le (S n)                (S (Nat.add (Nat.mul n O) (Nat.mul n0 (S (Nat.mul n O))))))         (_ : or (@eq nat n n0) (le (S n) n0)) (_ : le (S n) n0),       le (Init.Nat.mul (S n) p) (Init.Nat.mul n0 p), le (Init.Nat.mul n p) (Init.Nat.mul n0 p).
Lemma candidate_33: forall (n0 : nat) (n : nat) (p : nat), forall   _ : forall         (_ : le (S n)                (S (Nat.add (Nat.mul p O) (Nat.mul n0 (S (Nat.mul p O))))))         (_ : or (@eq nat n n0) (le (S n) n0)) (_ : le (S n) n0),       le (Init.Nat.mul (S n) p) (Init.Nat.mul n0 p), le (Init.Nat.mul n p) (Init.Nat.mul n0 p).
Lemma candidate_34: forall (n0 : nat) (n : nat) (p : nat), forall   _ : forall (_ : le (S n) (S (Nat.add (Nat.mul n0 (S O)) O)))         (_ : or (@eq nat n n0) (le (S n) n0)) (_ : le (S n) n0),       le (Init.Nat.mul (S n) p) (Init.Nat.mul n0 p), le (Init.Nat.mul n p) (Init.Nat.mul n0 p).
Lemma candidate_35: forall (n0 : nat) (n : nat) (p : nat), forall   _ : forall (_ : le (S n) (S (Nat.add n0 O)))         (_ : or (@eq nat n n0) (le (S n) n0)) (_ : le (S n) n0),       le (Init.Nat.mul (S n) p) (Init.Nat.mul n0 p), le (Init.Nat.mul n p) (Init.Nat.mul n0 p).
Lemma candidate_36: forall (n0 : nat) (n : nat) (p : nat), forall   _ : forall (_ : le (S n) (S (Nat.mul n0 (S O))))         (_ : or (@eq nat n n0) (le (S n) n0)) (_ : le (S n) n0),       le (Init.Nat.mul (S n) p) (Init.Nat.mul n0 p), le (Init.Nat.mul n p) (Init.Nat.mul n0 p).
Lemma candidate_37: forall (n0 : nat) (n : nat) (p : nat), forall   _ : forall (_ : le (S n) (S n0)) (_ : or (@eq nat n n0) (le (S n) n0))         (_ : le (S n) n0), le (Init.Nat.mul (S n) p) (Init.Nat.mul n0 p), le (Init.Nat.mul n p) (Init.Nat.mul n0 p).
Lemma candidate_38: forall (n0 : nat) (n : nat) (p : nat), forall   _ : forall         (_ : le (S (Nat.add (Nat.mul n O) (Nat.mul n (S (Nat.mul n O)))))                (S n0))         (_ : or (@eq nat n n0)                (le (S (Nat.add (Nat.mul n O) (Nat.mul n (S (Nat.mul n O)))))                   n0))         (_ : le (S (Nat.add (Nat.mul n O) (Nat.mul n (S (Nat.mul n O))))) n0),       le         (Init.Nat.mul            (S (Nat.add (Nat.mul n O) (Nat.mul n (S (Nat.mul n O))))) p)         (Init.Nat.mul n0 p), le (Init.Nat.mul n p) (Init.Nat.mul n0 p).
Lemma candidate_39: forall (n0 : nat) (n : nat) (p : nat), forall   _ : forall         (_ : le (S (Nat.add (Nat.mul p O) (Nat.mul n (S (Nat.mul p O)))))                (S n0))         (_ : or (@eq nat n n0)                (le (S (Nat.add (Nat.mul p O) (Nat.mul n (S (Nat.mul p O)))))                   n0))         (_ : le (S (Nat.add (Nat.mul p O) (Nat.mul n (S (Nat.mul p O))))) n0),       le         (Init.Nat.mul            (S (Nat.add (Nat.mul p O) (Nat.mul n (S (Nat.mul p O))))) p)         (Init.Nat.mul n0 p), le (Init.Nat.mul n p) (Init.Nat.mul n0 p).
Lemma candidate_40: forall (n0 : nat) (n : nat) (p : nat), forall   _ : forall (_ : le (S (Nat.add (Nat.mul n (S O)) O)) (S n0))         (_ : or (@eq nat n n0) (le (S (Nat.add (Nat.mul n (S O)) O)) n0))         (_ : le (S (Nat.add (Nat.mul n (S O)) O)) n0),       le (Init.Nat.mul (S (Nat.add (Nat.mul n (S O)) O)) p)         (Init.Nat.mul n0 p), le (Init.Nat.mul n p) (Init.Nat.mul n0 p).
Lemma candidate_41: forall (n0 : nat) (n : nat) (p : nat), forall   _ : forall (_ : le (S (Nat.add n O)) (S n0))         (_ : or (@eq nat n n0) (le (S (Nat.add n O)) n0))         (_ : le (S (Nat.add n O)) n0),       le (Init.Nat.mul (S (Nat.add n O)) p) (Init.Nat.mul n0 p), le (Init.Nat.mul n p) (Init.Nat.mul n0 p).
Lemma candidate_42: forall (n0 : nat) (n : nat) (p : nat), forall   _ : forall (_ : le (S (Nat.mul n (S O))) (S n0))         (_ : or (@eq nat n n0) (le (S (Nat.mul n (S O))) n0))         (_ : le (S (Nat.mul n (S O))) n0),       le (Init.Nat.mul (S (Nat.mul n (S O))) p) (Init.Nat.mul n0 p), le (Init.Nat.mul n p) (Init.Nat.mul n0 p).
Lemma candidate_43: forall (n0 : nat) (n : nat) (p : nat), forall   _ : forall (_ : le (S n) (S n0)) (_ : or (@eq nat n n0) (le (S n) n0))         (_ : le (S n) n0), le (Init.Nat.mul (S n) p) (Init.Nat.mul n0 p), le (Init.Nat.mul n p) (Init.Nat.mul n0 p).
Lemma candidate_44: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul (S n) p) (Nat.mul (Nat.mul p (S O)) (S n)).
Lemma candidate_45: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul (S n) p) (Nat.mul (Nat.mul p (S n)) (S O)).
Lemma candidate_46: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul (S n) p) (Nat.add (Nat.mul p (S n)) O).
Lemma candidate_47: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul (S n) p)   (Nat.add (Nat.mul p (S O)) (Nat.mul n (Nat.mul p (S O)))).
Lemma candidate_48: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul (S n) p) (Nat.add p (Nat.mul n p)).
Lemma candidate_49: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul (S n) p) (Nat.mul p (S n)).
Lemma candidate_50: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul n0 (Nat.mul p (S O))).
Lemma candidate_51: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul p (Nat.mul p n0)).
Lemma candidate_52: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul p (Nat.mul n0 p)).
Lemma candidate_53: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul n0 (Nat.mul p p)).
Lemma candidate_54: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul p n0).
Lemma candidate_55: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul n0 p).
Lemma candidate_56: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.add (Nat.mul p n) O).
Lemma candidate_57: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.add (Nat.mul n p) O).
Lemma candidate_58: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul p (Nat.mul n (S O))).
Lemma candidate_59: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul n (Nat.mul p (S O))).
Lemma candidate_60: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul p n).
Lemma candidate_61: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul n p).
Lemma candidate_62: forall (n0 : nat), @eq nat (S n0) (S (Nat.add (Nat.add n0 O) O)).
Lemma candidate_63: forall (n0 : nat), @eq nat (S n0) (S (Nat.add (Nat.mul n0 O) (Nat.mul n0 (S (Nat.mul n0 O))))).
Lemma candidate_64: forall (n0 : nat), @eq nat (S n0) (S (Nat.add (Nat.mul n0 (S O)) O)).
Lemma candidate_65: forall (n0 : nat), @eq nat (S n0) (S (Nat.add n0 O)).
Lemma candidate_66: forall (n0 : nat), @eq nat (S n0) (S (Nat.mul n0 (S O))).
Lemma candidate_67: forall (n0 : nat), @eq nat (S n0) (S n0).
Lemma candidate_68: forall (n : nat), @eq nat (S n) (S (Nat.add (Nat.add n O) O)).
Lemma candidate_69: forall (n : nat), @eq nat (S n) (S (Nat.add (Nat.mul n O) (Nat.mul n (S (Nat.mul n O))))).
Lemma candidate_70: forall (n : nat), @eq nat (S n) (S (Nat.add (Nat.mul n (S O)) O)).
Lemma candidate_71: forall (n : nat), @eq nat (S n) (S (Nat.add n O)).
Lemma candidate_72: forall (n : nat), @eq nat (S n) (S (Nat.mul n (S O))).
Lemma candidate_73: forall (n : nat), @eq nat (S n) (S n).
Lemma candidate_74: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul n0 (Nat.mul p (S O))).
Lemma candidate_75: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul p (Nat.mul p n0)).
Lemma candidate_76: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul p (Nat.mul n0 p)).
Lemma candidate_77: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul n0 (Nat.mul p p)).
Lemma candidate_78: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul p n0).
Lemma candidate_79: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul n0 p).
Lemma candidate_80: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.add (Nat.mul p n) O).
Lemma candidate_81: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.add (Nat.mul n p) O).
Lemma candidate_82: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul p (Nat.mul n (S O))).
Lemma candidate_83: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul n (Nat.mul p (S O))).
Lemma candidate_84: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul p n).
Lemma candidate_85: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul n p).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 327 seconds
Duplicates removed: 25
Filtered by Quickchick: 32
Filtered by script: 6
Remaining: 22

Lemmas: 
Lemma candidate_71: forall (n : nat), @eq nat (S n) (S (Nat.add n O)).
Lemma candidate_65: forall (n0 : nat), @eq nat (S n0) (S (Nat.add n0 O)).
Lemma candidate_72: forall (n : nat), @eq nat (S n) (S (Nat.mul n (S O))).
Lemma candidate_66: forall (n0 : nat), @eq nat (S n0) (S (Nat.mul n0 (S O))).
Lemma candidate_6: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul p n).
Lemma candidate_12: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul p n0).
Lemma candidate_68: forall (n : nat), @eq nat (S n) (S (Nat.add (Nat.add n O) O)).
Lemma candidate_62: forall (n0 : nat), @eq nat (S n0) (S (Nat.add (Nat.add n0 O) O)).
Lemma candidate_70: forall (n : nat), @eq nat (S n) (S (Nat.add (Nat.mul n (S O)) O)).
Lemma candidate_49: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul (S n) p) (Nat.mul p (S n)).
Lemma candidate_64: forall (n0 : nat), @eq nat (S n0) (S (Nat.add (Nat.mul n0 (S O)) O)).
Lemma candidate_2: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.add (Nat.mul p n) O).
Lemma candidate_5: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul n (Nat.mul p (S O))).
Lemma candidate_4: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul p (Nat.mul n (S O))).
Lemma candidate_8: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul n0 (Nat.mul p (S O))).
Lemma candidate_46: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul (S n) p) (Nat.add (Nat.mul p (S n)) O).
Lemma candidate_45: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul (S n) p) (Nat.mul (Nat.mul p (S n)) (S O)).
Lemma candidate_44: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul (S n) p) (Nat.mul (Nat.mul p (S O)) (S n)).
Lemma candidate_1: forall (n : nat) (p : nat) (lf1 : nat), forall _ : le (Init.Nat.mul (S n) p) lf1, le (Init.Nat.mul n p) lf1.
Lemma candidate_69: forall (n : nat), @eq nat (S n) (S (Nat.add (Nat.mul n O) (Nat.mul n (S (Nat.mul n O))))).
Lemma candidate_63: forall (n0 : nat), @eq nat (S n0) (S (Nat.add (Nat.mul n0 O) (Nat.mul n0 (S (Nat.mul n0 O))))).
Lemma candidate_47: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul (S n) p)   (Nat.add (Nat.mul p (S O)) (Nat.mul n (Nat.mul p (S O)))).