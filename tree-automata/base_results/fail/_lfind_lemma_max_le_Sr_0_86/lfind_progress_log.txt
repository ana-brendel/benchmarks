File Information
- File name: base
- Original Directory: /home/anabrendel/lfind/benchmarks/tree-automata/lemma_max_le_Sr_0_86
- LFind Directory: /home/anabrendel/lfind/benchmarks/tree-automata/_lfind_lemma_max_le_Sr_0_86
- Namespace: TreeAutomata
- Proof name: max_le_Sr
- Theorem: Theorem max_le_Sr: forall n0 m0 : nat, le (Init.Nat.max n0 m0) (Init.Nat.max n0 (S m0)).
- Declarations: 
From lfind Require Import LFind.
Require Import Arith.
Require Import BinNat.
From IntMap Require Import Allmaps.

Proof Context
* Goal State: le (Init.Nat.max n m) (Init.Nat.max n (S m))

* Hypothesis:
m : nat
n : nat

* Types:
Set
Prop
nat

* Polymorphic Types:


* Variables:
m : nat
n : nat

* Terms:
S m : nat
nat : Set
m : nat
Init.Nat.max n m : nat
Init.Nat.max n (S m) : nat
n : nat
le (Init.Nat.max n m) (Init.Nat.max n (S m)) : Prop

* Functions:
le  : forall (_ : nat) (_ : nat), Prop
Init.Nat.max  : forall (_ : nat) (_ : nat), nat
S  : forall _ : nat, nat

<---GENERALIZATION--->
Time elapsed: 3 seconds
Generalized Variables:
lf3 : nat = S m
lf1 : nat = Init.Nat.max n (S m)
lf2 : nat = Init.Nat.max n m

Generalizations:
Lemma conj1: forall (lf2 : nat) (lf1 : nat), le lf2 lf1.
Lemma conj2: forall (m : nat) (lf1 : nat) (n : nat), le (Init.Nat.max n m) lf1.
Lemma conj3: forall (lf2 : nat) (n : nat) (lf3 : nat), le lf2 (Init.Nat.max n lf3).
Lemma conj4: forall (m : nat) (n : nat) (lf3 : nat), le (Init.Nat.max n m) (Init.Nat.max n lf3).
Lemma conj7: forall (lf2 : nat) (m : nat) (n : nat), le lf2 (Init.Nat.max n (S m)).
Lemma conj8: forall (m : nat) (n : nat), le (Init.Nat.max n m) (Init.Nat.max n (S m)).


<---VALIDITY CHECKS--->
Time elapsed: 45 seconds
Valid:
Lemma conj8: forall (m : nat) (n : nat), le (Init.Nat.max n m) (Init.Nat.max n (S m)).

Invalid:
Lemma conj7: forall (lf2 : nat) (m : nat) (n : nat), le lf2 (Init.Nat.max n (S m)).
Lemma conj4: forall (m : nat) (n : nat) (lf3 : nat), le (Init.Nat.max n m) (Init.Nat.max n lf3).
Lemma conj3: forall (lf2 : nat) (n : nat) (lf3 : nat), le lf2 (Init.Nat.max n lf3).
Lemma conj2: forall (m : nat) (lf1 : nat) (n : nat), le (Init.Nat.max n m) lf1.
Lemma conj1: forall (lf2 : nat) (lf1 : nat), le lf2 lf1.

<---ADD IMPLICATIONS--->
Time elapsed: 45 seconds
Generalizations:
Lemma conj7: forall (lf2 : nat) (m : nat) (n : nat), le lf2 (Init.Nat.max n (S m)).
Lemma conj4: forall (m : nat) (n : nat) (lf3 : nat), le (Init.Nat.max n m) (Init.Nat.max n lf3).
Lemma conj3: forall (lf2 : nat) (n : nat) (lf3 : nat), le lf2 (Init.Nat.max n lf3).
Lemma conj2: forall (m : nat) (lf1 : nat) (n : nat), le (Init.Nat.max n m) lf1.
Lemma conj1: forall (lf2 : nat) (lf1 : nat), le lf2 lf1.


<---VALIDITY CHECKS--->
Time elapsed: 58 seconds
Valid:

Invalid:
Lemma conj1: forall (lf2 : nat) (lf1 : nat), le lf2 lf1.
Lemma conj2: forall (m : nat) (lf1 : nat) (n : nat), le (Init.Nat.max n m) lf1.
Lemma conj3: forall (lf2 : nat) (n : nat) (lf3 : nat), le lf2 (Init.Nat.max n lf3).
Lemma conj4: forall (m : nat) (n : nat) (lf3 : nat), le (Init.Nat.max n m) (Init.Nat.max n lf3).
Lemma conj7: forall (lf2 : nat) (m : nat) (n : nat), le lf2 (Init.Nat.max n (S m)).


<---CREATE SKETCHES--->
Time elapsed: 58 seconds
Sketches:
Sketch conj2_sketch0 : le (##hole##) lf1
Sketch conj2_term_sketch0 : @eq nat (Init.Nat.max n m) (##hole##)
Sketch conj3_sketch0 : le lf2 (##hole##)
Sketch conj3_term_sketch0 : @eq nat (Init.Nat.max n lf3) (##hole##)
Sketch conj4_sketch0 : le (Init.Nat.max n m) (##hole##)
Sketch conj4_sketch1 : le (##hole##) (Init.Nat.max n lf3)
Sketch conj4_term_sketch0 : @eq nat (Init.Nat.max n lf3) (##hole##)
Sketch conj4_term_sketch1 : @eq nat (Init.Nat.max n m) (##hole##)
Sketch conj7_sketch0 : le lf2 (Init.Nat.max n (##hole##))
Sketch conj7_sketch1 : le lf2 (##hole##)
Sketch conj7_term_sketch0 : @eq nat (S m) (##hole##)
Sketch conj7_term_sketch1 : @eq nat (Init.Nat.max n (S m)) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 169 seconds
Problems per Sketch:
Sketch conj4_term_sketch1 --> Problem  synth_2
Sketch conj2_term_sketch0 --> Problem  synth_2
Sketch conj3_sketch0 --> Problem  synth_3
Sketch conj7_sketch1 --> Problem  synth_3
Sketch conj3_term_sketch0 --> Problem  synth_4
Sketch conj7_term_sketch1 --> Problem  synth_5
Sketch conj7_term_sketch0 --> Problem  synth_8
Sketch conj4_term_sketch0 --> Problem  synth_4
Sketch conj7_sketch0 --> Problem  synth_7
Sketch conj4_sketch0 --> Problem  synth_5
Sketch conj2_sketch0 --> Problem  synth_1
Sketch conj4_sketch1 --> Problem  synth_6


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 233 seconds

Problem: synth_8
 Nat.max m (Nat.max m (S m))
 S (Nat.max m m)
 S (Nat.max m O)
 match m with | O => S m | S m' => S (Nat.max m m') end
 Nat.max m (S m)
 S m

Problem: synth_3

Problem: synth_6

Problem: synth_7

Problem: synth_5
 match Nat.max n O with | O => S m | S m' => S (Nat.max m m') end
 Nat.max n (Nat.max n (S m))
 Nat.max m (Nat.max n (S m))
 Nat.max n (Nat.max m (S m))
 match n with | O => S m | S m' => S (Nat.max m m') end
 Nat.max n (S m)

Problem: synth_4
 Nat.max n (Nat.max lf3 n)
 Nat.max lf3 (Nat.max n n)
 Nat.max n (Nat.max lf3 O)
 Nat.max lf3 (Nat.max n O)
 Nat.max n lf3
 Nat.max lf3 n

Problem: synth_1

Problem: synth_2
 Nat.max m (Nat.max n m)
 Nat.max n (Nat.max m m)
 Nat.max m (Nat.max n O)
 Nat.max n (Nat.max m O)
 Nat.max m n
 Nat.max n m

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 233 seconds
Lemmas:
Lemma candidate_1: forall (n : nat) (m : nat), le (Init.Nat.max n m) (Init.Nat.max n (S m)).
Lemma candidate_2: forall (n : nat) (m : nat), @eq nat (Init.Nat.max n m) (Nat.max m (Nat.max n m)).
Lemma candidate_3: forall (n : nat) (m : nat), @eq nat (Init.Nat.max n m) (Nat.max n (Nat.max m m)).
Lemma candidate_4: forall (n : nat) (m : nat), @eq nat (Init.Nat.max n m) (Nat.max m (Nat.max n O)).
Lemma candidate_5: forall (n : nat) (m : nat), @eq nat (Init.Nat.max n m) (Nat.max n (Nat.max m O)).
Lemma candidate_6: forall (n : nat) (m : nat), @eq nat (Init.Nat.max n m) (Nat.max m n).
Lemma candidate_7: forall (n : nat) (m : nat), @eq nat (Init.Nat.max n m) (Nat.max n m).
Lemma candidate_8: forall (lf3 : nat) (n : nat), @eq nat (Init.Nat.max n lf3) (Nat.max n (Nat.max lf3 n)).
Lemma candidate_9: forall (lf3 : nat) (n : nat), @eq nat (Init.Nat.max n lf3) (Nat.max lf3 (Nat.max n n)).
Lemma candidate_10: forall (lf3 : nat) (n : nat), @eq nat (Init.Nat.max n lf3) (Nat.max n (Nat.max lf3 O)).
Lemma candidate_11: forall (lf3 : nat) (n : nat), @eq nat (Init.Nat.max n lf3) (Nat.max lf3 (Nat.max n O)).
Lemma candidate_12: forall (lf3 : nat) (n : nat), @eq nat (Init.Nat.max n lf3) (Nat.max n lf3).
Lemma candidate_13: forall (lf3 : nat) (n : nat), @eq nat (Init.Nat.max n lf3) (Nat.max lf3 n).
Lemma candidate_14: forall (n : nat) (m : nat), le (Init.Nat.max n m)   (match Nat.max n O with | O => S m | S m' => S (Nat.max m m') end).
Lemma candidate_15: forall (n : nat) (m : nat), le (Init.Nat.max n m) (Nat.max n (Nat.max n (S m))).
Lemma candidate_16: forall (n : nat) (m : nat), le (Init.Nat.max n m) (Nat.max m (Nat.max n (S m))).
Lemma candidate_17: forall (n : nat) (m : nat), le (Init.Nat.max n m) (Nat.max n (Nat.max m (S m))).
Lemma candidate_18: forall (n : nat) (m : nat), le (Init.Nat.max n m)   (match n with | O => S m | S m' => S (Nat.max m m') end).
Lemma candidate_19: forall (n : nat) (m : nat), le (Init.Nat.max n m) (Nat.max n (S m)).
Lemma candidate_20: forall (lf3 : nat) (n : nat), @eq nat (Init.Nat.max n lf3) (Nat.max n (Nat.max lf3 n)).
Lemma candidate_21: forall (lf3 : nat) (n : nat), @eq nat (Init.Nat.max n lf3) (Nat.max lf3 (Nat.max n n)).
Lemma candidate_22: forall (lf3 : nat) (n : nat), @eq nat (Init.Nat.max n lf3) (Nat.max n (Nat.max lf3 O)).
Lemma candidate_23: forall (lf3 : nat) (n : nat), @eq nat (Init.Nat.max n lf3) (Nat.max lf3 (Nat.max n O)).
Lemma candidate_24: forall (lf3 : nat) (n : nat), @eq nat (Init.Nat.max n lf3) (Nat.max n lf3).
Lemma candidate_25: forall (lf3 : nat) (n : nat), @eq nat (Init.Nat.max n lf3) (Nat.max lf3 n).
Lemma candidate_26: forall (n : nat) (m : nat), @eq nat (Init.Nat.max n m) (Nat.max m (Nat.max n m)).
Lemma candidate_27: forall (n : nat) (m : nat), @eq nat (Init.Nat.max n m) (Nat.max n (Nat.max m m)).
Lemma candidate_28: forall (n : nat) (m : nat), @eq nat (Init.Nat.max n m) (Nat.max m (Nat.max n O)).
Lemma candidate_29: forall (n : nat) (m : nat), @eq nat (Init.Nat.max n m) (Nat.max n (Nat.max m O)).
Lemma candidate_30: forall (n : nat) (m : nat), @eq nat (Init.Nat.max n m) (Nat.max m n).
Lemma candidate_31: forall (n : nat) (m : nat), @eq nat (Init.Nat.max n m) (Nat.max n m).
Lemma candidate_32: forall (m : nat), @eq nat (S m) (Nat.max m (Nat.max m (S m))).
Lemma candidate_33: forall (m : nat), @eq nat (S m) (S (Nat.max m m)).
Lemma candidate_34: forall (m : nat), @eq nat (S m) (S (Nat.max m O)).
Lemma candidate_35: forall (m : nat), @eq nat (S m) (match m with | O => S m | S m' => S (Nat.max m m') end).
Lemma candidate_36: forall (m : nat), @eq nat (S m) (Nat.max m (S m)).
Lemma candidate_37: forall (m : nat), @eq nat (S m) (S m).
Lemma candidate_38: forall (n : nat) (m : nat), @eq nat (Init.Nat.max n (S m))   (match Nat.max n O with | O => S m | S m' => S (Nat.max m m') end).
Lemma candidate_39: forall (n : nat) (m : nat), @eq nat (Init.Nat.max n (S m)) (Nat.max n (Nat.max n (S m))).
Lemma candidate_40: forall (n : nat) (m : nat), @eq nat (Init.Nat.max n (S m)) (Nat.max m (Nat.max n (S m))).
Lemma candidate_41: forall (n : nat) (m : nat), @eq nat (Init.Nat.max n (S m)) (Nat.max n (Nat.max m (S m))).
Lemma candidate_42: forall (n : nat) (m : nat), @eq nat (Init.Nat.max n (S m))   (match n with | O => S m | S m' => S (Nat.max m m') end).
Lemma candidate_43: forall (n : nat) (m : nat), @eq nat (Init.Nat.max n (S m)) (Nat.max n (S m)).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 360 seconds
Duplicates removed: 13
Filtered by Quickchick: 0
Filtered by script: 5
Remaining: 25

Lemmas: 
Lemma candidate_36: forall (m : nat), @eq nat (S m) (Nat.max m (S m)).
Lemma candidate_34: forall (m : nat), @eq nat (S m) (S (Nat.max m O)).
Lemma candidate_33: forall (m : nat), @eq nat (S m) (S (Nat.max m m)).
Lemma candidate_6: forall (n : nat) (m : nat), @eq nat (Init.Nat.max n m) (Nat.max m n).
Lemma candidate_32: forall (m : nat), @eq nat (S m) (Nat.max m (Nat.max m (S m))).
Lemma candidate_13: forall (lf3 : nat) (n : nat), @eq nat (Init.Nat.max n lf3) (Nat.max lf3 n).
Lemma candidate_17: forall (n : nat) (m : nat), le (Init.Nat.max n m) (Nat.max n (Nat.max m (S m))).
Lemma candidate_16: forall (n : nat) (m : nat), le (Init.Nat.max n m) (Nat.max m (Nat.max n (S m))).
Lemma candidate_15: forall (n : nat) (m : nat), le (Init.Nat.max n m) (Nat.max n (Nat.max n (S m))).
Lemma candidate_5: forall (n : nat) (m : nat), @eq nat (Init.Nat.max n m) (Nat.max n (Nat.max m O)).
Lemma candidate_4: forall (n : nat) (m : nat), @eq nat (Init.Nat.max n m) (Nat.max m (Nat.max n O)).
Lemma candidate_3: forall (n : nat) (m : nat), @eq nat (Init.Nat.max n m) (Nat.max n (Nat.max m m)).
Lemma candidate_2: forall (n : nat) (m : nat), @eq nat (Init.Nat.max n m) (Nat.max m (Nat.max n m)).
Lemma candidate_11: forall (lf3 : nat) (n : nat), @eq nat (Init.Nat.max n lf3) (Nat.max lf3 (Nat.max n O)).
Lemma candidate_10: forall (lf3 : nat) (n : nat), @eq nat (Init.Nat.max n lf3) (Nat.max n (Nat.max lf3 O)).
Lemma candidate_9: forall (lf3 : nat) (n : nat), @eq nat (Init.Nat.max n lf3) (Nat.max lf3 (Nat.max n n)).
Lemma candidate_8: forall (lf3 : nat) (n : nat), @eq nat (Init.Nat.max n lf3) (Nat.max n (Nat.max lf3 n)).
Lemma candidate_41: forall (n : nat) (m : nat), @eq nat (Init.Nat.max n (S m)) (Nat.max n (Nat.max m (S m))).
Lemma candidate_40: forall (n : nat) (m : nat), @eq nat (Init.Nat.max n (S m)) (Nat.max m (Nat.max n (S m))).
Lemma candidate_39: forall (n : nat) (m : nat), @eq nat (Init.Nat.max n (S m)) (Nat.max n (Nat.max n (S m))).
Lemma candidate_35: forall (m : nat), @eq nat (S m) (match m with | O => S m | S m' => S (Nat.max m m') end).
Lemma candidate_18: forall (n : nat) (m : nat), le (Init.Nat.max n m)   (match n with | O => S m | S m' => S (Nat.max m m') end).
Lemma candidate_42: forall (n : nat) (m : nat), @eq nat (Init.Nat.max n (S m))   (match n with | O => S m | S m' => S (Nat.max m m') end).
Lemma candidate_14: forall (n : nat) (m : nat), le (Init.Nat.max n m)   (match Nat.max n O with | O => S m | S m' => S (Nat.max m m') end).
Lemma candidate_38: forall (n : nat) (m : nat), @eq nat (Init.Nat.max n (S m))   (match Nat.max n O with | O => S m | S m' => S (Nat.max m m') end).