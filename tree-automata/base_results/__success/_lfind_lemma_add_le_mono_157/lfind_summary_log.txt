LFind Results
LFind Directory: /home/anabrendel/lfind/benchmarks/tree-automata/_lfind_lemma_add_le_mono_157

Number of Lemmas: 112
Number of Lemmas (after duplicates removed): 40
Number of Lemmas (after QuickChick used to filter): 40
* Number of Candidate Lemmas: 34

Time until ranking: 908
Time to complete: 1818

Stuck state true independent of hypotheses: false

Category 1:
Count = 33

Lemma candidate_21: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul p n).
Lemma candidate_63: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul p n0).
Lemma candidate_28: forall (lf3 : nat) (p : nat), @eq nat (Init.Nat.add p lf3) (Nat.add lf3 p).
Lemma candidate_9: forall (p : nat) (lf4 : nat), @eq nat (Init.Nat.add p lf4) (Nat.add lf4 p).
Lemma candidate_20: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul n (Nat.add p O)).
Lemma candidate_19: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul p (Nat.add n O)).
Lemma candidate_62: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul n0 (Nat.add p O)).
Lemma candidate_61: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul p (Nat.add n0 O)).
Lemma candidate_26: forall (lf3 : nat) (p : nat), @eq nat (Init.Nat.add p lf3) (Nat.add lf3 (Nat.add p O)).
Lemma candidate_25: forall (lf3 : nat) (p : nat), @eq nat (Init.Nat.add p lf3) (Nat.add p (Nat.add lf3 O)).
Lemma candidate_18: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul n (Nat.mul p (S O))).
Lemma candidate_8: forall (p : nat) (lf4 : nat), @eq nat (Init.Nat.add p lf4) (Nat.add p (Nat.add lf4 O)).
Lemma candidate_7: forall (p : nat) (lf4 : nat), @eq nat (Init.Nat.add p lf4) (Nat.add lf4 (Nat.add p O)).
Lemma candidate_60: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul n0 (Nat.mul p (S O))).
Lemma candidate_59: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.mul n0 p) (Nat.mul p (Nat.mul n0 (S O))).
Lemma candidate_24: forall (lf3 : nat) (p : nat), @eq nat (Init.Nat.add p lf3) (Nat.add lf3 (Nat.mul p (S O))).
Lemma candidate_23: forall (lf3 : nat) (p : nat), @eq nat (Init.Nat.add p lf3) (Nat.add p (Nat.mul lf3 (S O))).
Lemma candidate_6: forall (p : nat) (lf4 : nat), @eq nat (Init.Nat.add p lf4) (Nat.add p (Nat.mul lf4 (S O))).
Lemma candidate_5: forall (p : nat) (lf4 : nat), @eq nat (Init.Nat.add p lf4) (Nat.add lf4 (Nat.mul p (S O))).
Lemma candidate_16: forall (n : nat) (p : nat), @eq nat (Init.Nat.add p (Init.Nat.mul n p)) (Nat.mul p (S n)).
Lemma candidate_70: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.add p (Init.Nat.mul n0 p)) (Nat.mul p (S n0)).
Lemma candidate_1: forall (lf3 : nat) (p : nat) (lf4 : nat), forall _ : le lf4 lf3, le (Init.Nat.add p lf4) (Init.Nat.add p lf3).
Lemma candidate_14: forall (n : nat) (p : nat), @eq nat (Init.Nat.add p (Init.Nat.mul n p)) (Nat.add p (Nat.mul p n)).
Lemma candidate_68: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.add p (Init.Nat.mul n0 p)) (Nat.add p (Nat.mul p n0)).
Lemma candidate_13: forall (n : nat) (p : nat), @eq nat (Init.Nat.add p (Init.Nat.mul n p)) (Nat.mul p (Nat.add n (S O))).
Lemma candidate_67: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.add p (Init.Nat.mul n0 p)) (Nat.mul p (Nat.add n0 (S O))).
Lemma candidate_12: forall (n : nat) (p : nat), @eq nat (Init.Nat.add p (Init.Nat.mul n p))   (Nat.add (Nat.add p O) (Nat.mul n (Nat.add p O))).
Lemma candidate_66: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.add p (Init.Nat.mul n0 p))   (Nat.add (Nat.add p O) (Nat.mul n0 (Nat.add p O))).
Lemma candidate_2: forall (lf3 : nat) (n : nat) (p : nat), forall _ : le (Init.Nat.mul n p) lf3, le (Init.Nat.add p (Init.Nat.mul n p)) (Init.Nat.add p lf3).
Lemma candidate_3: forall (n0 : nat) (p : nat) (lf4 : nat), forall _ : le lf4 (Init.Nat.mul n0 p), le (Init.Nat.add p lf4) (Init.Nat.add p (Init.Nat.mul n0 p)).
Lemma candidate_11: forall (n : nat) (p : nat), @eq nat (Init.Nat.add p (Init.Nat.mul n p))   (Nat.add (Nat.mul p (S O)) (Nat.mul n (Nat.mul p (S O)))).
Lemma candidate_65: forall (n0 : nat) (p : nat), @eq nat (Init.Nat.add p (Init.Nat.mul n0 p))   (Nat.add (Nat.mul p (S O)) (Nat.mul n0 (Nat.mul p (S O)))).
Lemma candidate_4: forall (n0 : nat) (n : nat) (p : nat), forall   _ : and (@eq nat n n0)         (and (le (Init.Nat.mul n p) (Init.Nat.mul n0 p))            (and (or (@eq nat n n0) (le (S n) n0)) (le (S n) (S n0)))), le (Init.Nat.add p (Init.Nat.mul n p)) (Init.Nat.add p (Init.Nat.mul n0 p)).

Category 2:
Count = 1

Lemma candidate_17: forall (n : nat) (p : nat), @eq nat (Init.Nat.mul n p) (Nat.mul p (Nat.mul n (S O))).

Category 3 (provable):
Count = 0


Category 3 (not provable):
Count = 0
