File Information
- File name: base
- Original Directory: /home/anabrendel/lfind/benchmarks/tree-automata/base_tests/lemma_M1_semantics_2_273
- LFind Directory: /home/anabrendel/lfind/benchmarks/tree-automata/base_tests/_lfind_lemma_M1_semantics_2_273
- Namespace: TreeAutomata
- Proof name: in_M1_id
- Theorem: Theorem in_M1_id: forall (A0 : Set) (a0 : A0) (x1 : ad) (e0 : A0)
  (_ : @ex ad
         (fun c : ad =>
          @eq (option A0) (MapGet A0 (M1 A0 x1 e0) c) (@Some A0 a0))),
@eq A0 a0 e0.
- Declarations: 
From lfind Require Import LFind.
Require Import Arith.
Require Import BinNat.
From IntMap Require Import Allmaps.

Proof Context
* Goal State: @eq (option A) (MapGet A (M1 A x e) x0) (@None A)

* Hypothesis:
H0 : @eq (option A) (MapGet A (M1 A x e) x0) (@Some A a)
x0 : ad
H2 : @eq bool (N.eqb x x0) false
H1 : or (@eq bool (N.eqb x x0) false) (@eq bool (N.eqb x x0) true)
x : ad
H : @ex ad (fun c : ad => @eq (option A) (MapGet A (M1 A x e) c) (@Some A a))
A : Set
e : A
a : A

* Types:
Set
Prop
Type
option A
forall _ : ad, Prop
A
ad
Map A
bool

* Polymorphic Types:
option A

* Variables:
x0 : ad
x : ad
A : Set
e : A
a : A

* Terms:
x0 : ad
@eq (option A) (MapGet A (M1 A x e) _UNBOUND_REL_1) (@Some A a) : Prop
x : ad
A : Set
or (@eq bool (N.eqb x x0) false) (@eq bool (N.eqb x x0) true) : Prop
@Some A a : option A
Set : Type
M1 A x e : Map A
true : bool
@eq bool (N.eqb x x0) true : Prop
MapGet A (M1 A x e) x0 : option A
@eq (option A) (MapGet A (M1 A x e) x0) (@None A) : Prop
false : bool
bool : Set
@eq (option A) (MapGet A (M1 A x e) x0) (@Some A a) : Prop
@None A : option A
fun c : ad => @eq (option A) (MapGet A (M1 A x e) c) (@Some A a) : forall _ : ad, Prop
@ex ad (fun c : ad => @eq (option A) (MapGet A (M1 A x e) c) (@Some A a)) : Prop
ad : Set
option A : Set
@eq bool (N.eqb x x0) false : Prop
MapGet A (M1 A x e) _UNBOUND_REL_1 : option A
e : A
N.eqb x x0 : bool
a : A

* Functions:
ex  : forall (A0 : Type) (_ : forall _ : A0, Prop), Prop
N.eqb  : forall (_ : N) (_ : N), bool
M1  : forall (A0 : Type) (_ : ad) (_ : A0), Map A0
MapGet  : forall (A0 : Type) (_ : Map A0) (_ : ad), option A0
@Some  : forall (A0 : Type) (_ : A0), option A0
option  : forall _ : Type, Type
@eq  : forall (A0 : Type) (_ : A0) (_ : A0), Prop
or  : forall (_ : Prop) (_ : Prop), Prop
@None  : forall A0 : Type, option A0

<---GENERALIZATION--->
Time elapsed: 2 seconds
Generalized Variables:
lf3 : option A = @None A
lf1 : option A = MapGet A (M1 A x e) x0
lf2 : Map A = M1 A x e

Generalizations:
Lemma conj1: forall {A} (lf1 : option A) (lf3 : option A), @eq (option A) lf1 lf3.
Lemma conj3: forall {A} (x0 : ad) (lf2 : Map A) (lf3 : option A), @eq (option A) (MapGet A lf2 x0) lf3.
Lemma conj4: forall {A} (x0 : ad) (x : ad) (e : A) (lf3 : option A), @eq (option A) (MapGet A (M1 A x e) x0) lf3.
Lemma conj5: forall {A} (lf1 : option A), @eq (option A) lf1 (@None A).
Lemma conj7: forall {A} (x0 : ad) (lf2 : Map A), @eq (option A) (MapGet A lf2 x0) (@None A).
Lemma conj8: forall {A} (x0 : ad) (x : ad) (e : A), @eq (option A) (MapGet A (M1 A x e) x0) (@None A).


<---VALIDITY CHECKS--->
Time elapsed: 12 seconds
Valid:

Invalid:
Lemma conj8: forall {A} (x0 : ad) (x : ad) (e : A), @eq (option A) (MapGet A (M1 A x e) x0) (@None A).
Lemma conj7: forall {A} (x0 : ad) (lf2 : Map A), @eq (option A) (MapGet A lf2 x0) (@None A).
Lemma conj5: forall {A} (lf1 : option A), @eq (option A) lf1 (@None A).
Lemma conj4: forall {A} (x0 : ad) (x : ad) (e : A) (lf3 : option A), @eq (option A) (MapGet A (M1 A x e) x0) lf3.
Lemma conj3: forall {A} (x0 : ad) (lf2 : Map A) (lf3 : option A), @eq (option A) (MapGet A lf2 x0) lf3.
Lemma conj1: forall {A} (lf1 : option A) (lf3 : option A), @eq (option A) lf1 lf3.