LFind Results
LFind Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/Adder/_lfind_Adder_lemma_BV_full_adder_sum_eq3_192

Number of Lemmas: 117
Number of Lemmas (after duplicates removed): 71
Number of Lemmas (after QuickChick used to filter): 30
* Number of Candidate Lemmas: 23

Time until ranking: 628
Time to complete: 1559

Stuck state true independent of hypotheses: true

Category 1:
Count = 6

Lemma candidate_7: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a a) l).
Lemma candidate_8: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a true) l).
Lemma candidate_4: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a a false) l).
Lemma candidate_6: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a true false) l).
Lemma candidate_5: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry true a false) l).
Lemma candidate_14: forall (lf2 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf2 false)   lf2.

Category 2:
Count = 17

Lemma candidate_56: forall (lf3 : list bool) (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 lf3 false) (BV_full_adder_sum lf3 lf2 false).
Lemma candidate_12: forall (lf2 : list bool), @eq BV   (BV_full_adder_sum lf2 (@nil bool) (BV_full_adder_carry lf2 (@nil bool) false))   lf2.
Lemma candidate_36: forall (lf3 : list bool) (a : bool) (l : list bool) (lf4 : bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 lf4)   (BV_full_adder_sum lf3 (@cons bool a l) lf4).
Lemma candidate_76: forall (lf3 : list bool) (a : bool) (l : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 false)   (BV_full_adder_sum lf3 (@cons bool a l) false).
Lemma candidate_74: forall (lf3 : list bool) (a : bool) (l : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 false)   (BV_full_adder_sum lf3 (@cons bool false l) a).
Lemma candidate_3: forall (lf3 : list bool) (a : bool) (l : list bool), forall _ : @eq BV (BV_full_adder_sum l lf3 false) l, @eq BV (BV_full_adder_sum (@cons bool a l) lf3 false) (@cons bool a l).
Lemma candidate_72: forall (lf3 : list bool) (a : bool) (l : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 false)   (BV_full_adder_sum lf3 (@cons bool a l) (BV_full_adder_carry l (@nil bool) false)).
Lemma candidate_22: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (FullAdder.full_adder_sum a false false) (BV_full_adder_sum l (@nil bool) (FullAdder.full_adder_carry a false false)))   (@cons bool a l).
Lemma candidate_10: forall (lf2 : list bool), @eq BV   (BV_full_adder_sum lf2 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf2 false))   lf2.
Lemma candidate_26: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_93: forall (lf4 : bool) (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 (@nil bool) lf4)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf2 lf4).
Lemma candidate_11: forall (lf2 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf2 (BV_full_adder_carry lf2 (@nil bool) false))   lf2.
Lemma candidate_27: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false)))   (@cons bool a l).
Lemma candidate_109: forall (a : bool) (l : list bool) (lf4 : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) lf4)   (BV.consbv (HalfAdder.half_adder_sum a lf4) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a lf4))).
Lemma candidate_107: forall (a : bool) (l : list bool) (lf4 : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) lf4)   (BV.consbv (HalfAdder.half_adder_sum lf4 a) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf4 a))).
Lemma candidate_25: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a (BV_full_adder_carry l (@nil bool) false)) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a (BV_full_adder_carry l (@nil bool) false))))   (@cons bool a l).
Lemma candidate_24: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))))   (@cons bool a l).

Category 3 (provable):
Count = 0


Category 3 (not provable):
Count = 0
