File Information
- File name: Adder
- Original Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/Adder/Adder_lemma_BV_full_adder_sum_eq3_192
- LFind Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/Adder/_lfind_Adder_lemma_BV_full_adder_sum_eq3_192
- Namespace: Circuits
- Proof name: BV_full_adder_sum_v_nil_false
- Theorem: Theorem BV_full_adder_sum_v_nil_false: forall v0 : BV, @eq BV (BV_full_adder_sum v0 nilbv false) v0.
- Declarations: 
From lfind Require Import LFind.
From CircuitsCoqGym Require Import BV.
From CircuitsCoqGym Require Import FullAdder.

Proof Context
* Goal State: @eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) false)
  (@cons bool a l)

* Hypothesis:
H : @eq BV (BV_full_adder_sum l (@nil bool) false) l
v : BV
l : list bool
a : bool

* Types:
Set
list bool
Prop
BV
bool

* Polymorphic Types:
list bool

* Variables:
l : list bool
a : bool

* Terms:
BV_full_adder_sum (@cons bool a l) (@nil bool) false : BV
false : bool
bool : Set
BV_full_adder_sum l (@nil bool) false : BV
@eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) false)
  (@cons bool a l) : Prop
@cons bool a l : list bool
@nil bool : list bool
BV : Set
list bool : Set
l : list bool
@eq BV (BV_full_adder_sum l (@nil bool) false) l : Prop
a : bool

* Functions:
list  : forall _ : Type, Type
@cons  : forall (A : Type) (_ : A) (_ : list A), list A
@nil  : forall A : Type, list A
BV_full_adder_sum  : forall (_ : list bool) (_ : list bool) (_ : bool), BV
@eq  : forall (A : Type) (_ : A) (_ : A), Prop

<---GENERALIZATION--->
Time elapsed: 3 seconds
Generalized Variables:
lf3 : list bool = @nil bool
lf1 : BV = BV_full_adder_sum (@cons bool a l) (@nil bool) false
lf4 : bool = false
lf2 : list bool = @cons bool a l

Generalizations:
Lemma conj1: forall (lf2 : list bool) (lf1 : BV), @eq BV lf1 lf2.
Lemma conj2: forall (lf1 : BV) (l : list bool) (a : bool), @eq BV lf1 (@cons bool a l).
Lemma conj5: forall (lf2 : list bool) (lf4 : bool) (lf3 : list bool), @eq BV (BV_full_adder_sum lf2 lf3 lf4) lf2.
Lemma conj6: forall (lf4 : bool) (l : list bool) (a : bool) (lf3 : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 lf4) (@cons bool a l).
Lemma conj7: forall (lf2 : list bool) (lf3 : list bool), @eq BV (BV_full_adder_sum lf2 lf3 false) lf2.
Lemma conj8: forall (l : list bool) (a : bool) (lf3 : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 false) (@cons bool a l).
Lemma conj13: forall (lf2 : list bool) (lf4 : bool), @eq BV (BV_full_adder_sum lf2 (@nil bool) lf4) lf2.
Lemma conj14: forall (lf4 : bool) (l : list bool) (a : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) lf4) (@cons bool a l).
Lemma conj15: forall (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 (@nil bool) false) lf2.
Lemma conj16: forall (l : list bool) (a : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) false)
  (@cons bool a l).


<---VALIDITY CHECKS--->
Time elapsed: 59 seconds
Valid:
Lemma conj16: forall (l : list bool) (a : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) false)
  (@cons bool a l).
Lemma conj15: forall (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 (@nil bool) false) lf2.

Invalid:
Lemma conj14: forall (lf4 : bool) (l : list bool) (a : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) lf4) (@cons bool a l).
Lemma conj13: forall (lf2 : list bool) (lf4 : bool), @eq BV (BV_full_adder_sum lf2 (@nil bool) lf4) lf2.
Lemma conj8: forall (l : list bool) (a : bool) (lf3 : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 false) (@cons bool a l).
Lemma conj7: forall (lf2 : list bool) (lf3 : list bool), @eq BV (BV_full_adder_sum lf2 lf3 false) lf2.
Lemma conj6: forall (lf4 : bool) (l : list bool) (a : bool) (lf3 : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 lf4) (@cons bool a l).
Lemma conj5: forall (lf2 : list bool) (lf4 : bool) (lf3 : list bool), @eq BV (BV_full_adder_sum lf2 lf3 lf4) lf2.
Lemma conj2: forall (lf1 : BV) (l : list bool) (a : bool), @eq BV lf1 (@cons bool a l).
Lemma conj1: forall (lf2 : list bool) (lf1 : BV), @eq BV lf1 lf2.

<---ADD IMPLICATIONS--->
Time elapsed: 76 seconds
Generalizations:
Lemma conj14: forall (lf4 : bool) (l : list bool) (a : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) lf4) (@cons bool a l).
Lemma conj13: forall (lf2 : list bool) (lf4 : bool), @eq BV (BV_full_adder_sum lf2 (@nil bool) lf4) lf2.
Lemma conj8: forall (l : list bool) (a : bool) (lf3 : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 false) (@cons bool a l).
Lemma conj8_imp: forall (l : list bool) (a : bool) (lf3 : list bool), forall _ : @eq BV (BV_full_adder_sum l lf3 false) l,
@eq BV (BV_full_adder_sum (@cons bool a l) lf3 false) (@cons bool a l).
Lemma conj7: forall (lf2 : list bool) (lf3 : list bool), @eq BV (BV_full_adder_sum lf2 lf3 false) lf2.
Lemma conj6: forall (lf4 : bool) (l : list bool) (a : bool) (lf3 : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 lf4) (@cons bool a l).
Lemma conj5: forall (lf2 : list bool) (lf4 : bool) (lf3 : list bool), @eq BV (BV_full_adder_sum lf2 lf3 lf4) lf2.
Lemma conj2: forall (lf1 : BV) (l : list bool) (a : bool), @eq BV lf1 (@cons bool a l).
Lemma conj1: forall (lf2 : list bool) (lf1 : BV), @eq BV lf1 lf2.


<---VALIDITY CHECKS--->
Time elapsed: 101 seconds
Valid:
Lemma conj8_imp: forall (l : list bool) (a : bool) (lf3 : list bool), forall _ : @eq BV (BV_full_adder_sum l lf3 false) l,
@eq BV (BV_full_adder_sum (@cons bool a l) lf3 false) (@cons bool a l).

Invalid:
Lemma conj1: forall (lf2 : list bool) (lf1 : BV), @eq BV lf1 lf2.
Lemma conj2: forall (lf1 : BV) (l : list bool) (a : bool), @eq BV lf1 (@cons bool a l).
Lemma conj5: forall (lf2 : list bool) (lf4 : bool) (lf3 : list bool), @eq BV (BV_full_adder_sum lf2 lf3 lf4) lf2.
Lemma conj6: forall (lf4 : bool) (l : list bool) (a : bool) (lf3 : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 lf4) (@cons bool a l).
Lemma conj7: forall (lf2 : list bool) (lf3 : list bool), @eq BV (BV_full_adder_sum lf2 lf3 false) lf2.
Lemma conj8: forall (l : list bool) (a : bool) (lf3 : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 false) (@cons bool a l).
Lemma conj13: forall (lf2 : list bool) (lf4 : bool), @eq BV (BV_full_adder_sum lf2 (@nil bool) lf4) lf2.
Lemma conj14: forall (lf4 : bool) (l : list bool) (a : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) lf4) (@cons bool a l).


<---CREATE SKETCHES--->
Time elapsed: 101 seconds
Sketches:
Sketch conj2_sketch0 : @eq BV lf1 (##hole##)
Sketch conj2_term_sketch0 : @eq (list bool) (@cons bool a l) (##hole##)
Sketch conj5_sketch0 : @eq BV (##hole##) lf2
Sketch conj5_term_sketch0 : @eq BV (BV_full_adder_sum lf2 lf3 lf4) (##hole##)
Sketch conj6_sketch0 : @eq BV (BV_full_adder_sum (##hole##) lf3 lf4) (##hole##)
Sketch conj6_sketch1 : @eq BV (##hole##) (@cons bool a l)
Sketch conj6_term_sketch0 : @eq (list bool) (@cons bool a l) (##hole##)
Sketch conj6_term_sketch1 : @eq BV (BV_full_adder_sum (@cons bool a l) lf3 lf4) (##hole##)
Sketch conj7_sketch0 : @eq BV (BV_full_adder_sum lf2 lf3 (##hole##)) lf2
Sketch conj7_sketch1 : @eq BV (##hole##) lf2
Sketch conj7_term_sketch0 : @eq bool false (##hole##)
Sketch conj7_term_sketch1 : @eq BV (BV_full_adder_sum lf2 lf3 false) (##hole##)
Sketch conj8_sketch0 : @eq BV (BV_full_adder_sum (@cons bool a l) lf3 (##hole##)) (@cons bool a l)
Sketch conj8_sketch1 : @eq BV (##hole##) (@cons bool a l)
Sketch conj8_sketch2 : @eq BV (BV_full_adder_sum (##hole##) lf3 false) (##hole##)
Sketch conj8_term_sketch0 : @eq bool false (##hole##)
Sketch conj8_term_sketch1 : @eq BV (BV_full_adder_sum (@cons bool a l) lf3 false) (##hole##)
Sketch conj8_term_sketch2 : @eq (list bool) (@cons bool a l) (##hole##)
Sketch conj13_sketch0 : @eq BV (##hole##) lf2
Sketch conj13_sketch1 : @eq BV (BV_full_adder_sum lf2 (##hole##) lf4) lf2
Sketch conj13_term_sketch0 : @eq BV (BV_full_adder_sum lf2 (@nil bool) lf4) (##hole##)
Sketch conj13_term_sketch1 : @eq (list bool) (@nil bool) (##hole##)
Sketch conj14_sketch0 : @eq BV (##hole##) (@cons bool a l)
Sketch conj14_sketch1 : @eq BV (BV_full_adder_sum (##hole##) (@nil bool) lf4) (##hole##)
Sketch conj14_sketch2 : @eq BV (BV_full_adder_sum (@cons bool a l) (##hole##) lf4) (@cons bool a l)
Sketch conj14_term_sketch0 : @eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) lf4) (##hole##)
Sketch conj14_term_sketch1 : @eq (list bool) (@cons bool a l) (##hole##)
Sketch conj14_term_sketch2 : @eq (list bool) (@nil bool) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 313 seconds
Problems per Sketch:
Sketch conj7_sketch1 --> Problem  synth_3
Sketch conj6_sketch1 --> Problem  synth_6
Sketch conj5_sketch0 --> Problem  synth_3
Sketch conj14_sketch2 --> Problem  synth_18
Sketch conj7_term_sketch0 --> Problem  synth_9
Sketch conj13_term_sketch0 --> Problem  synth_15
Sketch conj14_term_sketch2 --> Problem  synth_16
Sketch conj6_term_sketch1 --> Problem  synth_7
Sketch conj8_sketch1 --> Problem  synth_6
Sketch conj7_sketch0 --> Problem  synth_8
Sketch conj6_term_sketch0 --> Problem  synth_2
Sketch conj13_sketch1 --> Problem  synth_14
Sketch conj2_term_sketch0 --> Problem  synth_2
Sketch conj14_sketch0 --> Problem  synth_6
Sketch conj13_term_sketch1 --> Problem  synth_16
Sketch conj8_term_sketch0 --> Problem  synth_9
Sketch conj14_term_sketch0 --> Problem  synth_19
Sketch conj13_sketch0 --> Problem  synth_3
Sketch conj8_sketch2 --> Problem  synth_12
Sketch conj8_sketch0 --> Problem  synth_11
Sketch conj14_term_sketch1 --> Problem  synth_2
Sketch conj7_term_sketch1 --> Problem  synth_10
Sketch conj8_term_sketch1 --> Problem  synth_13
Sketch conj8_term_sketch2 --> Problem  synth_2
Sketch conj5_term_sketch0 --> Problem  synth_4
Sketch conj6_sketch0 --> Problem  synth_5
Sketch conj14_sketch1 --> Problem  synth_17
Sketch conj2_sketch0 --> Problem  synth_1


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 428 seconds

Problem: synth_18
 @nil bool

Problem: synth_17

Problem: synth_9
 false

Problem: synth_13
 BV_full_adder_sum lf3 (@cons bool a l) (BV_full_adder_carry l (@nil bool) false)
 BV.consbv (HalfAdder.half_adder_sum a (BV_full_adder_carry l (@nil bool) false)) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a (BV_full_adder_carry l (@nil bool) false)))
 BV_full_adder_sum lf3 (@cons bool false l) a
 BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)
 BV_full_adder_sum lf3 (@cons bool a l) false
 BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false))

Problem: synth_6
 BV.consbv (FullAdder.full_adder_sum a false false) (BV_full_adder_sum l (@nil bool) (FullAdder.full_adder_carry a false false))
 BV.consbv (HalfAdder.half_adder_sum a false) (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry a false))
 BV.consbv (HalfAdder.half_adder_sum a ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)))
 BV.consbv (HalfAdder.half_adder_sum a (BV_full_adder_carry l (@nil bool) false)) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a (BV_full_adder_carry l (@nil bool) false)))
 BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)
 BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false))

Problem: synth_11
 (fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf3 false
 BV_full_adder_carry lf3 l false
 (fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false
 BV_full_adder_carry lf3 (@nil bool) false
 BV_full_adder_carry l (@nil bool) false
 false

Problem: synth_7
 BV_full_adder_sum lf3 (@cons bool false l) a
 BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)
 BV_full_adder_sum lf3 (@cons bool a l) lf4
 BV.consbv (HalfAdder.half_adder_sum a lf4) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a lf4))
 BV_full_adder_sum lf3 (@cons bool a l) false
 BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false))

Problem: synth_4
 (fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf2 lf4
 BV_full_adder_sum lf2 (@nil bool) lf4
 BV_full_adder_sum lf2 lf3 false
 BV_full_adder_sum lf3 lf2 false
 (fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf2 false
 BV_full_adder_sum lf2 (@nil bool) false

Problem: synth_1

Problem: synth_16
 @nil bool

Problem: synth_19
 BV.consbv (HalfAdder.half_adder_sum a ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)))
 BV.consbv (HalfAdder.half_adder_sum a (BV_full_adder_carry l (@nil bool) false)) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a (BV_full_adder_carry l (@nil bool) false)))
 BV.consbv (HalfAdder.half_adder_sum lf4 a) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf4 a))
 BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)
 BV.consbv (HalfAdder.half_adder_sum a lf4) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a lf4))
 BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false))

Problem: synth_15
 BV_full_adder_sum lf2 (@cons bool lf4 (@nil bool)) false
 BV_full_adder_sum lf2 (@cons bool false (@nil bool)) false
 (fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf2 lf4
 BV_full_adder_sum lf2 (@nil bool) lf4
 (fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf2 false
 BV_full_adder_sum lf2 (@nil bool) false

Problem: synth_14
 @nil bool

Problem: synth_10
 BV_full_adder_sum lf2 (@cons bool false lf3) false
 BV_full_adder_sum lf2 (@cons bool false (@nil bool)) false
 BV_full_adder_sum lf2 lf3 false
 BV_full_adder_sum lf3 lf2 false
 (fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf2 false
 BV_full_adder_sum lf2 (@nil bool) false

Problem: synth_8
 (fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf3 false
 BV_full_adder_carry lf3 lf2 false
 (fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf2 false
 BV_full_adder_carry lf3 (@nil bool) false
 BV_full_adder_carry lf2 (@nil bool) false
 false

Problem: synth_3
 BV_full_adder_sum lf2 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf2 false)
 (fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf2 (BV_full_adder_carry lf2 (@nil bool) false)
 BV_full_adder_sum lf2 (@nil bool) (BV_full_adder_carry lf2 (@nil bool) false)
 BV_full_adder_sum lf2 (@cons bool false (@nil bool)) false
 (fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf2 false
 BV_full_adder_sum lf2 (@nil bool) false

Problem: synth_12

Problem: synth_5

Problem: synth_2
 @cons bool (FullAdder.full_adder_carry a a false) l
 @cons bool (FullAdder.full_adder_carry true a false) l
 @cons bool (FullAdder.full_adder_carry a true false) l
 @cons bool (HalfAdder.half_adder_carry a a) l
 @cons bool (HalfAdder.half_adder_carry a true) l
 @cons bool a l

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 429 seconds
Lemmas:
Lemma candidate_1: forall (a : bool) (l : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) false)   (@cons bool a l).
Lemma candidate_2: forall (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 (@nil bool) false) lf2.
Lemma candidate_3: forall (lf3 : list bool) (a : bool) (l : list bool), forall _ : @eq BV (BV_full_adder_sum l lf3 false) l, @eq BV (BV_full_adder_sum (@cons bool a l) lf3 false) (@cons bool a l).
Lemma candidate_4: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a a false) l).
Lemma candidate_5: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry true a false) l).
Lemma candidate_6: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a true false) l).
Lemma candidate_7: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a a) l).
Lemma candidate_8: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a true) l).
Lemma candidate_9: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l) (@cons bool a l).
Lemma candidate_10: forall (lf2 : list bool), @eq BV   (BV_full_adder_sum lf2 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf2 false))   lf2.
Lemma candidate_11: forall (lf2 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf2 (BV_full_adder_carry lf2 (@nil bool) false))   lf2.
Lemma candidate_12: forall (lf2 : list bool), @eq BV   (BV_full_adder_sum lf2 (@nil bool) (BV_full_adder_carry lf2 (@nil bool) false))   lf2.
Lemma candidate_13: forall (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 (@cons bool false (@nil bool)) false) lf2.
Lemma candidate_14: forall (lf2 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf2 false)   lf2.
Lemma candidate_15: forall (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 (@nil bool) false) lf2.
Lemma candidate_16: forall (lf3 : list bool) (lf4 : bool) (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 lf3 lf4)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf2 lf4).
Lemma candidate_17: forall (lf3 : list bool) (lf4 : bool) (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 lf3 lf4)   (BV_full_adder_sum lf2 (@nil bool) lf4).
Lemma candidate_18: forall (lf3 : list bool) (lf4 : bool) (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 lf3 lf4) (BV_full_adder_sum lf2 lf3 false).
Lemma candidate_19: forall (lf3 : list bool) (lf4 : bool) (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 lf3 lf4) (BV_full_adder_sum lf3 lf2 false).
Lemma candidate_20: forall (lf3 : list bool) (lf4 : bool) (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 lf3 lf4)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf2 false).
Lemma candidate_21: forall (lf3 : list bool) (lf4 : bool) (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 lf3 lf4)   (BV_full_adder_sum lf2 (@nil bool) false).
Lemma candidate_22: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (FullAdder.full_adder_sum a false false) (BV_full_adder_sum l (@nil bool) (FullAdder.full_adder_carry a false false)))   (@cons bool a l).
Lemma candidate_23: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry a false)))   (@cons bool a l).
Lemma candidate_24: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))))   (@cons bool a l).
Lemma candidate_25: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a (BV_full_adder_carry l (@nil bool) false)) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a (BV_full_adder_carry l (@nil bool) false))))   (@cons bool a l).
Lemma candidate_26: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_27: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false)))   (@cons bool a l).
Lemma candidate_28: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a a false) l).
Lemma candidate_29: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry true a false) l).
Lemma candidate_30: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a true false) l).
Lemma candidate_31: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a a) l).
Lemma candidate_32: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a true) l).
Lemma candidate_33: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l) (@cons bool a l).
Lemma candidate_34: forall (lf3 : list bool) (a : bool) (l : list bool) (lf4 : bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 lf4)   (BV_full_adder_sum lf3 (@cons bool false l) a).
Lemma candidate_35: forall (lf3 : list bool) (a : bool) (l : list bool) (lf4 : bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 lf4)   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_36: forall (lf3 : list bool) (a : bool) (l : list bool) (lf4 : bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 lf4)   (BV_full_adder_sum lf3 (@cons bool a l) lf4).
Lemma candidate_37: forall (lf3 : list bool) (a : bool) (l : list bool) (lf4 : bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 lf4)   (BV.consbv (HalfAdder.half_adder_sum a lf4) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a lf4))).
Lemma candidate_38: forall (lf3 : list bool) (a : bool) (l : list bool) (lf4 : bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 lf4)   (BV_full_adder_sum lf3 (@cons bool a l) false).
Lemma candidate_39: forall (lf3 : list bool) (a : bool) (l : list bool) (lf4 : bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 lf4)   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false))).
Lemma candidate_40: forall (lf3 : list bool) (lf2 : list bool), @eq BV   (BV_full_adder_sum lf2 lf3      ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf3 false))   lf2.
Lemma candidate_41: forall (lf3 : list bool) (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 lf3 (BV_full_adder_carry lf3 lf2 false)) lf2.
Lemma candidate_42: forall (lf3 : list bool) (lf2 : list bool), @eq BV   (BV_full_adder_sum lf2 lf3      ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf2 false))   lf2.
Lemma candidate_43: forall (lf3 : list bool) (lf2 : list bool), @eq BV   (BV_full_adder_sum lf2 lf3 (BV_full_adder_carry lf3 (@nil bool) false)) lf2.
Lemma candidate_44: forall (lf3 : list bool) (lf2 : list bool), @eq BV   (BV_full_adder_sum lf2 lf3 (BV_full_adder_carry lf2 (@nil bool) false)) lf2.
Lemma candidate_45: forall (lf3 : list bool) (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 lf3 (false)) lf2.
Lemma candidate_46: forall (lf2 : list bool), @eq BV   (BV_full_adder_sum lf2 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf2 false))   lf2.
Lemma candidate_47: forall (lf2 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf2 (BV_full_adder_carry lf2 (@nil bool) false))   lf2.
Lemma candidate_48: forall (lf2 : list bool), @eq BV   (BV_full_adder_sum lf2 (@nil bool) (BV_full_adder_carry lf2 (@nil bool) false))   lf2.
Lemma candidate_49: forall (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 (@cons bool false (@nil bool)) false) lf2.
Lemma candidate_50: forall (lf2 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf2 false)   lf2.
Lemma candidate_51: forall (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 (@nil bool) false) lf2.
Lemma candidate_52: @eq bool false (false).
Lemma candidate_53: forall (lf3 : list bool) (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 lf3 false)   (BV_full_adder_sum lf2 (@cons bool false lf3) false).
Lemma candidate_54: forall (lf3 : list bool) (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 lf3 false)   (BV_full_adder_sum lf2 (@cons bool false (@nil bool)) false).
Lemma candidate_55: forall (lf3 : list bool) (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 lf3 false) (BV_full_adder_sum lf2 lf3 false).
Lemma candidate_56: forall (lf3 : list bool) (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 lf3 false) (BV_full_adder_sum lf3 lf2 false).
Lemma candidate_57: forall (lf3 : list bool) (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 lf3 false)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf2 false).
Lemma candidate_58: forall (lf3 : list bool) (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 lf3 false)   (BV_full_adder_sum lf2 (@nil bool) false).
Lemma candidate_59: forall (lf3 : list bool) (a : bool) (l : list bool), @eq BV   (BV_full_adder_sum (@cons bool a l) lf3      ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf3 false))   (@cons bool a l).
Lemma candidate_60: forall (lf3 : list bool) (a : bool) (l : list bool), @eq BV   (BV_full_adder_sum (@cons bool a l) lf3 (BV_full_adder_carry lf3 l false))   (@cons bool a l).
Lemma candidate_61: forall (lf3 : list bool) (a : bool) (l : list bool), @eq BV   (BV_full_adder_sum (@cons bool a l) lf3      ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))   (@cons bool a l).
Lemma candidate_62: forall (lf3 : list bool) (a : bool) (l : list bool), @eq BV   (BV_full_adder_sum (@cons bool a l) lf3      (BV_full_adder_carry lf3 (@nil bool) false))    (@cons bool a l).
Lemma candidate_63: forall (lf3 : list bool) (a : bool) (l : list bool), @eq BV   (BV_full_adder_sum (@cons bool a l) lf3      (BV_full_adder_carry l (@nil bool) false)) (@cons bool a l).
Lemma candidate_64: forall (lf3 : list bool) (a : bool) (l : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 (false)) (@cons bool a l).
Lemma candidate_65: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (FullAdder.full_adder_sum a false false) (BV_full_adder_sum l (@nil bool) (FullAdder.full_adder_carry a false false)))   (@cons bool a l).
Lemma candidate_66: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry a false)))   (@cons bool a l).
Lemma candidate_67: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))))   (@cons bool a l).
Lemma candidate_68: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a (BV_full_adder_carry l (@nil bool) false)) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a (BV_full_adder_carry l (@nil bool) false))))   (@cons bool a l).
Lemma candidate_69: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_70: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false)))   (@cons bool a l).
Lemma candidate_71: @eq bool false (false).
Lemma candidate_72: forall (lf3 : list bool) (a : bool) (l : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 false)   (BV_full_adder_sum lf3 (@cons bool a l) (BV_full_adder_carry l (@nil bool) false)).
Lemma candidate_73: forall (lf3 : list bool) (a : bool) (l : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 false)   (BV.consbv (HalfAdder.half_adder_sum a (BV_full_adder_carry l (@nil bool) false)) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a (BV_full_adder_carry l (@nil bool) false)))).
Lemma candidate_74: forall (lf3 : list bool) (a : bool) (l : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 false)   (BV_full_adder_sum lf3 (@cons bool false l) a).
Lemma candidate_75: forall (lf3 : list bool) (a : bool) (l : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 false)   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_76: forall (lf3 : list bool) (a : bool) (l : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 false)   (BV_full_adder_sum lf3 (@cons bool a l) false).
Lemma candidate_77: forall (lf3 : list bool) (a : bool) (l : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 false)   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false))).
Lemma candidate_78: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a a false) l).
Lemma candidate_79: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry true a false) l).
Lemma candidate_80: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a true false) l).
Lemma candidate_81: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a a) l).
Lemma candidate_82: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a true) l).
Lemma candidate_83: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l) (@cons bool a l).
Lemma candidate_84: forall (lf2 : list bool), @eq BV   (BV_full_adder_sum lf2 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf2 false))   lf2.
Lemma candidate_85: forall (lf2 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf2 (BV_full_adder_carry lf2 (@nil bool) false))   lf2.
Lemma candidate_86: forall (lf2 : list bool), @eq BV   (BV_full_adder_sum lf2 (@nil bool) (BV_full_adder_carry lf2 (@nil bool) false))   lf2.
Lemma candidate_87: forall (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 (@cons bool false (@nil bool)) false) lf2.
Lemma candidate_88: forall (lf2 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf2 false)   lf2.
Lemma candidate_89: forall (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 (@nil bool) false) lf2.
Lemma candidate_90: forall (lf4 : bool) (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 (@nil bool) lf4) lf2.
Lemma candidate_91: forall (lf4 : bool) (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 (@nil bool) lf4)   (BV_full_adder_sum lf2 (@cons bool lf4 (@nil bool)) false).
Lemma candidate_92: forall (lf4 : bool) (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 (@nil bool) lf4)   (BV_full_adder_sum lf2 (@cons bool false (@nil bool)) false).
Lemma candidate_93: forall (lf4 : bool) (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 (@nil bool) lf4)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf2 lf4).
Lemma candidate_94: forall (lf4 : bool) (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 (@nil bool) lf4)   (BV_full_adder_sum lf2 (@nil bool) lf4).
Lemma candidate_95: forall (lf4 : bool) (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 (@nil bool) lf4)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf2 false).
Lemma candidate_96: forall (lf4 : bool) (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 (@nil bool) lf4)   (BV_full_adder_sum lf2 (@nil bool) false).
Lemma candidate_97: @eq (list bool) (@nil bool) (@nil bool).
Lemma candidate_98: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (FullAdder.full_adder_sum a false false) (BV_full_adder_sum l (@nil bool) (FullAdder.full_adder_carry a false false)))   (@cons bool a l).
Lemma candidate_99: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry a false)))   (@cons bool a l).
Lemma candidate_100: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))))   (@cons bool a l).
Lemma candidate_101: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a (BV_full_adder_carry l (@nil bool) false)) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a (BV_full_adder_carry l (@nil bool) false))))   (@cons bool a l).
Lemma candidate_102: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_103: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false)))   (@cons bool a l).
Lemma candidate_104: forall (a : bool) (l : list bool) (lf4 : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) lf4) (@cons bool a l).
Lemma candidate_105: forall (a : bool) (l : list bool) (lf4 : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) lf4)   (BV.consbv (HalfAdder.half_adder_sum a ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)))).
Lemma candidate_106: forall (a : bool) (l : list bool) (lf4 : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) lf4)   (BV.consbv (HalfAdder.half_adder_sum a (BV_full_adder_carry l (@nil bool) false)) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a (BV_full_adder_carry l (@nil bool) false)))).
Lemma candidate_107: forall (a : bool) (l : list bool) (lf4 : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) lf4)   (BV.consbv (HalfAdder.half_adder_sum lf4 a) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf4 a))).
Lemma candidate_108: forall (a : bool) (l : list bool) (lf4 : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) lf4)   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_109: forall (a : bool) (l : list bool) (lf4 : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) lf4)   (BV.consbv (HalfAdder.half_adder_sum a lf4) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a lf4))).
Lemma candidate_110: forall (a : bool) (l : list bool) (lf4 : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) lf4)   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false))).
Lemma candidate_111: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a a false) l).
Lemma candidate_112: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry true a false) l).
Lemma candidate_113: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a true false) l).
Lemma candidate_114: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a a) l).
Lemma candidate_115: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a true) l).
Lemma candidate_116: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l) (@cons bool a l).
Lemma candidate_117: @eq (list bool) (@nil bool) (@nil bool).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 628 seconds
Duplicates removed: 46
Filtered by Quickchick: 41
Filtered by script: 7
Remaining: 23

Lemmas: 
Lemma candidate_56: forall (lf3 : list bool) (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 lf3 false) (BV_full_adder_sum lf3 lf2 false).
Lemma candidate_7: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a a) l).
Lemma candidate_8: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a true) l).
Lemma candidate_4: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a a false) l).
Lemma candidate_6: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a true false) l).
Lemma candidate_5: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry true a false) l).
Lemma candidate_12: forall (lf2 : list bool), @eq BV   (BV_full_adder_sum lf2 (@nil bool) (BV_full_adder_carry lf2 (@nil bool) false))   lf2.
Lemma candidate_36: forall (lf3 : list bool) (a : bool) (l : list bool) (lf4 : bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 lf4)   (BV_full_adder_sum lf3 (@cons bool a l) lf4).
Lemma candidate_76: forall (lf3 : list bool) (a : bool) (l : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 false)   (BV_full_adder_sum lf3 (@cons bool a l) false).
Lemma candidate_74: forall (lf3 : list bool) (a : bool) (l : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 false)   (BV_full_adder_sum lf3 (@cons bool false l) a).
Lemma candidate_3: forall (lf3 : list bool) (a : bool) (l : list bool), forall _ : @eq BV (BV_full_adder_sum l lf3 false) l, @eq BV (BV_full_adder_sum (@cons bool a l) lf3 false) (@cons bool a l).
Lemma candidate_72: forall (lf3 : list bool) (a : bool) (l : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 false)   (BV_full_adder_sum lf3 (@cons bool a l) (BV_full_adder_carry l (@nil bool) false)).
Lemma candidate_22: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (FullAdder.full_adder_sum a false false) (BV_full_adder_sum l (@nil bool) (FullAdder.full_adder_carry a false false)))   (@cons bool a l).
Lemma candidate_10: forall (lf2 : list bool), @eq BV   (BV_full_adder_sum lf2 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf2 false))   lf2.
Lemma candidate_14: forall (lf2 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf2 false)   lf2.
Lemma candidate_26: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_93: forall (lf4 : bool) (lf2 : list bool), @eq BV (BV_full_adder_sum lf2 (@nil bool) lf4)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf2 lf4).
Lemma candidate_11: forall (lf2 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf2 (BV_full_adder_carry lf2 (@nil bool) false))   lf2.
Lemma candidate_27: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false)))   (@cons bool a l).
Lemma candidate_109: forall (a : bool) (l : list bool) (lf4 : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) lf4)   (BV.consbv (HalfAdder.half_adder_sum a lf4) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a lf4))).
Lemma candidate_107: forall (a : bool) (l : list bool) (lf4 : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) lf4)   (BV.consbv (HalfAdder.half_adder_sum lf4 a) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf4 a))).
Lemma candidate_25: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a (BV_full_adder_carry l (@nil bool) false)) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a (BV_full_adder_carry l (@nil bool) false))))   (@cons bool a l).
Lemma candidate_24: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))))   (@cons bool a l).