File Information
- File name: Adder
- Original Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/Adder/Adder_lemma_BV_full_adder_carry_eq3_200
- LFind Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/Adder/_lfind_Adder_lemma_BV_full_adder_carry_eq3_200
- Namespace: Circuits
- Proof name: BV_full_adder_carry_v_nil_false
- Theorem: Theorem BV_full_adder_carry_v_nil_false: forall v0 : BV, @eq bool (BV_full_adder_carry v0 nilbv false) false.
- Declarations: 
From lfind Require Import LFind.
From CircuitsCoqGym Require Import BV.
From CircuitsCoqGym Require Import FullAdder.

Proof Context
* Goal State: @eq bool (BV_full_adder_carry (@cons bool a l) (@nil bool) false) false

* Hypothesis:
H : @eq bool (BV_full_adder_carry l (@nil bool) false) false
v : BV
l : list bool
a : bool

* Types:
list bool
Set
Prop
bool

* Polymorphic Types:
list bool

* Variables:
l : list bool
a : bool

* Terms:
BV_full_adder_carry l (@nil bool) false : bool
false : bool
@eq bool (BV_full_adder_carry (@cons bool a l) (@nil bool) false) false : Prop
bool : Set
BV_full_adder_carry (@cons bool a l) (@nil bool) false : bool
@eq bool (BV_full_adder_carry l (@nil bool) false) false : Prop
@cons bool a l : list bool
@nil bool : list bool
BV : Set
list bool : Set
l : list bool
a : bool

* Functions:
BV_full_adder_carry  : forall (_ : list bool) (_ : list bool) (_ : bool), bool
list  : forall _ : Type, Type
@nil  : forall A : Type, list A
@cons  : forall (A : Type) (_ : A) (_ : list A), list A
@eq  : forall (A : Type) (_ : A) (_ : A), Prop

<---GENERALIZATION--->
Time elapsed: 3 seconds
Generalized Variables:
lf3 : list bool = @nil bool
lf1 : bool = BV_full_adder_carry (@cons bool a l) (@nil bool) false
lf4 : bool = false
lf2 : list bool = @cons bool a l

Generalizations:
Lemma conj1: forall (lf4 : bool) (lf1 : bool), @eq bool lf1 lf4.
Lemma conj3: forall (lf1 : bool), @eq bool lf1 false.
Lemma conj5: forall (lf2 : list bool) (lf4 : bool) (lf3 : list bool), @eq bool (BV_full_adder_carry lf2 lf3 lf4) lf4.
Lemma conj6: forall (lf4 : bool) (l : list bool) (a : bool) (lf3 : list bool), @eq bool (BV_full_adder_carry (@cons bool a l) lf3 lf4) lf4.
Lemma conj7: forall (lf2 : list bool) (lf3 : list bool), @eq bool (BV_full_adder_carry lf2 lf3 false) false.
Lemma conj8: forall (l : list bool) (a : bool) (lf3 : list bool), @eq bool (BV_full_adder_carry (@cons bool a l) lf3 false) false.
Lemma conj13: forall (lf2 : list bool) (lf4 : bool), @eq bool (BV_full_adder_carry lf2 (@nil bool) lf4) lf4.
Lemma conj14: forall (lf4 : bool) (l : list bool) (a : bool), @eq bool (BV_full_adder_carry (@cons bool a l) (@nil bool) lf4) lf4.
Lemma conj15: forall (lf2 : list bool), @eq bool (BV_full_adder_carry lf2 (@nil bool) false) false.
Lemma conj16: forall (l : list bool) (a : bool), @eq bool (BV_full_adder_carry (@cons bool a l) (@nil bool) false) false.


<---VALIDITY CHECKS--->
Time elapsed: 62 seconds
Valid:
Lemma conj16: forall (l : list bool) (a : bool), @eq bool (BV_full_adder_carry (@cons bool a l) (@nil bool) false) false.
Lemma conj15: forall (lf2 : list bool), @eq bool (BV_full_adder_carry lf2 (@nil bool) false) false.

Invalid:
Lemma conj14: forall (lf4 : bool) (l : list bool) (a : bool), @eq bool (BV_full_adder_carry (@cons bool a l) (@nil bool) lf4) lf4.
Lemma conj13: forall (lf2 : list bool) (lf4 : bool), @eq bool (BV_full_adder_carry lf2 (@nil bool) lf4) lf4.
Lemma conj8: forall (l : list bool) (a : bool) (lf3 : list bool), @eq bool (BV_full_adder_carry (@cons bool a l) lf3 false) false.
Lemma conj7: forall (lf2 : list bool) (lf3 : list bool), @eq bool (BV_full_adder_carry lf2 lf3 false) false.
Lemma conj6: forall (lf4 : bool) (l : list bool) (a : bool) (lf3 : list bool), @eq bool (BV_full_adder_carry (@cons bool a l) lf3 lf4) lf4.
Lemma conj5: forall (lf2 : list bool) (lf4 : bool) (lf3 : list bool), @eq bool (BV_full_adder_carry lf2 lf3 lf4) lf4.
Lemma conj3: forall (lf1 : bool), @eq bool lf1 false.
Lemma conj1: forall (lf4 : bool) (lf1 : bool), @eq bool lf1 lf4.

<---ADD IMPLICATIONS--->
Time elapsed: 86 seconds
Generalizations:
Lemma conj14: forall (lf4 : bool) (l : list bool) (a : bool), @eq bool (BV_full_adder_carry (@cons bool a l) (@nil bool) lf4) lf4.
Lemma conj13: forall (lf2 : list bool) (lf4 : bool), @eq bool (BV_full_adder_carry lf2 (@nil bool) lf4) lf4.
Lemma conj8: forall (l : list bool) (a : bool) (lf3 : list bool), @eq bool (BV_full_adder_carry (@cons bool a l) lf3 false) false.
Lemma conj8_imp: forall (l : list bool) (a : bool) (lf3 : list bool), forall _ : @eq bool (BV_full_adder_carry l lf3 false) false,
@eq bool (BV_full_adder_carry (@cons bool a l) lf3 false) false.
Lemma conj7: forall (lf2 : list bool) (lf3 : list bool), @eq bool (BV_full_adder_carry lf2 lf3 false) false.
Lemma conj6: forall (lf4 : bool) (l : list bool) (a : bool) (lf3 : list bool), @eq bool (BV_full_adder_carry (@cons bool a l) lf3 lf4) lf4.
Lemma conj5: forall (lf2 : list bool) (lf4 : bool) (lf3 : list bool), @eq bool (BV_full_adder_carry lf2 lf3 lf4) lf4.
Lemma conj3: forall (lf1 : bool), @eq bool lf1 false.
Lemma conj1: forall (lf4 : bool) (lf1 : bool), @eq bool lf1 lf4.


<---VALIDITY CHECKS--->
Time elapsed: 108 seconds
Valid:
Lemma conj8_imp: forall (l : list bool) (a : bool) (lf3 : list bool), forall _ : @eq bool (BV_full_adder_carry l lf3 false) false,
@eq bool (BV_full_adder_carry (@cons bool a l) lf3 false) false.

Invalid:
Lemma conj1: forall (lf4 : bool) (lf1 : bool), @eq bool lf1 lf4.
Lemma conj3: forall (lf1 : bool), @eq bool lf1 false.
Lemma conj5: forall (lf2 : list bool) (lf4 : bool) (lf3 : list bool), @eq bool (BV_full_adder_carry lf2 lf3 lf4) lf4.
Lemma conj6: forall (lf4 : bool) (l : list bool) (a : bool) (lf3 : list bool), @eq bool (BV_full_adder_carry (@cons bool a l) lf3 lf4) lf4.
Lemma conj7: forall (lf2 : list bool) (lf3 : list bool), @eq bool (BV_full_adder_carry lf2 lf3 false) false.
Lemma conj8: forall (l : list bool) (a : bool) (lf3 : list bool), @eq bool (BV_full_adder_carry (@cons bool a l) lf3 false) false.
Lemma conj13: forall (lf2 : list bool) (lf4 : bool), @eq bool (BV_full_adder_carry lf2 (@nil bool) lf4) lf4.
Lemma conj14: forall (lf4 : bool) (l : list bool) (a : bool), @eq bool (BV_full_adder_carry (@cons bool a l) (@nil bool) lf4) lf4.


<---CREATE SKETCHES--->
Time elapsed: 108 seconds
Sketches:
Sketch conj3_sketch0 : @eq bool lf1 (##hole##)
Sketch conj3_term_sketch0 : @eq bool false (##hole##)
Sketch conj5_sketch0 : @eq bool (##hole##) lf4
Sketch conj5_term_sketch0 : @eq bool (BV_full_adder_carry lf2 lf3 lf4) (##hole##)
Sketch conj6_sketch0 : @eq bool (##hole##) lf4
Sketch conj6_sketch1 : @eq bool (BV_full_adder_carry (##hole##) lf3 lf4) lf4
Sketch conj6_term_sketch0 : @eq bool (BV_full_adder_carry (@cons bool a l) lf3 lf4) (##hole##)
Sketch conj6_term_sketch1 : @eq (list bool) (@cons bool a l) (##hole##)
Sketch conj7_sketch0 : @eq bool (BV_full_adder_carry lf2 lf3 (##hole##)) (##hole##)
Sketch conj7_sketch1 : @eq bool (##hole##) false
Sketch conj7_term_sketch0 : @eq bool false (##hole##)
Sketch conj7_term_sketch1 : @eq bool (BV_full_adder_carry lf2 lf3 false) (##hole##)
Sketch conj8_sketch0 : @eq bool (BV_full_adder_carry (@cons bool a l) lf3 (##hole##)) (##hole##)
Sketch conj8_sketch1 : @eq bool (BV_full_adder_carry (##hole##) lf3 false) false
Sketch conj8_sketch2 : @eq bool (##hole##) false
Sketch conj8_term_sketch0 : @eq bool false (##hole##)
Sketch conj8_term_sketch1 : @eq (list bool) (@cons bool a l) (##hole##)
Sketch conj8_term_sketch2 : @eq bool (BV_full_adder_carry (@cons bool a l) lf3 false) (##hole##)
Sketch conj13_sketch0 : @eq bool (BV_full_adder_carry lf2 (##hole##) lf4) lf4
Sketch conj13_sketch1 : @eq bool (##hole##) lf4
Sketch conj13_term_sketch0 : @eq (list bool) (@nil bool) (##hole##)
Sketch conj13_term_sketch1 : @eq bool (BV_full_adder_carry lf2 (@nil bool) lf4) (##hole##)
Sketch conj14_sketch0 : @eq bool (##hole##) lf4
Sketch conj14_sketch1 : @eq bool (BV_full_adder_carry (##hole##) (@nil bool) lf4) lf4
Sketch conj14_sketch2 : @eq bool (BV_full_adder_carry (@cons bool a l) (##hole##) lf4) lf4
Sketch conj14_term_sketch0 : @eq bool (BV_full_adder_carry (@cons bool a l) (@nil bool) lf4) (##hole##)
Sketch conj14_term_sketch1 : @eq (list bool) (@cons bool a l) (##hole##)
Sketch conj14_term_sketch2 : @eq (list bool) (@nil bool) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 318 seconds
Problems per Sketch:
Sketch conj7_sketch1 --> Problem  synth_2
Sketch conj6_sketch1 --> Problem  synth_5
Sketch conj5_sketch0 --> Problem  synth_3
Sketch conj14_sketch2 --> Problem  synth_15
Sketch conj3_term_sketch0 --> Problem  synth_2
Sketch conj7_term_sketch0 --> Problem  synth_2
Sketch conj13_term_sketch0 --> Problem  synth_12
Sketch conj14_term_sketch2 --> Problem  synth_12
Sketch conj6_term_sketch1 --> Problem  synth_7
Sketch conj8_sketch1 --> Problem  synth_10
Sketch conj7_sketch0 --> Problem  synth_8
Sketch conj6_term_sketch0 --> Problem  synth_6
Sketch conj13_sketch1 --> Problem  synth_3
Sketch conj14_sketch0 --> Problem  synth_3
Sketch conj13_term_sketch1 --> Problem  synth_13
Sketch conj8_term_sketch0 --> Problem  synth_2
Sketch conj3_sketch0 --> Problem  synth_1
Sketch conj14_term_sketch0 --> Problem  synth_16
Sketch conj13_sketch0 --> Problem  synth_11
Sketch conj8_sketch2 --> Problem  synth_2
Sketch conj8_sketch0 --> Problem  synth_9
Sketch conj14_term_sketch1 --> Problem  synth_7
Sketch conj7_term_sketch1 --> Problem  synth_8
Sketch conj8_term_sketch1 --> Problem  synth_7
Sketch conj8_term_sketch2 --> Problem  synth_9
Sketch conj5_term_sketch0 --> Problem  synth_4
Sketch conj6_sketch0 --> Problem  synth_3
Sketch conj14_sketch1 --> Problem  synth_14


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 433 seconds

Problem: synth_16
 (fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l lf4
 BV_full_adder_carry l (@nil bool) lf4
 (fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false
 BV_full_adder_carry l (@nil bool) false
 lf4
 false

Problem: synth_15
 @nil bool

Problem: synth_14

Problem: synth_10

Problem: synth_8
 (fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf3 false
 BV_full_adder_carry lf3 lf2 false
 (fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf2 false
 BV_full_adder_carry lf3 (@nil bool) false
 BV_full_adder_carry lf2 (@nil bool) false
 false

Problem: synth_3
 HalfAdder.half_adder_carry lf4 (HalfAdder.half_adder_carry lf4 false)
 HalfAdder.half_adder_carry lf4 lf4
 HalfAdder.half_adder_carry lf4 true
 HalfAdder.half_adder_carry lf4 false
 lf4
 false

Problem: synth_9
 (fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf3 false
 BV_full_adder_carry lf3 l false
 (fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false
 BV_full_adder_carry lf3 (@nil bool) false
 BV_full_adder_carry l (@nil bool) false
 false

Problem: synth_13
 (fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf2 lf4
 BV_full_adder_carry lf2 (@nil bool) lf4
 (fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf2 false
 BV_full_adder_carry lf2 (@nil bool) false
 lf4
 false

Problem: synth_12
 @nil bool

Problem: synth_6
 BV_full_adder_carry lf3 l false
 (fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false
 BV_full_adder_carry lf3 (@nil bool) false
 BV_full_adder_carry l (@nil bool) false
 lf4
 false

Problem: synth_11
 @nil bool

Problem: synth_7
 @cons bool (FullAdder.full_adder_carry a a false) l
 @cons bool (FullAdder.full_adder_carry true a false) l
 @cons bool (FullAdder.full_adder_carry a true false) l
 @cons bool (HalfAdder.half_adder_carry a a) l
 @cons bool (HalfAdder.half_adder_carry a true) l
 @cons bool a l

Problem: synth_5

Problem: synth_4
 BV_full_adder_carry lf3 lf2 false
 (fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf2 false
 BV_full_adder_carry lf3 (@nil bool) false
 BV_full_adder_carry lf2 (@nil bool) false
 lf4
 false

Problem: synth_1
 HalfAdder.half_adder_carry lf1 (HalfAdder.half_adder_carry lf1 false)
 HalfAdder.half_adder_carry lf1 lf1
 HalfAdder.half_adder_carry lf1 true
 HalfAdder.half_adder_carry lf1 false
 lf1
 false

Problem: synth_2
 false

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 433 seconds
Lemmas:
Lemma candidate_1: forall (a : bool) (l : list bool), @eq bool (BV_full_adder_carry (@cons bool a l) (@nil bool) false) false.
Lemma candidate_2: forall (lf2 : list bool), @eq bool (BV_full_adder_carry lf2 (@nil bool) false) false.
Lemma candidate_3: forall (lf3 : list bool) (a : bool) (l : list bool), forall _ : @eq bool (BV_full_adder_carry l lf3 false) false, @eq bool (BV_full_adder_carry (@cons bool a l) lf3 false) false.
Lemma candidate_4: forall (lf1 : bool), @eq bool lf1   (HalfAdder.half_adder_carry lf1 (HalfAdder.half_adder_carry lf1 false)).
Lemma candidate_5: forall (lf1 : bool), @eq bool lf1 (HalfAdder.half_adder_carry lf1 lf1).
Lemma candidate_6: forall (lf1 : bool), @eq bool lf1 (HalfAdder.half_adder_carry lf1 true).
Lemma candidate_7: forall (lf1 : bool), @eq bool lf1 (HalfAdder.half_adder_carry lf1 false).
Lemma candidate_8: forall (lf1 : bool), @eq bool lf1 (lf1).
Lemma candidate_9: forall (lf1 : bool), @eq bool lf1 (false).
Lemma candidate_10: @eq bool false (false).
Lemma candidate_11: forall (lf4 : bool), @eq bool   (HalfAdder.half_adder_carry lf4 (HalfAdder.half_adder_carry lf4 false)) lf4.
Lemma candidate_12: forall (lf4 : bool), @eq bool (HalfAdder.half_adder_carry lf4 lf4) lf4.
Lemma candidate_13: forall (lf4 : bool), @eq bool (HalfAdder.half_adder_carry lf4 true) lf4.
Lemma candidate_14: forall (lf4 : bool), @eq bool (HalfAdder.half_adder_carry lf4 false) lf4.
Lemma candidate_15: forall (lf4 : bool), @eq bool (lf4) lf4.
Lemma candidate_16: forall (lf4 : bool), @eq bool (false) lf4.
Lemma candidate_17: forall (lf3 : list bool) (lf4 : bool) (lf2 : list bool), @eq bool (BV_full_adder_carry lf2 lf3 lf4)   (BV_full_adder_carry lf3 lf2 false).
Lemma candidate_18: forall (lf3 : list bool) (lf4 : bool) (lf2 : list bool), @eq bool (BV_full_adder_carry lf2 lf3 lf4)   ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf2 false).
Lemma candidate_19: forall (lf3 : list bool) (lf4 : bool) (lf2 : list bool), @eq bool (BV_full_adder_carry lf2 lf3 lf4)   (BV_full_adder_carry lf3 (@nil bool) false).
Lemma candidate_20: forall (lf3 : list bool) (lf4 : bool) (lf2 : list bool), @eq bool (BV_full_adder_carry lf2 lf3 lf4)   (BV_full_adder_carry lf2 (@nil bool) false).
Lemma candidate_21: forall (lf3 : list bool) (lf4 : bool) (lf2 : list bool), @eq bool (BV_full_adder_carry lf2 lf3 lf4) (lf4).
Lemma candidate_22: forall (lf3 : list bool) (lf4 : bool) (lf2 : list bool), @eq bool (BV_full_adder_carry lf2 lf3 lf4) (false).
Lemma candidate_23: forall (lf4 : bool), @eq bool   (HalfAdder.half_adder_carry lf4 (HalfAdder.half_adder_carry lf4 false)) lf4.
Lemma candidate_24: forall (lf4 : bool), @eq bool (HalfAdder.half_adder_carry lf4 lf4) lf4.
Lemma candidate_25: forall (lf4 : bool), @eq bool (HalfAdder.half_adder_carry lf4 true) lf4.
Lemma candidate_26: forall (lf4 : bool), @eq bool (HalfAdder.half_adder_carry lf4 false) lf4.
Lemma candidate_27: forall (lf4 : bool), @eq bool (lf4) lf4.
Lemma candidate_28: forall (lf4 : bool), @eq bool (false) lf4.
Lemma candidate_29: forall (lf3 : list bool) (a : bool) (l : list bool) (lf4 : bool), @eq bool (BV_full_adder_carry (@cons bool a l) lf3 lf4)   (BV_full_adder_carry lf3 l false).
Lemma candidate_30: forall (lf3 : list bool) (a : bool) (l : list bool) (lf4 : bool), @eq bool (BV_full_adder_carry (@cons bool a l) lf3 lf4)   ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false).
Lemma candidate_31: forall (lf3 : list bool) (a : bool) (l : list bool) (lf4 : bool), @eq bool (BV_full_adder_carry (@cons bool a l) lf3 lf4)   (BV_full_adder_carry lf3 (@nil bool) false).
Lemma candidate_32: forall (lf3 : list bool) (a : bool) (l : list bool) (lf4 : bool), @eq bool (BV_full_adder_carry (@cons bool a l) lf3 lf4)   (BV_full_adder_carry l (@nil bool) false).
Lemma candidate_33: forall (lf3 : list bool) (a : bool) (l : list bool) (lf4 : bool), @eq bool (BV_full_adder_carry (@cons bool a l) lf3 lf4) (lf4).
Lemma candidate_34: forall (lf3 : list bool) (a : bool) (l : list bool) (lf4 : bool), @eq bool (BV_full_adder_carry (@cons bool a l) lf3 lf4) (false).
Lemma candidate_35: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a a false) l).
Lemma candidate_36: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry true a false) l).
Lemma candidate_37: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a true false) l).
Lemma candidate_38: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a a) l).
Lemma candidate_39: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a true) l).
Lemma candidate_40: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l) (@cons bool a l).
Lemma candidate_41: forall (lf3 : list bool) (lf2 : list bool), @eq bool   (BV_full_adder_carry lf2 lf3      ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf3 false))   ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf3 false).
Lemma candidate_42: forall (lf3 : list bool) (lf2 : list bool), @eq bool (BV_full_adder_carry lf2 lf3 (BV_full_adder_carry lf3 lf2 false))   (BV_full_adder_carry lf3 lf2 false).
Lemma candidate_43: forall (lf3 : list bool) (lf2 : list bool), @eq bool   (BV_full_adder_carry lf2 lf3      ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf2 false))   ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf2 false).
Lemma candidate_44: forall (lf3 : list bool) (lf2 : list bool), @eq bool   (BV_full_adder_carry lf2 lf3 (BV_full_adder_carry lf3 (@nil bool) false))   (BV_full_adder_carry lf3 (@nil bool) false).
Lemma candidate_45: forall (lf3 : list bool) (lf2 : list bool), @eq bool   (BV_full_adder_carry lf2 lf3 (BV_full_adder_carry lf2 (@nil bool) false))   (BV_full_adder_carry lf2 (@nil bool) false).
Lemma candidate_46: forall (lf3 : list bool) (lf2 : list bool), @eq bool (BV_full_adder_carry lf2 lf3 (false)) (false).
Lemma candidate_47: @eq bool (false) false.
Lemma candidate_48: @eq bool false (false).
Lemma candidate_49: forall (lf3 : list bool) (lf2 : list bool), @eq bool (BV_full_adder_carry lf2 lf3 false)   ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf3 false).
Lemma candidate_50: forall (lf3 : list bool) (lf2 : list bool), @eq bool (BV_full_adder_carry lf2 lf3 false)   (BV_full_adder_carry lf3 lf2 false).
Lemma candidate_51: forall (lf3 : list bool) (lf2 : list bool), @eq bool (BV_full_adder_carry lf2 lf3 false)   ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf2 false).
Lemma candidate_52: forall (lf3 : list bool) (lf2 : list bool), @eq bool (BV_full_adder_carry lf2 lf3 false)   (BV_full_adder_carry lf3 (@nil bool) false).
Lemma candidate_53: forall (lf3 : list bool) (lf2 : list bool), @eq bool (BV_full_adder_carry lf2 lf3 false)   (BV_full_adder_carry lf2 (@nil bool) false).
Lemma candidate_54: forall (lf3 : list bool) (lf2 : list bool), @eq bool (BV_full_adder_carry lf2 lf3 false) (false).
Lemma candidate_55: forall (lf3 : list bool) (a : bool) (l : list bool), @eq bool   (BV_full_adder_carry (@cons bool a l) lf3      ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf3 false))   ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf3 false).
Lemma candidate_56: forall (lf3 : list bool) (a : bool) (l : list bool), @eq bool   (BV_full_adder_carry (@cons bool a l) lf3 (BV_full_adder_carry lf3 l false))   (BV_full_adder_carry lf3 l false).
Lemma candidate_57: forall (lf3 : list bool) (a : bool) (l : list bool), @eq bool   (BV_full_adder_carry (@cons bool a l) lf3      ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))   ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false).
Lemma candidate_58: forall (lf3 : list bool) (a : bool) (l : list bool), @eq bool   (BV_full_adder_carry (@cons bool a l) lf3      (BV_full_adder_carry lf3 (@nil bool) false))   (BV_full_adder_carry lf3 (@nil bool) false).
Lemma candidate_59: forall (lf3 : list bool) (a : bool) (l : list bool), @eq bool   (BV_full_adder_carry (@cons bool a l) lf3      (BV_full_adder_carry l (@nil bool) false))   (BV_full_adder_carry l (@nil bool) false).
Lemma candidate_60: forall (lf3 : list bool) (a : bool) (l : list bool), @eq bool (BV_full_adder_carry (@cons bool a l) lf3 (false)) (false).
Lemma candidate_61: @eq bool (false) false.
Lemma candidate_62: @eq bool false (false).
Lemma candidate_63: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a a false) l).
Lemma candidate_64: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry true a false) l).
Lemma candidate_65: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a true false) l).
Lemma candidate_66: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a a) l).
Lemma candidate_67: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a true) l).
Lemma candidate_68: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l) (@cons bool a l).
Lemma candidate_69: forall (lf3 : list bool) (a : bool) (l : list bool), @eq bool (BV_full_adder_carry (@cons bool a l) lf3 false)   ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf3 false).
Lemma candidate_70: forall (lf3 : list bool) (a : bool) (l : list bool), @eq bool (BV_full_adder_carry (@cons bool a l) lf3 false)   (BV_full_adder_carry lf3 l false).
Lemma candidate_71: forall (lf3 : list bool) (a : bool) (l : list bool), @eq bool (BV_full_adder_carry (@cons bool a l) lf3 false)   ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false).
Lemma candidate_72: forall (lf3 : list bool) (a : bool) (l : list bool), @eq bool (BV_full_adder_carry (@cons bool a l) lf3 false)   (BV_full_adder_carry lf3 (@nil bool) false).
Lemma candidate_73: forall (lf3 : list bool) (a : bool) (l : list bool), @eq bool (BV_full_adder_carry (@cons bool a l) lf3 false)   (BV_full_adder_carry l (@nil bool) false).
Lemma candidate_74: forall (lf3 : list bool) (a : bool) (l : list bool), @eq bool (BV_full_adder_carry (@cons bool a l) lf3 false) (false).
Lemma candidate_75: forall (lf4 : bool) (lf2 : list bool), @eq bool (BV_full_adder_carry lf2 (@nil bool) lf4) lf4.
Lemma candidate_76: forall (lf4 : bool), @eq bool   (HalfAdder.half_adder_carry lf4 (HalfAdder.half_adder_carry lf4 false)) lf4.
Lemma candidate_77: forall (lf4 : bool), @eq bool (HalfAdder.half_adder_carry lf4 lf4) lf4.
Lemma candidate_78: forall (lf4 : bool), @eq bool (HalfAdder.half_adder_carry lf4 true) lf4.
Lemma candidate_79: forall (lf4 : bool), @eq bool (HalfAdder.half_adder_carry lf4 false) lf4.
Lemma candidate_80: forall (lf4 : bool), @eq bool (lf4) lf4.
Lemma candidate_81: forall (lf4 : bool), @eq bool (false) lf4.
Lemma candidate_82: @eq (list bool) (@nil bool) (@nil bool).
Lemma candidate_83: forall (lf4 : bool) (lf2 : list bool), @eq bool (BV_full_adder_carry lf2 (@nil bool) lf4)   ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf2 lf4).
Lemma candidate_84: forall (lf4 : bool) (lf2 : list bool), @eq bool (BV_full_adder_carry lf2 (@nil bool) lf4)   (BV_full_adder_carry lf2 (@nil bool) lf4).
Lemma candidate_85: forall (lf4 : bool) (lf2 : list bool), @eq bool (BV_full_adder_carry lf2 (@nil bool) lf4)   ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf2 false).
Lemma candidate_86: forall (lf4 : bool) (lf2 : list bool), @eq bool (BV_full_adder_carry lf2 (@nil bool) lf4)   (BV_full_adder_carry lf2 (@nil bool) false).
Lemma candidate_87: forall (lf4 : bool) (lf2 : list bool), @eq bool (BV_full_adder_carry lf2 (@nil bool) lf4) (lf4).
Lemma candidate_88: forall (lf4 : bool) (lf2 : list bool), @eq bool (BV_full_adder_carry lf2 (@nil bool) lf4) (false).
Lemma candidate_89: forall (lf4 : bool), @eq bool   (HalfAdder.half_adder_carry lf4 (HalfAdder.half_adder_carry lf4 false)) lf4.
Lemma candidate_90: forall (lf4 : bool), @eq bool (HalfAdder.half_adder_carry lf4 lf4) lf4.
Lemma candidate_91: forall (lf4 : bool), @eq bool (HalfAdder.half_adder_carry lf4 true) lf4.
Lemma candidate_92: forall (lf4 : bool), @eq bool (HalfAdder.half_adder_carry lf4 false) lf4.
Lemma candidate_93: forall (lf4 : bool), @eq bool (lf4) lf4.
Lemma candidate_94: forall (lf4 : bool), @eq bool (false) lf4.
Lemma candidate_95: forall (a : bool) (l : list bool) (lf4 : bool), @eq bool (BV_full_adder_carry (@cons bool a l) (@nil bool) lf4) lf4.
Lemma candidate_96: forall (a : bool) (l : list bool) (lf4 : bool), @eq bool (BV_full_adder_carry (@cons bool a l) (@nil bool) lf4)   ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l lf4).
Lemma candidate_97: forall (a : bool) (l : list bool) (lf4 : bool), @eq bool (BV_full_adder_carry (@cons bool a l) (@nil bool) lf4)   (BV_full_adder_carry l (@nil bool) lf4).
Lemma candidate_98: forall (a : bool) (l : list bool) (lf4 : bool), @eq bool (BV_full_adder_carry (@cons bool a l) (@nil bool) lf4)   ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false).
Lemma candidate_99: forall (a : bool) (l : list bool) (lf4 : bool), @eq bool (BV_full_adder_carry (@cons bool a l) (@nil bool) lf4)   (BV_full_adder_carry l (@nil bool) false).
Lemma candidate_100: forall (a : bool) (l : list bool) (lf4 : bool), @eq bool (BV_full_adder_carry (@cons bool a l) (@nil bool) lf4) (lf4).
Lemma candidate_101: forall (a : bool) (l : list bool) (lf4 : bool), @eq bool (BV_full_adder_carry (@cons bool a l) (@nil bool) lf4) (false).
Lemma candidate_102: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a a false) l).
Lemma candidate_103: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry true a false) l).
Lemma candidate_104: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a true false) l).
Lemma candidate_105: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a a) l).
Lemma candidate_106: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a true) l).
Lemma candidate_107: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l) (@cons bool a l).
Lemma candidate_108: @eq (list bool) (@nil bool) (@nil bool).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 621 seconds
Duplicates removed: 35
Filtered by Quickchick: 52
Filtered by script: 9
Remaining: 12

Lemmas: 
Lemma candidate_12: forall (lf4 : bool), @eq bool (HalfAdder.half_adder_carry lf4 lf4) lf4.
Lemma candidate_5: forall (lf1 : bool), @eq bool lf1 (HalfAdder.half_adder_carry lf1 lf1).
Lemma candidate_6: forall (lf1 : bool), @eq bool lf1 (HalfAdder.half_adder_carry lf1 true).
Lemma candidate_50: forall (lf3 : list bool) (lf2 : list bool), @eq bool (BV_full_adder_carry lf2 lf3 false)   (BV_full_adder_carry lf3 lf2 false).
Lemma candidate_38: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a a) l).
Lemma candidate_39: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a true) l).
Lemma candidate_35: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a a false) l).
Lemma candidate_37: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a true false) l).
Lemma candidate_36: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry true a false) l).
Lemma candidate_42: forall (lf3 : list bool) (lf2 : list bool), @eq bool (BV_full_adder_carry lf2 lf3 (BV_full_adder_carry lf3 lf2 false))   (BV_full_adder_carry lf3 lf2 false).
Lemma candidate_3: forall (lf3 : list bool) (a : bool) (l : list bool), forall _ : @eq bool (BV_full_adder_carry l lf3 false) false, @eq bool (BV_full_adder_carry (@cons bool a l) lf3 false) false.
Lemma candidate_83: forall (lf4 : bool) (lf2 : list bool), @eq bool (BV_full_adder_carry lf2 (@nil bool) lf4)   ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf2 lf4).