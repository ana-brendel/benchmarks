LFind Results
LFind Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/Adder/_lfind_Adder_lemma_BV_full_adder_sum_eq4_211

Number of Lemmas: 100
Number of Lemmas (after duplicates removed): 61
Number of Lemmas (after QuickChick used to filter): 61
* Number of Candidate Lemmas: 42

Time until ranking: 615
Time to complete: 2060

Stuck state true independent of hypotheses: true

Category 1:
Count = 22

Lemma candidate_20: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a a) l).
Lemma candidate_21: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a true) l).
Lemma candidate_44: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0)   (@cons bool (HalfAdder.half_adder_carry a0 a0) l0).
Lemma candidate_17: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a a false) l).
Lemma candidate_45: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0)   (@cons bool (HalfAdder.half_adder_carry a0 true) l0).
Lemma candidate_19: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a true false) l).
Lemma candidate_18: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry true a false) l).
Lemma candidate_41: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0)   (@cons bool (FullAdder.full_adder_carry a0 a0 false) l0).
Lemma candidate_43: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0)   (@cons bool (FullAdder.full_adder_carry a0 true false) l0).
Lemma candidate_42: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0)   (@cons bool (FullAdder.full_adder_carry true a0 false) l0).
Lemma candidate_81: forall (lf4 : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool a0 l0) cin)   (BV_full_adder_sum lf4 (@cons bool cin l0) a0).
Lemma candidate_23: forall (lf3 : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf4 lf3 cin)   (BV_full_adder_sum lf4 lf3 (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_6: forall (lf3 : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf3 lf4 cin)   (BV_full_adder_sum lf3 lf4 (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_25: forall (lf3 : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf4 lf3 cin)   (BV_full_adder_sum lf4 lf3 (HalfAdder.half_adder_carry cin true)).
Lemma candidate_8: forall (lf3 : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf3 lf4 cin)   (BV_full_adder_sum lf3 lf4 (HalfAdder.half_adder_carry cin true)).
Lemma candidate_12: forall (lf3 : list bool) (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf3 (@cons bool a l) cin)   (BV_full_adder_sum lf3 (@cons bool a l) (HalfAdder.half_adder_carry cin true)).
Lemma candidate_78: forall (lf4 : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool a0 l0) cin)   (BV_full_adder_sum lf4 (@cons bool a0 l0) (HalfAdder.half_adder_carry cin true)).
Lemma candidate_99: forall (a : bool) (l : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@cons bool a0 l0) cin)   (BV.consbv (FullAdder.full_adder_sum a0 a cin) (BV_full_adder_sum l l0 (FullAdder.full_adder_carry a0 a cin))).
Lemma candidate_96: forall (a : bool) (l : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@cons bool a0 l0) cin)   (BV.consbv (FullAdder.full_adder_sum a cin a0) (BV_full_adder_sum l l0 (FullAdder.full_adder_carry a cin a0))).
Lemma candidate_95: forall (a : bool) (l : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@cons bool a0 l0) cin)   (BV.consbv (FullAdder.full_adder_sum cin a a0) (BV_full_adder_sum l l0 (FullAdder.full_adder_carry cin a a0))).
Lemma candidate_68: forall (a : bool) (l : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a0 l0) (@cons bool a l) cin)   (BV.consbv (FullAdder.full_adder_sum a a0 cin) (BV_full_adder_sum l0 l (FullAdder.full_adder_carry a a0 cin))).
Lemma candidate_49: forall (lf4 : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a0 l0) lf4 cin)   (match lf4 with | nil => fun y z : bool => BV.consbv (HalfAdder.half_adder_sum y z) (BV_full_adder_sum l0 (@nil bool) (HalfAdder.half_adder_carry y z)) | cons b0 l1 => fun y z : bool => BV.consbv (FullAdder.full_adder_sum y b0 z) (BV_full_adder_sum l0 l1 (FullAdder.full_adder_carry y b0 z)) end cin a0).

Category 2:
Count = 20

Lemma candidate_39: forall (lf3 : list bool) (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 cin)   (BV_full_adder_sum lf3 (@cons bool cin l) a).
Lemma candidate_15: forall (lf3 : list bool) (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf3 (@cons bool a l) cin)   (BV_full_adder_sum lf3 (@cons bool cin l) a).
Lemma candidate_51: forall (lf4 : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a0 l0) lf4 cin)   (BV_full_adder_sum lf4 (@cons bool cin l0) a0).
Lemma candidate_24: forall (lf3 : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf4 lf3 cin)   (BV_full_adder_sum lf3 lf4 (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_5: forall (lf3 : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf3 lf4 cin)   (BV_full_adder_sum lf4 lf3 (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_26: forall (lf3 : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf4 lf3 cin)   (BV_full_adder_sum lf3 lf4 (HalfAdder.half_adder_carry cin true)).
Lemma candidate_7: forall (lf3 : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf3 lf4 cin)   (BV_full_adder_sum lf4 lf3 (HalfAdder.half_adder_carry cin true)).
Lemma candidate_36: forall (lf3 : list bool) (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 cin)   (BV_full_adder_sum lf3 (@cons bool a l) (HalfAdder.half_adder_carry cin true)).
Lemma candidate_35: forall (lf3 : list bool) (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 cin)   (BV_full_adder_sum lf3 (@cons bool cin l) (HalfAdder.half_adder_carry a true)).
Lemma candidate_11: forall (lf3 : list bool) (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf3 (@cons bool a l) cin)   (BV_full_adder_sum lf3 (@cons bool cin l) (HalfAdder.half_adder_carry a true)).
Lemma candidate_77: forall (lf4 : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool a0 l0) cin)   (BV_full_adder_sum lf4 (@cons bool cin l0) (HalfAdder.half_adder_carry a0 true)).
Lemma candidate_48: forall (lf4 : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a0 l0) lf4 cin)   (BV_full_adder_sum lf4 (@cons bool a0 l0) (HalfAdder.half_adder_carry cin true)).
Lemma candidate_47: forall (lf4 : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a0 l0) lf4 cin)   (BV_full_adder_sum lf4 (@cons bool cin l0) (HalfAdder.half_adder_carry a0 true)).
Lemma candidate_98: forall (a : bool) (l : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@cons bool a0 l0) cin)   (BV.consbv (FullAdder.full_adder_sum a a0 cin) (BV_full_adder_sum l0 l (FullAdder.full_adder_carry a a0 cin))).
Lemma candidate_69: forall (a : bool) (l : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a0 l0) (@cons bool a l) cin)   (BV.consbv (FullAdder.full_adder_sum a0 a cin) (BV_full_adder_sum l l0 (FullAdder.full_adder_carry a0 a cin))).
Lemma candidate_66: forall (a : bool) (l : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a0 l0) (@cons bool a l) cin)   (BV.consbv (FullAdder.full_adder_sum a cin a0) (BV_full_adder_sum l l0 (FullAdder.full_adder_carry a cin a0))).
Lemma candidate_65: forall (a : bool) (l : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a0 l0) (@cons bool a l) cin)   (BV.consbv (FullAdder.full_adder_sum cin a a0) (BV_full_adder_sum l l0 (FullAdder.full_adder_carry cin a a0))).
Lemma candidate_37: forall (lf3 : list bool) (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 cin)   (match lf3 with | nil => fun y z : bool => BV.consbv (HalfAdder.half_adder_sum y z) (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry y z)) | cons b0 l1 => fun y z : bool => BV.consbv (FullAdder.full_adder_sum y b0 z) (BV_full_adder_sum l l1 (FullAdder.full_adder_carry y b0 z)) end cin a).
Lemma candidate_13: forall (lf3 : list bool) (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf3 (@cons bool a l) cin)   (match lf3 with | nil => fun y z : bool => BV.consbv (HalfAdder.half_adder_sum y z) (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry y z)) | cons b0 l1 => fun y z : bool => BV.consbv (FullAdder.full_adder_sum y b0 z) (BV_full_adder_sum l l1 (FullAdder.full_adder_carry y b0 z)) end cin a).
Lemma candidate_79: forall (lf4 : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool a0 l0) cin)   (match lf4 with | nil => fun y z : bool => BV.consbv (HalfAdder.half_adder_sum y z) (BV_full_adder_sum l0 (@nil bool) (HalfAdder.half_adder_carry y z)) | cons b0 l1 => fun y z : bool => BV.consbv (FullAdder.full_adder_sum y b0 z) (BV_full_adder_sum l0 l1 (FullAdder.full_adder_carry y b0 z)) end cin a0).

Category 3 (provable):
Count = 0


Category 3 (not provable):
Count = 0
