File Information
- File name: Adder
- Original Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/Adder/Adder_lemma_BV_full_adder_sum_eq4_211
- LFind Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/Adder/_lfind_Adder_lemma_BV_full_adder_sum_eq4_211
- Namespace: Circuits
- Proof name: BV_full_adder_sum_sym
- Theorem: Theorem BV_full_adder_sum_sym: forall (v0 w0 : BV) (cin0 : bool),
@eq BV (BV_full_adder_sum v0 w0 cin0) (BV_full_adder_sum w0 v0 cin0).
- Declarations: 
From lfind Require Import LFind.
From CircuitsCoqGym Require Import BV.
From CircuitsCoqGym Require Import FullAdder.

Proof Context
* Goal State: @eq BV (BV_full_adder_sum (@cons bool a l) (@cons bool a0 l0) cin)
  (BV_full_adder_sum (@cons bool a0 l0) (@cons bool a l) cin)

* Hypothesis:
H0 : forall cin0 : bool,
@eq BV (BV_full_adder_sum (@cons bool a l) l0 cin0)
  (BV_full_adder_sum l0 (@cons bool a l) cin0)
cin : bool
l0 : list bool
a0 : bool
H : forall (w0 : BV) (cin0 : bool),
@eq BV (BV_full_adder_sum l w0 cin0) (BV_full_adder_sum w0 l cin0)
v : BV
w : BV
l : list bool
a : bool

* Types:
Set
list bool
Prop
BV
bool

* Polymorphic Types:
list bool

* Variables:
cin : bool
l0 : list bool
a0 : bool
l : list bool
a : bool

* Terms:
@eq BV (BV_full_adder_sum l _UNBOUND_REL_2 _UNBOUND_REL_1)
  (BV_full_adder_sum _UNBOUND_REL_2 l _UNBOUND_REL_1) : Prop
BV_full_adder_sum (@cons bool a l) l0 _UNBOUND_REL_1 : BV
@cons bool a0 l0 : list bool
cin : bool
BV_full_adder_sum _UNBOUND_REL_2 l _UNBOUND_REL_1 : BV
@cons bool a l : list bool
@eq BV (BV_full_adder_sum (@cons bool a l) (@cons bool a0 l0) cin)
  (BV_full_adder_sum (@cons bool a0 l0) (@cons bool a l) cin) : Prop
l : list bool
BV_full_adder_sum (@cons bool a l) (@cons bool a0 l0) cin : BV
BV_full_adder_sum l0 (@cons bool a l) _UNBOUND_REL_1 : BV
bool : Set
l0 : list bool
a0 : bool
BV_full_adder_sum l _UNBOUND_REL_2 _UNBOUND_REL_1 : BV
forall (w0 : BV) (cin0 : bool),
@eq BV (BV_full_adder_sum l w0 cin0) (BV_full_adder_sum w0 l cin0) : Prop
forall cin0 : bool,
@eq BV (BV_full_adder_sum (@cons bool a l) l0 cin0)
  (BV_full_adder_sum l0 (@cons bool a l) cin0) : Prop
BV : Set
list bool : Set
forall cin0 : bool,
@eq BV (BV_full_adder_sum l _UNBOUND_REL_2 cin0)
  (BV_full_adder_sum _UNBOUND_REL_2 l cin0) : Prop
a : bool
@eq BV (BV_full_adder_sum (@cons bool a l) l0 _UNBOUND_REL_1)
  (BV_full_adder_sum l0 (@cons bool a l) _UNBOUND_REL_1) : Prop
BV_full_adder_sum (@cons bool a0 l0) (@cons bool a l) cin : BV

* Functions:
list  : forall _ : Type, Type
@cons  : forall (A : Type) (_ : A) (_ : list A), list A
BV_full_adder_sum  : forall (_ : list bool) (_ : list bool) (_ : bool), BV
@eq  : forall (A : Type) (_ : A) (_ : A), Prop

<---GENERALIZATION--->
Time elapsed: 2 seconds
Generalized Variables:
lf3 : list bool = @cons bool a0 l0
lf1 : BV = BV_full_adder_sum (@cons bool a l) (@cons bool a0 l0) cin
lf4 : list bool = @cons bool a l
lf2 : BV = BV_full_adder_sum (@cons bool a0 l0) (@cons bool a l) cin

Generalizations:
Lemma conj1: forall (lf2 : BV) (lf1 : BV), @eq BV lf1 lf2.
Lemma conj2: forall (cin : bool) (lf4 : list bool) (lf1 : BV) (lf3 : list bool), @eq BV lf1 (BV_full_adder_sum lf3 lf4 cin).
Lemma conj4: forall (cin : bool) (lf1 : BV) (l : list bool) (a : bool) (lf3 : list bool), @eq BV lf1 (BV_full_adder_sum lf3 (@cons bool a l) cin).
Lemma conj5: forall (lf2 : BV) (cin : bool) (lf4 : list bool) (lf3 : list bool), @eq BV (BV_full_adder_sum lf4 lf3 cin) lf2.
Lemma conj6: forall (cin : bool) (lf4 : list bool) (lf3 : list bool), @eq BV (BV_full_adder_sum lf4 lf3 cin) (BV_full_adder_sum lf3 lf4 cin).
Lemma conj7: forall (lf2 : BV) (cin : bool) (l : list bool) (a : bool) (lf3 : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 cin) lf2.
Lemma conj8: forall (cin : bool) (l : list bool) (a : bool) (lf3 : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 cin)
  (BV_full_adder_sum lf3 (@cons bool a l) cin).
Lemma conj10: forall (cin : bool) (l0 : list bool) (a0 : bool) (lf4 : list bool) (lf1 : BV), @eq BV lf1 (BV_full_adder_sum (@cons bool a0 l0) lf4 cin).
Lemma conj12: forall (cin : bool) (l0 : list bool) (a0 : bool) (lf1 : BV) (l : list bool) (a : bool), @eq BV lf1 (BV_full_adder_sum (@cons bool a0 l0) (@cons bool a l) cin).
Lemma conj13: forall (lf2 : BV) (cin : bool) (l0 : list bool) (a0 : bool) (lf4 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool a0 l0) cin) lf2.
Lemma conj14: forall (cin : bool) (l0 : list bool) (a0 : bool) (lf4 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool a0 l0) cin)
  (BV_full_adder_sum (@cons bool a0 l0) lf4 cin).
Lemma conj15: forall (lf2 : BV) (cin : bool) (l0 : list bool) (a0 : bool) (l : list bool) (a : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@cons bool a0 l0) cin) lf2.
Lemma conj16: forall (cin : bool) (l0 : list bool) (a0 : bool) (l : list bool) (a : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@cons bool a0 l0) cin)
  (BV_full_adder_sum (@cons bool a0 l0) (@cons bool a l) cin).


<---VALIDITY CHECKS--->
Time elapsed: 56 seconds
Valid:
Lemma conj16: forall (cin : bool) (l0 : list bool) (a0 : bool) (l : list bool) (a : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@cons bool a0 l0) cin)
  (BV_full_adder_sum (@cons bool a0 l0) (@cons bool a l) cin).
Lemma conj14: forall (cin : bool) (l0 : list bool) (a0 : bool) (lf4 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool a0 l0) cin)
  (BV_full_adder_sum (@cons bool a0 l0) lf4 cin).
Lemma conj8: forall (cin : bool) (l : list bool) (a : bool) (lf3 : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 cin)
  (BV_full_adder_sum lf3 (@cons bool a l) cin).
Lemma conj6: forall (cin : bool) (lf4 : list bool) (lf3 : list bool), @eq BV (BV_full_adder_sum lf4 lf3 cin) (BV_full_adder_sum lf3 lf4 cin).

Invalid:
Lemma conj15: forall (lf2 : BV) (cin : bool) (l0 : list bool) (a0 : bool) (l : list bool) (a : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@cons bool a0 l0) cin) lf2.
Lemma conj13: forall (lf2 : BV) (cin : bool) (l0 : list bool) (a0 : bool) (lf4 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool a0 l0) cin) lf2.
Lemma conj12: forall (cin : bool) (l0 : list bool) (a0 : bool) (lf1 : BV) (l : list bool) (a : bool), @eq BV lf1 (BV_full_adder_sum (@cons bool a0 l0) (@cons bool a l) cin).
Lemma conj10: forall (cin : bool) (l0 : list bool) (a0 : bool) (lf4 : list bool) (lf1 : BV), @eq BV lf1 (BV_full_adder_sum (@cons bool a0 l0) lf4 cin).
Lemma conj7: forall (lf2 : BV) (cin : bool) (l : list bool) (a : bool) (lf3 : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 cin) lf2.
Lemma conj5: forall (lf2 : BV) (cin : bool) (lf4 : list bool) (lf3 : list bool), @eq BV (BV_full_adder_sum lf4 lf3 cin) lf2.
Lemma conj4: forall (cin : bool) (lf1 : BV) (l : list bool) (a : bool) (lf3 : list bool), @eq BV lf1 (BV_full_adder_sum lf3 (@cons bool a l) cin).
Lemma conj2: forall (cin : bool) (lf4 : list bool) (lf1 : BV) (lf3 : list bool), @eq BV lf1 (BV_full_adder_sum lf3 lf4 cin).
Lemma conj1: forall (lf2 : BV) (lf1 : BV), @eq BV lf1 lf2.

<---ADD IMPLICATIONS--->
Time elapsed: 75 seconds
Generalizations:
Lemma conj15: forall (lf2 : BV) (cin : bool) (l0 : list bool) (a0 : bool) (l : list bool) (a : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@cons bool a0 l0) cin) lf2.
Lemma conj13: forall (lf2 : BV) (cin : bool) (l0 : list bool) (a0 : bool) (lf4 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool a0 l0) cin) lf2.
Lemma conj12: forall (cin : bool) (l0 : list bool) (a0 : bool) (lf1 : BV) (l : list bool) (a : bool), @eq BV lf1 (BV_full_adder_sum (@cons bool a0 l0) (@cons bool a l) cin).
Lemma conj10: forall (cin : bool) (l0 : list bool) (a0 : bool) (lf4 : list bool) (lf1 : BV), @eq BV lf1 (BV_full_adder_sum (@cons bool a0 l0) lf4 cin).
Lemma conj7: forall (lf2 : BV) (cin : bool) (l : list bool) (a : bool) (lf3 : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 cin) lf2.
Lemma conj5: forall (lf2 : BV) (cin : bool) (lf4 : list bool) (lf3 : list bool), @eq BV (BV_full_adder_sum lf4 lf3 cin) lf2.
Lemma conj4: forall (cin : bool) (lf1 : BV) (l : list bool) (a : bool) (lf3 : list bool), @eq BV lf1 (BV_full_adder_sum lf3 (@cons bool a l) cin).
Lemma conj2: forall (cin : bool) (lf4 : list bool) (lf1 : BV) (lf3 : list bool), @eq BV lf1 (BV_full_adder_sum lf3 lf4 cin).
Lemma conj1: forall (lf2 : BV) (lf1 : BV), @eq BV lf1 lf2.


<---VALIDITY CHECKS--->
Time elapsed: 91 seconds
Valid:

Invalid:
Lemma conj1: forall (lf2 : BV) (lf1 : BV), @eq BV lf1 lf2.
Lemma conj2: forall (cin : bool) (lf4 : list bool) (lf1 : BV) (lf3 : list bool), @eq BV lf1 (BV_full_adder_sum lf3 lf4 cin).
Lemma conj4: forall (cin : bool) (lf1 : BV) (l : list bool) (a : bool) (lf3 : list bool), @eq BV lf1 (BV_full_adder_sum lf3 (@cons bool a l) cin).
Lemma conj5: forall (lf2 : BV) (cin : bool) (lf4 : list bool) (lf3 : list bool), @eq BV (BV_full_adder_sum lf4 lf3 cin) lf2.
Lemma conj7: forall (lf2 : BV) (cin : bool) (l : list bool) (a : bool) (lf3 : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 cin) lf2.
Lemma conj10: forall (cin : bool) (l0 : list bool) (a0 : bool) (lf4 : list bool) (lf1 : BV), @eq BV lf1 (BV_full_adder_sum (@cons bool a0 l0) lf4 cin).
Lemma conj12: forall (cin : bool) (l0 : list bool) (a0 : bool) (lf1 : BV) (l : list bool) (a : bool), @eq BV lf1 (BV_full_adder_sum (@cons bool a0 l0) (@cons bool a l) cin).
Lemma conj13: forall (lf2 : BV) (cin : bool) (l0 : list bool) (a0 : bool) (lf4 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool a0 l0) cin) lf2.
Lemma conj15: forall (lf2 : BV) (cin : bool) (l0 : list bool) (a0 : bool) (l : list bool) (a : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@cons bool a0 l0) cin) lf2.


<---CREATE SKETCHES--->
Time elapsed: 91 seconds
Sketches:
Sketch conj2_sketch0 : @eq BV lf1 (##hole##)
Sketch conj2_term_sketch0 : @eq BV (BV_full_adder_sum lf3 lf4 cin) (##hole##)
Sketch conj4_sketch0 : @eq BV lf1 (##hole##)
Sketch conj4_sketch1 : @eq BV lf1 (BV_full_adder_sum lf3 (##hole##) cin)
Sketch conj4_term_sketch0 : @eq BV (BV_full_adder_sum lf3 (@cons bool a l) cin) (##hole##)
Sketch conj4_term_sketch1 : @eq (list bool) (@cons bool a l) (##hole##)
Sketch conj5_sketch0 : @eq BV (##hole##) lf2
Sketch conj5_term_sketch0 : @eq BV (BV_full_adder_sum lf4 lf3 cin) (##hole##)
Sketch conj7_sketch0 : @eq BV (BV_full_adder_sum (##hole##) lf3 cin) lf2
Sketch conj7_sketch1 : @eq BV (##hole##) lf2
Sketch conj7_term_sketch0 : @eq (list bool) (@cons bool a l) (##hole##)
Sketch conj7_term_sketch1 : @eq BV (BV_full_adder_sum (@cons bool a l) lf3 cin) (##hole##)
Sketch conj10_sketch0 : @eq BV lf1 (BV_full_adder_sum (##hole##) lf4 cin)
Sketch conj10_sketch1 : @eq BV lf1 (##hole##)
Sketch conj10_term_sketch0 : @eq (list bool) (@cons bool a0 l0) (##hole##)
Sketch conj10_term_sketch1 : @eq BV (BV_full_adder_sum (@cons bool a0 l0) lf4 cin) (##hole##)
Sketch conj12_sketch0 : @eq BV lf1 (BV_full_adder_sum (##hole##) (@cons bool a l) cin)
Sketch conj12_sketch1 : @eq BV lf1 (BV_full_adder_sum (@cons bool a0 l0) (##hole##) cin)
Sketch conj12_sketch2 : @eq BV lf1 (##hole##)
Sketch conj12_term_sketch0 : @eq (list bool) (@cons bool a0 l0) (##hole##)
Sketch conj12_term_sketch1 : @eq (list bool) (@cons bool a l) (##hole##)
Sketch conj12_term_sketch2 : @eq BV (BV_full_adder_sum (@cons bool a0 l0) (@cons bool a l) cin) (##hole##)
Sketch conj13_sketch0 : @eq BV (BV_full_adder_sum lf4 (##hole##) cin) lf2
Sketch conj13_sketch1 : @eq BV (##hole##) lf2
Sketch conj13_term_sketch0 : @eq (list bool) (@cons bool a0 l0) (##hole##)
Sketch conj13_term_sketch1 : @eq BV (BV_full_adder_sum lf4 (@cons bool a0 l0) cin) (##hole##)
Sketch conj15_sketch0 : @eq BV (BV_full_adder_sum (@cons bool a l) (##hole##) cin) lf2
Sketch conj15_sketch1 : @eq BV (BV_full_adder_sum (##hole##) (@cons bool a0 l0) cin) lf2
Sketch conj15_sketch2 : @eq BV (##hole##) lf2
Sketch conj15_term_sketch0 : @eq (list bool) (@cons bool a0 l0) (##hole##)
Sketch conj15_term_sketch1 : @eq (list bool) (@cons bool a l) (##hole##)
Sketch conj15_term_sketch2 : @eq BV (BV_full_adder_sum (@cons bool a l) (@cons bool a0 l0) cin) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 395 seconds
Problems per Sketch:
Sketch conj12_sketch1 --> Problem  synth_12
Sketch conj15_sketch1 --> Problem  synth_16
Sketch conj12_sketch0 --> Problem  synth_11
Sketch conj7_sketch1 --> Problem  synth_6
Sketch conj5_sketch0 --> Problem  synth_6
Sketch conj12_sketch2 --> Problem  synth_1
Sketch conj10_term_sketch0 --> Problem  synth_9
Sketch conj15_sketch2 --> Problem  synth_6
Sketch conj15_term_sketch1 --> Problem  synth_5
Sketch conj10_term_sketch1 --> Problem  synth_10
Sketch conj15_term_sketch2 --> Problem  synth_13
Sketch conj7_term_sketch0 --> Problem  synth_5
Sketch conj13_term_sketch0 --> Problem  synth_9
Sketch conj15_sketch0 --> Problem  synth_15
Sketch conj7_sketch0 --> Problem  synth_7
Sketch conj4_sketch0 --> Problem  synth_1
Sketch conj4_sketch1 --> Problem  synth_3
Sketch conj13_sketch1 --> Problem  synth_6
Sketch conj4_term_sketch1 --> Problem  synth_5
Sketch conj2_term_sketch0 --> Problem  synth_2
Sketch conj13_term_sketch1 --> Problem  synth_10
Sketch conj13_sketch0 --> Problem  synth_14
Sketch conj12_term_sketch1 --> Problem  synth_5
Sketch conj7_term_sketch1 --> Problem  synth_4
Sketch conj12_term_sketch0 --> Problem  synth_9
Sketch conj12_term_sketch2 --> Problem  synth_13
Sketch conj4_term_sketch0 --> Problem  synth_4
Sketch conj10_sketch0 --> Problem  synth_8
Sketch conj15_term_sketch0 --> Problem  synth_9
Sketch conj5_term_sketch0 --> Problem  synth_2
Sketch conj10_sketch1 --> Problem  synth_1
Sketch conj2_sketch0 --> Problem  synth_1


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 417 seconds

Problem: synth_16

Problem: synth_15

Problem: synth_14

Problem: synth_10
 BV_full_adder_sum lf4 (@cons bool cin l0) (HalfAdder.half_adder_carry a0 true)
 BV_full_adder_sum lf4 (@cons bool a0 l0) (HalfAdder.half_adder_carry cin true)
 match lf4 with | nil => fun y z : bool => BV.consbv (HalfAdder.half_adder_sum y z) (BV_full_adder_sum l0 (@nil bool) (HalfAdder.half_adder_carry y z)) | cons b0 l1 => fun y z : bool => BV.consbv (FullAdder.full_adder_sum y b0 z) (BV_full_adder_sum l0 l1 (FullAdder.full_adder_carry y b0 z)) end cin a0
 match lf4 with | nil => fun y z : bool => BV.consbv (HalfAdder.half_adder_sum y z) (BV_full_adder_sum l0 (@nil bool) (HalfAdder.half_adder_carry y z)) | cons b0 l1 => fun y z : bool => BV.consbv (FullAdder.full_adder_sum y b0 z) (BV_full_adder_sum l0 l1 (FullAdder.full_adder_carry y b0 z)) end a0 cin
 BV_full_adder_sum lf4 (@cons bool cin l0) a0
 BV_full_adder_sum lf4 (@cons bool a0 l0) cin

Problem: synth_8

Problem: synth_3

Problem: synth_9
 @cons bool (FullAdder.full_adder_carry a0 a0 false) l0
 @cons bool (FullAdder.full_adder_carry true a0 false) l0
 @cons bool (FullAdder.full_adder_carry a0 true false) l0
 @cons bool (HalfAdder.half_adder_carry a0 a0) l0
 @cons bool (HalfAdder.half_adder_carry a0 true) l0
 @cons bool a0 l0

Problem: synth_13
 BV.consbv (FullAdder.full_adder_sum cin a a0) (BV_full_adder_sum l l0 (FullAdder.full_adder_carry cin a a0))
 BV.consbv (FullAdder.full_adder_sum a cin a0) (BV_full_adder_sum l l0 (FullAdder.full_adder_carry a cin a0))
 BV.consbv (FullAdder.full_adder_sum a0 a cin) (BV_full_adder_sum l0 l (FullAdder.full_adder_carry a0 a cin))
 BV.consbv (FullAdder.full_adder_sum a a0 cin) (BV_full_adder_sum l0 l (FullAdder.full_adder_carry a a0 cin))
 BV.consbv (FullAdder.full_adder_sum a0 a cin) (BV_full_adder_sum l l0 (FullAdder.full_adder_carry a0 a cin))
 BV.consbv (FullAdder.full_adder_sum a a0 cin) (BV_full_adder_sum l l0 (FullAdder.full_adder_carry a a0 cin))

Problem: synth_12

Problem: synth_6

Problem: synth_11

Problem: synth_7

Problem: synth_5
 @cons bool (FullAdder.full_adder_carry a a false) l
 @cons bool (FullAdder.full_adder_carry true a false) l
 @cons bool (FullAdder.full_adder_carry a true false) l
 @cons bool (HalfAdder.half_adder_carry a a) l
 @cons bool (HalfAdder.half_adder_carry a true) l
 @cons bool a l

Problem: synth_4
 BV_full_adder_sum lf3 (@cons bool cin l) (HalfAdder.half_adder_carry a true)
 BV_full_adder_sum lf3 (@cons bool a l) (HalfAdder.half_adder_carry cin true)
 match lf3 with | nil => fun y z : bool => BV.consbv (HalfAdder.half_adder_sum y z) (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry y z)) | cons b0 l1 => fun y z : bool => BV.consbv (FullAdder.full_adder_sum y b0 z) (BV_full_adder_sum l l1 (FullAdder.full_adder_carry y b0 z)) end cin a
 match lf3 with | nil => fun y z : bool => BV.consbv (HalfAdder.half_adder_sum y z) (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry y z)) | cons b0 l1 => fun y z : bool => BV.consbv (FullAdder.full_adder_sum y b0 z) (BV_full_adder_sum l l1 (FullAdder.full_adder_carry y b0 z)) end a cin
 BV_full_adder_sum lf3 (@cons bool cin l) a
 BV_full_adder_sum lf3 (@cons bool a l) cin

Problem: synth_1

Problem: synth_2
 BV_full_adder_sum lf4 lf3 (HalfAdder.half_adder_carry cin cin)
 BV_full_adder_sum lf3 lf4 (HalfAdder.half_adder_carry cin cin)
 BV_full_adder_sum lf4 lf3 (HalfAdder.half_adder_carry cin true)
 BV_full_adder_sum lf3 lf4 (HalfAdder.half_adder_carry cin true)
 BV_full_adder_sum lf4 lf3 cin
 BV_full_adder_sum lf3 lf4 cin

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 418 seconds
Lemmas:
Lemma candidate_1: forall (a : bool) (l : list bool) (a0 : bool) (l0 : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@cons bool a0 l0) cin)   (BV_full_adder_sum (@cons bool a0 l0) (@cons bool a l) cin).
Lemma candidate_2: forall (lf4 : list bool) (a0 : bool) (l0 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf4 (@cons bool a0 l0) cin)   (BV_full_adder_sum (@cons bool a0 l0) lf4 cin).
Lemma candidate_3: forall (lf3 : list bool) (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 cin)   (BV_full_adder_sum lf3 (@cons bool a l) cin).
Lemma candidate_4: forall (lf3 : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf4 lf3 cin) (BV_full_adder_sum lf3 lf4 cin).
Lemma candidate_5: forall (lf3 : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf3 lf4 cin)   (BV_full_adder_sum lf4 lf3 (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_6: forall (lf3 : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf3 lf4 cin)   (BV_full_adder_sum lf3 lf4 (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_7: forall (lf3 : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf3 lf4 cin)   (BV_full_adder_sum lf4 lf3 (HalfAdder.half_adder_carry cin true)).
Lemma candidate_8: forall (lf3 : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf3 lf4 cin)   (BV_full_adder_sum lf3 lf4 (HalfAdder.half_adder_carry cin true)).
Lemma candidate_9: forall (lf3 : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf3 lf4 cin) (BV_full_adder_sum lf4 lf3 cin).
Lemma candidate_10: forall (lf3 : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf3 lf4 cin) (BV_full_adder_sum lf3 lf4 cin).
Lemma candidate_11: forall (lf3 : list bool) (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf3 (@cons bool a l) cin)   (BV_full_adder_sum lf3 (@cons bool cin l) (HalfAdder.half_adder_carry a true)).
Lemma candidate_12: forall (lf3 : list bool) (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf3 (@cons bool a l) cin)   (BV_full_adder_sum lf3 (@cons bool a l) (HalfAdder.half_adder_carry cin true)).
Lemma candidate_13: forall (lf3 : list bool) (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf3 (@cons bool a l) cin)   (match lf3 with | nil => fun y z : bool => BV.consbv (HalfAdder.half_adder_sum y z) (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry y z)) | cons b0 l1 => fun y z : bool => BV.consbv (FullAdder.full_adder_sum y b0 z) (BV_full_adder_sum l l1 (FullAdder.full_adder_carry y b0 z)) end cin a).
Lemma candidate_14: forall (lf3 : list bool) (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf3 (@cons bool a l) cin)   (match lf3 with | nil => fun y z : bool => BV.consbv (HalfAdder.half_adder_sum y z) (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry y z)) | cons b0 l1 => fun y z : bool => BV.consbv (FullAdder.full_adder_sum y b0 z) (BV_full_adder_sum l l1 (FullAdder.full_adder_carry y b0 z)) end a cin).
Lemma candidate_15: forall (lf3 : list bool) (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf3 (@cons bool a l) cin)   (BV_full_adder_sum lf3 (@cons bool cin l) a).
Lemma candidate_16: forall (lf3 : list bool) (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf3 (@cons bool a l) cin)   (BV_full_adder_sum lf3 (@cons bool a l) cin).
Lemma candidate_17: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a a false) l).
Lemma candidate_18: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry true a false) l).
Lemma candidate_19: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a true false) l).
Lemma candidate_20: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a a) l).
Lemma candidate_21: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a true) l).
Lemma candidate_22: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l) (@cons bool a l).
Lemma candidate_23: forall (lf3 : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf4 lf3 cin)   (BV_full_adder_sum lf4 lf3 (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_24: forall (lf3 : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf4 lf3 cin)   (BV_full_adder_sum lf3 lf4 (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_25: forall (lf3 : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf4 lf3 cin)   (BV_full_adder_sum lf4 lf3 (HalfAdder.half_adder_carry cin true)).
Lemma candidate_26: forall (lf3 : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf4 lf3 cin)   (BV_full_adder_sum lf3 lf4 (HalfAdder.half_adder_carry cin true)).
Lemma candidate_27: forall (lf3 : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf4 lf3 cin) (BV_full_adder_sum lf4 lf3 cin).
Lemma candidate_28: forall (lf3 : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf4 lf3 cin) (BV_full_adder_sum lf3 lf4 cin).
Lemma candidate_29: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a a false) l).
Lemma candidate_30: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry true a false) l).
Lemma candidate_31: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a true false) l).
Lemma candidate_32: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a a) l).
Lemma candidate_33: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a true) l).
Lemma candidate_34: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l) (@cons bool a l).
Lemma candidate_35: forall (lf3 : list bool) (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 cin)   (BV_full_adder_sum lf3 (@cons bool cin l) (HalfAdder.half_adder_carry a true)).
Lemma candidate_36: forall (lf3 : list bool) (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 cin)   (BV_full_adder_sum lf3 (@cons bool a l) (HalfAdder.half_adder_carry cin true)).
Lemma candidate_37: forall (lf3 : list bool) (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 cin)   (match lf3 with | nil => fun y z : bool => BV.consbv (HalfAdder.half_adder_sum y z) (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry y z)) | cons b0 l1 => fun y z : bool => BV.consbv (FullAdder.full_adder_sum y b0 z) (BV_full_adder_sum l l1 (FullAdder.full_adder_carry y b0 z)) end cin a).
Lemma candidate_38: forall (lf3 : list bool) (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 cin)   (match lf3 with | nil => fun y z : bool => BV.consbv (HalfAdder.half_adder_sum y z) (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry y z)) | cons b0 l1 => fun y z : bool => BV.consbv (FullAdder.full_adder_sum y b0 z) (BV_full_adder_sum l l1 (FullAdder.full_adder_carry y b0 z)) end a cin).
Lemma candidate_39: forall (lf3 : list bool) (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 cin)   (BV_full_adder_sum lf3 (@cons bool cin l) a).
Lemma candidate_40: forall (lf3 : list bool) (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 cin)   (BV_full_adder_sum lf3 (@cons bool a l) cin).
Lemma candidate_41: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0)   (@cons bool (FullAdder.full_adder_carry a0 a0 false) l0).
Lemma candidate_42: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0)   (@cons bool (FullAdder.full_adder_carry true a0 false) l0).
Lemma candidate_43: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0)   (@cons bool (FullAdder.full_adder_carry a0 true false) l0).
Lemma candidate_44: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0)   (@cons bool (HalfAdder.half_adder_carry a0 a0) l0).
Lemma candidate_45: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0)   (@cons bool (HalfAdder.half_adder_carry a0 true) l0).
Lemma candidate_46: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0) (@cons bool a0 l0).
Lemma candidate_47: forall (lf4 : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a0 l0) lf4 cin)   (BV_full_adder_sum lf4 (@cons bool cin l0) (HalfAdder.half_adder_carry a0 true)).
Lemma candidate_48: forall (lf4 : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a0 l0) lf4 cin)   (BV_full_adder_sum lf4 (@cons bool a0 l0) (HalfAdder.half_adder_carry cin true)).
Lemma candidate_49: forall (lf4 : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a0 l0) lf4 cin)   (match lf4 with | nil => fun y z : bool => BV.consbv (HalfAdder.half_adder_sum y z) (BV_full_adder_sum l0 (@nil bool) (HalfAdder.half_adder_carry y z)) | cons b0 l1 => fun y z : bool => BV.consbv (FullAdder.full_adder_sum y b0 z) (BV_full_adder_sum l0 l1 (FullAdder.full_adder_carry y b0 z)) end cin a0).
Lemma candidate_50: forall (lf4 : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a0 l0) lf4 cin)   (match lf4 with | nil => fun y z : bool => BV.consbv (HalfAdder.half_adder_sum y z) (BV_full_adder_sum l0 (@nil bool) (HalfAdder.half_adder_carry y z)) | cons b0 l1 => fun y z : bool => BV.consbv (FullAdder.full_adder_sum y b0 z) (BV_full_adder_sum l0 l1 (FullAdder.full_adder_carry y b0 z)) end a0 cin).
Lemma candidate_51: forall (lf4 : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a0 l0) lf4 cin)   (BV_full_adder_sum lf4 (@cons bool cin l0) a0).
Lemma candidate_52: forall (lf4 : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a0 l0) lf4 cin)   (BV_full_adder_sum lf4 (@cons bool a0 l0) cin).
Lemma candidate_53: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0)   (@cons bool (FullAdder.full_adder_carry a0 a0 false) l0).
Lemma candidate_54: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0)   (@cons bool (FullAdder.full_adder_carry true a0 false) l0).
Lemma candidate_55: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0)   (@cons bool (FullAdder.full_adder_carry a0 true false) l0).
Lemma candidate_56: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0)   (@cons bool (HalfAdder.half_adder_carry a0 a0) l0).
Lemma candidate_57: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0)   (@cons bool (HalfAdder.half_adder_carry a0 true) l0).
Lemma candidate_58: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0) (@cons bool a0 l0).
Lemma candidate_59: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a a false) l).
Lemma candidate_60: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry true a false) l).
Lemma candidate_61: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a true false) l).
Lemma candidate_62: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a a) l).
Lemma candidate_63: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a true) l).
Lemma candidate_64: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l) (@cons bool a l).
Lemma candidate_65: forall (a : bool) (l : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a0 l0) (@cons bool a l) cin)   (BV.consbv (FullAdder.full_adder_sum cin a a0) (BV_full_adder_sum l l0 (FullAdder.full_adder_carry cin a a0))).
Lemma candidate_66: forall (a : bool) (l : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a0 l0) (@cons bool a l) cin)   (BV.consbv (FullAdder.full_adder_sum a cin a0) (BV_full_adder_sum l l0 (FullAdder.full_adder_carry a cin a0))).
Lemma candidate_67: forall (a : bool) (l : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a0 l0) (@cons bool a l) cin)   (BV.consbv (FullAdder.full_adder_sum a0 a cin) (BV_full_adder_sum l0 l (FullAdder.full_adder_carry a0 a cin))).
Lemma candidate_68: forall (a : bool) (l : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a0 l0) (@cons bool a l) cin)   (BV.consbv (FullAdder.full_adder_sum a a0 cin) (BV_full_adder_sum l0 l (FullAdder.full_adder_carry a a0 cin))).
Lemma candidate_69: forall (a : bool) (l : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a0 l0) (@cons bool a l) cin)   (BV.consbv (FullAdder.full_adder_sum a0 a cin) (BV_full_adder_sum l l0 (FullAdder.full_adder_carry a0 a cin))).
Lemma candidate_70: forall (a : bool) (l : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a0 l0) (@cons bool a l) cin)   (BV.consbv (FullAdder.full_adder_sum a a0 cin) (BV_full_adder_sum l l0 (FullAdder.full_adder_carry a a0 cin))).
Lemma candidate_71: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0)   (@cons bool (FullAdder.full_adder_carry a0 a0 false) l0).
Lemma candidate_72: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0)   (@cons bool (FullAdder.full_adder_carry true a0 false) l0).
Lemma candidate_73: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0)   (@cons bool (FullAdder.full_adder_carry a0 true false) l0).
Lemma candidate_74: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0)   (@cons bool (HalfAdder.half_adder_carry a0 a0) l0).
Lemma candidate_75: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0)   (@cons bool (HalfAdder.half_adder_carry a0 true) l0).
Lemma candidate_76: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0) (@cons bool a0 l0).
Lemma candidate_77: forall (lf4 : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool a0 l0) cin)   (BV_full_adder_sum lf4 (@cons bool cin l0) (HalfAdder.half_adder_carry a0 true)).
Lemma candidate_78: forall (lf4 : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool a0 l0) cin)   (BV_full_adder_sum lf4 (@cons bool a0 l0) (HalfAdder.half_adder_carry cin true)).
Lemma candidate_79: forall (lf4 : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool a0 l0) cin)   (match lf4 with | nil => fun y z : bool => BV.consbv (HalfAdder.half_adder_sum y z) (BV_full_adder_sum l0 (@nil bool) (HalfAdder.half_adder_carry y z)) | cons b0 l1 => fun y z : bool => BV.consbv (FullAdder.full_adder_sum y b0 z) (BV_full_adder_sum l0 l1 (FullAdder.full_adder_carry y b0 z)) end cin a0).
Lemma candidate_80: forall (lf4 : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool a0 l0) cin)   (match lf4 with | nil => fun y z : bool => BV.consbv (HalfAdder.half_adder_sum y z) (BV_full_adder_sum l0 (@nil bool) (HalfAdder.half_adder_carry y z)) | cons b0 l1 => fun y z : bool => BV.consbv (FullAdder.full_adder_sum y b0 z) (BV_full_adder_sum l0 l1 (FullAdder.full_adder_carry y b0 z)) end a0 cin).
Lemma candidate_81: forall (lf4 : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool a0 l0) cin)   (BV_full_adder_sum lf4 (@cons bool cin l0) a0).
Lemma candidate_82: forall (lf4 : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool a0 l0) cin)   (BV_full_adder_sum lf4 (@cons bool a0 l0) cin).
Lemma candidate_83: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0)   (@cons bool (FullAdder.full_adder_carry a0 a0 false) l0).
Lemma candidate_84: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0)   (@cons bool (FullAdder.full_adder_carry true a0 false) l0).
Lemma candidate_85: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0)   (@cons bool (FullAdder.full_adder_carry a0 true false) l0).
Lemma candidate_86: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0)   (@cons bool (HalfAdder.half_adder_carry a0 a0) l0).
Lemma candidate_87: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0)   (@cons bool (HalfAdder.half_adder_carry a0 true) l0).
Lemma candidate_88: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0) (@cons bool a0 l0).
Lemma candidate_89: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a a false) l).
Lemma candidate_90: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry true a false) l).
Lemma candidate_91: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a true false) l).
Lemma candidate_92: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a a) l).
Lemma candidate_93: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a true) l).
Lemma candidate_94: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l) (@cons bool a l).
Lemma candidate_95: forall (a : bool) (l : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@cons bool a0 l0) cin)   (BV.consbv (FullAdder.full_adder_sum cin a a0) (BV_full_adder_sum l l0 (FullAdder.full_adder_carry cin a a0))).
Lemma candidate_96: forall (a : bool) (l : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@cons bool a0 l0) cin)   (BV.consbv (FullAdder.full_adder_sum a cin a0) (BV_full_adder_sum l l0 (FullAdder.full_adder_carry a cin a0))).
Lemma candidate_97: forall (a : bool) (l : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@cons bool a0 l0) cin)   (BV.consbv (FullAdder.full_adder_sum a0 a cin) (BV_full_adder_sum l0 l (FullAdder.full_adder_carry a0 a cin))).
Lemma candidate_98: forall (a : bool) (l : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@cons bool a0 l0) cin)   (BV.consbv (FullAdder.full_adder_sum a a0 cin) (BV_full_adder_sum l0 l (FullAdder.full_adder_carry a a0 cin))).
Lemma candidate_99: forall (a : bool) (l : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@cons bool a0 l0) cin)   (BV.consbv (FullAdder.full_adder_sum a0 a cin) (BV_full_adder_sum l l0 (FullAdder.full_adder_carry a0 a cin))).
Lemma candidate_100: forall (a : bool) (l : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@cons bool a0 l0) cin)   (BV.consbv (FullAdder.full_adder_sum a a0 cin) (BV_full_adder_sum l l0 (FullAdder.full_adder_carry a a0 cin))).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 614 seconds
Duplicates removed: 39
Filtered by Quickchick: 0
Filtered by script: 19
Remaining: 42

Lemmas: 
Lemma candidate_20: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a a) l).
Lemma candidate_21: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a true) l).
Lemma candidate_44: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0)   (@cons bool (HalfAdder.half_adder_carry a0 a0) l0).
Lemma candidate_17: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a a false) l).
Lemma candidate_45: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0)   (@cons bool (HalfAdder.half_adder_carry a0 true) l0).
Lemma candidate_19: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a true false) l).
Lemma candidate_18: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry true a false) l).
Lemma candidate_41: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0)   (@cons bool (FullAdder.full_adder_carry a0 a0 false) l0).
Lemma candidate_43: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0)   (@cons bool (FullAdder.full_adder_carry a0 true false) l0).
Lemma candidate_42: forall (a0 : bool) (l0 : list bool), @eq (list bool) (@cons bool a0 l0)   (@cons bool (FullAdder.full_adder_carry true a0 false) l0).
Lemma candidate_39: forall (lf3 : list bool) (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 cin)   (BV_full_adder_sum lf3 (@cons bool cin l) a).
Lemma candidate_15: forall (lf3 : list bool) (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf3 (@cons bool a l) cin)   (BV_full_adder_sum lf3 (@cons bool cin l) a).
Lemma candidate_81: forall (lf4 : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool a0 l0) cin)   (BV_full_adder_sum lf4 (@cons bool cin l0) a0).
Lemma candidate_51: forall (lf4 : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a0 l0) lf4 cin)   (BV_full_adder_sum lf4 (@cons bool cin l0) a0).
Lemma candidate_24: forall (lf3 : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf4 lf3 cin)   (BV_full_adder_sum lf3 lf4 (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_23: forall (lf3 : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf4 lf3 cin)   (BV_full_adder_sum lf4 lf3 (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_6: forall (lf3 : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf3 lf4 cin)   (BV_full_adder_sum lf3 lf4 (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_5: forall (lf3 : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf3 lf4 cin)   (BV_full_adder_sum lf4 lf3 (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_26: forall (lf3 : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf4 lf3 cin)   (BV_full_adder_sum lf3 lf4 (HalfAdder.half_adder_carry cin true)).
Lemma candidate_25: forall (lf3 : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf4 lf3 cin)   (BV_full_adder_sum lf4 lf3 (HalfAdder.half_adder_carry cin true)).
Lemma candidate_8: forall (lf3 : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf3 lf4 cin)   (BV_full_adder_sum lf3 lf4 (HalfAdder.half_adder_carry cin true)).
Lemma candidate_7: forall (lf3 : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf3 lf4 cin)   (BV_full_adder_sum lf4 lf3 (HalfAdder.half_adder_carry cin true)).
Lemma candidate_36: forall (lf3 : list bool) (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 cin)   (BV_full_adder_sum lf3 (@cons bool a l) (HalfAdder.half_adder_carry cin true)).
Lemma candidate_35: forall (lf3 : list bool) (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 cin)   (BV_full_adder_sum lf3 (@cons bool cin l) (HalfAdder.half_adder_carry a true)).
Lemma candidate_12: forall (lf3 : list bool) (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf3 (@cons bool a l) cin)   (BV_full_adder_sum lf3 (@cons bool a l) (HalfAdder.half_adder_carry cin true)).
Lemma candidate_11: forall (lf3 : list bool) (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf3 (@cons bool a l) cin)   (BV_full_adder_sum lf3 (@cons bool cin l) (HalfAdder.half_adder_carry a true)).
Lemma candidate_78: forall (lf4 : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool a0 l0) cin)   (BV_full_adder_sum lf4 (@cons bool a0 l0) (HalfAdder.half_adder_carry cin true)).
Lemma candidate_77: forall (lf4 : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool a0 l0) cin)   (BV_full_adder_sum lf4 (@cons bool cin l0) (HalfAdder.half_adder_carry a0 true)).
Lemma candidate_48: forall (lf4 : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a0 l0) lf4 cin)   (BV_full_adder_sum lf4 (@cons bool a0 l0) (HalfAdder.half_adder_carry cin true)).
Lemma candidate_47: forall (lf4 : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a0 l0) lf4 cin)   (BV_full_adder_sum lf4 (@cons bool cin l0) (HalfAdder.half_adder_carry a0 true)).
Lemma candidate_99: forall (a : bool) (l : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@cons bool a0 l0) cin)   (BV.consbv (FullAdder.full_adder_sum a0 a cin) (BV_full_adder_sum l l0 (FullAdder.full_adder_carry a0 a cin))).
Lemma candidate_98: forall (a : bool) (l : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@cons bool a0 l0) cin)   (BV.consbv (FullAdder.full_adder_sum a a0 cin) (BV_full_adder_sum l0 l (FullAdder.full_adder_carry a a0 cin))).
Lemma candidate_96: forall (a : bool) (l : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@cons bool a0 l0) cin)   (BV.consbv (FullAdder.full_adder_sum a cin a0) (BV_full_adder_sum l l0 (FullAdder.full_adder_carry a cin a0))).
Lemma candidate_95: forall (a : bool) (l : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@cons bool a0 l0) cin)   (BV.consbv (FullAdder.full_adder_sum cin a a0) (BV_full_adder_sum l l0 (FullAdder.full_adder_carry cin a a0))).
Lemma candidate_69: forall (a : bool) (l : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a0 l0) (@cons bool a l) cin)   (BV.consbv (FullAdder.full_adder_sum a0 a cin) (BV_full_adder_sum l l0 (FullAdder.full_adder_carry a0 a cin))).
Lemma candidate_68: forall (a : bool) (l : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a0 l0) (@cons bool a l) cin)   (BV.consbv (FullAdder.full_adder_sum a a0 cin) (BV_full_adder_sum l0 l (FullAdder.full_adder_carry a a0 cin))).
Lemma candidate_66: forall (a : bool) (l : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a0 l0) (@cons bool a l) cin)   (BV.consbv (FullAdder.full_adder_sum a cin a0) (BV_full_adder_sum l l0 (FullAdder.full_adder_carry a cin a0))).
Lemma candidate_65: forall (a : bool) (l : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a0 l0) (@cons bool a l) cin)   (BV.consbv (FullAdder.full_adder_sum cin a a0) (BV_full_adder_sum l l0 (FullAdder.full_adder_carry cin a a0))).
Lemma candidate_37: forall (lf3 : list bool) (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf3 cin)   (match lf3 with | nil => fun y z : bool => BV.consbv (HalfAdder.half_adder_sum y z) (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry y z)) | cons b0 l1 => fun y z : bool => BV.consbv (FullAdder.full_adder_sum y b0 z) (BV_full_adder_sum l l1 (FullAdder.full_adder_carry y b0 z)) end cin a).
Lemma candidate_13: forall (lf3 : list bool) (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf3 (@cons bool a l) cin)   (match lf3 with | nil => fun y z : bool => BV.consbv (HalfAdder.half_adder_sum y z) (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry y z)) | cons b0 l1 => fun y z : bool => BV.consbv (FullAdder.full_adder_sum y b0 z) (BV_full_adder_sum l l1 (FullAdder.full_adder_carry y b0 z)) end cin a).
Lemma candidate_79: forall (lf4 : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool a0 l0) cin)   (match lf4 with | nil => fun y z : bool => BV.consbv (HalfAdder.half_adder_sum y z) (BV_full_adder_sum l0 (@nil bool) (HalfAdder.half_adder_carry y z)) | cons b0 l1 => fun y z : bool => BV.consbv (FullAdder.full_adder_sum y b0 z) (BV_full_adder_sum l0 l1 (FullAdder.full_adder_carry y b0 z)) end cin a0).
Lemma candidate_49: forall (lf4 : list bool) (a0 : bool) (cin : bool) (l0 : list bool), @eq BV (BV_full_adder_sum (@cons bool a0 l0) lf4 cin)   (match lf4 with | nil => fun y z : bool => BV.consbv (HalfAdder.half_adder_sum y z) (BV_full_adder_sum l0 (@nil bool) (HalfAdder.half_adder_carry y z)) | cons b0 l1 => fun y z : bool => BV.consbv (FullAdder.full_adder_sum y b0 z) (BV_full_adder_sum l0 l1 (FullAdder.full_adder_carry y b0 z)) end cin a0).