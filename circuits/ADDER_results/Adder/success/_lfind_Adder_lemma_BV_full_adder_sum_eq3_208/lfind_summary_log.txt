LFind Results
LFind Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/Adder/_lfind_Adder_lemma_BV_full_adder_sum_eq3_208

Number of Lemmas: 1049
Number of Lemmas (after duplicates removed): 278
Number of Lemmas (after QuickChick used to filter): 95
* Number of Candidate Lemmas: 61

Time until ranking: 3412
Time to complete: 5413

Stuck state true independent of hypotheses: true

Category 1:
Count = 26

Lemma candidate_182: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a a) l).
Lemma candidate_184: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum a false) l).
Lemma candidate_183: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a true) l).
Lemma candidate_15: forall (a : bool) (cin : bool), @eq bool (half_adder_sum a cin)   (HalfAdder.half_adder_sum a (HalfAdder.half_adder_carry cin true)).
Lemma candidate_53: forall (a : bool) (cin : bool), @eq bool (half_adder_carry a cin)   (HalfAdder.half_adder_carry a (HalfAdder.half_adder_sum cin false)).
Lemma candidate_52: forall (a : bool) (cin : bool), @eq bool (half_adder_carry a cin)   (HalfAdder.half_adder_carry cin (HalfAdder.half_adder_sum a false)).
Lemma candidate_51: forall (a : bool) (cin : bool), @eq bool (half_adder_carry a cin)   (HalfAdder.half_adder_carry a (HalfAdder.half_adder_carry cin true)).
Lemma candidate_50: forall (a : bool) (cin : bool), @eq bool (half_adder_carry a cin)   (HalfAdder.half_adder_carry cin (HalfAdder.half_adder_carry a true)).
Lemma candidate_181: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum a (HalfAdder.half_adder_carry a false)) l).
Lemma candidate_180: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a (HalfAdder.half_adder_sum a false)) l).
Lemma candidate_83: forall (l : list bool) (lf4 : bool), @eq BV (BV_full_adder_sum (@nil bool) l lf4)   (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum lf4 false)).
Lemma candidate_81: forall (l : list bool) (lf4 : bool), @eq BV (BV_full_adder_sum (@nil bool) l lf4)   (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry lf4 true)).
Lemma candidate_639: forall (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder_sum lf6 (@nil bool) cin)   (BV_full_adder_sum lf6 (@nil bool) (HalfAdder.half_adder_sum cin false)).
Lemma candidate_637: forall (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder_sum lf6 (@nil bool) cin)   (BV_full_adder_sum lf6 (@nil bool) (HalfAdder.half_adder_carry cin true)).
Lemma candidate_633: forall (cin : bool) (lf6 : list bool), @eq BV   (BV_full_adder_sum lf6 (@nil bool) (HalfAdder.half_adder_sum cin false))   (BV_full_adder_sum lf6 (@nil bool) cin).
Lemma candidate_631: forall (cin : bool) (lf6 : list bool), @eq BV   (BV_full_adder_sum lf6 (@nil bool) (HalfAdder.half_adder_carry cin true))   (BV_full_adder_sum lf6 (@nil bool) cin).
Lemma candidate_829: forall (a : bool) (l : list bool) (cin : bool), @eq BV   (consbv (half_adder_sum a cin)      (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry cin a)))   (BV_full_adder_sum (@cons bool a l) (@nil bool) cin).
Lemma candidate_827: forall (a : bool) (l : list bool) (cin : bool), @eq BV   (consbv (half_adder_sum a cin)      (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry a (HalfAdder.half_adder_sum cin false))))   (BV_full_adder_sum (@cons bool a l) (@nil bool) cin).
Lemma candidate_82: forall (l : list bool) (lf4 : bool), @eq BV (BV_full_adder_sum (@nil bool) l lf4)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum lf4 false)).
Lemma candidate_80: forall (l : list bool) (lf4 : bool), @eq BV (BV_full_adder_sum (@nil bool) l lf4)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf4 true)).
Lemma candidate_127: forall (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@nil bool) l (half_adder_carry a cin))   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry cin a)).
Lemma candidate_88: forall (l : list bool) (lf4 : bool) (lf5 : bool), @eq BV (consbv lf5 (BV_full_adder_sum (@nil bool) l lf4))   (BV.consbv lf5 ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum lf4 false))).
Lemma candidate_86: forall (l : list bool) (lf4 : bool) (lf5 : bool), @eq BV (consbv lf5 (BV_full_adder_sum (@nil bool) l lf4))   (BV.consbv lf5 ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf4 true))).
Lemma candidate_112: forall (a : bool) (l : list bool) (cin : bool) (lf5 : bool), @eq BV   (consbv lf5 (BV_full_adder_sum (@nil bool) l (half_adder_carry a cin)))   (BV.consbv lf5 ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry cin a))).
Lemma candidate_125: forall (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@nil bool) l (half_adder_carry a cin))   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a (HalfAdder.half_adder_sum cin false))).
Lemma candidate_141: forall (a : bool) (l : list bool) (cin : bool), @eq BV   (consbv (half_adder_sum a cin)      (BV_full_adder_sum (@nil bool) l (half_adder_carry a cin)))   (BV.consbv (HalfAdder.half_adder_sum cin a) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry cin a))).

Category 2:
Count = 31

Lemma candidate_176: forall (a : bool) (lf7 : list bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf7 cin)   (BV_full_adder_sum lf7 (@cons bool cin l) a).
Lemma candidate_170: forall (a : bool) (lf7 : list bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf7 (@cons bool cin l) a)   (BV_full_adder_sum (@cons bool a l) lf7 cin).
Lemma candidate_17: forall (a : bool) (cin : bool), @eq bool (half_adder_sum a cin)   (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum cin false)).
Lemma candidate_16: forall (a : bool) (cin : bool), @eq bool (half_adder_sum a cin)   (HalfAdder.half_adder_sum cin (HalfAdder.half_adder_sum a false)).
Lemma candidate_14: forall (a : bool) (cin : bool), @eq bool (half_adder_sum a cin)   (HalfAdder.half_adder_sum cin (HalfAdder.half_adder_carry a true)).
Lemma candidate_2: forall (l : list bool) (lf7 : list bool) (lf4 : bool), @eq BV (BV_full_adder_sum lf7 l lf4)   (BV_full_adder_sum l lf7 (HalfAdder.half_adder_sum lf4 false)).
Lemma candidate_44: forall (a : bool) (l : list bool) (lf7 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf7 l (half_adder_carry a cin))   (BV_full_adder_sum l lf7 (HalfAdder.half_adder_carry cin a)).
Lemma candidate_8: forall (l : list bool) (lf7 : list bool) (lf4 : bool) (lf5 : bool), @eq BV (consbv lf5 (BV_full_adder_sum lf7 l lf4))   (BV.consbv lf5 (BV_full_adder_sum l lf7 (HalfAdder.half_adder_sum lf4 false))).
Lemma candidate_174: forall (a : bool) (lf7 : list bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf7 cin)   (BV_full_adder_sum lf7 (@cons bool a l) (HalfAdder.half_adder_sum cin false)).
Lemma candidate_168: forall (a : bool) (lf7 : list bool) (l : list bool) (cin : bool), @eq BV   (BV_full_adder_sum lf7 (@cons bool a l) (HalfAdder.half_adder_sum cin false))   (BV_full_adder_sum (@cons bool a l) lf7 cin).
Lemma candidate_128: forall (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@nil bool) l (half_adder_carry a cin))   (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry cin a)).
Lemma candidate_89: forall (l : list bool) (lf4 : bool) (lf5 : bool), @eq BV (consbv lf5 (BV_full_adder_sum (@nil bool) l lf4))   (BV.consbv lf5 (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum lf4 false))).
Lemma candidate_87: forall (l : list bool) (lf4 : bool) (lf5 : bool), @eq BV (consbv lf5 (BV_full_adder_sum (@nil bool) l lf4))   (BV.consbv lf5 (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry lf4 true))).
Lemma candidate_113: forall (a : bool) (l : list bool) (cin : bool) (lf5 : bool), @eq BV   (consbv lf5 (BV_full_adder_sum (@nil bool) l (half_adder_carry a cin)))   (BV.consbv lf5 (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry cin a))).
Lemma candidate_126: forall (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@nil bool) l (half_adder_carry a cin))   (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry a (HalfAdder.half_adder_sum cin false))).
Lemma candidate_638: forall (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder_sum lf6 (@nil bool) cin)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf6 (HalfAdder.half_adder_sum cin false)).
Lemma candidate_636: forall (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder_sum lf6 (@nil bool) cin)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf6 (HalfAdder.half_adder_carry cin true)).
Lemma candidate_632: forall (cin : bool) (lf6 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf6 (HalfAdder.half_adder_sum cin false))   (BV_full_adder_sum lf6 (@nil bool) cin).
Lemma candidate_630: forall (cin : bool) (lf6 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf6 (HalfAdder.half_adder_carry cin true))   (BV_full_adder_sum lf6 (@nil bool) cin).
Lemma candidate_828: forall (a : bool) (l : list bool) (cin : bool), @eq BV   (consbv (half_adder_sum a cin)      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry cin a)))   (BV_full_adder_sum (@cons bool a l) (@nil bool) cin).
Lemma candidate_653: forall (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) cin)   (BV.consbv (HalfAdder.half_adder_sum cin a) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry cin a))).
Lemma candidate_647: forall (a : bool) (l : list bool) (cin : bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum cin a) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry cin a)))   (BV_full_adder_sum (@cons bool a l) (@nil bool) cin).
Lemma candidate_826: forall (a : bool) (l : list bool) (cin : bool), @eq BV   (consbv (half_adder_sum a cin)      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a (HalfAdder.half_adder_sum cin false))))   (BV_full_adder_sum (@cons bool a l) (@nil bool) cin).
Lemma candidate_652: forall (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) cin)   (BV.consbv (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum cin false)) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a (HalfAdder.half_adder_sum cin false)))).
Lemma candidate_651: forall (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) cin)   (BV.consbv (HalfAdder.half_adder_sum cin (HalfAdder.half_adder_sum a false)) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry cin (HalfAdder.half_adder_sum a false)))).
Lemma candidate_650: forall (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) cin)   (BV.consbv (HalfAdder.half_adder_sum a (HalfAdder.half_adder_carry cin true)) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a (HalfAdder.half_adder_carry cin true)))).
Lemma candidate_649: forall (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) cin)   (BV.consbv (HalfAdder.half_adder_sum cin (HalfAdder.half_adder_carry a true)) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry cin (HalfAdder.half_adder_carry a true)))).
Lemma candidate_646: forall (a : bool) (l : list bool) (cin : bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum cin false)) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a (HalfAdder.half_adder_sum cin false))))   (BV_full_adder_sum (@cons bool a l) (@nil bool) cin).
Lemma candidate_645: forall (a : bool) (l : list bool) (cin : bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum cin (HalfAdder.half_adder_sum a false)) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry cin (HalfAdder.half_adder_sum a false))))   (BV_full_adder_sum (@cons bool a l) (@nil bool) cin).
Lemma candidate_644: forall (a : bool) (l : list bool) (cin : bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a (HalfAdder.half_adder_carry cin true)) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a (HalfAdder.half_adder_carry cin true))))   (BV_full_adder_sum (@cons bool a l) (@nil bool) cin).
Lemma candidate_643: forall (a : bool) (l : list bool) (cin : bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum cin (HalfAdder.half_adder_carry a true)) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry cin (HalfAdder.half_adder_carry a true))))   (BV_full_adder_sum (@cons bool a l) (@nil bool) cin).

Category 3 (provable):
Count = 2

Lemma candidate_140: forall (a : bool) (l : list bool) (cin : bool), @eq BV   (consbv (half_adder_sum a cin)      (BV_full_adder_sum (@nil bool) l (half_adder_carry a cin)))   (BV.consbv (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum cin false)) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a (HalfAdder.half_adder_sum cin false)))).
Lemma candidate_138: forall (a : bool) (l : list bool) (cin : bool), @eq BV   (consbv (half_adder_sum a cin)      (BV_full_adder_sum (@nil bool) l (half_adder_carry a cin)))   (BV.consbv (HalfAdder.half_adder_sum a (HalfAdder.half_adder_carry cin true)) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a (HalfAdder.half_adder_carry cin true)))).

Category 3 (not provable):
Count = 2

Lemma candidate_139: forall (a : bool) (l : list bool) (cin : bool), @eq BV   (consbv (half_adder_sum a cin)      (BV_full_adder_sum (@nil bool) l (half_adder_carry a cin)))   (BV.consbv (HalfAdder.half_adder_sum cin (HalfAdder.half_adder_sum a false)) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry cin (HalfAdder.half_adder_sum a false)))).
Lemma candidate_137: forall (a : bool) (l : list bool) (cin : bool), @eq BV   (consbv (half_adder_sum a cin)      (BV_full_adder_sum (@nil bool) l (half_adder_carry a cin)))   (BV.consbv (HalfAdder.half_adder_sum cin (HalfAdder.half_adder_carry a true)) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry cin (HalfAdder.half_adder_carry a true)))).