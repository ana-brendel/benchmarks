File Information
- File name: Adder
- Original Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/Adder/Adder_lemma_half_adder_sum_false_193
- LFind Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/Adder/_lfind_Adder_lemma_half_adder_sum_false_193
- Namespace: Circuits
- Proof name: BV_full_adder_sum_v_nil_false
- Theorem: Theorem BV_full_adder_sum_v_nil_false: forall v0 : BV, @eq BV (BV_full_adder_sum v0 nilbv false) v0.
- Declarations: 
From lfind Require Import LFind.
From CircuitsCoqGym Require Import BV.
From CircuitsCoqGym Require Import FullAdder.

Proof Context
* Goal State: @eq BV
  (consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false))
  (@cons bool a l)

* Hypothesis:
H : @eq BV (BV_full_adder_sum l (@nil bool) false) l
v : BV
l : list bool
a : bool

* Types:
Set
list bool
Prop
BV
bool

* Polymorphic Types:
list bool

* Variables:
l : list bool
a : bool

* Terms:
consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false) : BV
@eq BV
  (consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false))
  (@cons bool a l) : Prop
false : bool
bool : Set
half_adder_sum a false : bool
BV_full_adder_sum l (@nil bool) false : BV
@cons bool a l : list bool
@nil bool : list bool
BV : Set
list bool : Set
l : list bool
@eq BV (BV_full_adder_sum l (@nil bool) false) l : Prop
a : bool

* Functions:
half_adder_sum  : forall (_ : bool) (_ : bool), bool
list  : forall _ : Type, Type
consbv  : forall (_ : bool) (_ : BV), BV
@cons  : forall (A : Type) (_ : A) (_ : list A), list A
@nil  : forall A : Type, list A
BV_full_adder_sum  : forall (_ : list bool) (_ : list bool) (_ : bool), BV
@eq  : forall (A : Type) (_ : A) (_ : A), Prop

<---GENERALIZATION--->
Time elapsed: 2 seconds
Generalized Variables:
lf3 : bool = half_adder_sum a false
lf1 : BV = consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false)
lf4 : list bool = @cons bool a l
lf5 : list bool = @nil bool
lf2 : BV = BV_full_adder_sum l (@nil bool) false
lf6 : bool = false

Generalizations:
Lemma conj1: forall (lf4 : list bool) (lf1 : BV), @eq BV lf1 lf4.
Lemma conj9: forall (lf1 : BV) (l : list bool) (a : bool), @eq BV lf1 (@cons bool a l).
Lemma conj17: forall (lf2 : BV) (lf4 : list bool) (lf3 : bool), @eq BV (consbv lf3 lf2) lf4.
Lemma conj19: forall (lf6 : bool) (lf5 : list bool) (lf4 : list bool) (l : list bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 lf6)) lf4.
Lemma conj20: forall (lf5 : list bool) (lf4 : list bool) (l : list bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 false)) lf4.
Lemma conj23: forall (lf6 : bool) (lf4 : list bool) (l : list bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6)) lf4.
Lemma conj24: forall (lf4 : list bool) (l : list bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false)) lf4.
Lemma conj25: forall (lf2 : BV) (l : list bool) (a : bool) (lf3 : bool), @eq BV (consbv lf3 lf2) (@cons bool a l).
Lemma conj27: forall (lf6 : bool) (lf5 : list bool) (l : list bool) (a : bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 lf6)) (@cons bool a l).
Lemma conj28: forall (lf5 : list bool) (l : list bool) (a : bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 false)) (@cons bool a l).
Lemma conj31: forall (lf6 : bool) (l : list bool) (a : bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6)) (@cons bool a l).
Lemma conj32: forall (l : list bool) (a : bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false)) (@cons bool a l).
Lemma conj49: forall (lf6 : bool) (lf2 : BV) (lf4 : list bool) (a : bool), @eq BV (consbv (half_adder_sum a lf6) lf2) lf4.
Lemma conj50: forall (lf2 : BV) (lf4 : list bool) (a : bool), @eq BV (consbv (half_adder_sum a false) lf2) lf4.
Lemma conj51: forall (lf6 : bool) (lf5 : list bool) (lf4 : list bool) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6)) lf4.
Lemma conj52: forall (lf5 : list bool) (lf4 : list bool) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false)) lf4.
Lemma conj55: forall (lf6 : bool) (lf4 : list bool) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))
  lf4.
Lemma conj56: forall (lf4 : list bool) (l : list bool) (a : bool), @eq BV
  (consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false))
  lf4.
Lemma conj57: forall (lf6 : bool) (lf2 : BV) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a lf6) lf2) (@cons bool a l).
Lemma conj58: forall (lf2 : BV) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a false) lf2) (@cons bool a l).
Lemma conj59: forall (lf6 : bool) (lf5 : list bool) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))
  (@cons bool a l).
Lemma conj60: forall (lf5 : list bool) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))
  (@cons bool a l).
Lemma conj63: forall (lf6 : bool) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))
  (@cons bool a l).
Lemma conj64: forall (l : list bool) (a : bool), @eq BV
  (consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false))
  (@cons bool a l).


<---VALIDITY CHECKS--->
Time elapsed: 110 seconds
Valid:
Lemma conj64: forall (l : list bool) (a : bool), @eq BV
  (consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false))
  (@cons bool a l).

Invalid:
Lemma conj63: forall (lf6 : bool) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))
  (@cons bool a l).
Lemma conj60: forall (lf5 : list bool) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))
  (@cons bool a l).
Lemma conj59: forall (lf6 : bool) (lf5 : list bool) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))
  (@cons bool a l).
Lemma conj58: forall (lf2 : BV) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a false) lf2) (@cons bool a l).
Lemma conj57: forall (lf6 : bool) (lf2 : BV) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a lf6) lf2) (@cons bool a l).
Lemma conj56: forall (lf4 : list bool) (l : list bool) (a : bool), @eq BV
  (consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false))
  lf4.
Lemma conj55: forall (lf6 : bool) (lf4 : list bool) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))
  lf4.
Lemma conj52: forall (lf5 : list bool) (lf4 : list bool) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false)) lf4.
Lemma conj51: forall (lf6 : bool) (lf5 : list bool) (lf4 : list bool) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6)) lf4.
Lemma conj50: forall (lf2 : BV) (lf4 : list bool) (a : bool), @eq BV (consbv (half_adder_sum a false) lf2) lf4.
Lemma conj49: forall (lf6 : bool) (lf2 : BV) (lf4 : list bool) (a : bool), @eq BV (consbv (half_adder_sum a lf6) lf2) lf4.
Lemma conj32: forall (l : list bool) (a : bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false)) (@cons bool a l).
Lemma conj31: forall (lf6 : bool) (l : list bool) (a : bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6)) (@cons bool a l).
Lemma conj28: forall (lf5 : list bool) (l : list bool) (a : bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 false)) (@cons bool a l).
Lemma conj27: forall (lf6 : bool) (lf5 : list bool) (l : list bool) (a : bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 lf6)) (@cons bool a l).
Lemma conj25: forall (lf2 : BV) (l : list bool) (a : bool) (lf3 : bool), @eq BV (consbv lf3 lf2) (@cons bool a l).
Lemma conj24: forall (lf4 : list bool) (l : list bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false)) lf4.
Lemma conj23: forall (lf6 : bool) (lf4 : list bool) (l : list bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6)) lf4.
Lemma conj20: forall (lf5 : list bool) (lf4 : list bool) (l : list bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 false)) lf4.
Lemma conj19: forall (lf6 : bool) (lf5 : list bool) (lf4 : list bool) (l : list bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 lf6)) lf4.
Lemma conj17: forall (lf2 : BV) (lf4 : list bool) (lf3 : bool), @eq BV (consbv lf3 lf2) lf4.
Lemma conj9: forall (lf1 : BV) (l : list bool) (a : bool), @eq BV lf1 (@cons bool a l).
Lemma conj1: forall (lf4 : list bool) (lf1 : BV), @eq BV lf1 lf4.

<---ADD IMPLICATIONS--->
Time elapsed: 169 seconds
Generalizations:
Lemma conj63: forall (lf6 : bool) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))
  (@cons bool a l).
Lemma conj60: forall (lf5 : list bool) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))
  (@cons bool a l).
Lemma conj60_imp: forall (lf5 : list bool) (l : list bool) (a : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 false) l,
@eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))
  (@cons bool a l).
Lemma conj59: forall (lf6 : bool) (lf5 : list bool) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))
  (@cons bool a l).
Lemma conj59_imp: forall (lf6 : bool) (lf5 : list bool) (l : list bool) (a : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l,
@eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))
  (@cons bool a l).
Lemma conj58: forall (lf2 : BV) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a false) lf2) (@cons bool a l).
Lemma conj58_imp: forall (lf2 : BV) (l : list bool) (a : bool), forall _ : @eq BV lf2 l,
@eq BV (consbv (half_adder_sum a false) lf2) (@cons bool a l).
Lemma conj57: forall (lf6 : bool) (lf2 : BV) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a lf6) lf2) (@cons bool a l).
Lemma conj56: forall (lf4 : list bool) (l : list bool) (a : bool), @eq BV
  (consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false))
  lf4.
Lemma conj55: forall (lf6 : bool) (lf4 : list bool) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))
  lf4.
Lemma conj52: forall (lf5 : list bool) (lf4 : list bool) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false)) lf4.
Lemma conj51: forall (lf6 : bool) (lf5 : list bool) (lf4 : list bool) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6)) lf4.
Lemma conj50: forall (lf2 : BV) (lf4 : list bool) (a : bool), @eq BV (consbv (half_adder_sum a false) lf2) lf4.
Lemma conj49: forall (lf6 : bool) (lf2 : BV) (lf4 : list bool) (a : bool), @eq BV (consbv (half_adder_sum a lf6) lf2) lf4.
Lemma conj32: forall (l : list bool) (a : bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false)) (@cons bool a l).
Lemma conj31: forall (lf6 : bool) (l : list bool) (a : bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6)) (@cons bool a l).
Lemma conj28: forall (lf5 : list bool) (l : list bool) (a : bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 false)) (@cons bool a l).
Lemma conj27: forall (lf6 : bool) (lf5 : list bool) (l : list bool) (a : bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 lf6)) (@cons bool a l).
Lemma conj25: forall (lf2 : BV) (l : list bool) (a : bool) (lf3 : bool), @eq BV (consbv lf3 lf2) (@cons bool a l).
Lemma conj24: forall (lf4 : list bool) (l : list bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false)) lf4.
Lemma conj23: forall (lf6 : bool) (lf4 : list bool) (l : list bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6)) lf4.
Lemma conj20: forall (lf5 : list bool) (lf4 : list bool) (l : list bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 false)) lf4.
Lemma conj19: forall (lf6 : bool) (lf5 : list bool) (lf4 : list bool) (l : list bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 lf6)) lf4.
Lemma conj17: forall (lf2 : BV) (lf4 : list bool) (lf3 : bool), @eq BV (consbv lf3 lf2) lf4.
Lemma conj9: forall (lf1 : BV) (l : list bool) (a : bool), @eq BV lf1 (@cons bool a l).
Lemma conj1: forall (lf4 : list bool) (lf1 : BV), @eq BV lf1 lf4.


<---VALIDITY CHECKS--->
Time elapsed: 237 seconds
Valid:
Lemma conj58_imp: forall (lf2 : BV) (l : list bool) (a : bool), forall _ : @eq BV lf2 l,
@eq BV (consbv (half_adder_sum a false) lf2) (@cons bool a l).
Lemma conj60_imp: forall (lf5 : list bool) (l : list bool) (a : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 false) l,
@eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))
  (@cons bool a l).

Invalid:
Lemma conj1: forall (lf4 : list bool) (lf1 : BV), @eq BV lf1 lf4.
Lemma conj9: forall (lf1 : BV) (l : list bool) (a : bool), @eq BV lf1 (@cons bool a l).
Lemma conj17: forall (lf2 : BV) (lf4 : list bool) (lf3 : bool), @eq BV (consbv lf3 lf2) lf4.
Lemma conj19: forall (lf6 : bool) (lf5 : list bool) (lf4 : list bool) (l : list bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 lf6)) lf4.
Lemma conj20: forall (lf5 : list bool) (lf4 : list bool) (l : list bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 false)) lf4.
Lemma conj23: forall (lf6 : bool) (lf4 : list bool) (l : list bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6)) lf4.
Lemma conj24: forall (lf4 : list bool) (l : list bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false)) lf4.
Lemma conj25: forall (lf2 : BV) (l : list bool) (a : bool) (lf3 : bool), @eq BV (consbv lf3 lf2) (@cons bool a l).
Lemma conj27: forall (lf6 : bool) (lf5 : list bool) (l : list bool) (a : bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 lf6)) (@cons bool a l).
Lemma conj28: forall (lf5 : list bool) (l : list bool) (a : bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 false)) (@cons bool a l).
Lemma conj31: forall (lf6 : bool) (l : list bool) (a : bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6)) (@cons bool a l).
Lemma conj32: forall (l : list bool) (a : bool) (lf3 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false)) (@cons bool a l).
Lemma conj49: forall (lf6 : bool) (lf2 : BV) (lf4 : list bool) (a : bool), @eq BV (consbv (half_adder_sum a lf6) lf2) lf4.
Lemma conj50: forall (lf2 : BV) (lf4 : list bool) (a : bool), @eq BV (consbv (half_adder_sum a false) lf2) lf4.
Lemma conj51: forall (lf6 : bool) (lf5 : list bool) (lf4 : list bool) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6)) lf4.
Lemma conj52: forall (lf5 : list bool) (lf4 : list bool) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false)) lf4.
Lemma conj55: forall (lf6 : bool) (lf4 : list bool) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))
  lf4.
Lemma conj56: forall (lf4 : list bool) (l : list bool) (a : bool), @eq BV
  (consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false))
  lf4.
Lemma conj57: forall (lf6 : bool) (lf2 : BV) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a lf6) lf2) (@cons bool a l).
Lemma conj58: forall (lf2 : BV) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a false) lf2) (@cons bool a l).
Lemma conj59_imp: forall (lf6 : bool) (lf5 : list bool) (l : list bool) (a : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l,
@eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))
  (@cons bool a l).
Lemma conj59: forall (lf6 : bool) (lf5 : list bool) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))
  (@cons bool a l).
Lemma conj60: forall (lf5 : list bool) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))
  (@cons bool a l).
Lemma conj63: forall (lf6 : bool) (l : list bool) (a : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))
  (@cons bool a l).


<---CREATE SKETCHES--->
Time elapsed: 237 seconds
Sketches:
Sketch conj9_sketch0 : @eq BV lf1 (##hole##)
Sketch conj9_term_sketch0 : @eq (list bool) (@cons bool a l) (##hole##)
Sketch conj17_sketch0 : @eq BV (##hole##) lf4
Sketch conj17_term_sketch0 : @eq BV (consbv lf3 lf2) (##hole##)
Sketch conj19_sketch0 : @eq BV (consbv lf3 (##hole##)) lf4
Sketch conj19_sketch1 : @eq BV (##hole##) lf4
Sketch conj19_term_sketch0 : @eq BV (BV_full_adder_sum l lf5 lf6) (##hole##)
Sketch conj19_term_sketch1 : @eq BV (consbv lf3 (BV_full_adder_sum l lf5 lf6)) (##hole##)
Sketch conj20_sketch0 : @eq BV (consbv lf3 (BV_full_adder_sum l lf5 (##hole##))) lf4
Sketch conj20_sketch1 : @eq BV (##hole##) lf4
Sketch conj20_sketch2 : @eq BV (consbv lf3 (##hole##)) lf4
Sketch conj20_term_sketch0 : @eq bool false (##hole##)
Sketch conj20_term_sketch1 : @eq BV (consbv lf3 (BV_full_adder_sum l lf5 false)) (##hole##)
Sketch conj20_term_sketch2 : @eq BV (BV_full_adder_sum l lf5 false) (##hole##)
Sketch conj23_sketch0 : @eq BV (##hole##) lf4
Sketch conj23_sketch1 : @eq BV (consbv lf3 (##hole##)) lf4
Sketch conj23_sketch2 : @eq BV (consbv lf3 (BV_full_adder_sum l (##hole##) lf6)) lf4
Sketch conj23_term_sketch0 : @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6)) (##hole##)
Sketch conj23_term_sketch1 : @eq BV (BV_full_adder_sum l (@nil bool) lf6) (##hole##)
Sketch conj23_term_sketch2 : @eq (list bool) (@nil bool) (##hole##)
Sketch conj24_sketch0 : @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) (##hole##))) lf4
Sketch conj24_sketch1 : @eq BV (consbv lf3 (##hole##)) lf4
Sketch conj24_sketch2 : @eq BV (consbv lf3 (BV_full_adder_sum l (##hole##) false)) lf4
Sketch conj24_sketch3 : @eq BV (##hole##) lf4
Sketch conj24_term_sketch0 : @eq bool false (##hole##)
Sketch conj24_term_sketch1 : @eq BV (BV_full_adder_sum l (@nil bool) false) (##hole##)
Sketch conj24_term_sketch2 : @eq (list bool) (@nil bool) (##hole##)
Sketch conj24_term_sketch3 : @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false)) (##hole##)
Sketch conj25_sketch0 : @eq BV (consbv lf3 lf2) (##hole##)
Sketch conj25_sketch1 : @eq BV (##hole##) (@cons bool a l)
Sketch conj25_term_sketch0 : @eq (list bool) (@cons bool a l) (##hole##)
Sketch conj25_term_sketch1 : @eq BV (consbv lf3 lf2) (##hole##)
Sketch conj27_sketch0 : @eq BV (consbv lf3 (##hole##)) (@cons bool a l)
Sketch conj27_sketch1 : @eq BV (consbv lf3 (BV_full_adder_sum l lf5 lf6)) (##hole##)
Sketch conj27_sketch2 : @eq BV (##hole##) (@cons bool a l)
Sketch conj27_term_sketch0 : @eq BV (BV_full_adder_sum l lf5 lf6) (##hole##)
Sketch conj27_term_sketch1 : @eq (list bool) (@cons bool a l) (##hole##)
Sketch conj27_term_sketch2 : @eq BV (consbv lf3 (BV_full_adder_sum l lf5 lf6)) (##hole##)
Sketch conj28_sketch0 : @eq BV (consbv lf3 (BV_full_adder_sum l lf5 (##hole##))) (@cons bool a l)
Sketch conj28_sketch1 : @eq BV (consbv lf3 (BV_full_adder_sum l lf5 false)) (##hole##)
Sketch conj28_sketch2 : @eq BV (##hole##) (@cons bool a l)
Sketch conj28_sketch3 : @eq BV (consbv lf3 (##hole##)) (@cons bool a l)
Sketch conj28_term_sketch0 : @eq bool false (##hole##)
Sketch conj28_term_sketch1 : @eq (list bool) (@cons bool a l) (##hole##)
Sketch conj28_term_sketch2 : @eq BV (consbv lf3 (BV_full_adder_sum l lf5 false)) (##hole##)
Sketch conj28_term_sketch3 : @eq BV (BV_full_adder_sum l lf5 false) (##hole##)
Sketch conj31_sketch0 : @eq BV (##hole##) (@cons bool a l)
Sketch conj31_sketch1 : @eq BV (consbv lf3 (##hole##)) (@cons bool a l)
Sketch conj31_sketch2 : @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6)) (##hole##)
Sketch conj31_sketch3 : @eq BV (consbv lf3 (BV_full_adder_sum l (##hole##) lf6)) (@cons bool a l)
Sketch conj31_term_sketch0 : @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6)) (##hole##)
Sketch conj31_term_sketch1 : @eq BV (BV_full_adder_sum l (@nil bool) lf6) (##hole##)
Sketch conj31_term_sketch2 : @eq (list bool) (@cons bool a l) (##hole##)
Sketch conj31_term_sketch3 : @eq (list bool) (@nil bool) (##hole##)
Sketch conj32_sketch0 : @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) (##hole##)))
  (@cons bool a l)
Sketch conj32_sketch1 : @eq BV (consbv lf3 (##hole##)) (@cons bool a l)
Sketch conj32_sketch2 : @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false)) (##hole##)
Sketch conj32_sketch3 : @eq BV (consbv lf3 (BV_full_adder_sum l (##hole##) false)) (@cons bool a l)
Sketch conj32_sketch4 : @eq BV (##hole##) (@cons bool a l)
Sketch conj32_term_sketch0 : @eq bool false (##hole##)
Sketch conj32_term_sketch1 : @eq BV (BV_full_adder_sum l (@nil bool) false) (##hole##)
Sketch conj32_term_sketch2 : @eq (list bool) (@cons bool a l) (##hole##)
Sketch conj32_term_sketch3 : @eq (list bool) (@nil bool) (##hole##)
Sketch conj32_term_sketch4 : @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false)) (##hole##)
Sketch conj49_sketch0 : @eq BV (consbv (##hole##) lf2) lf4
Sketch conj49_sketch1 : @eq BV (##hole##) lf4
Sketch conj49_term_sketch0 : @eq bool (half_adder_sum a lf6) (##hole##)
Sketch conj49_term_sketch1 : @eq BV (consbv (half_adder_sum a lf6) lf2) (##hole##)
Sketch conj50_sketch0 : @eq BV (consbv (half_adder_sum a (##hole##)) lf2) lf4
Sketch conj50_sketch1 : @eq BV (##hole##) lf4
Sketch conj50_sketch2 : @eq BV (consbv (##hole##) lf2) lf4
Sketch conj50_term_sketch0 : @eq bool false (##hole##)
Sketch conj50_term_sketch1 : @eq BV (consbv (half_adder_sum a false) lf2) (##hole##)
Sketch conj50_term_sketch2 : @eq bool (half_adder_sum a false) (##hole##)
Sketch conj51_sketch0 : @eq BV (consbv (half_adder_sum a lf6) (##hole##)) lf4
Sketch conj51_sketch1 : @eq BV (consbv (##hole##) (BV_full_adder_sum l lf5 lf6)) lf4
Sketch conj51_sketch2 : @eq BV (##hole##) lf4
Sketch conj51_term_sketch0 : @eq BV (BV_full_adder_sum l lf5 lf6) (##hole##)
Sketch conj51_term_sketch1 : @eq bool (half_adder_sum a lf6) (##hole##)
Sketch conj51_term_sketch2 : @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))
  (##hole##)
Sketch conj52_sketch0 : @eq BV (##hole##) lf4
Sketch conj52_sketch1 : @eq BV
  (consbv (half_adder_sum a (##hole##)) (BV_full_adder_sum l lf5 (##hole##)))
  lf4
Sketch conj52_sketch2 : @eq BV (consbv (##hole##) (BV_full_adder_sum l lf5 false)) lf4
Sketch conj52_sketch3 : @eq BV (consbv (half_adder_sum a false) (##hole##)) lf4
Sketch conj52_term_sketch0 : @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))
  (##hole##)
Sketch conj52_term_sketch1 : @eq bool false (##hole##)
Sketch conj52_term_sketch2 : @eq bool (half_adder_sum a false) (##hole##)
Sketch conj52_term_sketch3 : @eq BV (BV_full_adder_sum l lf5 false) (##hole##)
Sketch conj55_sketch0 : @eq BV (##hole##) lf4
Sketch conj55_sketch1 : @eq BV (consbv (half_adder_sum a lf6) (##hole##)) lf4
Sketch conj55_sketch2 : @eq BV (consbv (##hole##) (BV_full_adder_sum l (@nil bool) lf6)) lf4
Sketch conj55_sketch3 : @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (##hole##) lf6))
  lf4
Sketch conj55_term_sketch0 : @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))
  (##hole##)
Sketch conj55_term_sketch1 : @eq BV (BV_full_adder_sum l (@nil bool) lf6) (##hole##)
Sketch conj55_term_sketch2 : @eq bool (half_adder_sum a lf6) (##hole##)
Sketch conj55_term_sketch3 : @eq (list bool) (@nil bool) (##hole##)
Sketch conj56_sketch0 : @eq BV (##hole##) lf4
Sketch conj56_sketch1 : @eq BV
  (consbv (half_adder_sum a (##hole##))
     (BV_full_adder_sum l (@nil bool) (##hole##))) lf4
Sketch conj56_sketch2 : @eq BV (consbv (##hole##) (BV_full_adder_sum l (@nil bool) false)) lf4
Sketch conj56_sketch3 : @eq BV (consbv (half_adder_sum a false) (##hole##)) lf4
Sketch conj56_sketch4 : @eq BV
  (consbv (half_adder_sum a false) (BV_full_adder_sum l (##hole##) false))
  lf4
Sketch conj56_term_sketch0 : @eq BV
  (consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false))
  (##hole##)
Sketch conj56_term_sketch1 : @eq bool false (##hole##)
Sketch conj56_term_sketch2 : @eq bool (half_adder_sum a false) (##hole##)
Sketch conj56_term_sketch3 : @eq BV (BV_full_adder_sum l (@nil bool) false) (##hole##)
Sketch conj56_term_sketch4 : @eq (list bool) (@nil bool) (##hole##)
Sketch conj57_sketch0 : @eq BV (consbv (##hole##) lf2) (@cons bool a l)
Sketch conj57_sketch1 : @eq BV (consbv (half_adder_sum a lf6) lf2) (##hole##)
Sketch conj57_sketch2 : @eq BV (##hole##) (@cons bool a l)
Sketch conj57_term_sketch0 : @eq bool (half_adder_sum a lf6) (##hole##)
Sketch conj57_term_sketch1 : @eq (list bool) (@cons bool a l) (##hole##)
Sketch conj57_term_sketch2 : @eq BV (consbv (half_adder_sum a lf6) lf2) (##hole##)
Sketch conj58_sketch0 : @eq BV (consbv (half_adder_sum a (##hole##)) lf2) (@cons bool a l)
Sketch conj58_sketch1 : @eq BV (##hole##) (@cons bool a l)
Sketch conj58_sketch2 : @eq BV (consbv (##hole##) lf2) (@cons bool a l)
Sketch conj58_sketch3 : @eq BV (consbv (half_adder_sum a false) lf2) (##hole##)
Sketch conj58_term_sketch0 : @eq bool false (##hole##)
Sketch conj58_term_sketch1 : @eq BV (consbv (half_adder_sum a false) lf2) (##hole##)
Sketch conj58_term_sketch2 : @eq bool (half_adder_sum a false) (##hole##)
Sketch conj58_term_sketch3 : @eq (list bool) (@cons bool a l) (##hole##)
Sketch conj59_imp_sketch0 : forall _ : @eq BV (##hole##) l,
@eq BV (consbv (half_adder_sum a lf6) (##hole##)) (@cons bool a l)
Sketch conj59_imp_sketch1 : forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l,
@eq BV (consbv (##hole##) (BV_full_adder_sum l lf5 lf6)) (@cons bool a l)
Sketch conj59_imp_sketch2 : forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l,
@eq BV (##hole##) (@cons bool a l)
Sketch conj59_imp_sketch3 : forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l,
@eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))
  (##hole##)
Sketch conj59_imp_term_sketch0 : @eq BV (BV_full_adder_sum l lf5 lf6) (##hole##)
Sketch conj59_imp_term_sketch1 : @eq bool (half_adder_sum a lf6) (##hole##)
Sketch conj59_imp_term_sketch2 : @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))
  (##hole##)
Sketch conj59_imp_term_sketch3 : @eq (list bool) (@cons bool a l) (##hole##)
Sketch conj59_sketch0 : @eq BV (consbv (half_adder_sum a lf6) (##hole##)) (@cons bool a l)
Sketch conj59_sketch1 : @eq BV (consbv (##hole##) (BV_full_adder_sum l lf5 lf6)) (@cons bool a l)
Sketch conj59_sketch2 : @eq BV (##hole##) (@cons bool a l)
Sketch conj59_sketch3 : @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))
  (##hole##)
Sketch conj59_term_sketch0 : @eq BV (BV_full_adder_sum l lf5 lf6) (##hole##)
Sketch conj59_term_sketch1 : @eq bool (half_adder_sum a lf6) (##hole##)
Sketch conj59_term_sketch2 : @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))
  (##hole##)
Sketch conj59_term_sketch3 : @eq (list bool) (@cons bool a l) (##hole##)
Sketch conj60_sketch0 : @eq BV (##hole##) (@cons bool a l)
Sketch conj60_sketch1 : @eq BV
  (consbv (half_adder_sum a (##hole##)) (BV_full_adder_sum l lf5 (##hole##)))
  (@cons bool a l)
Sketch conj60_sketch2 : @eq BV (consbv (##hole##) (BV_full_adder_sum l lf5 false)) (@cons bool a l)
Sketch conj60_sketch3 : @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))
  (##hole##)
Sketch conj60_sketch4 : @eq BV (consbv (half_adder_sum a false) (##hole##)) (@cons bool a l)
Sketch conj60_term_sketch0 : @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))
  (##hole##)
Sketch conj60_term_sketch1 : @eq bool false (##hole##)
Sketch conj60_term_sketch2 : @eq bool (half_adder_sum a false) (##hole##)
Sketch conj60_term_sketch3 : @eq (list bool) (@cons bool a l) (##hole##)
Sketch conj60_term_sketch4 : @eq BV (BV_full_adder_sum l lf5 false) (##hole##)
Sketch conj63_sketch0 : @eq BV (##hole##) (@cons bool a l)
Sketch conj63_sketch1 : @eq BV (consbv (half_adder_sum a lf6) (##hole##)) (@cons bool a l)
Sketch conj63_sketch2 : @eq BV (consbv (##hole##) (BV_full_adder_sum l (@nil bool) lf6))
  (@cons bool a l)
Sketch conj63_sketch3 : @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))
  (##hole##)
Sketch conj63_sketch4 : @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (##hole##) lf6))
  (@cons bool a l)
Sketch conj63_term_sketch0 : @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))
  (##hole##)
Sketch conj63_term_sketch1 : @eq BV (BV_full_adder_sum l (@nil bool) lf6) (##hole##)
Sketch conj63_term_sketch2 : @eq bool (half_adder_sum a lf6) (##hole##)
Sketch conj63_term_sketch3 : @eq (list bool) (@cons bool a l) (##hole##)
Sketch conj63_term_sketch4 : @eq (list bool) (@nil bool) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 1420 seconds
Problems per Sketch:
Sketch conj52_sketch2 --> Problem  synth_41
Sketch conj32_term_sketch4 --> Problem  synth_19
Sketch conj52_sketch1 --> Problem  synth_40
Sketch conj60_term_sketch1 --> Problem  synth_9
Sketch conj59_term_sketch2 --> Problem  synth_39
Sketch conj25_sketch1 --> Problem  synth_21
Sketch conj63_sketch4 --> Problem  synth_63
Sketch conj23_sketch0 --> Problem  synth_3
Sketch conj59_term_sketch1 --> Problem  synth_32
Sketch conj59_imp_sketch2 --> Problem  synth_39
Sketch conj59_sketch1 --> Problem  synth_55
Sketch conj60_sketch0 --> Problem  synth_21
Sketch conj20_term_sketch2 --> Problem  synth_11
Sketch conj56_sketch4 --> Problem  synth_49
Sketch conj24_sketch2 --> Problem  synth_17
Sketch conj50_sketch2 --> Problem  synth_31
Sketch conj24_sketch1 --> Problem  synth_5
Sketch conj17_term_sketch0 --> Problem  synth_4
Sketch conj63_term_sketch0 --> Problem  synth_46
Sketch conj56_term_sketch0 --> Problem  synth_21
Sketch conj31_sketch0 --> Problem  synth_21
Sketch conj50_term_sketch2 --> Problem  synth_36
Sketch conj58_sketch2 --> Problem  synth_50
Sketch conj55_sketch3 --> Problem  synth_45
Sketch conj60_term_sketch3 --> Problem  synth_2
Sketch conj9_term_sketch0 --> Problem  synth_2
Sketch conj60_sketch2 --> Problem  synth_58
Sketch conj59_sketch3 --> Problem  synth_56
Sketch conj63_term_sketch4 --> Problem  synth_15
Sketch conj32_sketch3 --> Problem  synth_30
Sketch conj32_term_sketch3 --> Problem  synth_15
Sketch conj28_sketch2 --> Problem  synth_21
Sketch conj23_term_sketch2 --> Problem  synth_15
Sketch conj24_term_sketch0 --> Problem  synth_9
Sketch conj19_term_sketch1 --> Problem  synth_7
Sketch conj57_term_sketch0 --> Problem  synth_32
Sketch conj28_term_sketch2 --> Problem  synth_10
Sketch conj27_sketch1 --> Problem  synth_23
Sketch conj60_sketch3 --> Problem  synth_59
Sketch conj51_sketch0 --> Problem  synth_37
Sketch conj23_term_sketch0 --> Problem  synth_13
Sketch conj52_term_sketch3 --> Problem  synth_11
Sketch conj32_sketch2 --> Problem  synth_29
Sketch conj63_term_sketch1 --> Problem  synth_14
Sketch conj58_term_sketch3 --> Problem  synth_2
Sketch conj51_term_sketch1 --> Problem  synth_32
Sketch conj58_sketch1 --> Problem  synth_21
Sketch conj52_term_sketch0 --> Problem  synth_43
Sketch conj27_term_sketch1 --> Problem  synth_2
Sketch conj23_sketch2 --> Problem  synth_12
Sketch conj49_sketch0 --> Problem  synth_31
Sketch conj20_sketch2 --> Problem  synth_5
Sketch conj55_term_sketch1 --> Problem  synth_14
Sketch conj52_sketch0 --> Problem  synth_3
Sketch conj56_term_sketch4 --> Problem  synth_15
Sketch conj59_imp_term_sketch0 --> Problem  synth_6
Sketch conj49_term_sketch1 --> Problem  synth_33
Sketch conj9_sketch0 --> Problem  synth_1
Sketch conj50_term_sketch0 --> Problem  synth_9
Sketch conj31_term_sketch0 --> Problem  synth_13
Sketch conj55_sketch0 --> Problem  synth_3
Sketch conj63_sketch1 --> Problem  synth_54
Sketch conj27_sketch0 --> Problem  synth_22
Sketch conj56_term_sketch1 --> Problem  synth_9
Sketch conj56_sketch2 --> Problem  synth_48
Sketch conj50_sketch1 --> Problem  synth_3
Sketch conj58_sketch3 --> Problem  synth_53
Sketch conj25_sketch0 --> Problem  synth_20
Sketch conj32_sketch4 --> Problem  synth_21
Sketch conj32_term_sketch1 --> Problem  synth_18
Sketch conj60_sketch4 --> Problem  synth_60
Sketch conj56_sketch1 --> Problem  synth_47
Sketch conj24_term_sketch3 --> Problem  synth_19
Sketch conj27_term_sketch0 --> Problem  synth_6
Sketch conj51_sketch2 --> Problem  synth_3
Sketch conj25_term_sketch0 --> Problem  synth_2
Sketch conj63_term_sketch2 --> Problem  synth_32
Sketch conj58_term_sketch0 --> Problem  synth_9
Sketch conj58_term_sketch2 --> Problem  synth_36
Sketch conj28_sketch0 --> Problem  synth_24
Sketch conj57_term_sketch2 --> Problem  synth_33
Sketch conj60_term_sketch4 --> Problem  synth_11
Sketch conj28_term_sketch1 --> Problem  synth_2
Sketch conj31_term_sketch3 --> Problem  synth_15
Sketch conj31_term_sketch1 --> Problem  synth_14
Sketch conj24_sketch0 --> Problem  synth_16
Sketch conj32_sketch0 --> Problem  synth_28
Sketch conj23_sketch1 --> Problem  synth_5
Sketch conj60_term_sketch2 --> Problem  synth_36
Sketch conj60_sketch1 --> Problem  synth_57
Sketch conj55_sketch1 --> Problem  synth_37
Sketch conj28_term_sketch3 --> Problem  synth_11
Sketch conj27_term_sketch2 --> Problem  synth_7
Sketch conj59_sketch2 --> Problem  synth_21
Sketch conj52_term_sketch1 --> Problem  synth_9
Sketch conj20_sketch0 --> Problem  synth_8
Sketch conj20_term_sketch0 --> Problem  synth_9
Sketch conj51_term_sketch2 --> Problem  synth_39
Sketch conj27_sketch2 --> Problem  synth_21
Sketch conj60_term_sketch0 --> Problem  synth_43
Sketch conj52_term_sketch2 --> Problem  synth_36
Sketch conj31_sketch2 --> Problem  synth_26
Sketch conj58_term_sketch1 --> Problem  synth_35
Sketch conj59_imp_sketch1 --> Problem  synth_55
Sketch conj32_term_sketch2 --> Problem  synth_2
Sketch conj31_sketch3 --> Problem  synth_27
Sketch conj56_term_sketch3 --> Problem  synth_18
Sketch conj19_term_sketch0 --> Problem  synth_6
Sketch conj59_imp_term_sketch2 --> Problem  synth_39
Sketch conj59_imp_term_sketch1 --> Problem  synth_32
Sketch conj24_term_sketch1 --> Problem  synth_18
Sketch conj32_sketch1 --> Problem  synth_22
Sketch conj24_sketch3 --> Problem  synth_3
Sketch conj57_sketch2 --> Problem  synth_21
Sketch conj51_term_sketch0 --> Problem  synth_6
Sketch conj56_sketch3 --> Problem  synth_42
Sketch conj55_term_sketch0 --> Problem  synth_46
Sketch conj19_sketch0 --> Problem  synth_5
Sketch conj17_sketch0 --> Problem  synth_3
Sketch conj63_sketch2 --> Problem  synth_61
Sketch conj25_term_sketch1 --> Problem  synth_4
Sketch conj59_imp_term_sketch3 --> Problem  synth_2
Sketch conj59_sketch0 --> Problem  synth_54
Sketch conj58_sketch0 --> Problem  synth_52
Sketch conj23_term_sketch1 --> Problem  synth_14
Sketch conj20_sketch1 --> Problem  synth_3
Sketch conj63_term_sketch3 --> Problem  synth_2
Sketch conj63_sketch0 --> Problem  synth_21
Sketch conj55_term_sketch3 --> Problem  synth_15
Sketch conj63_sketch3 --> Problem  synth_62
Sketch conj59_term_sketch0 --> Problem  synth_6
Sketch conj59_imp_sketch0 --> Problem  synth_54
Sketch conj52_sketch3 --> Problem  synth_42
Sketch conj28_term_sketch0 --> Problem  synth_9
Sketch conj59_term_sketch3 --> Problem  synth_2
Sketch conj51_sketch1 --> Problem  synth_38
Sketch conj50_term_sketch1 --> Problem  synth_35
Sketch conj50_sketch0 --> Problem  synth_34
Sketch conj56_term_sketch2 --> Problem  synth_36
Sketch conj57_sketch1 --> Problem  synth_51
Sketch conj32_term_sketch0 --> Problem  synth_9
Sketch conj20_term_sketch1 --> Problem  synth_10
Sketch conj19_sketch1 --> Problem  synth_3
Sketch conj59_imp_sketch3 --> Problem  synth_56
Sketch conj28_sketch3 --> Problem  synth_22
Sketch conj28_sketch1 --> Problem  synth_25
Sketch conj57_term_sketch1 --> Problem  synth_2
Sketch conj24_term_sketch2 --> Problem  synth_15
Sketch conj56_sketch0 --> Problem  synth_3
Sketch conj57_sketch0 --> Problem  synth_50
Sketch conj31_sketch1 --> Problem  synth_22
Sketch conj31_term_sketch2 --> Problem  synth_2
Sketch conj55_term_sketch2 --> Problem  synth_32
Sketch conj55_sketch2 --> Problem  synth_44
Sketch conj49_sketch1 --> Problem  synth_3
Sketch conj49_term_sketch0 --> Problem  synth_32


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 1687 seconds

Problem: synth_28
 BV_full_adder_carry l (@nil bool) false
 HalfAdder.half_adder_sum lf3 lf3
 HalfAdder.half_adder_sum a lf3
 HalfAdder.half_adder_sum lf3 a
 HalfAdder.half_adder_sum a a
 false

Problem: synth_63
 @nil bool

Problem: synth_17
 @nil bool

Problem: synth_29
 @cons bool (HalfAdder.half_adder_sum (HalfAdder.half_adder_sum lf3 false) false) l
 @cons bool (HalfAdder.half_adder_sum lf3 (HalfAdder.half_adder_sum lf3 lf3)) l
 @cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum true lf3)) l
 @cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum lf3 true)) l
 @cons bool (HalfAdder.half_adder_sum lf3 false) l
 @cons bool lf3 l

Problem: synth_45
 @nil bool

Problem: synth_26
 @cons bool (HalfAdder.half_adder_sum lf6 (HalfAdder.half_adder_sum lf3 false)) l
 @cons bool (HalfAdder.half_adder_sum lf3 (HalfAdder.half_adder_sum lf6 false)) l
 @cons bool (HalfAdder.half_adder_sum lf6 lf3) l
 @cons bool (HalfAdder.half_adder_sum lf3 lf6) l
 @cons bool (HalfAdder.half_adder_sum lf3 false) l
 @cons bool lf3 l

Problem: synth_9
 false

Problem: synth_30
 @nil bool

Problem: synth_11
 BV_full_adder_sum l lf5 (BV_full_adder_carry lf5 (@nil bool) false)
 BV_full_adder_sum l (@nil bool) (BV_full_adder_carry lf5 (@nil bool) false)
 BV_full_adder_sum lf5 l false
 (fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false
 BV_full_adder_sum l lf5 false
 BV_full_adder_sum l (@nil bool) false

Problem: synth_54
 (fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum lf6 false)
 BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum lf6 false)
 (fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l lf6
 BV_full_adder_sum l (@nil bool) lf6
 (fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false
 BV_full_adder_sum l (@nil bool) false

Problem: synth_39
 BV_full_adder_sum lf5 (@cons bool false l) a
 BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)
 BV_full_adder_sum lf5 (@cons bool a l) lf6
 BV.consbv (HalfAdder.half_adder_sum a lf6) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a lf6))
 BV_full_adder_sum lf5 (@cons bool a l) false
 BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false))

Problem: synth_1

Problem: synth_46
 BV.consbv a (BV_full_adder_sum l (@nil bool) lf6)
 BV.consbv a (BV_full_adder_sum l (@nil bool) false)
 BV.consbv (HalfAdder.half_adder_sum lf6 a) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf6 a))
 BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)
 BV.consbv (HalfAdder.half_adder_sum a lf6) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a lf6))
 BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false))

Problem: synth_55
 (fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf5 a
 BV_full_adder_carry lf5 (@nil bool) a
 HalfAdder.half_adder_sum lf6 a
 HalfAdder.half_adder_sum a lf6
 HalfAdder.half_adder_sum a false
 a

Problem: synth_57
 BV_full_adder_carry lf5 lf5 false
 (fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf5 false
 BV_full_adder_carry l (@nil bool) false
 BV_full_adder_carry lf5 (@nil bool) false
 HalfAdder.half_adder_sum a a
 false

Problem: synth_59
 @cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum a true)) l
 @cons bool (BV_full_adder_carry lf5 lf5 a) l
 @cons bool ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf5 a) l
 @cons bool (BV_full_adder_carry lf5 (@nil bool) a) l
 @cons bool (HalfAdder.half_adder_sum a false) l
 @cons bool a l

Problem: synth_15
 @nil bool

Problem: synth_31

Problem: synth_14
 (fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum lf6 false)
 BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum lf6 false)
 (fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l lf6
 BV_full_adder_sum l (@nil bool) lf6
 (fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false
 BV_full_adder_sum l (@nil bool) false

Problem: synth_8
 (fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf5 false
 BV_full_adder_carry l (@nil bool) false
 BV_full_adder_carry lf4 (@nil bool) false
 BV_full_adder_carry lf5 (@nil bool) false
 HalfAdder.half_adder_sum lf3 lf3
 false

Problem: synth_34

Problem: synth_12
 @nil bool

Problem: synth_62
 @cons bool (HalfAdder.half_adder_sum lf6 (HalfAdder.half_adder_sum a false)) l
 @cons bool (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum lf6 false)) l
 @cons bool (HalfAdder.half_adder_sum lf6 a) l
 @cons bool (HalfAdder.half_adder_sum a lf6) l
 @cons bool (HalfAdder.half_adder_sum a false) l
 @cons bool a l

Problem: synth_5

Problem: synth_37

Problem: synth_58
 HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum a true)
 BV_full_adder_carry lf5 lf5 a
 (fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf5 a
 BV_full_adder_carry lf5 (@nil bool) a
 HalfAdder.half_adder_sum a false
 a

Problem: synth_53

Problem: synth_50

Problem: synth_2
 @cons bool (HalfAdder.half_adder_sum (HalfAdder.half_adder_sum a false) false) l
 @cons bool (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum a a)) l
 @cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum true a)) l
 @cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum a true)) l
 @cons bool (HalfAdder.half_adder_sum a false) l
 @cons bool a l

Problem: synth_22
 (fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum lf3 a)
 BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum lf3 a)
 (fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum a a)
 BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum a a)
 (fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false
 BV_full_adder_sum l (@nil bool) false

Problem: synth_20

Problem: synth_18
 (fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)
 BV_full_adder_sum l (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)
 (fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (BV_full_adder_carry l (@nil bool) false)
 BV_full_adder_sum l (@nil bool) (BV_full_adder_carry l (@nil bool) false)
 (fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false
 BV_full_adder_sum l (@nil bool) false

Problem: synth_21
 BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)
 BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum a a))
 BV.consbv a (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum a a))
 BV.consbv a (BV_full_adder_sum l (@nil bool) false)
 BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)
 BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false))

Problem: synth_56
 @cons bool ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf5 a) l
 @cons bool (BV_full_adder_carry lf5 (@nil bool) a) l
 @cons bool (HalfAdder.half_adder_sum lf6 a) l
 @cons bool (HalfAdder.half_adder_sum a lf6) l
 @cons bool (HalfAdder.half_adder_sum a false) l
 @cons bool a l

Problem: synth_41

Problem: synth_49
 @nil bool

Problem: synth_25
 @cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum lf3 true)) l
 @cons bool (BV_full_adder_carry lf5 lf5 lf3) l
 @cons bool ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf5 lf3) l
 @cons bool (BV_full_adder_carry lf5 (@nil bool) lf3) l
 @cons bool (HalfAdder.half_adder_sum lf3 false) l
 @cons bool lf3 l

Problem: synth_13
 BV.consbv lf3 (BV_full_adder_sum l (@nil bool) lf6)
 BV.consbv lf3 (BV_full_adder_sum l (@nil bool) false)
 BV.consbv (HalfAdder.half_adder_sum lf6 lf3) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf6 lf3))
 BV.consbv lf3 ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)
 BV.consbv (HalfAdder.half_adder_sum lf3 lf6) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf3 lf6))
 BV.consbv (HalfAdder.half_adder_sum lf3 false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf3 false))

Problem: synth_6
 BV_full_adder_sum l lf5 lf6
 BV_full_adder_sum l (@nil bool) lf6
 BV_full_adder_sum lf5 l false
 (fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false
 BV_full_adder_sum l lf5 false
 BV_full_adder_sum l (@nil bool) false

Problem: synth_7
 BV_full_adder_sum lf5 (@cons bool false l) lf3
 BV.consbv lf3 ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)
 BV_full_adder_sum lf5 (@cons bool lf3 l) lf6
 BV.consbv (HalfAdder.half_adder_sum lf3 lf6) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf3 lf6))
 BV_full_adder_sum lf5 (@cons bool lf3 l) false
 BV.consbv (HalfAdder.half_adder_sum lf3 false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf3 false))

Problem: synth_4

Problem: synth_61
 HalfAdder.half_adder_sum lf6 (HalfAdder.half_adder_sum a false)
 HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum lf6 false)
 HalfAdder.half_adder_sum lf6 a
 HalfAdder.half_adder_sum a lf6
 HalfAdder.half_adder_sum a false
 a

Problem: synth_38

Problem: synth_23
 @cons bool ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf5 lf3) l
 @cons bool (BV_full_adder_carry lf5 (@nil bool) lf3) l
 @cons bool (HalfAdder.half_adder_sum lf6 lf3) l
 @cons bool (HalfAdder.half_adder_sum lf3 lf6) l
 @cons bool (HalfAdder.half_adder_sum lf3 false) l
 @cons bool lf3 l

Problem: synth_27
 @nil bool

Problem: synth_42

Problem: synth_16
 (fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false
 (fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf4 false
 BV_full_adder_carry l (@nil bool) false
 BV_full_adder_carry lf4 (@nil bool) false
 HalfAdder.half_adder_sum lf3 lf3
 false

Problem: synth_19
 BV.consbv (HalfAdder.half_adder_sum lf3 false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)
 BV.consbv lf3 ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum lf3 lf3))
 BV.consbv lf3 (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum lf3 lf3))
 BV.consbv lf3 (BV_full_adder_sum l (@nil bool) false)
 BV.consbv lf3 ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)
 BV.consbv (HalfAdder.half_adder_sum lf3 false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf3 false))

Problem: synth_40
 (fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf5 false
 BV_full_adder_carry l (@nil bool) false
 BV_full_adder_carry lf4 (@nil bool) false
 BV_full_adder_carry lf5 (@nil bool) false
 HalfAdder.half_adder_sum a a
 false

Problem: synth_10
 BV.consbv lf3 (BV_full_adder_sum l lf5 false)
 BV.consbv lf3 (BV_full_adder_sum l (@nil bool) false)
 BV_full_adder_sum lf5 (@cons bool false l) lf3
 BV.consbv lf3 ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)
 BV_full_adder_sum lf5 (@cons bool lf3 l) false
 BV.consbv (HalfAdder.half_adder_sum lf3 false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf3 false))

Problem: synth_33

Problem: synth_47
 (fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false
 (fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf4 false
 BV_full_adder_carry l (@nil bool) false
 BV_full_adder_carry lf4 (@nil bool) false
 HalfAdder.half_adder_sum a a
 false

Problem: synth_24
 BV_full_adder_carry lf5 (@nil bool) false
 HalfAdder.half_adder_sum lf3 lf3
 HalfAdder.half_adder_sum a lf3
 HalfAdder.half_adder_sum lf3 a
 HalfAdder.half_adder_sum a a
 false

Problem: synth_3
 BV_full_adder_sum lf4 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf4 false)
 (fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf4 (BV_full_adder_carry lf4 (@nil bool) false)
 BV_full_adder_sum lf4 (@nil bool) (BV_full_adder_carry lf4 (@nil bool) false)
 BV_full_adder_sum lf4 (@cons bool false (@nil bool)) false
 (fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf4 false
 BV_full_adder_sum lf4 (@nil bool) false

Problem: synth_52

Problem: synth_32
 HalfAdder.half_adder_sum lf6 (HalfAdder.half_adder_sum a false)
 HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum lf6 false)
 HalfAdder.half_adder_sum lf6 a
 HalfAdder.half_adder_sum a lf6
 HalfAdder.half_adder_sum a false
 a

Problem: synth_48

Problem: synth_44

Problem: synth_60
 (fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (BV_full_adder_carry l (@nil bool) false)
 BV_full_adder_sum l (@nil bool) (BV_full_adder_carry l (@nil bool) false)
 (fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum a a)
 BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum a a)
 (fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false
 BV_full_adder_sum l (@nil bool) false

Problem: synth_36
 HalfAdder.half_adder_sum (HalfAdder.half_adder_sum a false) false
 HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum a a)
 HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum true a)
 HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum a true)
 HalfAdder.half_adder_sum a false
 a

Problem: synth_51

Problem: synth_35

Problem: synth_43
 BV.consbv a (BV_full_adder_sum l lf5 false)
 BV.consbv a (BV_full_adder_sum l (@nil bool) false)
 BV_full_adder_sum lf5 (@cons bool false l) a
 BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)
 BV_full_adder_sum lf5 (@cons bool a l) false
 BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false))

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 1688 seconds
Lemmas:
Lemma candidate_1: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false))   (@cons bool a l).
Lemma candidate_2: forall (a : bool) (l : list bool) (lf2 : BV), forall _ : @eq BV lf2 l, @eq BV (consbv (half_adder_sum a false) lf2) (@cons bool a l).
Lemma candidate_3: forall (a : bool) (l : list bool) (lf5 : list bool), forall _ : @eq BV (BV_full_adder_sum l lf5 false) l, @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))   (@cons bool a l).
Lemma candidate_4: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum (HalfAdder.half_adder_sum a false) false) l).
Lemma candidate_5: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum a a)) l).
Lemma candidate_6: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum true a)) l).
Lemma candidate_7: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum a true)) l).
Lemma candidate_8: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum a false) l).
Lemma candidate_9: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l) (@cons bool a l).
Lemma candidate_10: forall (lf4 : list bool), @eq BV   (BV_full_adder_sum lf4 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf4 false))   lf4.
Lemma candidate_11: forall (lf4 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf4 (BV_full_adder_carry lf4 (@nil bool) false))   lf4.
Lemma candidate_12: forall (lf4 : list bool), @eq BV   (BV_full_adder_sum lf4 (@nil bool) (BV_full_adder_carry lf4 (@nil bool) false))   lf4.
Lemma candidate_13: forall (lf4 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool false (@nil bool)) false) lf4.
Lemma candidate_14: forall (lf4 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf4 false)   lf4.
Lemma candidate_15: forall (lf4 : list bool), @eq BV (BV_full_adder_sum lf4 (@nil bool) false) lf4.
Lemma candidate_16: forall (lf4 : list bool), @eq BV   (BV_full_adder_sum lf4 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf4 false))   lf4.
Lemma candidate_17: forall (lf4 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf4 (BV_full_adder_carry lf4 (@nil bool) false))   lf4.
Lemma candidate_18: forall (lf4 : list bool), @eq BV   (BV_full_adder_sum lf4 (@nil bool) (BV_full_adder_carry lf4 (@nil bool) false))   lf4.
Lemma candidate_19: forall (lf4 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool false (@nil bool)) false) lf4.
Lemma candidate_20: forall (lf4 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf4 false)   lf4.
Lemma candidate_21: forall (lf4 : list bool), @eq BV (BV_full_adder_sum lf4 (@nil bool) false) lf4.
Lemma candidate_22: forall (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l lf5 lf6) (BV_full_adder_sum l lf5 lf6).
Lemma candidate_23: forall (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l lf5 lf6) (BV_full_adder_sum l (@nil bool) lf6).
Lemma candidate_24: forall (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l lf5 lf6) (BV_full_adder_sum lf5 l false).
Lemma candidate_25: forall (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l lf5 lf6)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false).
Lemma candidate_26: forall (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l lf5 lf6) (BV_full_adder_sum l lf5 false).
Lemma candidate_27: forall (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l lf5 lf6) (BV_full_adder_sum l (@nil bool) false).
Lemma candidate_28: forall (lf3 : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 lf6))   (BV_full_adder_sum lf5 (@cons bool false l) lf3).
Lemma candidate_29: forall (lf3 : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 lf6))   (BV.consbv lf3 ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_30: forall (lf3 : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 lf6))   (BV_full_adder_sum lf5 (@cons bool lf3 l) lf6).
Lemma candidate_31: forall (lf3 : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 lf6))   (BV.consbv (HalfAdder.half_adder_sum lf3 lf6) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf3 lf6))).
Lemma candidate_32: forall (lf3 : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 lf6))   (BV_full_adder_sum lf5 (@cons bool lf3 l) false).
Lemma candidate_33: forall (lf3 : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 lf6))   (BV.consbv (HalfAdder.half_adder_sum lf3 false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf3 false))).
Lemma candidate_34: forall (lf3 : bool) (l : list bool) (lf4 : list bool) (lf5 : list bool), @eq BV   (consbv lf3      (BV_full_adder_sum l lf5         ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf5 false)))   lf4.
Lemma candidate_35: forall (lf3 : bool) (l : list bool) (lf4 : list bool) (lf5 : list bool), @eq BV   (consbv lf3      (BV_full_adder_sum l lf5 (BV_full_adder_carry l (@nil bool) false))) lf4.
Lemma candidate_36: forall (lf3 : bool) (l : list bool) (lf4 : list bool) (lf5 : list bool), @eq BV   (consbv lf3      (BV_full_adder_sum l lf5 (BV_full_adder_carry lf4 (@nil bool) false)))   lf4.
Lemma candidate_37: forall (lf3 : bool) (l : list bool) (lf4 : list bool) (lf5 : list bool), @eq BV   (consbv lf3      (BV_full_adder_sum l lf5 (BV_full_adder_carry lf5 (@nil bool) false)))   lf4.
Lemma candidate_38: forall (lf3 : bool) (l : list bool) (lf4 : list bool) (lf5 : list bool), @eq BV   (consbv lf3 (BV_full_adder_sum l lf5 (HalfAdder.half_adder_sum lf3 lf3)))   lf4.
Lemma candidate_39: forall (lf3 : bool) (l : list bool) (lf4 : list bool) (lf5 : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 (false))) lf4.
Lemma candidate_40: forall (lf4 : list bool), @eq BV   (BV_full_adder_sum lf4 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf4 false))   lf4.
Lemma candidate_41: forall (lf4 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf4 (BV_full_adder_carry lf4 (@nil bool) false))   lf4.
Lemma candidate_42: forall (lf4 : list bool), @eq BV   (BV_full_adder_sum lf4 (@nil bool) (BV_full_adder_carry lf4 (@nil bool) false))   lf4.
Lemma candidate_43: forall (lf4 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool false (@nil bool)) false) lf4.
Lemma candidate_44: forall (lf4 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf4 false)   lf4.
Lemma candidate_45: forall (lf4 : list bool), @eq BV (BV_full_adder_sum lf4 (@nil bool) false) lf4.
Lemma candidate_46: @eq bool false (false).
Lemma candidate_47: forall (lf3 : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 false))   (BV.consbv lf3 (BV_full_adder_sum l lf5 false)).
Lemma candidate_48: forall (lf3 : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 false))   (BV.consbv lf3 (BV_full_adder_sum l (@nil bool) false)).
Lemma candidate_49: forall (lf3 : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 false))   (BV_full_adder_sum lf5 (@cons bool false l) lf3).
Lemma candidate_50: forall (lf3 : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 false))   (BV.consbv lf3 ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_51: forall (lf3 : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 false))   (BV_full_adder_sum lf5 (@cons bool lf3 l) false).
Lemma candidate_52: forall (lf3 : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 false))   (BV.consbv (HalfAdder.half_adder_sum lf3 false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf3 false))).
Lemma candidate_53: forall (l : list bool) (lf5 : list bool), @eq BV (BV_full_adder_sum l lf5 false)   (BV_full_adder_sum l lf5 (BV_full_adder_carry lf5 (@nil bool) false)).
Lemma candidate_54: forall (l : list bool) (lf5 : list bool), @eq BV (BV_full_adder_sum l lf5 false)   (BV_full_adder_sum l (@nil bool) (BV_full_adder_carry lf5 (@nil bool) false)).
Lemma candidate_55: forall (l : list bool) (lf5 : list bool), @eq BV (BV_full_adder_sum l lf5 false) (BV_full_adder_sum lf5 l false).
Lemma candidate_56: forall (l : list bool) (lf5 : list bool), @eq BV (BV_full_adder_sum l lf5 false)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false).
Lemma candidate_57: forall (l : list bool) (lf5 : list bool), @eq BV (BV_full_adder_sum l lf5 false) (BV_full_adder_sum l lf5 false).
Lemma candidate_58: forall (l : list bool) (lf5 : list bool), @eq BV (BV_full_adder_sum l lf5 false)   (BV_full_adder_sum l (@nil bool) false).
Lemma candidate_59: forall (lf4 : list bool), @eq BV   (BV_full_adder_sum lf4 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf4 false))   lf4.
Lemma candidate_60: forall (lf4 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf4 (BV_full_adder_carry lf4 (@nil bool) false))   lf4.
Lemma candidate_61: forall (lf4 : list bool), @eq BV   (BV_full_adder_sum lf4 (@nil bool) (BV_full_adder_carry lf4 (@nil bool) false))   lf4.
Lemma candidate_62: forall (lf4 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool false (@nil bool)) false) lf4.
Lemma candidate_63: forall (lf4 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf4 false)   lf4.
Lemma candidate_64: forall (lf4 : list bool), @eq BV (BV_full_adder_sum lf4 (@nil bool) false) lf4.
Lemma candidate_65: forall (lf3 : bool) (l : list bool) (lf4 : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6)) lf4.
Lemma candidate_66: forall (lf3 : bool) (l : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6))   (BV.consbv lf3 (BV_full_adder_sum l (@nil bool) lf6)).
Lemma candidate_67: forall (lf3 : bool) (l : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6))   (BV.consbv lf3 (BV_full_adder_sum l (@nil bool) false)).
Lemma candidate_68: forall (lf3 : bool) (l : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6))   (BV.consbv (HalfAdder.half_adder_sum lf6 lf3) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf6 lf3))).
Lemma candidate_69: forall (lf3 : bool) (l : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6))   (BV.consbv lf3 ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_70: forall (lf3 : bool) (l : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6))   (BV.consbv (HalfAdder.half_adder_sum lf3 lf6) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf3 lf6))).
Lemma candidate_71: forall (lf3 : bool) (l : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6))   (BV.consbv (HalfAdder.half_adder_sum lf3 false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf3 false))).
Lemma candidate_72: forall (l : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l (@nil bool) lf6)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum lf6 false)).
Lemma candidate_73: forall (l : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l (@nil bool) lf6)   (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum lf6 false)).
Lemma candidate_74: forall (l : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l (@nil bool) lf6)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l lf6).
Lemma candidate_75: forall (l : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l (@nil bool) lf6)   (BV_full_adder_sum l (@nil bool) lf6).
Lemma candidate_76: forall (l : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l (@nil bool) lf6)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false).
Lemma candidate_77: forall (l : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l (@nil bool) lf6)   (BV_full_adder_sum l (@nil bool) false).
Lemma candidate_78: @eq (list bool) (@nil bool) (@nil bool).
Lemma candidate_79: forall (lf3 : bool) (l : list bool) (lf4 : list bool), @eq BV   (consbv lf3      (BV_full_adder_sum l (@nil bool)         ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)))   lf4.
Lemma candidate_80: forall (lf3 : bool) (l : list bool) (lf4 : list bool), @eq BV   (consbv lf3      (BV_full_adder_sum l (@nil bool)         ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf4 false)))   lf4.
Lemma candidate_81: forall (lf3 : bool) (l : list bool) (lf4 : list bool), @eq BV   (consbv lf3      (BV_full_adder_sum l (@nil bool)         (BV_full_adder_carry l (@nil bool) false))) lf4.
Lemma candidate_82: forall (lf3 : bool) (l : list bool) (lf4 : list bool), @eq BV   (consbv lf3      (BV_full_adder_sum l (@nil bool)         (BV_full_adder_carry lf4 (@nil bool) false))) lf4.
Lemma candidate_83: forall (lf3 : bool) (l : list bool) (lf4 : list bool), @eq BV   (consbv lf3      (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum lf3 lf3)))   lf4.
Lemma candidate_84: forall (lf3 : bool) (l : list bool) (lf4 : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) (false))) lf4.
Lemma candidate_85: forall (lf3 : bool) (l : list bool) (lf4 : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false)) lf4.
Lemma candidate_86: forall (lf4 : list bool), @eq BV   (BV_full_adder_sum lf4 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf4 false))   lf4.
Lemma candidate_87: forall (lf4 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf4 (BV_full_adder_carry lf4 (@nil bool) false))   lf4.
Lemma candidate_88: forall (lf4 : list bool), @eq BV   (BV_full_adder_sum lf4 (@nil bool) (BV_full_adder_carry lf4 (@nil bool) false))   lf4.
Lemma candidate_89: forall (lf4 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool false (@nil bool)) false) lf4.
Lemma candidate_90: forall (lf4 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf4 false)   lf4.
Lemma candidate_91: forall (lf4 : list bool), @eq BV (BV_full_adder_sum lf4 (@nil bool) false) lf4.
Lemma candidate_92: @eq bool false (false).
Lemma candidate_93: forall (l : list bool), @eq BV (BV_full_adder_sum l (@nil bool) false)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)).
Lemma candidate_94: forall (l : list bool), @eq BV (BV_full_adder_sum l (@nil bool) false)   (BV_full_adder_sum l (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)).
Lemma candidate_95: forall (l : list bool), @eq BV (BV_full_adder_sum l (@nil bool) false)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (BV_full_adder_carry l (@nil bool) false)).
Lemma candidate_96: forall (l : list bool), @eq BV (BV_full_adder_sum l (@nil bool) false)   (BV_full_adder_sum l (@nil bool) (BV_full_adder_carry l (@nil bool) false)).
Lemma candidate_97: forall (l : list bool), @eq BV (BV_full_adder_sum l (@nil bool) false)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false).
Lemma candidate_98: forall (l : list bool), @eq BV (BV_full_adder_sum l (@nil bool) false)   (BV_full_adder_sum l (@nil bool) false).
Lemma candidate_99: @eq (list bool) (@nil bool) (@nil bool).
Lemma candidate_100: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (BV.consbv (HalfAdder.half_adder_sum lf3 false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_101: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (BV.consbv lf3 ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum lf3 lf3))).
Lemma candidate_102: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (BV.consbv lf3 (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum lf3 lf3))).
Lemma candidate_103: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (BV.consbv lf3 (BV_full_adder_sum l (@nil bool) false)).
Lemma candidate_104: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (BV.consbv lf3 ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_105: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (BV.consbv (HalfAdder.half_adder_sum lf3 false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf3 false))).
Lemma candidate_106: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_107: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_108: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_109: forall (a : bool) (l : list bool), @eq BV (BV.consbv a (BV_full_adder_sum l (@nil bool) false)) (@cons bool a l).
Lemma candidate_110: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_111: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false)))   (@cons bool a l).
Lemma candidate_112: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum (HalfAdder.half_adder_sum a false) false) l).
Lemma candidate_113: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum a a)) l).
Lemma candidate_114: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum true a)) l).
Lemma candidate_115: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum a true)) l).
Lemma candidate_116: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum a false) l).
Lemma candidate_117: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l) (@cons bool a l).
Lemma candidate_118: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV   (consbv lf3      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum lf3 a)))   (@cons bool a l).
Lemma candidate_119: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV   (consbv lf3      (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum lf3 a)))   (@cons bool a l).
Lemma candidate_120: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV   (consbv lf3      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_121: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV   (consbv lf3      (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_122: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV   (consbv lf3      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_123: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false)) (@cons bool a l).
Lemma candidate_124: forall (lf3 : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 lf6))   (@cons bool ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf5 lf3) l).
Lemma candidate_125: forall (lf3 : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 lf6))   (@cons bool (BV_full_adder_carry lf5 (@nil bool) lf3) l).
Lemma candidate_126: forall (lf3 : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 lf6))   (@cons bool (HalfAdder.half_adder_sum lf6 lf3) l).
Lemma candidate_127: forall (lf3 : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 lf6))   (@cons bool (HalfAdder.half_adder_sum lf3 lf6) l).
Lemma candidate_128: forall (lf3 : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 lf6))   (@cons bool (HalfAdder.half_adder_sum lf3 false) l).
Lemma candidate_129: forall (lf3 : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 lf6)) (@cons bool lf3 l).
Lemma candidate_130: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_131: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_132: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_133: forall (a : bool) (l : list bool), @eq BV (BV.consbv a (BV_full_adder_sum l (@nil bool) false)) (@cons bool a l).
Lemma candidate_134: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_135: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false)))   (@cons bool a l).
Lemma candidate_136: forall (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l lf5 lf6) (BV_full_adder_sum l lf5 lf6).
Lemma candidate_137: forall (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l lf5 lf6) (BV_full_adder_sum l (@nil bool) lf6).
Lemma candidate_138: forall (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l lf5 lf6) (BV_full_adder_sum lf5 l false).
Lemma candidate_139: forall (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l lf5 lf6)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false).
Lemma candidate_140: forall (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l lf5 lf6) (BV_full_adder_sum l lf5 false).
Lemma candidate_141: forall (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l lf5 lf6) (BV_full_adder_sum l (@nil bool) false).
Lemma candidate_142: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum (HalfAdder.half_adder_sum a false) false) l).
Lemma candidate_143: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum a a)) l).
Lemma candidate_144: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum true a)) l).
Lemma candidate_145: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum a true)) l).
Lemma candidate_146: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum a false) l).
Lemma candidate_147: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l) (@cons bool a l).
Lemma candidate_148: forall (lf3 : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 lf6))   (BV_full_adder_sum lf5 (@cons bool false l) lf3).
Lemma candidate_149: forall (lf3 : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 lf6))   (BV.consbv lf3 ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_150: forall (lf3 : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 lf6))   (BV_full_adder_sum lf5 (@cons bool lf3 l) lf6).
Lemma candidate_151: forall (lf3 : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 lf6))   (BV.consbv (HalfAdder.half_adder_sum lf3 lf6) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf3 lf6))).
Lemma candidate_152: forall (lf3 : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 lf6))   (BV_full_adder_sum lf5 (@cons bool lf3 l) false).
Lemma candidate_153: forall (lf3 : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 lf6))   (BV.consbv (HalfAdder.half_adder_sum lf3 false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf3 false))).
Lemma candidate_154: forall (lf3 : bool) (a : bool) (l : list bool) (lf5 : list bool), @eq BV   (consbv lf3      (BV_full_adder_sum l lf5 (BV_full_adder_carry lf5 (@nil bool) false)))   (@cons bool a l).
Lemma candidate_155: forall (lf3 : bool) (a : bool) (l : list bool) (lf5 : list bool), @eq BV   (consbv lf3 (BV_full_adder_sum l lf5 (HalfAdder.half_adder_sum lf3 lf3)))   (@cons bool a l).
Lemma candidate_156: forall (lf3 : bool) (a : bool) (l : list bool) (lf5 : list bool), @eq BV   (consbv lf3 (BV_full_adder_sum l lf5 (HalfAdder.half_adder_sum a lf3)))   (@cons bool a l).
Lemma candidate_157: forall (lf3 : bool) (a : bool) (l : list bool) (lf5 : list bool), @eq BV   (consbv lf3 (BV_full_adder_sum l lf5 (HalfAdder.half_adder_sum lf3 a)))   (@cons bool a l).
Lemma candidate_158: forall (lf3 : bool) (a : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_159: forall (lf3 : bool) (a : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 (false))) (@cons bool a l).
Lemma candidate_160: forall (lf3 : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 false))   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum lf3 true)) l).
Lemma candidate_161: forall (lf3 : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 false))   (@cons bool (BV_full_adder_carry lf5 lf5 lf3) l).
Lemma candidate_162: forall (lf3 : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 false))   (@cons bool ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf5 lf3) l).
Lemma candidate_163: forall (lf3 : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 false))   (@cons bool (BV_full_adder_carry lf5 (@nil bool) lf3) l).
Lemma candidate_164: forall (lf3 : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 false))   (@cons bool (HalfAdder.half_adder_sum lf3 false) l).
Lemma candidate_165: forall (lf3 : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 false)) (@cons bool lf3 l).
Lemma candidate_166: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_167: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_168: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_169: forall (a : bool) (l : list bool), @eq BV (BV.consbv a (BV_full_adder_sum l (@nil bool) false)) (@cons bool a l).
Lemma candidate_170: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_171: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false)))   (@cons bool a l).
Lemma candidate_172: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV   (consbv lf3      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum lf3 a)))   (@cons bool a l).
Lemma candidate_173: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV   (consbv lf3      (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum lf3 a)))   (@cons bool a l).
Lemma candidate_174: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV   (consbv lf3      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_175: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV   (consbv lf3      (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_176: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV   (consbv lf3      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_177: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false)) (@cons bool a l).
Lemma candidate_178: @eq bool false (false).
Lemma candidate_179: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum (HalfAdder.half_adder_sum a false) false) l).
Lemma candidate_180: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum a a)) l).
Lemma candidate_181: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum true a)) l).
Lemma candidate_182: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum a true)) l).
Lemma candidate_183: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum a false) l).
Lemma candidate_184: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l) (@cons bool a l).
Lemma candidate_185: forall (lf3 : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 false))   (BV.consbv lf3 (BV_full_adder_sum l lf5 false)).
Lemma candidate_186: forall (lf3 : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 false))   (BV.consbv lf3 (BV_full_adder_sum l (@nil bool) false)).
Lemma candidate_187: forall (lf3 : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 false))   (BV_full_adder_sum lf5 (@cons bool false l) lf3).
Lemma candidate_188: forall (lf3 : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 false))   (BV.consbv lf3 ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_189: forall (lf3 : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 false))   (BV_full_adder_sum lf5 (@cons bool lf3 l) false).
Lemma candidate_190: forall (lf3 : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l lf5 false))   (BV.consbv (HalfAdder.half_adder_sum lf3 false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf3 false))).
Lemma candidate_191: forall (l : list bool) (lf5 : list bool), @eq BV (BV_full_adder_sum l lf5 false)   (BV_full_adder_sum l lf5 (BV_full_adder_carry lf5 (@nil bool) false)).
Lemma candidate_192: forall (l : list bool) (lf5 : list bool), @eq BV (BV_full_adder_sum l lf5 false)   (BV_full_adder_sum l (@nil bool) (BV_full_adder_carry lf5 (@nil bool) false)).
Lemma candidate_193: forall (l : list bool) (lf5 : list bool), @eq BV (BV_full_adder_sum l lf5 false) (BV_full_adder_sum lf5 l false).
Lemma candidate_194: forall (l : list bool) (lf5 : list bool), @eq BV (BV_full_adder_sum l lf5 false)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false).
Lemma candidate_195: forall (l : list bool) (lf5 : list bool), @eq BV (BV_full_adder_sum l lf5 false) (BV_full_adder_sum l lf5 false).
Lemma candidate_196: forall (l : list bool) (lf5 : list bool), @eq BV (BV_full_adder_sum l lf5 false)   (BV_full_adder_sum l (@nil bool) false).
Lemma candidate_197: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_198: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_199: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_200: forall (a : bool) (l : list bool), @eq BV (BV.consbv a (BV_full_adder_sum l (@nil bool) false)) (@cons bool a l).
Lemma candidate_201: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_202: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false)))   (@cons bool a l).
Lemma candidate_203: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV   (consbv lf3      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum lf3 a)))   (@cons bool a l).
Lemma candidate_204: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV   (consbv lf3      (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum lf3 a)))   (@cons bool a l).
Lemma candidate_205: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV   (consbv lf3      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_206: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV   (consbv lf3      (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_207: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV   (consbv lf3      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_208: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false)) (@cons bool a l).
Lemma candidate_209: forall (lf3 : bool) (l : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6))   (@cons bool (HalfAdder.half_adder_sum lf6 (HalfAdder.half_adder_sum lf3 false)) l).
Lemma candidate_210: forall (lf3 : bool) (l : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6))   (@cons bool (HalfAdder.half_adder_sum lf3 (HalfAdder.half_adder_sum lf6 false)) l).
Lemma candidate_211: forall (lf3 : bool) (l : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6))   (@cons bool (HalfAdder.half_adder_sum lf6 lf3) l).
Lemma candidate_212: forall (lf3 : bool) (l : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6))   (@cons bool (HalfAdder.half_adder_sum lf3 lf6) l).
Lemma candidate_213: forall (lf3 : bool) (l : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6))   (@cons bool (HalfAdder.half_adder_sum lf3 false) l).
Lemma candidate_214: forall (lf3 : bool) (l : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6)) (@cons bool lf3 l).
Lemma candidate_215: forall (lf3 : bool) (a : bool) (l : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6)) (@cons bool a l).
Lemma candidate_216: forall (lf3 : bool) (l : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6))   (BV.consbv lf3 (BV_full_adder_sum l (@nil bool) lf6)).
Lemma candidate_217: forall (lf3 : bool) (l : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6))   (BV.consbv lf3 (BV_full_adder_sum l (@nil bool) false)).
Lemma candidate_218: forall (lf3 : bool) (l : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6))   (BV.consbv (HalfAdder.half_adder_sum lf6 lf3) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf6 lf3))).
Lemma candidate_219: forall (lf3 : bool) (l : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6))   (BV.consbv lf3 ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_220: forall (lf3 : bool) (l : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6))   (BV.consbv (HalfAdder.half_adder_sum lf3 lf6) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf3 lf6))).
Lemma candidate_221: forall (lf3 : bool) (l : list bool) (lf6 : bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) lf6))   (BV.consbv (HalfAdder.half_adder_sum lf3 false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf3 false))).
Lemma candidate_222: forall (l : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l (@nil bool) lf6)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum lf6 false)).
Lemma candidate_223: forall (l : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l (@nil bool) lf6)   (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum lf6 false)).
Lemma candidate_224: forall (l : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l (@nil bool) lf6)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l lf6).
Lemma candidate_225: forall (l : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l (@nil bool) lf6)   (BV_full_adder_sum l (@nil bool) lf6).
Lemma candidate_226: forall (l : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l (@nil bool) lf6)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false).
Lemma candidate_227: forall (l : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l (@nil bool) lf6)   (BV_full_adder_sum l (@nil bool) false).
Lemma candidate_228: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum (HalfAdder.half_adder_sum a false) false) l).
Lemma candidate_229: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum a a)) l).
Lemma candidate_230: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum true a)) l).
Lemma candidate_231: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum a true)) l).
Lemma candidate_232: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum a false) l).
Lemma candidate_233: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l) (@cons bool a l).
Lemma candidate_234: @eq (list bool) (@nil bool) (@nil bool).
Lemma candidate_235: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV   (consbv lf3      (BV_full_adder_sum l (@nil bool)         (BV_full_adder_carry l (@nil bool) false)))    (@cons bool a l).
Lemma candidate_236: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV   (consbv lf3      (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum lf3 lf3)))   (@cons bool a l).
Lemma candidate_237: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV   (consbv lf3      (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum a lf3)))   (@cons bool a l).
Lemma candidate_238: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV   (consbv lf3      (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum lf3 a)))   (@cons bool a l).
Lemma candidate_239: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV   (consbv lf3      (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_240: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) (false)))   (@cons bool a l).
Lemma candidate_241: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV   (consbv lf3      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum lf3 a)))   (@cons bool a l).
Lemma candidate_242: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV   (consbv lf3      (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum lf3 a)))   (@cons bool a l).
Lemma candidate_243: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV   (consbv lf3      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_244: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV   (consbv lf3      (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_245: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV   (consbv lf3      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_246: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false)) (@cons bool a l).
Lemma candidate_247: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (@cons bool (HalfAdder.half_adder_sum (HalfAdder.half_adder_sum lf3 false) false) l).
Lemma candidate_248: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (@cons bool (HalfAdder.half_adder_sum lf3 (HalfAdder.half_adder_sum lf3 lf3)) l).
Lemma candidate_249: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum true lf3)) l).
Lemma candidate_250: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum lf3 true)) l).
Lemma candidate_251: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (@cons bool (HalfAdder.half_adder_sum lf3 false) l).
Lemma candidate_252: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (@cons bool lf3 l).
Lemma candidate_253: forall (lf3 : bool) (a : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false)) (@cons bool a l).
Lemma candidate_254: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_255: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_256: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_257: forall (a : bool) (l : list bool), @eq BV (BV.consbv a (BV_full_adder_sum l (@nil bool) false)) (@cons bool a l).
Lemma candidate_258: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_259: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false)))   (@cons bool a l).
Lemma candidate_260: @eq bool false (false).
Lemma candidate_261: forall (l : list bool), @eq BV (BV_full_adder_sum l (@nil bool) false)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)).
Lemma candidate_262: forall (l : list bool), @eq BV (BV_full_adder_sum l (@nil bool) false)   (BV_full_adder_sum l (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)).
Lemma candidate_263: forall (l : list bool), @eq BV (BV_full_adder_sum l (@nil bool) false)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (BV_full_adder_carry l (@nil bool) false)).
Lemma candidate_264: forall (l : list bool), @eq BV (BV_full_adder_sum l (@nil bool) false)   (BV_full_adder_sum l (@nil bool) (BV_full_adder_carry l (@nil bool) false)).
Lemma candidate_265: forall (l : list bool), @eq BV (BV_full_adder_sum l (@nil bool) false)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false).
Lemma candidate_266: forall (l : list bool), @eq BV (BV_full_adder_sum l (@nil bool) false)   (BV_full_adder_sum l (@nil bool) false).
Lemma candidate_267: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum (HalfAdder.half_adder_sum a false) false) l).
Lemma candidate_268: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum a a)) l).
Lemma candidate_269: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum true a)) l).
Lemma candidate_270: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum a true)) l).
Lemma candidate_271: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum a false) l).
Lemma candidate_272: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l) (@cons bool a l).
Lemma candidate_273: @eq (list bool) (@nil bool) (@nil bool).
Lemma candidate_274: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (BV.consbv (HalfAdder.half_adder_sum lf3 false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_275: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (BV.consbv lf3 ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum lf3 lf3))).
Lemma candidate_276: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (BV.consbv lf3 (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum lf3 lf3))).
Lemma candidate_277: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (BV.consbv lf3 (BV_full_adder_sum l (@nil bool) false)).
Lemma candidate_278: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (BV.consbv lf3 ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_279: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (BV.consbv (HalfAdder.half_adder_sum lf3 false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf3 false))).
Lemma candidate_280: forall (lf4 : list bool), @eq BV   (BV_full_adder_sum lf4 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf4 false))   lf4.
Lemma candidate_281: forall (lf4 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf4 (BV_full_adder_carry lf4 (@nil bool) false))   lf4.
Lemma candidate_282: forall (lf4 : list bool), @eq BV   (BV_full_adder_sum lf4 (@nil bool) (BV_full_adder_carry lf4 (@nil bool) false))   lf4.
Lemma candidate_283: forall (lf4 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool false (@nil bool)) false) lf4.
Lemma candidate_284: forall (lf4 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf4 false)   lf4.
Lemma candidate_285: forall (lf4 : list bool), @eq BV (BV_full_adder_sum lf4 (@nil bool) false) lf4.
Lemma candidate_286: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6)   (HalfAdder.half_adder_sum lf6 (HalfAdder.half_adder_sum a false)).
Lemma candidate_287: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6)   (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum lf6 false)).
Lemma candidate_288: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6) (HalfAdder.half_adder_sum lf6 a).
Lemma candidate_289: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6) (HalfAdder.half_adder_sum a lf6).
Lemma candidate_290: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6) (HalfAdder.half_adder_sum a false).
Lemma candidate_291: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6) (a).
Lemma candidate_292: forall (lf4 : list bool), @eq BV   (BV_full_adder_sum lf4 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf4 false))   lf4.
Lemma candidate_293: forall (lf4 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf4 (BV_full_adder_carry lf4 (@nil bool) false))   lf4.
Lemma candidate_294: forall (lf4 : list bool), @eq BV   (BV_full_adder_sum lf4 (@nil bool) (BV_full_adder_carry lf4 (@nil bool) false))   lf4.
Lemma candidate_295: forall (lf4 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool false (@nil bool)) false) lf4.
Lemma candidate_296: forall (lf4 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf4 false)   lf4.
Lemma candidate_297: forall (lf4 : list bool), @eq BV (BV_full_adder_sum lf4 (@nil bool) false) lf4.
Lemma candidate_298: @eq bool false (false).
Lemma candidate_299: forall (a : bool), @eq bool (half_adder_sum a false)   (HalfAdder.half_adder_sum (HalfAdder.half_adder_sum a false) false).
Lemma candidate_300: forall (a : bool), @eq bool (half_adder_sum a false)   (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum a a)).
Lemma candidate_301: forall (a : bool), @eq bool (half_adder_sum a false)   (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum true a)).
Lemma candidate_302: forall (a : bool), @eq bool (half_adder_sum a false)   (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum a true)).
Lemma candidate_303: forall (a : bool), @eq bool (half_adder_sum a false) (HalfAdder.half_adder_sum a false).
Lemma candidate_304: forall (a : bool), @eq bool (half_adder_sum a false) (a).
Lemma candidate_305: forall (lf4 : list bool), @eq BV   (BV_full_adder_sum lf4 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf4 false))   lf4.
Lemma candidate_306: forall (lf4 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf4 (BV_full_adder_carry lf4 (@nil bool) false))   lf4.
Lemma candidate_307: forall (lf4 : list bool), @eq BV   (BV_full_adder_sum lf4 (@nil bool) (BV_full_adder_carry lf4 (@nil bool) false))   lf4.
Lemma candidate_308: forall (lf4 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool false (@nil bool)) false) lf4.
Lemma candidate_309: forall (lf4 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf4 false)   lf4.
Lemma candidate_310: forall (lf4 : list bool), @eq BV (BV_full_adder_sum lf4 (@nil bool) false) lf4.
Lemma candidate_311: forall (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l lf5 lf6) (BV_full_adder_sum l lf5 lf6).
Lemma candidate_312: forall (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l lf5 lf6) (BV_full_adder_sum l (@nil bool) lf6).
Lemma candidate_313: forall (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l lf5 lf6) (BV_full_adder_sum lf5 l false).
Lemma candidate_314: forall (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l lf5 lf6)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false).
Lemma candidate_315: forall (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l lf5 lf6) (BV_full_adder_sum l lf5 false).
Lemma candidate_316: forall (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l lf5 lf6) (BV_full_adder_sum l (@nil bool) false).
Lemma candidate_317: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6)   (HalfAdder.half_adder_sum lf6 (HalfAdder.half_adder_sum a false)).
Lemma candidate_318: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6)   (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum lf6 false)).
Lemma candidate_319: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6) (HalfAdder.half_adder_sum lf6 a).
Lemma candidate_320: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6) (HalfAdder.half_adder_sum a lf6).
Lemma candidate_321: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6) (HalfAdder.half_adder_sum a false).
Lemma candidate_322: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6) (a).
Lemma candidate_323: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (BV_full_adder_sum lf5 (@cons bool false l) a).
Lemma candidate_324: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_325: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (BV_full_adder_sum lf5 (@cons bool a l) lf6).
Lemma candidate_326: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (BV.consbv (HalfAdder.half_adder_sum a lf6) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a lf6))).
Lemma candidate_327: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (BV_full_adder_sum lf5 (@cons bool a l) false).
Lemma candidate_328: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false))).
Lemma candidate_329: forall (lf4 : list bool), @eq BV   (BV_full_adder_sum lf4 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf4 false))   lf4.
Lemma candidate_330: forall (lf4 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf4 (BV_full_adder_carry lf4 (@nil bool) false))   lf4.
Lemma candidate_331: forall (lf4 : list bool), @eq BV   (BV_full_adder_sum lf4 (@nil bool) (BV_full_adder_carry lf4 (@nil bool) false))   lf4.
Lemma candidate_332: forall (lf4 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool false (@nil bool)) false) lf4.
Lemma candidate_333: forall (lf4 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf4 false)   lf4.
Lemma candidate_334: forall (lf4 : list bool), @eq BV (BV_full_adder_sum lf4 (@nil bool) false) lf4.
Lemma candidate_335: forall (a : bool) (l : list bool) (lf4 : list bool) (lf5 : list bool), @eq BV   (consbv      (half_adder_sum a         ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf5 false))      (BV_full_adder_sum l lf5         ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf5 false)))   lf4.
Lemma candidate_336: forall (a : bool) (l : list bool) (lf4 : list bool) (lf5 : list bool), @eq BV   (consbv (half_adder_sum a (BV_full_adder_carry l (@nil bool) false))      (BV_full_adder_sum l lf5 (BV_full_adder_carry l (@nil bool) false))) lf4.
Lemma candidate_337: forall (a : bool) (l : list bool) (lf4 : list bool) (lf5 : list bool), @eq BV   (consbv (half_adder_sum a (BV_full_adder_carry lf4 (@nil bool) false))      (BV_full_adder_sum l lf5 (BV_full_adder_carry lf4 (@nil bool) false)))   lf4.
Lemma candidate_338: forall (a : bool) (l : list bool) (lf4 : list bool) (lf5 : list bool), @eq BV   (consbv (half_adder_sum a (BV_full_adder_carry lf5 (@nil bool) false))      (BV_full_adder_sum l lf5 (BV_full_adder_carry lf5 (@nil bool) false)))   lf4.
Lemma candidate_339: forall (a : bool) (l : list bool) (lf4 : list bool) (lf5 : list bool), @eq BV   (consbv (half_adder_sum a (HalfAdder.half_adder_sum a a))      (BV_full_adder_sum l lf5 (HalfAdder.half_adder_sum a a))) lf4.
Lemma candidate_340: forall (a : bool) (l : list bool) (lf4 : list bool) (lf5 : list bool), @eq BV (consbv (half_adder_sum a (false)) (BV_full_adder_sum l lf5 (false)))   lf4.
Lemma candidate_341: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))   (BV.consbv a (BV_full_adder_sum l lf5 false)).
Lemma candidate_342: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))   (BV.consbv a (BV_full_adder_sum l (@nil bool) false)).
Lemma candidate_343: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))   (BV_full_adder_sum lf5 (@cons bool false l) a).
Lemma candidate_344: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_345: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))   (BV_full_adder_sum lf5 (@cons bool a l) false).
Lemma candidate_346: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false))).
Lemma candidate_347: @eq bool false (false).
Lemma candidate_348: forall (a : bool), @eq bool (half_adder_sum a false)   (HalfAdder.half_adder_sum (HalfAdder.half_adder_sum a false) false).
Lemma candidate_349: forall (a : bool), @eq bool (half_adder_sum a false)   (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum a a)).
Lemma candidate_350: forall (a : bool), @eq bool (half_adder_sum a false)   (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum true a)).
Lemma candidate_351: forall (a : bool), @eq bool (half_adder_sum a false)   (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum a true)).
Lemma candidate_352: forall (a : bool), @eq bool (half_adder_sum a false) (HalfAdder.half_adder_sum a false).
Lemma candidate_353: forall (a : bool), @eq bool (half_adder_sum a false) (a).
Lemma candidate_354: forall (l : list bool) (lf5 : list bool), @eq BV (BV_full_adder_sum l lf5 false)   (BV_full_adder_sum l lf5 (BV_full_adder_carry lf5 (@nil bool) false)).
Lemma candidate_355: forall (l : list bool) (lf5 : list bool), @eq BV (BV_full_adder_sum l lf5 false)   (BV_full_adder_sum l (@nil bool) (BV_full_adder_carry lf5 (@nil bool) false)).
Lemma candidate_356: forall (l : list bool) (lf5 : list bool), @eq BV (BV_full_adder_sum l lf5 false) (BV_full_adder_sum lf5 l false).
Lemma candidate_357: forall (l : list bool) (lf5 : list bool), @eq BV (BV_full_adder_sum l lf5 false)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false).
Lemma candidate_358: forall (l : list bool) (lf5 : list bool), @eq BV (BV_full_adder_sum l lf5 false) (BV_full_adder_sum l lf5 false).
Lemma candidate_359: forall (l : list bool) (lf5 : list bool), @eq BV (BV_full_adder_sum l lf5 false)   (BV_full_adder_sum l (@nil bool) false).
Lemma candidate_360: forall (lf4 : list bool), @eq BV   (BV_full_adder_sum lf4 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf4 false))   lf4.
Lemma candidate_361: forall (lf4 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf4 (BV_full_adder_carry lf4 (@nil bool) false))   lf4.
Lemma candidate_362: forall (lf4 : list bool), @eq BV   (BV_full_adder_sum lf4 (@nil bool) (BV_full_adder_carry lf4 (@nil bool) false))   lf4.
Lemma candidate_363: forall (lf4 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool false (@nil bool)) false) lf4.
Lemma candidate_364: forall (lf4 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf4 false)   lf4.
Lemma candidate_365: forall (lf4 : list bool), @eq BV (BV_full_adder_sum lf4 (@nil bool) false) lf4.
Lemma candidate_366: forall (a : bool) (l : list bool) (lf4 : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))   lf4.
Lemma candidate_367: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))   (BV.consbv a (BV_full_adder_sum l (@nil bool) lf6)).
Lemma candidate_368: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))   (BV.consbv a (BV_full_adder_sum l (@nil bool) false)).
Lemma candidate_369: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))   (BV.consbv (HalfAdder.half_adder_sum lf6 a) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf6 a))).
Lemma candidate_370: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_371: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))   (BV.consbv (HalfAdder.half_adder_sum a lf6) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a lf6))).
Lemma candidate_372: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false))).
Lemma candidate_373: forall (l : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l (@nil bool) lf6)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum lf6 false)).
Lemma candidate_374: forall (l : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l (@nil bool) lf6)   (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum lf6 false)).
Lemma candidate_375: forall (l : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l (@nil bool) lf6)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l lf6).
Lemma candidate_376: forall (l : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l (@nil bool) lf6)   (BV_full_adder_sum l (@nil bool) lf6).
Lemma candidate_377: forall (l : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l (@nil bool) lf6)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false).
Lemma candidate_378: forall (l : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l (@nil bool) lf6)   (BV_full_adder_sum l (@nil bool) false).
Lemma candidate_379: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6)   (HalfAdder.half_adder_sum lf6 (HalfAdder.half_adder_sum a false)).
Lemma candidate_380: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6)   (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum lf6 false)).
Lemma candidate_381: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6) (HalfAdder.half_adder_sum lf6 a).
Lemma candidate_382: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6) (HalfAdder.half_adder_sum a lf6).
Lemma candidate_383: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6) (HalfAdder.half_adder_sum a false).
Lemma candidate_384: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6) (a).
Lemma candidate_385: @eq (list bool) (@nil bool) (@nil bool).
Lemma candidate_386: forall (lf4 : list bool), @eq BV   (BV_full_adder_sum lf4 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf4 false))   lf4.
Lemma candidate_387: forall (lf4 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf4 (BV_full_adder_carry lf4 (@nil bool) false))   lf4.
Lemma candidate_388: forall (lf4 : list bool), @eq BV   (BV_full_adder_sum lf4 (@nil bool) (BV_full_adder_carry lf4 (@nil bool) false))   lf4.
Lemma candidate_389: forall (lf4 : list bool), @eq BV (BV_full_adder_sum lf4 (@cons bool false (@nil bool)) false) lf4.
Lemma candidate_390: forall (lf4 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf4 false)   lf4.
Lemma candidate_391: forall (lf4 : list bool), @eq BV (BV_full_adder_sum lf4 (@nil bool) false) lf4.
Lemma candidate_392: forall (a : bool) (l : list bool) (lf4 : list bool), @eq BV   (consbv      (half_adder_sum a         ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))      (BV_full_adder_sum l (@nil bool)         ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)))   lf4.
Lemma candidate_393: forall (a : bool) (l : list bool) (lf4 : list bool), @eq BV   (consbv      (half_adder_sum a         ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf4 false))      (BV_full_adder_sum l (@nil bool)         ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf4 false)))   lf4.
Lemma candidate_394: forall (a : bool) (l : list bool) (lf4 : list bool), @eq BV   (consbv (half_adder_sum a (BV_full_adder_carry l (@nil bool) false))      (BV_full_adder_sum l (@nil bool)         (BV_full_adder_carry l (@nil bool) false))) lf4.
Lemma candidate_395: forall (a : bool) (l : list bool) (lf4 : list bool), @eq BV   (consbv (half_adder_sum a (BV_full_adder_carry lf4 (@nil bool) false))      (BV_full_adder_sum l (@nil bool)         (BV_full_adder_carry lf4 (@nil bool) false))) lf4.
Lemma candidate_396: forall (a : bool) (l : list bool) (lf4 : list bool), @eq BV   (consbv (half_adder_sum a (HalfAdder.half_adder_sum a a))      (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum a a))) lf4.
Lemma candidate_397: forall (a : bool) (l : list bool) (lf4 : list bool), @eq BV   (consbv (half_adder_sum a (false))      (BV_full_adder_sum l (@nil bool) (false))) lf4.
Lemma candidate_398: forall (a : bool) (l : list bool) (lf4 : list bool), @eq BV   (consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false))   lf4.
Lemma candidate_399: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false))   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_400: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false))   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum a a))).
Lemma candidate_401: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false))   (BV.consbv a (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum a a))).
Lemma candidate_402: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false))   (BV.consbv a (BV_full_adder_sum l (@nil bool) false)).
Lemma candidate_403: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false))   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_404: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false))   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false))).
Lemma candidate_405: @eq bool false (false).
Lemma candidate_406: forall (a : bool), @eq bool (half_adder_sum a false)   (HalfAdder.half_adder_sum (HalfAdder.half_adder_sum a false) false).
Lemma candidate_407: forall (a : bool), @eq bool (half_adder_sum a false)   (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum a a)).
Lemma candidate_408: forall (a : bool), @eq bool (half_adder_sum a false)   (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum true a)).
Lemma candidate_409: forall (a : bool), @eq bool (half_adder_sum a false)   (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum a true)).
Lemma candidate_410: forall (a : bool), @eq bool (half_adder_sum a false) (HalfAdder.half_adder_sum a false).
Lemma candidate_411: forall (a : bool), @eq bool (half_adder_sum a false) (a).
Lemma candidate_412: forall (l : list bool), @eq BV (BV_full_adder_sum l (@nil bool) false)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)).
Lemma candidate_413: forall (l : list bool), @eq BV (BV_full_adder_sum l (@nil bool) false)   (BV_full_adder_sum l (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)).
Lemma candidate_414: forall (l : list bool), @eq BV (BV_full_adder_sum l (@nil bool) false)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (BV_full_adder_carry l (@nil bool) false)).
Lemma candidate_415: forall (l : list bool), @eq BV (BV_full_adder_sum l (@nil bool) false)   (BV_full_adder_sum l (@nil bool) (BV_full_adder_carry l (@nil bool) false)).
Lemma candidate_416: forall (l : list bool), @eq BV (BV_full_adder_sum l (@nil bool) false)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false).
Lemma candidate_417: forall (l : list bool), @eq BV (BV_full_adder_sum l (@nil bool) false)   (BV_full_adder_sum l (@nil bool) false).
Lemma candidate_418: @eq (list bool) (@nil bool) (@nil bool).
Lemma candidate_419: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_420: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_421: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_422: forall (a : bool) (l : list bool), @eq BV (BV.consbv a (BV_full_adder_sum l (@nil bool) false)) (@cons bool a l).
Lemma candidate_423: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_424: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false)))   (@cons bool a l).
Lemma candidate_425: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6)   (HalfAdder.half_adder_sum lf6 (HalfAdder.half_adder_sum a false)).
Lemma candidate_426: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6)   (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum lf6 false)).
Lemma candidate_427: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6) (HalfAdder.half_adder_sum lf6 a).
Lemma candidate_428: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6) (HalfAdder.half_adder_sum a lf6).
Lemma candidate_429: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6) (HalfAdder.half_adder_sum a false).
Lemma candidate_430: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6) (a).
Lemma candidate_431: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum (HalfAdder.half_adder_sum a false) false) l).
Lemma candidate_432: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum a a)) l).
Lemma candidate_433: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum true a)) l).
Lemma candidate_434: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum a true)) l).
Lemma candidate_435: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum a false) l).
Lemma candidate_436: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l) (@cons bool a l).
Lemma candidate_437: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_438: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_439: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_440: forall (a : bool) (l : list bool), @eq BV (BV.consbv a (BV_full_adder_sum l (@nil bool) false)) (@cons bool a l).
Lemma candidate_441: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_442: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false)))   (@cons bool a l).
Lemma candidate_443: @eq bool false (false).
Lemma candidate_444: forall (a : bool), @eq bool (half_adder_sum a false)   (HalfAdder.half_adder_sum (HalfAdder.half_adder_sum a false) false).
Lemma candidate_445: forall (a : bool), @eq bool (half_adder_sum a false)   (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum a a)).
Lemma candidate_446: forall (a : bool), @eq bool (half_adder_sum a false)   (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum true a)).
Lemma candidate_447: forall (a : bool), @eq bool (half_adder_sum a false)   (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum a true)).
Lemma candidate_448: forall (a : bool), @eq bool (half_adder_sum a false) (HalfAdder.half_adder_sum a false).
Lemma candidate_449: forall (a : bool), @eq bool (half_adder_sum a false) (a).
Lemma candidate_450: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum (HalfAdder.half_adder_sum a false) false) l).
Lemma candidate_451: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum a a)) l).
Lemma candidate_452: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum true a)) l).
Lemma candidate_453: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum a true)) l).
Lemma candidate_454: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum a false) l).
Lemma candidate_455: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l) (@cons bool a l).
Lemma candidate_456: forall (a : bool) (l : list bool) (lf6 : bool), forall   _ : @eq BV         ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum lf6 false))         l, @eq BV   (consbv (half_adder_sum a lf6)      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum lf6 false)))   (@cons bool a l).
Lemma candidate_457: forall (a : bool) (l : list bool) (lf6 : bool), forall   _ : @eq BV         (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum lf6 false))         l, @eq BV   (consbv (half_adder_sum a lf6)      (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum lf6 false)))   (@cons bool a l).
Lemma candidate_458: forall (a : bool) (l : list bool) (lf6 : bool), forall   _ : @eq BV         ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l lf6)         l, @eq BV   (consbv (half_adder_sum a lf6)      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l lf6))   (@cons bool a l).
Lemma candidate_459: forall (a : bool) (l : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l (@nil bool) lf6) l, @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))   (@cons bool a l).
Lemma candidate_460: forall (a : bool) (l : list bool) (lf6 : bool), forall   _ : @eq BV         ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)         l, @eq BV   (consbv (half_adder_sum a lf6)      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_461: forall (a : bool) (l : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l (@nil bool) false) l, @eq BV   (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) false))   (@cons bool a l).
Lemma candidate_462: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l, @eq BV   (consbv      ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf5 a)      (BV_full_adder_sum l lf5 lf6)) (@cons bool a l).
Lemma candidate_463: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l, @eq BV   (consbv (BV_full_adder_carry lf5 (@nil bool) a)      (BV_full_adder_sum l lf5 lf6)) (@cons bool a l).
Lemma candidate_464: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l, @eq BV   (consbv (HalfAdder.half_adder_sum lf6 a) (BV_full_adder_sum l lf5 lf6))   (@cons bool a l).
Lemma candidate_465: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l, @eq BV   (consbv (HalfAdder.half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (@cons bool a l).
Lemma candidate_466: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l, @eq BV   (consbv (HalfAdder.half_adder_sum a false) (BV_full_adder_sum l lf5 lf6))   (@cons bool a l).
Lemma candidate_467: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l, @eq BV (consbv (a) (BV_full_adder_sum l lf5 lf6)) (@cons bool a l).
Lemma candidate_468: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l, @eq BV (BV_full_adder_sum lf5 (@cons bool false l) a) (@cons bool a l).
Lemma candidate_469: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l, @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_470: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l, @eq BV (BV_full_adder_sum lf5 (@cons bool a l) lf6) (@cons bool a l).
Lemma candidate_471: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l, @eq BV   (BV.consbv (HalfAdder.half_adder_sum a lf6) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a lf6)))   (@cons bool a l).
Lemma candidate_472: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l, @eq BV (BV_full_adder_sum lf5 (@cons bool a l) false) (@cons bool a l).
Lemma candidate_473: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l, @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false)))   (@cons bool a l).
Lemma candidate_474: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l, @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (@cons bool ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf5 a) l).
Lemma candidate_475: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l, @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (@cons bool (BV_full_adder_carry lf5 (@nil bool) a) l).
Lemma candidate_476: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l, @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (@cons bool (HalfAdder.half_adder_sum lf6 a) l).
Lemma candidate_477: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l, @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (@cons bool (HalfAdder.half_adder_sum a lf6) l).
Lemma candidate_478: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l, @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (@cons bool (HalfAdder.half_adder_sum a false) l).
Lemma candidate_479: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l, @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (@cons bool a l).
Lemma candidate_480: forall (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l lf5 lf6) (BV_full_adder_sum l lf5 lf6).
Lemma candidate_481: forall (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l lf5 lf6) (BV_full_adder_sum l (@nil bool) lf6).
Lemma candidate_482: forall (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l lf5 lf6) (BV_full_adder_sum lf5 l false).
Lemma candidate_483: forall (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l lf5 lf6)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false).
Lemma candidate_484: forall (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l lf5 lf6) (BV_full_adder_sum l lf5 false).
Lemma candidate_485: forall (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l lf5 lf6) (BV_full_adder_sum l (@nil bool) false).
Lemma candidate_486: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6)   (HalfAdder.half_adder_sum lf6 (HalfAdder.half_adder_sum a false)).
Lemma candidate_487: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6)   (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum lf6 false)).
Lemma candidate_488: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6) (HalfAdder.half_adder_sum lf6 a).
Lemma candidate_489: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6) (HalfAdder.half_adder_sum a lf6).
Lemma candidate_490: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6) (HalfAdder.half_adder_sum a false).
Lemma candidate_491: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6) (a).
Lemma candidate_492: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (BV_full_adder_sum lf5 (@cons bool false l) a).
Lemma candidate_493: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_494: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (BV_full_adder_sum lf5 (@cons bool a l) lf6).
Lemma candidate_495: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (BV.consbv (HalfAdder.half_adder_sum a lf6) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a lf6))).
Lemma candidate_496: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (BV_full_adder_sum lf5 (@cons bool a l) false).
Lemma candidate_497: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false))).
Lemma candidate_498: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum (HalfAdder.half_adder_sum a false) false) l).
Lemma candidate_499: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum a a)) l).
Lemma candidate_500: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum true a)) l).
Lemma candidate_501: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum a true)) l).
Lemma candidate_502: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum a false) l).
Lemma candidate_503: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l) (@cons bool a l).
Lemma candidate_504: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV   (consbv (half_adder_sum a lf6)      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum lf6 false)))   (@cons bool a l).
Lemma candidate_505: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV   (consbv (half_adder_sum a lf6)      (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum lf6 false)))   (@cons bool a l).
Lemma candidate_506: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV   (consbv (half_adder_sum a lf6)      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l lf6))   (@cons bool a l).
Lemma candidate_507: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))   (@cons bool a l).
Lemma candidate_508: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV   (consbv (half_adder_sum a lf6)      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_509: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV   (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) false))   (@cons bool a l).
Lemma candidate_510: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV   (consbv      ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf5 a)      (BV_full_adder_sum l lf5 lf6)) (@cons bool a l).
Lemma candidate_511: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV   (consbv (BV_full_adder_carry lf5 (@nil bool) a)      (BV_full_adder_sum l lf5 lf6)) (@cons bool a l).
Lemma candidate_512: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV   (consbv (HalfAdder.half_adder_sum lf6 a) (BV_full_adder_sum l lf5 lf6))   (@cons bool a l).
Lemma candidate_513: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV   (consbv (HalfAdder.half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (@cons bool a l).
Lemma candidate_514: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV   (consbv (HalfAdder.half_adder_sum a false) (BV_full_adder_sum l lf5 lf6))   (@cons bool a l).
Lemma candidate_515: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv (a) (BV_full_adder_sum l lf5 lf6)) (@cons bool a l).
Lemma candidate_516: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_517: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_518: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_519: forall (a : bool) (l : list bool), @eq BV (BV.consbv a (BV_full_adder_sum l (@nil bool) false)) (@cons bool a l).
Lemma candidate_520: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_521: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false)))   (@cons bool a l).
Lemma candidate_522: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (@cons bool ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf5 a) l).
Lemma candidate_523: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (@cons bool (BV_full_adder_carry lf5 (@nil bool) a) l).
Lemma candidate_524: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (@cons bool (HalfAdder.half_adder_sum lf6 a) l).
Lemma candidate_525: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (@cons bool (HalfAdder.half_adder_sum a lf6) l).
Lemma candidate_526: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (@cons bool (HalfAdder.half_adder_sum a false) l).
Lemma candidate_527: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (@cons bool a l).
Lemma candidate_528: forall (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l lf5 lf6) (BV_full_adder_sum l lf5 lf6).
Lemma candidate_529: forall (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l lf5 lf6) (BV_full_adder_sum l (@nil bool) lf6).
Lemma candidate_530: forall (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l lf5 lf6) (BV_full_adder_sum lf5 l false).
Lemma candidate_531: forall (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l lf5 lf6)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false).
Lemma candidate_532: forall (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l lf5 lf6) (BV_full_adder_sum l lf5 false).
Lemma candidate_533: forall (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l lf5 lf6) (BV_full_adder_sum l (@nil bool) false).
Lemma candidate_534: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6)   (HalfAdder.half_adder_sum lf6 (HalfAdder.half_adder_sum a false)).
Lemma candidate_535: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6)   (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum lf6 false)).
Lemma candidate_536: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6) (HalfAdder.half_adder_sum lf6 a).
Lemma candidate_537: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6) (HalfAdder.half_adder_sum a lf6).
Lemma candidate_538: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6) (HalfAdder.half_adder_sum a false).
Lemma candidate_539: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6) (a).
Lemma candidate_540: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (BV_full_adder_sum lf5 (@cons bool false l) a).
Lemma candidate_541: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_542: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (BV_full_adder_sum lf5 (@cons bool a l) lf6).
Lemma candidate_543: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (BV.consbv (HalfAdder.half_adder_sum a lf6) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a lf6))).
Lemma candidate_544: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (BV_full_adder_sum lf5 (@cons bool a l) false).
Lemma candidate_545: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false))).
Lemma candidate_546: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum (HalfAdder.half_adder_sum a false) false) l).
Lemma candidate_547: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum a a)) l).
Lemma candidate_548: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum true a)) l).
Lemma candidate_549: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum a true)) l).
Lemma candidate_550: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum a false) l).
Lemma candidate_551: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l) (@cons bool a l).
Lemma candidate_552: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_553: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_554: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_555: forall (a : bool) (l : list bool), @eq BV (BV.consbv a (BV_full_adder_sum l (@nil bool) false)) (@cons bool a l).
Lemma candidate_556: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_557: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false)))   (@cons bool a l).
Lemma candidate_558: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV   (consbv (half_adder_sum a (BV_full_adder_carry lf5 lf5 false))      (BV_full_adder_sum l lf5 (BV_full_adder_carry lf5 lf5 false)))   (@cons bool a l).
Lemma candidate_559: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV   (consbv      (half_adder_sum a         ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf5 false))      (BV_full_adder_sum l lf5         ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf5 false)))   (@cons bool a l).
Lemma candidate_560: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV   (consbv (half_adder_sum a (BV_full_adder_carry l (@nil bool) false))      (BV_full_adder_sum l lf5 (BV_full_adder_carry l (@nil bool) false)))   (@cons bool a l).
Lemma candidate_561: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV   (consbv (half_adder_sum a (BV_full_adder_carry lf5 (@nil bool) false))      (BV_full_adder_sum l lf5 (BV_full_adder_carry lf5 (@nil bool) false)))   (@cons bool a l).
Lemma candidate_562: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV   (consbv (half_adder_sum a (HalfAdder.half_adder_sum a a))      (BV_full_adder_sum l lf5 (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_563: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv (half_adder_sum a (false)) (BV_full_adder_sum l lf5 (false)))   (@cons bool a l).
Lemma candidate_564: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV   (consbv (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum a true))      (BV_full_adder_sum l lf5 false)) (@cons bool a l).
Lemma candidate_565: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV   (consbv (BV_full_adder_carry lf5 lf5 a) (BV_full_adder_sum l lf5 false))   (@cons bool a l).
Lemma candidate_566: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV   (consbv      ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf5 a)      (BV_full_adder_sum l lf5 false)) (@cons bool a l).
Lemma candidate_567: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV   (consbv (BV_full_adder_carry lf5 (@nil bool) a)      (BV_full_adder_sum l lf5 false)) (@cons bool a l).
Lemma candidate_568: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV   (consbv (HalfAdder.half_adder_sum a false) (BV_full_adder_sum l lf5 false))   (@cons bool a l).
Lemma candidate_569: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv (a) (BV_full_adder_sum l lf5 false)) (@cons bool a l).
Lemma candidate_570: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum a true)) l).
Lemma candidate_571: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))   (@cons bool (BV_full_adder_carry lf5 lf5 a) l).
Lemma candidate_572: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))   (@cons bool ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf5 a) l).
Lemma candidate_573: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))   (@cons bool (BV_full_adder_carry lf5 (@nil bool) a) l).
Lemma candidate_574: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))   (@cons bool (HalfAdder.half_adder_sum a false) l).
Lemma candidate_575: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))   (@cons bool a l).
Lemma candidate_576: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false)      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (BV_full_adder_carry l (@nil bool) false)))   (@cons bool a l).
Lemma candidate_577: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false)      (BV_full_adder_sum l (@nil bool) (BV_full_adder_carry l (@nil bool) false)))   (@cons bool a l).
Lemma candidate_578: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false)      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_579: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false)      (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_580: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false)      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_581: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false))   (@cons bool a l).
Lemma candidate_582: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))   (BV.consbv a (BV_full_adder_sum l lf5 false)).
Lemma candidate_583: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))   (BV.consbv a (BV_full_adder_sum l (@nil bool) false)).
Lemma candidate_584: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))   (BV_full_adder_sum lf5 (@cons bool false l) a).
Lemma candidate_585: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_586: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))   (BV_full_adder_sum lf5 (@cons bool a l) false).
Lemma candidate_587: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false))).
Lemma candidate_588: @eq bool false (false).
Lemma candidate_589: forall (a : bool), @eq bool (half_adder_sum a false)   (HalfAdder.half_adder_sum (HalfAdder.half_adder_sum a false) false).
Lemma candidate_590: forall (a : bool), @eq bool (half_adder_sum a false)   (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum a a)).
Lemma candidate_591: forall (a : bool), @eq bool (half_adder_sum a false)   (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum true a)).
Lemma candidate_592: forall (a : bool), @eq bool (half_adder_sum a false)   (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum a true)).
Lemma candidate_593: forall (a : bool), @eq bool (half_adder_sum a false) (HalfAdder.half_adder_sum a false).
Lemma candidate_594: forall (a : bool), @eq bool (half_adder_sum a false) (a).
Lemma candidate_595: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum (HalfAdder.half_adder_sum a false) false) l).
Lemma candidate_596: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum a a)) l).
Lemma candidate_597: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum true a)) l).
Lemma candidate_598: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum a true)) l).
Lemma candidate_599: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum a false) l).
Lemma candidate_600: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l) (@cons bool a l).
Lemma candidate_601: forall (l : list bool) (lf5 : list bool), @eq BV (BV_full_adder_sum l lf5 false)   (BV_full_adder_sum l lf5 (BV_full_adder_carry lf5 (@nil bool) false)).
Lemma candidate_602: forall (l : list bool) (lf5 : list bool), @eq BV (BV_full_adder_sum l lf5 false)   (BV_full_adder_sum l (@nil bool) (BV_full_adder_carry lf5 (@nil bool) false)).
Lemma candidate_603: forall (l : list bool) (lf5 : list bool), @eq BV (BV_full_adder_sum l lf5 false) (BV_full_adder_sum lf5 l false).
Lemma candidate_604: forall (l : list bool) (lf5 : list bool), @eq BV (BV_full_adder_sum l lf5 false)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false).
Lemma candidate_605: forall (l : list bool) (lf5 : list bool), @eq BV (BV_full_adder_sum l lf5 false) (BV_full_adder_sum l lf5 false).
Lemma candidate_606: forall (l : list bool) (lf5 : list bool), @eq BV (BV_full_adder_sum l lf5 false)   (BV_full_adder_sum l (@nil bool) false).
Lemma candidate_607: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_608: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_609: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_610: forall (a : bool) (l : list bool), @eq BV (BV.consbv a (BV_full_adder_sum l (@nil bool) false)) (@cons bool a l).
Lemma candidate_611: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_612: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false)))   (@cons bool a l).
Lemma candidate_613: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV   (consbv (half_adder_sum a lf6)      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum lf6 false)))   (@cons bool a l).
Lemma candidate_614: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV   (consbv (half_adder_sum a lf6)      (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum lf6 false)))   (@cons bool a l).
Lemma candidate_615: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV   (consbv (half_adder_sum a lf6)      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l lf6))   (@cons bool a l).
Lemma candidate_616: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))   (@cons bool a l).
Lemma candidate_617: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV   (consbv (half_adder_sum a lf6)      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_618: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV   (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) false))   (@cons bool a l).
Lemma candidate_619: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV   (consbv (HalfAdder.half_adder_sum lf6 (HalfAdder.half_adder_sum a false))      (BV_full_adder_sum l (@nil bool) lf6)) (@cons bool a l).
Lemma candidate_620: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV   (consbv (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum lf6 false))      (BV_full_adder_sum l (@nil bool) lf6)) (@cons bool a l).
Lemma candidate_621: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV   (consbv (HalfAdder.half_adder_sum lf6 a)      (BV_full_adder_sum l (@nil bool) lf6)) (@cons bool a l).
Lemma candidate_622: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV   (consbv (HalfAdder.half_adder_sum a lf6)      (BV_full_adder_sum l (@nil bool) lf6)) (@cons bool a l).
Lemma candidate_623: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV   (consbv (HalfAdder.half_adder_sum a false)      (BV_full_adder_sum l (@nil bool) lf6)) (@cons bool a l).
Lemma candidate_624: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV (consbv (a) (BV_full_adder_sum l (@nil bool) lf6)) (@cons bool a l).
Lemma candidate_625: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))   (@cons bool (HalfAdder.half_adder_sum lf6 (HalfAdder.half_adder_sum a false)) l).
Lemma candidate_626: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))   (@cons bool (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum lf6 false)) l).
Lemma candidate_627: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))   (@cons bool (HalfAdder.half_adder_sum lf6 a) l).
Lemma candidate_628: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))   (@cons bool (HalfAdder.half_adder_sum a lf6) l).
Lemma candidate_629: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))   (@cons bool (HalfAdder.half_adder_sum a false) l).
Lemma candidate_630: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))   (@cons bool a l).
Lemma candidate_631: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))   (@cons bool a l).
Lemma candidate_632: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))   (BV.consbv a (BV_full_adder_sum l (@nil bool) lf6)).
Lemma candidate_633: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))   (BV.consbv a (BV_full_adder_sum l (@nil bool) false)).
Lemma candidate_634: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))   (BV.consbv (HalfAdder.half_adder_sum lf6 a) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf6 a))).
Lemma candidate_635: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_636: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))   (BV.consbv (HalfAdder.half_adder_sum a lf6) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a lf6))).
Lemma candidate_637: forall (a : bool) (l : list bool) (lf6 : bool), @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l (@nil bool) lf6))   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false))).
Lemma candidate_638: forall (l : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l (@nil bool) lf6)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum lf6 false)).
Lemma candidate_639: forall (l : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l (@nil bool) lf6)   (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum lf6 false)).
Lemma candidate_640: forall (l : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l (@nil bool) lf6)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l lf6).
Lemma candidate_641: forall (l : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l (@nil bool) lf6)   (BV_full_adder_sum l (@nil bool) lf6).
Lemma candidate_642: forall (l : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l (@nil bool) lf6)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false).
Lemma candidate_643: forall (l : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l (@nil bool) lf6)   (BV_full_adder_sum l (@nil bool) false).
Lemma candidate_644: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6)   (HalfAdder.half_adder_sum lf6 (HalfAdder.half_adder_sum a false)).
Lemma candidate_645: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6)   (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum lf6 false)).
Lemma candidate_646: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6) (HalfAdder.half_adder_sum lf6 a).
Lemma candidate_647: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6) (HalfAdder.half_adder_sum a lf6).
Lemma candidate_648: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6) (HalfAdder.half_adder_sum a false).
Lemma candidate_649: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6) (a).
Lemma candidate_650: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum (HalfAdder.half_adder_sum a false) false) l).
Lemma candidate_651: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum a a)) l).
Lemma candidate_652: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum true a)) l).
Lemma candidate_653: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum a true)) l).
Lemma candidate_654: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum a false) l).
Lemma candidate_655: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l) (@cons bool a l).
Lemma candidate_656: @eq (list bool) (@nil bool) (@nil bool).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 2272 seconds
Duplicates removed: 405
Filtered by Quickchick: 174
Filtered by script: 17
Remaining: 60

Lemmas: 
Lemma candidate_55: forall (l : list bool) (lf5 : list bool), @eq BV (BV_full_adder_sum l lf5 false) (BV_full_adder_sum lf5 l false).
Lemma candidate_8: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum a false) l).
Lemma candidate_2: forall (a : bool) (l : list bool) (lf2 : BV), forall _ : @eq BV lf2 l, @eq BV (consbv (half_adder_sum a false) lf2) (@cons bool a l).
Lemma candidate_12: forall (lf4 : list bool), @eq BV   (BV_full_adder_sum lf4 (@nil bool) (BV_full_adder_carry lf4 (@nil bool) false))   lf4.
Lemma candidate_300: forall (a : bool), @eq bool (half_adder_sum a false)   (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum a a)).
Lemma candidate_287: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6)   (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum lf6 false)).
Lemma candidate_286: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6)   (HalfAdder.half_adder_sum lf6 (HalfAdder.half_adder_sum a false)).
Lemma candidate_302: forall (a : bool), @eq bool (half_adder_sum a false)   (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum a true)).
Lemma candidate_301: forall (a : bool), @eq bool (half_adder_sum a false)   (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum true a)).
Lemma candidate_299: forall (a : bool), @eq bool (half_adder_sum a false)   (HalfAdder.half_adder_sum (HalfAdder.half_adder_sum a false) false).
Lemma candidate_108: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_5: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum a a)) l).
Lemma candidate_53: forall (l : list bool) (lf5 : list bool), @eq BV (BV_full_adder_sum l lf5 false)   (BV_full_adder_sum l lf5 (BV_full_adder_carry lf5 (@nil bool) false)).
Lemma candidate_251: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (@cons bool (HalfAdder.half_adder_sum lf3 false) l).
Lemma candidate_7: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum a true)) l).
Lemma candidate_6: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum true a)) l).
Lemma candidate_467: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l, @eq BV (consbv (a) (BV_full_adder_sum l lf5 lf6)) (@cons bool a l).
Lemma candidate_73: forall (l : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l (@nil bool) lf6)   (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum lf6 false)).
Lemma candidate_4: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum (HalfAdder.half_adder_sum a false) false) l).
Lemma candidate_341: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))   (BV.consbv a (BV_full_adder_sum l lf5 false)).
Lemma candidate_96: forall (l : list bool), @eq BV (BV_full_adder_sum l (@nil bool) false)   (BV_full_adder_sum l (@nil bool) (BV_full_adder_carry l (@nil bool) false)).
Lemma candidate_579: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false)      (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_402: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false))   (BV.consbv a (BV_full_adder_sum l (@nil bool) false)).
Lemma candidate_577: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false)      (BV_full_adder_sum l (@nil bool) (BV_full_adder_carry l (@nil bool) false)))   (@cons bool a l).
Lemma candidate_248: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (@cons bool (HalfAdder.half_adder_sum lf3 (HalfAdder.half_adder_sum lf3 lf3)) l).
Lemma candidate_250: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum lf3 true)) l).
Lemma candidate_249: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum true lf3)) l).
Lemma candidate_3: forall (a : bool) (l : list bool) (lf5 : list bool), forall _ : @eq BV (BV_full_adder_sum l lf5 false) l, @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))   (@cons bool a l).
Lemma candidate_247: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (@cons bool (HalfAdder.half_adder_sum (HalfAdder.half_adder_sum lf3 false) false) l).
Lemma candidate_102: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (BV.consbv lf3 (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum lf3 lf3))).
Lemma candidate_466: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l, @eq BV   (consbv (HalfAdder.half_adder_sum a false) (BV_full_adder_sum l lf5 lf6))   (@cons bool a l).
Lemma candidate_401: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false))   (BV.consbv a (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum a a))).
Lemma candidate_477: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l, @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (@cons bool (HalfAdder.half_adder_sum a lf6) l).
Lemma candidate_476: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l, @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (@cons bool (HalfAdder.half_adder_sum lf6 a) l).
Lemma candidate_10: forall (lf4 : list bool), @eq BV   (BV_full_adder_sum lf4 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf4 false))   lf4.
Lemma candidate_14: forall (lf4 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf4 false)   lf4.
Lemma candidate_94: forall (l : list bool), @eq BV (BV_full_adder_sum l (@nil bool) false)   (BV_full_adder_sum l (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)).
Lemma candidate_110: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_74: forall (l : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l (@nil bool) lf6)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l lf6).
Lemma candidate_97: forall (l : list bool), @eq BV (BV_full_adder_sum l (@nil bool) false)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false).
Lemma candidate_11: forall (lf4 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf4 (BV_full_adder_carry lf4 (@nil bool) false))   lf4.
Lemma candidate_580: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false)      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_107: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_106: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_104: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (BV.consbv lf3 ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_72: forall (l : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l (@nil bool) lf6)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum lf6 false)).
Lemma candidate_95: forall (l : list bool), @eq BV (BV_full_adder_sum l (@nil bool) false)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (BV_full_adder_carry l (@nil bool) false)).
Lemma candidate_578: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false)      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_469: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l, @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_403: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false))   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_576: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false)      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (BV_full_adder_carry l (@nil bool) false)))   (@cons bool a l).
Lemma candidate_111: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false)))   (@cons bool a l).
Lemma candidate_101: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (BV.consbv lf3 ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum lf3 lf3))).
Lemma candidate_100: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (BV.consbv (HalfAdder.half_adder_sum lf3 false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_400: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false))   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum a a))).
Lemma candidate_399: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false))   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_105: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (BV.consbv (HalfAdder.half_adder_sum lf3 false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf3 false))).
Lemma candidate_473: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l, @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false)))   (@cons bool a l).
Lemma candidate_404: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false))   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false))).
Lemma candidate_93: forall (l : list bool), @eq BV (BV_full_adder_sum l (@nil bool) false)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)).