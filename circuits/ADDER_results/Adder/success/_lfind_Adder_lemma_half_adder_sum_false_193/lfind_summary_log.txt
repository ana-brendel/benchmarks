LFind Results
LFind Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/Adder/_lfind_Adder_lemma_half_adder_sum_false_193

Number of Lemmas: 656
Number of Lemmas (after duplicates removed): 251
Number of Lemmas (after QuickChick used to filter): 77
* Number of Candidate Lemmas: 60

Time until ranking: 2273
Time to complete: 4216

Stuck state true independent of hypotheses: true

Category 1:
Count = 23

Lemma candidate_8: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum a false) l).
Lemma candidate_2: forall (a : bool) (l : list bool) (lf2 : BV), forall _ : @eq BV lf2 l, @eq BV (consbv (half_adder_sum a false) lf2) (@cons bool a l).
Lemma candidate_300: forall (a : bool), @eq bool (half_adder_sum a false)   (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum a a)).
Lemma candidate_302: forall (a : bool), @eq bool (half_adder_sum a false)   (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum a true)).
Lemma candidate_301: forall (a : bool), @eq bool (half_adder_sum a false)   (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum true a)).
Lemma candidate_299: forall (a : bool), @eq bool (half_adder_sum a false)   (HalfAdder.half_adder_sum (HalfAdder.half_adder_sum a false) false).
Lemma candidate_5: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum a a)) l).
Lemma candidate_7: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum a true)) l).
Lemma candidate_6: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum true a)) l).
Lemma candidate_467: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l, @eq BV (consbv (a) (BV_full_adder_sum l lf5 lf6)) (@cons bool a l).
Lemma candidate_73: forall (l : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l (@nil bool) lf6)   (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum lf6 false)).
Lemma candidate_4: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_sum (HalfAdder.half_adder_sum a false) false) l).
Lemma candidate_341: forall (a : bool) (l : list bool) (lf5 : list bool), @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))   (BV.consbv a (BV_full_adder_sum l lf5 false)).
Lemma candidate_402: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false))   (BV.consbv a (BV_full_adder_sum l (@nil bool) false)).
Lemma candidate_3: forall (a : bool) (l : list bool) (lf5 : list bool), forall _ : @eq BV (BV_full_adder_sum l lf5 false) l, @eq BV (consbv (half_adder_sum a false) (BV_full_adder_sum l lf5 false))   (@cons bool a l).
Lemma candidate_102: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (BV.consbv lf3 (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum lf3 lf3))).
Lemma candidate_466: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l, @eq BV   (consbv (HalfAdder.half_adder_sum a false) (BV_full_adder_sum l lf5 lf6))   (@cons bool a l).
Lemma candidate_401: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false))   (BV.consbv a (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum a a))).
Lemma candidate_477: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l, @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (@cons bool (HalfAdder.half_adder_sum a lf6) l).
Lemma candidate_476: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l, @eq BV (consbv (half_adder_sum a lf6) (BV_full_adder_sum l lf5 lf6))   (@cons bool (HalfAdder.half_adder_sum lf6 a) l).
Lemma candidate_14: forall (lf4 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf4 false)   lf4.
Lemma candidate_74: forall (l : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l (@nil bool) lf6)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l lf6).
Lemma candidate_97: forall (l : list bool), @eq BV (BV_full_adder_sum l (@nil bool) false)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false).

Category 2:
Count = 37

Lemma candidate_55: forall (l : list bool) (lf5 : list bool), @eq BV (BV_full_adder_sum l lf5 false) (BV_full_adder_sum lf5 l false).
Lemma candidate_12: forall (lf4 : list bool), @eq BV   (BV_full_adder_sum lf4 (@nil bool) (BV_full_adder_carry lf4 (@nil bool) false))   lf4.
Lemma candidate_287: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6)   (HalfAdder.half_adder_sum a (HalfAdder.half_adder_sum lf6 false)).
Lemma candidate_286: forall (a : bool) (lf6 : bool), @eq bool (half_adder_sum a lf6)   (HalfAdder.half_adder_sum lf6 (HalfAdder.half_adder_sum a false)).
Lemma candidate_108: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_53: forall (l : list bool) (lf5 : list bool), @eq BV (BV_full_adder_sum l lf5 false)   (BV_full_adder_sum l lf5 (BV_full_adder_carry lf5 (@nil bool) false)).
Lemma candidate_251: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (@cons bool (HalfAdder.half_adder_sum lf3 false) l).
Lemma candidate_96: forall (l : list bool), @eq BV (BV_full_adder_sum l (@nil bool) false)   (BV_full_adder_sum l (@nil bool) (BV_full_adder_carry l (@nil bool) false)).
Lemma candidate_579: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false)      (BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_577: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false)      (BV_full_adder_sum l (@nil bool) (BV_full_adder_carry l (@nil bool) false)))   (@cons bool a l).
Lemma candidate_248: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (@cons bool (HalfAdder.half_adder_sum lf3 (HalfAdder.half_adder_sum lf3 lf3)) l).
Lemma candidate_250: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum lf3 true)) l).
Lemma candidate_249: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (@cons bool (HalfAdder.half_adder_sum true (HalfAdder.half_adder_sum true lf3)) l).
Lemma candidate_247: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (@cons bool (HalfAdder.half_adder_sum (HalfAdder.half_adder_sum lf3 false) false) l).
Lemma candidate_10: forall (lf4 : list bool), @eq BV   (BV_full_adder_sum lf4 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf4 false))   lf4.
Lemma candidate_94: forall (l : list bool), @eq BV (BV_full_adder_sum l (@nil bool) false)   (BV_full_adder_sum l (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)).
Lemma candidate_110: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_11: forall (lf4 : list bool), @eq BV   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf4 (BV_full_adder_carry lf4 (@nil bool) false))   lf4.
Lemma candidate_580: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false)      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_107: forall (a : bool) (l : list bool), @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_106: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_104: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (BV.consbv lf3 ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_72: forall (l : list bool) (lf6 : bool), @eq BV (BV_full_adder_sum l (@nil bool) lf6)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum lf6 false)).
Lemma candidate_95: forall (l : list bool), @eq BV (BV_full_adder_sum l (@nil bool) false)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (BV_full_adder_carry l (@nil bool) false)).
Lemma candidate_578: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false)      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum a a)))   (@cons bool a l).
Lemma candidate_469: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l, @eq BV   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))   (@cons bool a l).
Lemma candidate_403: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false))   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_576: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false)      ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (BV_full_adder_carry l (@nil bool) false)))   (@cons bool a l).
Lemma candidate_111: forall (a : bool) (l : list bool), @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false)))   (@cons bool a l).
Lemma candidate_101: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (BV.consbv lf3 ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum lf3 lf3))).
Lemma candidate_100: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (BV.consbv (HalfAdder.half_adder_sum lf3 false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_400: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false))   (BV.consbv a ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_sum a a))).
Lemma candidate_399: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false))   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_105: forall (lf3 : bool) (l : list bool), @eq BV (consbv lf3 (BV_full_adder_sum l (@nil bool) false))   (BV.consbv (HalfAdder.half_adder_sum lf3 false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf3 false))).
Lemma candidate_473: forall (a : bool) (l : list bool) (lf5 : list bool) (lf6 : bool), forall _ : @eq BV (BV_full_adder_sum l lf5 lf6) l, @eq BV   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false)))   (@cons bool a l).
Lemma candidate_404: forall (a : bool) (l : list bool), @eq BV   (consbv (half_adder_sum a false) (BV_full_adder_sum l (@nil bool) false))   (BV.consbv (HalfAdder.half_adder_sum a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false))).
Lemma candidate_93: forall (l : list bool), @eq BV (BV_full_adder_sum l (@nil bool) false)   ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)).

Category 3 (provable):
Count = 0


Category 3 (not provable):
Count = 0
