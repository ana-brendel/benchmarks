LFind Results
LFind Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/Adder/_lfind_Adder_lemma_BV_full_adder_sum_eq2_210

Number of Lemmas: 80
Number of Lemmas (after duplicates removed): 56
Number of Lemmas (after QuickChick used to filter): 32
* Number of Candidate Lemmas: 17

Time until ranking: 609
Time to complete: 1225

Stuck state true independent of hypotheses: true

Category 1:
Count = 10

Lemma candidate_40: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a a) l).
Lemma candidate_41: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a true) l).
Lemma candidate_37: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a a false) l).
Lemma candidate_39: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a true false) l).
Lemma candidate_38: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry true a false) l).
Lemma candidate_71: forall (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) cin)   (BV.consbv (FullAdder.full_adder_sum a cin false) (BV_full_adder_sum l (@nil bool) (FullAdder.full_adder_carry a cin false))).
Lemma candidate_70: forall (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) cin)   (BV.consbv (FullAdder.full_adder_sum cin a false) (BV_full_adder_sum l (@nil bool) (FullAdder.full_adder_carry cin a false))).
Lemma candidate_47: forall (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@nil bool) (@cons bool a l) cin)   (BV.consbv (HalfAdder.half_adder_sum cin a) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry cin a))).
Lemma candidate_44: forall (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@nil bool) (@cons bool a l) cin)   (BV.consbv (FullAdder.full_adder_sum a cin false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (FullAdder.full_adder_carry a cin false))).
Lemma candidate_43: forall (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@nil bool) (@cons bool a l) cin)   (BV.consbv (FullAdder.full_adder_sum cin a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (FullAdder.full_adder_carry cin a false))).

Category 2:
Count = 7

Lemma candidate_64: forall (a : bool) (l : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@cons bool a l) lf4 cin)   (BV_full_adder_sum lf4 (@cons bool cin l) a).
Lemma candidate_33: forall (a : bool) (l : list bool) (lf4 : list bool) (cin : bool), @eq BV (BV_full_adder_sum lf4 (@cons bool a l) cin)   (BV_full_adder_sum lf4 (@cons bool cin l) a).
Lemma candidate_46: forall (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@nil bool) (@cons bool a l) cin)   (BV.consbv (FullAdder.full_adder_sum a cin false) (BV_full_adder_sum l (@nil bool) (FullAdder.full_adder_carry a cin false))).
Lemma candidate_45: forall (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@nil bool) (@cons bool a l) cin)   (BV.consbv (FullAdder.full_adder_sum cin a false) (BV_full_adder_sum l (@nil bool) (FullAdder.full_adder_carry cin a false))).
Lemma candidate_72: forall (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) cin)   (BV.consbv (HalfAdder.half_adder_sum cin a) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry cin a))).
Lemma candidate_69: forall (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) cin)   (BV.consbv (FullAdder.full_adder_sum a cin false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (FullAdder.full_adder_carry a cin false))).
Lemma candidate_68: forall (a : bool) (l : list bool) (cin : bool), @eq BV (BV_full_adder_sum (@cons bool a l) (@nil bool) cin)   (BV.consbv (FullAdder.full_adder_sum cin a false) ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (FullAdder.full_adder_carry cin a false))).

Category 3 (provable):
Count = 0


Category 3 (not provable):
Count = 0
