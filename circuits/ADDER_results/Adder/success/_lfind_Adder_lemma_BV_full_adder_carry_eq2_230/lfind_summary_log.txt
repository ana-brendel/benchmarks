LFind Results
LFind Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/Adder/_lfind_Adder_lemma_BV_full_adder_carry_eq2_230

Number of Lemmas: 132
Number of Lemmas (after duplicates removed): 72
Number of Lemmas (after QuickChick used to filter): 48
* Number of Candidate Lemmas: 29

Time until ranking: 783
Time to complete: 1584

Stuck state true independent of hypotheses: true

Category 1:
Count = 16

Lemma candidate_34: forall (lf2 : bool), @eq bool (HalfAdder.half_adder_carry lf2 lf2) lf2.
Lemma candidate_8: forall (lf1 : bool), @eq bool lf1 (HalfAdder.half_adder_carry lf1 lf1).
Lemma candidate_9: forall (lf1 : bool), @eq bool lf1 (HalfAdder.half_adder_carry lf1 true).
Lemma candidate_31: forall (lf2 : bool), @eq bool (FullAdder.full_adder_carry lf2 lf2 false) lf2.
Lemma candidate_5: forall (lf1 : bool), @eq bool lf1 (FullAdder.full_adder_carry lf1 lf1 false).
Lemma candidate_32: forall (lf2 : bool), @eq bool (FullAdder.full_adder_carry true lf2 false) lf2.
Lemma candidate_7: forall (lf1 : bool), @eq bool lf1 (FullAdder.full_adder_carry lf1 true false).
Lemma candidate_6: forall (lf1 : bool), @eq bool lf1 (FullAdder.full_adder_carry true lf1 false).
Lemma candidate_72: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a a) l).
Lemma candidate_73: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (HalfAdder.half_adder_carry a true) l).
Lemma candidate_69: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a a false) l).
Lemma candidate_71: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry a true false) l).
Lemma candidate_70: forall (a : bool) (l : list bool), @eq (list bool) (@cons bool a l)   (@cons bool (FullAdder.full_adder_carry true a false) l).
Lemma candidate_24: forall (lf3 : list bool) (cin : bool), @eq bool (BV_full_adder_carry (@nil bool) lf3 cin)   ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf3 (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_26: forall (lf3 : list bool) (cin : bool), @eq bool (BV_full_adder_carry (@nil bool) lf3 cin)   ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf3 (HalfAdder.half_adder_carry cin true)).
Lemma candidate_93: forall (a : bool) (l : list bool) (cin : bool), @eq bool (BV_full_adder_carry (@nil bool) (@cons bool a l) cin)   ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l (HalfAdder.half_adder_carry cin a)).

Category 2:
Count = 13

Lemma candidate_103: forall (a : bool) (l : list bool) (lf4 : list bool) (cin : bool), @eq bool (BV_full_adder_carry (@cons bool a l) lf4 cin)   (BV_full_adder_carry lf4 (@cons bool cin l) a).
Lemma candidate_65: forall (a : bool) (l : list bool) (lf4 : list bool) (cin : bool), @eq bool (BV_full_adder_carry lf4 (@cons bool a l) cin)   (BV_full_adder_carry lf4 (@cons bool cin l) a).
Lemma candidate_123: forall (a : bool) (l : list bool) (cin : bool), @eq bool (BV_full_adder_carry (@cons bool a l) (@nil bool) cin)   (HalfAdder.half_adder_carry a (BV_full_adder_carry l (@nil bool) cin)).
Lemma candidate_92: forall (a : bool) (l : list bool) (cin : bool), @eq bool (BV_full_adder_carry (@nil bool) (@cons bool a l) cin)   (HalfAdder.half_adder_carry a (BV_full_adder_carry l (@nil bool) cin)).
Lemma candidate_51: forall (lf3 : list bool) (cin : bool), @eq bool (BV_full_adder_carry lf3 (@nil bool) cin)   ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf3 (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_53: forall (lf3 : list bool) (cin : bool), @eq bool (BV_full_adder_carry lf3 (@nil bool) cin)   ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf3 (HalfAdder.half_adder_carry cin true)).
Lemma candidate_124: forall (a : bool) (l : list bool) (cin : bool), @eq bool (BV_full_adder_carry (@cons bool a l) (@nil bool) cin)   ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l (HalfAdder.half_adder_carry cin a)).
Lemma candidate_121: forall (a : bool) (l : list bool) (cin : bool), @eq bool (BV_full_adder_carry (@cons bool a l) (@nil bool) cin)   (HalfAdder.half_adder_carry a ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l cin)).
Lemma candidate_90: forall (a : bool) (l : list bool) (cin : bool), @eq bool (BV_full_adder_carry (@nil bool) (@cons bool a l) cin)   (HalfAdder.half_adder_carry a ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l cin)).
Lemma candidate_122: forall (a : bool) (l : list bool) (cin : bool), @eq bool (BV_full_adder_carry (@cons bool a l) (@nil bool) cin)   ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l (HalfAdder.half_adder_carry a (BV_full_adder_carry l (@nil bool) cin))).
Lemma candidate_91: forall (a : bool) (l : list bool) (cin : bool), @eq bool (BV_full_adder_carry (@nil bool) (@cons bool a l) cin)   ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l (HalfAdder.half_adder_carry a (BV_full_adder_carry l (@nil bool) cin))).
Lemma candidate_120: forall (a : bool) (l : list bool) (cin : bool), @eq bool (BV_full_adder_carry (@cons bool a l) (@nil bool) cin)   ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l (HalfAdder.half_adder_carry a ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l cin))).
Lemma candidate_89: forall (a : bool) (l : list bool) (cin : bool), @eq bool (BV_full_adder_carry (@nil bool) (@cons bool a l) cin)   ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l (HalfAdder.half_adder_carry a ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l cin))).

Category 3 (provable):
Count = 0


Category 3 (not provable):
Count = 0
