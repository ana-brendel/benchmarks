File Information
- File name: IncrDecr
- Original Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/IncrDecr/IncrDecr_lemma_BV_full_adder_ok_136
- LFind Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/IncrDecr/_lfind_IncrDecr_lemma_BV_full_adder_ok_136
- Namespace: Circuits
- Proof name: BV_increment_ok
- Theorem: Theorem BV_increment_ok: forall v0 : BV,
@eq nat
  (BV_to_nat (appbv (BV_increment v0) (consbv (BV_increment_carry v0) nilbv)))
  (S (BV_to_nat v0)).
- Declarations: 
From lfind Require Import LFind.
From CircuitsCoqGym Require Import AdderProof.

Proof Context
* Goal State: @eq nat (BV_to_nat (BV_full_adder v nilbv true)) (S (BV_to_nat v))

* Hypothesis:
v : BV

* Types:
Set
Prop
BV
bool
nat

* Polymorphic Types:


* Variables:
v : BV

* Terms:
BV_to_nat (BV_full_adder v nilbv true) : nat
nat : Set
BV_full_adder v nilbv true : BV
@eq nat (BV_to_nat (BV_full_adder v nilbv true)) (S (BV_to_nat v)) : Prop
v : BV
BV_to_nat v : nat
S (BV_to_nat v) : nat
BV : Set
nilbv : BV
true : bool

* Functions:
BV_full_adder  : forall (_ : BV) (_ : BV) (_ : bool), BV
S  : forall _ : nat, nat
@eq  : forall (A : Type) (_ : A) (_ : A), Prop
BV_to_nat  : forall _ : BV, nat

<---GENERALIZATION--->
Time elapsed: 1 seconds
Generalized Variables:
lf3 : nat = S (BV_to_nat v)
lf1 : nat = BV_to_nat (BV_full_adder v nilbv true)
lf4 : nat = BV_to_nat v
lf5 : BV = nilbv
lf2 : BV = BV_full_adder v nilbv true
lf6 : bool = true

Generalizations:
Lemma conj1: forall (lf1 : nat) (lf3 : nat), @eq nat lf1 lf3.
Lemma conj17: forall (lf2 : BV) (lf3 : nat), @eq nat (BV_to_nat lf2) lf3.
Lemma conj19: forall (lf6 : bool) (lf5 : BV) (v : BV) (lf3 : nat), @eq nat (BV_to_nat (BV_full_adder v lf5 lf6)) lf3.
Lemma conj20: forall (lf5 : BV) (v : BV) (lf3 : nat), @eq nat (BV_to_nat (BV_full_adder v lf5 true)) lf3.
Lemma conj23: forall (lf6 : bool) (v : BV) (lf3 : nat), @eq nat (BV_to_nat (BV_full_adder v nilbv lf6)) lf3.
Lemma conj24: forall (v : BV) (lf3 : nat), @eq nat (BV_to_nat (BV_full_adder v nilbv true)) lf3.
Lemma conj33: forall (lf4 : nat) (lf1 : nat), @eq nat lf1 (S lf4).
Lemma conj41: forall (v : BV) (lf1 : nat), @eq nat lf1 (S (BV_to_nat v)).
Lemma conj49: forall (lf2 : BV) (lf4 : nat), @eq nat (BV_to_nat lf2) (S lf4).
Lemma conj51: forall (lf6 : bool) (lf5 : BV) (v : BV) (lf4 : nat), @eq nat (BV_to_nat (BV_full_adder v lf5 lf6)) (S lf4).
Lemma conj52: forall (lf5 : BV) (v : BV) (lf4 : nat), @eq nat (BV_to_nat (BV_full_adder v lf5 true)) (S lf4).
Lemma conj55: forall (lf6 : bool) (v : BV) (lf4 : nat), @eq nat (BV_to_nat (BV_full_adder v nilbv lf6)) (S lf4).
Lemma conj56: forall (v : BV) (lf4 : nat), @eq nat (BV_to_nat (BV_full_adder v nilbv true)) (S lf4).
Lemma conj57: forall (lf2 : BV) (v : BV), @eq nat (BV_to_nat lf2) (S (BV_to_nat v)).
Lemma conj59: forall (lf6 : bool) (lf5 : BV) (v : BV), @eq nat (BV_to_nat (BV_full_adder v lf5 lf6)) (S (BV_to_nat v)).
Lemma conj60: forall (lf5 : BV) (v : BV), @eq nat (BV_to_nat (BV_full_adder v lf5 true)) (S (BV_to_nat v)).
Lemma conj63: forall (lf6 : bool) (v : BV), @eq nat (BV_to_nat (BV_full_adder v nilbv lf6)) (S (BV_to_nat v)).
Lemma conj64: forall (v : BV), @eq nat (BV_to_nat (BV_full_adder v nilbv true)) (S (BV_to_nat v)).


<---VALIDITY CHECKS--->
Time elapsed: 48 seconds
Valid:
Lemma conj64: forall (v : BV), @eq nat (BV_to_nat (BV_full_adder v nilbv true)) (S (BV_to_nat v)).

Invalid:
Lemma conj63: forall (lf6 : bool) (v : BV), @eq nat (BV_to_nat (BV_full_adder v nilbv lf6)) (S (BV_to_nat v)).
Lemma conj60: forall (lf5 : BV) (v : BV), @eq nat (BV_to_nat (BV_full_adder v lf5 true)) (S (BV_to_nat v)).
Lemma conj59: forall (lf6 : bool) (lf5 : BV) (v : BV), @eq nat (BV_to_nat (BV_full_adder v lf5 lf6)) (S (BV_to_nat v)).
Lemma conj57: forall (lf2 : BV) (v : BV), @eq nat (BV_to_nat lf2) (S (BV_to_nat v)).
Lemma conj56: forall (v : BV) (lf4 : nat), @eq nat (BV_to_nat (BV_full_adder v nilbv true)) (S lf4).
Lemma conj55: forall (lf6 : bool) (v : BV) (lf4 : nat), @eq nat (BV_to_nat (BV_full_adder v nilbv lf6)) (S lf4).
Lemma conj52: forall (lf5 : BV) (v : BV) (lf4 : nat), @eq nat (BV_to_nat (BV_full_adder v lf5 true)) (S lf4).
Lemma conj51: forall (lf6 : bool) (lf5 : BV) (v : BV) (lf4 : nat), @eq nat (BV_to_nat (BV_full_adder v lf5 lf6)) (S lf4).
Lemma conj49: forall (lf2 : BV) (lf4 : nat), @eq nat (BV_to_nat lf2) (S lf4).
Lemma conj41: forall (v : BV) (lf1 : nat), @eq nat lf1 (S (BV_to_nat v)).
Lemma conj33: forall (lf4 : nat) (lf1 : nat), @eq nat lf1 (S lf4).
Lemma conj24: forall (v : BV) (lf3 : nat), @eq nat (BV_to_nat (BV_full_adder v nilbv true)) lf3.
Lemma conj23: forall (lf6 : bool) (v : BV) (lf3 : nat), @eq nat (BV_to_nat (BV_full_adder v nilbv lf6)) lf3.
Lemma conj20: forall (lf5 : BV) (v : BV) (lf3 : nat), @eq nat (BV_to_nat (BV_full_adder v lf5 true)) lf3.
Lemma conj19: forall (lf6 : bool) (lf5 : BV) (v : BV) (lf3 : nat), @eq nat (BV_to_nat (BV_full_adder v lf5 lf6)) lf3.
Lemma conj17: forall (lf2 : BV) (lf3 : nat), @eq nat (BV_to_nat lf2) lf3.
Lemma conj1: forall (lf1 : nat) (lf3 : nat), @eq nat lf1 lf3.

<---ADD IMPLICATIONS--->
Time elapsed: 48 seconds
Generalizations:
Lemma conj63: forall (lf6 : bool) (v : BV), @eq nat (BV_to_nat (BV_full_adder v nilbv lf6)) (S (BV_to_nat v)).
Lemma conj60: forall (lf5 : BV) (v : BV), @eq nat (BV_to_nat (BV_full_adder v lf5 true)) (S (BV_to_nat v)).
Lemma conj59: forall (lf6 : bool) (lf5 : BV) (v : BV), @eq nat (BV_to_nat (BV_full_adder v lf5 lf6)) (S (BV_to_nat v)).
Lemma conj57: forall (lf2 : BV) (v : BV), @eq nat (BV_to_nat lf2) (S (BV_to_nat v)).
Lemma conj56: forall (v : BV) (lf4 : nat), @eq nat (BV_to_nat (BV_full_adder v nilbv true)) (S lf4).
Lemma conj55: forall (lf6 : bool) (v : BV) (lf4 : nat), @eq nat (BV_to_nat (BV_full_adder v nilbv lf6)) (S lf4).
Lemma conj52: forall (lf5 : BV) (v : BV) (lf4 : nat), @eq nat (BV_to_nat (BV_full_adder v lf5 true)) (S lf4).
Lemma conj51: forall (lf6 : bool) (lf5 : BV) (v : BV) (lf4 : nat), @eq nat (BV_to_nat (BV_full_adder v lf5 lf6)) (S lf4).
Lemma conj49: forall (lf2 : BV) (lf4 : nat), @eq nat (BV_to_nat lf2) (S lf4).
Lemma conj41: forall (v : BV) (lf1 : nat), @eq nat lf1 (S (BV_to_nat v)).
Lemma conj33: forall (lf4 : nat) (lf1 : nat), @eq nat lf1 (S lf4).
Lemma conj24: forall (v : BV) (lf3 : nat), @eq nat (BV_to_nat (BV_full_adder v nilbv true)) lf3.
Lemma conj23: forall (lf6 : bool) (v : BV) (lf3 : nat), @eq nat (BV_to_nat (BV_full_adder v nilbv lf6)) lf3.
Lemma conj20: forall (lf5 : BV) (v : BV) (lf3 : nat), @eq nat (BV_to_nat (BV_full_adder v lf5 true)) lf3.
Lemma conj19: forall (lf6 : bool) (lf5 : BV) (v : BV) (lf3 : nat), @eq nat (BV_to_nat (BV_full_adder v lf5 lf6)) lf3.
Lemma conj17: forall (lf2 : BV) (lf3 : nat), @eq nat (BV_to_nat lf2) lf3.
Lemma conj1: forall (lf1 : nat) (lf3 : nat), @eq nat lf1 lf3.


<---VALIDITY CHECKS--->
Time elapsed: 72 seconds
Valid:

Invalid:
Lemma conj1: forall (lf1 : nat) (lf3 : nat), @eq nat lf1 lf3.
Lemma conj17: forall (lf2 : BV) (lf3 : nat), @eq nat (BV_to_nat lf2) lf3.
Lemma conj19: forall (lf6 : bool) (lf5 : BV) (v : BV) (lf3 : nat), @eq nat (BV_to_nat (BV_full_adder v lf5 lf6)) lf3.
Lemma conj20: forall (lf5 : BV) (v : BV) (lf3 : nat), @eq nat (BV_to_nat (BV_full_adder v lf5 true)) lf3.
Lemma conj23: forall (lf6 : bool) (v : BV) (lf3 : nat), @eq nat (BV_to_nat (BV_full_adder v nilbv lf6)) lf3.
Lemma conj24: forall (v : BV) (lf3 : nat), @eq nat (BV_to_nat (BV_full_adder v nilbv true)) lf3.
Lemma conj33: forall (lf4 : nat) (lf1 : nat), @eq nat lf1 (S lf4).
Lemma conj41: forall (v : BV) (lf1 : nat), @eq nat lf1 (S (BV_to_nat v)).
Lemma conj49: forall (lf2 : BV) (lf4 : nat), @eq nat (BV_to_nat lf2) (S lf4).
Lemma conj51: forall (lf6 : bool) (lf5 : BV) (v : BV) (lf4 : nat), @eq nat (BV_to_nat (BV_full_adder v lf5 lf6)) (S lf4).
Lemma conj52: forall (lf5 : BV) (v : BV) (lf4 : nat), @eq nat (BV_to_nat (BV_full_adder v lf5 true)) (S lf4).
Lemma conj55: forall (lf6 : bool) (v : BV) (lf4 : nat), @eq nat (BV_to_nat (BV_full_adder v nilbv lf6)) (S lf4).
Lemma conj56: forall (v : BV) (lf4 : nat), @eq nat (BV_to_nat (BV_full_adder v nilbv true)) (S lf4).
Lemma conj57: forall (lf2 : BV) (v : BV), @eq nat (BV_to_nat lf2) (S (BV_to_nat v)).
Lemma conj59: forall (lf6 : bool) (lf5 : BV) (v : BV), @eq nat (BV_to_nat (BV_full_adder v lf5 lf6)) (S (BV_to_nat v)).
Lemma conj60: forall (lf5 : BV) (v : BV), @eq nat (BV_to_nat (BV_full_adder v lf5 true)) (S (BV_to_nat v)).
Lemma conj63: forall (lf6 : bool) (v : BV), @eq nat (BV_to_nat (BV_full_adder v nilbv lf6)) (S (BV_to_nat v)).


<---CREATE SKETCHES--->
Time elapsed: 72 seconds
Sketches:
Sketch conj17_sketch0 : @eq nat (##hole##) lf3
Sketch conj17_term_sketch0 : @eq nat (BV_to_nat lf2) (##hole##)
Sketch conj19_sketch0 : @eq nat (##hole##) lf3
Sketch conj19_sketch1 : @eq nat (BV_to_nat (##hole##)) lf3
Sketch conj19_term_sketch0 : @eq nat (BV_to_nat (BV_full_adder v lf5 lf6)) (##hole##)
Sketch conj19_term_sketch1 : @eq BV (BV_full_adder v lf5 lf6) (##hole##)
Sketch conj20_sketch0 : @eq nat (##hole##) lf3
Sketch conj20_sketch1 : @eq nat (BV_to_nat (BV_full_adder v lf5 (##hole##))) lf3
Sketch conj20_sketch2 : @eq nat (BV_to_nat (##hole##)) lf3
Sketch conj20_term_sketch0 : @eq nat (BV_to_nat (BV_full_adder v lf5 true)) (##hole##)
Sketch conj20_term_sketch1 : @eq bool true (##hole##)
Sketch conj20_term_sketch2 : @eq BV (BV_full_adder v lf5 true) (##hole##)
Sketch conj23_sketch0 : @eq nat (##hole##) lf3
Sketch conj23_sketch1 : @eq nat (BV_to_nat (##hole##)) lf3
Sketch conj23_term_sketch0 : @eq nat (BV_to_nat (BV_full_adder v nilbv lf6)) (##hole##)
Sketch conj23_term_sketch1 : @eq BV (BV_full_adder v nilbv lf6) (##hole##)
Sketch conj24_sketch0 : @eq nat (##hole##) lf3
Sketch conj24_sketch1 : @eq nat (BV_to_nat (##hole##)) lf3
Sketch conj24_sketch2 : @eq nat (BV_to_nat (BV_full_adder v nilbv (##hole##))) lf3
Sketch conj24_term_sketch0 : @eq nat (BV_to_nat (BV_full_adder v nilbv true)) (##hole##)
Sketch conj24_term_sketch1 : @eq BV (BV_full_adder v nilbv true) (##hole##)
Sketch conj24_term_sketch2 : @eq bool true (##hole##)
Sketch conj33_sketch0 : @eq nat lf1 (##hole##)
Sketch conj33_term_sketch0 : @eq nat (S lf4) (##hole##)
Sketch conj41_sketch0 : @eq nat lf1 (S (##hole##))
Sketch conj41_sketch1 : @eq nat lf1 (##hole##)
Sketch conj41_term_sketch0 : @eq nat (BV_to_nat v) (##hole##)
Sketch conj41_term_sketch1 : @eq nat (S (BV_to_nat v)) (##hole##)
Sketch conj49_sketch0 : @eq nat (BV_to_nat lf2) (##hole##)
Sketch conj49_sketch1 : @eq nat (##hole##) (S lf4)
Sketch conj49_term_sketch0 : @eq nat (S lf4) (##hole##)
Sketch conj49_term_sketch1 : @eq nat (BV_to_nat lf2) (##hole##)
Sketch conj51_sketch0 : @eq nat (BV_to_nat (BV_full_adder v lf5 lf6)) (##hole##)
Sketch conj51_sketch1 : @eq nat (##hole##) (S lf4)
Sketch conj51_sketch2 : @eq nat (BV_to_nat (##hole##)) (S lf4)
Sketch conj51_term_sketch0 : @eq nat (S lf4) (##hole##)
Sketch conj51_term_sketch1 : @eq nat (BV_to_nat (BV_full_adder v lf5 lf6)) (##hole##)
Sketch conj51_term_sketch2 : @eq BV (BV_full_adder v lf5 lf6) (##hole##)
Sketch conj52_sketch0 : @eq nat (##hole##) (S lf4)
Sketch conj52_sketch1 : @eq nat (BV_to_nat (BV_full_adder v lf5 true)) (##hole##)
Sketch conj52_sketch2 : @eq nat (BV_to_nat (BV_full_adder v lf5 (##hole##))) (S lf4)
Sketch conj52_sketch3 : @eq nat (BV_to_nat (##hole##)) (S lf4)
Sketch conj52_term_sketch0 : @eq nat (BV_to_nat (BV_full_adder v lf5 true)) (##hole##)
Sketch conj52_term_sketch1 : @eq nat (S lf4) (##hole##)
Sketch conj52_term_sketch2 : @eq bool true (##hole##)
Sketch conj52_term_sketch3 : @eq BV (BV_full_adder v lf5 true) (##hole##)
Sketch conj55_sketch0 : @eq nat (##hole##) (S lf4)
Sketch conj55_sketch1 : @eq nat (BV_to_nat (BV_full_adder v nilbv lf6)) (##hole##)
Sketch conj55_sketch2 : @eq nat (BV_to_nat (##hole##)) (S lf4)
Sketch conj55_term_sketch0 : @eq nat (BV_to_nat (BV_full_adder v nilbv lf6)) (##hole##)
Sketch conj55_term_sketch1 : @eq nat (S lf4) (##hole##)
Sketch conj55_term_sketch2 : @eq BV (BV_full_adder v nilbv lf6) (##hole##)
Sketch conj56_sketch0 : @eq nat (##hole##) (S lf4)
Sketch conj56_sketch1 : @eq nat (BV_to_nat (BV_full_adder v nilbv true)) (##hole##)
Sketch conj56_sketch2 : @eq nat (BV_to_nat (##hole##)) (S lf4)
Sketch conj56_sketch3 : @eq nat (BV_to_nat (BV_full_adder v nilbv (##hole##))) (S lf4)
Sketch conj56_term_sketch0 : @eq nat (BV_to_nat (BV_full_adder v nilbv true)) (##hole##)
Sketch conj56_term_sketch1 : @eq nat (S lf4) (##hole##)
Sketch conj56_term_sketch2 : @eq BV (BV_full_adder v nilbv true) (##hole##)
Sketch conj56_term_sketch3 : @eq bool true (##hole##)
Sketch conj57_sketch0 : @eq nat (BV_to_nat lf2) (S (##hole##))
Sketch conj57_sketch1 : @eq nat (##hole##) (S (BV_to_nat v))
Sketch conj57_sketch2 : @eq nat (BV_to_nat lf2) (##hole##)
Sketch conj57_term_sketch0 : @eq nat (BV_to_nat v) (##hole##)
Sketch conj57_term_sketch1 : @eq nat (BV_to_nat lf2) (##hole##)
Sketch conj57_term_sketch2 : @eq nat (S (BV_to_nat v)) (##hole##)
Sketch conj59_sketch0 : @eq nat (##hole##) (S (BV_to_nat v))
Sketch conj59_sketch1 : @eq nat (BV_to_nat (BV_full_adder v lf5 lf6)) (S (##hole##))
Sketch conj59_sketch2 : @eq nat (BV_to_nat (##hole##)) (S (BV_to_nat v))
Sketch conj59_sketch3 : @eq nat (BV_to_nat (BV_full_adder v lf5 lf6)) (##hole##)
Sketch conj59_term_sketch0 : @eq nat (BV_to_nat (BV_full_adder v lf5 lf6)) (##hole##)
Sketch conj59_term_sketch1 : @eq nat (BV_to_nat v) (##hole##)
Sketch conj59_term_sketch2 : @eq BV (BV_full_adder v lf5 lf6) (##hole##)
Sketch conj59_term_sketch3 : @eq nat (S (BV_to_nat v)) (##hole##)
Sketch conj60_sketch0 : @eq nat (##hole##) (S (BV_to_nat v))
Sketch conj60_sketch1 : @eq nat (BV_to_nat (BV_full_adder v lf5 true)) (S (##hole##))
Sketch conj60_sketch2 : @eq nat (BV_to_nat (BV_full_adder v lf5 true)) (##hole##)
Sketch conj60_sketch3 : @eq nat (BV_to_nat (BV_full_adder v lf5 (##hole##))) (S (BV_to_nat v))
Sketch conj60_sketch4 : @eq nat (BV_to_nat (##hole##)) (S (BV_to_nat v))
Sketch conj60_term_sketch0 : @eq nat (BV_to_nat (BV_full_adder v lf5 true)) (##hole##)
Sketch conj60_term_sketch1 : @eq nat (BV_to_nat v) (##hole##)
Sketch conj60_term_sketch2 : @eq nat (S (BV_to_nat v)) (##hole##)
Sketch conj60_term_sketch3 : @eq bool true (##hole##)
Sketch conj60_term_sketch4 : @eq BV (BV_full_adder v lf5 true) (##hole##)
Sketch conj63_sketch0 : @eq nat (##hole##) (S (BV_to_nat v))
Sketch conj63_sketch1 : @eq nat (BV_to_nat (BV_full_adder v nilbv lf6)) (S (##hole##))
Sketch conj63_sketch2 : @eq nat (BV_to_nat (BV_full_adder v nilbv lf6)) (##hole##)
Sketch conj63_sketch3 : @eq nat (BV_to_nat (##hole##)) (S (BV_to_nat v))
Sketch conj63_term_sketch0 : @eq nat (BV_to_nat (BV_full_adder v nilbv lf6)) (##hole##)
Sketch conj63_term_sketch1 : @eq nat (BV_to_nat v) (##hole##)
Sketch conj63_term_sketch2 : @eq nat (S (BV_to_nat v)) (##hole##)
Sketch conj63_term_sketch3 : @eq BV (BV_full_adder v nilbv lf6) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 474 seconds
Problems per Sketch:
Sketch conj52_sketch2 --> Problem  synth_20
Sketch conj52_sketch1 --> Problem  synth_7
Sketch conj33_sketch0 --> Problem  synth_15
Sketch conj60_term_sketch1 --> Problem  synth_18
Sketch conj59_term_sketch2 --> Problem  synth_5
Sketch conj23_sketch0 --> Problem  synth_1
Sketch conj57_term_sketch2 --> Problem  synth_13
Sketch conj60_term_sketch4 --> Problem  synth_9
Sketch conj59_term_sketch1 --> Problem  synth_18
Sketch conj59_sketch1 --> Problem  synth_23
Sketch conj60_sketch0 --> Problem  synth_13
Sketch conj20_term_sketch2 --> Problem  synth_9
Sketch conj24_sketch2 --> Problem  synth_12
Sketch conj24_sketch1 --> Problem  synth_3
Sketch conj17_term_sketch0 --> Problem  synth_2
Sketch conj63_term_sketch0 --> Problem  synth_10
Sketch conj56_term_sketch0 --> Problem  synth_13
Sketch conj24_sketch0 --> Problem  synth_1
Sketch conj60_term_sketch3 --> Problem  synth_8
Sketch conj23_sketch1 --> Problem  synth_3
Sketch conj60_term_sketch2 --> Problem  synth_13
Sketch conj60_sketch1 --> Problem  synth_24
Sketch conj55_sketch1 --> Problem  synth_10
Sketch conj60_sketch2 --> Problem  synth_7
Sketch conj59_sketch3 --> Problem  synth_4
Sketch conj59_sketch2 --> Problem  synth_14
Sketch conj52_term_sketch1 --> Problem  synth_16
Sketch conj20_sketch0 --> Problem  synth_1
Sketch conj24_term_sketch0 --> Problem  synth_13
Sketch conj20_term_sketch0 --> Problem  synth_7
Sketch conj33_term_sketch0 --> Problem  synth_16
Sketch conj19_term_sketch1 --> Problem  synth_5
Sketch conj57_term_sketch0 --> Problem  synth_18
Sketch conj51_term_sketch2 --> Problem  synth_5
Sketch conj60_term_sketch0 --> Problem  synth_7
Sketch conj52_term_sketch2 --> Problem  synth_8
Sketch conj41_term_sketch0 --> Problem  synth_18
Sketch conj60_sketch3 --> Problem  synth_25
Sketch conj51_sketch0 --> Problem  synth_4
Sketch conj23_term_sketch0 --> Problem  synth_10
Sketch conj56_term_sketch3 --> Problem  synth_8
Sketch conj19_term_sketch0 --> Problem  synth_4
Sketch conj24_term_sketch1 --> Problem  synth_14
Sketch conj52_term_sketch3 --> Problem  synth_9
Sketch conj63_term_sketch1 --> Problem  synth_18
Sketch conj57_sketch2 --> Problem  synth_2
Sketch conj51_term_sketch1 --> Problem  synth_4
Sketch conj51_term_sketch0 --> Problem  synth_16
Sketch conj56_sketch3 --> Problem  synth_21
Sketch conj55_term_sketch0 --> Problem  synth_10
Sketch conj52_term_sketch0 --> Problem  synth_7
Sketch conj19_sketch0 --> Problem  synth_1
Sketch conj17_sketch0 --> Problem  synth_1
Sketch conj49_sketch0 --> Problem  synth_2
Sketch conj63_sketch2 --> Problem  synth_10
Sketch conj20_sketch2 --> Problem  synth_3
Sketch conj55_term_sketch1 --> Problem  synth_16
Sketch conj52_sketch0 --> Problem  synth_16
Sketch conj59_sketch0 --> Problem  synth_13
Sketch conj49_term_sketch1 --> Problem  synth_2
Sketch conj23_term_sketch1 --> Problem  synth_11
Sketch conj20_sketch1 --> Problem  synth_6
Sketch conj63_term_sketch3 --> Problem  synth_11
Sketch conj63_sketch0 --> Problem  synth_13
Sketch conj63_sketch3 --> Problem  synth_14
Sketch conj59_term_sketch0 --> Problem  synth_4
Sketch conj52_sketch3 --> Problem  synth_19
Sketch conj59_term_sketch3 --> Problem  synth_13
Sketch conj51_sketch1 --> Problem  synth_16
Sketch conj55_sketch0 --> Problem  synth_16
Sketch conj63_sketch1 --> Problem  synth_26
Sketch conj56_term_sketch2 --> Problem  synth_14
Sketch conj57_sketch1 --> Problem  synth_13
Sketch conj20_term_sketch1 --> Problem  synth_8
Sketch conj56_term_sketch1 --> Problem  synth_16
Sketch conj56_sketch2 --> Problem  synth_19
Sketch conj19_sketch1 --> Problem  synth_3
Sketch conj41_sketch1 --> Problem  synth_15
Sketch conj57_term_sketch1 --> Problem  synth_2
Sketch conj24_term_sketch2 --> Problem  synth_8
Sketch conj41_sketch0 --> Problem  synth_17
Sketch conj60_sketch4 --> Problem  synth_14
Sketch conj56_sketch0 --> Problem  synth_16
Sketch conj57_sketch0 --> Problem  synth_22
Sketch conj56_sketch1 --> Problem  synth_13
Sketch conj55_term_sketch2 --> Problem  synth_11
Sketch conj41_term_sketch1 --> Problem  synth_13
Sketch conj51_sketch2 --> Problem  synth_19
Sketch conj63_term_sketch2 --> Problem  synth_13
Sketch conj55_sketch2 --> Problem  synth_19
Sketch conj49_sketch1 --> Problem  synth_16
Sketch conj49_term_sketch0 --> Problem  synth_16


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 837 seconds

Problem: synth_22

Problem: synth_20
 true

Problem: synth_18
 BV.BV_to_nat (Adder.BV_full_adder v BV.nilbv false)
 BV.BV_to_nat v

Problem: synth_17

Problem: synth_21
 true

Problem: synth_26
 BV.BV_to_nat v

Problem: synth_9
 BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) v true) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) v true) BV.nilbv)
 Adder.BV_full_adder v BV.nilbv true
 Adder.BV_full_adder lf5 v true
 Adder.BV_full_adder v lf5 true

Problem: synth_25
 true

Problem: synth_13
 S (BV.BV_to_nat v)

Problem: synth_6
 true

Problem: synth_11
 BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) v (if lf6 then true else false)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) v (if lf6 then true else false)) BV.nilbv)
 Adder.BV_full_adder v BV.nilbv (if lf6 then true else false)
 BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) v lf6) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) v lf6) BV.nilbv)
 BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) v true) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) v true) BV.nilbv)
 Adder.BV_full_adder v BV.nilbv lf6
 Adder.BV_full_adder v BV.nilbv true

Problem: synth_7
 S (BV.BV_to_nat v)

Problem: synth_4
 S (BV.BV_to_nat v)

Problem: synth_1
 lf3

Problem: synth_23
 BV.BV_to_nat (Adder.BV_full_adder v BV.nilbv false)
 BV.BV_to_nat (Adder.BV_full_adder lf5 v false)
 BV.BV_to_nat (Adder.BV_full_adder v lf5 false)
 BV.BV_to_nat v

Problem: synth_16
 S lf4

Problem: synth_19

Problem: synth_15
 lf1

Problem: synth_14
 BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) v true) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) v true) BV.nilbv)
 Adder.BV_full_adder v BV.nilbv true

Problem: synth_10
 S (BV.BV_to_nat v)

Problem: synth_8
 true

Problem: synth_24
 BV.BV_to_nat v

Problem: synth_3

Problem: synth_12
 true

Problem: synth_5
 Adder.BV_full_adder v BV.nilbv lf6
 Adder.BV_full_adder lf5 v lf6
 Adder.BV_full_adder v lf5 lf6
 Adder.BV_full_adder v BV.nilbv true
 Adder.BV_full_adder lf5 v true
 Adder.BV_full_adder v lf5 true

Problem: synth_2
 BV.BV_to_nat lf2

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 838 seconds
Lemmas:
Lemma candidate_1: forall (v : BV), @eq nat (BV_to_nat (BV_full_adder v nilbv true)) (S (BV_to_nat v)).
Lemma candidate_2: forall (lf3 : nat), @eq nat (lf3) lf3.
Lemma candidate_3: forall (lf2 : BV), @eq nat (BV_to_nat lf2) (BV.BV_to_nat lf2).
Lemma candidate_4: forall (lf3 : nat), @eq nat (lf3) lf3.
Lemma candidate_5: forall (v : BV) (lf5 : BV) (lf6 : bool), @eq nat (BV_to_nat (BV_full_adder v lf5 lf6)) (S (BV.BV_to_nat v)).
Lemma candidate_6: forall (v : BV) (lf5 : BV) (lf6 : bool), @eq BV (BV_full_adder v lf5 lf6) (Adder.BV_full_adder v BV.nilbv lf6).
Lemma candidate_7: forall (v : BV) (lf5 : BV) (lf6 : bool), @eq BV (BV_full_adder v lf5 lf6) (Adder.BV_full_adder lf5 v lf6).
Lemma candidate_8: forall (v : BV) (lf5 : BV) (lf6 : bool), @eq BV (BV_full_adder v lf5 lf6) (Adder.BV_full_adder v lf5 lf6).
Lemma candidate_9: forall (v : BV) (lf5 : BV) (lf6 : bool), @eq BV (BV_full_adder v lf5 lf6) (Adder.BV_full_adder v BV.nilbv true).
Lemma candidate_10: forall (v : BV) (lf5 : BV) (lf6 : bool), @eq BV (BV_full_adder v lf5 lf6) (Adder.BV_full_adder lf5 v true).
Lemma candidate_11: forall (v : BV) (lf5 : BV) (lf6 : bool), @eq BV (BV_full_adder v lf5 lf6) (Adder.BV_full_adder v lf5 true).
Lemma candidate_12: forall (lf3 : nat), @eq nat (lf3) lf3.
Lemma candidate_13: forall (lf3 : nat) (v : BV) (lf5 : BV), @eq nat (BV_to_nat (BV_full_adder v lf5 (true))) lf3.
Lemma candidate_14: forall (v : BV) (lf5 : BV), @eq nat (BV_to_nat (BV_full_adder v lf5 true)) (S (BV.BV_to_nat v)).
Lemma candidate_15: @eq bool true (true).
Lemma candidate_16: forall (v : BV) (lf5 : BV), @eq BV (BV_full_adder v lf5 true)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) v true) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) v true) BV.nilbv)).
Lemma candidate_17: forall (v : BV) (lf5 : BV), @eq BV (BV_full_adder v lf5 true) (Adder.BV_full_adder v BV.nilbv true).
Lemma candidate_18: forall (v : BV) (lf5 : BV), @eq BV (BV_full_adder v lf5 true) (Adder.BV_full_adder lf5 v true).
Lemma candidate_19: forall (v : BV) (lf5 : BV), @eq BV (BV_full_adder v lf5 true) (Adder.BV_full_adder v lf5 true).
Lemma candidate_20: forall (lf3 : nat), @eq nat (lf3) lf3.
Lemma candidate_21: forall (v : BV) (lf6 : bool), @eq nat (BV_to_nat (BV_full_adder v nilbv lf6)) (S (BV.BV_to_nat v)).
Lemma candidate_22: forall (v : BV) (lf6 : bool), @eq BV (BV_full_adder v nilbv lf6)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) v (if lf6 then true else false)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) v (if lf6 then true else false)) BV.nilbv)).
Lemma candidate_23: forall (v : BV) (lf6 : bool), @eq BV (BV_full_adder v nilbv lf6)   (Adder.BV_full_adder v BV.nilbv (if lf6 then true else false)).
Lemma candidate_24: forall (v : BV) (lf6 : bool), @eq BV (BV_full_adder v nilbv lf6)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) v lf6) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) v lf6) BV.nilbv)).
Lemma candidate_25: forall (v : BV) (lf6 : bool), @eq BV (BV_full_adder v nilbv lf6)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) v true) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) v true) BV.nilbv)).
Lemma candidate_26: forall (v : BV) (lf6 : bool), @eq BV (BV_full_adder v nilbv lf6) (Adder.BV_full_adder v BV.nilbv lf6).
Lemma candidate_27: forall (v : BV) (lf6 : bool), @eq BV (BV_full_adder v nilbv lf6) (Adder.BV_full_adder v BV.nilbv true).
Lemma candidate_28: forall (lf3 : nat), @eq nat (lf3) lf3.
Lemma candidate_29: forall (lf3 : nat) (v : BV), @eq nat (BV_to_nat (BV_full_adder v nilbv (true))) lf3.
Lemma candidate_30: forall (v : BV), @eq nat (BV_to_nat (BV_full_adder v nilbv true)) (S (BV.BV_to_nat v)).
Lemma candidate_31: forall (v : BV), @eq BV (BV_full_adder v nilbv true)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) v true) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) v true) BV.nilbv)).
Lemma candidate_32: forall (v : BV), @eq BV (BV_full_adder v nilbv true) (Adder.BV_full_adder v BV.nilbv true).
Lemma candidate_33: @eq bool true (true).
Lemma candidate_34: forall (lf1 : nat), @eq nat lf1 (lf1).
Lemma candidate_35: forall (lf4 : nat), @eq nat (S lf4) (S lf4).
Lemma candidate_36: forall (lf1 : nat), @eq nat lf1 (lf1).
Lemma candidate_37: forall (v : BV), @eq nat (BV_to_nat v) (BV.BV_to_nat (Adder.BV_full_adder v BV.nilbv false)).
Lemma candidate_38: forall (v : BV), @eq nat (BV_to_nat v) (BV.BV_to_nat v).
Lemma candidate_39: forall (v : BV), @eq nat (S (BV_to_nat v)) (S (BV.BV_to_nat v)).
Lemma candidate_40: forall (lf2 : BV), @eq nat (BV_to_nat lf2) (BV.BV_to_nat lf2).
Lemma candidate_41: forall (lf4 : nat), @eq nat (S lf4) (S lf4).
Lemma candidate_42: forall (lf4 : nat), @eq nat (S lf4) (S lf4).
Lemma candidate_43: forall (lf2 : BV), @eq nat (BV_to_nat lf2) (BV.BV_to_nat lf2).
Lemma candidate_44: forall (v : BV) (lf5 : BV) (lf6 : bool), @eq nat (BV_to_nat (BV_full_adder v lf5 lf6)) (S (BV.BV_to_nat v)).
Lemma candidate_45: forall (lf4 : nat), @eq nat (S lf4) (S lf4).
Lemma candidate_46: forall (lf4 : nat), @eq nat (S lf4) (S lf4).
Lemma candidate_47: forall (v : BV) (lf5 : BV) (lf6 : bool), @eq nat (BV_to_nat (BV_full_adder v lf5 lf6)) (S (BV.BV_to_nat v)).
Lemma candidate_48: forall (v : BV) (lf5 : BV) (lf6 : bool), @eq BV (BV_full_adder v lf5 lf6) (Adder.BV_full_adder v BV.nilbv lf6).
Lemma candidate_49: forall (v : BV) (lf5 : BV) (lf6 : bool), @eq BV (BV_full_adder v lf5 lf6) (Adder.BV_full_adder lf5 v lf6).
Lemma candidate_50: forall (v : BV) (lf5 : BV) (lf6 : bool), @eq BV (BV_full_adder v lf5 lf6) (Adder.BV_full_adder v lf5 lf6).
Lemma candidate_51: forall (v : BV) (lf5 : BV) (lf6 : bool), @eq BV (BV_full_adder v lf5 lf6) (Adder.BV_full_adder v BV.nilbv true).
Lemma candidate_52: forall (v : BV) (lf5 : BV) (lf6 : bool), @eq BV (BV_full_adder v lf5 lf6) (Adder.BV_full_adder lf5 v true).
Lemma candidate_53: forall (v : BV) (lf5 : BV) (lf6 : bool), @eq BV (BV_full_adder v lf5 lf6) (Adder.BV_full_adder v lf5 true).
Lemma candidate_54: forall (lf4 : nat), @eq nat (S lf4) (S lf4).
Lemma candidate_55: forall (v : BV) (lf5 : BV), @eq nat (BV_to_nat (BV_full_adder v lf5 true)) (S (BV.BV_to_nat v)).
Lemma candidate_56: forall (lf4 : nat) (v : BV) (lf5 : BV), @eq nat (BV_to_nat (BV_full_adder v lf5 (true))) (S lf4).
Lemma candidate_57: forall (v : BV) (lf5 : BV), @eq nat (BV_to_nat (BV_full_adder v lf5 true)) (S (BV.BV_to_nat v)).
Lemma candidate_58: forall (lf4 : nat), @eq nat (S lf4) (S lf4).
Lemma candidate_59: @eq bool true (true).
Lemma candidate_60: forall (v : BV) (lf5 : BV), @eq BV (BV_full_adder v lf5 true)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) v true) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) v true) BV.nilbv)).
Lemma candidate_61: forall (v : BV) (lf5 : BV), @eq BV (BV_full_adder v lf5 true) (Adder.BV_full_adder v BV.nilbv true).
Lemma candidate_62: forall (v : BV) (lf5 : BV), @eq BV (BV_full_adder v lf5 true) (Adder.BV_full_adder lf5 v true).
Lemma candidate_63: forall (v : BV) (lf5 : BV), @eq BV (BV_full_adder v lf5 true) (Adder.BV_full_adder v lf5 true).
Lemma candidate_64: forall (lf4 : nat), @eq nat (S lf4) (S lf4).
Lemma candidate_65: forall (v : BV) (lf6 : bool), @eq nat (BV_to_nat (BV_full_adder v nilbv lf6)) (S (BV.BV_to_nat v)).
Lemma candidate_66: forall (v : BV) (lf6 : bool), @eq nat (BV_to_nat (BV_full_adder v nilbv lf6)) (S (BV.BV_to_nat v)).
Lemma candidate_67: forall (lf4 : nat), @eq nat (S lf4) (S lf4).
Lemma candidate_68: forall (v : BV) (lf6 : bool), @eq BV (BV_full_adder v nilbv lf6)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) v (if lf6 then true else false)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) v (if lf6 then true else false)) BV.nilbv)).
Lemma candidate_69: forall (v : BV) (lf6 : bool), @eq BV (BV_full_adder v nilbv lf6)   (Adder.BV_full_adder v BV.nilbv (if lf6 then true else false)).
Lemma candidate_70: forall (v : BV) (lf6 : bool), @eq BV (BV_full_adder v nilbv lf6)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) v lf6) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) v lf6) BV.nilbv)).
Lemma candidate_71: forall (v : BV) (lf6 : bool), @eq BV (BV_full_adder v nilbv lf6)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) v true) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) v true) BV.nilbv)).
Lemma candidate_72: forall (v : BV) (lf6 : bool), @eq BV (BV_full_adder v nilbv lf6) (Adder.BV_full_adder v BV.nilbv lf6).
Lemma candidate_73: forall (v : BV) (lf6 : bool), @eq BV (BV_full_adder v nilbv lf6) (Adder.BV_full_adder v BV.nilbv true).
Lemma candidate_74: forall (lf4 : nat), @eq nat (S lf4) (S lf4).
Lemma candidate_75: forall (v : BV), @eq nat (BV_to_nat (BV_full_adder v nilbv true)) (S (BV.BV_to_nat v)).
Lemma candidate_76: forall (lf4 : nat) (v : BV), @eq nat (BV_to_nat (BV_full_adder v nilbv (true))) (S lf4).
Lemma candidate_77: forall (v : BV), @eq nat (BV_to_nat (BV_full_adder v nilbv true)) (S (BV.BV_to_nat v)).
Lemma candidate_78: forall (lf4 : nat), @eq nat (S lf4) (S lf4).
Lemma candidate_79: forall (v : BV), @eq BV (BV_full_adder v nilbv true)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) v true) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) v true) BV.nilbv)).
Lemma candidate_80: forall (v : BV), @eq BV (BV_full_adder v nilbv true) (Adder.BV_full_adder v BV.nilbv true).
Lemma candidate_81: @eq bool true (true).
Lemma candidate_82: forall (v : BV), @eq nat (S (BV.BV_to_nat v)) (S (BV_to_nat v)).
Lemma candidate_83: forall (lf2 : BV), @eq nat (BV_to_nat lf2) (BV.BV_to_nat lf2).
Lemma candidate_84: forall (v : BV), @eq nat (BV_to_nat v) (BV.BV_to_nat (Adder.BV_full_adder v BV.nilbv false)).
Lemma candidate_85: forall (v : BV), @eq nat (BV_to_nat v) (BV.BV_to_nat v).
Lemma candidate_86: forall (lf2 : BV), @eq nat (BV_to_nat lf2) (BV.BV_to_nat lf2).
Lemma candidate_87: forall (v : BV), @eq nat (S (BV_to_nat v)) (S (BV.BV_to_nat v)).
Lemma candidate_88: forall (v : BV), @eq nat (S (BV.BV_to_nat v)) (S (BV_to_nat v)).
Lemma candidate_89: forall (v : BV) (lf5 : BV) (lf6 : bool), @eq nat (BV_to_nat (BV_full_adder v lf5 lf6))   (S (BV.BV_to_nat (Adder.BV_full_adder v BV.nilbv false))).
Lemma candidate_90: forall (v : BV) (lf5 : BV) (lf6 : bool), @eq nat (BV_to_nat (BV_full_adder v lf5 lf6))   (S (BV.BV_to_nat (Adder.BV_full_adder lf5 v false))).
Lemma candidate_91: forall (v : BV) (lf5 : BV) (lf6 : bool), @eq nat (BV_to_nat (BV_full_adder v lf5 lf6))   (S (BV.BV_to_nat (Adder.BV_full_adder v lf5 false))).
Lemma candidate_92: forall (v : BV) (lf5 : BV) (lf6 : bool), @eq nat (BV_to_nat (BV_full_adder v lf5 lf6)) (S (BV.BV_to_nat v)).
Lemma candidate_93: forall (v : BV), @eq nat   (BV_to_nat      (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) v true) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) v true) BV.nilbv)))   (S (BV_to_nat v)).
Lemma candidate_94: forall (v : BV), @eq nat (BV_to_nat (Adder.BV_full_adder v BV.nilbv true)) (S (BV_to_nat v)).
Lemma candidate_95: forall (v : BV) (lf5 : BV) (lf6 : bool), @eq nat (BV_to_nat (BV_full_adder v lf5 lf6)) (S (BV.BV_to_nat v)).
Lemma candidate_96: forall (v : BV) (lf5 : BV) (lf6 : bool), @eq nat (BV_to_nat (BV_full_adder v lf5 lf6)) (S (BV.BV_to_nat v)).
Lemma candidate_97: forall (v : BV), @eq nat (BV_to_nat v) (BV.BV_to_nat (Adder.BV_full_adder v BV.nilbv false)).
Lemma candidate_98: forall (v : BV), @eq nat (BV_to_nat v) (BV.BV_to_nat v).
Lemma candidate_99: forall (v : BV) (lf5 : BV) (lf6 : bool), @eq BV (BV_full_adder v lf5 lf6) (Adder.BV_full_adder v BV.nilbv lf6).
Lemma candidate_100: forall (v : BV) (lf5 : BV) (lf6 : bool), @eq BV (BV_full_adder v lf5 lf6) (Adder.BV_full_adder lf5 v lf6).
Lemma candidate_101: forall (v : BV) (lf5 : BV) (lf6 : bool), @eq BV (BV_full_adder v lf5 lf6) (Adder.BV_full_adder v lf5 lf6).
Lemma candidate_102: forall (v : BV) (lf5 : BV) (lf6 : bool), @eq BV (BV_full_adder v lf5 lf6) (Adder.BV_full_adder v BV.nilbv true).
Lemma candidate_103: forall (v : BV) (lf5 : BV) (lf6 : bool), @eq BV (BV_full_adder v lf5 lf6) (Adder.BV_full_adder lf5 v true).
Lemma candidate_104: forall (v : BV) (lf5 : BV) (lf6 : bool), @eq BV (BV_full_adder v lf5 lf6) (Adder.BV_full_adder v lf5 true).
Lemma candidate_105: forall (v : BV), @eq nat (S (BV_to_nat v)) (S (BV.BV_to_nat v)).
Lemma candidate_106: forall (v : BV), @eq nat (S (BV.BV_to_nat v)) (S (BV_to_nat v)).
Lemma candidate_107: forall (v : BV) (lf5 : BV), @eq nat (BV_to_nat (BV_full_adder v lf5 true)) (S (BV.BV_to_nat v)).
Lemma candidate_108: forall (v : BV) (lf5 : BV), @eq nat (BV_to_nat (BV_full_adder v lf5 true)) (S (BV.BV_to_nat v)).
Lemma candidate_109: forall (v : BV) (lf5 : BV), @eq nat (BV_to_nat (BV_full_adder v lf5 (true))) (S (BV_to_nat v)).
Lemma candidate_110: forall (v : BV), @eq nat   (BV_to_nat      (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) v true) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) v true) BV.nilbv)))   (S (BV_to_nat v)).
Lemma candidate_111: forall (v : BV), @eq nat (BV_to_nat (Adder.BV_full_adder v BV.nilbv true)) (S (BV_to_nat v)).
Lemma candidate_112: forall (v : BV) (lf5 : BV), @eq nat (BV_to_nat (BV_full_adder v lf5 true)) (S (BV.BV_to_nat v)).
Lemma candidate_113: forall (v : BV), @eq nat (BV_to_nat v) (BV.BV_to_nat (Adder.BV_full_adder v BV.nilbv false)).
Lemma candidate_114: forall (v : BV), @eq nat (BV_to_nat v) (BV.BV_to_nat v).
Lemma candidate_115: forall (v : BV), @eq nat (S (BV_to_nat v)) (S (BV.BV_to_nat v)).
Lemma candidate_116: @eq bool true (true).
Lemma candidate_117: forall (v : BV) (lf5 : BV), @eq BV (BV_full_adder v lf5 true)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) v true) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) v true) BV.nilbv)).
Lemma candidate_118: forall (v : BV) (lf5 : BV), @eq BV (BV_full_adder v lf5 true) (Adder.BV_full_adder v BV.nilbv true).
Lemma candidate_119: forall (v : BV) (lf5 : BV), @eq BV (BV_full_adder v lf5 true) (Adder.BV_full_adder lf5 v true).
Lemma candidate_120: forall (v : BV) (lf5 : BV), @eq BV (BV_full_adder v lf5 true) (Adder.BV_full_adder v lf5 true).
Lemma candidate_121: forall (v : BV), @eq nat (S (BV.BV_to_nat v)) (S (BV_to_nat v)).
Lemma candidate_122: forall (v : BV) (lf6 : bool), @eq nat (BV_to_nat (BV_full_adder v nilbv lf6)) (S (BV.BV_to_nat v)).
Lemma candidate_123: forall (v : BV) (lf6 : bool), @eq nat (BV_to_nat (BV_full_adder v nilbv lf6)) (S (BV.BV_to_nat v)).
Lemma candidate_124: forall (v : BV), @eq nat   (BV_to_nat      (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) v true) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) v true) BV.nilbv)))   (S (BV_to_nat v)).
Lemma candidate_125: forall (v : BV), @eq nat (BV_to_nat (Adder.BV_full_adder v BV.nilbv true)) (S (BV_to_nat v)).
Lemma candidate_126: forall (v : BV) (lf6 : bool), @eq nat (BV_to_nat (BV_full_adder v nilbv lf6)) (S (BV.BV_to_nat v)).
Lemma candidate_127: forall (v : BV), @eq nat (BV_to_nat v) (BV.BV_to_nat (Adder.BV_full_adder v BV.nilbv false)).
Lemma candidate_128: forall (v : BV), @eq nat (BV_to_nat v) (BV.BV_to_nat v).
Lemma candidate_129: forall (v : BV), @eq nat (S (BV_to_nat v)) (S (BV.BV_to_nat v)).
Lemma candidate_130: forall (v : BV) (lf6 : bool), @eq BV (BV_full_adder v nilbv lf6)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) v (if lf6 then true else false)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) v (if lf6 then true else false)) BV.nilbv)).
Lemma candidate_131: forall (v : BV) (lf6 : bool), @eq BV (BV_full_adder v nilbv lf6)   (Adder.BV_full_adder v BV.nilbv (if lf6 then true else false)).
Lemma candidate_132: forall (v : BV) (lf6 : bool), @eq BV (BV_full_adder v nilbv lf6)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) v lf6) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) v lf6) BV.nilbv)).
Lemma candidate_133: forall (v : BV) (lf6 : bool), @eq BV (BV_full_adder v nilbv lf6)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) v true) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) v true) BV.nilbv)).
Lemma candidate_134: forall (v : BV) (lf6 : bool), @eq BV (BV_full_adder v nilbv lf6) (Adder.BV_full_adder v BV.nilbv lf6).
Lemma candidate_135: forall (v : BV) (lf6 : bool), @eq BV (BV_full_adder v nilbv lf6) (Adder.BV_full_adder v BV.nilbv true).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 943 seconds
Duplicates removed: 94
Filtered by Quickchick: 19
Filtered by script: 12
Remaining: 10

Lemmas: 
Lemma candidate_7: forall (v : BV) (lf5 : BV) (lf6 : bool), @eq BV (BV_full_adder v lf5 lf6) (Adder.BV_full_adder lf5 v lf6).
Lemma candidate_18: forall (v : BV) (lf5 : BV), @eq BV (BV_full_adder v lf5 true) (Adder.BV_full_adder lf5 v true).
Lemma candidate_30: forall (v : BV), @eq nat (BV_to_nat (BV_full_adder v nilbv true)) (S (BV.BV_to_nat v)).
Lemma candidate_94: forall (v : BV), @eq nat (BV_to_nat (Adder.BV_full_adder v BV.nilbv true)) (S (BV_to_nat v)).
Lemma candidate_37: forall (v : BV), @eq nat (BV_to_nat v) (BV.BV_to_nat (Adder.BV_full_adder v BV.nilbv false)).
Lemma candidate_23: forall (v : BV) (lf6 : bool), @eq BV (BV_full_adder v nilbv lf6)   (Adder.BV_full_adder v BV.nilbv (if lf6 then true else false)).
Lemma candidate_24: forall (v : BV) (lf6 : bool), @eq BV (BV_full_adder v nilbv lf6)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) v lf6) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) v lf6) BV.nilbv)).
Lemma candidate_31: forall (v : BV), @eq BV (BV_full_adder v nilbv true)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) v true) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) v true) BV.nilbv)).
Lemma candidate_93: forall (v : BV), @eq nat   (BV_to_nat      (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) v true) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) v true) BV.nilbv)))   (S (BV_to_nat v)).
Lemma candidate_22: forall (v : BV) (lf6 : bool), @eq BV (BV_full_adder v nilbv lf6)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) v (if lf6 then true else false)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) v (if lf6 then true else false)) BV.nilbv)).