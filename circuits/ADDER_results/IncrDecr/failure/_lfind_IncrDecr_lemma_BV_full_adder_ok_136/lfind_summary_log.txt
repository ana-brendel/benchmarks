LFind Results
LFind Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/IncrDecr/_lfind_IncrDecr_lemma_BV_full_adder_ok_136

Number of Lemmas: 135
Number of Lemmas (after duplicates removed): 41
Number of Lemmas (after QuickChick used to filter): 22
* Number of Candidate Lemmas: 10

Time until ranking: 944
Time to complete: 1454

Stuck state true independent of hypotheses: true

Category 1:
Count = 0


Category 2:
Count = 2

Lemma candidate_30: forall (v : BV), @eq nat (BV_to_nat (BV_full_adder v nilbv true)) (S (BV.BV_to_nat v)).
Lemma candidate_94: forall (v : BV), @eq nat (BV_to_nat (Adder.BV_full_adder v BV.nilbv true)) (S (BV_to_nat v)).

Category 3 (provable):
Count = 3

Lemma candidate_37: forall (v : BV), @eq nat (BV_to_nat v) (BV.BV_to_nat (Adder.BV_full_adder v BV.nilbv false)).
Lemma candidate_23: forall (v : BV) (lf6 : bool), @eq BV (BV_full_adder v nilbv lf6)   (Adder.BV_full_adder v BV.nilbv (if lf6 then true else false)).
Lemma candidate_24: forall (v : BV) (lf6 : bool), @eq BV (BV_full_adder v nilbv lf6)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) v lf6) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) v lf6) BV.nilbv)).

Category 3 (not provable):
Count = 5

Lemma candidate_7: forall (v : BV) (lf5 : BV) (lf6 : bool), @eq BV (BV_full_adder v lf5 lf6) (Adder.BV_full_adder lf5 v lf6).
Lemma candidate_18: forall (v : BV) (lf5 : BV), @eq BV (BV_full_adder v lf5 true) (Adder.BV_full_adder lf5 v true).
Lemma candidate_31: forall (v : BV), @eq BV (BV_full_adder v nilbv true)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) v true) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) v true) BV.nilbv)).
Lemma candidate_93: forall (v : BV), @eq nat   (BV_to_nat      (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) v true) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) v true) BV.nilbv)))   (S (BV_to_nat v)).
Lemma candidate_22: forall (v : BV) (lf6 : bool), @eq BV (BV_full_adder v nilbv lf6)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) v (if lf6 then true else false)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) v (if lf6 then true else false)) BV.nilbv)).