LFind Results
LFind Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/AdderProof/_lfind_AdderProof_lemma_plus_permute2_175

Number of Lemmas: 140
Number of Lemmas (after duplicates removed): 44
Number of Lemmas (after QuickChick used to filter): 32
* Number of Candidate Lemmas: 25

Time until ranking: 2499
Time to complete: 3132

Stuck state true independent of hypotheses: true

Category 1:
Count = 14

Lemma candidate_112: forall (lf9 : nat) (lf10 : nat), @eq nat (Nat.add lf10 lf9) (PeanoNat.Nat.add lf9 lf10).
Lemma candidate_11: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9) (PeanoNat.Nat.add lf9 lf8).
Lemma candidate_12: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10) (PeanoNat.Nat.add lf10 lf7).
Lemma candidate_34: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)).
Lemma candidate_55: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) false)).
Lemma candidate_8: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_5: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf7) lf9)).
Lemma candidate_4: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_39: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false))).
Lemma candidate_3: forall (l : list bool) (lf9 : nat), @eq nat   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add (Nat.add (BV_to_nat l) lf9) (BV_to_nat l)) lf9))   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) lf9) lf9)).
Lemma candidate_2: forall (l0 : list bool) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 (BV_to_nat l0)) lf10)         (BV_to_nat l0)))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) (BV_to_nat l0))         (BV_to_nat l0))).
Lemma candidate_33: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_54: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 false)).
Lemma candidate_40: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))).

Category 2:
Count = 11

Lemma candidate_32: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@cons bool false (@nil bool)) false)).
Lemma candidate_53: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@cons bool false (@nil bool)) false)).
Lemma candidate_31: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_52: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) (Adder.BV_full_adder_carry l0 (@nil bool) false))).
Lemma candidate_48: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf7) (BV_to_nat l0))).
Lemma candidate_29: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))).
Lemma candidate_50: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l0 false))).
Lemma candidate_30: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_51: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 (Adder.BV_full_adder_carry l0 (@nil bool) false))).
Lemma candidate_38: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat (Adder.BV_full_adder_carry l (@nil bool) false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))).
Lemma candidate_37: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))).

Category 3 (provable):
Count = 0


Category 3 (not provable):
Count = 0
