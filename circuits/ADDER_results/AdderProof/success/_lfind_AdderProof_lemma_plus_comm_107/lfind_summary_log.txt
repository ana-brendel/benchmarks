LFind Results
LFind Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/AdderProof/_lfind_AdderProof_lemma_plus_comm_107

Number of Lemmas: 336
Number of Lemmas (after duplicates removed): 141
Number of Lemmas (after QuickChick used to filter): 97
* Number of Candidate Lemmas: 71

Time until ranking: 3287
Time to complete: 7534

Stuck state true independent of hypotheses: true

Category 1:
Count = 4

Lemma candidate_34: forall (lf7 : nat) (l : list bool) (lf5 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf5) (BV_to_nat l))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf5 (BV_to_nat l)) lf7).
Lemma candidate_4: forall (lf9 : nat) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (Nat.add (Nat.add (bool_to_nat lf8) lf9) (bool_to_nat lf8)) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf9 (bool_to_nat lf8)) lf9)      (bool_to_nat lf8)).
Lemma candidate_2: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (Nat.add (Nat.add (bool_to_nat lf8) (BV_to_nat l)) (bool_to_nat lf8))      (BV_to_nat l))   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (bool_to_nat lf8))         (BV_to_nat l)) (bool_to_nat lf8)).
Lemma candidate_3: forall (a : bool) (cin : bool) (lf9 : nat), @eq nat   (PeanoNat.Nat.add      (Nat.add (Nat.add (bool_to_nat (half_adder_carry a cin)) lf9)         (bool_to_nat (half_adder_carry a cin))) lf9)   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add lf9 (bool_to_nat (half_adder_carry a cin)))         lf9) (bool_to_nat (half_adder_carry a cin))).

Category 2:
Count = 2

Lemma candidate_6: forall (lf7 : nat) (lf9 : nat), @eq nat (PeanoNat.Nat.add (Nat.add (Nat.add lf7 lf9) lf7) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf9 lf7) lf9) lf7).
Lemma candidate_5: forall (l : list bool) (lf7 : nat), @eq nat   (PeanoNat.Nat.add (Nat.add (Nat.add lf7 (BV_to_nat l)) lf7) (BV_to_nat l))   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (BV_to_nat l) lf7) (BV_to_nat l)) lf7).

Category 3 (provable):
Count = 27

Lemma candidate_68: forall (lf7 : nat) (lf9 : nat), @eq nat (Nat.add lf9 lf7) (PeanoNat.Nat.add lf7 lf9).
Lemma candidate_29: forall (lf7 : nat) (lf9 : nat), @eq nat (Nat.add lf7 lf9) (PeanoNat.Nat.add lf9 lf7).
Lemma candidate_16: forall (lf7 : nat) (lf6 : nat), @eq nat (Nat.add lf6 lf7) (PeanoNat.Nat.add lf7 lf6).
Lemma candidate_17: forall (lf5 : nat) (lf9 : nat), @eq nat (PeanoNat.Nat.add lf5 lf9) (PeanoNat.Nat.add lf9 lf5).
Lemma candidate_44: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)).
Lemma candidate_89: forall (lf8 : bool), @eq nat (bool_to_nat lf8)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 lf8)).
Lemma candidate_90: forall (lf8 : bool), @eq nat (bool_to_nat lf8)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 true)).
Lemma candidate_12: forall (lf7 : nat) (lf9 : nat) (lf6 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf6 lf7) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf6) lf7).
Lemma candidate_122: forall (a : bool) (cin : bool), @eq bool (half_adder_carry a cin)   (HalfAdder.half_adder_carry a (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_121: forall (a : bool) (cin : bool), @eq bool (half_adder_carry a cin)   (HalfAdder.half_adder_carry cin (HalfAdder.half_adder_carry a cin)).
Lemma candidate_124: forall (a : bool) (cin : bool), @eq bool (half_adder_carry a cin)   (HalfAdder.half_adder_carry a (HalfAdder.half_adder_carry cin true)).
Lemma candidate_123: forall (a : bool) (cin : bool), @eq bool (half_adder_carry a cin)   (HalfAdder.half_adder_carry cin (HalfAdder.half_adder_carry a true)).
Lemma candidate_117: forall (a : bool) (cin : bool), @eq nat (bool_to_nat (half_adder_carry a cin))   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin a)).
Lemma candidate_10: forall (lf7 : nat) (lf5 : nat) (lf9 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf5) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf5 lf9) lf7).
Lemma candidate_60: forall (lf7 : nat) (lf9 : nat) (lf6 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf6 lf7) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 O) lf9) lf7).
Lemma candidate_24: forall (lf7 : nat) (lf5 : nat) (lf9 : nat), @eq nat (PeanoNat.Nat.add (Nat.add (PeanoNat.Nat.add lf5 O) lf7) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf5 lf9) lf7).
Lemma candidate_87: forall (lf8 : bool), @eq nat (bool_to_nat lf8)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 (HalfAdder.half_adder_carry lf8 lf8))).
Lemma candidate_88: forall (lf8 : bool), @eq nat (bool_to_nat lf8)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 (HalfAdder.half_adder_carry lf8 true))).
Lemma candidate_84: forall (lf9 : nat) (lf8 : bool) (lf6 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf6 (bool_to_nat lf8)) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf6) (bool_to_nat lf8)).
Lemma candidate_114: forall (a : bool) (cin : bool), @eq nat (bool_to_nat (half_adder_carry a cin))   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a (HalfAdder.half_adder_carry cin cin))).
Lemma candidate_113: forall (a : bool) (cin : bool), @eq nat (bool_to_nat (half_adder_carry a cin))   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin (HalfAdder.half_adder_carry a cin))).
Lemma candidate_116: forall (a : bool) (cin : bool), @eq nat (bool_to_nat (half_adder_carry a cin))   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a (HalfAdder.half_adder_carry cin true))).
Lemma candidate_115: forall (a : bool) (cin : bool), @eq nat (bool_to_nat (half_adder_carry a cin))   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin (HalfAdder.half_adder_carry a true))).
Lemma candidate_96: forall (lf5 : nat) (lf9 : nat) (lf8 : bool), @eq nat   (PeanoNat.Nat.add (Nat.add (PeanoNat.Nat.add lf5 O) (bool_to_nat lf8)) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf5 lf9) (bool_to_nat lf8)).
Lemma candidate_168: forall (l : list bool) (lf5 : nat) (lf8 : bool), @eq nat   (PeanoNat.Nat.add (Nat.add (PeanoNat.Nat.add lf5 O) (bool_to_nat lf8))      (BV_to_nat l))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf5 (BV_to_nat l)) (bool_to_nat lf8)).
Lemma candidate_127: forall (a : bool) (cin : bool) (lf5 : nat) (lf9 : nat), @eq nat   (PeanoNat.Nat.add      (Nat.add (PeanoNat.Nat.add lf5 O) (bool_to_nat (half_adder_carry a cin)))      lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf5 lf9)      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_43: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).

Category 3 (not provable):
Count = 38

Lemma candidate_42: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@cons bool false (@nil bool)) false)).
Lemma candidate_41: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_45: forall (l : list bool) (lf7 : nat) (lf5 : nat), @eq nat   (PeanoNat.Nat.add (Nat.add (PeanoNat.Nat.add lf5 O) lf7) (BV_to_nat l))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf5 (BV_to_nat l)) lf7).
Lemma candidate_70: forall (l : list bool) (lf7 : nat) (lf6 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf6 lf7) (BV_to_nat l))   (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 O) (BV_to_nat l))      lf7).
Lemma candidate_245: forall (lf9 : nat) (lf8 : bool) (lf6 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf6 (bool_to_nat lf8)) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 O) lf9)      (bool_to_nat lf8)).
Lemma candidate_275: forall (l : list bool) (lf8 : bool) (lf6 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf6 (bool_to_nat lf8)) (BV_to_nat l))   (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 O) (BV_to_nat l))      (bool_to_nat lf8)).
Lemma candidate_110: forall (a : bool) (cin : bool) (lf9 : nat) (lf6 : nat), @eq nat   (PeanoNat.Nat.add (Nat.add lf6 (bool_to_nat (half_adder_carry a cin))) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf6)      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_237: forall (a : bool) (l : list bool) (cin : bool), @eq nat (Nat.add (bool_to_nat (half_adder_carry a cin)) (BV_to_nat l))   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@cons bool false (@nil bool)) (HalfAdder.half_adder_carry cin a))).
Lemma candidate_260: forall (a : bool) (cin : bool) (lf9 : nat) (lf6 : nat), @eq nat   (PeanoNat.Nat.add (Nat.add lf6 (bool_to_nat (half_adder_carry a cin))) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 O) lf9)      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_315: forall (a : bool) (l : list bool) (cin : bool), @eq nat (Nat.add (BV_to_nat l) (bool_to_nat (half_adder_carry a cin)))   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@cons bool false (@nil bool)) (HalfAdder.half_adder_carry a (HalfAdder.half_adder_carry cin true)))).
Lemma candidate_303: forall (a : bool) (l : list bool) (cin : bool) (lf6 : nat), @eq nat   (PeanoNat.Nat.add (Nat.add lf6 (bool_to_nat (half_adder_carry a cin)))      (BV_to_nat l))   (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 O) (BV_to_nat l))      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_218: forall (a : bool) (l : list bool) (cin : bool) (lf5 : nat), @eq nat   (PeanoNat.Nat.add      (Nat.add (PeanoNat.Nat.add lf5 O) (bool_to_nat (half_adder_carry a cin)))      (BV_to_nat l))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf5 (BV_to_nat l))      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_39: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))).
Lemma candidate_281: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (bool_to_nat lf8)) (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat lf8) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)))).
Lemma candidate_40: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_334: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (Nat.add (BV_to_nat l) (bool_to_nat (half_adder_carry a cin)))      (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a cin)) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)))).
Lemma candidate_333: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (Nat.add (BV_to_nat l) (bool_to_nat (half_adder_carry a cin)))      (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin a)) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)))).
Lemma candidate_280: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (bool_to_nat lf8)) (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat lf8) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry lf8 false))) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry lf8 false))))).
Lemma candidate_164: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (Nat.add (Nat.add (bool_to_nat lf8) (BV_to_nat l)) (bool_to_nat lf8))      (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat lf8) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false))))      (bool_to_nat lf8)).
Lemma candidate_332: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (Nat.add (BV_to_nat l) (bool_to_nat (half_adder_carry a cin)))      (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a cin)) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry cin false))) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry cin false))))).
Lemma candidate_331: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (Nat.add (BV_to_nat l) (bool_to_nat (half_adder_carry a cin)))      (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin a)) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry cin false))) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry cin false))))).
Lemma candidate_163: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (Nat.add (Nat.add (bool_to_nat lf8) (BV_to_nat l)) (bool_to_nat lf8))      (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat lf8) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry lf8 false))) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry lf8 false)))))      (bool_to_nat lf8)).
Lemma candidate_215: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (Nat.add (Nat.add (bool_to_nat (half_adder_carry a cin)) (BV_to_nat l))         (bool_to_nat (half_adder_carry a cin))) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a cin)) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false))))      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_214: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (Nat.add (Nat.add (bool_to_nat (half_adder_carry a cin)) (BV_to_nat l))         (bool_to_nat (half_adder_carry a cin))) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin a)) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false))))      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_213: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (Nat.add (Nat.add (bool_to_nat (half_adder_carry a cin)) (BV_to_nat l))         (bool_to_nat (half_adder_carry a cin))) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a cin)) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry cin false))) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry cin false)))))      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_212: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (Nat.add (Nat.add (bool_to_nat (half_adder_carry a cin)) (BV_to_nat l))         (bool_to_nat (half_adder_carry a cin))) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin a)) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry cin false))) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry cin false)))))      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_282: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (bool_to_nat lf8)) (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat lf8) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))).
Lemma candidate_336: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (Nat.add (BV_to_nat l) (bool_to_nat (half_adder_carry a cin)))      (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a cin)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))).
Lemma candidate_335: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (Nat.add (BV_to_nat l) (bool_to_nat (half_adder_carry a cin)))      (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin a)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))).
Lemma candidate_279: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (bool_to_nat lf8)) (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat lf8) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 false))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 false))))).
Lemma candidate_165: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (Nat.add (Nat.add (bool_to_nat lf8) (BV_to_nat l)) (bool_to_nat lf8))      (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat lf8) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))))      (bool_to_nat lf8)).
Lemma candidate_283: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (bool_to_nat lf8)) (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum lf8 false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 false))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 false))))).
Lemma candidate_162: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (Nat.add (Nat.add (bool_to_nat lf8) (BV_to_nat l)) (bool_to_nat lf8))      (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat lf8) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 false))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 false)))))      (bool_to_nat lf8)).
Lemma candidate_217: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (Nat.add (Nat.add (bool_to_nat (half_adder_carry a cin)) (BV_to_nat l))         (bool_to_nat (half_adder_carry a cin))) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a cin)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))))      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_216: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (Nat.add (Nat.add (bool_to_nat (half_adder_carry a cin)) (BV_to_nat l))         (bool_to_nat (half_adder_carry a cin))) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin a)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))))      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_166: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (Nat.add (Nat.add (bool_to_nat lf8) (BV_to_nat l)) (bool_to_nat lf8))      (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum lf8 false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 false))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 false)))))      (bool_to_nat lf8)).
Lemma candidate_278: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (bool_to_nat lf8)) (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum lf8 (HalfAdder.half_adder_carry lf8 false))) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 (HalfAdder.half_adder_carry lf8 false)))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 (HalfAdder.half_adder_carry lf8 false)))))).
Lemma candidate_161: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (Nat.add (Nat.add (bool_to_nat lf8) (BV_to_nat l)) (bool_to_nat lf8))      (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum lf8 (HalfAdder.half_adder_carry lf8 false))) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 (HalfAdder.half_adder_carry lf8 false)))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 (HalfAdder.half_adder_carry lf8 false))))))      (bool_to_nat lf8)).