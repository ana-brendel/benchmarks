LFind Results
LFind Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/AdderProof/_lfind_AdderProof_lemma_plus_permute2_170

Number of Lemmas: 586
Number of Lemmas (after duplicates removed): 239
Number of Lemmas (after QuickChick used to filter): 155
* Number of Candidate Lemmas: 137

Time until ranking: 2210
Time to complete: 4628

Stuck state true independent of hypotheses: true

Category 1:
Count = 66

Lemma candidate_526: forall (lf9 : nat) (lf10 : nat), @eq nat (Nat.add lf10 lf9) (PeanoNat.Nat.add lf9 lf10).
Lemma candidate_46: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9) (PeanoNat.Nat.add lf9 lf8).
Lemma candidate_51: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10) (PeanoNat.Nat.add lf10 lf7).
Lemma candidate_524: forall (lf9 : nat) (lf10 : nat), @eq nat (Nat.add lf10 lf9) (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 O)).
Lemma candidate_523: forall (lf9 : nat) (lf10 : nat), @eq nat (Nat.add lf10 lf9) (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 O)).
Lemma candidate_522: forall (lf9 : nat) (lf10 : nat), @eq nat (Nat.add lf10 lf9) (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf10) O).
Lemma candidate_147: forall (lf10 : nat), @eq nat (Nat.add lf10 lf10) (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 O)).
Lemma candidate_145: forall (lf10 : nat), @eq nat (Nat.add lf10 lf10) (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 O) lf10).
Lemma candidate_226: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)).
Lemma candidate_44: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 O)).
Lemma candidate_43: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9)   (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 O)).
Lemma candidate_42: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) O).
Lemma candidate_294: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) false)).
Lemma candidate_50: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10)   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 O)).
Lemma candidate_49: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf7 O)).
Lemma candidate_47: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf7) O).
Lemma candidate_144: forall (lf10 : nat), @eq nat (Nat.add lf10 lf10)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 O) (PeanoNat.Nat.add lf10 O)).
Lemma candidate_501: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf10)).
Lemma candidate_500: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 lf9)).
Lemma candidate_499: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf10) lf10).
Lemma candidate_154: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf10)).
Lemma candidate_152: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 lf9)).
Lemma candidate_151: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf10) lf10).
Lemma candidate_75: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 lf9)).
Lemma candidate_74: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 lf9)).
Lemma candidate_73: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf9) lf8).
Lemma candidate_72: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) lf9).
Lemma candidate_56: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9)   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf9 lf10)).
Lemma candidate_55: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf7 lf10)).
Lemma candidate_54: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9)   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 lf9)).
Lemma candidate_53: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf7 lf9)).
Lemma candidate_63: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 (S lf9))).
Lemma candidate_62: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 (S lf9))).
Lemma candidate_60: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 lf9))).
Lemma candidate_59: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (S (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 lf9))).
Lemma candidate_33: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 (S lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_32: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 (S lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_21: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_20: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_19: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf9) lf8))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_16: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_38: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf9 lf10))).
Lemma candidate_37: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf7 lf10))).
Lemma candidate_36: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 lf9))).
Lemma candidate_35: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf7 lf9))).
Lemma candidate_23: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 (S lf9))).
Lemma candidate_9: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf7) lf9)).
Lemma candidate_13: forall (lf9 : nat) (lf8 : nat), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 O)) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_11: forall (lf9 : nat) (lf8 : nat), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) O) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_8: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 O)) lf9)).
Lemma candidate_4: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_453: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf10))         lf9)).
Lemma candidate_452: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 lf9))         lf9)).
Lemma candidate_451: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf10) lf10)         lf9)).
Lemma candidate_449: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf10) lf9)         lf9)).
Lemma candidate_94: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf10))         lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_92: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 lf9))         lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_90: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf9) lf10)         lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_274: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 O))         (BV_to_nat l0))).
Lemma candidate_272: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) O)         (BV_to_nat l0))).
Lemma candidate_257: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false))).
Lemma candidate_3: forall (l : list bool) (lf9 : nat), @eq nat   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add (Nat.add (BV_to_nat l) lf9) (BV_to_nat l)) lf9))   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) lf9) lf9)).
Lemma candidate_2: forall (l0 : list bool) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 (BV_to_nat l0)) lf10)         (BV_to_nat l0)))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) (BV_to_nat l0))         (BV_to_nat l0))).
Lemma candidate_225: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_293: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 false)).
Lemma candidate_258: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))).

Category 2:
Count = 71

Lemma candidate_143: forall (lf10 : nat), @eq nat (Nat.add lf10 lf10)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 O)) O).
Lemma candidate_224: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@cons bool false (@nil bool)) false)).
Lemma candidate_502: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf10)).
Lemma candidate_153: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf10)).
Lemma candidate_292: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@cons bool false (@nil bool)) false)).
Lemma candidate_76: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf8)).
Lemma candidate_64: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (S lf8))).
Lemma candidate_61: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf8))).
Lemma candidate_34: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (S lf8)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_22: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf8)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_25: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf9 (S lf10))).
Lemma candidate_24: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf7 (S lf10))).
Lemma candidate_223: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_291: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) (Adder.BV_full_adder_carry l0 (@nil bool) false))).
Lemma candidate_14: forall (lf9 : nat) (lf8 : nat), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 O)) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_12: forall (lf9 : nat) (lf8 : nat), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) O) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_7: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf7 O)) lf9)).
Lemma candidate_275: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf7) (BV_to_nat l0))).
Lemma candidate_490: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf10))).
Lemma candidate_489: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf10))).
Lemma candidate_488: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf10))).
Lemma candidate_487: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 lf9))).
Lemma candidate_486: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf9))).
Lemma candidate_485: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf9))).
Lemma candidate_124: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf10))).
Lemma candidate_123: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf10))).
Lemma candidate_122: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf10))).
Lemma candidate_121: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 lf9))).
Lemma candidate_120: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf9))).
Lemma candidate_119: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf9))).
Lemma candidate_466: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (S lf10)))).
Lemma candidate_465: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (S lf10)))).
Lemma candidate_464: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (S lf10)))).
Lemma candidate_463: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (S lf9)))).
Lemma candidate_462: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (S lf9)))).
Lemma candidate_461: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (S lf9)))).
Lemma candidate_130: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (S lf10)))).
Lemma candidate_129: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (S lf10)))).
Lemma candidate_128: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9))   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (S lf10)))).
Lemma candidate_127: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (S lf9)))).
Lemma candidate_126: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9))   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (S lf9)))).
Lemma candidate_125: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9))   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (S lf9)))).
Lemma candidate_118: forall (lf9 : nat) (lf10 : nat), @eq nat   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (S lf10))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_117: forall (lf9 : nat) (lf10 : nat), @eq nat   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (S lf10))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_116: forall (lf9 : nat) (lf10 : nat), @eq nat   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (S lf10))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_115: forall (lf9 : nat) (lf10 : nat), @eq nat   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (S lf9))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_114: forall (lf9 : nat) (lf10 : nat), @eq nat   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (S lf9))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_113: forall (lf9 : nat) (lf10 : nat), @eq nat   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (S lf9))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_478: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf10)))).
Lemma candidate_477: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf10)))).
Lemma candidate_476: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf10)))).
Lemma candidate_475: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 lf9)))).
Lemma candidate_474: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf9)))).
Lemma candidate_473: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf9)))).
Lemma candidate_100: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf10))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_99: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf10))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_98: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf10))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_97: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 lf9))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_96: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf9))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_95: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf9))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_454: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf10))         lf9)).
Lemma candidate_93: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf10))         lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_91: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf10) lf10)         lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_273: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf7 O))         (BV_to_nat l0))).
Lemma candidate_271: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf7) O)         (BV_to_nat l0))).
Lemma candidate_221: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))).
Lemma candidate_289: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l0 false))).
Lemma candidate_222: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_290: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 (Adder.BV_full_adder_carry l0 (@nil bool) false))).
Lemma candidate_256: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat (Adder.BV_full_adder_carry l (@nil bool) false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))).
Lemma candidate_255: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))).

Category 3 (provable):
Count = 0


Category 3 (not provable):
Count = 0
