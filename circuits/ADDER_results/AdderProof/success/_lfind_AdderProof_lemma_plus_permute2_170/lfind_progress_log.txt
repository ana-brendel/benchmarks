File Information
- File name: AdderProof
- Original Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/AdderProof/AdderProof_lemma_plus_permute2_170
- LFind Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/AdderProof/_lfind_AdderProof_lemma_plus_permute2_170
- Namespace: Circuits
- Proof name: BV_full_adder_ok
- Theorem: Theorem BV_full_adder_ok: forall (v0 w0 : BV) (cin0 : bool),
@eq nat (BV_to_nat (BV_full_adder v0 w0 cin0))
  (Nat.add (Nat.add (BV_to_nat v0) (BV_to_nat w0)) (bool_to_nat cin0)).
- Declarations: 
From lfind Require Import LFind.
From CircuitsCoqGym Require Import Adder. 

Proof Context
* Goal State: @eq nat
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l0))
           (BV_to_nat l)) (BV_to_nat l0)))
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l))
           (BV_to_nat l0)) (BV_to_nat l0)))

* Hypothesis:
H0 : forall cin0 : bool,
@eq nat
  (BV_to_nat
     (appbv (BV_full_adder_sum (@cons bool a l) l0 cin0)
        (consbv (BV_full_adder_carry (@cons bool a l) l0 cin0) nilbv)))
  (Nat.add (Nat.add (BV_to_nat (@cons bool a l)) (BV_to_nat l0))
     (bool_to_nat cin0))
cin : bool
l0 : list bool
a0 : bool
v : BV
w : BV
l : list bool
a : bool

* Types:
Set
list bool
BV
Prop
bool
nat

* Polymorphic Types:
list bool

* Variables:
l0 : list bool
l : list bool
a : bool

* Terms:
PeanoNat.Nat.add
  (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l0)) (BV_to_nat l))
  (BV_to_nat l0) : nat
S
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l0)) (BV_to_nat l))
     (BV_to_nat l0)) : nat
BV_full_adder_sum (@cons bool a l) l0 _UNBOUND_REL_1 : BV
BV_full_adder_carry (@cons bool a l) l0 _UNBOUND_REL_1 : bool
consbv (BV_full_adder_carry (@cons bool a l) l0 _UNBOUND_REL_1) nilbv : BV
BV_to_nat l0 : nat
PeanoNat.Nat.add
  (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) (BV_to_nat l0))
  (BV_to_nat l0) : nat
bool_to_nat _UNBOUND_REL_1 : nat
@eq nat
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l0))
           (BV_to_nat l)) (BV_to_nat l0)))
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l))
           (BV_to_nat l0)) (BV_to_nat l0))) : Prop
PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) (BV_to_nat l0) : nat
PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l0)) (BV_to_nat l) : nat
@cons bool a l : list bool
nilbv : BV
forall cin0 : bool,
@eq nat
  (BV_to_nat
     (appbv (BV_full_adder_sum (@cons bool a l) l0 cin0)
        (consbv (BV_full_adder_carry (@cons bool a l) l0 cin0) nilbv)))
  (Nat.add (Nat.add (BV_to_nat (@cons bool a l)) (BV_to_nat l0))
     (bool_to_nat cin0)) : Prop
l : list bool
appbv (BV_full_adder_sum (@cons bool a l) l0 _UNBOUND_REL_1)
  (consbv (BV_full_adder_carry (@cons bool a l) l0 _UNBOUND_REL_1) nilbv) : BV
BV_to_nat
  (appbv (BV_full_adder_sum (@cons bool a l) l0 _UNBOUND_REL_1)
     (consbv (BV_full_adder_carry (@cons bool a l) l0 _UNBOUND_REL_1) nilbv)) : nat
Nat.add (BV_to_nat (@cons bool a l)) (BV_to_nat l0) : nat
Nat.add (BV_to_nat l) (BV_to_nat l0) : nat
@eq nat
  (BV_to_nat
     (appbv (BV_full_adder_sum (@cons bool a l) l0 _UNBOUND_REL_1)
        (consbv (BV_full_adder_carry (@cons bool a l) l0 _UNBOUND_REL_1)
           nilbv)))
  (Nat.add (Nat.add (BV_to_nat (@cons bool a l)) (BV_to_nat l0))
     (bool_to_nat _UNBOUND_REL_1)) : Prop
Nat.add (Nat.add (BV_to_nat (@cons bool a l)) (BV_to_nat l0))
  (bool_to_nat _UNBOUND_REL_1) : nat
nat : Set
bool : Set
l0 : list bool
Nat.add (BV_to_nat l) (BV_to_nat l) : nat
BV_to_nat (@cons bool a l) : nat
BV : Set
list bool : Set
a : bool
S
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) (BV_to_nat l0))
     (BV_to_nat l0)) : nat
BV_to_nat l : nat

* Functions:
appbv  : forall (_ : BV) (_ : BV), BV
BV_full_adder_carry  : forall (_ : list bool) (_ : list bool) (_ : bool), bool
bool_to_nat  : forall _ : bool, nat
Nat.add  : forall (_ : nat) (_ : nat), nat
list  : forall _ : Type, Type
consbv  : forall (_ : bool) (_ : BV), BV
S  : forall _ : nat, nat
@cons  : forall (A : Type) (_ : A) (_ : list A), list A
@eq  : forall (A : Type) (_ : A) (_ : A), Prop
BV_full_adder_sum  : forall (_ : list bool) (_ : list bool) (_ : bool), BV
PeanoNat.Nat.add  : forall (_ : nat) (_ : nat), nat
BV_to_nat  : forall _ : BV, nat

<---GENERALIZATION--->
Time elapsed: 3 seconds
Generalized Variables:
lf3 : nat = PeanoNat.Nat.add
  (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l0)) (BV_to_nat l))
  (BV_to_nat l0)
lf7 : nat = Nat.add (BV_to_nat l) (BV_to_nat l0)
lf1 : nat = S
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l0)) (BV_to_nat l))
     (BV_to_nat l0))
lf4 : nat = PeanoNat.Nat.add
  (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) (BV_to_nat l0))
  (BV_to_nat l0)
lf5 : nat = PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) (BV_to_nat l0)
lf9 : nat = BV_to_nat l0
lf2 : nat = S
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) (BV_to_nat l0))
     (BV_to_nat l0))
lf10 : nat = BV_to_nat l
lf8 : nat = Nat.add (BV_to_nat l) (BV_to_nat l)
lf6 : nat = PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l0)) (BV_to_nat l)

Generalizations:
Lemma conj1: forall (lf8 : nat) (lf10 : nat) (lf9 : nat) (lf7 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma conj3: forall (lf10 : nat) (lf9 : nat) (lf7 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma conj5: forall (lf8 : nat) (lf9 : nat) (l : list bool) (lf7 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma conj7: forall (lf9 : nat) (l : list bool) (lf7 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) lf9) lf9)).
Lemma conj17: forall (lf8 : nat) (lf10 : nat) (l0 : list bool) (lf7 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0))).
Lemma conj19: forall (lf10 : nat) (l0 : list bool) (lf7 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))
  (S
     (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) (BV_to_nat l0))
        (BV_to_nat l0))).
Lemma conj21: forall (lf8 : nat) (l0 : list bool) (l : list bool) (lf7 : nat), @eq nat
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0))).
Lemma conj23: forall (l0 : list bool) (l : list bool) (lf7 : nat), @eq nat
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l))
           (BV_to_nat l0)) (BV_to_nat l0))).
Lemma conj257: forall (lf8 : nat) (lf10 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma conj259: forall (lf10 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma conj261: forall (lf8 : nat) (lf9 : nat) (l : list bool), @eq nat
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) lf9) (BV_to_nat l)) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma conj263: forall (lf9 : nat) (l : list bool), @eq nat
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) lf9) (BV_to_nat l)) lf9))
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) lf9) lf9)).
Lemma conj273: forall (lf8 : nat) (lf10 : nat) (l0 : list bool), @eq nat
  (S
     (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 (BV_to_nat l0)) lf10)
        (BV_to_nat l0)))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0))).
Lemma conj275: forall (lf10 : nat) (l0 : list bool), @eq nat
  (S
     (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 (BV_to_nat l0)) lf10)
        (BV_to_nat l0)))
  (S
     (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) (BV_to_nat l0))
        (BV_to_nat l0))).
Lemma conj277: forall (lf8 : nat) (l0 : list bool) (l : list bool), @eq nat
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l0))
           (BV_to_nat l)) (BV_to_nat l0)))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0))).
Lemma conj279: forall (l0 : list bool) (l : list bool), @eq nat
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l0))
           (BV_to_nat l)) (BV_to_nat l0)))
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l))
           (BV_to_nat l0)) (BV_to_nat l0))).


<---VALIDITY CHECKS--->
Time elapsed: 84 seconds
Valid:
Lemma conj279: forall (l0 : list bool) (l : list bool), @eq nat
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l0))
           (BV_to_nat l)) (BV_to_nat l0)))
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l))
           (BV_to_nat l0)) (BV_to_nat l0))).
Lemma conj275: forall (lf10 : nat) (l0 : list bool), @eq nat
  (S
     (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 (BV_to_nat l0)) lf10)
        (BV_to_nat l0)))
  (S
     (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) (BV_to_nat l0))
        (BV_to_nat l0))).
Lemma conj263: forall (lf9 : nat) (l : list bool), @eq nat
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) lf9) (BV_to_nat l)) lf9))
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) lf9) lf9)).
Lemma conj259: forall (lf10 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).

Invalid:
Lemma conj277: forall (lf8 : nat) (l0 : list bool) (l : list bool), @eq nat
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l0))
           (BV_to_nat l)) (BV_to_nat l0)))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0))).
Lemma conj273: forall (lf8 : nat) (lf10 : nat) (l0 : list bool), @eq nat
  (S
     (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 (BV_to_nat l0)) lf10)
        (BV_to_nat l0)))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0))).
Lemma conj261: forall (lf8 : nat) (lf9 : nat) (l : list bool), @eq nat
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) lf9) (BV_to_nat l)) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma conj257: forall (lf8 : nat) (lf10 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma conj23: forall (l0 : list bool) (l : list bool) (lf7 : nat), @eq nat
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l))
           (BV_to_nat l0)) (BV_to_nat l0))).
Lemma conj21: forall (lf8 : nat) (l0 : list bool) (l : list bool) (lf7 : nat), @eq nat
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0))).
Lemma conj19: forall (lf10 : nat) (l0 : list bool) (lf7 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))
  (S
     (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) (BV_to_nat l0))
        (BV_to_nat l0))).
Lemma conj17: forall (lf8 : nat) (lf10 : nat) (l0 : list bool) (lf7 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0))).
Lemma conj7: forall (lf9 : nat) (l : list bool) (lf7 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) lf9) lf9)).
Lemma conj5: forall (lf8 : nat) (lf9 : nat) (l : list bool) (lf7 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma conj3: forall (lf10 : nat) (lf9 : nat) (lf7 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma conj1: forall (lf8 : nat) (lf10 : nat) (lf9 : nat) (lf7 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).

<---ADD IMPLICATIONS--->
Time elapsed: 91 seconds
Generalizations:
Lemma conj277: forall (lf8 : nat) (l0 : list bool) (l : list bool), @eq nat
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l0))
           (BV_to_nat l)) (BV_to_nat l0)))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0))).
Lemma conj273: forall (lf8 : nat) (lf10 : nat) (l0 : list bool), @eq nat
  (S
     (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 (BV_to_nat l0)) lf10)
        (BV_to_nat l0)))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0))).
Lemma conj261: forall (lf8 : nat) (lf9 : nat) (l : list bool), @eq nat
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) lf9) (BV_to_nat l)) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma conj257: forall (lf8 : nat) (lf10 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma conj23: forall (l0 : list bool) (l : list bool) (lf7 : nat), @eq nat
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l))
           (BV_to_nat l0)) (BV_to_nat l0))).
Lemma conj21: forall (lf8 : nat) (l0 : list bool) (l : list bool) (lf7 : nat), @eq nat
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0))).
Lemma conj19: forall (lf10 : nat) (l0 : list bool) (lf7 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))
  (S
     (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) (BV_to_nat l0))
        (BV_to_nat l0))).
Lemma conj17: forall (lf8 : nat) (lf10 : nat) (l0 : list bool) (lf7 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0))).
Lemma conj7: forall (lf9 : nat) (l : list bool) (lf7 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) lf9) lf9)).
Lemma conj5: forall (lf8 : nat) (lf9 : nat) (l : list bool) (lf7 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma conj3: forall (lf10 : nat) (lf9 : nat) (lf7 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma conj1: forall (lf8 : nat) (lf10 : nat) (lf9 : nat) (lf7 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).


<---VALIDITY CHECKS--->
Time elapsed: 109 seconds
Valid:

Invalid:
Lemma conj1: forall (lf8 : nat) (lf10 : nat) (lf9 : nat) (lf7 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma conj3: forall (lf10 : nat) (lf9 : nat) (lf7 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma conj5: forall (lf8 : nat) (lf9 : nat) (l : list bool) (lf7 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma conj7: forall (lf9 : nat) (l : list bool) (lf7 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) lf9) lf9)).
Lemma conj17: forall (lf8 : nat) (lf10 : nat) (l0 : list bool) (lf7 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0))).
Lemma conj19: forall (lf10 : nat) (l0 : list bool) (lf7 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))
  (S
     (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) (BV_to_nat l0))
        (BV_to_nat l0))).
Lemma conj21: forall (lf8 : nat) (l0 : list bool) (l : list bool) (lf7 : nat), @eq nat
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0))).
Lemma conj23: forall (l0 : list bool) (l : list bool) (lf7 : nat), @eq nat
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l))
           (BV_to_nat l0)) (BV_to_nat l0))).
Lemma conj257: forall (lf8 : nat) (lf10 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma conj261: forall (lf8 : nat) (lf9 : nat) (l : list bool), @eq nat
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) lf9) (BV_to_nat l)) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma conj273: forall (lf8 : nat) (lf10 : nat) (l0 : list bool), @eq nat
  (S
     (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 (BV_to_nat l0)) lf10)
        (BV_to_nat l0)))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0))).
Lemma conj277: forall (lf8 : nat) (l0 : list bool) (l : list bool), @eq nat
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l0))
           (BV_to_nat l)) (BV_to_nat l0)))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0))).


<---CREATE SKETCHES--->
Time elapsed: 109 seconds
Sketches:
Sketch conj1_sketch0 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))
  (S (PeanoNat.Nat.add (##hole##) lf9))
Sketch conj1_sketch1 : @eq nat (S (PeanoNat.Nat.add (##hole##) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))
Sketch conj1_sketch2 : @eq nat (S (##hole##)) (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))
Sketch conj1_sketch3 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9)) (##hole##)
Sketch conj1_sketch4 : @eq nat (##hole##) (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))
Sketch conj1_sketch5 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9)) (S (##hole##))
Sketch conj1_term_sketch0 : @eq nat (PeanoNat.Nat.add lf8 lf9) (##hole##)
Sketch conj1_term_sketch1 : @eq nat (PeanoNat.Nat.add lf7 lf10) (##hole##)
Sketch conj1_term_sketch2 : @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9) (##hole##)
Sketch conj1_term_sketch3 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)) (##hole##)
Sketch conj1_term_sketch4 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9)) (##hole##)
Sketch conj1_term_sketch5 : @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9) (##hole##)
Sketch conj3_sketch0 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9)) (S (##hole##))
Sketch conj3_sketch1 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9)) (##hole##)
Sketch conj3_sketch2 : @eq nat (S (PeanoNat.Nat.add (##hole##) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9))
Sketch conj3_sketch3 : @eq nat (S (##hole##))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9))
Sketch conj3_sketch4 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add (##hole##) lf9) lf9))
Sketch conj3_sketch5 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))
  (S (PeanoNat.Nat.add (##hole##) lf9))
Sketch conj3_sketch6 : @eq nat (##hole##)
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9))
Sketch conj3_term_sketch0 : @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)
  (##hole##)
Sketch conj3_term_sketch1 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9))
  (##hole##)
Sketch conj3_term_sketch2 : @eq nat (PeanoNat.Nat.add lf7 lf10) (##hole##)
Sketch conj3_term_sketch3 : @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9) (##hole##)
Sketch conj3_term_sketch4 : @eq nat (Nat.add lf10 lf10) (##hole##)
Sketch conj3_term_sketch5 : @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) (##hole##)
Sketch conj3_term_sketch6 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9)) (##hole##)
Sketch conj5_sketch0 : @eq nat (S (##hole##)) (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))
Sketch conj5_sketch1 : @eq nat (S (PeanoNat.Nat.add (##hole##) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))
Sketch conj5_sketch2 : @eq nat (##hole##) (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))
Sketch conj5_sketch3 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))
  (S (PeanoNat.Nat.add (##hole##) lf9))
Sketch conj5_sketch4 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))
  (##hole##)
Sketch conj5_sketch5 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))
  (S (##hole##))
Sketch conj5_sketch6 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (##hole##)) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))
Sketch conj5_term_sketch0 : @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9)
  (##hole##)
Sketch conj5_term_sketch1 : @eq nat (PeanoNat.Nat.add lf7 (BV_to_nat l)) (##hole##)
Sketch conj5_term_sketch2 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))
  (##hole##)
Sketch conj5_term_sketch3 : @eq nat (PeanoNat.Nat.add lf8 lf9) (##hole##)
Sketch conj5_term_sketch4 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)) (##hole##)
Sketch conj5_term_sketch5 : @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9) (##hole##)
Sketch conj5_term_sketch6 : @eq nat (BV_to_nat l) (##hole##)
Sketch conj7_sketch0 : @eq nat (S (##hole##))
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) lf9) lf9))
Sketch conj7_sketch1 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))
  (S (##hole##))
Sketch conj7_sketch2 : @eq nat (S (PeanoNat.Nat.add (##hole##) lf9))
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) lf9) lf9))
Sketch conj7_sketch3 : @eq nat (##hole##)
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) lf9) lf9))
Sketch conj7_sketch4 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add (##hole##) lf9) lf9))
Sketch conj7_sketch5 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))
  (##hole##)
Sketch conj7_sketch6 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))
  (S (PeanoNat.Nat.add (##hole##) lf9))
Sketch conj7_sketch7 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (##hole##)) lf9))
  (S
     (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add (##hole##) (##hole##)) lf9)
        lf9))
Sketch conj7_term_sketch0 : @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9)
  (##hole##)
Sketch conj7_term_sketch1 : @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) lf9) lf9)
  (##hole##)
Sketch conj7_term_sketch2 : @eq nat (PeanoNat.Nat.add lf7 (BV_to_nat l)) (##hole##)
Sketch conj7_term_sketch3 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))
  (##hole##)
Sketch conj7_term_sketch4 : @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l)) (##hole##)
Sketch conj7_term_sketch5 : @eq nat
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) lf9) lf9))
  (##hole##)
Sketch conj7_term_sketch6 : @eq nat (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) lf9)
  (##hole##)
Sketch conj7_term_sketch7 : @eq nat (BV_to_nat l) (##hole##)
Sketch conj17_sketch0 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))
  (S (##hole##))
Sketch conj17_sketch1 : @eq nat (##hole##)
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0)))
Sketch conj17_sketch2 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (##hole##)))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (##hole##)) (##hole##)))
Sketch conj17_sketch3 : @eq nat (S (PeanoNat.Nat.add (##hole##) (BV_to_nat l0)))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0)))
Sketch conj17_sketch4 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))
  (S (PeanoNat.Nat.add (##hole##) (BV_to_nat l0)))
Sketch conj17_sketch5 : @eq nat (S (##hole##))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0)))
Sketch conj17_sketch6 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))
  (##hole##)
Sketch conj17_term_sketch0 : @eq nat
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0))
  (##hole##)
Sketch conj17_term_sketch1 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))
  (##hole##)
Sketch conj17_term_sketch2 : @eq nat (BV_to_nat l0) (##hole##)
Sketch conj17_term_sketch3 : @eq nat (PeanoNat.Nat.add lf7 lf10) (##hole##)
Sketch conj17_term_sketch4 : @eq nat (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (##hole##)
Sketch conj17_term_sketch5 : @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0))
  (##hole##)
Sketch conj17_term_sketch6 : @eq nat
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0)))
  (##hole##)
Sketch conj19_sketch0 : @eq nat (##hole##)
  (S
     (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) (BV_to_nat l0))
        (BV_to_nat l0)))
Sketch conj19_sketch1 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (##hole##)))
  (S
     (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) (##hole##))
        (##hole##)))
Sketch conj19_sketch2 : @eq nat (S (PeanoNat.Nat.add (##hole##) (BV_to_nat l0)))
  (S
     (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) (BV_to_nat l0))
        (BV_to_nat l0)))
Sketch conj19_sketch3 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))
  (S
     (PeanoNat.Nat.add (PeanoNat.Nat.add (##hole##) (BV_to_nat l0))
        (BV_to_nat l0)))
Sketch conj19_sketch4 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))
  (##hole##)
Sketch conj19_sketch5 : @eq nat (S (##hole##))
  (S
     (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) (BV_to_nat l0))
        (BV_to_nat l0)))
Sketch conj19_sketch6 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))
  (S (PeanoNat.Nat.add (##hole##) (BV_to_nat l0)))
Sketch conj19_sketch7 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))
  (S (##hole##))
Sketch conj19_term_sketch0 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))
  (##hole##)
Sketch conj19_term_sketch1 : @eq nat (BV_to_nat l0) (##hole##)
Sketch conj19_term_sketch2 : @eq nat (PeanoNat.Nat.add lf7 lf10) (##hole##)
Sketch conj19_term_sketch3 : @eq nat (Nat.add lf10 lf10) (##hole##)
Sketch conj19_term_sketch4 : @eq nat
  (S
     (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) (BV_to_nat l0))
        (BV_to_nat l0))) (##hole##)
Sketch conj19_term_sketch5 : @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0))
  (##hole##)
Sketch conj19_term_sketch6 : @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf10) (BV_to_nat l0)) (##hole##)
Sketch conj19_term_sketch7 : @eq nat
  (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) (BV_to_nat l0))
     (BV_to_nat l0)) (##hole##)
Sketch conj21_sketch0 : @eq nat
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))
  (S (##hole##))
Sketch conj21_sketch1 : @eq nat (S (PeanoNat.Nat.add (##hole##) (BV_to_nat l0)))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0)))
Sketch conj21_sketch2 : @eq nat (##hole##)
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0)))
Sketch conj21_sketch3 : @eq nat
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (##hole##)))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (##hole##)) (##hole##)))
Sketch conj21_sketch4 : @eq nat
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))
  (S (PeanoNat.Nat.add (##hole##) (BV_to_nat l0)))
Sketch conj21_sketch5 : @eq nat
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))
  (##hole##)
Sketch conj21_sketch6 : @eq nat (S (##hole##))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0)))
Sketch conj21_sketch7 : @eq nat
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (##hole##)) (BV_to_nat l0)))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0)))
Sketch conj21_term_sketch0 : @eq nat
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0))
  (##hole##)
Sketch conj21_term_sketch1 : @eq nat (PeanoNat.Nat.add lf7 (BV_to_nat l)) (##hole##)
Sketch conj21_term_sketch2 : @eq nat
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))
  (##hole##)
Sketch conj21_term_sketch3 : @eq nat (BV_to_nat l0) (##hole##)
Sketch conj21_term_sketch4 : @eq nat (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (##hole##)
Sketch conj21_term_sketch5 : @eq nat
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0)))
  (##hole##)
Sketch conj21_term_sketch6 : @eq nat
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0))
  (##hole##)
Sketch conj21_term_sketch7 : @eq nat (BV_to_nat l) (##hole##)
Sketch conj23_sketch0 : @eq nat (S (PeanoNat.Nat.add (##hole##) (BV_to_nat l0)))
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l))
           (BV_to_nat l0)) (BV_to_nat l0)))
Sketch conj23_sketch1 : @eq nat (##hole##)
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l))
           (BV_to_nat l0)) (BV_to_nat l0)))
Sketch conj23_sketch2 : @eq nat
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (##hole##)))
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) (##hole##))
        (##hole##)))
Sketch conj23_sketch3 : @eq nat
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))
  (S
     (PeanoNat.Nat.add (PeanoNat.Nat.add (##hole##) (BV_to_nat l0))
        (BV_to_nat l0)))
Sketch conj23_sketch4 : @eq nat
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))
  (S (##hole##))
Sketch conj23_sketch5 : @eq nat
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))
  (S (PeanoNat.Nat.add (##hole##) (BV_to_nat l0)))
Sketch conj23_sketch6 : @eq nat (S (##hole##))
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l))
           (BV_to_nat l0)) (BV_to_nat l0)))
Sketch conj23_sketch7 : @eq nat
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))
  (##hole##)
Sketch conj23_sketch8 : @eq nat
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (##hole##)) (BV_to_nat l0)))
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (##hole##) (##hole##)) (BV_to_nat l0))
        (BV_to_nat l0)))
Sketch conj23_term_sketch0 : @eq nat (PeanoNat.Nat.add lf7 (BV_to_nat l)) (##hole##)
Sketch conj23_term_sketch1 : @eq nat
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))
  (##hole##)
Sketch conj23_term_sketch2 : @eq nat (BV_to_nat l0) (##hole##)
Sketch conj23_term_sketch3 : @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l)) (##hole##)
Sketch conj23_term_sketch4 : @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) (BV_to_nat l0))
     (BV_to_nat l0)) (##hole##)
Sketch conj23_term_sketch5 : @eq nat
  (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) (BV_to_nat l0))
  (##hole##)
Sketch conj23_term_sketch6 : @eq nat
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0))
  (##hole##)
Sketch conj23_term_sketch7 : @eq nat
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l))
           (BV_to_nat l0)) (BV_to_nat l0))) (##hole##)
Sketch conj23_term_sketch8 : @eq nat (BV_to_nat l) (##hole##)
Sketch conj257_sketch0 : @eq nat (S (##hole##)) (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))
Sketch conj257_sketch1 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))
  (S (PeanoNat.Nat.add (##hole##) lf9))
Sketch conj257_sketch2 : @eq nat (S (PeanoNat.Nat.add (##hole##) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))
Sketch conj257_sketch3 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))
  (##hole##)
Sketch conj257_sketch4 : @eq nat (##hole##) (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))
Sketch conj257_sketch5 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))
  (S (##hole##))
Sketch conj257_sketch6 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (##hole##) lf10) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))
Sketch conj257_term_sketch0 : @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9)
  (##hole##)
Sketch conj257_term_sketch1 : @eq nat (PeanoNat.Nat.add lf8 lf9) (##hole##)
Sketch conj257_term_sketch2 : @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) (##hole##)
Sketch conj257_term_sketch3 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)) (##hole##)
Sketch conj257_term_sketch4 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))
  (##hole##)
Sketch conj257_term_sketch5 : @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9) (##hole##)
Sketch conj257_term_sketch6 : @eq nat (Nat.add lf10 lf9) (##hole##)
Sketch conj261_sketch0 : @eq nat (##hole##) (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))
Sketch conj261_sketch1 : @eq nat
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) lf9) (BV_to_nat l)) lf9))
  (S (PeanoNat.Nat.add (##hole##) lf9))
Sketch conj261_sketch2 : @eq nat
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) lf9) (BV_to_nat l)) lf9))
  (##hole##)
Sketch conj261_sketch3 : @eq nat (S (PeanoNat.Nat.add (##hole##) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))
Sketch conj261_sketch4 : @eq nat
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) lf9) (BV_to_nat l)) lf9))
  (S (##hole##))
Sketch conj261_sketch5 : @eq nat (S (##hole##)) (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))
Sketch conj261_sketch6 : @eq nat
  (S
     (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add (##hole##) lf9) (##hole##))
        lf9)) (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))
Sketch conj261_sketch7 : @eq nat
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add (##hole##) (BV_to_nat l)) lf9))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))
Sketch conj261_term_sketch0 : @eq nat
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) lf9) (BV_to_nat l)) lf9))
  (##hole##)
Sketch conj261_term_sketch1 : @eq nat (PeanoNat.Nat.add lf8 lf9) (##hole##)
Sketch conj261_term_sketch2 : @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)) (##hole##)
Sketch conj261_term_sketch3 : @eq nat (PeanoNat.Nat.add (Nat.add (BV_to_nat l) lf9) (BV_to_nat l))
  (##hole##)
Sketch conj261_term_sketch4 : @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9) (##hole##)
Sketch conj261_term_sketch5 : @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (BV_to_nat l) lf9) (BV_to_nat l)) lf9)
  (##hole##)
Sketch conj261_term_sketch6 : @eq nat (BV_to_nat l) (##hole##)
Sketch conj261_term_sketch7 : @eq nat (Nat.add (BV_to_nat l) lf9) (##hole##)
Sketch conj273_sketch0 : @eq nat
  (S
     (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 (BV_to_nat l0)) lf10)
        (BV_to_nat l0))) (S (##hole##))
Sketch conj273_sketch1 : @eq nat (S (##hole##))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0)))
Sketch conj273_sketch2 : @eq nat (S (PeanoNat.Nat.add (##hole##) (BV_to_nat l0)))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0)))
Sketch conj273_sketch3 : @eq nat
  (S
     (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 (##hole##)) lf10)
        (##hole##)))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (##hole##)) (##hole##)))
Sketch conj273_sketch4 : @eq nat
  (S
     (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 (BV_to_nat l0)) lf10)
        (BV_to_nat l0))) (S (PeanoNat.Nat.add (##hole##) (BV_to_nat l0)))
Sketch conj273_sketch5 : @eq nat
  (S
     (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 (BV_to_nat l0)) lf10)
        (BV_to_nat l0))) (##hole##)
Sketch conj273_sketch6 : @eq nat
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add (##hole##) lf10) (BV_to_nat l0)))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0)))
Sketch conj273_sketch7 : @eq nat (##hole##)
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0)))
Sketch conj273_term_sketch0 : @eq nat
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0))
  (##hole##)
Sketch conj273_term_sketch1 : @eq nat
  (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 (BV_to_nat l0)) lf10)
     (BV_to_nat l0)) (##hole##)
Sketch conj273_term_sketch2 : @eq nat (PeanoNat.Nat.add (Nat.add lf10 (BV_to_nat l0)) lf10) (##hole##)
Sketch conj273_term_sketch3 : @eq nat (BV_to_nat l0) (##hole##)
Sketch conj273_term_sketch4 : @eq nat (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (##hole##)
Sketch conj273_term_sketch5 : @eq nat
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0)))
  (##hole##)
Sketch conj273_term_sketch6 : @eq nat (Nat.add lf10 (BV_to_nat l0)) (##hole##)
Sketch conj273_term_sketch7 : @eq nat
  (S
     (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 (BV_to_nat l0)) lf10)
        (BV_to_nat l0))) (##hole##)
Sketch conj277_sketch0 : @eq nat
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l0))
           (BV_to_nat l)) (BV_to_nat l0))) (S (##hole##))
Sketch conj277_sketch1 : @eq nat (S (##hole##))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0)))
Sketch conj277_sketch2 : @eq nat
  (S
     (PeanoNat.Nat.add (PeanoNat.Nat.add (##hole##) (BV_to_nat l))
        (BV_to_nat l0)))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0)))
Sketch conj277_sketch3 : @eq nat (##hole##)
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0)))
Sketch conj277_sketch4 : @eq nat
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (##hole##)) (BV_to_nat l))
        (##hole##)))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (##hole##)) (##hole##)))
Sketch conj277_sketch5 : @eq nat
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l0))
           (BV_to_nat l)) (BV_to_nat l0)))
  (S (PeanoNat.Nat.add (##hole##) (BV_to_nat l0)))
Sketch conj277_sketch6 : @eq nat (S (PeanoNat.Nat.add (##hole##) (BV_to_nat l0)))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0)))
Sketch conj277_sketch7 : @eq nat
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l0))
           (BV_to_nat l)) (BV_to_nat l0))) (##hole##)
Sketch conj277_sketch8 : @eq nat
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (##hole##) (BV_to_nat l0)) (##hole##))
        (BV_to_nat l0)))
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0)))
Sketch conj277_term_sketch0 : @eq nat
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0))
  (##hole##)
Sketch conj277_term_sketch1 : @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l0)) (BV_to_nat l))
     (BV_to_nat l0)) (##hole##)
Sketch conj277_term_sketch2 : @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l0)) (##hole##)
Sketch conj277_term_sketch3 : @eq nat
  (S
     (PeanoNat.Nat.add
        (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l0))
           (BV_to_nat l)) (BV_to_nat l0))) (##hole##)
Sketch conj277_term_sketch4 : @eq nat (BV_to_nat l0) (##hole##)
Sketch conj277_term_sketch5 : @eq nat (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (##hole##)
Sketch conj277_term_sketch6 : @eq nat
  (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l0)) (BV_to_nat l))
  (##hole##)
Sketch conj277_term_sketch7 : @eq nat
  (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (BV_to_nat l0)) (BV_to_nat l0)))
  (##hole##)
Sketch conj277_term_sketch8 : @eq nat (BV_to_nat l) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 1386 seconds
Problems per Sketch:
Sketch conj19_sketch5 --> Problem  synth_37
Sketch conj5_sketch5 --> Problem  synth_15
Sketch conj257_sketch5 --> Problem  synth_9
Sketch conj19_sketch7 --> Problem  synth_25
Sketch conj23_sketch0 --> Problem  synth_43
Sketch conj5_term_sketch3 --> Problem  synth_2
Sketch conj257_sketch2 --> Problem  synth_2
Sketch conj257_sketch3 --> Problem  synth_11
Sketch conj23_term_sketch6 --> Problem  synth_38
Sketch conj17_term_sketch0 --> Problem  synth_30
Sketch conj21_term_sketch1 --> Problem  synth_17
Sketch conj19_term_sketch5 --> Problem  synth_25
Sketch conj257_term_sketch4 --> Problem  synth_11
Sketch conj23_term_sketch4 --> Problem  synth_47
Sketch conj7_term_sketch1 --> Problem  synth_19
Sketch conj7_term_sketch4 --> Problem  synth_24
Sketch conj17_sketch6 --> Problem  synth_31
Sketch conj5_sketch6 --> Problem  synth_16
Sketch conj5_term_sketch0 --> Problem  synth_15
Sketch conj257_sketch6 --> Problem  synth_49
Sketch conj17_term_sketch6 --> Problem  synth_26
Sketch conj261_sketch1 --> Problem  synth_20
Sketch conj3_term_sketch2 --> Problem  synth_7
Sketch conj7_sketch5 --> Problem  synth_14
Sketch conj261_sketch5 --> Problem  synth_3
Sketch conj23_sketch3 --> Problem  synth_46
Sketch conj7_sketch2 --> Problem  synth_20
Sketch conj1_sketch1 --> Problem  synth_2
Sketch conj3_term_sketch3 --> Problem  synth_6
Sketch conj3_term_sketch0 --> Problem  synth_9
Sketch conj277_sketch7 --> Problem  synth_44
Sketch conj23_term_sketch2 --> Problem  synth_32
Sketch conj21_sketch0 --> Problem  synth_38
Sketch conj273_sketch5 --> Problem  synth_33
Sketch conj3_sketch5 --> Problem  synth_1
Sketch conj261_sketch2 --> Problem  synth_21
Sketch conj1_term_sketch0 --> Problem  synth_2
Sketch conj19_term_sketch1 --> Problem  synth_32
Sketch conj261_term_sketch5 --> Problem  synth_19
Sketch conj5_term_sketch2 --> Problem  synth_14
Sketch conj261_sketch6 --> Problem  synth_51
Sketch conj3_term_sketch4 --> Problem  synth_12
Sketch conj257_term_sketch2 --> Problem  synth_8
Sketch conj261_term_sketch3 --> Problem  synth_20
Sketch conj23_sketch8 --> Problem  synth_48
Sketch conj19_sketch2 --> Problem  synth_35
Sketch conj23_term_sketch0 --> Problem  synth_17
Sketch conj273_sketch7 --> Problem  synth_26
Sketch conj257_sketch1 --> Problem  synth_8
Sketch conj3_term_sketch1 --> Problem  synth_11
Sketch conj3_term_sketch5 --> Problem  synth_8
Sketch conj277_term_sketch6 --> Problem  synth_43
Sketch conj261_term_sketch2 --> Problem  synth_5
Sketch conj21_sketch2 --> Problem  synth_26
Sketch conj23_sketch2 --> Problem  synth_45
Sketch conj277_term_sketch4 --> Problem  synth_32
Sketch conj261_term_sketch4 --> Problem  synth_3
Sketch conj261_sketch0 --> Problem  synth_5
Sketch conj257_term_sketch3 --> Problem  synth_5
Sketch conj17_sketch2 --> Problem  synth_27
Sketch conj273_sketch6 --> Problem  synth_55
Sketch conj273_term_sketch2 --> Problem  synth_35
Sketch conj21_term_sketch7 --> Problem  synth_18
Sketch conj277_sketch5 --> Problem  synth_43
Sketch conj19_term_sketch3 --> Problem  synth_12
Sketch conj3_sketch4 --> Problem  synth_10
Sketch conj261_sketch4 --> Problem  synth_19
Sketch conj261_term_sketch6 --> Problem  synth_18
Sketch conj273_sketch0 --> Problem  synth_37
Sketch conj19_term_sketch2 --> Problem  synth_7
Sketch conj19_sketch3 --> Problem  synth_36
Sketch conj19_term_sketch6 --> Problem  synth_35
Sketch conj277_term_sketch0 --> Problem  synth_30
Sketch conj23_term_sketch3 --> Problem  synth_24
Sketch conj17_sketch4 --> Problem  synth_29
Sketch conj277_sketch1 --> Problem  synth_30
Sketch conj23_sketch4 --> Problem  synth_38
Sketch conj273_term_sketch3 --> Problem  synth_32
Sketch conj17_term_sketch5 --> Problem  synth_25
Sketch conj273_sketch4 --> Problem  synth_35
Sketch conj273_term_sketch4 --> Problem  synth_28
Sketch conj261_sketch7 --> Problem  synth_52
Sketch conj261_term_sketch0 --> Problem  synth_21
Sketch conj17_sketch5 --> Problem  synth_30
Sketch conj7_term_sketch3 --> Problem  synth_14
Sketch conj1_term_sketch5 --> Problem  synth_3
Sketch conj21_sketch5 --> Problem  synth_41
Sketch conj1_term_sketch4 --> Problem  synth_4
Sketch conj17_term_sketch2 --> Problem  synth_32
Sketch conj7_sketch3 --> Problem  synth_21
Sketch conj273_term_sketch7 --> Problem  synth_33
Sketch conj1_term_sketch3 --> Problem  synth_5
Sketch conj257_term_sketch6 --> Problem  synth_50
Sketch conj1_sketch5 --> Problem  synth_6
Sketch conj23_term_sketch8 --> Problem  synth_18
Sketch conj7_sketch1 --> Problem  synth_15
Sketch conj273_term_sketch0 --> Problem  synth_30
Sketch conj21_sketch4 --> Problem  synth_40
Sketch conj1_sketch3 --> Problem  synth_4
Sketch conj1_sketch0 --> Problem  synth_1
Sketch conj5_term_sketch1 --> Problem  synth_17
Sketch conj277_sketch2 --> Problem  synth_57
Sketch conj1_sketch4 --> Problem  synth_5
Sketch conj5_sketch4 --> Problem  synth_14
Sketch conj19_sketch6 --> Problem  synth_29
Sketch conj17_sketch1 --> Problem  synth_26
Sketch conj7_sketch6 --> Problem  synth_13
Sketch conj7_sketch0 --> Problem  synth_19
Sketch conj19_sketch4 --> Problem  synth_31
Sketch conj3_sketch2 --> Problem  synth_8
Sketch conj277_sketch4 --> Problem  synth_58
Sketch conj5_term_sketch4 --> Problem  synth_5
Sketch conj21_sketch6 --> Problem  synth_30
Sketch conj17_term_sketch4 --> Problem  synth_28
Sketch conj23_sketch1 --> Problem  synth_44
Sketch conj257_term_sketch5 --> Problem  synth_3
Sketch conj7_term_sketch6 --> Problem  synth_20
Sketch conj23_sketch6 --> Problem  synth_47
Sketch conj1_term_sketch1 --> Problem  synth_7
Sketch conj23_sketch7 --> Problem  synth_41
Sketch conj21_term_sketch4 --> Problem  synth_28
Sketch conj21_term_sketch3 --> Problem  synth_32
Sketch conj7_term_sketch5 --> Problem  synth_21
Sketch conj3_sketch1 --> Problem  synth_4
Sketch conj273_sketch3 --> Problem  synth_54
Sketch conj261_term_sketch1 --> Problem  synth_2
Sketch conj261_sketch3 --> Problem  synth_2
Sketch conj21_sketch7 --> Problem  synth_42
Sketch conj5_term_sketch6 --> Problem  synth_18
Sketch conj7_term_sketch0 --> Problem  synth_15
Sketch conj1_term_sketch2 --> Problem  synth_6
Sketch conj23_sketch5 --> Problem  synth_40
Sketch conj273_sketch2 --> Problem  synth_28
Sketch conj277_term_sketch3 --> Problem  synth_44
Sketch conj277_sketch8 --> Problem  synth_59
Sketch conj17_term_sketch3 --> Problem  synth_7
Sketch conj273_sketch1 --> Problem  synth_30
Sketch conj257_sketch4 --> Problem  synth_5
Sketch conj23_term_sketch5 --> Problem  synth_43
Sketch conj21_sketch3 --> Problem  synth_39
Sketch conj277_sketch0 --> Problem  synth_47
Sketch conj5_sketch3 --> Problem  synth_13
Sketch conj277_term_sketch2 --> Problem  synth_60
Sketch conj273_term_sketch1 --> Problem  synth_37
Sketch conj7_term_sketch7 --> Problem  synth_18
Sketch conj19_term_sketch0 --> Problem  synth_31
Sketch conj277_sketch3 --> Problem  synth_26
Sketch conj1_sketch2 --> Problem  synth_3
Sketch conj257_sketch0 --> Problem  synth_3
Sketch conj5_sketch0 --> Problem  synth_3
Sketch conj5_term_sketch5 --> Problem  synth_3
Sketch conj257_term_sketch0 --> Problem  synth_9
Sketch conj19_sketch0 --> Problem  synth_33
Sketch conj17_sketch0 --> Problem  synth_25
Sketch conj5_sketch1 --> Problem  synth_2
Sketch conj277_term_sketch8 --> Problem  synth_18
Sketch conj7_term_sketch2 --> Problem  synth_17
Sketch conj3_term_sketch6 --> Problem  synth_4
Sketch conj257_term_sketch1 --> Problem  synth_2
Sketch conj3_sketch0 --> Problem  synth_6
Sketch conj23_term_sketch1 --> Problem  synth_41
Sketch conj21_term_sketch6 --> Problem  synth_38
Sketch conj277_term_sketch7 --> Problem  synth_26
Sketch conj21_term_sketch2 --> Problem  synth_41
Sketch conj21_term_sketch0 --> Problem  synth_30
Sketch conj19_sketch1 --> Problem  synth_34
Sketch conj23_term_sketch7 --> Problem  synth_44
Sketch conj5_sketch2 --> Problem  synth_5
Sketch conj17_term_sketch1 --> Problem  synth_31
Sketch conj3_sketch3 --> Problem  synth_9
Sketch conj21_sketch1 --> Problem  synth_28
Sketch conj3_sketch6 --> Problem  synth_11
Sketch conj261_term_sketch7 --> Problem  synth_53
Sketch conj7_sketch7 --> Problem  synth_23
Sketch conj273_term_sketch5 --> Problem  synth_26
Sketch conj7_sketch4 --> Problem  synth_22
Sketch conj19_term_sketch4 --> Problem  synth_33
Sketch conj17_sketch3 --> Problem  synth_28
Sketch conj277_sketch6 --> Problem  synth_28
Sketch conj277_term_sketch1 --> Problem  synth_47
Sketch conj19_term_sketch7 --> Problem  synth_37
Sketch conj277_term_sketch5 --> Problem  synth_28
Sketch conj273_term_sketch6 --> Problem  synth_56
Sketch conj21_term_sketch5 --> Problem  synth_26


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 1692 seconds

Problem: synth_28

Problem: synth_17

Problem: synth_29
 PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf7) O
 PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) O
 PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf7 O)
 PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 O)
 PeanoNat.Nat.add lf10 lf7
 PeanoNat.Nat.add lf7 lf10

Problem: synth_45

Problem: synth_26

Problem: synth_9
 PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf9))
 PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf9))
 PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 lf9))
 PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf10))
 PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf10))
 PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf10))

Problem: synth_30

Problem: synth_11
 PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (S lf9)))
 PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (S lf9)))
 PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (S lf9)))
 PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (S lf10)))
 PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (S lf10)))
 PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (S lf10)))

Problem: synth_54

Problem: synth_39

Problem: synth_1
 PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf10)
 PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf10)
 PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf7 O)
 PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 O)
 PeanoNat.Nat.add lf10 lf7
 PeanoNat.Nat.add lf7 lf10

Problem: synth_46
 Nat.add (Bool_compl.bool_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))
 Nat.add (Bool_compl.bool_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l0 false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))
 Nat.add (Bool_compl.bool_to_nat (Adder.BV_full_adder_carry l (@nil bool) false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))
 Nat.add (Bool_compl.bool_to_nat (Adder.BV_full_adder_carry l0 (@nil bool) false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))
 Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false))
 Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))

Problem: synth_55

Problem: synth_57

Problem: synth_59

Problem: synth_15
 PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)) O
 PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) (PeanoNat.Nat.add lf7 O)
 PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) lf7
 PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf7) O
 PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)
 PeanoNat.Nat.add lf7 lf7

Problem: synth_31
 PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (S O)) lf7
 PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (S lf7)) O
 S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O))
 PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 (S O))
 S (PeanoNat.Nat.add lf7 lf7)
 PeanoNat.Nat.add lf7 (S lf7)

Problem: synth_14
 PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (S O)) lf7
 PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (S lf7)) O
 S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O))
 PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 (S O))
 S (PeanoNat.Nat.add lf7 lf7)
 PeanoNat.Nat.add lf7 (S lf7)

Problem: synth_8
 PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf10) lf9
 PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf9) lf10
 PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf10) lf10
 PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 lf9)
 PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf10)
 PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf10)

Problem: synth_34

Problem: synth_12
 PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 O)) O
 PeanoNat.Nat.add (PeanoNat.Nat.add lf10 O) (PeanoNat.Nat.add lf10 O)
 PeanoNat.Nat.add (PeanoNat.Nat.add lf10 O) lf10
 PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf10) O
 PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 O)
 PeanoNat.Nat.add lf10 lf10

Problem: synth_5
 S (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 lf9))
 S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 lf9))
 S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf8))
 PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 (S lf9))
 PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 (S lf9))
 PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (S lf8))

Problem: synth_37

Problem: synth_58

Problem: synth_53

Problem: synth_50
 PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf9) O
 PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf10) O
 PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 O)
 PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 O)
 PeanoNat.Nat.add lf10 lf9
 PeanoNat.Nat.add lf9 lf10

Problem: synth_2
 PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) O
 PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) O
 PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 O)
 PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 O)
 PeanoNat.Nat.add lf8 lf9
 PeanoNat.Nat.add lf9 lf8

Problem: synth_22
 Nat.add (Bool_compl.bool_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))
 Nat.add (Bool_compl.bool_to_nat (Adder.BV_full_adder_carry l (@nil bool) false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))
 Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false))
 Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))

Problem: synth_20

Problem: synth_18
 BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))
 BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (Adder.BV_full_adder_carry l (@nil bool) false))
 BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (Adder.BV_full_adder_carry l (@nil bool) false))
 BV.BV_to_nat (Adder.BV_full_adder_sum l (@cons bool false (@nil bool)) false)
 BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)
 BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)

Problem: synth_21

Problem: synth_56

Problem: synth_41
 PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (S O)) lf7
 PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (S lf7)) O
 S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O))
 PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 (S O))
 S (PeanoNat.Nat.add lf7 lf7)
 PeanoNat.Nat.add lf7 (S lf7)

Problem: synth_49
 PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf9) O
 PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf10) O
 PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 O)
 PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 O)
 PeanoNat.Nat.add lf10 lf9
 PeanoNat.Nat.add lf9 lf10

Problem: synth_25
 PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)) O
 PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) (PeanoNat.Nat.add lf7 O)
 PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) lf7
 PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf7) O
 PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)
 PeanoNat.Nat.add lf7 lf7

Problem: synth_13

Problem: synth_6
 PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf7 lf9)
 PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 lf9)
 PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf7 lf10)
 PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf9 lf10)
 PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)
 PeanoNat.Nat.add lf7 lf7

Problem: synth_7
 PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf7) O
 PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) O
 PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf7 O)
 PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 O)
 PeanoNat.Nat.add lf10 lf7
 PeanoNat.Nat.add lf7 lf10

Problem: synth_4
 PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 (S lf9))
 PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf7 (S lf10))
 PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf9 (S lf10))
 PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 (S O))
 S (PeanoNat.Nat.add lf7 lf7)
 PeanoNat.Nat.add lf7 (S lf7)

Problem: synth_38
 PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)) O
 PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) (PeanoNat.Nat.add lf7 O)
 PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) lf7
 PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf7) O
 PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)
 PeanoNat.Nat.add lf7 lf7

Problem: synth_23

Problem: synth_27

Problem: synth_42

Problem: synth_16

Problem: synth_19

Problem: synth_40

Problem: synth_10
 PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 O)) O
 PeanoNat.Nat.add (PeanoNat.Nat.add lf10 O) (PeanoNat.Nat.add lf10 O)
 PeanoNat.Nat.add (PeanoNat.Nat.add lf10 O) lf10
 PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf10) O
 PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 O)
 PeanoNat.Nat.add lf10 lf10

Problem: synth_33

Problem: synth_47

Problem: synth_24
 Nat.add (Bool_compl.bool_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))
 Nat.add (Bool_compl.bool_to_nat (Adder.BV_full_adder_carry l (@nil bool) false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))
 Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false))
 Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))

Problem: synth_3
 PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9
 PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) lf9
 PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf9) lf8
 PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 lf9)
 PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 lf9)
 PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf8)

Problem: synth_52

Problem: synth_32
 BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l0 false))
 BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 (Adder.BV_full_adder_carry l0 (@nil bool) false))
 BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) (Adder.BV_full_adder_carry l0 (@nil bool) false))
 BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@cons bool false (@nil bool)) false)
 BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 false)
 BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) false)

Problem: synth_48

Problem: synth_44

Problem: synth_60

Problem: synth_36
 PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 O)) O
 PeanoNat.Nat.add (PeanoNat.Nat.add lf10 O) (PeanoNat.Nat.add lf10 O)
 PeanoNat.Nat.add (PeanoNat.Nat.add lf10 O) lf10
 PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf10) O
 PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 O)
 PeanoNat.Nat.add lf10 lf10

Problem: synth_51

Problem: synth_35

Problem: synth_43

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 1693 seconds
Lemmas:
Lemma candidate_1: forall (l : list bool) (l0 : list bool), @eq nat   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l0))            (BV_to_nat l)) (BV_to_nat l0)))   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l))            (BV_to_nat l0)) (BV_to_nat l0))).
Lemma candidate_2: forall (l0 : list bool) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 (BV_to_nat l0)) lf10)         (BV_to_nat l0)))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) (BV_to_nat l0))         (BV_to_nat l0))).
Lemma candidate_3: forall (l : list bool) (lf9 : nat), @eq nat   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add (Nat.add (BV_to_nat l) lf9) (BV_to_nat l)) lf9))   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) lf9) lf9)).
Lemma candidate_4: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_5: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf10))         lf9)).
Lemma candidate_6: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf10))         lf9)).
Lemma candidate_7: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf7 O)) lf9)).
Lemma candidate_8: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 O)) lf9)).
Lemma candidate_9: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf7) lf9)).
Lemma candidate_10: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9)).
Lemma candidate_11: forall (lf9 : nat) (lf8 : nat), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) O) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_12: forall (lf9 : nat) (lf8 : nat), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) O) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_13: forall (lf9 : nat) (lf8 : nat), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 O)) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_14: forall (lf9 : nat) (lf8 : nat), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 O)) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_15: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_16: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_17: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_18: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_19: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf9) lf8))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_20: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_21: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_22: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf8)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_23: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 (S lf9))).
Lemma candidate_24: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf7 (S lf10))).
Lemma candidate_25: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf9 (S lf10))).
Lemma candidate_26: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 (S O))).
Lemma candidate_27: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add lf7 lf7)).
Lemma candidate_28: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (PeanoNat.Nat.add lf7 (S lf7)).
Lemma candidate_29: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_30: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_31: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf8)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_32: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 (S lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_33: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 (S lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_34: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (S lf8)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_35: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf7 lf9))).
Lemma candidate_36: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 lf9))).
Lemma candidate_37: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf7 lf10))).
Lemma candidate_38: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf9 lf10))).
Lemma candidate_39: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O))).
Lemma candidate_40: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add lf7 lf7)).
Lemma candidate_41: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) O).
Lemma candidate_42: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) O).
Lemma candidate_43: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9)   (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 O)).
Lemma candidate_44: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 O)).
Lemma candidate_45: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9) (PeanoNat.Nat.add lf8 lf9).
Lemma candidate_46: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9) (PeanoNat.Nat.add lf9 lf8).
Lemma candidate_47: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf7) O).
Lemma candidate_48: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) O).
Lemma candidate_49: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf7 O)).
Lemma candidate_50: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10)   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 O)).
Lemma candidate_51: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10) (PeanoNat.Nat.add lf10 lf7).
Lemma candidate_52: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10) (PeanoNat.Nat.add lf7 lf10).
Lemma candidate_53: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf7 lf9)).
Lemma candidate_54: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9)   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 lf9)).
Lemma candidate_55: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf7 lf10)).
Lemma candidate_56: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9)   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf9 lf10)).
Lemma candidate_57: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9)   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)).
Lemma candidate_58: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9)   (PeanoNat.Nat.add lf7 lf7).
Lemma candidate_59: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (S (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 lf9))).
Lemma candidate_60: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 lf9))).
Lemma candidate_61: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf8))).
Lemma candidate_62: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 (S lf9))).
Lemma candidate_63: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 (S lf9))).
Lemma candidate_64: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (S lf8))).
Lemma candidate_65: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 (S lf9))).
Lemma candidate_66: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf7 (S lf10))).
Lemma candidate_67: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf9 (S lf10))).
Lemma candidate_68: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 (S O))).
Lemma candidate_69: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add lf7 lf7)).
Lemma candidate_70: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (PeanoNat.Nat.add lf7 (S lf7)).
Lemma candidate_71: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9).
Lemma candidate_72: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) lf9).
Lemma candidate_73: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf9) lf8).
Lemma candidate_74: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 lf9)).
Lemma candidate_75: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 lf9)).
Lemma candidate_76: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf8)).
Lemma candidate_77: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf7 lf9))).
Lemma candidate_78: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 lf9))).
Lemma candidate_79: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf7 lf10))).
Lemma candidate_80: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf9 lf10))).
Lemma candidate_81: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O))).
Lemma candidate_82: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add lf7 lf7)).
Lemma candidate_83: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 (S lf9))).
Lemma candidate_84: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf7 (S lf10))).
Lemma candidate_85: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf9 (S lf10))).
Lemma candidate_86: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 (S O))).
Lemma candidate_87: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add lf7 lf7)).
Lemma candidate_88: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (PeanoNat.Nat.add lf7 (S lf7)).
Lemma candidate_89: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf10) lf9)         lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_90: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf9) lf10)         lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_91: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf10) lf10)         lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_92: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 lf9))         lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_93: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf10))         lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_94: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf10))         lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_95: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf9))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_96: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf9))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_97: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 lf9))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_98: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf10))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_99: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf10))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_100: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf10))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_101: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add            (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 O)) O)            lf9) lf9)).
Lemma candidate_102: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add            (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 O) (PeanoNat.Nat.add lf10 O))            lf9) lf9)).
Lemma candidate_103: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 O) lf10)            lf9) lf9)).
Lemma candidate_104: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf10) O)            lf9) lf9)).
Lemma candidate_105: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 O))            lf9) lf9)).
Lemma candidate_106: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf10) lf9)         lf9)).
Lemma candidate_107: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf10))         lf9)).
Lemma candidate_108: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf10))         lf9)).
Lemma candidate_109: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf7 O)) lf9)).
Lemma candidate_110: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 O)) lf9)).
Lemma candidate_111: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf7) lf9)).
Lemma candidate_112: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9)).
Lemma candidate_113: forall (lf9 : nat) (lf10 : nat), @eq nat   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (S lf9))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_114: forall (lf9 : nat) (lf10 : nat), @eq nat   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (S lf9))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_115: forall (lf9 : nat) (lf10 : nat), @eq nat   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (S lf9))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_116: forall (lf9 : nat) (lf10 : nat), @eq nat   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (S lf10))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_117: forall (lf9 : nat) (lf10 : nat), @eq nat   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (S lf10))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_118: forall (lf9 : nat) (lf10 : nat), @eq nat   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (S lf10))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_119: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf9))).
Lemma candidate_120: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf9))).
Lemma candidate_121: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 lf9))).
Lemma candidate_122: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf10))).
Lemma candidate_123: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf10))).
Lemma candidate_124: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf10))).
Lemma candidate_125: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9))   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (S lf9)))).
Lemma candidate_126: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9))   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (S lf9)))).
Lemma candidate_127: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (S lf9)))).
Lemma candidate_128: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9))   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (S lf10)))).
Lemma candidate_129: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (S lf10)))).
Lemma candidate_130: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (S lf10)))).
Lemma candidate_131: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf7) O).
Lemma candidate_132: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) O).
Lemma candidate_133: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf7 O)).
Lemma candidate_134: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10)   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 O)).
Lemma candidate_135: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10) (PeanoNat.Nat.add lf10 lf7).
Lemma candidate_136: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10) (PeanoNat.Nat.add lf7 lf10).
Lemma candidate_137: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf7 lf9)).
Lemma candidate_138: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9)   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 lf9)).
Lemma candidate_139: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf7 lf10)).
Lemma candidate_140: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9)   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf9 lf10)).
Lemma candidate_141: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9)   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)).
Lemma candidate_142: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9)   (PeanoNat.Nat.add lf7 lf7).
Lemma candidate_143: forall (lf10 : nat), @eq nat (Nat.add lf10 lf10)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 O)) O).
Lemma candidate_144: forall (lf10 : nat), @eq nat (Nat.add lf10 lf10)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 O) (PeanoNat.Nat.add lf10 O)).
Lemma candidate_145: forall (lf10 : nat), @eq nat (Nat.add lf10 lf10) (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 O) lf10).
Lemma candidate_146: forall (lf10 : nat), @eq nat (Nat.add lf10 lf10) (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf10) O).
Lemma candidate_147: forall (lf10 : nat), @eq nat (Nat.add lf10 lf10) (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 O)).
Lemma candidate_148: forall (lf10 : nat), @eq nat (Nat.add lf10 lf10) (PeanoNat.Nat.add lf10 lf10).
Lemma candidate_149: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf10) lf9).
Lemma candidate_150: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf9) lf10).
Lemma candidate_151: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf10) lf10).
Lemma candidate_152: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 lf9)).
Lemma candidate_153: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf10)).
Lemma candidate_154: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf10)).
Lemma candidate_155: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 (S lf9))).
Lemma candidate_156: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf7 (S lf10))).
Lemma candidate_157: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf9 (S lf10))).
Lemma candidate_158: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 (S O))).
Lemma candidate_159: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add lf7 lf7)).
Lemma candidate_160: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (PeanoNat.Nat.add lf7 (S lf7)).
Lemma candidate_161: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_162: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_163: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf9) lf8))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_164: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_165: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_166: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf8)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_167: forall (lf9 : nat) (lf8 : nat), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) O) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_168: forall (lf9 : nat) (lf8 : nat), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) O) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_169: forall (lf9 : nat) (lf8 : nat), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 O)) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_170: forall (lf9 : nat) (lf8 : nat), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 O)) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_171: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_172: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_173: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_174: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_175: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf8)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_176: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 (S lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_177: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 (S lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_178: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (S lf8)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_179: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (S O)) lf7).
Lemma candidate_180: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (S lf7)) O).
Lemma candidate_181: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O))).
Lemma candidate_182: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 (S O))).
Lemma candidate_183: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (S (PeanoNat.Nat.add lf7 lf7)).
Lemma candidate_184: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (PeanoNat.Nat.add lf7 (S lf7)).
Lemma candidate_185: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)) O)).
Lemma candidate_186: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) (PeanoNat.Nat.add lf7 O))).
Lemma candidate_187: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) lf7)).
Lemma candidate_188: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf7) O)).
Lemma candidate_189: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O))).
Lemma candidate_190: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (S (PeanoNat.Nat.add lf7 lf7)).
Lemma candidate_191: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)) O).
Lemma candidate_192: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) (PeanoNat.Nat.add lf7 O)).
Lemma candidate_193: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) lf7).
Lemma candidate_194: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf7) O).
Lemma candidate_195: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9)   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)).
Lemma candidate_196: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9)   (PeanoNat.Nat.add lf7 lf7).
Lemma candidate_197: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (S O)) lf7).
Lemma candidate_198: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (S lf7)) O).
Lemma candidate_199: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O))).
Lemma candidate_200: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 (S O))).
Lemma candidate_201: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (S (PeanoNat.Nat.add lf7 lf7)).
Lemma candidate_202: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (PeanoNat.Nat.add lf7 (S lf7)).
Lemma candidate_203: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) O).
Lemma candidate_204: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) O).
Lemma candidate_205: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9)   (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 O)).
Lemma candidate_206: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 O)).
Lemma candidate_207: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9) (PeanoNat.Nat.add lf8 lf9).
Lemma candidate_208: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9) (PeanoNat.Nat.add lf9 lf8).
Lemma candidate_209: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (S (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 lf9))).
Lemma candidate_210: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 lf9))).
Lemma candidate_211: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf8))).
Lemma candidate_212: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 (S lf9))).
Lemma candidate_213: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 (S lf9))).
Lemma candidate_214: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (S lf8))).
Lemma candidate_215: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9).
Lemma candidate_216: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) lf9).
Lemma candidate_217: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf9) lf8).
Lemma candidate_218: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 lf9)).
Lemma candidate_219: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 lf9)).
Lemma candidate_220: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf8)).
Lemma candidate_221: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))).
Lemma candidate_222: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_223: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_224: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@cons bool false (@nil bool)) false)).
Lemma candidate_225: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_226: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)).
Lemma candidate_227: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)) O)).
Lemma candidate_228: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) (PeanoNat.Nat.add lf7 O))).
Lemma candidate_229: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) lf7)).
Lemma candidate_230: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf7) O)).
Lemma candidate_231: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O))).
Lemma candidate_232: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (S (PeanoNat.Nat.add lf7 lf7)).
Lemma candidate_233: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add            (Nat.add (Bool_compl.bool_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))))            lf9) lf9)).
Lemma candidate_234: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add            (Nat.add (Bool_compl.bool_to_nat (Adder.BV_full_adder_carry l (@nil bool) false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))))            lf9) lf9)).
Lemma candidate_235: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add            (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)))            lf9) lf9)).
Lemma candidate_236: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add            (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))            lf9) lf9)).
Lemma candidate_237: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (S O)) lf7).
Lemma candidate_238: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (S lf7)) O).
Lemma candidate_239: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O))).
Lemma candidate_240: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 (S O))).
Lemma candidate_241: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (S (PeanoNat.Nat.add lf7 lf7)).
Lemma candidate_242: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (PeanoNat.Nat.add lf7 (S lf7)).
Lemma candidate_243: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)) O).
Lemma candidate_244: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) (PeanoNat.Nat.add lf7 O)).
Lemma candidate_245: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) lf7).
Lemma candidate_246: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf7) O).
Lemma candidate_247: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9)   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)).
Lemma candidate_248: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9)   (PeanoNat.Nat.add lf7 lf7).
Lemma candidate_249: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (S O)) lf7).
Lemma candidate_250: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (S lf7)) O).
Lemma candidate_251: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O))).
Lemma candidate_252: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 (S O))).
Lemma candidate_253: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (S (PeanoNat.Nat.add lf7 lf7)).
Lemma candidate_254: forall (l : list bool) (lf7 : nat) (lf9 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) lf9))   (PeanoNat.Nat.add lf7 (S lf7)).
Lemma candidate_255: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))).
Lemma candidate_256: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat (Adder.BV_full_adder_carry l (@nil bool) false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))).
Lemma candidate_257: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false))).
Lemma candidate_258: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))).
Lemma candidate_259: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))).
Lemma candidate_260: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_261: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_262: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@cons bool false (@nil bool)) false)).
Lemma candidate_263: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_264: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)).
Lemma candidate_265: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)) O)).
Lemma candidate_266: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) (PeanoNat.Nat.add lf7 O))).
Lemma candidate_267: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) lf7)).
Lemma candidate_268: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf7) O)).
Lemma candidate_269: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O))).
Lemma candidate_270: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S (PeanoNat.Nat.add lf7 lf7)).
Lemma candidate_271: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf7) O)         (BV_to_nat l0))).
Lemma candidate_272: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) O)         (BV_to_nat l0))).
Lemma candidate_273: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf7 O))         (BV_to_nat l0))).
Lemma candidate_274: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 O))         (BV_to_nat l0))).
Lemma candidate_275: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf7) (BV_to_nat l0))).
Lemma candidate_276: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0))).
Lemma candidate_277: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (S O)) lf7).
Lemma candidate_278: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (S lf7)) O).
Lemma candidate_279: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O))).
Lemma candidate_280: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 (S O))).
Lemma candidate_281: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S (PeanoNat.Nat.add lf7 lf7)).
Lemma candidate_282: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (PeanoNat.Nat.add lf7 (S lf7)).
Lemma candidate_283: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (S O)) lf7).
Lemma candidate_284: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (S lf7)) O).
Lemma candidate_285: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O))).
Lemma candidate_286: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 (S O))).
Lemma candidate_287: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S (PeanoNat.Nat.add lf7 lf7)).
Lemma candidate_288: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (PeanoNat.Nat.add lf7 (S lf7)).
Lemma candidate_289: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l0 false))).
Lemma candidate_290: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 (Adder.BV_full_adder_carry l0 (@nil bool) false))).
Lemma candidate_291: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) (Adder.BV_full_adder_carry l0 (@nil bool) false))).
Lemma candidate_292: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@cons bool false (@nil bool)) false)).
Lemma candidate_293: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 false)).
Lemma candidate_294: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) false)).
Lemma candidate_295: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf7) O).
Lemma candidate_296: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) O).
Lemma candidate_297: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf7 O)).
Lemma candidate_298: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10)   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 O)).
Lemma candidate_299: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10) (PeanoNat.Nat.add lf10 lf7).
Lemma candidate_300: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10) (PeanoNat.Nat.add lf7 lf10).
Lemma candidate_301: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)) O).
Lemma candidate_302: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) (PeanoNat.Nat.add lf7 O)).
Lemma candidate_303: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) lf7).
Lemma candidate_304: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf7) O).
Lemma candidate_305: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)).
Lemma candidate_306: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0))   (PeanoNat.Nat.add lf7 lf7).
Lemma candidate_307: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add            (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 O)) O)            (BV_to_nat l0)) (BV_to_nat l0))).
Lemma candidate_308: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add            (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 O) (PeanoNat.Nat.add lf10 O))            (BV_to_nat l0)) (BV_to_nat l0))).
Lemma candidate_309: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 O) lf10)            (BV_to_nat l0)) (BV_to_nat l0))).
Lemma candidate_310: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf10) O)            (BV_to_nat l0)) (BV_to_nat l0))).
Lemma candidate_311: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 O))            (BV_to_nat l0)) (BV_to_nat l0))).
Lemma candidate_312: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf10) (BV_to_nat l0))         (BV_to_nat l0))).
Lemma candidate_313: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (S O)) lf7).
Lemma candidate_314: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (S lf7)) O).
Lemma candidate_315: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O))).
Lemma candidate_316: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 (S O))).
Lemma candidate_317: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S (PeanoNat.Nat.add lf7 lf7)).
Lemma candidate_318: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (PeanoNat.Nat.add lf7 (S lf7)).
Lemma candidate_319: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf7) O)         (BV_to_nat l0))).
Lemma candidate_320: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) O)         (BV_to_nat l0))).
Lemma candidate_321: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf7 O))         (BV_to_nat l0))).
Lemma candidate_322: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 O))         (BV_to_nat l0))).
Lemma candidate_323: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf7) (BV_to_nat l0))).
Lemma candidate_324: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0))).
Lemma candidate_325: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)) O)).
Lemma candidate_326: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) (PeanoNat.Nat.add lf7 O))).
Lemma candidate_327: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) lf7)).
Lemma candidate_328: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf7) O)).
Lemma candidate_329: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O))).
Lemma candidate_330: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S (PeanoNat.Nat.add lf7 lf7)).
Lemma candidate_331: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (S O)) lf7).
Lemma candidate_332: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (S lf7)) O).
Lemma candidate_333: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O))).
Lemma candidate_334: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 (S O))).
Lemma candidate_335: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S (PeanoNat.Nat.add lf7 lf7)).
Lemma candidate_336: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (PeanoNat.Nat.add lf7 (S lf7)).
Lemma candidate_337: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l0 false))).
Lemma candidate_338: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 (Adder.BV_full_adder_carry l0 (@nil bool) false))).
Lemma candidate_339: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) (Adder.BV_full_adder_carry l0 (@nil bool) false))).
Lemma candidate_340: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@cons bool false (@nil bool)) false)).
Lemma candidate_341: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 false)).
Lemma candidate_342: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) false)).
Lemma candidate_343: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf7) O).
Lemma candidate_344: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) O).
Lemma candidate_345: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf7 O)).
Lemma candidate_346: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10)   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 O)).
Lemma candidate_347: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10) (PeanoNat.Nat.add lf10 lf7).
Lemma candidate_348: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10) (PeanoNat.Nat.add lf7 lf10).
Lemma candidate_349: forall (lf10 : nat), @eq nat (Nat.add lf10 lf10)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 O)) O).
Lemma candidate_350: forall (lf10 : nat), @eq nat (Nat.add lf10 lf10)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 O) (PeanoNat.Nat.add lf10 O)).
Lemma candidate_351: forall (lf10 : nat), @eq nat (Nat.add lf10 lf10) (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 O) lf10).
Lemma candidate_352: forall (lf10 : nat), @eq nat (Nat.add lf10 lf10) (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf10) O).
Lemma candidate_353: forall (lf10 : nat), @eq nat (Nat.add lf10 lf10) (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 O)).
Lemma candidate_354: forall (lf10 : nat), @eq nat (Nat.add lf10 lf10) (PeanoNat.Nat.add lf10 lf10).
Lemma candidate_355: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)) O).
Lemma candidate_356: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) (PeanoNat.Nat.add lf7 O)).
Lemma candidate_357: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) lf7).
Lemma candidate_358: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf7) O).
Lemma candidate_359: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)).
Lemma candidate_360: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0))   (PeanoNat.Nat.add lf7 lf7).
Lemma candidate_361: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)) O)).
Lemma candidate_362: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) (PeanoNat.Nat.add lf7 O))).
Lemma candidate_363: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) lf7)).
Lemma candidate_364: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf7) O)).
Lemma candidate_365: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O))).
Lemma candidate_366: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (S (PeanoNat.Nat.add lf7 lf7)).
Lemma candidate_367: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (S O)) lf7).
Lemma candidate_368: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (S lf7)) O).
Lemma candidate_369: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O))).
Lemma candidate_370: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 (S O))).
Lemma candidate_371: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (S (PeanoNat.Nat.add lf7 lf7)).
Lemma candidate_372: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (PeanoNat.Nat.add lf7 (S lf7)).
Lemma candidate_373: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (S O)) lf7).
Lemma candidate_374: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (S lf7)) O).
Lemma candidate_375: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O))).
Lemma candidate_376: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 (S O))).
Lemma candidate_377: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (S (PeanoNat.Nat.add lf7 lf7)).
Lemma candidate_378: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (PeanoNat.Nat.add lf7 (S lf7)).
Lemma candidate_379: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l0 false))).
Lemma candidate_380: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 (Adder.BV_full_adder_carry l0 (@nil bool) false))).
Lemma candidate_381: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) (Adder.BV_full_adder_carry l0 (@nil bool) false))).
Lemma candidate_382: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@cons bool false (@nil bool)) false)).
Lemma candidate_383: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 false)).
Lemma candidate_384: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) false)).
Lemma candidate_385: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)) O).
Lemma candidate_386: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) (PeanoNat.Nat.add lf7 O)).
Lemma candidate_387: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) lf7).
Lemma candidate_388: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf7) O).
Lemma candidate_389: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)).
Lemma candidate_390: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0))   (PeanoNat.Nat.add lf7 lf7).
Lemma candidate_391: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))).
Lemma candidate_392: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_393: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_394: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@cons bool false (@nil bool)) false)).
Lemma candidate_395: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_396: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)).
Lemma candidate_397: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add            (Nat.add (Bool_compl.bool_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))))            (BV_to_nat l0)) (BV_to_nat l0))).
Lemma candidate_398: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add            (Nat.add (Bool_compl.bool_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l0 false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))))            (BV_to_nat l0)) (BV_to_nat l0))).
Lemma candidate_399: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add            (Nat.add (Bool_compl.bool_to_nat (Adder.BV_full_adder_carry l (@nil bool) false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))))            (BV_to_nat l0)) (BV_to_nat l0))).
Lemma candidate_400: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add            (Nat.add (Bool_compl.bool_to_nat (Adder.BV_full_adder_carry l0 (@nil bool) false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))))            (BV_to_nat l0)) (BV_to_nat l0))).
Lemma candidate_401: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add            (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)))            (BV_to_nat l0)) (BV_to_nat l0))).
Lemma candidate_402: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add            (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))            (BV_to_nat l0)) (BV_to_nat l0))).
Lemma candidate_403: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)) O)).
Lemma candidate_404: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) (PeanoNat.Nat.add lf7 O))).
Lemma candidate_405: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) lf7)).
Lemma candidate_406: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf7) O)).
Lemma candidate_407: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O))).
Lemma candidate_408: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (S (PeanoNat.Nat.add lf7 lf7)).
Lemma candidate_409: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (S O)) lf7).
Lemma candidate_410: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (S lf7)) O).
Lemma candidate_411: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O))).
Lemma candidate_412: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 (S O))).
Lemma candidate_413: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (S (PeanoNat.Nat.add lf7 lf7)).
Lemma candidate_414: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (PeanoNat.Nat.add lf7 (S lf7)).
Lemma candidate_415: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (S O)) lf7).
Lemma candidate_416: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (S lf7)) O).
Lemma candidate_417: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O))).
Lemma candidate_418: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 (S O))).
Lemma candidate_419: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (S (PeanoNat.Nat.add lf7 lf7)).
Lemma candidate_420: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0)))   (PeanoNat.Nat.add lf7 (S lf7)).
Lemma candidate_421: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l0 false))).
Lemma candidate_422: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 (Adder.BV_full_adder_carry l0 (@nil bool) false))).
Lemma candidate_423: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) (Adder.BV_full_adder_carry l0 (@nil bool) false))).
Lemma candidate_424: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@cons bool false (@nil bool)) false)).
Lemma candidate_425: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 false)).
Lemma candidate_426: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) false)).
Lemma candidate_427: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))).
Lemma candidate_428: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat (Adder.BV_full_adder_carry l (@nil bool) false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))).
Lemma candidate_429: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false))).
Lemma candidate_430: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))).
Lemma candidate_431: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)) O).
Lemma candidate_432: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) (PeanoNat.Nat.add lf7 O)).
Lemma candidate_433: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) lf7).
Lemma candidate_434: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf7) O).
Lemma candidate_435: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)).
Lemma candidate_436: forall (l : list bool) (lf7 : nat) (l0 : list bool), @eq nat   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (BV_to_nat l)) (BV_to_nat l0))   (PeanoNat.Nat.add lf7 lf7).
Lemma candidate_437: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))).
Lemma candidate_438: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_439: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_440: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@cons bool false (@nil bool)) false)).
Lemma candidate_441: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_442: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)).
Lemma candidate_443: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_444: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_445: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf9) lf8))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_446: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_447: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_448: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf8)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_449: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf10) lf9)         lf9)).
Lemma candidate_450: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf9) lf10)         lf9)).
Lemma candidate_451: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf10) lf10)         lf9)).
Lemma candidate_452: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 lf9))         lf9)).
Lemma candidate_453: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf10))         lf9)).
Lemma candidate_454: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf10))         lf9)).
Lemma candidate_455: forall (lf9 : nat) (lf8 : nat), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) O) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_456: forall (lf9 : nat) (lf8 : nat), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) O) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_457: forall (lf9 : nat) (lf8 : nat), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 O)) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_458: forall (lf9 : nat) (lf8 : nat), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 O)) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_459: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_460: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_461: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (S lf9)))).
Lemma candidate_462: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (S lf9)))).
Lemma candidate_463: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (S lf9)))).
Lemma candidate_464: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (S lf10)))).
Lemma candidate_465: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (S lf10)))).
Lemma candidate_466: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (S lf10)))).
Lemma candidate_467: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_468: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_469: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf8)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_470: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 (S lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_471: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 (S lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_472: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (S lf8)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_473: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf9)))).
Lemma candidate_474: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf9)))).
Lemma candidate_475: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 lf9)))).
Lemma candidate_476: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf10)))).
Lemma candidate_477: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf10)))).
Lemma candidate_478: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf10)))).
Lemma candidate_479: forall (lf9 : nat) (lf8 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf9) O)            lf10) lf9)) (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_480: forall (lf9 : nat) (lf8 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf10) O)            lf10) lf9)) (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_481: forall (lf9 : nat) (lf8 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 O))            lf10) lf9)) (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_482: forall (lf9 : nat) (lf8 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 O))            lf10) lf9)) (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_483: forall (lf9 : nat) (lf8 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf9) lf10)         lf9)) (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_484: forall (lf9 : nat) (lf8 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf10) lf10)         lf9)) (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_485: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf9))).
Lemma candidate_486: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf9))).
Lemma candidate_487: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 lf9))).
Lemma candidate_488: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf10))).
Lemma candidate_489: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf10))).
Lemma candidate_490: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf10))).
Lemma candidate_491: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) O).
Lemma candidate_492: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) O).
Lemma candidate_493: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9)   (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 O)).
Lemma candidate_494: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 O)).
Lemma candidate_495: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9) (PeanoNat.Nat.add lf8 lf9).
Lemma candidate_496: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9) (PeanoNat.Nat.add lf9 lf8).
Lemma candidate_497: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf10) lf9).
Lemma candidate_498: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf9) lf10).
Lemma candidate_499: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf10) lf10).
Lemma candidate_500: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 lf9)).
Lemma candidate_501: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf10)).
Lemma candidate_502: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf10)).
Lemma candidate_503: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (S (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 lf9))).
Lemma candidate_504: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 lf9))).
Lemma candidate_505: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf8))).
Lemma candidate_506: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 (S lf9))).
Lemma candidate_507: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 (S lf9))).
Lemma candidate_508: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (S lf8))).
Lemma candidate_509: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (S lf9)))).
Lemma candidate_510: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (S lf9)))).
Lemma candidate_511: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (S lf9)))).
Lemma candidate_512: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (S lf10)))).
Lemma candidate_513: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (S lf10)))).
Lemma candidate_514: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (S lf10)))).
Lemma candidate_515: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9).
Lemma candidate_516: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) lf9).
Lemma candidate_517: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf9) lf8).
Lemma candidate_518: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 lf9)).
Lemma candidate_519: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 lf9)).
Lemma candidate_520: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf8)).
Lemma candidate_521: forall (lf9 : nat) (lf10 : nat), @eq nat (Nat.add lf10 lf9) (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf9) O).
Lemma candidate_522: forall (lf9 : nat) (lf10 : nat), @eq nat (Nat.add lf10 lf9) (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf10) O).
Lemma candidate_523: forall (lf9 : nat) (lf10 : nat), @eq nat (Nat.add lf10 lf9) (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 O)).
Lemma candidate_524: forall (lf9 : nat) (lf10 : nat), @eq nat (Nat.add lf10 lf9) (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 O)).
Lemma candidate_525: forall (lf9 : nat) (lf10 : nat), @eq nat (Nat.add lf10 lf9) (PeanoNat.Nat.add lf10 lf9).
Lemma candidate_526: forall (lf9 : nat) (lf10 : nat), @eq nat (Nat.add lf10 lf9) (PeanoNat.Nat.add lf9 lf10).
Lemma candidate_527: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_528: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_529: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf8)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_530: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 (S lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_531: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 (S lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_532: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (S lf8)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_533: forall (lf9 : nat) (lf8 : nat), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) O) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_534: forall (lf9 : nat) (lf8 : nat), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) O) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_535: forall (lf9 : nat) (lf8 : nat), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 O)) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_536: forall (lf9 : nat) (lf8 : nat), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 O)) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_537: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_538: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_539: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_540: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_541: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf9) lf8))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_542: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_543: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_544: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf8)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_545: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) O).
Lemma candidate_546: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) O).
Lemma candidate_547: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9)   (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 O)).
Lemma candidate_548: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 O)).
Lemma candidate_549: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9) (PeanoNat.Nat.add lf8 lf9).
Lemma candidate_550: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9) (PeanoNat.Nat.add lf9 lf8).
Lemma candidate_551: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (S (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 lf9))).
Lemma candidate_552: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 lf9))).
Lemma candidate_553: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf8))).
Lemma candidate_554: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 (S lf9))).
Lemma candidate_555: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 (S lf9))).
Lemma candidate_556: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (S lf8))).
Lemma candidate_557: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9).
Lemma candidate_558: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) lf9).
Lemma candidate_559: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf9) lf8).
Lemma candidate_560: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 lf9)).
Lemma candidate_561: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 lf9)).
Lemma candidate_562: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf8)).
Lemma candidate_563: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))).
Lemma candidate_564: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_565: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_566: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@cons bool false (@nil bool)) false)).
Lemma candidate_567: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_568: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)).
Lemma candidate_569: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l0 false))).
Lemma candidate_570: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 (Adder.BV_full_adder_carry l0 (@nil bool) false))).
Lemma candidate_571: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) (Adder.BV_full_adder_carry l0 (@nil bool) false))).
Lemma candidate_572: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@cons bool false (@nil bool)) false)).
Lemma candidate_573: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 false)).
Lemma candidate_574: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) false)).
Lemma candidate_575: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l0 false))).
Lemma candidate_576: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 (Adder.BV_full_adder_carry l0 (@nil bool) false))).
Lemma candidate_577: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) (Adder.BV_full_adder_carry l0 (@nil bool) false))).
Lemma candidate_578: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@cons bool false (@nil bool)) false)).
Lemma candidate_579: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 false)).
Lemma candidate_580: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) false)).
Lemma candidate_581: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))).
Lemma candidate_582: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_583: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_584: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@cons bool false (@nil bool)) false)).
Lemma candidate_585: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_586: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 2209 seconds
Duplicates removed: 347
Filtered by Quickchick: 84
Filtered by script: 18
Remaining: 137

Lemmas: 
Lemma candidate_526: forall (lf9 : nat) (lf10 : nat), @eq nat (Nat.add lf10 lf9) (PeanoNat.Nat.add lf9 lf10).
Lemma candidate_46: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9) (PeanoNat.Nat.add lf9 lf8).
Lemma candidate_51: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10) (PeanoNat.Nat.add lf10 lf7).
Lemma candidate_524: forall (lf9 : nat) (lf10 : nat), @eq nat (Nat.add lf10 lf9) (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 O)).
Lemma candidate_523: forall (lf9 : nat) (lf10 : nat), @eq nat (Nat.add lf10 lf9) (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 O)).
Lemma candidate_522: forall (lf9 : nat) (lf10 : nat), @eq nat (Nat.add lf10 lf9) (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf10) O).
Lemma candidate_147: forall (lf10 : nat), @eq nat (Nat.add lf10 lf10) (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 O)).
Lemma candidate_145: forall (lf10 : nat), @eq nat (Nat.add lf10 lf10) (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 O) lf10).
Lemma candidate_226: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)).
Lemma candidate_44: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 O)).
Lemma candidate_43: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9)   (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 O)).
Lemma candidate_42: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) O).
Lemma candidate_294: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) false)).
Lemma candidate_50: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10)   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 O)).
Lemma candidate_49: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf7 O)).
Lemma candidate_47: forall (lf7 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add lf7 lf10)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf7) O).
Lemma candidate_144: forall (lf10 : nat), @eq nat (Nat.add lf10 lf10)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 O) (PeanoNat.Nat.add lf10 O)).
Lemma candidate_143: forall (lf10 : nat), @eq nat (Nat.add lf10 lf10)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 O)) O).
Lemma candidate_224: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@cons bool false (@nil bool)) false)).
Lemma candidate_502: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf10)).
Lemma candidate_501: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf10)).
Lemma candidate_500: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 lf9)).
Lemma candidate_499: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf10) lf10).
Lemma candidate_154: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf10)).
Lemma candidate_153: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf10)).
Lemma candidate_152: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 lf9)).
Lemma candidate_151: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf10) lf10).
Lemma candidate_292: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@cons bool false (@nil bool)) false)).
Lemma candidate_76: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf8)).
Lemma candidate_75: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 lf9)).
Lemma candidate_74: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 lf9)).
Lemma candidate_73: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf9) lf8).
Lemma candidate_72: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) lf9).
Lemma candidate_56: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9)   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf9 lf10)).
Lemma candidate_55: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf7 lf10)).
Lemma candidate_54: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9)   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 lf9)).
Lemma candidate_53: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf7 lf9)).
Lemma candidate_64: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (S lf8))).
Lemma candidate_63: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 (S lf9))).
Lemma candidate_62: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 (S lf9))).
Lemma candidate_61: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf8))).
Lemma candidate_60: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 lf9))).
Lemma candidate_59: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9))   (S (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 lf9))).
Lemma candidate_34: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (S lf8)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_33: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 (S lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_32: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 (S lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_22: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf8)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_21: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_20: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 lf9)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_19: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf9) lf8))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_16: forall (lf9 : nat) (lf8 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_38: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf9 lf10))).
Lemma candidate_37: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf7 lf10))).
Lemma candidate_36: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 lf9))).
Lemma candidate_35: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf7 lf9))).
Lemma candidate_25: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf9 (S lf10))).
Lemma candidate_24: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf7 (S lf10))).
Lemma candidate_23: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 (S lf9))).
Lemma candidate_9: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf7) lf9)).
Lemma candidate_223: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_291: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) (Adder.BV_full_adder_carry l0 (@nil bool) false))).
Lemma candidate_14: forall (lf9 : nat) (lf8 : nat), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf8 O)) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_13: forall (lf9 : nat) (lf8 : nat), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 (PeanoNat.Nat.add lf9 O)) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_12: forall (lf9 : nat) (lf8 : nat), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf8) O) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_11: forall (lf9 : nat) (lf8 : nat), @eq nat   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) O) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf8 lf9) lf9)).
Lemma candidate_8: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 O)) lf9)).
Lemma candidate_7: forall (lf7 : nat) (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf7 O)) lf9)).
Lemma candidate_275: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf7) (BV_to_nat l0))).
Lemma candidate_4: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_490: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf10))).
Lemma candidate_489: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf10))).
Lemma candidate_488: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf10))).
Lemma candidate_487: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 lf9))).
Lemma candidate_486: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf9))).
Lemma candidate_485: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf9))).
Lemma candidate_124: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf10))).
Lemma candidate_123: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf10))).
Lemma candidate_122: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf10))).
Lemma candidate_121: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 lf9))).
Lemma candidate_120: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf9))).
Lemma candidate_119: forall (lf9 : nat) (lf10 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf9))).
Lemma candidate_466: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (S lf10)))).
Lemma candidate_465: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (S lf10)))).
Lemma candidate_464: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (S lf10)))).
Lemma candidate_463: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (S lf9)))).
Lemma candidate_462: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (S lf9)))).
Lemma candidate_461: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (S lf9)))).
Lemma candidate_130: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (S lf10)))).
Lemma candidate_129: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (S lf10)))).
Lemma candidate_128: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9))   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (S lf10)))).
Lemma candidate_127: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9))   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (S lf9)))).
Lemma candidate_126: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9))   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (S lf9)))).
Lemma candidate_125: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9))   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (S lf9)))).
Lemma candidate_118: forall (lf9 : nat) (lf10 : nat), @eq nat   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (S lf10))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_117: forall (lf9 : nat) (lf10 : nat), @eq nat   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (S lf10))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_116: forall (lf9 : nat) (lf10 : nat), @eq nat   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (S lf10))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_115: forall (lf9 : nat) (lf10 : nat), @eq nat   (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (S lf9))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_114: forall (lf9 : nat) (lf10 : nat), @eq nat   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (S lf9))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_113: forall (lf9 : nat) (lf10 : nat), @eq nat   (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (S lf9))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_478: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf10)))).
Lemma candidate_477: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf10)))).
Lemma candidate_476: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf10)))).
Lemma candidate_475: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 lf9)))).
Lemma candidate_474: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf9)))).
Lemma candidate_473: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf9)))).
Lemma candidate_100: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf10))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_99: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf10))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_98: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf9 lf10))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_97: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 lf9))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_96: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf9))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_95: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf9))))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_454: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf10))         lf9)).
Lemma candidate_453: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf10))         lf9)).
Lemma candidate_452: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 lf9))         lf9)).
Lemma candidate_451: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf10) lf10)         lf9)).
Lemma candidate_449: forall (lf9 : nat) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf9) lf10) lf9))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf10) lf9)         lf9)).
Lemma candidate_94: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 (PeanoNat.Nat.add lf10 lf10))         lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_93: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf9 lf10))         lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_92: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf10 lf9))         lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_91: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf9 lf10) lf10)         lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_90: forall (lf9 : nat) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf9) lf10)         lf9))   (S (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) lf9) lf9)).
Lemma candidate_274: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf10 O))         (BV_to_nat l0))).
Lemma candidate_273: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 (PeanoNat.Nat.add lf7 O))         (BV_to_nat l0))).
Lemma candidate_272: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) O)         (BV_to_nat l0))).
Lemma candidate_271: forall (lf7 : nat) (l0 : list bool) (lf10 : nat), @eq nat (S (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf10) (BV_to_nat l0)))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf10 lf7) O)         (BV_to_nat l0))).
Lemma candidate_257: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false))).
Lemma candidate_3: forall (l : list bool) (lf9 : nat), @eq nat   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add (Nat.add (BV_to_nat l) lf9) (BV_to_nat l)) lf9))   (S      (PeanoNat.Nat.add         (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) lf9) lf9)).
Lemma candidate_2: forall (l0 : list bool) (lf10 : nat), @eq nat   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 (BV_to_nat l0)) lf10)         (BV_to_nat l0)))   (S      (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf10 lf10) (BV_to_nat l0))         (BV_to_nat l0))).
Lemma candidate_221: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))).
Lemma candidate_289: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l0 false))).
Lemma candidate_225: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_293: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 false)).
Lemma candidate_222: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_290: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 (Adder.BV_full_adder_carry l0 (@nil bool) false))).
Lemma candidate_258: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))).
Lemma candidate_256: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat (Adder.BV_full_adder_carry l (@nil bool) false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))).
Lemma candidate_255: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))).