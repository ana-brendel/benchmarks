File Information
- File name: AdderProof
- Original Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/AdderProof/AdderProof_lemma_BV_full_adder_nil_ok_70
- LFind Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/AdderProof/_lfind_AdderProof_lemma_BV_full_adder_nil_ok_70
- Namespace: Circuits
- Proof name: BV_full_adder_ok
- Theorem: Theorem BV_full_adder_ok: forall (v0 w0 : BV) (cin0 : bool),
@eq nat (BV_to_nat (BV_full_adder v0 w0 cin0))
  (Nat.add (Nat.add (BV_to_nat v0) (BV_to_nat w0)) (bool_to_nat cin0)).
- Declarations: 
From lfind Require Import LFind.
From CircuitsCoqGym Require Import Adder.

Proof Context
* Goal State: @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))
  (Nat.add (BV_to_nat w) (bool_to_nat cin))

* Hypothesis:
cin : bool
v : BV
w : BV

* Types:
list bool
Set
Prop
BV
bool
nat

* Polymorphic Types:


* Variables:
cin : bool
w : BV

* Terms:
nat : Set
bool : Set
cin : bool
BV_to_nat w : nat
@eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))
  (Nat.add (BV_to_nat w) (bool_to_nat cin)) : Prop
w : BV
BV_full_adder w (@nil bool) cin : BV
Nat.add (BV_to_nat w) (bool_to_nat cin) : nat
@nil bool : list bool
BV : Set
BV_to_nat (BV_full_adder w (@nil bool) cin) : nat
bool_to_nat cin : nat

* Functions:
bool_to_nat  : forall _ : bool, nat
BV_full_adder  : forall (_ : BV) (_ : BV) (_ : bool), BV
Nat.add  : forall (_ : nat) (_ : nat), nat
@nil  : forall A : Type, list A
@eq  : forall (A : Type) (_ : A) (_ : A), Prop
BV_to_nat  : forall _ : BV, nat

<---GENERALIZATION--->
Time elapsed: 2 seconds
Generalized Variables:
lf3 : BV = BV_full_adder w (@nil bool) cin
lf1 : nat = BV_to_nat (BV_full_adder w (@nil bool) cin)
lf4 : nat = bool_to_nat cin
lf5 : nat = BV_to_nat w
lf2 : nat = Nat.add (BV_to_nat w) (bool_to_nat cin)
lf6 : list bool = @nil bool

Generalizations:
Lemma conj1: forall (lf2 : nat) (lf1 : nat), @eq nat lf1 lf2.
Lemma conj3: forall (lf5 : nat) (lf4 : nat) (lf1 : nat), @eq nat lf1 (Nat.add lf5 lf4).
Lemma conj7: forall (lf4 : nat) (w : BV) (lf1 : nat), @eq nat lf1 (Nat.add (BV_to_nat w) lf4).
Lemma conj11: forall (lf5 : nat) (cin : bool) (lf1 : nat), @eq nat lf1 (Nat.add lf5 (bool_to_nat cin)).
Lemma conj15: forall (cin : bool) (w : BV) (lf1 : nat), @eq nat lf1 (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma conj17: forall (lf2 : nat) (lf3 : BV), @eq nat (BV_to_nat lf3) lf2.
Lemma conj19: forall (lf5 : nat) (lf4 : nat) (lf3 : BV), @eq nat (BV_to_nat lf3) (Nat.add lf5 lf4).
Lemma conj23: forall (lf4 : nat) (w : BV) (lf3 : BV), @eq nat (BV_to_nat lf3) (Nat.add (BV_to_nat w) lf4).
Lemma conj27: forall (lf5 : nat) (cin : bool) (lf3 : BV), @eq nat (BV_to_nat lf3) (Nat.add lf5 (bool_to_nat cin)).
Lemma conj31: forall (cin : bool) (w : BV) (lf3 : BV), @eq nat (BV_to_nat lf3) (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma conj49: forall (lf6 : list bool) (lf2 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder w lf6 cin)) lf2.
Lemma conj50: forall (lf2 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin)) lf2.
Lemma conj51: forall (lf6 : list bool) (lf5 : nat) (cin : bool) (lf4 : nat) (w : BV), @eq nat (BV_to_nat (BV_full_adder w lf6 cin)) (Nat.add lf5 lf4).
Lemma conj52: forall (lf5 : nat) (cin : bool) (lf4 : nat) (w : BV), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin)) (Nat.add lf5 lf4).
Lemma conj55: forall (lf6 : list bool) (cin : bool) (lf4 : nat) (w : BV), @eq nat (BV_to_nat (BV_full_adder w lf6 cin)) (Nat.add (BV_to_nat w) lf4).
Lemma conj56: forall (cin : bool) (lf4 : nat) (w : BV), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))
  (Nat.add (BV_to_nat w) lf4).
Lemma conj59: forall (lf6 : list bool) (lf5 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder w lf6 cin)) (Nat.add lf5 (bool_to_nat cin)).
Lemma conj60: forall (lf5 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))
  (Nat.add lf5 (bool_to_nat cin)).
Lemma conj63: forall (lf6 : list bool) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))
  (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma conj64: forall (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))
  (Nat.add (BV_to_nat w) (bool_to_nat cin)).


<---VALIDITY CHECKS--->
Time elapsed: 61 seconds
Valid:
Lemma conj64: forall (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))
  (Nat.add (BV_to_nat w) (bool_to_nat cin)).

Invalid:
Lemma conj63: forall (lf6 : list bool) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))
  (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma conj60: forall (lf5 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))
  (Nat.add lf5 (bool_to_nat cin)).
Lemma conj59: forall (lf6 : list bool) (lf5 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder w lf6 cin)) (Nat.add lf5 (bool_to_nat cin)).
Lemma conj56: forall (cin : bool) (lf4 : nat) (w : BV), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))
  (Nat.add (BV_to_nat w) lf4).
Lemma conj55: forall (lf6 : list bool) (cin : bool) (lf4 : nat) (w : BV), @eq nat (BV_to_nat (BV_full_adder w lf6 cin)) (Nat.add (BV_to_nat w) lf4).
Lemma conj52: forall (lf5 : nat) (cin : bool) (lf4 : nat) (w : BV), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin)) (Nat.add lf5 lf4).
Lemma conj51: forall (lf6 : list bool) (lf5 : nat) (cin : bool) (lf4 : nat) (w : BV), @eq nat (BV_to_nat (BV_full_adder w lf6 cin)) (Nat.add lf5 lf4).
Lemma conj50: forall (lf2 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin)) lf2.
Lemma conj49: forall (lf6 : list bool) (lf2 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder w lf6 cin)) lf2.
Lemma conj31: forall (cin : bool) (w : BV) (lf3 : BV), @eq nat (BV_to_nat lf3) (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma conj27: forall (lf5 : nat) (cin : bool) (lf3 : BV), @eq nat (BV_to_nat lf3) (Nat.add lf5 (bool_to_nat cin)).
Lemma conj23: forall (lf4 : nat) (w : BV) (lf3 : BV), @eq nat (BV_to_nat lf3) (Nat.add (BV_to_nat w) lf4).
Lemma conj19: forall (lf5 : nat) (lf4 : nat) (lf3 : BV), @eq nat (BV_to_nat lf3) (Nat.add lf5 lf4).
Lemma conj17: forall (lf2 : nat) (lf3 : BV), @eq nat (BV_to_nat lf3) lf2.
Lemma conj15: forall (cin : bool) (w : BV) (lf1 : nat), @eq nat lf1 (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma conj11: forall (lf5 : nat) (cin : bool) (lf1 : nat), @eq nat lf1 (Nat.add lf5 (bool_to_nat cin)).
Lemma conj7: forall (lf4 : nat) (w : BV) (lf1 : nat), @eq nat lf1 (Nat.add (BV_to_nat w) lf4).
Lemma conj3: forall (lf5 : nat) (lf4 : nat) (lf1 : nat), @eq nat lf1 (Nat.add lf5 lf4).
Lemma conj1: forall (lf2 : nat) (lf1 : nat), @eq nat lf1 lf2.

<---ADD IMPLICATIONS--->
Time elapsed: 61 seconds
Generalizations:
Lemma conj63: forall (lf6 : list bool) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))
  (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma conj60: forall (lf5 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))
  (Nat.add lf5 (bool_to_nat cin)).
Lemma conj59: forall (lf6 : list bool) (lf5 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder w lf6 cin)) (Nat.add lf5 (bool_to_nat cin)).
Lemma conj56: forall (cin : bool) (lf4 : nat) (w : BV), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))
  (Nat.add (BV_to_nat w) lf4).
Lemma conj55: forall (lf6 : list bool) (cin : bool) (lf4 : nat) (w : BV), @eq nat (BV_to_nat (BV_full_adder w lf6 cin)) (Nat.add (BV_to_nat w) lf4).
Lemma conj52: forall (lf5 : nat) (cin : bool) (lf4 : nat) (w : BV), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin)) (Nat.add lf5 lf4).
Lemma conj51: forall (lf6 : list bool) (lf5 : nat) (cin : bool) (lf4 : nat) (w : BV), @eq nat (BV_to_nat (BV_full_adder w lf6 cin)) (Nat.add lf5 lf4).
Lemma conj50: forall (lf2 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin)) lf2.
Lemma conj49: forall (lf6 : list bool) (lf2 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder w lf6 cin)) lf2.
Lemma conj31: forall (cin : bool) (w : BV) (lf3 : BV), @eq nat (BV_to_nat lf3) (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma conj27: forall (lf5 : nat) (cin : bool) (lf3 : BV), @eq nat (BV_to_nat lf3) (Nat.add lf5 (bool_to_nat cin)).
Lemma conj23: forall (lf4 : nat) (w : BV) (lf3 : BV), @eq nat (BV_to_nat lf3) (Nat.add (BV_to_nat w) lf4).
Lemma conj19: forall (lf5 : nat) (lf4 : nat) (lf3 : BV), @eq nat (BV_to_nat lf3) (Nat.add lf5 lf4).
Lemma conj17: forall (lf2 : nat) (lf3 : BV), @eq nat (BV_to_nat lf3) lf2.
Lemma conj15: forall (cin : bool) (w : BV) (lf1 : nat), @eq nat lf1 (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma conj11: forall (lf5 : nat) (cin : bool) (lf1 : nat), @eq nat lf1 (Nat.add lf5 (bool_to_nat cin)).
Lemma conj7: forall (lf4 : nat) (w : BV) (lf1 : nat), @eq nat lf1 (Nat.add (BV_to_nat w) lf4).
Lemma conj3: forall (lf5 : nat) (lf4 : nat) (lf1 : nat), @eq nat lf1 (Nat.add lf5 lf4).
Lemma conj1: forall (lf2 : nat) (lf1 : nat), @eq nat lf1 lf2.


<---VALIDITY CHECKS--->
Time elapsed: 88 seconds
Valid:

Invalid:
Lemma conj1: forall (lf2 : nat) (lf1 : nat), @eq nat lf1 lf2.
Lemma conj3: forall (lf5 : nat) (lf4 : nat) (lf1 : nat), @eq nat lf1 (Nat.add lf5 lf4).
Lemma conj7: forall (lf4 : nat) (w : BV) (lf1 : nat), @eq nat lf1 (Nat.add (BV_to_nat w) lf4).
Lemma conj11: forall (lf5 : nat) (cin : bool) (lf1 : nat), @eq nat lf1 (Nat.add lf5 (bool_to_nat cin)).
Lemma conj15: forall (cin : bool) (w : BV) (lf1 : nat), @eq nat lf1 (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma conj17: forall (lf2 : nat) (lf3 : BV), @eq nat (BV_to_nat lf3) lf2.
Lemma conj19: forall (lf5 : nat) (lf4 : nat) (lf3 : BV), @eq nat (BV_to_nat lf3) (Nat.add lf5 lf4).
Lemma conj23: forall (lf4 : nat) (w : BV) (lf3 : BV), @eq nat (BV_to_nat lf3) (Nat.add (BV_to_nat w) lf4).
Lemma conj27: forall (lf5 : nat) (cin : bool) (lf3 : BV), @eq nat (BV_to_nat lf3) (Nat.add lf5 (bool_to_nat cin)).
Lemma conj31: forall (cin : bool) (w : BV) (lf3 : BV), @eq nat (BV_to_nat lf3) (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma conj49: forall (lf6 : list bool) (lf2 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder w lf6 cin)) lf2.
Lemma conj50: forall (lf2 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin)) lf2.
Lemma conj51: forall (lf6 : list bool) (lf5 : nat) (cin : bool) (lf4 : nat) (w : BV), @eq nat (BV_to_nat (BV_full_adder w lf6 cin)) (Nat.add lf5 lf4).
Lemma conj52: forall (lf5 : nat) (cin : bool) (lf4 : nat) (w : BV), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin)) (Nat.add lf5 lf4).
Lemma conj55: forall (lf6 : list bool) (cin : bool) (lf4 : nat) (w : BV), @eq nat (BV_to_nat (BV_full_adder w lf6 cin)) (Nat.add (BV_to_nat w) lf4).
Lemma conj56: forall (cin : bool) (lf4 : nat) (w : BV), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))
  (Nat.add (BV_to_nat w) lf4).
Lemma conj59: forall (lf6 : list bool) (lf5 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder w lf6 cin)) (Nat.add lf5 (bool_to_nat cin)).
Lemma conj60: forall (lf5 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))
  (Nat.add lf5 (bool_to_nat cin)).
Lemma conj63: forall (lf6 : list bool) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))
  (Nat.add (BV_to_nat w) (bool_to_nat cin)).


<---CREATE SKETCHES--->
Time elapsed: 89 seconds
Sketches:
Sketch conj3_sketch0 : @eq nat lf1 (##hole##)
Sketch conj3_term_sketch0 : @eq nat (Nat.add lf5 lf4) (##hole##)
Sketch conj7_sketch0 : @eq nat lf1 (##hole##)
Sketch conj7_sketch1 : @eq nat lf1 (Nat.add (##hole##) lf4)
Sketch conj7_term_sketch0 : @eq nat (Nat.add (BV_to_nat w) lf4) (##hole##)
Sketch conj7_term_sketch1 : @eq nat (BV_to_nat w) (##hole##)
Sketch conj11_sketch0 : @eq nat lf1 (##hole##)
Sketch conj11_sketch1 : @eq nat lf1 (Nat.add lf5 (##hole##))
Sketch conj11_term_sketch0 : @eq nat (Nat.add lf5 (bool_to_nat cin)) (##hole##)
Sketch conj11_term_sketch1 : @eq nat (bool_to_nat cin) (##hole##)
Sketch conj15_sketch0 : @eq nat lf1 (Nat.add (##hole##) (bool_to_nat cin))
Sketch conj15_sketch1 : @eq nat lf1 (##hole##)
Sketch conj15_sketch2 : @eq nat lf1 (Nat.add (BV_to_nat w) (##hole##))
Sketch conj15_term_sketch0 : @eq nat (BV_to_nat w) (##hole##)
Sketch conj15_term_sketch1 : @eq nat (Nat.add (BV_to_nat w) (bool_to_nat cin)) (##hole##)
Sketch conj15_term_sketch2 : @eq nat (bool_to_nat cin) (##hole##)
Sketch conj17_sketch0 : @eq nat (##hole##) lf2
Sketch conj17_term_sketch0 : @eq nat (BV_to_nat lf3) (##hole##)
Sketch conj19_sketch0 : @eq nat (##hole##) (Nat.add lf5 lf4)
Sketch conj19_sketch1 : @eq nat (BV_to_nat lf3) (##hole##)
Sketch conj19_term_sketch0 : @eq nat (BV_to_nat lf3) (##hole##)
Sketch conj19_term_sketch1 : @eq nat (Nat.add lf5 lf4) (##hole##)
Sketch conj23_sketch0 : @eq nat (BV_to_nat lf3) (##hole##)
Sketch conj23_sketch1 : @eq nat (BV_to_nat lf3) (Nat.add (##hole##) lf4)
Sketch conj23_sketch2 : @eq nat (##hole##) (Nat.add (BV_to_nat w) lf4)
Sketch conj23_term_sketch0 : @eq nat (Nat.add (BV_to_nat w) lf4) (##hole##)
Sketch conj23_term_sketch1 : @eq nat (BV_to_nat w) (##hole##)
Sketch conj23_term_sketch2 : @eq nat (BV_to_nat lf3) (##hole##)
Sketch conj27_sketch0 : @eq nat (BV_to_nat lf3) (##hole##)
Sketch conj27_sketch1 : @eq nat (##hole##) (Nat.add lf5 (bool_to_nat cin))
Sketch conj27_sketch2 : @eq nat (BV_to_nat lf3) (Nat.add lf5 (##hole##))
Sketch conj27_term_sketch0 : @eq nat (Nat.add lf5 (bool_to_nat cin)) (##hole##)
Sketch conj27_term_sketch1 : @eq nat (BV_to_nat lf3) (##hole##)
Sketch conj27_term_sketch2 : @eq nat (bool_to_nat cin) (##hole##)
Sketch conj31_sketch0 : @eq nat (BV_to_nat lf3) (Nat.add (##hole##) (bool_to_nat cin))
Sketch conj31_sketch1 : @eq nat (##hole##) (Nat.add (BV_to_nat w) (bool_to_nat cin))
Sketch conj31_sketch2 : @eq nat (BV_to_nat lf3) (##hole##)
Sketch conj31_sketch3 : @eq nat (BV_to_nat lf3) (Nat.add (BV_to_nat w) (##hole##))
Sketch conj31_term_sketch0 : @eq nat (BV_to_nat w) (##hole##)
Sketch conj31_term_sketch1 : @eq nat (BV_to_nat lf3) (##hole##)
Sketch conj31_term_sketch2 : @eq nat (Nat.add (BV_to_nat w) (bool_to_nat cin)) (##hole##)
Sketch conj31_term_sketch3 : @eq nat (bool_to_nat cin) (##hole##)
Sketch conj49_sketch0 : @eq nat (##hole##) lf2
Sketch conj49_sketch1 : @eq nat (BV_to_nat (##hole##)) lf2
Sketch conj49_term_sketch0 : @eq nat (BV_to_nat (BV_full_adder w lf6 cin)) (##hole##)
Sketch conj49_term_sketch1 : @eq BV (BV_full_adder w lf6 cin) (##hole##)
Sketch conj50_sketch0 : @eq nat (BV_to_nat (##hole##)) lf2
Sketch conj50_sketch1 : @eq nat (BV_to_nat (BV_full_adder w (##hole##) cin)) lf2
Sketch conj50_sketch2 : @eq nat (##hole##) lf2
Sketch conj50_term_sketch0 : @eq BV (BV_full_adder w (@nil bool) cin) (##hole##)
Sketch conj50_term_sketch1 : @eq (list bool) (@nil bool) (##hole##)
Sketch conj50_term_sketch2 : @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin)) (##hole##)
Sketch conj51_sketch0 : @eq nat (##hole##) (Nat.add lf5 lf4)
Sketch conj51_sketch1 : @eq nat (BV_to_nat (BV_full_adder w lf6 cin)) (##hole##)
Sketch conj51_sketch2 : @eq nat (BV_to_nat (##hole##)) (Nat.add lf5 lf4)
Sketch conj51_term_sketch0 : @eq nat (BV_to_nat (BV_full_adder w lf6 cin)) (##hole##)
Sketch conj51_term_sketch1 : @eq nat (Nat.add lf5 lf4) (##hole##)
Sketch conj51_term_sketch2 : @eq BV (BV_full_adder w lf6 cin) (##hole##)
Sketch conj52_sketch0 : @eq nat (BV_to_nat (##hole##)) (Nat.add lf5 lf4)
Sketch conj52_sketch1 : @eq nat (BV_to_nat (BV_full_adder w (##hole##) cin)) (Nat.add lf5 lf4)
Sketch conj52_sketch2 : @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin)) (##hole##)
Sketch conj52_sketch3 : @eq nat (##hole##) (Nat.add lf5 lf4)
Sketch conj52_term_sketch0 : @eq BV (BV_full_adder w (@nil bool) cin) (##hole##)
Sketch conj52_term_sketch1 : @eq (list bool) (@nil bool) (##hole##)
Sketch conj52_term_sketch2 : @eq nat (Nat.add lf5 lf4) (##hole##)
Sketch conj52_term_sketch3 : @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin)) (##hole##)
Sketch conj55_sketch0 : @eq nat (BV_to_nat (BV_full_adder w lf6 cin)) (##hole##)
Sketch conj55_sketch1 : @eq nat (BV_to_nat (BV_full_adder w lf6 cin)) (Nat.add (##hole##) lf4)
Sketch conj55_sketch2 : @eq nat (##hole##) (Nat.add (BV_to_nat w) lf4)
Sketch conj55_sketch3 : @eq nat (BV_to_nat (##hole##)) (Nat.add (BV_to_nat w) lf4)
Sketch conj55_term_sketch0 : @eq nat (Nat.add (BV_to_nat w) lf4) (##hole##)
Sketch conj55_term_sketch1 : @eq nat (BV_to_nat w) (##hole##)
Sketch conj55_term_sketch2 : @eq nat (BV_to_nat (BV_full_adder w lf6 cin)) (##hole##)
Sketch conj55_term_sketch3 : @eq BV (BV_full_adder w lf6 cin) (##hole##)
Sketch conj56_sketch0 : @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin)) (##hole##)
Sketch conj56_sketch1 : @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))
  (Nat.add (##hole##) lf4)
Sketch conj56_sketch2 : @eq nat (BV_to_nat (##hole##)) (Nat.add (BV_to_nat w) lf4)
Sketch conj56_sketch3 : @eq nat (BV_to_nat (BV_full_adder w (##hole##) cin))
  (Nat.add (BV_to_nat w) lf4)
Sketch conj56_sketch4 : @eq nat (##hole##) (Nat.add (BV_to_nat w) lf4)
Sketch conj56_term_sketch0 : @eq nat (Nat.add (BV_to_nat w) lf4) (##hole##)
Sketch conj56_term_sketch1 : @eq nat (BV_to_nat w) (##hole##)
Sketch conj56_term_sketch2 : @eq BV (BV_full_adder w (@nil bool) cin) (##hole##)
Sketch conj56_term_sketch3 : @eq (list bool) (@nil bool) (##hole##)
Sketch conj56_term_sketch4 : @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin)) (##hole##)
Sketch conj59_sketch0 : @eq nat (BV_to_nat (BV_full_adder w lf6 cin)) (##hole##)
Sketch conj59_sketch1 : @eq nat (##hole##) (Nat.add lf5 (bool_to_nat cin))
Sketch conj59_sketch2 : @eq nat (BV_to_nat (BV_full_adder w lf6 cin)) (Nat.add lf5 (##hole##))
Sketch conj59_sketch3 : @eq nat (BV_to_nat (##hole##)) (Nat.add lf5 (bool_to_nat cin))
Sketch conj59_term_sketch0 : @eq nat (Nat.add lf5 (bool_to_nat cin)) (##hole##)
Sketch conj59_term_sketch1 : @eq nat (BV_to_nat (BV_full_adder w lf6 cin)) (##hole##)
Sketch conj59_term_sketch2 : @eq nat (bool_to_nat cin) (##hole##)
Sketch conj59_term_sketch3 : @eq BV (BV_full_adder w lf6 cin) (##hole##)
Sketch conj60_sketch0 : @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin)) (##hole##)
Sketch conj60_sketch1 : @eq nat (BV_to_nat (##hole##)) (Nat.add lf5 (bool_to_nat cin))
Sketch conj60_sketch2 : @eq nat (BV_to_nat (BV_full_adder w (##hole##) cin))
  (Nat.add lf5 (bool_to_nat cin))
Sketch conj60_sketch3 : @eq nat (##hole##) (Nat.add lf5 (bool_to_nat cin))
Sketch conj60_sketch4 : @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))
  (Nat.add lf5 (##hole##))
Sketch conj60_term_sketch0 : @eq nat (Nat.add lf5 (bool_to_nat cin)) (##hole##)
Sketch conj60_term_sketch1 : @eq BV (BV_full_adder w (@nil bool) cin) (##hole##)
Sketch conj60_term_sketch2 : @eq (list bool) (@nil bool) (##hole##)
Sketch conj60_term_sketch3 : @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin)) (##hole##)
Sketch conj60_term_sketch4 : @eq nat (bool_to_nat cin) (##hole##)
Sketch conj63_sketch0 : @eq nat (BV_to_nat (BV_full_adder w lf6 cin))
  (Nat.add (##hole##) (bool_to_nat cin))
Sketch conj63_sketch1 : @eq nat (##hole##) (Nat.add (BV_to_nat w) (bool_to_nat cin))
Sketch conj63_sketch2 : @eq nat (BV_to_nat (BV_full_adder w lf6 cin)) (##hole##)
Sketch conj63_sketch3 : @eq nat (BV_to_nat (BV_full_adder w lf6 cin))
  (Nat.add (BV_to_nat w) (##hole##))
Sketch conj63_sketch4 : @eq nat (BV_to_nat (##hole##)) (Nat.add (BV_to_nat w) (bool_to_nat cin))
Sketch conj63_term_sketch0 : @eq nat (BV_to_nat w) (##hole##)
Sketch conj63_term_sketch1 : @eq nat (BV_to_nat (BV_full_adder w lf6 cin)) (##hole##)
Sketch conj63_term_sketch2 : @eq nat (Nat.add (BV_to_nat w) (bool_to_nat cin)) (##hole##)
Sketch conj63_term_sketch3 : @eq nat (bool_to_nat cin) (##hole##)
Sketch conj63_term_sketch4 : @eq BV (BV_full_adder w lf6 cin) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 730 seconds
Problems per Sketch:
Sketch conj52_sketch2 --> Problem  synth_11
Sketch conj7_sketch1 --> Problem  synth_3
Sketch conj52_sketch1 --> Problem  synth_25
Sketch conj60_term_sketch1 --> Problem  synth_22
Sketch conj59_term_sketch2 --> Problem  synth_8
Sketch conj11_term_sketch1 --> Problem  synth_8
Sketch conj63_sketch4 --> Problem  synth_22
Sketch conj15_term_sketch2 --> Problem  synth_8
Sketch conj23_sketch0 --> Problem  synth_13
Sketch conj60_term_sketch4 --> Problem  synth_8
Sketch conj59_term_sketch1 --> Problem  synth_19
Sketch conj59_sketch1 --> Problem  synth_7
Sketch conj7_sketch0 --> Problem  synth_1
Sketch conj60_sketch0 --> Problem  synth_11
Sketch conj56_sketch4 --> Problem  synth_4
Sketch conj11_sketch1 --> Problem  synth_6
Sketch conj50_sketch2 --> Problem  synth_12
Sketch conj17_term_sketch0 --> Problem  synth_13
Sketch conj63_term_sketch0 --> Problem  synth_5
Sketch conj56_term_sketch0 --> Problem  synth_4
Sketch conj31_sketch0 --> Problem  synth_16
Sketch conj50_term_sketch2 --> Problem  synth_11
Sketch conj31_term_sketch3 --> Problem  synth_8
Sketch conj55_sketch3 --> Problem  synth_27
Sketch conj31_term_sketch1 --> Problem  synth_13
Sketch conj7_term_sketch1 --> Problem  synth_5
Sketch conj60_term_sketch3 --> Problem  synth_11
Sketch conj23_sketch1 --> Problem  synth_14
Sketch conj60_term_sketch2 --> Problem  synth_23
Sketch conj60_sketch1 --> Problem  synth_31
Sketch conj55_sketch1 --> Problem  synth_26
Sketch conj60_sketch2 --> Problem  synth_32
Sketch conj59_sketch3 --> Problem  synth_31
Sketch conj27_term_sketch2 --> Problem  synth_8
Sketch conj63_term_sketch4 --> Problem  synth_20
Sketch conj3_term_sketch0 --> Problem  synth_2
Sketch conj59_sketch2 --> Problem  synth_30
Sketch conj11_term_sketch0 --> Problem  synth_7
Sketch conj52_term_sketch1 --> Problem  synth_23
Sketch conj23_term_sketch2 --> Problem  synth_13
Sketch conj7_term_sketch0 --> Problem  synth_4
Sketch conj19_term_sketch1 --> Problem  synth_2
Sketch conj51_term_sketch2 --> Problem  synth_20
Sketch conj27_sketch2 --> Problem  synth_15
Sketch conj60_term_sketch0 --> Problem  synth_7
Sketch conj52_term_sketch2 --> Problem  synth_2
Sketch conj31_sketch2 --> Problem  synth_13
Sketch conj27_sketch1 --> Problem  synth_7
Sketch conj60_sketch3 --> Problem  synth_7
Sketch conj51_sketch0 --> Problem  synth_2
Sketch conj31_sketch3 --> Problem  synth_17
Sketch conj23_term_sketch0 --> Problem  synth_4
Sketch conj56_term_sketch3 --> Problem  synth_23
Sketch conj19_term_sketch0 --> Problem  synth_13
Sketch conj52_term_sketch3 --> Problem  synth_11
Sketch conj63_term_sketch1 --> Problem  synth_19
Sketch conj15_sketch1 --> Problem  synth_1
Sketch conj51_term_sketch1 --> Problem  synth_2
Sketch conj51_term_sketch0 --> Problem  synth_19
Sketch conj56_sketch3 --> Problem  synth_29
Sketch conj55_term_sketch0 --> Problem  synth_4
Sketch conj15_term_sketch1 --> Problem  synth_11
Sketch conj52_term_sketch0 --> Problem  synth_22
Sketch conj27_term_sketch1 --> Problem  synth_13
Sketch conj23_sketch2 --> Problem  synth_4
Sketch conj19_sketch0 --> Problem  synth_2
Sketch conj17_sketch0 --> Problem  synth_12
Sketch conj49_sketch0 --> Problem  synth_12
Sketch conj63_sketch2 --> Problem  synth_19
Sketch conj55_term_sketch1 --> Problem  synth_5
Sketch conj52_sketch0 --> Problem  synth_24
Sketch conj56_term_sketch4 --> Problem  synth_11
Sketch conj3_sketch0 --> Problem  synth_1
Sketch conj59_sketch0 --> Problem  synth_19
Sketch conj49_term_sketch1 --> Problem  synth_20
Sketch conj23_term_sketch1 --> Problem  synth_5
Sketch conj63_term_sketch3 --> Problem  synth_8
Sketch conj63_sketch0 --> Problem  synth_34
Sketch conj55_term_sketch3 --> Problem  synth_20
Sketch conj63_sketch3 --> Problem  synth_35
Sketch conj50_term_sketch0 --> Problem  synth_22
Sketch conj59_term_sketch0 --> Problem  synth_7
Sketch conj52_sketch3 --> Problem  synth_2
Sketch conj31_term_sketch0 --> Problem  synth_5
Sketch conj59_term_sketch3 --> Problem  synth_20
Sketch conj51_sketch1 --> Problem  synth_19
Sketch conj50_term_sketch1 --> Problem  synth_23
Sketch conj55_sketch0 --> Problem  synth_19
Sketch conj50_sketch0 --> Problem  synth_18
Sketch conj63_sketch1 --> Problem  synth_11
Sketch conj56_term_sketch2 --> Problem  synth_22
Sketch conj27_sketch0 --> Problem  synth_13
Sketch conj56_term_sketch1 --> Problem  synth_5
Sketch conj56_sketch2 --> Problem  synth_27
Sketch conj19_sketch1 --> Problem  synth_13
Sketch conj15_sketch2 --> Problem  synth_10
Sketch conj50_sketch1 --> Problem  synth_21
Sketch conj15_sketch0 --> Problem  synth_9
Sketch conj60_sketch4 --> Problem  synth_33
Sketch conj56_sketch0 --> Problem  synth_11
Sketch conj56_sketch1 --> Problem  synth_28
Sketch conj31_sketch1 --> Problem  synth_11
Sketch conj31_term_sketch2 --> Problem  synth_11
Sketch conj11_sketch0 --> Problem  synth_1
Sketch conj55_term_sketch2 --> Problem  synth_19
Sketch conj27_term_sketch0 --> Problem  synth_7
Sketch conj51_sketch2 --> Problem  synth_24
Sketch conj63_term_sketch2 --> Problem  synth_11
Sketch conj55_sketch2 --> Problem  synth_4
Sketch conj15_term_sketch0 --> Problem  synth_5
Sketch conj49_sketch1 --> Problem  synth_18
Sketch conj49_term_sketch0 --> Problem  synth_19


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 1215 seconds

Problem: synth_28
 Nat.add (BV.BV_to_nat w) O
 BV.BV_to_nat w

Problem: synth_17

Problem: synth_29
 @nil bool

Problem: synth_26
 Nat.add (BV.BV_to_nat w) O
 BV.BV_to_nat w

Problem: synth_9

Problem: synth_30
 Nat.add (Bool_compl.bool_to_nat cin) O
 Bool_compl.bool_to_nat cin

Problem: synth_11
 Nat.add (BV.BV_to_nat w) (Bool_compl.bool_to_nat cin)
 Nat.add (Bool_compl.bool_to_nat cin) (BV.BV_to_nat w)

Problem: synth_1
 Nat.add lf1 O
 lf1

Problem: synth_15

Problem: synth_31

Problem: synth_14

Problem: synth_8
 Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)
 Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)
 Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O
 Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O
 Nat.add (Bool_compl.bool_to_nat cin) O
 Bool_compl.bool_to_nat cin

Problem: synth_34
 Nat.add (BV.BV_to_nat w) O
 BV.BV_to_nat w

Problem: synth_12
 Nat.add lf2 O
 lf2

Problem: synth_5
 Nat.add (BV.BV_to_nat w) O
 BV.BV_to_nat w

Problem: synth_2
 Nat.add lf5 lf4
 Nat.add lf4 lf5

Problem: synth_22
 BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin cin)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin cin)) BV.nilbv)
 BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin true)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin true)) BV.nilbv)
 BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w cin) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w cin) BV.nilbv)
 Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin cin)
 Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin true)
 Adder.BV_full_adder w BV.nilbv cin

Problem: synth_20
 Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf6 true) cin
 Adder.BV_full_adder w (Adder.BV_full_adder_sum lf6 (@nil bool) true) cin
 Adder.BV_full_adder w (Adder.BV_full_adder_sum lf6 lf6 false) cin
 Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf6 false) cin
 Adder.BV_full_adder w (Adder.BV_full_adder_sum lf6 (@nil bool) false) cin
 Adder.BV_full_adder w BV.nilbv cin

Problem: synth_18

Problem: synth_21
 @nil bool

Problem: synth_25
 @nil bool

Problem: synth_13
 Nat.add (BV.BV_to_nat lf3) O
 BV.BV_to_nat lf3

Problem: synth_6

Problem: synth_7
 Nat.add (Bool_compl.bool_to_nat cin) lf5
 Nat.add lf5 (Bool_compl.bool_to_nat cin)

Problem: synth_4
 Nat.add (Nat.add lf4 (BV.BV_to_nat w)) O
 Nat.add (BV.BV_to_nat w) (Nat.add lf4 O)
 Nat.add (BV.BV_to_nat w) lf4
 Nat.add lf4 (BV.BV_to_nat w)

Problem: synth_23
 @nil bool

Problem: synth_27

Problem: synth_16

Problem: synth_19
 Nat.add (BV.BV_to_nat w) (Bool_compl.bool_to_nat cin)
 Nat.add (Bool_compl.bool_to_nat cin) (BV.BV_to_nat w)

Problem: synth_10

Problem: synth_33
 Nat.add (Bool_compl.bool_to_nat cin) O
 Bool_compl.bool_to_nat cin

Problem: synth_24

Problem: synth_3

Problem: synth_32
 @nil bool

Problem: synth_35
 Bool_compl.bool_to_nat (Adder.BV_full_adder_carry lf6 lf6 cin)
 Bool_compl.bool_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf6 cin)
 Bool_compl.bool_to_nat (Adder.BV_full_adder_carry lf6 (@nil bool) cin)
 Nat.add (Bool_compl.bool_to_nat cin) O
 Bool_compl.bool_to_nat cin

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 1216 seconds
Lemmas:
Lemma candidate_1: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))   (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma candidate_2: forall (lf1 : nat), @eq nat lf1 (Nat.add lf1 O).
Lemma candidate_3: forall (lf1 : nat), @eq nat lf1 (lf1).
Lemma candidate_4: forall (lf4 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf4) (Nat.add lf5 lf4).
Lemma candidate_5: forall (lf4 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf4) (Nat.add lf4 lf5).
Lemma candidate_6: forall (lf1 : nat), @eq nat lf1 (Nat.add lf1 O).
Lemma candidate_7: forall (lf1 : nat), @eq nat lf1 (lf1).
Lemma candidate_8: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (BV_to_nat w) lf4)   (Nat.add (Nat.add lf4 (BV.BV_to_nat w)) O).
Lemma candidate_9: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (BV_to_nat w) lf4)   (Nat.add (BV.BV_to_nat w) (Nat.add lf4 O)).
Lemma candidate_10: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (BV_to_nat w) lf4) (Nat.add (BV.BV_to_nat w) lf4).
Lemma candidate_11: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (BV_to_nat w) lf4) (Nat.add lf4 (BV.BV_to_nat w)).
Lemma candidate_12: forall (w : BV), @eq nat (BV_to_nat w) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_13: forall (w : BV), @eq nat (BV_to_nat w) (BV.BV_to_nat w).
Lemma candidate_14: forall (lf1 : nat), @eq nat lf1 (Nat.add lf1 O).
Lemma candidate_15: forall (lf1 : nat), @eq nat lf1 (lf1).
Lemma candidate_16: forall (cin : bool) (lf5 : nat), @eq nat (Nat.add lf5 (bool_to_nat cin))   (Nat.add (Bool_compl.bool_to_nat cin) lf5).
Lemma candidate_17: forall (cin : bool) (lf5 : nat), @eq nat (Nat.add lf5 (bool_to_nat cin))   (Nat.add lf5 (Bool_compl.bool_to_nat cin)).
Lemma candidate_18: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_19: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_20: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_21: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_22: forall (cin : bool), @eq nat (bool_to_nat cin) (Nat.add (Bool_compl.bool_to_nat cin) O).
Lemma candidate_23: forall (cin : bool), @eq nat (bool_to_nat cin) (Bool_compl.bool_to_nat cin).
Lemma candidate_24: forall (lf1 : nat), @eq nat lf1 (Nat.add lf1 O).
Lemma candidate_25: forall (lf1 : nat), @eq nat lf1 (lf1).
Lemma candidate_26: forall (w : BV), @eq nat (BV_to_nat w) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_27: forall (w : BV), @eq nat (BV_to_nat w) (BV.BV_to_nat w).
Lemma candidate_28: forall (w : BV) (cin : bool), @eq nat (Nat.add (BV_to_nat w) (bool_to_nat cin))   (Nat.add (BV.BV_to_nat w) (Bool_compl.bool_to_nat cin)).
Lemma candidate_29: forall (w : BV) (cin : bool), @eq nat (Nat.add (BV_to_nat w) (bool_to_nat cin))   (Nat.add (Bool_compl.bool_to_nat cin) (BV.BV_to_nat w)).
Lemma candidate_30: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_31: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_32: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_33: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_34: forall (cin : bool), @eq nat (bool_to_nat cin) (Nat.add (Bool_compl.bool_to_nat cin) O).
Lemma candidate_35: forall (cin : bool), @eq nat (bool_to_nat cin) (Bool_compl.bool_to_nat cin).
Lemma candidate_36: forall (lf2 : nat), @eq nat (Nat.add lf2 O) lf2.
Lemma candidate_37: forall (lf2 : nat), @eq nat (lf2) lf2.
Lemma candidate_38: forall (lf3 : BV), @eq nat (BV_to_nat lf3) (Nat.add (BV.BV_to_nat lf3) O).
Lemma candidate_39: forall (lf3 : BV), @eq nat (BV_to_nat lf3) (BV.BV_to_nat lf3).
Lemma candidate_40: forall (lf4 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf4) (Nat.add lf5 lf4).
Lemma candidate_41: forall (lf4 : nat) (lf5 : nat), @eq nat (Nat.add lf4 lf5) (Nat.add lf5 lf4).
Lemma candidate_42: forall (lf3 : BV), @eq nat (BV_to_nat lf3) (Nat.add (BV.BV_to_nat lf3) O).
Lemma candidate_43: forall (lf3 : BV), @eq nat (BV_to_nat lf3) (BV.BV_to_nat lf3).
Lemma candidate_44: forall (lf3 : BV), @eq nat (BV_to_nat lf3) (Nat.add (BV.BV_to_nat lf3) O).
Lemma candidate_45: forall (lf3 : BV), @eq nat (BV_to_nat lf3) (BV.BV_to_nat lf3).
Lemma candidate_46: forall (lf4 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf4) (Nat.add lf5 lf4).
Lemma candidate_47: forall (lf4 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf4) (Nat.add lf4 lf5).
Lemma candidate_48: forall (lf3 : BV), @eq nat (BV_to_nat lf3) (Nat.add (BV.BV_to_nat lf3) O).
Lemma candidate_49: forall (lf3 : BV), @eq nat (BV_to_nat lf3) (BV.BV_to_nat lf3).
Lemma candidate_50: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (Nat.add lf4 (BV.BV_to_nat w)) O)   (Nat.add (BV_to_nat w) lf4).
Lemma candidate_51: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (BV.BV_to_nat w) (Nat.add lf4 O))   (Nat.add (BV_to_nat w) lf4).
Lemma candidate_52: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (BV.BV_to_nat w) lf4) (Nat.add (BV_to_nat w) lf4).
Lemma candidate_53: forall (lf4 : nat) (w : BV), @eq nat (Nat.add lf4 (BV.BV_to_nat w)) (Nat.add (BV_to_nat w) lf4).
Lemma candidate_54: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (BV_to_nat w) lf4)   (Nat.add (Nat.add lf4 (BV.BV_to_nat w)) O).
Lemma candidate_55: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (BV_to_nat w) lf4)   (Nat.add (BV.BV_to_nat w) (Nat.add lf4 O)).
Lemma candidate_56: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (BV_to_nat w) lf4) (Nat.add (BV.BV_to_nat w) lf4).
Lemma candidate_57: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (BV_to_nat w) lf4) (Nat.add lf4 (BV.BV_to_nat w)).
Lemma candidate_58: forall (w : BV), @eq nat (BV_to_nat w) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_59: forall (w : BV), @eq nat (BV_to_nat w) (BV.BV_to_nat w).
Lemma candidate_60: forall (lf3 : BV), @eq nat (BV_to_nat lf3) (Nat.add (BV.BV_to_nat lf3) O).
Lemma candidate_61: forall (lf3 : BV), @eq nat (BV_to_nat lf3) (BV.BV_to_nat lf3).
Lemma candidate_62: forall (lf3 : BV), @eq nat (BV_to_nat lf3) (Nat.add (BV.BV_to_nat lf3) O).
Lemma candidate_63: forall (lf3 : BV), @eq nat (BV_to_nat lf3) (BV.BV_to_nat lf3).
Lemma candidate_64: forall (cin : bool) (lf5 : nat), @eq nat (Nat.add (Bool_compl.bool_to_nat cin) lf5)   (Nat.add lf5 (bool_to_nat cin)).
Lemma candidate_65: forall (cin : bool) (lf5 : nat), @eq nat (Nat.add lf5 (Bool_compl.bool_to_nat cin))   (Nat.add lf5 (bool_to_nat cin)).
Lemma candidate_66: forall (cin : bool) (lf5 : nat), @eq nat (Nat.add lf5 (bool_to_nat cin))   (Nat.add (Bool_compl.bool_to_nat cin) lf5).
Lemma candidate_67: forall (cin : bool) (lf5 : nat), @eq nat (Nat.add lf5 (bool_to_nat cin))   (Nat.add lf5 (Bool_compl.bool_to_nat cin)).
Lemma candidate_68: forall (lf3 : BV), @eq nat (BV_to_nat lf3) (Nat.add (BV.BV_to_nat lf3) O).
Lemma candidate_69: forall (lf3 : BV), @eq nat (BV_to_nat lf3) (BV.BV_to_nat lf3).
Lemma candidate_70: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_71: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_72: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_73: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_74: forall (cin : bool), @eq nat (bool_to_nat cin) (Nat.add (Bool_compl.bool_to_nat cin) O).
Lemma candidate_75: forall (cin : bool), @eq nat (bool_to_nat cin) (Bool_compl.bool_to_nat cin).
Lemma candidate_76: forall (w : BV) (cin : bool), @eq nat (Nat.add (BV.BV_to_nat w) (Bool_compl.bool_to_nat cin))   (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma candidate_77: forall (w : BV) (cin : bool), @eq nat (Nat.add (Bool_compl.bool_to_nat cin) (BV.BV_to_nat w))   (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma candidate_78: forall (lf3 : BV), @eq nat (BV_to_nat lf3) (Nat.add (BV.BV_to_nat lf3) O).
Lemma candidate_79: forall (lf3 : BV), @eq nat (BV_to_nat lf3) (BV.BV_to_nat lf3).
Lemma candidate_80: forall (w : BV), @eq nat (BV_to_nat w) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_81: forall (w : BV), @eq nat (BV_to_nat w) (BV.BV_to_nat w).
Lemma candidate_82: forall (lf3 : BV), @eq nat (BV_to_nat lf3) (Nat.add (BV.BV_to_nat lf3) O).
Lemma candidate_83: forall (lf3 : BV), @eq nat (BV_to_nat lf3) (BV.BV_to_nat lf3).
Lemma candidate_84: forall (w : BV) (cin : bool), @eq nat (Nat.add (BV_to_nat w) (bool_to_nat cin))   (Nat.add (BV.BV_to_nat w) (Bool_compl.bool_to_nat cin)).
Lemma candidate_85: forall (w : BV) (cin : bool), @eq nat (Nat.add (BV_to_nat w) (bool_to_nat cin))   (Nat.add (Bool_compl.bool_to_nat cin) (BV.BV_to_nat w)).
Lemma candidate_86: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_87: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_88: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_89: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_90: forall (cin : bool), @eq nat (bool_to_nat cin) (Nat.add (Bool_compl.bool_to_nat cin) O).
Lemma candidate_91: forall (cin : bool), @eq nat (bool_to_nat cin) (Bool_compl.bool_to_nat cin).
Lemma candidate_92: forall (lf2 : nat), @eq nat (Nat.add lf2 O) lf2.
Lemma candidate_93: forall (lf2 : nat), @eq nat (lf2) lf2.
Lemma candidate_94: forall (w : BV) (cin : bool) (lf6 : list bool), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))   (Nat.add (BV.BV_to_nat w) (Bool_compl.bool_to_nat cin)).
Lemma candidate_95: forall (w : BV) (cin : bool) (lf6 : list bool), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))   (Nat.add (Bool_compl.bool_to_nat cin) (BV.BV_to_nat w)).
Lemma candidate_96: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf6 true) cin).
Lemma candidate_97: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf6 (@nil bool) true) cin).
Lemma candidate_98: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf6 lf6 false) cin).
Lemma candidate_99: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf6 false) cin).
Lemma candidate_100: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf6 (@nil bool) false) cin).
Lemma candidate_101: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin) (Adder.BV_full_adder w BV.nilbv cin).
Lemma candidate_102: forall (w : BV) (cin : bool) (lf2 : nat), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin)) lf2.
Lemma candidate_103: forall (lf2 : nat), @eq nat (Nat.add lf2 O) lf2.
Lemma candidate_104: forall (lf2 : nat), @eq nat (lf2) lf2.
Lemma candidate_105: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin cin)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin cin)) BV.nilbv)).
Lemma candidate_106: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin true)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin true)) BV.nilbv)).
Lemma candidate_107: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w cin) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w cin) BV.nilbv)).
Lemma candidate_108: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_109: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin true)).
Lemma candidate_110: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin) (Adder.BV_full_adder w BV.nilbv cin).
Lemma candidate_111: @eq (list bool) (@nil bool) (@nil bool).
Lemma candidate_112: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))   (Nat.add (BV.BV_to_nat w) (Bool_compl.bool_to_nat cin)).
Lemma candidate_113: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))   (Nat.add (Bool_compl.bool_to_nat cin) (BV.BV_to_nat w)).
Lemma candidate_114: forall (lf4 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf4) (Nat.add lf5 lf4).
Lemma candidate_115: forall (lf4 : nat) (lf5 : nat), @eq nat (Nat.add lf4 lf5) (Nat.add lf5 lf4).
Lemma candidate_116: forall (w : BV) (cin : bool) (lf6 : list bool), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))   (Nat.add (BV.BV_to_nat w) (Bool_compl.bool_to_nat cin)).
Lemma candidate_117: forall (w : BV) (cin : bool) (lf6 : list bool), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))   (Nat.add (Bool_compl.bool_to_nat cin) (BV.BV_to_nat w)).
Lemma candidate_118: forall (w : BV) (cin : bool) (lf6 : list bool), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))   (Nat.add (BV.BV_to_nat w) (Bool_compl.bool_to_nat cin)).
Lemma candidate_119: forall (w : BV) (cin : bool) (lf6 : list bool), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))   (Nat.add (Bool_compl.bool_to_nat cin) (BV.BV_to_nat w)).
Lemma candidate_120: forall (lf4 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf4) (Nat.add lf5 lf4).
Lemma candidate_121: forall (lf4 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf4) (Nat.add lf4 lf5).
Lemma candidate_122: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf6 true) cin).
Lemma candidate_123: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf6 (@nil bool) true) cin).
Lemma candidate_124: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf6 lf6 false) cin).
Lemma candidate_125: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf6 false) cin).
Lemma candidate_126: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf6 (@nil bool) false) cin).
Lemma candidate_127: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin) (Adder.BV_full_adder w BV.nilbv cin).
Lemma candidate_128: forall (lf4 : nat) (w : BV) (cin : bool) (lf5 : nat), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin)) (Nat.add lf5 lf4).
Lemma candidate_129: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))   (Nat.add (BV.BV_to_nat w) (Bool_compl.bool_to_nat cin)).
Lemma candidate_130: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))   (Nat.add (Bool_compl.bool_to_nat cin) (BV.BV_to_nat w)).
Lemma candidate_131: forall (lf4 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf4) (Nat.add lf5 lf4).
Lemma candidate_132: forall (lf4 : nat) (lf5 : nat), @eq nat (Nat.add lf4 lf5) (Nat.add lf5 lf4).
Lemma candidate_133: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin cin)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin cin)) BV.nilbv)).
Lemma candidate_134: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin true)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin true)) BV.nilbv)).
Lemma candidate_135: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w cin) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w cin) BV.nilbv)).
Lemma candidate_136: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_137: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin true)).
Lemma candidate_138: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin) (Adder.BV_full_adder w BV.nilbv cin).
Lemma candidate_139: @eq (list bool) (@nil bool) (@nil bool).
Lemma candidate_140: forall (lf4 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf4) (Nat.add lf5 lf4).
Lemma candidate_141: forall (lf4 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf4) (Nat.add lf4 lf5).
Lemma candidate_142: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))   (Nat.add (BV.BV_to_nat w) (Bool_compl.bool_to_nat cin)).
Lemma candidate_143: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))   (Nat.add (Bool_compl.bool_to_nat cin) (BV.BV_to_nat w)).
Lemma candidate_144: forall (w : BV) (cin : bool) (lf6 : list bool), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))   (Nat.add (BV.BV_to_nat w) (Bool_compl.bool_to_nat cin)).
Lemma candidate_145: forall (w : BV) (cin : bool) (lf6 : list bool), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))   (Nat.add (Bool_compl.bool_to_nat cin) (BV.BV_to_nat w)).
Lemma candidate_146: forall (lf4 : nat) (w : BV) (cin : bool) (lf6 : list bool), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))   (Nat.add (Nat.add (BV.BV_to_nat w) O) lf4).
Lemma candidate_147: forall (lf4 : nat) (w : BV) (cin : bool) (lf6 : list bool), @eq nat (BV_to_nat (BV_full_adder w lf6 cin)) (Nat.add (BV.BV_to_nat w) lf4).
Lemma candidate_148: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (Nat.add lf4 (BV.BV_to_nat w)) O)   (Nat.add (BV_to_nat w) lf4).
Lemma candidate_149: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (BV.BV_to_nat w) (Nat.add lf4 O))   (Nat.add (BV_to_nat w) lf4).
Lemma candidate_150: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (BV.BV_to_nat w) lf4) (Nat.add (BV_to_nat w) lf4).
Lemma candidate_151: forall (lf4 : nat) (w : BV), @eq nat (Nat.add lf4 (BV.BV_to_nat w)) (Nat.add (BV_to_nat w) lf4).
Lemma candidate_152: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (BV_to_nat w) lf4)   (Nat.add (Nat.add lf4 (BV.BV_to_nat w)) O).
Lemma candidate_153: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (BV_to_nat w) lf4)   (Nat.add (BV.BV_to_nat w) (Nat.add lf4 O)).
Lemma candidate_154: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (BV_to_nat w) lf4) (Nat.add (BV.BV_to_nat w) lf4).
Lemma candidate_155: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (BV_to_nat w) lf4) (Nat.add lf4 (BV.BV_to_nat w)).
Lemma candidate_156: forall (w : BV), @eq nat (BV_to_nat w) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_157: forall (w : BV), @eq nat (BV_to_nat w) (BV.BV_to_nat w).
Lemma candidate_158: forall (w : BV) (cin : bool) (lf6 : list bool), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))   (Nat.add (BV.BV_to_nat w) (Bool_compl.bool_to_nat cin)).
Lemma candidate_159: forall (w : BV) (cin : bool) (lf6 : list bool), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))   (Nat.add (Bool_compl.bool_to_nat cin) (BV.BV_to_nat w)).
Lemma candidate_160: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf6 true) cin).
Lemma candidate_161: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf6 (@nil bool) true) cin).
Lemma candidate_162: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf6 lf6 false) cin).
Lemma candidate_163: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf6 false) cin).
Lemma candidate_164: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf6 (@nil bool) false) cin).
Lemma candidate_165: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin) (Adder.BV_full_adder w BV.nilbv cin).
Lemma candidate_166: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))   (Nat.add (BV.BV_to_nat w) (Bool_compl.bool_to_nat cin)).
Lemma candidate_167: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))   (Nat.add (Bool_compl.bool_to_nat cin) (BV.BV_to_nat w)).
Lemma candidate_168: forall (lf4 : nat) (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))   (Nat.add (Nat.add (BV.BV_to_nat w) O) lf4).
Lemma candidate_169: forall (lf4 : nat) (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))   (Nat.add (BV.BV_to_nat w) lf4).
Lemma candidate_170: forall (lf4 : nat) (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))   (Nat.add (BV_to_nat w) lf4).
Lemma candidate_171: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (Nat.add lf4 (BV.BV_to_nat w)) O)   (Nat.add (BV_to_nat w) lf4).
Lemma candidate_172: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (BV.BV_to_nat w) (Nat.add lf4 O))   (Nat.add (BV_to_nat w) lf4).
Lemma candidate_173: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (BV.BV_to_nat w) lf4) (Nat.add (BV_to_nat w) lf4).
Lemma candidate_174: forall (lf4 : nat) (w : BV), @eq nat (Nat.add lf4 (BV.BV_to_nat w)) (Nat.add (BV_to_nat w) lf4).
Lemma candidate_175: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (BV_to_nat w) lf4)   (Nat.add (Nat.add lf4 (BV.BV_to_nat w)) O).
Lemma candidate_176: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (BV_to_nat w) lf4)   (Nat.add (BV.BV_to_nat w) (Nat.add lf4 O)).
Lemma candidate_177: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (BV_to_nat w) lf4) (Nat.add (BV.BV_to_nat w) lf4).
Lemma candidate_178: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (BV_to_nat w) lf4) (Nat.add lf4 (BV.BV_to_nat w)).
Lemma candidate_179: forall (w : BV), @eq nat (BV_to_nat w) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_180: forall (w : BV), @eq nat (BV_to_nat w) (BV.BV_to_nat w).
Lemma candidate_181: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin cin)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin cin)) BV.nilbv)).
Lemma candidate_182: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin true)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin true)) BV.nilbv)).
Lemma candidate_183: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w cin) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w cin) BV.nilbv)).
Lemma candidate_184: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_185: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin true)).
Lemma candidate_186: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin) (Adder.BV_full_adder w BV.nilbv cin).
Lemma candidate_187: @eq (list bool) (@nil bool) (@nil bool).
Lemma candidate_188: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))   (Nat.add (BV.BV_to_nat w) (Bool_compl.bool_to_nat cin)).
Lemma candidate_189: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))   (Nat.add (Bool_compl.bool_to_nat cin) (BV.BV_to_nat w)).
Lemma candidate_190: forall (w : BV) (cin : bool) (lf6 : list bool), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))   (Nat.add (BV.BV_to_nat w) (Bool_compl.bool_to_nat cin)).
Lemma candidate_191: forall (w : BV) (cin : bool) (lf6 : list bool), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))   (Nat.add (Bool_compl.bool_to_nat cin) (BV.BV_to_nat w)).
Lemma candidate_192: forall (cin : bool) (lf5 : nat), @eq nat (Nat.add (Bool_compl.bool_to_nat cin) lf5)   (Nat.add lf5 (bool_to_nat cin)).
Lemma candidate_193: forall (cin : bool) (lf5 : nat), @eq nat (Nat.add lf5 (Bool_compl.bool_to_nat cin))   (Nat.add lf5 (bool_to_nat cin)).
Lemma candidate_194: forall (w : BV) (cin : bool) (lf5 : nat) (lf6 : list bool), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))   (Nat.add lf5 (Nat.add (Bool_compl.bool_to_nat cin) O)).
Lemma candidate_195: forall (w : BV) (cin : bool) (lf5 : nat) (lf6 : list bool), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))   (Nat.add lf5 (Bool_compl.bool_to_nat cin)).
Lemma candidate_196: forall (cin : bool) (lf5 : nat), @eq nat (Nat.add lf5 (bool_to_nat cin))   (Nat.add (Bool_compl.bool_to_nat cin) lf5).
Lemma candidate_197: forall (cin : bool) (lf5 : nat), @eq nat (Nat.add lf5 (bool_to_nat cin))   (Nat.add lf5 (Bool_compl.bool_to_nat cin)).
Lemma candidate_198: forall (w : BV) (cin : bool) (lf6 : list bool), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))   (Nat.add (BV.BV_to_nat w) (Bool_compl.bool_to_nat cin)).
Lemma candidate_199: forall (w : BV) (cin : bool) (lf6 : list bool), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))   (Nat.add (Bool_compl.bool_to_nat cin) (BV.BV_to_nat w)).
Lemma candidate_200: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_201: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_202: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_203: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_204: forall (cin : bool), @eq nat (bool_to_nat cin) (Nat.add (Bool_compl.bool_to_nat cin) O).
Lemma candidate_205: forall (cin : bool), @eq nat (bool_to_nat cin) (Bool_compl.bool_to_nat cin).
Lemma candidate_206: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf6 true) cin).
Lemma candidate_207: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf6 (@nil bool) true) cin).
Lemma candidate_208: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf6 lf6 false) cin).
Lemma candidate_209: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf6 false) cin).
Lemma candidate_210: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf6 (@nil bool) false) cin).
Lemma candidate_211: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin) (Adder.BV_full_adder w BV.nilbv cin).
Lemma candidate_212: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))   (Nat.add (BV.BV_to_nat w) (Bool_compl.bool_to_nat cin)).
Lemma candidate_213: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))   (Nat.add (Bool_compl.bool_to_nat cin) (BV.BV_to_nat w)).
Lemma candidate_214: forall (w : BV) (cin : bool) (lf5 : nat), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))   (Nat.add lf5 (bool_to_nat cin)).
Lemma candidate_215: forall (cin : bool) (lf5 : nat), @eq nat (Nat.add (Bool_compl.bool_to_nat cin) lf5)   (Nat.add lf5 (bool_to_nat cin)).
Lemma candidate_216: forall (cin : bool) (lf5 : nat), @eq nat (Nat.add lf5 (Bool_compl.bool_to_nat cin))   (Nat.add lf5 (bool_to_nat cin)).
Lemma candidate_217: forall (w : BV) (cin : bool) (lf5 : nat), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))   (Nat.add lf5 (Nat.add (Bool_compl.bool_to_nat cin) O)).
Lemma candidate_218: forall (w : BV) (cin : bool) (lf5 : nat), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))   (Nat.add lf5 (Bool_compl.bool_to_nat cin)).
Lemma candidate_219: forall (cin : bool) (lf5 : nat), @eq nat (Nat.add lf5 (bool_to_nat cin))   (Nat.add (Bool_compl.bool_to_nat cin) lf5).
Lemma candidate_220: forall (cin : bool) (lf5 : nat), @eq nat (Nat.add lf5 (bool_to_nat cin))   (Nat.add lf5 (Bool_compl.bool_to_nat cin)).
Lemma candidate_221: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin cin)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin cin)) BV.nilbv)).
Lemma candidate_222: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin true)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin true)) BV.nilbv)).
Lemma candidate_223: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w cin) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w cin) BV.nilbv)).
Lemma candidate_224: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_225: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin true)).
Lemma candidate_226: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin) (Adder.BV_full_adder w BV.nilbv cin).
Lemma candidate_227: @eq (list bool) (@nil bool) (@nil bool).
Lemma candidate_228: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))   (Nat.add (BV.BV_to_nat w) (Bool_compl.bool_to_nat cin)).
Lemma candidate_229: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))   (Nat.add (Bool_compl.bool_to_nat cin) (BV.BV_to_nat w)).
Lemma candidate_230: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_231: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_232: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_233: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_234: forall (cin : bool), @eq nat (bool_to_nat cin) (Nat.add (Bool_compl.bool_to_nat cin) O).
Lemma candidate_235: forall (cin : bool), @eq nat (bool_to_nat cin) (Bool_compl.bool_to_nat cin).
Lemma candidate_236: forall (w : BV) (cin : bool) (lf6 : list bool), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))   (Nat.add (Nat.add (BV.BV_to_nat w) O) (bool_to_nat cin)).
Lemma candidate_237: forall (w : BV) (cin : bool) (lf6 : list bool), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))   (Nat.add (BV.BV_to_nat w) (bool_to_nat cin)).
Lemma candidate_238: forall (w : BV) (cin : bool), @eq nat (Nat.add (BV.BV_to_nat w) (Bool_compl.bool_to_nat cin))   (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma candidate_239: forall (w : BV) (cin : bool), @eq nat (Nat.add (Bool_compl.bool_to_nat cin) (BV.BV_to_nat w))   (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma candidate_240: forall (w : BV) (cin : bool) (lf6 : list bool), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))   (Nat.add (BV.BV_to_nat w) (Bool_compl.bool_to_nat cin)).
Lemma candidate_241: forall (w : BV) (cin : bool) (lf6 : list bool), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))   (Nat.add (Bool_compl.bool_to_nat cin) (BV.BV_to_nat w)).
Lemma candidate_242: forall (w : BV) (cin : bool) (lf6 : list bool), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))   (Nat.add (BV_to_nat w)      (Bool_compl.bool_to_nat (Adder.BV_full_adder_carry lf6 lf6 cin))).
Lemma candidate_243: forall (w : BV) (cin : bool) (lf6 : list bool), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))   (Nat.add (BV_to_nat w)      (Bool_compl.bool_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) lf6 cin))).
Lemma candidate_244: forall (w : BV) (cin : bool) (lf6 : list bool), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))   (Nat.add (BV_to_nat w)      (Bool_compl.bool_to_nat (Adder.BV_full_adder_carry lf6 (@nil bool) cin))).
Lemma candidate_245: forall (w : BV) (cin : bool) (lf6 : list bool), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))   (Nat.add (BV_to_nat w) (Nat.add (Bool_compl.bool_to_nat cin) O)).
Lemma candidate_246: forall (w : BV) (cin : bool) (lf6 : list bool), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))   (Nat.add (BV_to_nat w) (Bool_compl.bool_to_nat cin)).
Lemma candidate_247: forall (w : BV) (cin : bool), @eq nat   (BV_to_nat      (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin cin)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin cin)) BV.nilbv)))   (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma candidate_248: forall (w : BV) (cin : bool), @eq nat   (BV_to_nat      (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin true)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin true)) BV.nilbv)))   (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma candidate_249: forall (w : BV) (cin : bool), @eq nat   (BV_to_nat      (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w cin) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w cin) BV.nilbv)))   (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma candidate_250: forall (w : BV) (cin : bool), @eq nat   (BV_to_nat      (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin cin)))   (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma candidate_251: forall (w : BV) (cin : bool), @eq nat   (BV_to_nat      (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin true)))   (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma candidate_252: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (Adder.BV_full_adder w BV.nilbv cin))   (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma candidate_253: forall (w : BV), @eq nat (BV_to_nat w) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_254: forall (w : BV), @eq nat (BV_to_nat w) (BV.BV_to_nat w).
Lemma candidate_255: forall (w : BV) (cin : bool) (lf6 : list bool), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))   (Nat.add (BV.BV_to_nat w) (Bool_compl.bool_to_nat cin)).
Lemma candidate_256: forall (w : BV) (cin : bool) (lf6 : list bool), @eq nat (BV_to_nat (BV_full_adder w lf6 cin))   (Nat.add (Bool_compl.bool_to_nat cin) (BV.BV_to_nat w)).
Lemma candidate_257: forall (w : BV) (cin : bool), @eq nat (Nat.add (BV_to_nat w) (bool_to_nat cin))   (Nat.add (BV.BV_to_nat w) (Bool_compl.bool_to_nat cin)).
Lemma candidate_258: forall (w : BV) (cin : bool), @eq nat (Nat.add (BV_to_nat w) (bool_to_nat cin))   (Nat.add (Bool_compl.bool_to_nat cin) (BV.BV_to_nat w)).
Lemma candidate_259: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_260: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_261: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_262: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_263: forall (cin : bool), @eq nat (bool_to_nat cin) (Nat.add (Bool_compl.bool_to_nat cin) O).
Lemma candidate_264: forall (cin : bool), @eq nat (bool_to_nat cin) (Bool_compl.bool_to_nat cin).
Lemma candidate_265: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf6 true) cin).
Lemma candidate_266: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf6 (@nil bool) true) cin).
Lemma candidate_267: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf6 lf6 false) cin).
Lemma candidate_268: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf6 false) cin).
Lemma candidate_269: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf6 (@nil bool) false) cin).
Lemma candidate_270: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin) (Adder.BV_full_adder w BV.nilbv cin).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 1359 seconds
Duplicates removed: 195
Filtered by Quickchick: 25
Filtered by script: 18
Remaining: 32

Lemmas: 
Lemma candidate_36: forall (lf2 : nat), @eq nat (Nat.add lf2 O) lf2.
Lemma candidate_41: forall (lf4 : nat) (lf5 : nat), @eq nat (Nat.add lf4 lf5) (Nat.add lf5 lf4).
Lemma candidate_5: forall (lf4 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf4) (Nat.add lf4 lf5).
Lemma candidate_53: forall (lf4 : nat) (w : BV), @eq nat (Nat.add lf4 (BV.BV_to_nat w)) (Nat.add (BV_to_nat w) lf4).
Lemma candidate_11: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (BV_to_nat w) lf4) (Nat.add lf4 (BV.BV_to_nat w)).
Lemma candidate_51: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (BV.BV_to_nat w) (Nat.add lf4 O))   (Nat.add (BV_to_nat w) lf4).
Lemma candidate_50: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (Nat.add lf4 (BV.BV_to_nat w)) O)   (Nat.add (BV_to_nat w) lf4).
Lemma candidate_21: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_9: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (BV_to_nat w) lf4)   (Nat.add (BV.BV_to_nat w) (Nat.add lf4 O)).
Lemma candidate_8: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (BV_to_nat w) lf4)   (Nat.add (Nat.add lf4 (BV.BV_to_nat w)) O).
Lemma candidate_64: forall (cin : bool) (lf5 : nat), @eq nat (Nat.add (Bool_compl.bool_to_nat cin) lf5)   (Nat.add lf5 (bool_to_nat cin)).
Lemma candidate_16: forall (cin : bool) (lf5 : nat), @eq nat (Nat.add lf5 (bool_to_nat cin))   (Nat.add (Bool_compl.bool_to_nat cin) lf5).
Lemma candidate_18: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_19: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_252: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (Adder.BV_full_adder w BV.nilbv cin))   (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma candidate_20: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_77: forall (w : BV) (cin : bool), @eq nat (Nat.add (Bool_compl.bool_to_nat cin) (BV.BV_to_nat w))   (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma candidate_29: forall (w : BV) (cin : bool), @eq nat (Nat.add (BV_to_nat w) (bool_to_nat cin))   (Nat.add (Bool_compl.bool_to_nat cin) (BV.BV_to_nat w)).
Lemma candidate_100: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf6 (@nil bool) false) cin).
Lemma candidate_113: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))   (Nat.add (Bool_compl.bool_to_nat cin) (BV.BV_to_nat w)).
Lemma candidate_112: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))   (Nat.add (BV.BV_to_nat w) (Bool_compl.bool_to_nat cin)).
Lemma candidate_108: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_109: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin true)).
Lemma candidate_250: forall (w : BV) (cin : bool), @eq nat   (BV_to_nat      (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin cin)))   (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma candidate_251: forall (w : BV) (cin : bool), @eq nat   (BV_to_nat      (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin true)))   (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma candidate_99: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf6 false) cin).
Lemma candidate_107: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w cin) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w cin) BV.nilbv)).
Lemma candidate_249: forall (w : BV) (cin : bool), @eq nat   (BV_to_nat      (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w cin) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w cin) BV.nilbv)))   (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma candidate_105: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin cin)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin cin)) BV.nilbv)).
Lemma candidate_106: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin true)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin true)) BV.nilbv)).
Lemma candidate_247: forall (w : BV) (cin : bool), @eq nat   (BV_to_nat      (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin cin)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin cin)) BV.nilbv)))   (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma candidate_248: forall (w : BV) (cin : bool), @eq nat   (BV_to_nat      (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin true)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin true)) BV.nilbv)))   (Nat.add (BV_to_nat w) (bool_to_nat cin)).