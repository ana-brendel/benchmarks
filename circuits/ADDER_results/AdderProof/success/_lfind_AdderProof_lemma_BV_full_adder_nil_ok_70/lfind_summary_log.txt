LFind Results
LFind Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/AdderProof/_lfind_AdderProof_lemma_BV_full_adder_nil_ok_70

Number of Lemmas: 270
Number of Lemmas (after duplicates removed): 75
Number of Lemmas (after QuickChick used to filter): 50
* Number of Candidate Lemmas: 32

Time until ranking: 1359
Time to complete: 2911

Stuck state true independent of hypotheses: true

Category 1:
Count = 0


Category 2:
Count = 5

Lemma candidate_252: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (Adder.BV_full_adder w BV.nilbv cin))   (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma candidate_113: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))   (Nat.add (Bool_compl.bool_to_nat cin) (BV.BV_to_nat w)).
Lemma candidate_112: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder w (@nil bool) cin))   (Nat.add (BV.BV_to_nat w) (Bool_compl.bool_to_nat cin)).
Lemma candidate_250: forall (w : BV) (cin : bool), @eq nat   (BV_to_nat      (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin cin)))   (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma candidate_251: forall (w : BV) (cin : bool), @eq nat   (BV_to_nat      (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin true)))   (Nat.add (BV_to_nat w) (bool_to_nat cin)).

Category 3 (provable):
Count = 21

Lemma candidate_36: forall (lf2 : nat), @eq nat (Nat.add lf2 O) lf2.
Lemma candidate_41: forall (lf4 : nat) (lf5 : nat), @eq nat (Nat.add lf4 lf5) (Nat.add lf5 lf4).
Lemma candidate_5: forall (lf4 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf4) (Nat.add lf4 lf5).
Lemma candidate_53: forall (lf4 : nat) (w : BV), @eq nat (Nat.add lf4 (BV.BV_to_nat w)) (Nat.add (BV_to_nat w) lf4).
Lemma candidate_11: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (BV_to_nat w) lf4) (Nat.add lf4 (BV.BV_to_nat w)).
Lemma candidate_51: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (BV.BV_to_nat w) (Nat.add lf4 O))   (Nat.add (BV_to_nat w) lf4).
Lemma candidate_50: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (Nat.add lf4 (BV.BV_to_nat w)) O)   (Nat.add (BV_to_nat w) lf4).
Lemma candidate_21: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_9: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (BV_to_nat w) lf4)   (Nat.add (BV.BV_to_nat w) (Nat.add lf4 O)).
Lemma candidate_8: forall (lf4 : nat) (w : BV), @eq nat (Nat.add (BV_to_nat w) lf4)   (Nat.add (Nat.add lf4 (BV.BV_to_nat w)) O).
Lemma candidate_64: forall (cin : bool) (lf5 : nat), @eq nat (Nat.add (Bool_compl.bool_to_nat cin) lf5)   (Nat.add lf5 (bool_to_nat cin)).
Lemma candidate_16: forall (cin : bool) (lf5 : nat), @eq nat (Nat.add lf5 (bool_to_nat cin))   (Nat.add (Bool_compl.bool_to_nat cin) lf5).
Lemma candidate_18: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_19: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_20: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_77: forall (w : BV) (cin : bool), @eq nat (Nat.add (Bool_compl.bool_to_nat cin) (BV.BV_to_nat w))   (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma candidate_29: forall (w : BV) (cin : bool), @eq nat (Nat.add (BV_to_nat w) (bool_to_nat cin))   (Nat.add (Bool_compl.bool_to_nat cin) (BV.BV_to_nat w)).
Lemma candidate_100: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf6 (@nil bool) false) cin).
Lemma candidate_108: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_109: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin true)).
Lemma candidate_107: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w cin) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w cin) BV.nilbv)).

Category 3 (not provable):
Count = 6

Lemma candidate_99: forall (w : BV) (cin : bool) (lf6 : list bool), @eq BV (BV_full_adder w lf6 cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf6 false) cin).
Lemma candidate_249: forall (w : BV) (cin : bool), @eq nat   (BV_to_nat      (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w cin) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w cin) BV.nilbv)))   (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma candidate_105: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin cin)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin cin)) BV.nilbv)).
Lemma candidate_106: forall (w : BV) (cin : bool), @eq BV (BV_full_adder w (@nil bool) cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin true)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin true)) BV.nilbv)).
Lemma candidate_247: forall (w : BV) (cin : bool), @eq nat   (BV_to_nat      (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin cin)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin cin)) BV.nilbv)))   (Nat.add (BV_to_nat w) (bool_to_nat cin)).
Lemma candidate_248: forall (w : BV) (cin : bool), @eq nat   (BV_to_nat      (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin true)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin true)) BV.nilbv)))   (Nat.add (BV_to_nat w) (bool_to_nat cin)).