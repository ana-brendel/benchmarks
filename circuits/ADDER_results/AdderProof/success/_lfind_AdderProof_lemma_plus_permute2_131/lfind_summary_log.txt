LFind Results
LFind Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/AdderProof/_lfind_AdderProof_lemma_plus_permute2_131

Number of Lemmas: 425
Number of Lemmas (after duplicates removed): 108
Number of Lemmas (after QuickChick used to filter): 86
* Number of Candidate Lemmas: 73

Time until ranking: 8136
Time to complete: 11817

Stuck state true independent of hypotheses: true

Category 1:
Count = 1

Lemma candidate_56: forall (lf15 : nat) (lf13 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf15 lf15) lf13)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf13 lf15) lf15).

Category 2:
Count = 8

Lemma candidate_8: forall (lf14 : nat) (lf15 : nat) (lf13 : nat), @eq nat   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (PeanoNat.Nat.add lf13 lf15) lf14) lf15) lf14)))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf15 lf15) lf13) lf14)            lf14))).
Lemma candidate_7: forall (lf14 : nat) (lf15 : nat) (a0 : bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (PeanoNat.Nat.add (bool_to_nat a0) lf15) lf14)               lf15) lf14)))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (Nat.add lf15 lf15) (bool_to_nat a0)) lf14)            lf14))).
Lemma candidate_4: forall (lf15 : nat) (lf13 : nat) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (PeanoNat.Nat.add lf13 lf15) (BV_to_nat l0))               lf15) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf15 lf15) lf13)               (BV_to_nat l0)) (BV_to_nat l0)))).
Lemma candidate_6: forall (l : list bool) (lf14 : nat) (lf13 : nat), @eq nat   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (PeanoNat.Nat.add lf13 (BV_to_nat l)) lf14)               (BV_to_nat l)) lf14)))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) lf13)               lf14) lf14))).
Lemma candidate_339: forall (lf15 : nat) (l0 : list bool) (lf13 : nat), @eq nat   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (PeanoNat.Nat.add lf13 lf15) (BV_to_nat l0))               lf15) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (PeanoNat.Nat.add lf15 lf15) lf13)               (BV_to_nat l0)) (BV_to_nat l0)))).
Lemma candidate_3: forall (lf15 : nat) (a0 : bool) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (PeanoNat.Nat.add (bool_to_nat a0) lf15)                  (BV_to_nat l0)) lf15) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (Nat.add lf15 lf15) (bool_to_nat a0))               (BV_to_nat l0)) (BV_to_nat l0)))).
Lemma candidate_2: forall (l : list bool) (lf13 : nat) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (PeanoNat.Nat.add lf13 (BV_to_nat l))                  (BV_to_nat l0)) (BV_to_nat l)) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) lf13)               (BV_to_nat l0)) (BV_to_nat l0)))).
Lemma candidate_5: forall (l : list bool) (lf14 : nat) (a0 : bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add                  (PeanoNat.Nat.add (bool_to_nat a0) (BV_to_nat l)) lf14)               (BV_to_nat l)) lf14)))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l))                  (bool_to_nat a0)) lf14) lf14))).

Category 3 (provable):
Count = 30

Lemma candidate_130: forall (lf15 : nat) (lf13 : nat), @eq nat (PeanoNat.Nat.add lf13 lf15) (PeanoNat.Nat.add lf15 lf13).
Lemma candidate_14: forall (lf14 : nat) (lf11 : nat), @eq nat (PeanoNat.Nat.add lf11 lf14) (PeanoNat.Nat.add lf14 lf11).
Lemma candidate_11: forall (lf12 : nat) (lf13 : nat), @eq nat (PeanoNat.Nat.add lf12 lf13) (PeanoNat.Nat.add lf13 lf12).
Lemma candidate_66: forall (lf15 : nat), @eq nat (Nat.add lf15 lf15) (PeanoNat.Nat.add lf15 (PeanoNat.Nat.add lf15 O)).
Lemma candidate_64: forall (lf15 : nat), @eq nat (Nat.add lf15 lf15) (PeanoNat.Nat.add (PeanoNat.Nat.add lf15 O) lf15).
Lemma candidate_36: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)).
Lemma candidate_184: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) false)).
Lemma candidate_19: forall (a0 : bool), @eq nat (bool_to_nat a0)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a0 a0)).
Lemma candidate_128: forall (lf15 : nat) (lf13 : nat), @eq nat (PeanoNat.Nat.add lf13 lf15)   (PeanoNat.Nat.add lf15 (PeanoNat.Nat.add lf13 O)).
Lemma candidate_127: forall (lf15 : nat) (lf13 : nat), @eq nat (PeanoNat.Nat.add lf13 lf15)   (PeanoNat.Nat.add lf13 (PeanoNat.Nat.add lf15 O)).
Lemma candidate_126: forall (lf15 : nat) (lf13 : nat), @eq nat (PeanoNat.Nat.add lf13 lf15)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf15 lf13) O).
Lemma candidate_20: forall (a0 : bool), @eq nat (bool_to_nat a0)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a0 true)).
Lemma candidate_22: forall (a0 : bool), @eq nat (bool_to_nat a0)   (PeanoNat.Nat.add (PeanoNat.Nat.add (Bool_compl.bool_to_nat a0) O) O).
Lemma candidate_21: forall (a0 : bool), @eq nat (bool_to_nat a0)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a0 false)) O).
Lemma candidate_136: forall (lf15 : nat) (a0 : bool), @eq nat (PeanoNat.Nat.add (bool_to_nat a0) lf15)   (PeanoNat.Nat.add lf15 (Bool_compl.bool_to_nat a0)).
Lemma candidate_25: forall (lf12 : nat) (a0 : bool), @eq nat (PeanoNat.Nat.add lf12 (bool_to_nat a0))   (PeanoNat.Nat.add (Bool_compl.bool_to_nat a0) lf12).
Lemma candidate_61: forall (lf15 : nat) (lf13 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf15 lf15) lf13)   (PeanoNat.Nat.add lf15 (PeanoNat.Nat.add lf15 lf13)).
Lemma candidate_59: forall (lf15 : nat) (lf13 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf15 lf15) lf13)   (PeanoNat.Nat.add lf13 (PeanoNat.Nat.add lf15 lf15)).
Lemma candidate_134: forall (lf15 : nat) (a0 : bool), @eq nat (PeanoNat.Nat.add (bool_to_nat a0) lf15)   (PeanoNat.Nat.add (Bool_compl.bool_to_nat a0) (PeanoNat.Nat.add lf15 O)).
Lemma candidate_133: forall (lf15 : nat) (a0 : bool), @eq nat (PeanoNat.Nat.add (bool_to_nat a0) lf15)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf15 (Bool_compl.bool_to_nat a0)) O).
Lemma candidate_73: forall (a0 : bool) (lf15 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf15 lf15) (bool_to_nat a0))   (PeanoNat.Nat.add lf15 (PeanoNat.Nat.add lf15 (Bool_compl.bool_to_nat a0))).
Lemma candidate_72: forall (a0 : bool) (lf15 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf15 lf15) (bool_to_nat a0))   (PeanoNat.Nat.add (Bool_compl.bool_to_nat a0) (PeanoNat.Nat.add lf15 lf15)).
Lemma candidate_90: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false))).
Lemma candidate_10: forall (lf14 : nat) (lf11 : nat) (lf15 : nat), @eq nat   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add (PeanoNat.Nat.add lf11 lf14) lf15) lf14)))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add (PeanoNat.Nat.add lf11 lf15) lf14) lf14))).
Lemma candidate_35: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_183: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 false)).
Lemma candidate_176: forall (lf11 : nat) (lf15 : nat) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add (PeanoNat.Nat.add lf11 (BV_to_nat l0)) lf15)            (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add (PeanoNat.Nat.add lf11 lf15) (BV_to_nat l0))            (BV_to_nat l0)))).
Lemma candidate_337: forall (lf15 : nat) (l0 : list bool) (lf13 : nat), @eq nat   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (PeanoNat.Nat.add lf13 lf15) (BV_to_nat l0))               lf15) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (PeanoNat.Nat.add lf13 lf15) lf15)               (BV_to_nat l0)) (BV_to_nat l0)))).
Lemma candidate_362: forall (lf15 : nat) (a0 : bool) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (PeanoNat.Nat.add (bool_to_nat a0) lf15)                  (BV_to_nat l0)) lf15) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (Bool_compl.bool_to_nat a0) (PeanoNat.Nat.add lf15 lf15))               (BV_to_nat l0)) (BV_to_nat l0)))).
Lemma candidate_91: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))).

Category 3 (not provable):
Count = 34

Lemma candidate_34: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@cons bool false (@nil bool)) false)).
Lemma candidate_182: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@cons bool false (@nil bool)) false)).
Lemma candidate_60: forall (lf15 : nat) (lf13 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf15 lf15) lf13)   (PeanoNat.Nat.add lf15 (PeanoNat.Nat.add lf13 lf15)).
Lemma candidate_33: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_181: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) (Adder.BV_full_adder_carry l0 (@nil bool) false))).
Lemma candidate_9: forall (lf14 : nat) (lf11 : nat) (lf15 : nat), @eq nat   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add (PeanoNat.Nat.add lf11 lf14) lf15) lf14)))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add (PeanoNat.Nat.add lf15 lf11) lf14) lf14))).
Lemma candidate_112: forall (l : list bool) (a0 : bool), @eq nat   (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) (bool_to_nat a0))   (Nat.add (Bool_compl.bool_to_nat a0) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)))).
Lemma candidate_31: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))).
Lemma candidate_179: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l0 false))).
Lemma candidate_175: forall (lf11 : nat) (lf15 : nat) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add (PeanoNat.Nat.add lf11 (BV_to_nat l0)) lf15)            (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add (PeanoNat.Nat.add lf15 lf11) (BV_to_nat l0))            (BV_to_nat l0)))).
Lemma candidate_32: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_180: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 (Adder.BV_full_adder_carry l0 (@nil bool) false))).
Lemma candidate_174: forall (lf11 : nat) (lf15 : nat) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add (PeanoNat.Nat.add lf11 (BV_to_nat l0)) lf15)            (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add lf11 (PeanoNat.Nat.add lf15 O))               (BV_to_nat l0)) (BV_to_nat l0)))).
Lemma candidate_173: forall (lf11 : nat) (lf15 : nat) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add (PeanoNat.Nat.add lf11 (BV_to_nat l0)) lf15)            (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add lf15 (PeanoNat.Nat.add lf11 O))               (BV_to_nat l0)) (BV_to_nat l0)))).
Lemma candidate_172: forall (lf11 : nat) (lf15 : nat) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add (PeanoNat.Nat.add lf11 (BV_to_nat l0)) lf15)            (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (PeanoNat.Nat.add lf11 lf15) O)               (BV_to_nat l0)) (BV_to_nat l0)))).
Lemma candidate_171: forall (lf11 : nat) (lf15 : nat) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add (PeanoNat.Nat.add lf11 (BV_to_nat l0)) lf15)            (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (PeanoNat.Nat.add lf15 lf11) O)               (BV_to_nat l0)) (BV_to_nat l0)))).
Lemma candidate_342: forall (lf15 : nat) (l0 : list bool) (lf13 : nat), @eq nat   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (PeanoNat.Nat.add lf13 lf15) (BV_to_nat l0))               lf15) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add lf15 (PeanoNat.Nat.add lf15 lf13))               (BV_to_nat l0)) (BV_to_nat l0)))).
Lemma candidate_341: forall (lf15 : nat) (l0 : list bool) (lf13 : nat), @eq nat   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (PeanoNat.Nat.add lf13 lf15) (BV_to_nat l0))               lf15) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add lf15 (PeanoNat.Nat.add lf13 lf15))               (BV_to_nat l0)) (BV_to_nat l0)))).
Lemma candidate_340: forall (lf15 : nat) (l0 : list bool) (lf13 : nat), @eq nat   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (PeanoNat.Nat.add lf13 lf15) (BV_to_nat l0))               lf15) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add lf13 (PeanoNat.Nat.add lf15 lf15))               (BV_to_nat l0)) (BV_to_nat l0)))).
Lemma candidate_338: forall (lf15 : nat) (l0 : list bool) (lf13 : nat), @eq nat   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (PeanoNat.Nat.add lf13 lf15) (BV_to_nat l0))               lf15) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (PeanoNat.Nat.add lf15 lf13) lf15)               (BV_to_nat l0)) (BV_to_nat l0)))).
Lemma candidate_363: forall (lf15 : nat) (a0 : bool) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (PeanoNat.Nat.add (bool_to_nat a0) lf15)                  (BV_to_nat l0)) lf15) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add lf15 (PeanoNat.Nat.add lf15 (Bool_compl.bool_to_nat a0)))               (BV_to_nat l0)) (BV_to_nat l0)))).
Lemma candidate_361: forall (lf15 : nat) (a0 : bool) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (PeanoNat.Nat.add (bool_to_nat a0) lf15)                  (BV_to_nat l0)) lf15) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (PeanoNat.Nat.add lf15 (Bool_compl.bool_to_nat a0)) lf15)               (BV_to_nat l0)) (BV_to_nat l0)))).
Lemma candidate_399: forall (l : list bool) (a0 : bool) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add                  (PeanoNat.Nat.add (bool_to_nat a0) (BV_to_nat l))                  (BV_to_nat l0)) (BV_to_nat l)) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (Nat.add (Bool_compl.bool_to_nat a0) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false))))               (BV_to_nat l0)) (BV_to_nat l0)))).
Lemma candidate_113: forall (l : list bool) (a0 : bool), @eq nat   (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) (bool_to_nat a0))   (Nat.add (Bool_compl.bool_to_nat a0) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))).
Lemma candidate_89: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat (Adder.BV_full_adder_carry l (@nil bool) false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))).
Lemma candidate_114: forall (l : list bool) (a0 : bool), @eq nat   (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) (bool_to_nat a0))   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a0 false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 false))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 false))))).
Lemma candidate_88: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))).
Lemma candidate_111: forall (l : list bool) (a0 : bool), @eq nat   (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) (bool_to_nat a0))   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a0 (Adder.BV_full_adder_carry l (@nil bool) false))) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 (Adder.BV_full_adder_carry l (@nil bool) false)))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 (Adder.BV_full_adder_carry l (@nil bool) false)))))).
Lemma candidate_400: forall (l : list bool) (a0 : bool) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add                  (PeanoNat.Nat.add (bool_to_nat a0) (BV_to_nat l))                  (BV_to_nat l0)) (BV_to_nat l)) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (Nat.add (Bool_compl.bool_to_nat a0) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))))               (BV_to_nat l0)) (BV_to_nat l0)))).
Lemma candidate_401: forall (l : list bool) (a0 : bool) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add                  (PeanoNat.Nat.add (bool_to_nat a0) (BV_to_nat l))                  (BV_to_nat l0)) (BV_to_nat l)) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a0 false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 false))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 false)))))               (BV_to_nat l0)) (BV_to_nat l0)))).
Lemma candidate_397: forall (l : list bool) (a0 : bool) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add                  (PeanoNat.Nat.add (bool_to_nat a0) (BV_to_nat l))                  (BV_to_nat l0)) (BV_to_nat l)) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a0 (Adder.BV_full_adder_carry l (@nil bool) false))) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 (Adder.BV_full_adder_carry l (@nil bool) false)))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 (Adder.BV_full_adder_carry l (@nil bool) false))))))               (BV_to_nat l0)) (BV_to_nat l0)))).
Lemma candidate_398: forall (l : list bool) (a0 : bool) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add                  (PeanoNat.Nat.add (bool_to_nat a0) (BV_to_nat l))                  (BV_to_nat l0)) (BV_to_nat l)) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a0 (Adder.BV_full_adder_carry l0 (@nil bool) false))) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 (Adder.BV_full_adder_carry l0 (@nil bool) false)))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 (Adder.BV_full_adder_carry l0 (@nil bool) false))))))               (BV_to_nat l0)) (BV_to_nat l0)))).
Lemma candidate_110: forall (l : list bool) (a0 : bool), @eq nat   (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) (bool_to_nat a0))   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a0 ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)))))).
Lemma candidate_396: forall (l : list bool) (a0 : bool) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add                  (PeanoNat.Nat.add (bool_to_nat a0) (BV_to_nat l))                  (BV_to_nat l0)) (BV_to_nat l)) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a0 ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l0 false))) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l0 false)))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l0 false))))))               (BV_to_nat l0)) (BV_to_nat l0)))).