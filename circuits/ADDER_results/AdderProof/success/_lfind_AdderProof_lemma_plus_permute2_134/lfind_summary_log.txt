LFind Results
LFind Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/AdderProof/_lfind_AdderProof_lemma_plus_permute2_134

Number of Lemmas: 352
Number of Lemmas (after duplicates removed): 74
Number of Lemmas (after QuickChick used to filter): 66
* Number of Candidate Lemmas: 56

Time until ranking: 11237
Time to complete: 12800

Stuck state true independent of hypotheses: true

Category 1:
Count = 24

Lemma candidate_15: forall (lf11 : nat) (lf15 : nat), @eq nat (Nat.add lf11 lf15) (PeanoNat.Nat.add lf15 lf11).
Lemma candidate_102: forall (lf15 : nat) (lf13 : nat), @eq nat (PeanoNat.Nat.add lf15 lf13) (PeanoNat.Nat.add lf13 lf15).
Lemma candidate_13: forall (lf12 : nat) (lf13 : nat), @eq nat (PeanoNat.Nat.add lf12 lf13) (PeanoNat.Nat.add lf13 lf12).
Lemma candidate_36: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)).
Lemma candidate_150: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) false)).
Lemma candidate_19: forall (a0 : bool), @eq nat (bool_to_nat a0)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a0 a0)).
Lemma candidate_20: forall (a0 : bool), @eq nat (bool_to_nat a0)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a0 true)).
Lemma candidate_22: forall (a0 : bool), @eq nat (bool_to_nat a0)   (PeanoNat.Nat.add (PeanoNat.Nat.add (Bool_compl.bool_to_nat a0) O) O).
Lemma candidate_21: forall (a0 : bool), @eq nat (bool_to_nat a0)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a0 false)) O).
Lemma candidate_69: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false))).
Lemma candidate_9: forall (lf14 : nat) (lf11 : nat) (lf15 : nat), @eq nat (S (S (PeanoNat.Nat.add (Nat.add (Nat.add lf11 lf15) lf14) lf14)))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add (PeanoNat.Nat.add lf15 lf11) lf14) lf14))).
Lemma candidate_11: forall (lf14 : nat) (lf12 : nat) (lf13 : nat), @eq nat   (S (S (PeanoNat.Nat.add (Nat.add (PeanoNat.Nat.add lf13 lf12) lf14) lf14)))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add (PeanoNat.Nat.add lf12 lf13) lf14) lf14))).
Lemma candidate_8: forall (lf14 : nat) (lf15 : nat) (lf13 : nat), @eq nat   (S      (S         (PeanoNat.Nat.add            (Nat.add (Nat.add (PeanoNat.Nat.add lf15 lf13) lf15) lf14) lf14)))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf15 lf15) lf13) lf14)            lf14))).
Lemma candidate_139: forall (lf11 : nat) (lf15 : nat) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add (Nat.add (Nat.add lf11 lf15) (BV_to_nat l0))            (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add (PeanoNat.Nat.add lf15 lf11) (BV_to_nat l0))            (BV_to_nat l0)))).
Lemma candidate_35: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_149: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 false)).
Lemma candidate_141: forall (lf12 : nat) (lf13 : nat) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (Nat.add (PeanoNat.Nat.add lf13 lf12) (BV_to_nat l0))            (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add (PeanoNat.Nat.add lf12 lf13) (BV_to_nat l0))            (BV_to_nat l0)))).
Lemma candidate_7: forall (lf14 : nat) (lf15 : nat) (a0 : bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (Nat.add (Nat.add (PeanoNat.Nat.add lf15 (bool_to_nat a0)) lf15)               lf14) lf14)))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (Nat.add lf15 lf15) (bool_to_nat a0)) lf14)            lf14))).
Lemma candidate_4: forall (lf15 : nat) (lf13 : nat) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (Nat.add (Nat.add (PeanoNat.Nat.add lf15 lf13) lf15)               (BV_to_nat l0)) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf15 lf15) lf13)               (BV_to_nat l0)) (BV_to_nat l0)))).
Lemma candidate_6: forall (l : list bool) (lf14 : nat) (lf13 : nat), @eq nat   (S      (S         (PeanoNat.Nat.add            (Nat.add               (Nat.add (PeanoNat.Nat.add (BV_to_nat l) lf13) (BV_to_nat l))               lf14) lf14)))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) lf13)               lf14) lf14))).
Lemma candidate_3: forall (lf15 : nat) (a0 : bool) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (Nat.add (Nat.add (PeanoNat.Nat.add lf15 (bool_to_nat a0)) lf15)               (BV_to_nat l0)) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (Nat.add lf15 lf15) (bool_to_nat a0))               (BV_to_nat l0)) (BV_to_nat l0)))).
Lemma candidate_5: forall (l : list bool) (lf14 : nat) (a0 : bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (Nat.add               (Nat.add (PeanoNat.Nat.add (BV_to_nat l) (bool_to_nat a0))                  (BV_to_nat l)) lf14) lf14)))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l))                  (bool_to_nat a0)) lf14) lf14))).
Lemma candidate_2: forall (l : list bool) (lf13 : nat) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (Nat.add               (Nat.add (PeanoNat.Nat.add (BV_to_nat l) lf13) (BV_to_nat l))               (BV_to_nat l0)) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) lf13)               (BV_to_nat l0)) (BV_to_nat l0)))).
Lemma candidate_70: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))).

Category 2:
Count = 32

Lemma candidate_34: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@cons bool false (@nil bool)) false)).
Lemma candidate_148: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@cons bool false (@nil bool)) false)).
Lemma candidate_33: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_147: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) (Adder.BV_full_adder_carry l0 (@nil bool) false))).
Lemma candidate_130: forall (l : list bool) (a0 : bool), @eq nat   (Nat.add (PeanoNat.Nat.add (BV_to_nat l) (bool_to_nat a0)) (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat a0) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)))).
Lemma candidate_89: forall (l : list bool) (a0 : bool), @eq nat   (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) (bool_to_nat a0))   (Nat.add (Bool_compl.bool_to_nat a0) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)))).
Lemma candidate_31: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))).
Lemma candidate_145: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l0 false))).
Lemma candidate_32: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_146: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 (Adder.BV_full_adder_carry l0 (@nil bool) false))).
Lemma candidate_327: forall (l : list bool) (a0 : bool) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (Nat.add               (Nat.add (PeanoNat.Nat.add (BV_to_nat l) (bool_to_nat a0))                  (BV_to_nat l)) (BV_to_nat l0)) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (Nat.add (Bool_compl.bool_to_nat a0) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false))))               (BV_to_nat l0)) (BV_to_nat l0)))).
Lemma candidate_252: forall (l : list bool) (a0 : bool) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (Nat.add               (Nat.add (Bool_compl.bool_to_nat a0) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false))))               (BV_to_nat l0)) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l))                  (bool_to_nat a0)) (BV_to_nat l0))             (BV_to_nat l0)))).
Lemma candidate_131: forall (l : list bool) (a0 : bool), @eq nat   (Nat.add (PeanoNat.Nat.add (BV_to_nat l) (bool_to_nat a0)) (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat a0) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))).
Lemma candidate_90: forall (l : list bool) (a0 : bool), @eq nat   (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) (bool_to_nat a0))   (Nat.add (Bool_compl.bool_to_nat a0) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))).
Lemma candidate_68: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat (Adder.BV_full_adder_carry l (@nil bool) false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))).
Lemma candidate_132: forall (l : list bool) (a0 : bool), @eq nat   (Nat.add (PeanoNat.Nat.add (BV_to_nat l) (bool_to_nat a0)) (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a0 false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 false))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 false))))).
Lemma candidate_91: forall (l : list bool) (a0 : bool), @eq nat   (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) (bool_to_nat a0))   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a0 false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 false))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 false))))).
Lemma candidate_67: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))).
Lemma candidate_129: forall (l : list bool) (a0 : bool), @eq nat   (Nat.add (PeanoNat.Nat.add (BV_to_nat l) (bool_to_nat a0)) (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a0 (Adder.BV_full_adder_carry l (@nil bool) false))) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 (Adder.BV_full_adder_carry l (@nil bool) false)))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 (Adder.BV_full_adder_carry l (@nil bool) false)))))).
Lemma candidate_88: forall (l : list bool) (a0 : bool), @eq nat   (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) (bool_to_nat a0))   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a0 (Adder.BV_full_adder_carry l (@nil bool) false))) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 (Adder.BV_full_adder_carry l (@nil bool) false)))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 (Adder.BV_full_adder_carry l (@nil bool) false)))))).
Lemma candidate_328: forall (l : list bool) (a0 : bool) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (Nat.add               (Nat.add (PeanoNat.Nat.add (BV_to_nat l) (bool_to_nat a0))                  (BV_to_nat l)) (BV_to_nat l0)) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (Nat.add (Bool_compl.bool_to_nat a0) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))))               (BV_to_nat l0)) (BV_to_nat l0)))).
Lemma candidate_253: forall (l : list bool) (a0 : bool) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (Nat.add               (Nat.add (Bool_compl.bool_to_nat a0) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))))               (BV_to_nat l0)) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l))                  (bool_to_nat a0)) (BV_to_nat l0))             (BV_to_nat l0)))).
Lemma candidate_329: forall (l : list bool) (a0 : bool) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (Nat.add               (Nat.add (PeanoNat.Nat.add (BV_to_nat l) (bool_to_nat a0))                  (BV_to_nat l)) (BV_to_nat l0)) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a0 false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 false))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 false)))))               (BV_to_nat l0)) (BV_to_nat l0)))).
Lemma candidate_254: forall (l : list bool) (a0 : bool) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (Nat.add               (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a0 false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 false))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 false)))))               (BV_to_nat l0)) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l))                  (bool_to_nat a0)) (BV_to_nat l0))             (BV_to_nat l0)))).
Lemma candidate_325: forall (l : list bool) (a0 : bool) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (Nat.add               (Nat.add (PeanoNat.Nat.add (BV_to_nat l) (bool_to_nat a0))                  (BV_to_nat l)) (BV_to_nat l0)) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a0 (Adder.BV_full_adder_carry l (@nil bool) false))) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 (Adder.BV_full_adder_carry l (@nil bool) false)))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 (Adder.BV_full_adder_carry l (@nil bool) false))))))               (BV_to_nat l0)) (BV_to_nat l0)))).
Lemma candidate_326: forall (l : list bool) (a0 : bool) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (Nat.add               (Nat.add (PeanoNat.Nat.add (BV_to_nat l) (bool_to_nat a0))                  (BV_to_nat l)) (BV_to_nat l0)) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a0 (Adder.BV_full_adder_carry l0 (@nil bool) false))) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 (Adder.BV_full_adder_carry l0 (@nil bool) false)))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 (Adder.BV_full_adder_carry l0 (@nil bool) false))))))               (BV_to_nat l0)) (BV_to_nat l0)))).
Lemma candidate_250: forall (l : list bool) (a0 : bool) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (Nat.add               (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a0 (Adder.BV_full_adder_carry l (@nil bool) false))) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 (Adder.BV_full_adder_carry l (@nil bool) false)))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 (Adder.BV_full_adder_carry l (@nil bool) false))))))               (BV_to_nat l0)) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l))                  (bool_to_nat a0)) (BV_to_nat l0))             (BV_to_nat l0)))).
Lemma candidate_251: forall (l : list bool) (a0 : bool) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (Nat.add               (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a0 (Adder.BV_full_adder_carry l0 (@nil bool) false))) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 (Adder.BV_full_adder_carry l0 (@nil bool) false)))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 (Adder.BV_full_adder_carry l0 (@nil bool) false))))))               (BV_to_nat l0)) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l))                  (bool_to_nat a0)) (BV_to_nat l0))             (BV_to_nat l0)))).
Lemma candidate_128: forall (l : list bool) (a0 : bool), @eq nat   (Nat.add (PeanoNat.Nat.add (BV_to_nat l) (bool_to_nat a0)) (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a0 ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)))))).
Lemma candidate_87: forall (l : list bool) (a0 : bool), @eq nat   (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) (bool_to_nat a0))   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a0 ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)))))).
Lemma candidate_324: forall (l : list bool) (a0 : bool) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (Nat.add               (Nat.add (PeanoNat.Nat.add (BV_to_nat l) (bool_to_nat a0))                  (BV_to_nat l)) (BV_to_nat l0)) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a0 ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l0 false))) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l0 false)))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l0 false))))))               (BV_to_nat l0)) (BV_to_nat l0)))).
Lemma candidate_249: forall (l : list bool) (a0 : bool) (l0 : list bool), @eq nat   (S      (S         (PeanoNat.Nat.add            (Nat.add               (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a0 ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l0 false))) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l0 false)))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a0 ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l0 false))))))               (BV_to_nat l0)) (BV_to_nat l0))))   (S      (S         (PeanoNat.Nat.add            (PeanoNat.Nat.add               (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l))                  (bool_to_nat a0)) (BV_to_nat l0))             (BV_to_nat l0)))).

Category 3 (provable):
Count = 0


Category 3 (not provable):
Count = 0
