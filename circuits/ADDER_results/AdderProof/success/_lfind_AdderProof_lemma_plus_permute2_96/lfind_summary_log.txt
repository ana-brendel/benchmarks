LFind Results
LFind Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/AdderProof/_lfind_AdderProof_lemma_plus_permute2_96

Number of Lemmas: 446
Number of Lemmas (after duplicates removed): 82
Number of Lemmas (after QuickChick used to filter): 74
* Number of Candidate Lemmas: 46

Time until ranking: 4942
Time to complete: 6255

Stuck state true independent of hypotheses: true

Category 1:
Count = 24

Lemma candidate_79: forall (lf9 : nat) (lf8 : nat), @eq nat (Nat.add lf8 lf9) (PeanoNat.Nat.add lf9 lf8).
Lemma candidate_69: forall (lf7 : nat) (lf6 : nat), @eq nat (Nat.add lf6 lf7) (PeanoNat.Nat.add lf7 lf6).
Lemma candidate_24: forall (lf9 : nat) (lf8 : nat), @eq nat (PeanoNat.Nat.add lf8 lf9) (PeanoNat.Nat.add lf9 lf8).
Lemma candidate_11: forall (lf5 : nat) (lf9 : nat), @eq nat (PeanoNat.Nat.add lf5 lf9) (PeanoNat.Nat.add lf9 lf5).
Lemma candidate_9: forall (lf4 : nat) (lf9 : nat), @eq nat (PeanoNat.Nat.add lf4 lf9) (PeanoNat.Nat.add lf9 lf4).
Lemma candidate_29: forall (a : bool), @eq nat (bool_to_nat a)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a a)).
Lemma candidate_20: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)).
Lemma candidate_30: forall (a : bool), @eq nat (bool_to_nat a)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a true)).
Lemma candidate_198: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_199: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_67: forall (lf7 : nat) (lf9 : nat) (lf6 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf6 lf7) lf9)   (Nat.add (PeanoNat.Nat.add lf9 lf6) lf7).
Lemma candidate_32: forall (a : bool), @eq nat (bool_to_nat a)   (PeanoNat.Nat.add (PeanoNat.Nat.add (Bool_compl.bool_to_nat a) O) O).
Lemma candidate_31: forall (a : bool), @eq nat (bool_to_nat a)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a false)) O).
Lemma candidate_201: forall (cin : bool), @eq nat (bool_to_nat cin)   (PeanoNat.Nat.add (PeanoNat.Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_65: forall (lf7 : nat) (lf5 : nat) (lf9 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf5) lf9)   (Nat.add (PeanoNat.Nat.add lf5 lf9) lf7).
Lemma candidate_200: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_137: forall (lf7 : nat) (lf9 : nat) (lf6 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf6 lf7) lf9)   (Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 O) lf9) lf7).
Lemma candidate_74: forall (lf7 : nat) (lf5 : nat) (lf9 : nat), @eq nat (PeanoNat.Nat.add (Nat.add (PeanoNat.Nat.add lf5 O) lf7) lf9)   (Nat.add (PeanoNat.Nat.add lf5 lf9) lf7).
Lemma candidate_284: forall (cin : bool) (lf9 : nat) (lf6 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf6 (bool_to_nat cin)) lf9)   (Nat.add (PeanoNat.Nat.add lf9 lf6) (bool_to_nat cin)).
Lemma candidate_93: forall (lf7 : nat) (l : list bool) (lf5 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf5) (BV_to_nat l))   (Nat.add (PeanoNat.Nat.add lf5 (BV_to_nat l)) lf7).
Lemma candidate_293: forall (cin : bool) (lf5 : nat) (lf9 : nat), @eq nat   (PeanoNat.Nat.add (Nat.add (PeanoNat.Nat.add lf5 O) (bool_to_nat cin)) lf9)   (Nat.add (PeanoNat.Nat.add lf5 lf9) (bool_to_nat cin)).
Lemma candidate_45: forall (a : bool) (l : list bool), @eq nat   (PeanoNat.Nat.add (PeanoNat.Nat.add (bool_to_nat a) (BV_to_nat l))      (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat a) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)))).
Lemma candidate_19: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_46: forall (a : bool) (l : list bool), @eq nat   (PeanoNat.Nat.add (PeanoNat.Nat.add (bool_to_nat a) (BV_to_nat l))      (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat a) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))).

Category 2:
Count = 22

Lemma candidate_18: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@cons bool false (@nil bool)) false)).
Lemma candidate_17: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_157: forall (l : list bool) (lf7 : nat) (lf6 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf6 lf7) (BV_to_nat l))   (Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 O) (BV_to_nat l)) lf7).
Lemma candidate_102: forall (l : list bool) (lf7 : nat) (lf5 : nat), @eq nat   (PeanoNat.Nat.add (Nat.add (PeanoNat.Nat.add lf5 O) lf7) (BV_to_nat l))   (Nat.add (PeanoNat.Nat.add lf5 (BV_to_nat l)) lf7).
Lemma candidate_376: forall (cin : bool) (lf9 : nat) (lf6 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf6 (bool_to_nat cin)) lf9)   (Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 O) lf9) (bool_to_nat cin)).
Lemma candidate_404: forall (l : list bool) (cin : bool) (lf6 : nat), @eq nat (PeanoNat.Nat.add (Nat.add lf6 (bool_to_nat cin)) (BV_to_nat l))   (Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 O) (BV_to_nat l))      (bool_to_nat cin)).
Lemma candidate_333: forall (l : list bool) (cin : bool) (lf5 : nat), @eq nat   (PeanoNat.Nat.add (Nat.add (PeanoNat.Nat.add lf5 O) (bool_to_nat cin))      (BV_to_nat l))   (Nat.add (PeanoNat.Nat.add lf5 (BV_to_nat l)) (bool_to_nat cin)).
Lemma candidate_15: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))).
Lemma candidate_116: forall (a : bool) (lf7 : nat) (l : list bool), @eq nat   (PeanoNat.Nat.add (Nat.add (Nat.add (bool_to_nat a) (BV_to_nat l)) lf7)      (BV_to_nat l))   (Nat.add      (Nat.add (Bool_compl.bool_to_nat a) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false))))      lf7).
Lemma candidate_16: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_349: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (Nat.add (Nat.add (bool_to_nat a) (BV_to_nat l)) (bool_to_nat cin))      (BV_to_nat l))   (Nat.add      (Nat.add (Bool_compl.bool_to_nat a) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false))))      (bool_to_nat cin)).
Lemma candidate_117: forall (a : bool) (lf7 : nat) (l : list bool), @eq nat   (PeanoNat.Nat.add (Nat.add (Nat.add (bool_to_nat a) (BV_to_nat l)) lf7)      (BV_to_nat l))   (Nat.add      (Nat.add (Bool_compl.bool_to_nat a) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))))      lf7).
Lemma candidate_350: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (Nat.add (Nat.add (bool_to_nat a) (BV_to_nat l)) (bool_to_nat cin))      (BV_to_nat l))   (Nat.add      (Nat.add (Bool_compl.bool_to_nat a) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))))      (bool_to_nat cin)).
Lemma candidate_47: forall (a : bool) (l : list bool), @eq nat   (PeanoNat.Nat.add (PeanoNat.Nat.add (bool_to_nat a) (BV_to_nat l))      (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false))))).
Lemma candidate_118: forall (a : bool) (lf7 : nat) (l : list bool), @eq nat   (PeanoNat.Nat.add (Nat.add (Nat.add (bool_to_nat a) (BV_to_nat l)) lf7)      (BV_to_nat l))   (Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false)))))      lf7).
Lemma candidate_351: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (Nat.add (Nat.add (bool_to_nat a) (BV_to_nat l)) (bool_to_nat cin))      (BV_to_nat l))   (Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a false)))))      (bool_to_nat cin)).
Lemma candidate_44: forall (a : bool) (l : list bool), @eq nat   (PeanoNat.Nat.add (PeanoNat.Nat.add (bool_to_nat a) (BV_to_nat l))      (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a (Adder.BV_full_adder_carry l (@nil bool) false))) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a (Adder.BV_full_adder_carry l (@nil bool) false)))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a (Adder.BV_full_adder_carry l (@nil bool) false)))))).
Lemma candidate_115: forall (a : bool) (lf7 : nat) (l : list bool), @eq nat   (PeanoNat.Nat.add (Nat.add (Nat.add (bool_to_nat a) (BV_to_nat l)) lf7)      (BV_to_nat l))   (Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a (Adder.BV_full_adder_carry l (@nil bool) false))) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a (Adder.BV_full_adder_carry l (@nil bool) false)))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a (Adder.BV_full_adder_carry l (@nil bool) false))))))      lf7).
Lemma candidate_348: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (Nat.add (Nat.add (bool_to_nat a) (BV_to_nat l)) (bool_to_nat cin))      (BV_to_nat l))   (Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a (Adder.BV_full_adder_carry l (@nil bool) false))) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a (Adder.BV_full_adder_carry l (@nil bool) false)))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a (Adder.BV_full_adder_carry l (@nil bool) false))))))      (bool_to_nat cin)).
Lemma candidate_43: forall (a : bool) (l : list bool), @eq nat   (PeanoNat.Nat.add (PeanoNat.Nat.add (bool_to_nat a) (BV_to_nat l))      (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)))))).
Lemma candidate_114: forall (a : bool) (lf7 : nat) (l : list bool), @eq nat   (PeanoNat.Nat.add (Nat.add (Nat.add (bool_to_nat a) (BV_to_nat l)) lf7)      (BV_to_nat l))   (Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))))))      lf7).
Lemma candidate_347: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (Nat.add (Nat.add (bool_to_nat a) (BV_to_nat l)) (bool_to_nat cin))      (BV_to_nat l))   (Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum a ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry a ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))))))      (bool_to_nat cin)).

Category 3 (provable):
Count = 0


Category 3 (not provable):
Count = 0
