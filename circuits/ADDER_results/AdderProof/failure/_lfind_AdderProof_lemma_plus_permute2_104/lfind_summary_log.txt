LFind Results
LFind Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/AdderProof/_lfind_AdderProof_lemma_plus_permute2_104

Number of Lemmas: 118
Number of Lemmas (after duplicates removed): 72
Number of Lemmas (after QuickChick used to filter): 58
* Number of Candidate Lemmas: 46

Time until ranking: 1666
Time to complete: 4327

Stuck state true independent of hypotheses: true

Category 1:
Count = 0


Category 2:
Count = 5

Lemma candidate_6: forall (lf7 : nat) (lf9 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf7 lf7) lf9) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf9 lf7) lf9) lf7).
Lemma candidate_5: forall (l : list bool) (lf7 : nat), @eq nat   (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf7 lf7) (BV_to_nat l))      (BV_to_nat l))   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (BV_to_nat l) lf7) (BV_to_nat l)) lf7).
Lemma candidate_4: forall (lf9 : nat) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8)) lf9) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf9 (bool_to_nat lf8)) lf9)      (bool_to_nat lf8)).
Lemma candidate_2: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))         (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (bool_to_nat lf8))         (BV_to_nat l)) (bool_to_nat lf8)).
Lemma candidate_3: forall (a : bool) (cin : bool) (lf9 : nat), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add         (Nat.add (bool_to_nat (half_adder_carry a cin))            (bool_to_nat (half_adder_carry a cin))) lf9) lf9)   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add lf9 (bool_to_nat (half_adder_carry a cin)))         lf9) (bool_to_nat (half_adder_carry a cin))).

Category 3 (provable):
Count = 24

Lemma candidate_19: forall (lf9 : nat) (lf6 : nat), @eq nat (PeanoNat.Nat.add lf6 lf9) (PeanoNat.Nat.add lf9 lf6).
Lemma candidate_15: forall (lf7 : nat), @eq nat (Nat.add lf7 lf7) (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)).
Lemma candidate_13: forall (lf7 : nat), @eq nat (Nat.add lf7 lf7) (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) lf7).
Lemma candidate_36: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)).
Lemma candidate_40: forall (lf8 : bool), @eq nat (bool_to_nat lf8)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 lf8)).
Lemma candidate_41: forall (lf8 : bool), @eq nat (bool_to_nat lf8)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 true)).
Lemma candidate_12: forall (lf7 : nat), @eq nat (Nat.add lf7 lf7)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) (PeanoNat.Nat.add lf7 O)).
Lemma candidate_61: forall (a : bool) (cin : bool), @eq bool (half_adder_carry a cin)   (HalfAdder.half_adder_carry a (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_60: forall (a : bool) (cin : bool), @eq bool (half_adder_carry a cin)   (HalfAdder.half_adder_carry cin (HalfAdder.half_adder_carry a cin)).
Lemma candidate_63: forall (a : bool) (cin : bool), @eq bool (half_adder_carry a cin)   (HalfAdder.half_adder_carry a (HalfAdder.half_adder_carry cin true)).
Lemma candidate_62: forall (a : bool) (cin : bool), @eq bool (half_adder_carry a cin)   (HalfAdder.half_adder_carry cin (HalfAdder.half_adder_carry a true)).
Lemma candidate_57: forall (a : bool) (cin : bool), @eq nat (bool_to_nat (half_adder_carry a cin))   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin a)).
Lemma candidate_9: forall (lf7 : nat) (lf9 : nat) (lf6 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf6) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9) lf7).
Lemma candidate_38: forall (lf8 : bool), @eq nat (bool_to_nat lf8)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 (HalfAdder.half_adder_carry lf8 lf8))).
Lemma candidate_39: forall (lf8 : bool), @eq nat (bool_to_nat lf8)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 (HalfAdder.half_adder_carry lf8 true))).
Lemma candidate_21: forall (lf7 : nat) (l : list bool) (lf6 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf6) (BV_to_nat l))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l)) lf7).
Lemma candidate_54: forall (a : bool) (cin : bool), @eq nat (bool_to_nat (half_adder_carry a cin))   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a (HalfAdder.half_adder_carry cin cin))).
Lemma candidate_53: forall (a : bool) (cin : bool), @eq nat (bool_to_nat (half_adder_carry a cin))   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin (HalfAdder.half_adder_carry a cin))).
Lemma candidate_56: forall (a : bool) (cin : bool), @eq nat (bool_to_nat (half_adder_carry a cin))   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a (HalfAdder.half_adder_carry cin true))).
Lemma candidate_55: forall (a : bool) (cin : bool), @eq nat (bool_to_nat (half_adder_carry a cin))   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin (HalfAdder.half_adder_carry a true))).
Lemma candidate_50: forall (lf8 : bool), @eq nat (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))   (PeanoNat.Nat.add (Bool_compl.bool_to_nat lf8) (PeanoNat.Nat.add (Bool_compl.bool_to_nat lf8) O)).
Lemma candidate_48: forall (lf8 : bool), @eq nat (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))   (PeanoNat.Nat.add (Bool_compl.bool_to_nat lf8) (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 lf8))).
Lemma candidate_49: forall (lf8 : bool), @eq nat (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))   (PeanoNat.Nat.add (Bool_compl.bool_to_nat lf8) (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 true))).
Lemma candidate_35: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).

Category 3 (not provable):
Count = 17

Lemma candidate_11: forall (lf7 : nat), @eq nat (Nat.add lf7 lf7)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)) O).
Lemma candidate_34: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@cons bool false (@nil bool)) false)).
Lemma candidate_33: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_31: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))).
Lemma candidate_32: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_72: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))         (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat lf8) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false))))      (bool_to_nat lf8)).
Lemma candidate_71: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))         (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat lf8) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry lf8 false))) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry lf8 false)))))      (bool_to_nat lf8)).
Lemma candidate_97: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add         (Nat.add (bool_to_nat (half_adder_carry a cin))            (bool_to_nat (half_adder_carry a cin)))          (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a cin)) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false))))      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_96: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add         (Nat.add (bool_to_nat (half_adder_carry a cin))            (bool_to_nat (half_adder_carry a cin)))          (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin a)) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false))))      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_95: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add         (Nat.add (bool_to_nat (half_adder_carry a cin))            (bool_to_nat (half_adder_carry a cin)))          (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a cin)) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry cin false))) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry cin false)))))      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_94: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add         (Nat.add (bool_to_nat (half_adder_carry a cin))            (bool_to_nat (half_adder_carry a cin)))          (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin a)) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry cin false))) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry cin false)))))      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_73: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))         (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat lf8) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))))      (bool_to_nat lf8)).
Lemma candidate_70: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))         (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat lf8) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 false))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 false)))))      (bool_to_nat lf8)).
Lemma candidate_74: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))         (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum lf8 false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 false))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 false)))))      (bool_to_nat lf8)).
Lemma candidate_99: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add         (Nat.add (bool_to_nat (half_adder_carry a cin))            (bool_to_nat (half_adder_carry a cin)))          (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a cin)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))))      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_98: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add         (Nat.add (bool_to_nat (half_adder_carry a cin))            (bool_to_nat (half_adder_carry a cin)))          (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin a)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))))      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_69: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))         (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum lf8 (HalfAdder.half_adder_carry lf8 false))) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 (HalfAdder.half_adder_carry lf8 false)))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 (HalfAdder.half_adder_carry lf8 false))))))      (bool_to_nat lf8)).