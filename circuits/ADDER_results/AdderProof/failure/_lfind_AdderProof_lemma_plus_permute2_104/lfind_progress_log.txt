File Information
- File name: AdderProof
- Original Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/AdderProof/AdderProof_lemma_plus_permute2_104
- LFind Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/AdderProof/_lfind_AdderProof_lemma_plus_permute2_104
- Namespace: Circuits
- Proof name: BV_full_adder_ok
- Theorem: Theorem BV_full_adder_ok: forall (v0 w0 : BV) (cin0 : bool),
@eq nat (BV_to_nat (BV_full_adder v0 w0 cin0))
  (Nat.add (Nat.add (BV_to_nat v0) (BV_to_nat w0)) (bool_to_nat cin0)).
- Declarations: 
From lfind Require Import LFind.
From CircuitsCoqGym Require Import Adder. 

Proof Context
* Goal State: @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add
        (Nat.add (bool_to_nat (half_adder_carry a cin))
           (bool_to_nat (half_adder_carry a cin))) 
        (BV_to_nat l)) (BV_to_nat l))
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add
        (Nat.add (BV_to_nat l) (bool_to_nat (half_adder_carry a cin)))
        (BV_to_nat l)) (bool_to_nat (half_adder_carry a cin)))

* Hypothesis:
cin : bool
H : forall (w0 : BV) (cin0 : bool),
@eq nat
  (BV_to_nat
     (appbv (BV_full_adder_sum l w0 cin0)
        (consbv (BV_full_adder_carry l w0 cin0) nilbv)))
  (Nat.add (Nat.add (BV_to_nat l) (BV_to_nat w0)) (bool_to_nat cin0))
v : BV
w : BV
l : list bool
a : bool

* Types:
Set
list bool
BV
Prop
bool
nat

* Polymorphic Types:
list bool

* Variables:
cin : bool
l : list bool
a : bool

* Terms:
BV_to_nat
  (appbv (BV_full_adder_sum l _UNBOUND_REL_2 _UNBOUND_REL_1)
     (consbv (BV_full_adder_carry l _UNBOUND_REL_2 _UNBOUND_REL_1) nilbv)) : nat
cin : bool
Nat.add (BV_to_nat l) (bool_to_nat (half_adder_carry a cin)) : nat
bool_to_nat _UNBOUND_REL_1 : nat
Nat.add (bool_to_nat (half_adder_carry a cin))
  (bool_to_nat (half_adder_carry a cin)) : nat
Nat.add (Nat.add (BV_to_nat l) (BV_to_nat _UNBOUND_REL_2))
  (bool_to_nat _UNBOUND_REL_1) : nat
PeanoNat.Nat.add
  (PeanoNat.Nat.add
     (Nat.add (bool_to_nat (half_adder_carry a cin))
        (bool_to_nat (half_adder_carry a cin))) (BV_to_nat l)) 
  (BV_to_nat l) : nat
forall (w0 : BV) (cin0 : bool),
@eq nat
  (BV_to_nat
     (appbv (BV_full_adder_sum l w0 cin0)
        (consbv (BV_full_adder_carry l w0 cin0) nilbv)))
  (Nat.add (Nat.add (BV_to_nat l) (BV_to_nat w0)) (bool_to_nat cin0)) : Prop
nilbv : BV
l : list bool
forall cin0 : bool,
@eq nat
  (BV_to_nat
     (appbv (BV_full_adder_sum l _UNBOUND_REL_2 cin0)
        (consbv (BV_full_adder_carry l _UNBOUND_REL_2 cin0) nilbv)))
  (Nat.add (Nat.add (BV_to_nat l) (BV_to_nat _UNBOUND_REL_2))
     (bool_to_nat cin0)) : Prop
PeanoNat.Nat.add
  (Nat.add (BV_to_nat l) (bool_to_nat (half_adder_carry a cin)))
  (BV_to_nat l) : nat
appbv (BV_full_adder_sum l _UNBOUND_REL_2 _UNBOUND_REL_1)
  (consbv (BV_full_adder_carry l _UNBOUND_REL_2 _UNBOUND_REL_1) nilbv) : BV
nat : Set
PeanoNat.Nat.add
  (Nat.add (bool_to_nat (half_adder_carry a cin))
     (bool_to_nat (half_adder_carry a cin))) (BV_to_nat l) : nat
bool : Set
@eq nat
  (BV_to_nat
     (appbv (BV_full_adder_sum l _UNBOUND_REL_2 _UNBOUND_REL_1)
        (consbv (BV_full_adder_carry l _UNBOUND_REL_2 _UNBOUND_REL_1) nilbv)))
  (Nat.add (Nat.add (BV_to_nat l) (BV_to_nat _UNBOUND_REL_2))
     (bool_to_nat _UNBOUND_REL_1)) : Prop
BV_to_nat _UNBOUND_REL_2 : nat
Nat.add (BV_to_nat l) (BV_to_nat _UNBOUND_REL_2) : nat
bool_to_nat (half_adder_carry a cin) : nat
BV_full_adder_sum l _UNBOUND_REL_2 _UNBOUND_REL_1 : BV
PeanoNat.Nat.add
  (PeanoNat.Nat.add
     (Nat.add (BV_to_nat l) (bool_to_nat (half_adder_carry a cin)))
     (BV_to_nat l)) (bool_to_nat (half_adder_carry a cin)) : nat
BV_full_adder_carry l _UNBOUND_REL_2 _UNBOUND_REL_1 : bool
@eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add
        (Nat.add (bool_to_nat (half_adder_carry a cin))
           (bool_to_nat (half_adder_carry a cin))) 
        (BV_to_nat l)) (BV_to_nat l))
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add
        (Nat.add (BV_to_nat l) (bool_to_nat (half_adder_carry a cin)))
        (BV_to_nat l)) (bool_to_nat (half_adder_carry a cin))) : Prop
BV : Set
list bool : Set
half_adder_carry a cin : bool
consbv (BV_full_adder_carry l _UNBOUND_REL_2 _UNBOUND_REL_1) nilbv : BV
a : bool
BV_to_nat l : nat

* Functions:
appbv  : forall (_ : BV) (_ : BV), BV
BV_full_adder_carry  : forall (_ : list bool) (_ : list bool) (_ : bool), bool
bool_to_nat  : forall _ : bool, nat
Nat.add  : forall (_ : nat) (_ : nat), nat
list  : forall _ : Type, Type
half_adder_carry  : forall (_ : bool) (_ : bool), bool
consbv  : forall (_ : bool) (_ : BV), BV
@eq  : forall (A : Type) (_ : A) (_ : A), Prop
BV_full_adder_sum  : forall (_ : list bool) (_ : list bool) (_ : bool), BV
PeanoNat.Nat.add  : forall (_ : nat) (_ : nat), nat
BV_to_nat  : forall _ : BV, nat

<---GENERALIZATION--->
Time elapsed: 4 seconds
Generalized Variables:
lf3 : nat = PeanoNat.Nat.add
  (Nat.add (bool_to_nat (half_adder_carry a cin))
     (bool_to_nat (half_adder_carry a cin))) (BV_to_nat l)
lf7 : nat = bool_to_nat (half_adder_carry a cin)
lf1 : nat = PeanoNat.Nat.add
  (PeanoNat.Nat.add
     (Nat.add (bool_to_nat (half_adder_carry a cin))
        (bool_to_nat (half_adder_carry a cin))) (BV_to_nat l)) 
  (BV_to_nat l)
lf4 : nat = PeanoNat.Nat.add
  (Nat.add (BV_to_nat l) (bool_to_nat (half_adder_carry a cin)))
  (BV_to_nat l)
lf5 : nat = Nat.add (bool_to_nat (half_adder_carry a cin))
  (bool_to_nat (half_adder_carry a cin))
lf9 : nat = BV_to_nat l
lf2 : nat = PeanoNat.Nat.add
  (PeanoNat.Nat.add
     (Nat.add (BV_to_nat l) (bool_to_nat (half_adder_carry a cin)))
     (BV_to_nat l)) (bool_to_nat (half_adder_carry a cin))
lf8 : bool = half_adder_carry a cin
lf6 : nat = Nat.add (BV_to_nat l) (bool_to_nat (half_adder_carry a cin))

Generalizations:
Lemma conj1: forall (lf6 : nat) (lf9 : nat) (lf7 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf7 lf7) lf9) lf9)
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9) lf7).
Lemma conj2: forall (lf9 : nat) (lf7 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf7 lf7) lf9) lf9)
  (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf9 lf7) lf9) lf7).
Lemma conj9: forall (lf6 : nat) (lf7 : nat) (l : list bool), @eq nat
  (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf7 lf7) (BV_to_nat l))
     (BV_to_nat l))
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l)) lf7).
Lemma conj10: forall (lf7 : nat) (l : list bool), @eq nat
  (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf7 lf7) (BV_to_nat l))
     (BV_to_nat l))
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (BV_to_nat l) lf7) (BV_to_nat l)) lf7).
Lemma conj129: forall (lf8 : bool) (lf6 : nat) (lf9 : nat), @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8)) lf9) lf9)
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9) (bool_to_nat lf8)).
Lemma conj130: forall (lf8 : bool) (lf9 : nat), @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8)) lf9) lf9)
  (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf9 (bool_to_nat lf8)) lf9)
     (bool_to_nat lf8)).
Lemma conj131: forall (lf6 : nat) (lf9 : nat) (cin : bool) (a : bool), @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add
        (Nat.add (bool_to_nat (half_adder_carry a cin))
           (bool_to_nat (half_adder_carry a cin))) lf9) lf9)
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9)
     (bool_to_nat (half_adder_carry a cin))).
Lemma conj132: forall (lf9 : nat) (cin : bool) (a : bool), @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add
        (Nat.add (bool_to_nat (half_adder_carry a cin))
           (bool_to_nat (half_adder_carry a cin))) lf9) lf9)
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add lf9 (bool_to_nat (half_adder_carry a cin)))
        lf9) (bool_to_nat (half_adder_carry a cin))).
Lemma conj137: forall (lf8 : bool) (lf6 : nat) (l : list bool), @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))
        (BV_to_nat l)) (BV_to_nat l))
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l)) (bool_to_nat lf8)).
Lemma conj138: forall (lf8 : bool) (l : list bool), @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))
        (BV_to_nat l)) (BV_to_nat l))
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (bool_to_nat lf8))
        (BV_to_nat l)) (bool_to_nat lf8)).
Lemma conj139: forall (lf6 : nat) (cin : bool) (l : list bool) (a : bool), @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add
        (Nat.add (bool_to_nat (half_adder_carry a cin))
           (bool_to_nat (half_adder_carry a cin))) 
        (BV_to_nat l)) (BV_to_nat l))
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l))
     (bool_to_nat (half_adder_carry a cin))).
Lemma conj140: forall (cin : bool) (l : list bool) (a : bool), @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add
        (Nat.add (bool_to_nat (half_adder_carry a cin))
           (bool_to_nat (half_adder_carry a cin))) 
        (BV_to_nat l)) (BV_to_nat l))
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add
        (Nat.add (BV_to_nat l) (bool_to_nat (half_adder_carry a cin)))
        (BV_to_nat l)) (bool_to_nat (half_adder_carry a cin))).


<---VALIDITY CHECKS--->
Time elapsed: 79 seconds
Valid:
Lemma conj140: forall (cin : bool) (l : list bool) (a : bool), @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add
        (Nat.add (bool_to_nat (half_adder_carry a cin))
           (bool_to_nat (half_adder_carry a cin))) 
        (BV_to_nat l)) (BV_to_nat l))
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add
        (Nat.add (BV_to_nat l) (bool_to_nat (half_adder_carry a cin)))
        (BV_to_nat l)) (bool_to_nat (half_adder_carry a cin))).
Lemma conj138: forall (lf8 : bool) (l : list bool), @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))
        (BV_to_nat l)) (BV_to_nat l))
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (bool_to_nat lf8))
        (BV_to_nat l)) (bool_to_nat lf8)).
Lemma conj132: forall (lf9 : nat) (cin : bool) (a : bool), @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add
        (Nat.add (bool_to_nat (half_adder_carry a cin))
           (bool_to_nat (half_adder_carry a cin))) lf9) lf9)
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add lf9 (bool_to_nat (half_adder_carry a cin)))
        lf9) (bool_to_nat (half_adder_carry a cin))).
Lemma conj130: forall (lf8 : bool) (lf9 : nat), @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8)) lf9) lf9)
  (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf9 (bool_to_nat lf8)) lf9)
     (bool_to_nat lf8)).
Lemma conj10: forall (lf7 : nat) (l : list bool), @eq nat
  (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf7 lf7) (BV_to_nat l))
     (BV_to_nat l))
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (BV_to_nat l) lf7) (BV_to_nat l)) lf7).
Lemma conj2: forall (lf9 : nat) (lf7 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf7 lf7) lf9) lf9)
  (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf9 lf7) lf9) lf7).

Invalid:
Lemma conj139: forall (lf6 : nat) (cin : bool) (l : list bool) (a : bool), @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add
        (Nat.add (bool_to_nat (half_adder_carry a cin))
           (bool_to_nat (half_adder_carry a cin))) 
        (BV_to_nat l)) (BV_to_nat l))
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l))
     (bool_to_nat (half_adder_carry a cin))).
Lemma conj137: forall (lf8 : bool) (lf6 : nat) (l : list bool), @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))
        (BV_to_nat l)) (BV_to_nat l))
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l)) (bool_to_nat lf8)).
Lemma conj131: forall (lf6 : nat) (lf9 : nat) (cin : bool) (a : bool), @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add
        (Nat.add (bool_to_nat (half_adder_carry a cin))
           (bool_to_nat (half_adder_carry a cin))) lf9) lf9)
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9)
     (bool_to_nat (half_adder_carry a cin))).
Lemma conj129: forall (lf8 : bool) (lf6 : nat) (lf9 : nat), @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8)) lf9) lf9)
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9) (bool_to_nat lf8)).
Lemma conj9: forall (lf6 : nat) (lf7 : nat) (l : list bool), @eq nat
  (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf7 lf7) (BV_to_nat l))
     (BV_to_nat l))
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l)) lf7).
Lemma conj1: forall (lf6 : nat) (lf9 : nat) (lf7 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf7 lf7) lf9) lf9)
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9) lf7).

<---ADD IMPLICATIONS--->
Time elapsed: 86 seconds
Generalizations:
Lemma conj139: forall (lf6 : nat) (cin : bool) (l : list bool) (a : bool), @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add
        (Nat.add (bool_to_nat (half_adder_carry a cin))
           (bool_to_nat (half_adder_carry a cin))) 
        (BV_to_nat l)) (BV_to_nat l))
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l))
     (bool_to_nat (half_adder_carry a cin))).
Lemma conj137: forall (lf8 : bool) (lf6 : nat) (l : list bool), @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))
        (BV_to_nat l)) (BV_to_nat l))
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l)) (bool_to_nat lf8)).
Lemma conj131: forall (lf6 : nat) (lf9 : nat) (cin : bool) (a : bool), @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add
        (Nat.add (bool_to_nat (half_adder_carry a cin))
           (bool_to_nat (half_adder_carry a cin))) lf9) lf9)
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9)
     (bool_to_nat (half_adder_carry a cin))).
Lemma conj129: forall (lf8 : bool) (lf6 : nat) (lf9 : nat), @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8)) lf9) lf9)
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9) (bool_to_nat lf8)).
Lemma conj9: forall (lf6 : nat) (lf7 : nat) (l : list bool), @eq nat
  (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf7 lf7) (BV_to_nat l))
     (BV_to_nat l))
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l)) lf7).
Lemma conj1: forall (lf6 : nat) (lf9 : nat) (lf7 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf7 lf7) lf9) lf9)
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9) lf7).


<---VALIDITY CHECKS--->
Time elapsed: 96 seconds
Valid:

Invalid:
Lemma conj1: forall (lf6 : nat) (lf9 : nat) (lf7 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf7 lf7) lf9) lf9)
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9) lf7).
Lemma conj9: forall (lf6 : nat) (lf7 : nat) (l : list bool), @eq nat
  (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf7 lf7) (BV_to_nat l))
     (BV_to_nat l))
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l)) lf7).
Lemma conj129: forall (lf8 : bool) (lf6 : nat) (lf9 : nat), @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8)) lf9) lf9)
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9) (bool_to_nat lf8)).
Lemma conj131: forall (lf6 : nat) (lf9 : nat) (cin : bool) (a : bool), @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add
        (Nat.add (bool_to_nat (half_adder_carry a cin))
           (bool_to_nat (half_adder_carry a cin))) lf9) lf9)
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9)
     (bool_to_nat (half_adder_carry a cin))).
Lemma conj137: forall (lf8 : bool) (lf6 : nat) (l : list bool), @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))
        (BV_to_nat l)) (BV_to_nat l))
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l)) (bool_to_nat lf8)).
Lemma conj139: forall (lf6 : nat) (cin : bool) (l : list bool) (a : bool), @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add
        (Nat.add (bool_to_nat (half_adder_carry a cin))
           (bool_to_nat (half_adder_carry a cin))) 
        (BV_to_nat l)) (BV_to_nat l))
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l))
     (bool_to_nat (half_adder_carry a cin))).


<---CREATE SKETCHES--->
Time elapsed: 96 seconds
Sketches:
Sketch conj1_sketch0 : @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (##hole##) lf9) lf9)
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9) lf7)
Sketch conj1_sketch1 : @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf7 lf7) lf9) lf9)
  (##hole##)
Sketch conj1_sketch2 : @eq nat (PeanoNat.Nat.add (##hole##) lf9)
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9) lf7)
Sketch conj1_sketch3 : @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf7 lf7) lf9) lf9)
  (PeanoNat.Nat.add (##hole##) lf7)
Sketch conj1_sketch4 : @eq nat (##hole##) (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9) lf7)
Sketch conj1_term_sketch0 : @eq nat (Nat.add lf7 lf7) (##hole##)
Sketch conj1_term_sketch1 : @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9) lf7) (##hole##)
Sketch conj1_term_sketch2 : @eq nat (PeanoNat.Nat.add (Nat.add lf7 lf7) lf9) (##hole##)
Sketch conj1_term_sketch3 : @eq nat (PeanoNat.Nat.add lf6 lf9) (##hole##)
Sketch conj1_term_sketch4 : @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf7 lf7) lf9) lf9)
  (##hole##)
Sketch conj9_sketch0 : @eq nat (PeanoNat.Nat.add (##hole##) (BV_to_nat l))
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l)) lf7)
Sketch conj9_sketch1 : @eq nat
  (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf7 lf7) (BV_to_nat l))
     (BV_to_nat l)) (##hole##)
Sketch conj9_sketch2 : @eq nat
  (PeanoNat.Nat.add (PeanoNat.Nat.add (##hole##) (BV_to_nat l)) (BV_to_nat l))
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l)) lf7)
Sketch conj9_sketch3 : @eq nat (##hole##)
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l)) lf7)
Sketch conj9_sketch4 : @eq nat
  (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf7 lf7) (##hole##))
     (##hole##)) (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (##hole##)) lf7)
Sketch conj9_sketch5 : @eq nat
  (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf7 lf7) (BV_to_nat l))
     (BV_to_nat l)) (PeanoNat.Nat.add (##hole##) lf7)
Sketch conj9_term_sketch0 : @eq nat (PeanoNat.Nat.add (Nat.add lf7 lf7) (BV_to_nat l)) (##hole##)
Sketch conj9_term_sketch1 : @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l)) lf7)
  (##hole##)
Sketch conj9_term_sketch2 : @eq nat (Nat.add lf7 lf7) (##hole##)
Sketch conj9_term_sketch3 : @eq nat
  (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf7 lf7) (BV_to_nat l))
     (BV_to_nat l)) (##hole##)
Sketch conj9_term_sketch4 : @eq nat (BV_to_nat l) (##hole##)
Sketch conj9_term_sketch5 : @eq nat (PeanoNat.Nat.add lf6 (BV_to_nat l)) (##hole##)
Sketch conj129_sketch0 : @eq nat (PeanoNat.Nat.add (##hole##) lf9)
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9) (bool_to_nat lf8))
Sketch conj129_sketch1 : @eq nat
  (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add (##hole##) (##hole##)) lf9)
     lf9) (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9) (##hole##))
Sketch conj129_sketch2 : @eq nat (##hole##)
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9) (bool_to_nat lf8))
Sketch conj129_sketch3 : @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8)) lf9) lf9)
  (PeanoNat.Nat.add (##hole##) (bool_to_nat lf8))
Sketch conj129_sketch4 : @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8)) lf9) lf9)
  (##hole##)
Sketch conj129_sketch5 : @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (##hole##) lf9) lf9)
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9) (bool_to_nat lf8))
Sketch conj129_term_sketch0 : @eq nat (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8)) lf9)
  (##hole##)
Sketch conj129_term_sketch1 : @eq nat (bool_to_nat lf8) (##hole##)
Sketch conj129_term_sketch2 : @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8)) lf9) lf9)
  (##hole##)
Sketch conj129_term_sketch3 : @eq nat (PeanoNat.Nat.add lf6 lf9) (##hole##)
Sketch conj129_term_sketch4 : @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9) (bool_to_nat lf8))
  (##hole##)
Sketch conj129_term_sketch5 : @eq nat (Nat.add (bool_to_nat lf8) (bool_to_nat lf8)) (##hole##)
Sketch conj131_sketch0 : @eq nat (##hole##)
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9)
     (bool_to_nat (half_adder_carry a cin)))
Sketch conj131_sketch1 : @eq nat
  (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add (##hole##) (##hole##)) lf9)
     lf9) (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9) (##hole##))
Sketch conj131_sketch2 : @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (##hole##) lf9) lf9)
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9)
     (bool_to_nat (half_adder_carry a cin)))
Sketch conj131_sketch3 : @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add
        (Nat.add (bool_to_nat (half_adder_carry a cin))
           (bool_to_nat (half_adder_carry a cin))) lf9) lf9) (##hole##)
Sketch conj131_sketch4 : @eq nat (PeanoNat.Nat.add (##hole##) lf9)
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9)
     (bool_to_nat (half_adder_carry a cin)))
Sketch conj131_sketch5 : @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add
        (Nat.add (bool_to_nat (##hole##)) (bool_to_nat (##hole##))) lf9) lf9)
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9) (bool_to_nat (##hole##)))
Sketch conj131_sketch6 : @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add
        (Nat.add (bool_to_nat (half_adder_carry a cin))
           (bool_to_nat (half_adder_carry a cin))) lf9) lf9)
  (PeanoNat.Nat.add (##hole##) (bool_to_nat (half_adder_carry a cin)))
Sketch conj131_term_sketch0 : @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add
        (Nat.add (bool_to_nat (half_adder_carry a cin))
           (bool_to_nat (half_adder_carry a cin))) lf9) lf9) (##hole##)
Sketch conj131_term_sketch1 : @eq nat (bool_to_nat (half_adder_carry a cin)) (##hole##)
Sketch conj131_term_sketch2 : @eq nat
  (Nat.add (bool_to_nat (half_adder_carry a cin))
     (bool_to_nat (half_adder_carry a cin))) (##hole##)
Sketch conj131_term_sketch3 : @eq nat
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9)
     (bool_to_nat (half_adder_carry a cin))) (##hole##)
Sketch conj131_term_sketch4 : @eq nat
  (PeanoNat.Nat.add
     (Nat.add (bool_to_nat (half_adder_carry a cin))
        (bool_to_nat (half_adder_carry a cin))) lf9) (##hole##)
Sketch conj131_term_sketch5 : @eq bool (half_adder_carry a cin) (##hole##)
Sketch conj131_term_sketch6 : @eq nat (PeanoNat.Nat.add lf6 lf9) (##hole##)
Sketch conj137_sketch0 : @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))
        (BV_to_nat l)) (BV_to_nat l)) (##hole##)
Sketch conj137_sketch1 : @eq nat (##hole##)
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l)) (bool_to_nat lf8))
Sketch conj137_sketch2 : @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (##hole##) (##hole##)) (BV_to_nat l))
     (BV_to_nat l))
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l)) (##hole##))
Sketch conj137_sketch3 : @eq nat (PeanoNat.Nat.add (##hole##) (BV_to_nat l))
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l)) (bool_to_nat lf8))
Sketch conj137_sketch4 : @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))
        (##hole##)) (##hole##))
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (##hole##)) (bool_to_nat lf8))
Sketch conj137_sketch5 : @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))
        (BV_to_nat l)) (BV_to_nat l))
  (PeanoNat.Nat.add (##hole##) (bool_to_nat lf8))
Sketch conj137_sketch6 : @eq nat
  (PeanoNat.Nat.add (PeanoNat.Nat.add (##hole##) (BV_to_nat l)) (BV_to_nat l))
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l)) (bool_to_nat lf8))
Sketch conj137_term_sketch0 : @eq nat
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l)) (bool_to_nat lf8))
  (##hole##)
Sketch conj137_term_sketch1 : @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))
        (BV_to_nat l)) (BV_to_nat l)) (##hole##)
Sketch conj137_term_sketch2 : @eq nat (bool_to_nat lf8) (##hole##)
Sketch conj137_term_sketch3 : @eq nat
  (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))
     (BV_to_nat l)) (##hole##)
Sketch conj137_term_sketch4 : @eq nat (BV_to_nat l) (##hole##)
Sketch conj137_term_sketch5 : @eq nat (PeanoNat.Nat.add lf6 (BV_to_nat l)) (##hole##)
Sketch conj137_term_sketch6 : @eq nat (Nat.add (bool_to_nat lf8) (bool_to_nat lf8)) (##hole##)
Sketch conj139_sketch0 : @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add
        (Nat.add (bool_to_nat (half_adder_carry a cin))
           (bool_to_nat (half_adder_carry a cin))) 
        (BV_to_nat l)) (BV_to_nat l)) (##hole##)
Sketch conj139_sketch1 : @eq nat (PeanoNat.Nat.add (##hole##) (BV_to_nat l))
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l))
     (bool_to_nat (half_adder_carry a cin)))
Sketch conj139_sketch2 : @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add (Nat.add (##hole##) (##hole##)) (BV_to_nat l))
     (BV_to_nat l))
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l)) (##hole##))
Sketch conj139_sketch3 : @eq nat
  (PeanoNat.Nat.add (PeanoNat.Nat.add (##hole##) (BV_to_nat l)) (BV_to_nat l))
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l))
     (bool_to_nat (half_adder_carry a cin)))
Sketch conj139_sketch4 : @eq nat (##hole##)
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l))
     (bool_to_nat (half_adder_carry a cin)))
Sketch conj139_sketch5 : @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add
        (Nat.add (bool_to_nat (##hole##)) (bool_to_nat (##hole##)))
        (BV_to_nat l)) (BV_to_nat l))
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l))
     (bool_to_nat (##hole##)))
Sketch conj139_sketch6 : @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add
        (Nat.add (bool_to_nat (half_adder_carry a cin))
           (bool_to_nat (half_adder_carry a cin))) (##hole##)) (##hole##))
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (##hole##))
     (bool_to_nat (half_adder_carry a cin)))
Sketch conj139_sketch7 : @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add
        (Nat.add (bool_to_nat (half_adder_carry a cin))
           (bool_to_nat (half_adder_carry a cin))) 
        (BV_to_nat l)) (BV_to_nat l))
  (PeanoNat.Nat.add (##hole##) (bool_to_nat (half_adder_carry a cin)))
Sketch conj139_term_sketch0 : @eq nat
  (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l))
     (bool_to_nat (half_adder_carry a cin))) (##hole##)
Sketch conj139_term_sketch1 : @eq nat
  (PeanoNat.Nat.add
     (Nat.add (bool_to_nat (half_adder_carry a cin))
        (bool_to_nat (half_adder_carry a cin))) (BV_to_nat l)) (##hole##)
Sketch conj139_term_sketch2 : @eq nat (bool_to_nat (half_adder_carry a cin)) (##hole##)
Sketch conj139_term_sketch3 : @eq nat
  (Nat.add (bool_to_nat (half_adder_carry a cin))
     (bool_to_nat (half_adder_carry a cin))) (##hole##)
Sketch conj139_term_sketch4 : @eq nat
  (PeanoNat.Nat.add
     (PeanoNat.Nat.add
        (Nat.add (bool_to_nat (half_adder_carry a cin))
           (bool_to_nat (half_adder_carry a cin))) 
        (BV_to_nat l)) (BV_to_nat l)) (##hole##)
Sketch conj139_term_sketch5 : @eq bool (half_adder_carry a cin) (##hole##)
Sketch conj139_term_sketch6 : @eq nat (BV_to_nat l) (##hole##)
Sketch conj139_term_sketch7 : @eq nat (PeanoNat.Nat.add lf6 (BV_to_nat l)) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 808 seconds
Problems per Sketch:
Sketch conj129_term_sketch4 --> Problem  synth_20
Sketch conj9_sketch2 --> Problem  synth_11
Sketch conj129_sketch3 --> Problem  synth_21
Sketch conj129_sketch5 --> Problem  synth_23
Sketch conj1_sketch3 --> Problem  synth_4
Sketch conj1_sketch0 --> Problem  synth_1
Sketch conj129_sketch1 --> Problem  synth_19
Sketch conj1_sketch4 --> Problem  synth_5
Sketch conj137_sketch4 --> Problem  synth_41
Sketch conj129_sketch4 --> Problem  synth_22
Sketch conj137_term_sketch6 --> Problem  synth_26
Sketch conj139_term_sketch5 --> Problem  synth_36
Sketch conj137_term_sketch5 --> Problem  synth_17
Sketch conj129_term_sketch2 --> Problem  synth_22
Sketch conj137_sketch5 --> Problem  synth_42
Sketch conj9_term_sketch0 --> Problem  synth_15
Sketch conj1_term_sketch1 --> Problem  synth_5
Sketch conj1_sketch1 --> Problem  synth_2
Sketch conj131_sketch0 --> Problem  synth_27
Sketch conj9_term_sketch3 --> Problem  synth_10
Sketch conj1_term_sketch2 --> Problem  synth_7
Sketch conj131_term_sketch4 --> Problem  synth_35
Sketch conj137_sketch3 --> Problem  synth_40
Sketch conj1_term_sketch0 --> Problem  synth_6
Sketch conj131_term_sketch3 --> Problem  synth_27
Sketch conj9_term_sketch2 --> Problem  synth_6
Sketch conj131_sketch4 --> Problem  synth_30
Sketch conj137_sketch6 --> Problem  synth_43
Sketch conj129_term_sketch0 --> Problem  synth_24
Sketch conj9_sketch3 --> Problem  synth_12
Sketch conj139_term_sketch7 --> Problem  synth_17
Sketch conj137_term_sketch4 --> Problem  synth_16
Sketch conj131_term_sketch5 --> Problem  synth_36
Sketch conj139_sketch3 --> Problem  synth_47
Sketch conj139_term_sketch3 --> Problem  synth_34
Sketch conj1_sketch2 --> Problem  synth_3
Sketch conj129_term_sketch3 --> Problem  synth_8
Sketch conj139_term_sketch6 --> Problem  synth_16
Sketch conj139_sketch4 --> Problem  synth_48
Sketch conj131_sketch6 --> Problem  synth_32
Sketch conj9_sketch4 --> Problem  synth_13
Sketch conj139_term_sketch4 --> Problem  synth_45
Sketch conj131_sketch1 --> Problem  synth_19
Sketch conj131_sketch2 --> Problem  synth_28
Sketch conj139_sketch2 --> Problem  synth_39
Sketch conj131_term_sketch2 --> Problem  synth_34
Sketch conj137_term_sketch2 --> Problem  synth_25
Sketch conj131_term_sketch0 --> Problem  synth_29
Sketch conj9_sketch0 --> Problem  synth_9
Sketch conj9_sketch1 --> Problem  synth_10
Sketch conj139_sketch7 --> Problem  synth_51
Sketch conj137_sketch0 --> Problem  synth_37
Sketch conj9_term_sketch4 --> Problem  synth_16
Sketch conj139_term_sketch0 --> Problem  synth_48
Sketch conj139_sketch5 --> Problem  synth_49
Sketch conj9_sketch5 --> Problem  synth_14
Sketch conj139_term_sketch1 --> Problem  synth_52
Sketch conj131_term_sketch6 --> Problem  synth_8
Sketch conj131_sketch5 --> Problem  synth_31
Sketch conj137_sketch1 --> Problem  synth_38
Sketch conj131_term_sketch1 --> Problem  synth_33
Sketch conj139_sketch0 --> Problem  synth_45
Sketch conj137_term_sketch1 --> Problem  synth_37
Sketch conj137_term_sketch0 --> Problem  synth_38
Sketch conj129_sketch2 --> Problem  synth_20
Sketch conj139_sketch6 --> Problem  synth_50
Sketch conj9_term_sketch5 --> Problem  synth_17
Sketch conj9_term_sketch1 --> Problem  synth_12
Sketch conj139_term_sketch2 --> Problem  synth_33
Sketch conj137_term_sketch3 --> Problem  synth_44
Sketch conj129_term_sketch5 --> Problem  synth_26
Sketch conj137_sketch2 --> Problem  synth_39
Sketch conj139_sketch1 --> Problem  synth_46
Sketch conj1_term_sketch4 --> Problem  synth_2
Sketch conj131_sketch3 --> Problem  synth_29
Sketch conj129_term_sketch1 --> Problem  synth_25
Sketch conj129_sketch0 --> Problem  synth_18
Sketch conj1_term_sketch3 --> Problem  synth_8


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 1455 seconds

Problem: synth_28

Problem: synth_17

Problem: synth_29

Problem: synth_45

Problem: synth_26
 PeanoNat.Nat.add (PeanoNat.Nat.add (Bool_compl.bool_to_nat lf8) (Bool_compl.bool_to_nat lf8)) O
 PeanoNat.Nat.add (Bool_compl.bool_to_nat lf8) (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 lf8))
 PeanoNat.Nat.add (Bool_compl.bool_to_nat lf8) (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 true))
 PeanoNat.Nat.add (Bool_compl.bool_to_nat lf8) (PeanoNat.Nat.add (Bool_compl.bool_to_nat lf8) O)
 PeanoNat.Nat.add (Bool_compl.bool_to_nat lf8) (Bool_compl.bool_to_nat lf8)

Problem: synth_9
 PeanoNat.Nat.add lf6 lf7
 PeanoNat.Nat.add lf7 lf6

Problem: synth_30

Problem: synth_11
 PeanoNat.Nat.add lf7 lf7

Problem: synth_39

Problem: synth_1
 PeanoNat.Nat.add lf7 lf7

Problem: synth_46

Problem: synth_15

Problem: synth_31

Problem: synth_14

Problem: synth_8
 PeanoNat.Nat.add lf6 lf9
 PeanoNat.Nat.add lf9 lf6

Problem: synth_34

Problem: synth_12
 PeanoNat.Nat.add lf6 lf6

Problem: synth_5
 PeanoNat.Nat.add lf6 lf6

Problem: synth_37

Problem: synth_50

Problem: synth_2

Problem: synth_22

Problem: synth_20
 PeanoNat.Nat.add lf6 lf6

Problem: synth_18

Problem: synth_21

Problem: synth_41

Problem: synth_49

Problem: synth_25
 Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 (HalfAdder.half_adder_carry lf8 lf8))
 Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 (HalfAdder.half_adder_carry lf8 true))
 Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 lf8)
 Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 true)
 PeanoNat.Nat.add (Bool_compl.bool_to_nat lf8) O
 Bool_compl.bool_to_nat lf8

Problem: synth_13

Problem: synth_6
 PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)) O
 PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) (PeanoNat.Nat.add lf7 O)
 PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) lf7
 PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf7) O
 PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)
 PeanoNat.Nat.add lf7 lf7

Problem: synth_7

Problem: synth_4

Problem: synth_38
 PeanoNat.Nat.add lf6 lf6

Problem: synth_23

Problem: synth_27
 PeanoNat.Nat.add lf6 lf6

Problem: synth_42
 Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum lf8 (HalfAdder.half_adder_carry lf8 false))) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 (HalfAdder.half_adder_carry lf8 false)))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 (HalfAdder.half_adder_carry lf8 false)))))
 Nat.add (Bool_compl.bool_to_nat lf8) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 false))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 false))))
 Nat.add (Bool_compl.bool_to_nat lf8) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry lf8 false))) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry lf8 false))))
 Nat.add (Bool_compl.bool_to_nat lf8) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)))
 Nat.add (Bool_compl.bool_to_nat lf8) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))
 Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum lf8 false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 false))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 false))))

Problem: synth_16
 BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))
 BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (Adder.BV_full_adder_carry l (@nil bool) false))
 BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (Adder.BV_full_adder_carry l (@nil bool) false))
 BV.BV_to_nat (Adder.BV_full_adder_sum l (@cons bool false (@nil bool)) false)
 BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)
 BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)

Problem: synth_19

Problem: synth_40

Problem: synth_10

Problem: synth_33
 Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin (HalfAdder.half_adder_carry a cin))
 Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a (HalfAdder.half_adder_carry cin cin))
 Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin (HalfAdder.half_adder_carry a true))
 Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a (HalfAdder.half_adder_carry cin true))
 Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin a)
 Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a cin)

Problem: synth_47

Problem: synth_24

Problem: synth_3
 PeanoNat.Nat.add lf6 lf7
 PeanoNat.Nat.add lf7 lf6

Problem: synth_52

Problem: synth_32

Problem: synth_48
 PeanoNat.Nat.add lf6 lf6

Problem: synth_44

Problem: synth_36
 HalfAdder.half_adder_carry cin (HalfAdder.half_adder_carry a cin)
 HalfAdder.half_adder_carry a (HalfAdder.half_adder_carry cin cin)
 HalfAdder.half_adder_carry cin (HalfAdder.half_adder_carry a true)
 HalfAdder.half_adder_carry a (HalfAdder.half_adder_carry cin true)
 HalfAdder.half_adder_carry cin a
 HalfAdder.half_adder_carry a cin

Problem: synth_51
 Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin a)) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry cin false))) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry cin false))))
 Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a cin)) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry cin false))) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry cin false))))
 Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin a)) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)))
 Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a cin)) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)))
 Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin a)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))
 Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a cin)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))

Problem: synth_35

Problem: synth_43

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 1455 seconds
Lemmas:
Lemma candidate_1: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add         (Nat.add (bool_to_nat (half_adder_carry a cin))            (bool_to_nat (half_adder_carry a cin)))          (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (PeanoNat.Nat.add         (Nat.add (BV_to_nat l) (bool_to_nat (half_adder_carry a cin)))         (BV_to_nat l)) (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_2: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))         (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (bool_to_nat lf8))         (BV_to_nat l)) (bool_to_nat lf8)).
Lemma candidate_3: forall (a : bool) (cin : bool) (lf9 : nat), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add         (Nat.add (bool_to_nat (half_adder_carry a cin))            (bool_to_nat (half_adder_carry a cin))) lf9) lf9)   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add lf9 (bool_to_nat (half_adder_carry a cin)))         lf9) (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_4: forall (lf9 : nat) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8)) lf9) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf9 (bool_to_nat lf8)) lf9)      (bool_to_nat lf8)).
Lemma candidate_5: forall (l : list bool) (lf7 : nat), @eq nat   (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf7 lf7) (BV_to_nat l))      (BV_to_nat l))   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (BV_to_nat l) lf7) (BV_to_nat l)) lf7).
Lemma candidate_6: forall (lf7 : nat) (lf9 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf7 lf7) lf9) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf9 lf7) lf9) lf7).
Lemma candidate_7: forall (lf7 : nat) (lf9 : nat) (lf6 : nat), @eq nat   (PeanoNat.Nat.add (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf7) lf9) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9) lf7).
Lemma candidate_8: forall (lf7 : nat) (lf9 : nat) (lf6 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf7) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9) lf7).
Lemma candidate_9: forall (lf7 : nat) (lf9 : nat) (lf6 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf6) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9) lf7).
Lemma candidate_10: forall (lf7 : nat) (lf9 : nat) (lf6 : nat), @eq nat (PeanoNat.Nat.add lf6 lf6)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9) lf7).
Lemma candidate_11: forall (lf7 : nat), @eq nat (Nat.add lf7 lf7)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)) O).
Lemma candidate_12: forall (lf7 : nat), @eq nat (Nat.add lf7 lf7)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) (PeanoNat.Nat.add lf7 O)).
Lemma candidate_13: forall (lf7 : nat), @eq nat (Nat.add lf7 lf7) (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) lf7).
Lemma candidate_14: forall (lf7 : nat), @eq nat (Nat.add lf7 lf7) (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf7) O).
Lemma candidate_15: forall (lf7 : nat), @eq nat (Nat.add lf7 lf7) (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)).
Lemma candidate_16: forall (lf7 : nat), @eq nat (Nat.add lf7 lf7) (PeanoNat.Nat.add lf7 lf7).
Lemma candidate_17: forall (lf7 : nat) (lf9 : nat) (lf6 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9) lf7)   (PeanoNat.Nat.add lf6 lf6).
Lemma candidate_18: forall (lf9 : nat) (lf6 : nat), @eq nat (PeanoNat.Nat.add lf6 lf9) (PeanoNat.Nat.add lf6 lf9).
Lemma candidate_19: forall (lf9 : nat) (lf6 : nat), @eq nat (PeanoNat.Nat.add lf6 lf9) (PeanoNat.Nat.add lf9 lf6).
Lemma candidate_20: forall (lf7 : nat) (l : list bool) (lf6 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf7) (BV_to_nat l))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l)) lf7).
Lemma candidate_21: forall (lf7 : nat) (l : list bool) (lf6 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf6) (BV_to_nat l))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l)) lf7).
Lemma candidate_22: forall (lf7 : nat) (l : list bool) (lf6 : nat), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf7) (BV_to_nat l))      (BV_to_nat l))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l)) lf7).
Lemma candidate_23: forall (lf7 : nat) (l : list bool) (lf6 : nat), @eq nat (PeanoNat.Nat.add lf6 lf6)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l)) lf7).
Lemma candidate_24: forall (lf7 : nat) (l : list bool) (lf6 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l)) lf7)   (PeanoNat.Nat.add lf6 lf6).
Lemma candidate_25: forall (lf7 : nat), @eq nat (Nat.add lf7 lf7)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)) O).
Lemma candidate_26: forall (lf7 : nat), @eq nat (Nat.add lf7 lf7)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) (PeanoNat.Nat.add lf7 O)).
Lemma candidate_27: forall (lf7 : nat), @eq nat (Nat.add lf7 lf7) (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) lf7).
Lemma candidate_28: forall (lf7 : nat), @eq nat (Nat.add lf7 lf7) (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf7) O).
Lemma candidate_29: forall (lf7 : nat), @eq nat (Nat.add lf7 lf7) (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)).
Lemma candidate_30: forall (lf7 : nat), @eq nat (Nat.add lf7 lf7) (PeanoNat.Nat.add lf7 lf7).
Lemma candidate_31: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))).
Lemma candidate_32: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_33: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_34: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@cons bool false (@nil bool)) false)).
Lemma candidate_35: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_36: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)).
Lemma candidate_37: forall (lf9 : nat) (lf8 : bool) (lf6 : nat), @eq nat (PeanoNat.Nat.add lf6 lf6)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9) (bool_to_nat lf8)).
Lemma candidate_38: forall (lf8 : bool), @eq nat (bool_to_nat lf8)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 (HalfAdder.half_adder_carry lf8 lf8))).
Lemma candidate_39: forall (lf8 : bool), @eq nat (bool_to_nat lf8)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 (HalfAdder.half_adder_carry lf8 true))).
Lemma candidate_40: forall (lf8 : bool), @eq nat (bool_to_nat lf8)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 lf8)).
Lemma candidate_41: forall (lf8 : bool), @eq nat (bool_to_nat lf8)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 true)).
Lemma candidate_42: forall (lf8 : bool), @eq nat (bool_to_nat lf8) (PeanoNat.Nat.add (Bool_compl.bool_to_nat lf8) O).
Lemma candidate_43: forall (lf8 : bool), @eq nat (bool_to_nat lf8) (Bool_compl.bool_to_nat lf8).
Lemma candidate_44: forall (lf9 : nat) (lf6 : nat), @eq nat (PeanoNat.Nat.add lf6 lf9) (PeanoNat.Nat.add lf6 lf9).
Lemma candidate_45: forall (lf9 : nat) (lf6 : nat), @eq nat (PeanoNat.Nat.add lf6 lf9) (PeanoNat.Nat.add lf9 lf6).
Lemma candidate_46: forall (lf9 : nat) (lf8 : bool) (lf6 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9) (bool_to_nat lf8))   (PeanoNat.Nat.add lf6 lf6).
Lemma candidate_47: forall (lf8 : bool), @eq nat (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))   (PeanoNat.Nat.add (PeanoNat.Nat.add (Bool_compl.bool_to_nat lf8) (Bool_compl.bool_to_nat lf8)) O).
Lemma candidate_48: forall (lf8 : bool), @eq nat (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))   (PeanoNat.Nat.add (Bool_compl.bool_to_nat lf8) (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 lf8))).
Lemma candidate_49: forall (lf8 : bool), @eq nat (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))   (PeanoNat.Nat.add (Bool_compl.bool_to_nat lf8) (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 true))).
Lemma candidate_50: forall (lf8 : bool), @eq nat (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))   (PeanoNat.Nat.add (Bool_compl.bool_to_nat lf8) (PeanoNat.Nat.add (Bool_compl.bool_to_nat lf8) O)).
Lemma candidate_51: forall (lf8 : bool), @eq nat (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))   (PeanoNat.Nat.add (Bool_compl.bool_to_nat lf8) (Bool_compl.bool_to_nat lf8)).
Lemma candidate_52: forall (a : bool) (cin : bool) (lf9 : nat) (lf6 : nat), @eq nat (PeanoNat.Nat.add lf6 lf6)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9)      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_53: forall (a : bool) (cin : bool), @eq nat (bool_to_nat (half_adder_carry a cin))   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin (HalfAdder.half_adder_carry a cin))).
Lemma candidate_54: forall (a : bool) (cin : bool), @eq nat (bool_to_nat (half_adder_carry a cin))   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a (HalfAdder.half_adder_carry cin cin))).
Lemma candidate_55: forall (a : bool) (cin : bool), @eq nat (bool_to_nat (half_adder_carry a cin))   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin (HalfAdder.half_adder_carry a true))).
Lemma candidate_56: forall (a : bool) (cin : bool), @eq nat (bool_to_nat (half_adder_carry a cin))   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a (HalfAdder.half_adder_carry cin true))).
Lemma candidate_57: forall (a : bool) (cin : bool), @eq nat (bool_to_nat (half_adder_carry a cin))   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin a)).
Lemma candidate_58: forall (a : bool) (cin : bool), @eq nat (bool_to_nat (half_adder_carry a cin))   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a cin)).
Lemma candidate_59: forall (a : bool) (cin : bool) (lf9 : nat) (lf6 : nat), @eq nat   (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9)      (bool_to_nat (half_adder_carry a cin))) (PeanoNat.Nat.add lf6 lf6).
Lemma candidate_60: forall (a : bool) (cin : bool), @eq bool (half_adder_carry a cin)   (HalfAdder.half_adder_carry cin (HalfAdder.half_adder_carry a cin)).
Lemma candidate_61: forall (a : bool) (cin : bool), @eq bool (half_adder_carry a cin)   (HalfAdder.half_adder_carry a (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_62: forall (a : bool) (cin : bool), @eq bool (half_adder_carry a cin)   (HalfAdder.half_adder_carry cin (HalfAdder.half_adder_carry a true)).
Lemma candidate_63: forall (a : bool) (cin : bool), @eq bool (half_adder_carry a cin)   (HalfAdder.half_adder_carry a (HalfAdder.half_adder_carry cin true)).
Lemma candidate_64: forall (a : bool) (cin : bool), @eq bool (half_adder_carry a cin) (HalfAdder.half_adder_carry cin a).
Lemma candidate_65: forall (a : bool) (cin : bool), @eq bool (half_adder_carry a cin) (HalfAdder.half_adder_carry a cin).
Lemma candidate_66: forall (lf9 : nat) (lf6 : nat), @eq nat (PeanoNat.Nat.add lf6 lf9) (PeanoNat.Nat.add lf6 lf9).
Lemma candidate_67: forall (lf9 : nat) (lf6 : nat), @eq nat (PeanoNat.Nat.add lf6 lf9) (PeanoNat.Nat.add lf9 lf6).
Lemma candidate_68: forall (l : list bool) (lf8 : bool) (lf6 : nat), @eq nat (PeanoNat.Nat.add lf6 lf6)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l)) (bool_to_nat lf8)).
Lemma candidate_69: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))         (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum lf8 (HalfAdder.half_adder_carry lf8 false))) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 (HalfAdder.half_adder_carry lf8 false)))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 (HalfAdder.half_adder_carry lf8 false))))))      (bool_to_nat lf8)).
Lemma candidate_70: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))         (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat lf8) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 false))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 false)))))      (bool_to_nat lf8)).
Lemma candidate_71: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))         (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat lf8) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry lf8 false))) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry lf8 false)))))      (bool_to_nat lf8)).
Lemma candidate_72: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))         (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat lf8) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false))))      (bool_to_nat lf8)).
Lemma candidate_73: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))         (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat lf8) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))))      (bool_to_nat lf8)).
Lemma candidate_74: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))         (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum lf8 false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 false))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 false)))))      (bool_to_nat lf8)).
Lemma candidate_75: forall (l : list bool) (lf8 : bool) (lf6 : nat), @eq nat   (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l)) (bool_to_nat lf8))   (PeanoNat.Nat.add lf6 lf6).
Lemma candidate_76: forall (lf8 : bool), @eq nat (bool_to_nat lf8)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 (HalfAdder.half_adder_carry lf8 lf8))).
Lemma candidate_77: forall (lf8 : bool), @eq nat (bool_to_nat lf8)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 (HalfAdder.half_adder_carry lf8 true))).
Lemma candidate_78: forall (lf8 : bool), @eq nat (bool_to_nat lf8)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 lf8)).
Lemma candidate_79: forall (lf8 : bool), @eq nat (bool_to_nat lf8)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 true)).
Lemma candidate_80: forall (lf8 : bool), @eq nat (bool_to_nat lf8) (PeanoNat.Nat.add (Bool_compl.bool_to_nat lf8) O).
Lemma candidate_81: forall (lf8 : bool), @eq nat (bool_to_nat lf8) (Bool_compl.bool_to_nat lf8).
Lemma candidate_82: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))).
Lemma candidate_83: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_84: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_85: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@cons bool false (@nil bool)) false)).
Lemma candidate_86: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_87: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)).
Lemma candidate_88: forall (lf8 : bool), @eq nat (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))   (PeanoNat.Nat.add (PeanoNat.Nat.add (Bool_compl.bool_to_nat lf8) (Bool_compl.bool_to_nat lf8)) O).
Lemma candidate_89: forall (lf8 : bool), @eq nat (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))   (PeanoNat.Nat.add (Bool_compl.bool_to_nat lf8) (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 lf8))).
Lemma candidate_90: forall (lf8 : bool), @eq nat (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))   (PeanoNat.Nat.add (Bool_compl.bool_to_nat lf8) (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 true))).
Lemma candidate_91: forall (lf8 : bool), @eq nat (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))   (PeanoNat.Nat.add (Bool_compl.bool_to_nat lf8) (PeanoNat.Nat.add (Bool_compl.bool_to_nat lf8) O)).
Lemma candidate_92: forall (lf8 : bool), @eq nat (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))   (PeanoNat.Nat.add (Bool_compl.bool_to_nat lf8) (Bool_compl.bool_to_nat lf8)).
Lemma candidate_93: forall (a : bool) (l : list bool) (cin : bool) (lf6 : nat), @eq nat (PeanoNat.Nat.add lf6 lf6)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l))      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_94: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add         (Nat.add (bool_to_nat (half_adder_carry a cin))            (bool_to_nat (half_adder_carry a cin)))          (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin a)) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry cin false))) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry cin false)))))      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_95: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add         (Nat.add (bool_to_nat (half_adder_carry a cin))            (bool_to_nat (half_adder_carry a cin)))          (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a cin)) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry cin false))) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry cin false)))))      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_96: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add         (Nat.add (bool_to_nat (half_adder_carry a cin))            (bool_to_nat (half_adder_carry a cin)))          (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin a)) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false))))      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_97: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add         (Nat.add (bool_to_nat (half_adder_carry a cin))            (bool_to_nat (half_adder_carry a cin)))          (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a cin)) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false))))      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_98: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add         (Nat.add (bool_to_nat (half_adder_carry a cin))            (bool_to_nat (half_adder_carry a cin)))          (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin a)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))))      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_99: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add         (Nat.add (bool_to_nat (half_adder_carry a cin))            (bool_to_nat (half_adder_carry a cin)))          (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a cin)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))))      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_100: forall (a : bool) (l : list bool) (cin : bool) (lf6 : nat), @eq nat   (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l))      (bool_to_nat (half_adder_carry a cin))) (PeanoNat.Nat.add lf6 lf6).
Lemma candidate_101: forall (a : bool) (cin : bool), @eq nat (bool_to_nat (half_adder_carry a cin))   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin (HalfAdder.half_adder_carry a cin))).
Lemma candidate_102: forall (a : bool) (cin : bool), @eq nat (bool_to_nat (half_adder_carry a cin))   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a (HalfAdder.half_adder_carry cin cin))).
Lemma candidate_103: forall (a : bool) (cin : bool), @eq nat (bool_to_nat (half_adder_carry a cin))   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin (HalfAdder.half_adder_carry a true))).
Lemma candidate_104: forall (a : bool) (cin : bool), @eq nat (bool_to_nat (half_adder_carry a cin))   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a (HalfAdder.half_adder_carry cin true))).
Lemma candidate_105: forall (a : bool) (cin : bool), @eq nat (bool_to_nat (half_adder_carry a cin))   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin a)).
Lemma candidate_106: forall (a : bool) (cin : bool), @eq nat (bool_to_nat (half_adder_carry a cin))   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a cin)).
Lemma candidate_107: forall (a : bool) (cin : bool), @eq bool (half_adder_carry a cin)   (HalfAdder.half_adder_carry cin (HalfAdder.half_adder_carry a cin)).
Lemma candidate_108: forall (a : bool) (cin : bool), @eq bool (half_adder_carry a cin)   (HalfAdder.half_adder_carry a (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_109: forall (a : bool) (cin : bool), @eq bool (half_adder_carry a cin)   (HalfAdder.half_adder_carry cin (HalfAdder.half_adder_carry a true)).
Lemma candidate_110: forall (a : bool) (cin : bool), @eq bool (half_adder_carry a cin)   (HalfAdder.half_adder_carry a (HalfAdder.half_adder_carry cin true)).
Lemma candidate_111: forall (a : bool) (cin : bool), @eq bool (half_adder_carry a cin) (HalfAdder.half_adder_carry cin a).
Lemma candidate_112: forall (a : bool) (cin : bool), @eq bool (half_adder_carry a cin) (HalfAdder.half_adder_carry a cin).
Lemma candidate_113: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))).
Lemma candidate_114: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_115: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_116: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@cons bool false (@nil bool)) false)).
Lemma candidate_117: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_118: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 1664 seconds
Duplicates removed: 46
Filtered by Quickchick: 14
Filtered by script: 12
Remaining: 46

Lemmas: 
Lemma candidate_19: forall (lf9 : nat) (lf6 : nat), @eq nat (PeanoNat.Nat.add lf6 lf9) (PeanoNat.Nat.add lf9 lf6).
Lemma candidate_15: forall (lf7 : nat), @eq nat (Nat.add lf7 lf7) (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)).
Lemma candidate_13: forall (lf7 : nat), @eq nat (Nat.add lf7 lf7) (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) lf7).
Lemma candidate_36: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)).
Lemma candidate_40: forall (lf8 : bool), @eq nat (bool_to_nat lf8)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 lf8)).
Lemma candidate_41: forall (lf8 : bool), @eq nat (bool_to_nat lf8)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 true)).
Lemma candidate_12: forall (lf7 : nat), @eq nat (Nat.add lf7 lf7)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 O) (PeanoNat.Nat.add lf7 O)).
Lemma candidate_11: forall (lf7 : nat), @eq nat (Nat.add lf7 lf7)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 (PeanoNat.Nat.add lf7 O)) O).
Lemma candidate_61: forall (a : bool) (cin : bool), @eq bool (half_adder_carry a cin)   (HalfAdder.half_adder_carry a (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_60: forall (a : bool) (cin : bool), @eq bool (half_adder_carry a cin)   (HalfAdder.half_adder_carry cin (HalfAdder.half_adder_carry a cin)).
Lemma candidate_34: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@cons bool false (@nil bool)) false)).
Lemma candidate_63: forall (a : bool) (cin : bool), @eq bool (half_adder_carry a cin)   (HalfAdder.half_adder_carry a (HalfAdder.half_adder_carry cin true)).
Lemma candidate_62: forall (a : bool) (cin : bool), @eq bool (half_adder_carry a cin)   (HalfAdder.half_adder_carry cin (HalfAdder.half_adder_carry a true)).
Lemma candidate_57: forall (a : bool) (cin : bool), @eq nat (bool_to_nat (half_adder_carry a cin))   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin a)).
Lemma candidate_9: forall (lf7 : nat) (lf9 : nat) (lf6 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf6) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 lf9) lf7).
Lemma candidate_38: forall (lf8 : bool), @eq nat (bool_to_nat lf8)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 (HalfAdder.half_adder_carry lf8 lf8))).
Lemma candidate_39: forall (lf8 : bool), @eq nat (bool_to_nat lf8)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 (HalfAdder.half_adder_carry lf8 true))).
Lemma candidate_33: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_21: forall (lf7 : nat) (l : list bool) (lf6 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add lf7 lf6) (BV_to_nat l))   (PeanoNat.Nat.add (PeanoNat.Nat.add lf6 (BV_to_nat l)) lf7).
Lemma candidate_6: forall (lf7 : nat) (lf9 : nat), @eq nat (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf7 lf7) lf9) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf9 lf7) lf9) lf7).
Lemma candidate_54: forall (a : bool) (cin : bool), @eq nat (bool_to_nat (half_adder_carry a cin))   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a (HalfAdder.half_adder_carry cin cin))).
Lemma candidate_53: forall (a : bool) (cin : bool), @eq nat (bool_to_nat (half_adder_carry a cin))   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin (HalfAdder.half_adder_carry a cin))).
Lemma candidate_56: forall (a : bool) (cin : bool), @eq nat (bool_to_nat (half_adder_carry a cin))   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a (HalfAdder.half_adder_carry cin true))).
Lemma candidate_55: forall (a : bool) (cin : bool), @eq nat (bool_to_nat (half_adder_carry a cin))   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin (HalfAdder.half_adder_carry a true))).
Lemma candidate_50: forall (lf8 : bool), @eq nat (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))   (PeanoNat.Nat.add (Bool_compl.bool_to_nat lf8) (PeanoNat.Nat.add (Bool_compl.bool_to_nat lf8) O)).
Lemma candidate_48: forall (lf8 : bool), @eq nat (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))   (PeanoNat.Nat.add (Bool_compl.bool_to_nat lf8) (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 lf8))).
Lemma candidate_49: forall (lf8 : bool), @eq nat (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))   (PeanoNat.Nat.add (Bool_compl.bool_to_nat lf8) (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry lf8 true))).
Lemma candidate_5: forall (l : list bool) (lf7 : nat), @eq nat   (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf7 lf7) (BV_to_nat l))      (BV_to_nat l))   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (BV_to_nat l) lf7) (BV_to_nat l)) lf7).
Lemma candidate_4: forall (lf9 : nat) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8)) lf9) lf9)   (PeanoNat.Nat.add (PeanoNat.Nat.add (Nat.add lf9 (bool_to_nat lf8)) lf9)      (bool_to_nat lf8)).
Lemma candidate_31: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))).
Lemma candidate_2: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))         (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (BV_to_nat l) (bool_to_nat lf8))         (BV_to_nat l)) (bool_to_nat lf8)).
Lemma candidate_35: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_32: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_3: forall (a : bool) (cin : bool) (lf9 : nat), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add         (Nat.add (bool_to_nat (half_adder_carry a cin))            (bool_to_nat (half_adder_carry a cin))) lf9) lf9)   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add lf9 (bool_to_nat (half_adder_carry a cin)))         lf9) (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_72: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))         (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat lf8) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false))))      (bool_to_nat lf8)).
Lemma candidate_71: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))         (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat lf8) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry lf8 false))) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry lf8 false)))))      (bool_to_nat lf8)).
Lemma candidate_97: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add         (Nat.add (bool_to_nat (half_adder_carry a cin))            (bool_to_nat (half_adder_carry a cin)))          (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a cin)) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false))))      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_96: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add         (Nat.add (bool_to_nat (half_adder_carry a cin))            (bool_to_nat (half_adder_carry a cin)))          (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin a)) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false))))      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_95: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add         (Nat.add (bool_to_nat (half_adder_carry a cin))            (bool_to_nat (half_adder_carry a cin)))          (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a cin)) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry cin false))) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry cin false)))))      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_94: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add         (Nat.add (bool_to_nat (half_adder_carry a cin))            (bool_to_nat (half_adder_carry a cin)))          (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin a)) (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry cin false))) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (HalfAdder.half_adder_carry cin false)))))      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_73: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))         (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat lf8) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))))      (bool_to_nat lf8)).
Lemma candidate_70: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))         (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat lf8) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 false))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 false)))))      (bool_to_nat lf8)).
Lemma candidate_74: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))         (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum lf8 false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 false))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 false)))))      (bool_to_nat lf8)).
Lemma candidate_99: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add         (Nat.add (bool_to_nat (half_adder_carry a cin))            (bool_to_nat (half_adder_carry a cin)))          (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry a cin)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))))      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_98: forall (a : bool) (l : list bool) (cin : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add         (Nat.add (bool_to_nat (half_adder_carry a cin))            (bool_to_nat (half_adder_carry a cin)))          (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin a)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))))      (bool_to_nat (half_adder_carry a cin))).
Lemma candidate_69: forall (l : list bool) (lf8 : bool), @eq nat   (PeanoNat.Nat.add      (PeanoNat.Nat.add (Nat.add (bool_to_nat lf8) (bool_to_nat lf8))         (BV_to_nat l)) (BV_to_nat l))   (PeanoNat.Nat.add      (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum lf8 (HalfAdder.half_adder_carry lf8 false))) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 (HalfAdder.half_adder_carry lf8 false)))) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (HalfAdder.half_adder_carry lf8 (HalfAdder.half_adder_carry lf8 false))))))      (bool_to_nat lf8)).