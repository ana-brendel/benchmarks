LFind Results
LFind Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/AdderProof/_lfind_AdderProof_lemma_BV_full_adder_sym_68

Number of Lemmas: 781
Number of Lemmas (after duplicates removed): 158
Number of Lemmas (after QuickChick used to filter): 48
* Number of Candidate Lemmas: 23

Time until ranking: 5052
Time to complete: 6183

Stuck state true independent of hypotheses: true

Category 1:
Count = 0


Category 2:
Count = 1

Lemma candidate_410: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add (BV.BV_to_nat w) O) (bool_to_nat cin)).

Category 3 (provable):
Count = 17

Lemma candidate_175: forall (lf1 : nat), @eq nat (Nat.add lf1 O) lf1.
Lemma candidate_197: forall (lf2 : nat) (lf6 : nat), @eq nat (Nat.add lf6 lf2) (Nat.add lf2 lf6).
Lemma candidate_18: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (Nat.add lf7 lf5).
Lemma candidate_5: forall (lf2 : nat) (lf6 : nat), @eq nat (Nat.add lf2 lf6) (Nat.add lf6 lf2).
Lemma candidate_95: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (Nat.add (BV.BV_to_nat w) lf5).
Lemma candidate_279: forall (lf7 : nat) (lf6 : nat), @eq nat (Nat.add lf6 lf7) (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6).
Lemma candidate_69: forall (lf7 : nat) (lf6 : nat), @eq nat (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6) (Nat.add lf6 lf7).
Lemma candidate_12: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_46: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 (@nil bool) false)).
Lemma candidate_9: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_10: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_11: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_586: forall (w : BV) (lf6 : nat), @eq nat (Nat.add lf6 (BV.BV_to_nat w))   (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6).
Lemma candidate_157: forall (w : BV) (lf6 : nat), @eq nat (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6)   (Nat.add lf6 (BV.BV_to_nat w)).
Lemma candidate_45: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 false)).
Lemma candidate_190: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin cin)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin cin)) BV.nilbv)).
Lemma candidate_191: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin true)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin true)) BV.nilbv)).

Category 3 (not provable):
Count = 5

Lemma candidate_195: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin) (Adder.BV_full_adder w BV.nilbv cin).
Lemma candidate_185: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 (@nil bool) false) cin).
Lemma candidate_193: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_194: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin true)).
Lemma candidate_184: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 false) cin).