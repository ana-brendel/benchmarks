File Information
- File name: AdderProof
- Original Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/AdderProof/AdderProof_lemma_BV_full_adder_sym_68
- LFind Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/AdderProof/_lfind_AdderProof_lemma_BV_full_adder_sym_68
- Namespace: Circuits
- Proof name: BV_full_adder_ok
- Theorem: Theorem BV_full_adder_ok: forall (v0 w0 : BV) (cin0 : bool),
@eq nat (BV_to_nat (BV_full_adder v0 w0 cin0))
  (Nat.add (Nat.add (BV_to_nat v0) (BV_to_nat w0)) (bool_to_nat cin0)).
- Declarations: 
From lfind Require Import LFind.
From CircuitsCoqGym Require Import Adder.

Proof Context
* Goal State: @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (bool_to_nat cin))

* Hypothesis:
cin : bool
v : BV
w : BV

* Types:
list bool
Set
Prop
BV
bool
nat

* Polymorphic Types:


* Variables:
cin : bool
w : BV

* Terms:
BV_full_adder (@nil bool) w cin : BV
nat : Set
bool : Set
cin : bool
BV_to_nat w : nat
BV_to_nat (@nil bool) : nat
Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w) : nat
w : BV
Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (bool_to_nat cin) : nat
@eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (bool_to_nat cin)) : Prop
@nil bool : list bool
BV : Set
bool_to_nat cin : nat
BV_to_nat (BV_full_adder (@nil bool) w cin) : nat

* Functions:
bool_to_nat  : forall _ : bool, nat
BV_full_adder  : forall (_ : BV) (_ : BV) (_ : bool), BV
Nat.add  : forall (_ : nat) (_ : nat), nat
@nil  : forall A : Type, list A
@eq  : forall (A : Type) (_ : A) (_ : A), Prop
BV_to_nat  : forall _ : BV, nat

<---GENERALIZATION--->
Time elapsed: 2 seconds
Generalized Variables:
lf3 : nat = BV_to_nat (BV_full_adder (@nil bool) w cin)
lf7 : nat = BV_to_nat w
lf1 : nat = Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (bool_to_nat cin)
lf4 : BV = BV_full_adder (@nil bool) w cin
lf5 : nat = BV_to_nat (@nil bool)
lf2 : nat = Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)
lf8 : list bool = @nil bool
lf6 : nat = bool_to_nat cin

Generalizations:
Lemma conj1: forall (lf1 : nat) (lf3 : nat), @eq nat lf3 lf1.
Lemma conj33: forall (lf6 : nat) (lf2 : nat) (lf3 : nat), @eq nat lf3 (Nat.add lf2 lf6).
Lemma conj34: forall (lf2 : nat) (cin : bool) (lf3 : nat), @eq nat lf3 (Nat.add lf2 (bool_to_nat cin)).
Lemma conj37: forall (lf6 : nat) (lf5 : nat) (lf7 : nat) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add lf5 lf7) lf6).
Lemma conj38: forall (lf5 : nat) (cin : bool) (lf7 : nat) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add lf5 lf7) (bool_to_nat cin)).
Lemma conj45: forall (lf6 : nat) (lf8 : list bool) (lf7 : nat) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add (BV_to_nat lf8) lf7) lf6).
Lemma conj46: forall (lf8 : list bool) (cin : bool) (lf7 : nat) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add (BV_to_nat lf8) lf7) (bool_to_nat cin)).
Lemma conj47: forall (lf6 : nat) (lf7 : nat) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6).
Lemma conj48: forall (cin : bool) (lf7 : nat) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) (bool_to_nat cin)).
Lemma conj101: forall (lf6 : nat) (lf5 : nat) (w : BV) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6).
Lemma conj102: forall (lf5 : nat) (cin : bool) (w : BV) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj109: forall (lf6 : nat) (lf8 : list bool) (w : BV) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) lf6).
Lemma conj110: forall (lf8 : list bool) (cin : bool) (w : BV) (lf3 : nat), @eq nat lf3
  (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj111: forall (lf6 : nat) (w : BV) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6).
Lemma conj112: forall (cin : bool) (w : BV) (lf3 : nat), @eq nat lf3
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj129: forall (lf4 : BV) (lf1 : nat), @eq nat (BV_to_nat lf4) lf1.
Lemma conj145: forall (lf8 : list bool) (cin : bool) (w : BV) (lf1 : nat), @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) lf1.
Lemma conj147: forall (cin : bool) (w : BV) (lf1 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin)) lf1.
Lemma conj161: forall (lf6 : nat) (lf2 : nat) (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add lf2 lf6).
Lemma conj162: forall (lf2 : nat) (cin : bool) (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add lf2 (bool_to_nat cin)).
Lemma conj165: forall (lf6 : nat) (lf5 : nat) (lf4 : BV) (lf7 : nat), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add lf5 lf7) lf6).
Lemma conj166: forall (lf5 : nat) (cin : bool) (lf4 : BV) (lf7 : nat), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add lf5 lf7) (bool_to_nat cin)).
Lemma conj173: forall (lf6 : nat) (lf8 : list bool) (lf4 : BV) (lf7 : nat), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add (BV_to_nat lf8) lf7) lf6).
Lemma conj174: forall (lf8 : list bool) (cin : bool) (lf4 : BV) (lf7 : nat), @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (BV_to_nat lf8) lf7) (bool_to_nat cin)).
Lemma conj175: forall (lf6 : nat) (lf4 : BV) (lf7 : nat), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6).
Lemma conj176: forall (cin : bool) (lf4 : BV) (lf7 : nat), @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) (bool_to_nat cin)).
Lemma conj177: forall (lf6 : nat) (lf8 : list bool) (lf2 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (Nat.add lf2 lf6).
Lemma conj178: forall (lf8 : list bool) (lf2 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (Nat.add lf2 (bool_to_nat cin)).
Lemma conj179: forall (lf6 : nat) (lf2 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin)) (Nat.add lf2 lf6).
Lemma conj180: forall (lf2 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add lf2 (bool_to_nat cin)).
Lemma conj181: forall (lf6 : nat) (lf8 : list bool) (lf5 : nat) (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (Nat.add (Nat.add lf5 lf7) lf6).
Lemma conj182: forall (lf8 : list bool) (lf5 : nat) (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add lf5 lf7) (bool_to_nat cin)).
Lemma conj183: forall (lf6 : nat) (lf5 : nat) (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add lf5 lf7) lf6).
Lemma conj184: forall (lf5 : nat) (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add lf5 lf7) (bool_to_nat cin)).
Lemma conj189: forall (lf6 : nat) (lf8 : list bool) (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add (BV_to_nat lf8) lf7) lf6).
Lemma conj190: forall (lf8 : list bool) (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add (BV_to_nat lf8) lf7) (bool_to_nat cin)).
Lemma conj191: forall (lf6 : nat) (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6).
Lemma conj192: forall (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) (bool_to_nat cin)).
Lemma conj229: forall (lf6 : nat) (lf5 : nat) (w : BV) (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6).
Lemma conj230: forall (lf5 : nat) (cin : bool) (w : BV) (lf4 : BV), @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj237: forall (lf6 : nat) (lf8 : list bool) (w : BV) (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) lf6).
Lemma conj238: forall (lf8 : list bool) (cin : bool) (w : BV) (lf4 : BV), @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj239: forall (lf6 : nat) (w : BV) (lf4 : BV), @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6).
Lemma conj240: forall (cin : bool) (w : BV) (lf4 : BV), @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj245: forall (lf6 : nat) (lf8 : list bool) (lf5 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6).
Lemma conj246: forall (lf8 : list bool) (lf5 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj247: forall (lf6 : nat) (lf5 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6).
Lemma conj248: forall (lf5 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj253: forall (lf6 : nat) (lf8 : list bool) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) lf6).
Lemma conj254: forall (lf8 : list bool) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj255: forall (lf6 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6).
Lemma conj256: forall (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (bool_to_nat cin)).


<---VALIDITY CHECKS--->
Time elapsed: 118 seconds
Valid:
Lemma conj256: forall (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj254: forall (lf8 : list bool) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (bool_to_nat cin)).

Invalid:
Lemma conj255: forall (lf6 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6).
Lemma conj253: forall (lf6 : nat) (lf8 : list bool) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) lf6).
Lemma conj248: forall (lf5 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj247: forall (lf6 : nat) (lf5 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6).
Lemma conj246: forall (lf8 : list bool) (lf5 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj245: forall (lf6 : nat) (lf8 : list bool) (lf5 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6).
Lemma conj240: forall (cin : bool) (w : BV) (lf4 : BV), @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj239: forall (lf6 : nat) (w : BV) (lf4 : BV), @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6).
Lemma conj238: forall (lf8 : list bool) (cin : bool) (w : BV) (lf4 : BV), @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj237: forall (lf6 : nat) (lf8 : list bool) (w : BV) (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) lf6).
Lemma conj230: forall (lf5 : nat) (cin : bool) (w : BV) (lf4 : BV), @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj229: forall (lf6 : nat) (lf5 : nat) (w : BV) (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6).
Lemma conj192: forall (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) (bool_to_nat cin)).
Lemma conj191: forall (lf6 : nat) (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6).
Lemma conj190: forall (lf8 : list bool) (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add (BV_to_nat lf8) lf7) (bool_to_nat cin)).
Lemma conj189: forall (lf6 : nat) (lf8 : list bool) (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add (BV_to_nat lf8) lf7) lf6).
Lemma conj184: forall (lf5 : nat) (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add lf5 lf7) (bool_to_nat cin)).
Lemma conj183: forall (lf6 : nat) (lf5 : nat) (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add lf5 lf7) lf6).
Lemma conj182: forall (lf8 : list bool) (lf5 : nat) (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add lf5 lf7) (bool_to_nat cin)).
Lemma conj181: forall (lf6 : nat) (lf8 : list bool) (lf5 : nat) (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (Nat.add (Nat.add lf5 lf7) lf6).
Lemma conj180: forall (lf2 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add lf2 (bool_to_nat cin)).
Lemma conj179: forall (lf6 : nat) (lf2 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin)) (Nat.add lf2 lf6).
Lemma conj178: forall (lf8 : list bool) (lf2 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (Nat.add lf2 (bool_to_nat cin)).
Lemma conj177: forall (lf6 : nat) (lf8 : list bool) (lf2 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (Nat.add lf2 lf6).
Lemma conj176: forall (cin : bool) (lf4 : BV) (lf7 : nat), @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) (bool_to_nat cin)).
Lemma conj175: forall (lf6 : nat) (lf4 : BV) (lf7 : nat), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6).
Lemma conj174: forall (lf8 : list bool) (cin : bool) (lf4 : BV) (lf7 : nat), @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (BV_to_nat lf8) lf7) (bool_to_nat cin)).
Lemma conj173: forall (lf6 : nat) (lf8 : list bool) (lf4 : BV) (lf7 : nat), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add (BV_to_nat lf8) lf7) lf6).
Lemma conj166: forall (lf5 : nat) (cin : bool) (lf4 : BV) (lf7 : nat), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add lf5 lf7) (bool_to_nat cin)).
Lemma conj165: forall (lf6 : nat) (lf5 : nat) (lf4 : BV) (lf7 : nat), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add lf5 lf7) lf6).
Lemma conj162: forall (lf2 : nat) (cin : bool) (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add lf2 (bool_to_nat cin)).
Lemma conj161: forall (lf6 : nat) (lf2 : nat) (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add lf2 lf6).
Lemma conj147: forall (cin : bool) (w : BV) (lf1 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin)) lf1.
Lemma conj145: forall (lf8 : list bool) (cin : bool) (w : BV) (lf1 : nat), @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) lf1.
Lemma conj129: forall (lf4 : BV) (lf1 : nat), @eq nat (BV_to_nat lf4) lf1.
Lemma conj112: forall (cin : bool) (w : BV) (lf3 : nat), @eq nat lf3
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj111: forall (lf6 : nat) (w : BV) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6).
Lemma conj110: forall (lf8 : list bool) (cin : bool) (w : BV) (lf3 : nat), @eq nat lf3
  (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj109: forall (lf6 : nat) (lf8 : list bool) (w : BV) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) lf6).
Lemma conj102: forall (lf5 : nat) (cin : bool) (w : BV) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj101: forall (lf6 : nat) (lf5 : nat) (w : BV) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6).
Lemma conj48: forall (cin : bool) (lf7 : nat) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) (bool_to_nat cin)).
Lemma conj47: forall (lf6 : nat) (lf7 : nat) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6).
Lemma conj46: forall (lf8 : list bool) (cin : bool) (lf7 : nat) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add (BV_to_nat lf8) lf7) (bool_to_nat cin)).
Lemma conj45: forall (lf6 : nat) (lf8 : list bool) (lf7 : nat) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add (BV_to_nat lf8) lf7) lf6).
Lemma conj38: forall (lf5 : nat) (cin : bool) (lf7 : nat) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add lf5 lf7) (bool_to_nat cin)).
Lemma conj37: forall (lf6 : nat) (lf5 : nat) (lf7 : nat) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add lf5 lf7) lf6).
Lemma conj34: forall (lf2 : nat) (cin : bool) (lf3 : nat), @eq nat lf3 (Nat.add lf2 (bool_to_nat cin)).
Lemma conj33: forall (lf6 : nat) (lf2 : nat) (lf3 : nat), @eq nat lf3 (Nat.add lf2 lf6).
Lemma conj1: forall (lf1 : nat) (lf3 : nat), @eq nat lf3 lf1.

<---ADD IMPLICATIONS--->
Time elapsed: 119 seconds
Generalizations:
Lemma conj255: forall (lf6 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6).
Lemma conj253: forall (lf6 : nat) (lf8 : list bool) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) lf6).
Lemma conj248: forall (lf5 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj247: forall (lf6 : nat) (lf5 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6).
Lemma conj246: forall (lf8 : list bool) (lf5 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj245: forall (lf6 : nat) (lf8 : list bool) (lf5 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6).
Lemma conj240: forall (cin : bool) (w : BV) (lf4 : BV), @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj239: forall (lf6 : nat) (w : BV) (lf4 : BV), @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6).
Lemma conj238: forall (lf8 : list bool) (cin : bool) (w : BV) (lf4 : BV), @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj237: forall (lf6 : nat) (lf8 : list bool) (w : BV) (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) lf6).
Lemma conj230: forall (lf5 : nat) (cin : bool) (w : BV) (lf4 : BV), @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj229: forall (lf6 : nat) (lf5 : nat) (w : BV) (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6).
Lemma conj192: forall (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) (bool_to_nat cin)).
Lemma conj191: forall (lf6 : nat) (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6).
Lemma conj190: forall (lf8 : list bool) (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add (BV_to_nat lf8) lf7) (bool_to_nat cin)).
Lemma conj189: forall (lf6 : nat) (lf8 : list bool) (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add (BV_to_nat lf8) lf7) lf6).
Lemma conj184: forall (lf5 : nat) (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add lf5 lf7) (bool_to_nat cin)).
Lemma conj183: forall (lf6 : nat) (lf5 : nat) (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add lf5 lf7) lf6).
Lemma conj182: forall (lf8 : list bool) (lf5 : nat) (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add lf5 lf7) (bool_to_nat cin)).
Lemma conj181: forall (lf6 : nat) (lf8 : list bool) (lf5 : nat) (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (Nat.add (Nat.add lf5 lf7) lf6).
Lemma conj180: forall (lf2 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add lf2 (bool_to_nat cin)).
Lemma conj179: forall (lf6 : nat) (lf2 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin)) (Nat.add lf2 lf6).
Lemma conj178: forall (lf8 : list bool) (lf2 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (Nat.add lf2 (bool_to_nat cin)).
Lemma conj177: forall (lf6 : nat) (lf8 : list bool) (lf2 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (Nat.add lf2 lf6).
Lemma conj176: forall (cin : bool) (lf4 : BV) (lf7 : nat), @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) (bool_to_nat cin)).
Lemma conj175: forall (lf6 : nat) (lf4 : BV) (lf7 : nat), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6).
Lemma conj174: forall (lf8 : list bool) (cin : bool) (lf4 : BV) (lf7 : nat), @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (BV_to_nat lf8) lf7) (bool_to_nat cin)).
Lemma conj173: forall (lf6 : nat) (lf8 : list bool) (lf4 : BV) (lf7 : nat), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add (BV_to_nat lf8) lf7) lf6).
Lemma conj166: forall (lf5 : nat) (cin : bool) (lf4 : BV) (lf7 : nat), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add lf5 lf7) (bool_to_nat cin)).
Lemma conj165: forall (lf6 : nat) (lf5 : nat) (lf4 : BV) (lf7 : nat), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add lf5 lf7) lf6).
Lemma conj162: forall (lf2 : nat) (cin : bool) (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add lf2 (bool_to_nat cin)).
Lemma conj161: forall (lf6 : nat) (lf2 : nat) (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add lf2 lf6).
Lemma conj147: forall (cin : bool) (w : BV) (lf1 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin)) lf1.
Lemma conj145: forall (lf8 : list bool) (cin : bool) (w : BV) (lf1 : nat), @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) lf1.
Lemma conj129: forall (lf4 : BV) (lf1 : nat), @eq nat (BV_to_nat lf4) lf1.
Lemma conj112: forall (cin : bool) (w : BV) (lf3 : nat), @eq nat lf3
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj111: forall (lf6 : nat) (w : BV) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6).
Lemma conj110: forall (lf8 : list bool) (cin : bool) (w : BV) (lf3 : nat), @eq nat lf3
  (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj109: forall (lf6 : nat) (lf8 : list bool) (w : BV) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) lf6).
Lemma conj102: forall (lf5 : nat) (cin : bool) (w : BV) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj101: forall (lf6 : nat) (lf5 : nat) (w : BV) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6).
Lemma conj48: forall (cin : bool) (lf7 : nat) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) (bool_to_nat cin)).
Lemma conj47: forall (lf6 : nat) (lf7 : nat) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6).
Lemma conj46: forall (lf8 : list bool) (cin : bool) (lf7 : nat) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add (BV_to_nat lf8) lf7) (bool_to_nat cin)).
Lemma conj45: forall (lf6 : nat) (lf8 : list bool) (lf7 : nat) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add (BV_to_nat lf8) lf7) lf6).
Lemma conj38: forall (lf5 : nat) (cin : bool) (lf7 : nat) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add lf5 lf7) (bool_to_nat cin)).
Lemma conj37: forall (lf6 : nat) (lf5 : nat) (lf7 : nat) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add lf5 lf7) lf6).
Lemma conj34: forall (lf2 : nat) (cin : bool) (lf3 : nat), @eq nat lf3 (Nat.add lf2 (bool_to_nat cin)).
Lemma conj33: forall (lf6 : nat) (lf2 : nat) (lf3 : nat), @eq nat lf3 (Nat.add lf2 lf6).
Lemma conj1: forall (lf1 : nat) (lf3 : nat), @eq nat lf3 lf1.


<---VALIDITY CHECKS--->
Time elapsed: 196 seconds
Valid:

Invalid:
Lemma conj1: forall (lf1 : nat) (lf3 : nat), @eq nat lf3 lf1.
Lemma conj33: forall (lf6 : nat) (lf2 : nat) (lf3 : nat), @eq nat lf3 (Nat.add lf2 lf6).
Lemma conj34: forall (lf2 : nat) (cin : bool) (lf3 : nat), @eq nat lf3 (Nat.add lf2 (bool_to_nat cin)).
Lemma conj37: forall (lf6 : nat) (lf5 : nat) (lf7 : nat) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add lf5 lf7) lf6).
Lemma conj38: forall (lf5 : nat) (cin : bool) (lf7 : nat) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add lf5 lf7) (bool_to_nat cin)).
Lemma conj45: forall (lf6 : nat) (lf8 : list bool) (lf7 : nat) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add (BV_to_nat lf8) lf7) lf6).
Lemma conj46: forall (lf8 : list bool) (cin : bool) (lf7 : nat) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add (BV_to_nat lf8) lf7) (bool_to_nat cin)).
Lemma conj47: forall (lf6 : nat) (lf7 : nat) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6).
Lemma conj48: forall (cin : bool) (lf7 : nat) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) (bool_to_nat cin)).
Lemma conj101: forall (lf6 : nat) (lf5 : nat) (w : BV) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6).
Lemma conj102: forall (lf5 : nat) (cin : bool) (w : BV) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj109: forall (lf6 : nat) (lf8 : list bool) (w : BV) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) lf6).
Lemma conj110: forall (lf8 : list bool) (cin : bool) (w : BV) (lf3 : nat), @eq nat lf3
  (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj111: forall (lf6 : nat) (w : BV) (lf3 : nat), @eq nat lf3 (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6).
Lemma conj112: forall (cin : bool) (w : BV) (lf3 : nat), @eq nat lf3
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj129: forall (lf4 : BV) (lf1 : nat), @eq nat (BV_to_nat lf4) lf1.
Lemma conj145: forall (lf8 : list bool) (cin : bool) (w : BV) (lf1 : nat), @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) lf1.
Lemma conj147: forall (cin : bool) (w : BV) (lf1 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin)) lf1.
Lemma conj161: forall (lf6 : nat) (lf2 : nat) (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add lf2 lf6).
Lemma conj162: forall (lf2 : nat) (cin : bool) (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add lf2 (bool_to_nat cin)).
Lemma conj165: forall (lf6 : nat) (lf5 : nat) (lf4 : BV) (lf7 : nat), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add lf5 lf7) lf6).
Lemma conj166: forall (lf5 : nat) (cin : bool) (lf4 : BV) (lf7 : nat), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add lf5 lf7) (bool_to_nat cin)).
Lemma conj173: forall (lf6 : nat) (lf8 : list bool) (lf4 : BV) (lf7 : nat), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add (BV_to_nat lf8) lf7) lf6).
Lemma conj174: forall (lf8 : list bool) (cin : bool) (lf4 : BV) (lf7 : nat), @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (BV_to_nat lf8) lf7) (bool_to_nat cin)).
Lemma conj175: forall (lf6 : nat) (lf4 : BV) (lf7 : nat), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6).
Lemma conj176: forall (cin : bool) (lf4 : BV) (lf7 : nat), @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) (bool_to_nat cin)).
Lemma conj177: forall (lf6 : nat) (lf8 : list bool) (lf2 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (Nat.add lf2 lf6).
Lemma conj178: forall (lf8 : list bool) (lf2 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (Nat.add lf2 (bool_to_nat cin)).
Lemma conj179: forall (lf6 : nat) (lf2 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin)) (Nat.add lf2 lf6).
Lemma conj180: forall (lf2 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add lf2 (bool_to_nat cin)).
Lemma conj181: forall (lf6 : nat) (lf8 : list bool) (lf5 : nat) (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (Nat.add (Nat.add lf5 lf7) lf6).
Lemma conj182: forall (lf8 : list bool) (lf5 : nat) (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add lf5 lf7) (bool_to_nat cin)).
Lemma conj183: forall (lf6 : nat) (lf5 : nat) (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add lf5 lf7) lf6).
Lemma conj184: forall (lf5 : nat) (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add lf5 lf7) (bool_to_nat cin)).
Lemma conj189: forall (lf6 : nat) (lf8 : list bool) (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add (BV_to_nat lf8) lf7) lf6).
Lemma conj190: forall (lf8 : list bool) (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add (BV_to_nat lf8) lf7) (bool_to_nat cin)).
Lemma conj191: forall (lf6 : nat) (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6).
Lemma conj192: forall (cin : bool) (w : BV) (lf7 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) (bool_to_nat cin)).
Lemma conj229: forall (lf6 : nat) (lf5 : nat) (w : BV) (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6).
Lemma conj230: forall (lf5 : nat) (cin : bool) (w : BV) (lf4 : BV), @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj237: forall (lf6 : nat) (lf8 : list bool) (w : BV) (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) lf6).
Lemma conj238: forall (lf8 : list bool) (cin : bool) (w : BV) (lf4 : BV), @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj239: forall (lf6 : nat) (w : BV) (lf4 : BV), @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6).
Lemma conj240: forall (cin : bool) (w : BV) (lf4 : BV), @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj245: forall (lf6 : nat) (lf8 : list bool) (lf5 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6).
Lemma conj246: forall (lf8 : list bool) (lf5 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj247: forall (lf6 : nat) (lf5 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6).
Lemma conj248: forall (lf5 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)).
Lemma conj253: forall (lf6 : nat) (lf8 : list bool) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) lf6).
Lemma conj255: forall (lf6 : nat) (cin : bool) (w : BV), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6).


<---CREATE SKETCHES--->
Time elapsed: 197 seconds
Sketches:
Sketch conj33_sketch0 : @eq nat lf3 (##hole##)
Sketch conj33_term_sketch0 : @eq nat (Nat.add lf2 lf6) (##hole##)
Sketch conj34_sketch0 : @eq nat lf3 (##hole##)
Sketch conj34_sketch1 : @eq nat lf3 (Nat.add lf2 (##hole##))
Sketch conj34_term_sketch0 : @eq nat (Nat.add lf2 (bool_to_nat cin)) (##hole##)
Sketch conj34_term_sketch1 : @eq nat (bool_to_nat cin) (##hole##)
Sketch conj37_sketch0 : @eq nat lf3 (Nat.add (##hole##) lf6)
Sketch conj37_sketch1 : @eq nat lf3 (##hole##)
Sketch conj37_term_sketch0 : @eq nat (Nat.add lf5 lf7) (##hole##)
Sketch conj37_term_sketch1 : @eq nat (Nat.add (Nat.add lf5 lf7) lf6) (##hole##)
Sketch conj38_sketch0 : @eq nat lf3 (Nat.add (##hole##) (bool_to_nat cin))
Sketch conj38_sketch1 : @eq nat lf3 (##hole##)
Sketch conj38_sketch2 : @eq nat lf3 (Nat.add (Nat.add lf5 lf7) (##hole##))
Sketch conj38_term_sketch0 : @eq nat (Nat.add lf5 lf7) (##hole##)
Sketch conj38_term_sketch1 : @eq nat (Nat.add (Nat.add lf5 lf7) (bool_to_nat cin)) (##hole##)
Sketch conj38_term_sketch2 : @eq nat (bool_to_nat cin) (##hole##)
Sketch conj45_sketch0 : @eq nat lf3 (Nat.add (##hole##) lf6)
Sketch conj45_sketch1 : @eq nat lf3 (##hole##)
Sketch conj45_sketch2 : @eq nat lf3 (Nat.add (Nat.add (##hole##) lf7) lf6)
Sketch conj45_term_sketch0 : @eq nat (Nat.add (BV_to_nat lf8) lf7) (##hole##)
Sketch conj45_term_sketch1 : @eq nat (Nat.add (Nat.add (BV_to_nat lf8) lf7) lf6) (##hole##)
Sketch conj45_term_sketch2 : @eq nat (BV_to_nat lf8) (##hole##)
Sketch conj46_sketch0 : @eq nat lf3 (Nat.add (##hole##) (bool_to_nat cin))
Sketch conj46_sketch1 : @eq nat lf3 (##hole##)
Sketch conj46_sketch2 : @eq nat lf3 (Nat.add (Nat.add (##hole##) lf7) (bool_to_nat cin))
Sketch conj46_sketch3 : @eq nat lf3 (Nat.add (Nat.add (BV_to_nat lf8) lf7) (##hole##))
Sketch conj46_term_sketch0 : @eq nat (Nat.add (BV_to_nat lf8) lf7) (##hole##)
Sketch conj46_term_sketch1 : @eq nat (Nat.add (Nat.add (BV_to_nat lf8) lf7) (bool_to_nat cin)) (##hole##)
Sketch conj46_term_sketch2 : @eq nat (BV_to_nat lf8) (##hole##)
Sketch conj46_term_sketch3 : @eq nat (bool_to_nat cin) (##hole##)
Sketch conj47_sketch0 : @eq nat lf3 (##hole##)
Sketch conj47_sketch1 : @eq nat lf3 (Nat.add (Nat.add (##hole##) lf7) lf6)
Sketch conj47_sketch2 : @eq nat lf3 (Nat.add (##hole##) lf6)
Sketch conj47_sketch3 : @eq nat lf3 (Nat.add (Nat.add (BV_to_nat (##hole##)) lf7) lf6)
Sketch conj47_term_sketch0 : @eq nat (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6) (##hole##)
Sketch conj47_term_sketch1 : @eq nat (BV_to_nat (@nil bool)) (##hole##)
Sketch conj47_term_sketch2 : @eq nat (Nat.add (BV_to_nat (@nil bool)) lf7) (##hole##)
Sketch conj47_term_sketch3 : @eq (list bool) (@nil bool) (##hole##)
Sketch conj48_sketch0 : @eq nat lf3 (Nat.add (Nat.add (##hole##) lf7) (bool_to_nat cin))
Sketch conj48_sketch1 : @eq nat lf3 (Nat.add (##hole##) (bool_to_nat cin))
Sketch conj48_sketch2 : @eq nat lf3 (Nat.add (Nat.add (BV_to_nat (##hole##)) lf7) (bool_to_nat cin))
Sketch conj48_sketch3 : @eq nat lf3 (##hole##)
Sketch conj48_sketch4 : @eq nat lf3 (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) (##hole##))
Sketch conj48_term_sketch0 : @eq nat (BV_to_nat (@nil bool)) (##hole##)
Sketch conj48_term_sketch1 : @eq nat (Nat.add (BV_to_nat (@nil bool)) lf7) (##hole##)
Sketch conj48_term_sketch2 : @eq (list bool) (@nil bool) (##hole##)
Sketch conj48_term_sketch3 : @eq nat (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) (bool_to_nat cin))
  (##hole##)
Sketch conj48_term_sketch4 : @eq nat (bool_to_nat cin) (##hole##)
Sketch conj101_sketch0 : @eq nat lf3 (Nat.add (Nat.add lf5 (##hole##)) lf6)
Sketch conj101_sketch1 : @eq nat lf3 (##hole##)
Sketch conj101_sketch2 : @eq nat lf3 (Nat.add (##hole##) lf6)
Sketch conj101_term_sketch0 : @eq nat (BV_to_nat w) (##hole##)
Sketch conj101_term_sketch1 : @eq nat (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6) (##hole##)
Sketch conj101_term_sketch2 : @eq nat (Nat.add lf5 (BV_to_nat w)) (##hole##)
Sketch conj102_sketch0 : @eq nat lf3 (Nat.add (Nat.add lf5 (##hole##)) (bool_to_nat cin))
Sketch conj102_sketch1 : @eq nat lf3 (Nat.add (##hole##) (bool_to_nat cin))
Sketch conj102_sketch2 : @eq nat lf3 (Nat.add (Nat.add lf5 (BV_to_nat w)) (##hole##))
Sketch conj102_sketch3 : @eq nat lf3 (##hole##)
Sketch conj102_term_sketch0 : @eq nat (BV_to_nat w) (##hole##)
Sketch conj102_term_sketch1 : @eq nat (Nat.add lf5 (BV_to_nat w)) (##hole##)
Sketch conj102_term_sketch2 : @eq nat (bool_to_nat cin) (##hole##)
Sketch conj102_term_sketch3 : @eq nat (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)) (##hole##)
Sketch conj109_sketch0 : @eq nat lf3 (Nat.add (##hole##) lf6)
Sketch conj109_sketch1 : @eq nat lf3 (Nat.add (Nat.add (BV_to_nat lf8) (##hole##)) lf6)
Sketch conj109_sketch2 : @eq nat lf3 (Nat.add (Nat.add (##hole##) (BV_to_nat w)) lf6)
Sketch conj109_sketch3 : @eq nat lf3 (##hole##)
Sketch conj109_term_sketch0 : @eq nat (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (##hole##)
Sketch conj109_term_sketch1 : @eq nat (BV_to_nat w) (##hole##)
Sketch conj109_term_sketch2 : @eq nat (BV_to_nat lf8) (##hole##)
Sketch conj109_term_sketch3 : @eq nat (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) lf6) (##hole##)
Sketch conj110_sketch0 : @eq nat lf3 (Nat.add (##hole##) (bool_to_nat cin))
Sketch conj110_sketch1 : @eq nat lf3 (Nat.add (Nat.add (BV_to_nat lf8) (##hole##)) (bool_to_nat cin))
Sketch conj110_sketch2 : @eq nat lf3 (Nat.add (Nat.add (##hole##) (BV_to_nat w)) (bool_to_nat cin))
Sketch conj110_sketch3 : @eq nat lf3 (##hole##)
Sketch conj110_sketch4 : @eq nat lf3 (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (##hole##))
Sketch conj110_term_sketch0 : @eq nat (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (##hole##)
Sketch conj110_term_sketch1 : @eq nat (BV_to_nat w) (##hole##)
Sketch conj110_term_sketch2 : @eq nat (BV_to_nat lf8) (##hole##)
Sketch conj110_term_sketch3 : @eq nat (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (bool_to_nat cin))
  (##hole##)
Sketch conj110_term_sketch4 : @eq nat (bool_to_nat cin) (##hole##)
Sketch conj111_sketch0 : @eq nat lf3 (Nat.add (Nat.add (BV_to_nat (@nil bool)) (##hole##)) lf6)
Sketch conj111_sketch1 : @eq nat lf3 (Nat.add (Nat.add (##hole##) (BV_to_nat w)) lf6)
Sketch conj111_sketch2 : @eq nat lf3 (Nat.add (##hole##) lf6)
Sketch conj111_sketch3 : @eq nat lf3 (##hole##)
Sketch conj111_sketch4 : @eq nat lf3 (Nat.add (Nat.add (BV_to_nat (##hole##)) (BV_to_nat w)) lf6)
Sketch conj111_term_sketch0 : @eq nat (BV_to_nat w) (##hole##)
Sketch conj111_term_sketch1 : @eq nat (BV_to_nat (@nil bool)) (##hole##)
Sketch conj111_term_sketch2 : @eq nat (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (##hole##)
Sketch conj111_term_sketch3 : @eq nat (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6)
  (##hole##)
Sketch conj111_term_sketch4 : @eq (list bool) (@nil bool) (##hole##)
Sketch conj112_sketch0 : @eq nat lf3
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (##hole##)) (bool_to_nat cin))
Sketch conj112_sketch1 : @eq nat lf3 (Nat.add (Nat.add (##hole##) (BV_to_nat w)) (bool_to_nat cin))
Sketch conj112_sketch2 : @eq nat lf3 (Nat.add (##hole##) (bool_to_nat cin))
Sketch conj112_sketch3 : @eq nat lf3 (##hole##)
Sketch conj112_sketch4 : @eq nat lf3
  (Nat.add (Nat.add (BV_to_nat (##hole##)) (BV_to_nat w)) (bool_to_nat cin))
Sketch conj112_sketch5 : @eq nat lf3
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (##hole##))
Sketch conj112_term_sketch0 : @eq nat (BV_to_nat w) (##hole##)
Sketch conj112_term_sketch1 : @eq nat (BV_to_nat (@nil bool)) (##hole##)
Sketch conj112_term_sketch2 : @eq nat (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (##hole##)
Sketch conj112_term_sketch3 : @eq nat
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (bool_to_nat cin))
  (##hole##)
Sketch conj112_term_sketch4 : @eq (list bool) (@nil bool) (##hole##)
Sketch conj112_term_sketch5 : @eq nat (bool_to_nat cin) (##hole##)
Sketch conj129_sketch0 : @eq nat (##hole##) lf1
Sketch conj129_term_sketch0 : @eq nat (BV_to_nat lf4) (##hole##)
Sketch conj145_sketch0 : @eq nat (BV_to_nat (##hole##)) lf1
Sketch conj145_sketch1 : @eq nat (##hole##) lf1
Sketch conj145_term_sketch0 : @eq BV (BV_full_adder lf8 w cin) (##hole##)
Sketch conj145_term_sketch1 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (##hole##)
Sketch conj147_sketch0 : @eq nat (BV_to_nat (##hole##)) lf1
Sketch conj147_sketch1 : @eq nat (BV_to_nat (BV_full_adder (##hole##) w cin)) lf1
Sketch conj147_sketch2 : @eq nat (##hole##) lf1
Sketch conj147_term_sketch0 : @eq BV (BV_full_adder (@nil bool) w cin) (##hole##)
Sketch conj147_term_sketch1 : @eq (list bool) (@nil bool) (##hole##)
Sketch conj147_term_sketch2 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin)) (##hole##)
Sketch conj161_sketch0 : @eq nat (##hole##) (Nat.add lf2 lf6)
Sketch conj161_sketch1 : @eq nat (BV_to_nat lf4) (##hole##)
Sketch conj161_term_sketch0 : @eq nat (BV_to_nat lf4) (##hole##)
Sketch conj161_term_sketch1 : @eq nat (Nat.add lf2 lf6) (##hole##)
Sketch conj162_sketch0 : @eq nat (BV_to_nat lf4) (##hole##)
Sketch conj162_sketch1 : @eq nat (##hole##) (Nat.add lf2 (bool_to_nat cin))
Sketch conj162_sketch2 : @eq nat (BV_to_nat lf4) (Nat.add lf2 (##hole##))
Sketch conj162_term_sketch0 : @eq nat (Nat.add lf2 (bool_to_nat cin)) (##hole##)
Sketch conj162_term_sketch1 : @eq nat (BV_to_nat lf4) (##hole##)
Sketch conj162_term_sketch2 : @eq nat (bool_to_nat cin) (##hole##)
Sketch conj165_sketch0 : @eq nat (BV_to_nat lf4) (Nat.add (##hole##) lf6)
Sketch conj165_sketch1 : @eq nat (BV_to_nat lf4) (##hole##)
Sketch conj165_sketch2 : @eq nat (##hole##) (Nat.add (Nat.add lf5 lf7) lf6)
Sketch conj165_term_sketch0 : @eq nat (Nat.add lf5 lf7) (##hole##)
Sketch conj165_term_sketch1 : @eq nat (Nat.add (Nat.add lf5 lf7) lf6) (##hole##)
Sketch conj165_term_sketch2 : @eq nat (BV_to_nat lf4) (##hole##)
Sketch conj166_sketch0 : @eq nat (BV_to_nat lf4) (Nat.add (##hole##) (bool_to_nat cin))
Sketch conj166_sketch1 : @eq nat (##hole##) (Nat.add (Nat.add lf5 lf7) (bool_to_nat cin))
Sketch conj166_sketch2 : @eq nat (BV_to_nat lf4) (##hole##)
Sketch conj166_sketch3 : @eq nat (BV_to_nat lf4) (Nat.add (Nat.add lf5 lf7) (##hole##))
Sketch conj166_term_sketch0 : @eq nat (Nat.add lf5 lf7) (##hole##)
Sketch conj166_term_sketch1 : @eq nat (BV_to_nat lf4) (##hole##)
Sketch conj166_term_sketch2 : @eq nat (Nat.add (Nat.add lf5 lf7) (bool_to_nat cin)) (##hole##)
Sketch conj166_term_sketch3 : @eq nat (bool_to_nat cin) (##hole##)
Sketch conj173_sketch0 : @eq nat (BV_to_nat lf4) (Nat.add (##hole##) lf6)
Sketch conj173_sketch1 : @eq nat (##hole##) (Nat.add (Nat.add (BV_to_nat lf8) lf7) lf6)
Sketch conj173_sketch2 : @eq nat (BV_to_nat lf4) (##hole##)
Sketch conj173_sketch3 : @eq nat (BV_to_nat lf4) (Nat.add (Nat.add (##hole##) lf7) lf6)
Sketch conj173_term_sketch0 : @eq nat (Nat.add (BV_to_nat lf8) lf7) (##hole##)
Sketch conj173_term_sketch1 : @eq nat (BV_to_nat lf4) (##hole##)
Sketch conj173_term_sketch2 : @eq nat (Nat.add (Nat.add (BV_to_nat lf8) lf7) lf6) (##hole##)
Sketch conj173_term_sketch3 : @eq nat (BV_to_nat lf8) (##hole##)
Sketch conj174_sketch0 : @eq nat (BV_to_nat lf4) (Nat.add (##hole##) (bool_to_nat cin))
Sketch conj174_sketch1 : @eq nat (BV_to_nat lf4) (##hole##)
Sketch conj174_sketch2 : @eq nat (##hole##) (Nat.add (Nat.add (BV_to_nat lf8) lf7) (bool_to_nat cin))
Sketch conj174_sketch3 : @eq nat (BV_to_nat lf4) (Nat.add (Nat.add (##hole##) lf7) (bool_to_nat cin))
Sketch conj174_sketch4 : @eq nat (BV_to_nat lf4) (Nat.add (Nat.add (BV_to_nat lf8) lf7) (##hole##))
Sketch conj174_term_sketch0 : @eq nat (Nat.add (BV_to_nat lf8) lf7) (##hole##)
Sketch conj174_term_sketch1 : @eq nat (Nat.add (Nat.add (BV_to_nat lf8) lf7) (bool_to_nat cin)) (##hole##)
Sketch conj174_term_sketch2 : @eq nat (BV_to_nat lf4) (##hole##)
Sketch conj174_term_sketch3 : @eq nat (BV_to_nat lf8) (##hole##)
Sketch conj174_term_sketch4 : @eq nat (bool_to_nat cin) (##hole##)
Sketch conj175_sketch0 : @eq nat (BV_to_nat lf4) (##hole##)
Sketch conj175_sketch1 : @eq nat (##hole##) (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6)
Sketch conj175_sketch2 : @eq nat (BV_to_nat lf4) (Nat.add (Nat.add (##hole##) lf7) lf6)
Sketch conj175_sketch3 : @eq nat (BV_to_nat lf4) (Nat.add (##hole##) lf6)
Sketch conj175_sketch4 : @eq nat (BV_to_nat lf4) (Nat.add (Nat.add (BV_to_nat (##hole##)) lf7) lf6)
Sketch conj175_term_sketch0 : @eq nat (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6) (##hole##)
Sketch conj175_term_sketch1 : @eq nat (BV_to_nat lf4) (##hole##)
Sketch conj175_term_sketch2 : @eq nat (BV_to_nat (@nil bool)) (##hole##)
Sketch conj175_term_sketch3 : @eq nat (Nat.add (BV_to_nat (@nil bool)) lf7) (##hole##)
Sketch conj175_term_sketch4 : @eq (list bool) (@nil bool) (##hole##)
Sketch conj176_sketch0 : @eq nat (##hole##)
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) (bool_to_nat cin))
Sketch conj176_sketch1 : @eq nat (BV_to_nat lf4) (Nat.add (Nat.add (##hole##) lf7) (bool_to_nat cin))
Sketch conj176_sketch2 : @eq nat (BV_to_nat lf4) (Nat.add (##hole##) (bool_to_nat cin))
Sketch conj176_sketch3 : @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (BV_to_nat (##hole##)) lf7) (bool_to_nat cin))
Sketch conj176_sketch4 : @eq nat (BV_to_nat lf4) (##hole##)
Sketch conj176_sketch5 : @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) (##hole##))
Sketch conj176_term_sketch0 : @eq nat (BV_to_nat lf4) (##hole##)
Sketch conj176_term_sketch1 : @eq nat (BV_to_nat (@nil bool)) (##hole##)
Sketch conj176_term_sketch2 : @eq nat (Nat.add (BV_to_nat (@nil bool)) lf7) (##hole##)
Sketch conj176_term_sketch3 : @eq (list bool) (@nil bool) (##hole##)
Sketch conj176_term_sketch4 : @eq nat (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) (bool_to_nat cin))
  (##hole##)
Sketch conj176_term_sketch5 : @eq nat (bool_to_nat cin) (##hole##)
Sketch conj177_sketch0 : @eq nat (BV_to_nat (##hole##)) (Nat.add lf2 lf6)
Sketch conj177_sketch1 : @eq nat (##hole##) (Nat.add lf2 lf6)
Sketch conj177_sketch2 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (##hole##)
Sketch conj177_term_sketch0 : @eq BV (BV_full_adder lf8 w cin) (##hole##)
Sketch conj177_term_sketch1 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (##hole##)
Sketch conj177_term_sketch2 : @eq nat (Nat.add lf2 lf6) (##hole##)
Sketch conj178_sketch0 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (##hole##)
Sketch conj178_sketch1 : @eq nat (BV_to_nat (##hole##)) (Nat.add lf2 (bool_to_nat cin))
Sketch conj178_sketch2 : @eq nat (##hole##) (Nat.add lf2 (bool_to_nat cin))
Sketch conj178_sketch3 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (Nat.add lf2 (##hole##))
Sketch conj178_term_sketch0 : @eq nat (Nat.add lf2 (bool_to_nat cin)) (##hole##)
Sketch conj178_term_sketch1 : @eq BV (BV_full_adder lf8 w cin) (##hole##)
Sketch conj178_term_sketch2 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (##hole##)
Sketch conj178_term_sketch3 : @eq nat (bool_to_nat cin) (##hole##)
Sketch conj179_sketch0 : @eq nat (BV_to_nat (##hole##)) (Nat.add lf2 lf6)
Sketch conj179_sketch1 : @eq nat (BV_to_nat (BV_full_adder (##hole##) w cin)) (Nat.add lf2 lf6)
Sketch conj179_sketch2 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin)) (##hole##)
Sketch conj179_sketch3 : @eq nat (##hole##) (Nat.add lf2 lf6)
Sketch conj179_term_sketch0 : @eq BV (BV_full_adder (@nil bool) w cin) (##hole##)
Sketch conj179_term_sketch1 : @eq (list bool) (@nil bool) (##hole##)
Sketch conj179_term_sketch2 : @eq nat (Nat.add lf2 lf6) (##hole##)
Sketch conj179_term_sketch3 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin)) (##hole##)
Sketch conj180_sketch0 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin)) (##hole##)
Sketch conj180_sketch1 : @eq nat (BV_to_nat (##hole##)) (Nat.add lf2 (bool_to_nat cin))
Sketch conj180_sketch2 : @eq nat (BV_to_nat (BV_full_adder (##hole##) w cin))
  (Nat.add lf2 (bool_to_nat cin))
Sketch conj180_sketch3 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add lf2 (##hole##))
Sketch conj180_sketch4 : @eq nat (##hole##) (Nat.add lf2 (bool_to_nat cin))
Sketch conj180_term_sketch0 : @eq nat (Nat.add lf2 (bool_to_nat cin)) (##hole##)
Sketch conj180_term_sketch1 : @eq BV (BV_full_adder (@nil bool) w cin) (##hole##)
Sketch conj180_term_sketch2 : @eq (list bool) (@nil bool) (##hole##)
Sketch conj180_term_sketch3 : @eq nat (bool_to_nat cin) (##hole##)
Sketch conj180_term_sketch4 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin)) (##hole##)
Sketch conj181_sketch0 : @eq nat (BV_to_nat (##hole##)) (Nat.add (Nat.add lf5 lf7) lf6)
Sketch conj181_sketch1 : @eq nat (##hole##) (Nat.add (Nat.add lf5 lf7) lf6)
Sketch conj181_sketch2 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (Nat.add (##hole##) lf6)
Sketch conj181_sketch3 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (##hole##)
Sketch conj181_term_sketch0 : @eq BV (BV_full_adder lf8 w cin) (##hole##)
Sketch conj181_term_sketch1 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (##hole##)
Sketch conj181_term_sketch2 : @eq nat (Nat.add lf5 lf7) (##hole##)
Sketch conj181_term_sketch3 : @eq nat (Nat.add (Nat.add lf5 lf7) lf6) (##hole##)
Sketch conj182_sketch0 : @eq nat (BV_to_nat (##hole##)) (Nat.add (Nat.add lf5 lf7) (bool_to_nat cin))
Sketch conj182_sketch1 : @eq nat (##hole##) (Nat.add (Nat.add lf5 lf7) (bool_to_nat cin))
Sketch conj182_sketch2 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (##hole##) (bool_to_nat cin))
Sketch conj182_sketch3 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (##hole##)
Sketch conj182_sketch4 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add lf5 lf7) (##hole##))
Sketch conj182_term_sketch0 : @eq BV (BV_full_adder lf8 w cin) (##hole##)
Sketch conj182_term_sketch1 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (##hole##)
Sketch conj182_term_sketch2 : @eq nat (Nat.add lf5 lf7) (##hole##)
Sketch conj182_term_sketch3 : @eq nat (Nat.add (Nat.add lf5 lf7) (bool_to_nat cin)) (##hole##)
Sketch conj182_term_sketch4 : @eq nat (bool_to_nat cin) (##hole##)
Sketch conj183_sketch0 : @eq nat (BV_to_nat (##hole##)) (Nat.add (Nat.add lf5 lf7) lf6)
Sketch conj183_sketch1 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (##hole##) lf6)
Sketch conj183_sketch2 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin)) (##hole##)
Sketch conj183_sketch3 : @eq nat (BV_to_nat (BV_full_adder (##hole##) w cin))
  (Nat.add (Nat.add lf5 lf7) lf6)
Sketch conj183_sketch4 : @eq nat (##hole##) (Nat.add (Nat.add lf5 lf7) lf6)
Sketch conj183_term_sketch0 : @eq BV (BV_full_adder (@nil bool) w cin) (##hole##)
Sketch conj183_term_sketch1 : @eq nat (Nat.add lf5 lf7) (##hole##)
Sketch conj183_term_sketch2 : @eq nat (Nat.add (Nat.add lf5 lf7) lf6) (##hole##)
Sketch conj183_term_sketch3 : @eq (list bool) (@nil bool) (##hole##)
Sketch conj183_term_sketch4 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin)) (##hole##)
Sketch conj184_sketch0 : @eq nat (BV_to_nat (##hole##)) (Nat.add (Nat.add lf5 lf7) (bool_to_nat cin))
Sketch conj184_sketch1 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (##hole##) (bool_to_nat cin))
Sketch conj184_sketch2 : @eq nat (BV_to_nat (BV_full_adder (##hole##) w cin))
  (Nat.add (Nat.add lf5 lf7) (bool_to_nat cin))
Sketch conj184_sketch3 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin)) (##hole##)
Sketch conj184_sketch4 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add lf5 lf7) (##hole##))
Sketch conj184_sketch5 : @eq nat (##hole##) (Nat.add (Nat.add lf5 lf7) (bool_to_nat cin))
Sketch conj184_term_sketch0 : @eq BV (BV_full_adder (@nil bool) w cin) (##hole##)
Sketch conj184_term_sketch1 : @eq nat (Nat.add lf5 lf7) (##hole##)
Sketch conj184_term_sketch2 : @eq (list bool) (@nil bool) (##hole##)
Sketch conj184_term_sketch3 : @eq nat (Nat.add (Nat.add lf5 lf7) (bool_to_nat cin)) (##hole##)
Sketch conj184_term_sketch4 : @eq nat (bool_to_nat cin) (##hole##)
Sketch conj184_term_sketch5 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin)) (##hole##)
Sketch conj189_sketch0 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (Nat.add (##hole##) lf6)
Sketch conj189_sketch1 : @eq nat (BV_to_nat (##hole##)) (Nat.add (Nat.add (BV_to_nat lf8) lf7) lf6)
Sketch conj189_sketch2 : @eq nat (##hole##) (Nat.add (Nat.add (BV_to_nat lf8) lf7) lf6)
Sketch conj189_sketch3 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (##hole##)
Sketch conj189_sketch4 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add (##hole##) lf7) lf6)
Sketch conj189_term_sketch0 : @eq nat (Nat.add (BV_to_nat lf8) lf7) (##hole##)
Sketch conj189_term_sketch1 : @eq BV (BV_full_adder lf8 w cin) (##hole##)
Sketch conj189_term_sketch2 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (##hole##)
Sketch conj189_term_sketch3 : @eq nat (Nat.add (Nat.add (BV_to_nat lf8) lf7) lf6) (##hole##)
Sketch conj189_term_sketch4 : @eq nat (BV_to_nat lf8) (##hole##)
Sketch conj190_sketch0 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (##hole##) (bool_to_nat cin))
Sketch conj190_sketch1 : @eq nat (BV_to_nat (##hole##))
  (Nat.add (Nat.add (BV_to_nat lf8) lf7) (bool_to_nat cin))
Sketch conj190_sketch2 : @eq nat (##hole##) (Nat.add (Nat.add (BV_to_nat lf8) lf7) (bool_to_nat cin))
Sketch conj190_sketch3 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (##hole##)
Sketch conj190_sketch4 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add (##hole##) lf7) (bool_to_nat cin))
Sketch conj190_sketch5 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add (BV_to_nat lf8) lf7) (##hole##))
Sketch conj190_term_sketch0 : @eq nat (Nat.add (BV_to_nat lf8) lf7) (##hole##)
Sketch conj190_term_sketch1 : @eq BV (BV_full_adder lf8 w cin) (##hole##)
Sketch conj190_term_sketch2 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (##hole##)
Sketch conj190_term_sketch3 : @eq nat (Nat.add (Nat.add (BV_to_nat lf8) lf7) (bool_to_nat cin)) (##hole##)
Sketch conj190_term_sketch4 : @eq nat (BV_to_nat lf8) (##hole##)
Sketch conj190_term_sketch5 : @eq nat (bool_to_nat cin) (##hole##)
Sketch conj191_sketch0 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin)) (##hole##)
Sketch conj191_sketch1 : @eq nat (BV_to_nat (##hole##))
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6)
Sketch conj191_sketch2 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add (##hole##) lf7) lf6)
Sketch conj191_sketch3 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (##hole##) lf6)
Sketch conj191_sketch4 : @eq nat (BV_to_nat (BV_full_adder (##hole##) w cin))
  (Nat.add (Nat.add (BV_to_nat (##hole##)) lf7) lf6)
Sketch conj191_sketch5 : @eq nat (##hole##) (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6)
Sketch conj191_term_sketch0 : @eq nat (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6) (##hole##)
Sketch conj191_term_sketch1 : @eq BV (BV_full_adder (@nil bool) w cin) (##hole##)
Sketch conj191_term_sketch2 : @eq nat (BV_to_nat (@nil bool)) (##hole##)
Sketch conj191_term_sketch3 : @eq nat (Nat.add (BV_to_nat (@nil bool)) lf7) (##hole##)
Sketch conj191_term_sketch4 : @eq (list bool) (@nil bool) (##hole##)
Sketch conj191_term_sketch5 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin)) (##hole##)
Sketch conj192_sketch0 : @eq nat (BV_to_nat (##hole##))
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) (bool_to_nat cin))
Sketch conj192_sketch1 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add (##hole##) lf7) (bool_to_nat cin))
Sketch conj192_sketch2 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (##hole##) (bool_to_nat cin))
Sketch conj192_sketch3 : @eq nat (BV_to_nat (BV_full_adder (##hole##) w cin))
  (Nat.add (Nat.add (BV_to_nat (##hole##)) lf7) (bool_to_nat cin))
Sketch conj192_sketch4 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin)) (##hole##)
Sketch conj192_sketch5 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) (##hole##))
Sketch conj192_sketch6 : @eq nat (##hole##)
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) (bool_to_nat cin))
Sketch conj192_term_sketch0 : @eq BV (BV_full_adder (@nil bool) w cin) (##hole##)
Sketch conj192_term_sketch1 : @eq nat (BV_to_nat (@nil bool)) (##hole##)
Sketch conj192_term_sketch2 : @eq nat (Nat.add (BV_to_nat (@nil bool)) lf7) (##hole##)
Sketch conj192_term_sketch3 : @eq (list bool) (@nil bool) (##hole##)
Sketch conj192_term_sketch4 : @eq nat (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) (bool_to_nat cin))
  (##hole##)
Sketch conj192_term_sketch5 : @eq nat (bool_to_nat cin) (##hole##)
Sketch conj192_term_sketch6 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin)) (##hole##)
Sketch conj229_sketch0 : @eq nat (BV_to_nat lf4) (Nat.add (Nat.add lf5 (##hole##)) lf6)
Sketch conj229_sketch1 : @eq nat (##hole##) (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6)
Sketch conj229_sketch2 : @eq nat (BV_to_nat lf4) (##hole##)
Sketch conj229_sketch3 : @eq nat (BV_to_nat lf4) (Nat.add (##hole##) lf6)
Sketch conj229_term_sketch0 : @eq nat (BV_to_nat w) (##hole##)
Sketch conj229_term_sketch1 : @eq nat (BV_to_nat lf4) (##hole##)
Sketch conj229_term_sketch2 : @eq nat (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6) (##hole##)
Sketch conj229_term_sketch3 : @eq nat (Nat.add lf5 (BV_to_nat w)) (##hole##)
Sketch conj230_sketch0 : @eq nat (BV_to_nat lf4) (Nat.add (Nat.add lf5 (##hole##)) (bool_to_nat cin))
Sketch conj230_sketch1 : @eq nat (##hole##) (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin))
Sketch conj230_sketch2 : @eq nat (BV_to_nat lf4) (Nat.add (##hole##) (bool_to_nat cin))
Sketch conj230_sketch3 : @eq nat (BV_to_nat lf4) (Nat.add (Nat.add lf5 (BV_to_nat w)) (##hole##))
Sketch conj230_sketch4 : @eq nat (BV_to_nat lf4) (##hole##)
Sketch conj230_term_sketch0 : @eq nat (BV_to_nat w) (##hole##)
Sketch conj230_term_sketch1 : @eq nat (BV_to_nat lf4) (##hole##)
Sketch conj230_term_sketch2 : @eq nat (Nat.add lf5 (BV_to_nat w)) (##hole##)
Sketch conj230_term_sketch3 : @eq nat (bool_to_nat cin) (##hole##)
Sketch conj230_term_sketch4 : @eq nat (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)) (##hole##)
Sketch conj237_sketch0 : @eq nat (BV_to_nat lf4) (Nat.add (##hole##) lf6)
Sketch conj237_sketch1 : @eq nat (BV_to_nat lf4) (Nat.add (Nat.add (BV_to_nat lf8) (##hole##)) lf6)
Sketch conj237_sketch2 : @eq nat (##hole##) (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) lf6)
Sketch conj237_sketch3 : @eq nat (BV_to_nat lf4) (Nat.add (Nat.add (##hole##) (BV_to_nat w)) lf6)
Sketch conj237_sketch4 : @eq nat (BV_to_nat lf4) (##hole##)
Sketch conj237_term_sketch0 : @eq nat (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (##hole##)
Sketch conj237_term_sketch1 : @eq nat (BV_to_nat w) (##hole##)
Sketch conj237_term_sketch2 : @eq nat (BV_to_nat lf4) (##hole##)
Sketch conj237_term_sketch3 : @eq nat (BV_to_nat lf8) (##hole##)
Sketch conj237_term_sketch4 : @eq nat (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) lf6) (##hole##)
Sketch conj238_sketch0 : @eq nat (BV_to_nat lf4) (Nat.add (##hole##) (bool_to_nat cin))
Sketch conj238_sketch1 : @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (BV_to_nat lf8) (##hole##)) (bool_to_nat cin))
Sketch conj238_sketch2 : @eq nat (##hole##)
  (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (bool_to_nat cin))
Sketch conj238_sketch3 : @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (##hole##) (BV_to_nat w)) (bool_to_nat cin))
Sketch conj238_sketch4 : @eq nat (BV_to_nat lf4) (##hole##)
Sketch conj238_sketch5 : @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (##hole##))
Sketch conj238_term_sketch0 : @eq nat (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (##hole##)
Sketch conj238_term_sketch1 : @eq nat (BV_to_nat w) (##hole##)
Sketch conj238_term_sketch2 : @eq nat (BV_to_nat lf4) (##hole##)
Sketch conj238_term_sketch3 : @eq nat (BV_to_nat lf8) (##hole##)
Sketch conj238_term_sketch4 : @eq nat (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (bool_to_nat cin))
  (##hole##)
Sketch conj238_term_sketch5 : @eq nat (bool_to_nat cin) (##hole##)
Sketch conj239_sketch0 : @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (##hole##)) lf6)
Sketch conj239_sketch1 : @eq nat (##hole##)
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6)
Sketch conj239_sketch2 : @eq nat (BV_to_nat lf4) (Nat.add (Nat.add (##hole##) (BV_to_nat w)) lf6)
Sketch conj239_sketch3 : @eq nat (BV_to_nat lf4) (Nat.add (##hole##) lf6)
Sketch conj239_sketch4 : @eq nat (BV_to_nat lf4) (##hole##)
Sketch conj239_sketch5 : @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (BV_to_nat (##hole##)) (BV_to_nat w)) lf6)
Sketch conj239_term_sketch0 : @eq nat (BV_to_nat w) (##hole##)
Sketch conj239_term_sketch1 : @eq nat (BV_to_nat lf4) (##hole##)
Sketch conj239_term_sketch2 : @eq nat (BV_to_nat (@nil bool)) (##hole##)
Sketch conj239_term_sketch3 : @eq nat (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (##hole##)
Sketch conj239_term_sketch4 : @eq nat (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6)
  (##hole##)
Sketch conj239_term_sketch5 : @eq (list bool) (@nil bool) (##hole##)
Sketch conj240_sketch0 : @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (##hole##)) (bool_to_nat cin))
Sketch conj240_sketch1 : @eq nat (##hole##)
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (bool_to_nat cin))
Sketch conj240_sketch2 : @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (##hole##) (BV_to_nat w)) (bool_to_nat cin))
Sketch conj240_sketch3 : @eq nat (BV_to_nat lf4) (Nat.add (##hole##) (bool_to_nat cin))
Sketch conj240_sketch4 : @eq nat (BV_to_nat lf4) (##hole##)
Sketch conj240_sketch5 : @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (BV_to_nat (##hole##)) (BV_to_nat w)) (bool_to_nat cin))
Sketch conj240_sketch6 : @eq nat (BV_to_nat lf4)
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (##hole##))
Sketch conj240_term_sketch0 : @eq nat (BV_to_nat w) (##hole##)
Sketch conj240_term_sketch1 : @eq nat (BV_to_nat lf4) (##hole##)
Sketch conj240_term_sketch2 : @eq nat (BV_to_nat (@nil bool)) (##hole##)
Sketch conj240_term_sketch3 : @eq nat (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (##hole##)
Sketch conj240_term_sketch4 : @eq nat
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (bool_to_nat cin))
  (##hole##)
Sketch conj240_term_sketch5 : @eq (list bool) (@nil bool) (##hole##)
Sketch conj240_term_sketch6 : @eq nat (bool_to_nat cin) (##hole##)
Sketch conj245_sketch0 : @eq nat (BV_to_nat (##hole##)) (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6)
Sketch conj245_sketch1 : @eq nat (##hole##) (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6)
Sketch conj245_sketch2 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add lf5 (##hole##)) lf6)
Sketch conj245_sketch3 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (##hole##)
Sketch conj245_sketch4 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (Nat.add (##hole##) lf6)
Sketch conj245_term_sketch0 : @eq BV (BV_full_adder lf8 w cin) (##hole##)
Sketch conj245_term_sketch1 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (##hole##)
Sketch conj245_term_sketch2 : @eq nat (BV_to_nat w) (##hole##)
Sketch conj245_term_sketch3 : @eq nat (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6) (##hole##)
Sketch conj245_term_sketch4 : @eq nat (Nat.add lf5 (BV_to_nat w)) (##hole##)
Sketch conj246_sketch0 : @eq nat (BV_to_nat (##hole##))
  (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin))
Sketch conj246_sketch1 : @eq nat (##hole##) (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin))
Sketch conj246_sketch2 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add lf5 (##hole##)) (bool_to_nat cin))
Sketch conj246_sketch3 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (##hole##) (bool_to_nat cin))
Sketch conj246_sketch4 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add lf5 (BV_to_nat w)) (##hole##))
Sketch conj246_sketch5 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (##hole##)
Sketch conj246_term_sketch0 : @eq BV (BV_full_adder lf8 w cin) (##hole##)
Sketch conj246_term_sketch1 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (##hole##)
Sketch conj246_term_sketch2 : @eq nat (BV_to_nat w) (##hole##)
Sketch conj246_term_sketch3 : @eq nat (Nat.add lf5 (BV_to_nat w)) (##hole##)
Sketch conj246_term_sketch4 : @eq nat (bool_to_nat cin) (##hole##)
Sketch conj246_term_sketch5 : @eq nat (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)) (##hole##)
Sketch conj247_sketch0 : @eq nat (BV_to_nat (##hole##)) (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6)
Sketch conj247_sketch1 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add lf5 (##hole##)) lf6)
Sketch conj247_sketch2 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin)) (##hole##)
Sketch conj247_sketch3 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (##hole##) lf6)
Sketch conj247_sketch4 : @eq nat (BV_to_nat (BV_full_adder (##hole##) w cin))
  (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6)
Sketch conj247_sketch5 : @eq nat (##hole##) (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6)
Sketch conj247_term_sketch0 : @eq BV (BV_full_adder (@nil bool) w cin) (##hole##)
Sketch conj247_term_sketch1 : @eq nat (BV_to_nat w) (##hole##)
Sketch conj247_term_sketch2 : @eq nat (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6) (##hole##)
Sketch conj247_term_sketch3 : @eq nat (Nat.add lf5 (BV_to_nat w)) (##hole##)
Sketch conj247_term_sketch4 : @eq (list bool) (@nil bool) (##hole##)
Sketch conj247_term_sketch5 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin)) (##hole##)
Sketch conj248_sketch0 : @eq nat (BV_to_nat (##hole##))
  (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin))
Sketch conj248_sketch1 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add lf5 (##hole##)) (bool_to_nat cin))
Sketch conj248_sketch2 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (##hole##) (bool_to_nat cin))
Sketch conj248_sketch3 : @eq nat (BV_to_nat (BV_full_adder (##hole##) w cin))
  (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin))
Sketch conj248_sketch4 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add lf5 (BV_to_nat w)) (##hole##))
Sketch conj248_sketch5 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin)) (##hole##)
Sketch conj248_sketch6 : @eq nat (##hole##) (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin))
Sketch conj248_term_sketch0 : @eq BV (BV_full_adder (@nil bool) w cin) (##hole##)
Sketch conj248_term_sketch1 : @eq nat (BV_to_nat w) (##hole##)
Sketch conj248_term_sketch2 : @eq nat (Nat.add lf5 (BV_to_nat w)) (##hole##)
Sketch conj248_term_sketch3 : @eq (list bool) (@nil bool) (##hole##)
Sketch conj248_term_sketch4 : @eq nat (bool_to_nat cin) (##hole##)
Sketch conj248_term_sketch5 : @eq nat (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)) (##hole##)
Sketch conj248_term_sketch6 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin)) (##hole##)
Sketch conj253_sketch0 : @eq nat (BV_to_nat (##hole##))
  (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) lf6)
Sketch conj253_sketch1 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (Nat.add (##hole##) lf6)
Sketch conj253_sketch2 : @eq nat (##hole##) (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) lf6)
Sketch conj253_sketch3 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add (BV_to_nat lf8) (##hole##)) lf6)
Sketch conj253_sketch4 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin))
  (Nat.add (Nat.add (##hole##) (BV_to_nat w)) lf6)
Sketch conj253_sketch5 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (##hole##)
Sketch conj253_term_sketch0 : @eq BV (BV_full_adder lf8 w cin) (##hole##)
Sketch conj253_term_sketch1 : @eq nat (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (##hole##)
Sketch conj253_term_sketch2 : @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (##hole##)
Sketch conj253_term_sketch3 : @eq nat (BV_to_nat w) (##hole##)
Sketch conj253_term_sketch4 : @eq nat (BV_to_nat lf8) (##hole##)
Sketch conj253_term_sketch5 : @eq nat (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) lf6) (##hole##)
Sketch conj255_sketch0 : @eq nat (BV_to_nat (##hole##))
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6)
Sketch conj255_sketch1 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (##hole##)) lf6)
Sketch conj255_sketch2 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (Nat.add (##hole##) (BV_to_nat w)) lf6)
Sketch conj255_sketch3 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))
  (Nat.add (##hole##) lf6)
Sketch conj255_sketch4 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin)) (##hole##)
Sketch conj255_sketch5 : @eq nat (BV_to_nat (BV_full_adder (##hole##) w cin))
  (Nat.add (Nat.add (BV_to_nat (##hole##)) (BV_to_nat w)) lf6)
Sketch conj255_sketch6 : @eq nat (##hole##)
  (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6)
Sketch conj255_term_sketch0 : @eq BV (BV_full_adder (@nil bool) w cin) (##hole##)
Sketch conj255_term_sketch1 : @eq nat (BV_to_nat w) (##hole##)
Sketch conj255_term_sketch2 : @eq nat (BV_to_nat (@nil bool)) (##hole##)
Sketch conj255_term_sketch3 : @eq nat (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (##hole##)
Sketch conj255_term_sketch4 : @eq nat (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6)
  (##hole##)
Sketch conj255_term_sketch5 : @eq (list bool) (@nil bool) (##hole##)
Sketch conj255_term_sketch6 : @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin)) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 3051 seconds
Problems per Sketch:
Sketch conj248_term_sketch1 --> Problem  synth_28
Sketch conj238_sketch4 --> Problem  synth_48
Sketch conj48_sketch3 --> Problem  synth_1
Sketch conj184_sketch0 --> Problem  synth_71
Sketch conj184_sketch4 --> Problem  synth_78
Sketch conj181_term_sketch3 --> Problem  synth_8
Sketch conj101_term_sketch2 --> Problem  synth_30
Sketch conj253_term_sketch5 --> Problem  synth_37
Sketch conj238_sketch0 --> Problem  synth_55
Sketch conj184_term_sketch1 --> Problem  synth_7
Sketch conj147_sketch1 --> Problem  synth_51
Sketch conj246_sketch4 --> Problem  synth_106
Sketch conj240_sketch6 --> Problem  synth_101
Sketch conj179_term_sketch1 --> Problem  synth_23
Sketch conj110_sketch1 --> Problem  synth_38
Sketch conj182_term_sketch4 --> Problem  synth_5
Sketch conj109_term_sketch1 --> Problem  synth_28
Sketch conj191_sketch3 --> Problem  synth_74
Sketch conj190_term_sketch0 --> Problem  synth_13
Sketch conj173_sketch0 --> Problem  synth_54
Sketch conj110_term_sketch4 --> Problem  synth_5
Sketch conj183_sketch2 --> Problem  synth_46
Sketch conj246_term_sketch5 --> Problem  synth_33
Sketch conj246_sketch5 --> Problem  synth_41
Sketch conj246_sketch3 --> Problem  synth_72
Sketch conj237_term_sketch4 --> Problem  synth_37
Sketch conj184_term_sketch4 --> Problem  synth_5
Sketch conj175_term_sketch0 --> Problem  synth_20
Sketch conj192_term_sketch0 --> Problem  synth_52
Sketch conj101_sketch0 --> Problem  synth_27
Sketch conj246_term_sketch3 --> Problem  synth_30
Sketch conj238_term_sketch0 --> Problem  synth_36
Sketch conj246_sketch2 --> Problem  synth_105
Sketch conj230_sketch3 --> Problem  synth_93
Sketch conj175_sketch0 --> Problem  synth_48
Sketch conj192_sketch6 --> Problem  synth_26
Sketch conj47_sketch2 --> Problem  synth_6
Sketch conj253_sketch5 --> Problem  synth_41
Sketch conj192_sketch3 --> Problem  synth_89
Sketch conj174_sketch2 --> Problem  synth_18
Sketch conj147_sketch0 --> Problem  synth_49
Sketch conj253_term_sketch0 --> Problem  synth_50
Sketch conj248_sketch1 --> Problem  synth_109
Sketch conj237_sketch0 --> Problem  synth_54
Sketch conj182_sketch2 --> Problem  synth_72
Sketch conj181_sketch2 --> Problem  synth_70
Sketch conj145_sketch1 --> Problem  synth_47
Sketch conj46_term_sketch3 --> Problem  synth_5
Sketch conj180_sketch0 --> Problem  synth_46
Sketch conj176_term_sketch0 --> Problem  synth_48
Sketch conj237_sketch1 --> Problem  synth_94
Sketch conj238_sketch2 --> Problem  synth_41
Sketch conj178_term_sketch3 --> Problem  synth_5
Sketch conj112_sketch1 --> Problem  synth_39
Sketch conj248_term_sketch3 --> Problem  synth_23
Sketch conj48_term_sketch0 --> Problem  synth_21
Sketch conj46_sketch1 --> Problem  synth_1
Sketch conj162_sketch0 --> Problem  synth_48
Sketch conj246_sketch0 --> Problem  synth_104
Sketch conj239_sketch3 --> Problem  synth_54
Sketch conj239_term_sketch3 --> Problem  synth_28
Sketch conj178_sketch1 --> Problem  synth_64
Sketch conj110_sketch2 --> Problem  synth_39
Sketch conj192_term_sketch1 --> Problem  synth_21
Sketch conj189_sketch4 --> Problem  synth_80
Sketch conj230_term_sketch3 --> Problem  synth_5
Sketch conj47_term_sketch1 --> Problem  synth_21
Sketch conj245_term_sketch2 --> Problem  synth_28
Sketch conj112_term_sketch1 --> Problem  synth_21
Sketch conj240_term_sketch1 --> Problem  synth_48
Sketch conj38_sketch1 --> Problem  synth_1
Sketch conj248_term_sketch5 --> Problem  synth_33
Sketch conj182_sketch4 --> Problem  synth_73
Sketch conj180_term_sketch0 --> Problem  synth_4
Sketch conj112_term_sketch2 --> Problem  synth_28
Sketch conj45_sketch0 --> Problem  synth_6
Sketch conj255_term_sketch6 --> Problem  synth_46
Sketch conj247_sketch3 --> Problem  synth_74
Sketch conj183_term_sketch2 --> Problem  synth_8
Sketch conj237_term_sketch1 --> Problem  synth_28
Sketch conj161_sketch1 --> Problem  synth_48
Sketch conj190_term_sketch3 --> Problem  synth_18
Sketch conj184_term_sketch5 --> Problem  synth_46
Sketch conj48_term_sketch3 --> Problem  synth_26
Sketch conj190_sketch2 --> Problem  synth_18
Sketch conj189_sketch2 --> Problem  synth_14
Sketch conj239_term_sketch0 --> Problem  synth_28
Sketch conj237_sketch2 --> Problem  synth_37
Sketch conj182_term_sketch2 --> Problem  synth_7
Sketch conj179_term_sketch2 --> Problem  synth_2
Sketch conj190_term_sketch4 --> Problem  synth_15
Sketch conj229_sketch0 --> Problem  synth_91
Sketch conj173_term_sketch3 --> Problem  synth_15
Sketch conj181_sketch0 --> Problem  synth_69
Sketch conj101_sketch2 --> Problem  synth_6
Sketch conj145_term_sketch1 --> Problem  synth_41
Sketch conj245_sketch1 --> Problem  synth_29
Sketch conj184_term_sketch2 --> Problem  synth_23
Sketch conj248_term_sketch0 --> Problem  synth_52
Sketch conj247_sketch2 --> Problem  synth_46
Sketch conj165_sketch2 --> Problem  synth_8
Sketch conj240_term_sketch5 --> Problem  synth_23
Sketch conj176_term_sketch4 --> Problem  synth_26
Sketch conj46_sketch3 --> Problem  synth_17
Sketch conj38_sketch2 --> Problem  synth_10
Sketch conj240_term_sketch0 --> Problem  synth_28
Sketch conj191_sketch1 --> Problem  synth_84
Sketch conj175_sketch1 --> Problem  synth_20
Sketch conj245_term_sketch0 --> Problem  synth_50
Sketch conj112_sketch3 --> Problem  synth_1
Sketch conj230_sketch0 --> Problem  synth_92
Sketch conj189_sketch0 --> Problem  synth_70
Sketch conj110_term_sketch0 --> Problem  synth_36
Sketch conj183_term_sketch1 --> Problem  synth_7
Sketch conj184_sketch5 --> Problem  synth_11
Sketch conj111_term_sketch1 --> Problem  synth_21
Sketch conj192_sketch0 --> Problem  synth_87
Sketch conj253_term_sketch1 --> Problem  synth_36
Sketch conj129_sketch0 --> Problem  synth_47
Sketch conj181_sketch1 --> Problem  synth_8
Sketch conj165_sketch1 --> Problem  synth_48
Sketch conj255_term_sketch4 --> Problem  synth_43
Sketch conj47_term_sketch3 --> Problem  synth_23
Sketch conj38_term_sketch1 --> Problem  synth_11
Sketch conj33_sketch0 --> Problem  synth_1
Sketch conj246_term_sketch1 --> Problem  synth_41
Sketch conj192_term_sketch6 --> Problem  synth_46
Sketch conj239_sketch4 --> Problem  synth_48
Sketch conj166_term_sketch0 --> Problem  synth_7
Sketch conj239_term_sketch1 --> Problem  synth_48
Sketch conj255_term_sketch5 --> Problem  synth_23
Sketch conj230_sketch1 --> Problem  synth_33
Sketch conj182_sketch1 --> Problem  synth_11
Sketch conj191_term_sketch5 --> Problem  synth_46
Sketch conj191_sketch2 --> Problem  synth_85
Sketch conj190_sketch3 --> Problem  synth_41
Sketch conj176_sketch3 --> Problem  synth_61
Sketch conj230_sketch2 --> Problem  synth_55
Sketch conj175_sketch3 --> Problem  synth_54
Sketch conj162_term_sketch1 --> Problem  synth_48
Sketch conj248_sketch3 --> Problem  synth_110
Sketch conj147_term_sketch2 --> Problem  synth_46
Sketch conj190_term_sketch1 --> Problem  synth_50
Sketch conj175_term_sketch3 --> Problem  synth_22
Sketch conj178_term_sketch1 --> Problem  synth_50
Sketch conj175_sketch4 --> Problem  synth_60
Sketch conj177_term_sketch2 --> Problem  synth_2
Sketch conj239_term_sketch2 --> Problem  synth_21
Sketch conj180_sketch3 --> Problem  synth_68
Sketch conj45_sketch1 --> Problem  synth_1
Sketch conj230_term_sketch4 --> Problem  synth_33
Sketch conj180_term_sketch4 --> Problem  synth_46
Sketch conj177_sketch0 --> Problem  synth_63
Sketch conj247_term_sketch4 --> Problem  synth_23
Sketch conj101_term_sketch1 --> Problem  synth_29
Sketch conj109_term_sketch3 --> Problem  synth_37
Sketch conj239_sketch1 --> Problem  synth_43
Sketch conj184_term_sketch0 --> Problem  synth_52
Sketch conj112_sketch2 --> Problem  synth_9
Sketch conj247_sketch0 --> Problem  synth_102
Sketch conj182_term_sketch3 --> Problem  synth_11
Sketch conj45_term_sketch0 --> Problem  synth_13
Sketch conj192_sketch2 --> Problem  synth_76
Sketch conj33_term_sketch0 --> Problem  synth_2
Sketch conj245_term_sketch3 --> Problem  synth_29
Sketch conj110_term_sketch2 --> Problem  synth_15
Sketch conj38_term_sketch2 --> Problem  synth_5
Sketch conj110_sketch3 --> Problem  synth_1
Sketch conj247_term_sketch2 --> Problem  synth_29
Sketch conj178_term_sketch2 --> Problem  synth_41
Sketch conj182_term_sketch1 --> Problem  synth_41
Sketch conj192_term_sketch2 --> Problem  synth_22
Sketch conj182_term_sketch0 --> Problem  synth_50
Sketch conj248_sketch5 --> Problem  synth_46
Sketch conj239_term_sketch5 --> Problem  synth_23
Sketch conj191_term_sketch4 --> Problem  synth_23
Sketch conj238_term_sketch3 --> Problem  synth_15
Sketch conj182_sketch3 --> Problem  synth_41
Sketch conj34_sketch0 --> Problem  synth_1
Sketch conj192_term_sketch5 --> Problem  synth_5
Sketch conj183_sketch3 --> Problem  synth_75
Sketch conj102_sketch2 --> Problem  synth_32
Sketch conj192_sketch1 --> Problem  synth_88
Sketch conj38_term_sketch0 --> Problem  synth_7
Sketch conj240_term_sketch4 --> Problem  synth_46
Sketch conj183_sketch1 --> Problem  synth_74
Sketch conj179_sketch2 --> Problem  synth_46
Sketch conj178_sketch3 --> Problem  synth_65
Sketch conj161_term_sketch0 --> Problem  synth_48
Sketch conj191_term_sketch2 --> Problem  synth_21
Sketch conj183_sketch0 --> Problem  synth_69
Sketch conj229_sketch1 --> Problem  synth_29
Sketch conj255_term_sketch0 --> Problem  synth_52
Sketch conj181_term_sketch2 --> Problem  synth_7
Sketch conj177_sketch1 --> Problem  synth_2
Sketch conj192_sketch5 --> Problem  synth_90
Sketch conj176_term_sketch1 --> Problem  synth_21
Sketch conj176_sketch5 --> Problem  synth_62
Sketch conj47_term_sketch0 --> Problem  synth_20
Sketch conj248_term_sketch4 --> Problem  synth_5
Sketch conj255_sketch6 --> Problem  synth_43
Sketch conj253_term_sketch4 --> Problem  synth_15
Sketch conj46_term_sketch0 --> Problem  synth_13
Sketch conj180_term_sketch1 --> Problem  synth_52
Sketch conj247_sketch5 --> Problem  synth_29
Sketch conj145_term_sketch0 --> Problem  synth_50
Sketch conj46_sketch2 --> Problem  synth_16
Sketch conj239_sketch5 --> Problem  synth_99
Sketch conj182_sketch0 --> Problem  synth_71
Sketch conj161_term_sketch1 --> Problem  synth_2
Sketch conj102_sketch0 --> Problem  synth_31
Sketch conj48_sketch1 --> Problem  synth_9
Sketch conj253_sketch0 --> Problem  synth_112
Sketch conj178_term_sketch0 --> Problem  synth_4
Sketch conj176_sketch1 --> Problem  synth_58
Sketch conj111_term_sketch4 --> Problem  synth_23
Sketch conj191_sketch5 --> Problem  synth_20
Sketch conj101_term_sketch0 --> Problem  synth_28
Sketch conj189_term_sketch0 --> Problem  synth_13
Sketch conj237_sketch3 --> Problem  synth_95
Sketch conj175_term_sketch2 --> Problem  synth_21
Sketch conj109_sketch0 --> Problem  synth_6
Sketch conj47_term_sketch2 --> Problem  synth_22
Sketch conj192_sketch4 --> Problem  synth_46
Sketch conj166_term_sketch3 --> Problem  synth_5
Sketch conj112_sketch5 --> Problem  synth_45
Sketch conj189_term_sketch3 --> Problem  synth_14
Sketch conj111_term_sketch2 --> Problem  synth_28
Sketch conj46_sketch0 --> Problem  synth_9
Sketch conj176_sketch2 --> Problem  synth_55
Sketch conj240_sketch5 --> Problem  synth_100
Sketch conj247_term_sketch0 --> Problem  synth_52
Sketch conj238_sketch3 --> Problem  synth_97
Sketch conj162_sketch2 --> Problem  synth_53
Sketch conj162_term_sketch2 --> Problem  synth_5
Sketch conj101_sketch1 --> Problem  synth_1
Sketch conj37_sketch1 --> Problem  synth_1
Sketch conj245_sketch3 --> Problem  synth_41
Sketch conj183_term_sketch3 --> Problem  synth_23
Sketch conj176_term_sketch3 --> Problem  synth_23
Sketch conj184_sketch1 --> Problem  synth_76
Sketch conj174_term_sketch0 --> Problem  synth_13
Sketch conj175_sketch2 --> Problem  synth_57
Sketch conj184_sketch2 --> Problem  synth_77
Sketch conj180_sketch2 --> Problem  synth_67
Sketch conj174_term_sketch4 --> Problem  synth_5
Sketch conj247_sketch1 --> Problem  synth_107
Sketch conj238_sketch1 --> Problem  synth_96
Sketch conj240_sketch0 --> Problem  synth_55
Sketch conj176_sketch0 --> Problem  synth_26
Sketch conj173_term_sketch2 --> Problem  synth_14
Sketch conj237_sketch4 --> Problem  synth_48
Sketch conj240_term_sketch6 --> Problem  synth_5
Sketch conj102_term_sketch1 --> Problem  synth_30
Sketch conj166_term_sketch2 --> Problem  synth_11
Sketch conj238_term_sketch2 --> Problem  synth_48
Sketch conj183_term_sketch0 --> Problem  synth_52
Sketch conj38_sketch0 --> Problem  synth_9
Sketch conj173_sketch2 --> Problem  synth_48
Sketch conj110_term_sketch3 --> Problem  synth_41
Sketch conj102_term_sketch2 --> Problem  synth_5
Sketch conj253_term_sketch3 --> Problem  synth_28
Sketch conj240_sketch3 --> Problem  synth_55
Sketch conj174_sketch4 --> Problem  synth_59
Sketch conj248_sketch6 --> Problem  synth_33
Sketch conj189_term_sketch2 --> Problem  synth_41
Sketch conj109_term_sketch2 --> Problem  synth_15
Sketch conj111_sketch3 --> Problem  synth_1
Sketch conj247_term_sketch5 --> Problem  synth_46
Sketch conj48_sketch4 --> Problem  synth_25
Sketch conj181_term_sketch0 --> Problem  synth_50
Sketch conj145_sketch0 --> Problem  synth_49
Sketch conj240_term_sketch3 --> Problem  synth_28
Sketch conj166_sketch0 --> Problem  synth_55
Sketch conj109_sketch1 --> Problem  synth_34
Sketch conj238_term_sketch4 --> Problem  synth_41
Sketch conj190_sketch0 --> Problem  synth_72
Sketch conj184_term_sketch3 --> Problem  synth_11
Sketch conj237_term_sketch0 --> Problem  synth_36
Sketch conj47_sketch3 --> Problem  synth_19
Sketch conj255_term_sketch3 --> Problem  synth_28
Sketch conj239_sketch0 --> Problem  synth_54
Sketch conj245_sketch4 --> Problem  synth_70
Sketch conj112_term_sketch0 --> Problem  synth_28
Sketch conj229_sketch2 --> Problem  synth_48
Sketch conj183_sketch4 --> Problem  synth_8
Sketch conj230_sketch4 --> Problem  synth_48
Sketch conj248_sketch0 --> Problem  synth_104
Sketch conj109_sketch2 --> Problem  synth_35
Sketch conj237_term_sketch2 --> Problem  synth_48
Sketch conj238_term_sketch1 --> Problem  synth_28
Sketch conj37_sketch0 --> Problem  synth_6
Sketch conj147_sketch2 --> Problem  synth_47
Sketch conj109_term_sketch0 --> Problem  synth_36
Sketch conj239_term_sketch4 --> Problem  synth_43
Sketch conj47_sketch1 --> Problem  synth_12
Sketch conj184_sketch3 --> Problem  synth_46
Sketch conj180_sketch1 --> Problem  synth_64
Sketch conj179_sketch3 --> Problem  synth_2
Sketch conj147_term_sketch1 --> Problem  synth_23
Sketch conj253_sketch4 --> Problem  synth_113
Sketch conj255_sketch4 --> Problem  synth_46
Sketch conj255_sketch2 --> Problem  synth_115
Sketch conj177_sketch2 --> Problem  synth_41
Sketch conj166_sketch2 --> Problem  synth_48
Sketch conj112_sketch4 --> Problem  synth_44
Sketch conj112_term_sketch5 --> Problem  synth_5
Sketch conj177_term_sketch1 --> Problem  synth_41
Sketch conj237_term_sketch3 --> Problem  synth_15
Sketch conj190_sketch1 --> Problem  synth_81
Sketch conj179_term_sketch3 --> Problem  synth_46
Sketch conj109_sketch3 --> Problem  synth_1
Sketch conj176_term_sketch2 --> Problem  synth_22
Sketch conj253_term_sketch2 --> Problem  synth_41
Sketch conj173_sketch1 --> Problem  synth_14
Sketch conj246_term_sketch2 --> Problem  synth_28
Sketch conj34_sketch1 --> Problem  synth_3
Sketch conj246_term_sketch0 --> Problem  synth_50
Sketch conj174_term_sketch3 --> Problem  synth_15
Sketch conj174_term_sketch2 --> Problem  synth_48
Sketch conj174_term_sketch1 --> Problem  synth_18
Sketch conj255_term_sketch2 --> Problem  synth_21
Sketch conj166_term_sketch1 --> Problem  synth_48
Sketch conj165_term_sketch1 --> Problem  synth_8
Sketch conj255_sketch5 --> Problem  synth_116
Sketch conj179_term_sketch0 --> Problem  synth_52
Sketch conj110_sketch0 --> Problem  synth_9
Sketch conj180_sketch4 --> Problem  synth_4
Sketch conj111_sketch1 --> Problem  synth_35
Sketch conj229_term_sketch3 --> Problem  synth_30
Sketch conj238_sketch5 --> Problem  synth_98
Sketch conj239_sketch2 --> Problem  synth_95
Sketch conj190_sketch5 --> Problem  synth_83
Sketch conj179_sketch0 --> Problem  synth_63
Sketch conj253_sketch1 --> Problem  synth_70
Sketch conj245_sketch0 --> Problem  synth_102
Sketch conj173_term_sketch1 --> Problem  synth_48
Sketch conj112_term_sketch3 --> Problem  synth_46
Sketch conj45_term_sketch2 --> Problem  synth_15
Sketch conj112_sketch0 --> Problem  synth_9
Sketch conj191_sketch4 --> Problem  synth_86
Sketch conj189_sketch3 --> Problem  synth_41
Sketch conj180_term_sketch3 --> Problem  synth_5
Sketch conj246_sketch1 --> Problem  synth_33
Sketch conj189_term_sketch4 --> Problem  synth_15
Sketch conj111_term_sketch3 --> Problem  synth_43
Sketch conj240_term_sketch2 --> Problem  synth_21
Sketch conj245_term_sketch1 --> Problem  synth_41
Sketch conj173_term_sketch0 --> Problem  synth_13
Sketch conj110_term_sketch1 --> Problem  synth_28
Sketch conj229_sketch3 --> Problem  synth_54
Sketch conj111_term_sketch0 --> Problem  synth_28
Sketch conj191_sketch0 --> Problem  synth_46
Sketch conj177_term_sketch0 --> Problem  synth_50
Sketch conj102_sketch1 --> Problem  synth_9
Sketch conj111_sketch2 --> Problem  synth_6
Sketch conj189_term_sketch1 --> Problem  synth_50
Sketch conj48_term_sketch2 --> Problem  synth_23
Sketch conj192_term_sketch3 --> Problem  synth_23
Sketch conj180_term_sketch2 --> Problem  synth_23
Sketch conj240_sketch1 --> Problem  synth_46
Sketch conj248_term_sketch6 --> Problem  synth_46
Sketch conj147_term_sketch0 --> Problem  synth_52
Sketch conj46_term_sketch2 --> Problem  synth_15
Sketch conj166_sketch1 --> Problem  synth_11
Sketch conj165_sketch0 --> Problem  synth_54
Sketch conj240_sketch4 --> Problem  synth_48
Sketch conj162_sketch1 --> Problem  synth_4
Sketch conj174_sketch3 --> Problem  synth_58
Sketch conj48_term_sketch1 --> Problem  synth_22
Sketch conj255_term_sketch1 --> Problem  synth_28
Sketch conj238_term_sketch5 --> Problem  synth_5
Sketch conj176_term_sketch5 --> Problem  synth_5
Sketch conj179_sketch1 --> Problem  synth_66
Sketch conj229_term_sketch0 --> Problem  synth_28
Sketch conj110_sketch4 --> Problem  synth_40
Sketch conj248_sketch2 --> Problem  synth_76
Sketch conj34_term_sketch1 --> Problem  synth_5
Sketch conj34_term_sketch0 --> Problem  synth_4
Sketch conj190_term_sketch5 --> Problem  synth_5
Sketch conj129_term_sketch0 --> Problem  synth_48
Sketch conj178_sketch2 --> Problem  synth_4
Sketch conj230_term_sketch2 --> Problem  synth_30
Sketch conj247_term_sketch3 --> Problem  synth_30
Sketch conj181_sketch3 --> Problem  synth_41
Sketch conj161_sketch0 --> Problem  synth_2
Sketch conj102_term_sketch0 --> Problem  synth_28
Sketch conj45_sketch2 --> Problem  synth_12
Sketch conj178_sketch0 --> Problem  synth_41
Sketch conj175_term_sketch4 --> Problem  synth_23
Sketch conj165_term_sketch0 --> Problem  synth_7
Sketch conj248_term_sketch2 --> Problem  synth_30
Sketch conj166_sketch3 --> Problem  synth_56
Sketch conj230_term_sketch1 --> Problem  synth_48
Sketch conj191_term_sketch0 --> Problem  synth_20
Sketch conj191_term_sketch3 --> Problem  synth_22
Sketch conj37_term_sketch0 --> Problem  synth_7
Sketch conj240_sketch2 --> Problem  synth_97
Sketch conj189_sketch1 --> Problem  synth_79
Sketch conj253_sketch2 --> Problem  synth_37
Sketch conj229_term_sketch2 --> Problem  synth_29
Sketch conj176_sketch4 --> Problem  synth_48
Sketch conj111_sketch4 --> Problem  synth_42
Sketch conj48_sketch0 --> Problem  synth_16
Sketch conj102_sketch3 --> Problem  synth_1
Sketch conj245_sketch2 --> Problem  synth_103
Sketch conj253_sketch3 --> Problem  synth_70
Sketch conj248_sketch4 --> Problem  synth_111
Sketch conj255_sketch0 --> Problem  synth_114
Sketch conj255_sketch1 --> Problem  synth_74
Sketch conj229_term_sketch1 --> Problem  synth_48
Sketch conj111_sketch0 --> Problem  synth_6
Sketch conj247_sketch4 --> Problem  synth_108
Sketch conj190_sketch4 --> Problem  synth_82
Sketch conj175_term_sketch1 --> Problem  synth_48
Sketch conj48_term_sketch4 --> Problem  synth_5
Sketch conj46_term_sketch1 --> Problem  synth_18
Sketch conj230_term_sketch0 --> Problem  synth_28
Sketch conj192_term_sketch4 --> Problem  synth_26
Sketch conj37_term_sketch1 --> Problem  synth_8
Sketch conj102_term_sketch3 --> Problem  synth_33
Sketch conj45_term_sketch1 --> Problem  synth_14
Sketch conj247_term_sketch1 --> Problem  synth_28
Sketch conj165_term_sketch2 --> Problem  synth_48
Sketch conj183_term_sketch4 --> Problem  synth_46
Sketch conj255_sketch3 --> Problem  synth_74
Sketch conj246_term_sketch4 --> Problem  synth_5
Sketch conj112_term_sketch4 --> Problem  synth_23
Sketch conj191_term_sketch1 --> Problem  synth_52
Sketch conj181_term_sketch1 --> Problem  synth_41
Sketch conj245_term_sketch4 --> Problem  synth_30
Sketch conj174_sketch0 --> Problem  synth_55
Sketch conj162_term_sketch0 --> Problem  synth_4
Sketch conj48_sketch2 --> Problem  synth_24
Sketch conj174_sketch1 --> Problem  synth_48
Sketch conj173_sketch3 --> Problem  synth_57
Sketch conj190_term_sketch2 --> Problem  synth_41
Sketch conj47_sketch0 --> Problem  synth_1


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 4736 seconds

Problem: synth_63

Problem: synth_106
 Nat.add (Bool_compl.bool_to_nat cin) lf5
 Nat.add (Bool_compl.bool_to_nat cin) O
 Nat.add lf5 (Bool_compl.bool_to_nat cin)
 Bool_compl.bool_to_nat cin

Problem: synth_91

Problem: synth_109
 Nat.add (BV.BV_to_nat w) lf5
 Nat.add (BV.BV_to_nat w) O
 Nat.add lf5 (BV.BV_to_nat w)
 BV.BV_to_nat w

Problem: synth_68
 Bool_compl.bool_to_nat cin

Problem: synth_67
 @nil bool

Problem: synth_77
 @nil bool

Problem: synth_64

Problem: synth_96

Problem: synth_11

Problem: synth_54

Problem: synth_39
 O

Problem: synth_46

Problem: synth_101

Problem: synth_98

Problem: synth_100
 @nil bool

Problem: synth_66
 @nil bool

Problem: synth_57
 O

Problem: synth_59

Problem: synth_116
 @nil bool

Problem: synth_31

Problem: synth_8
 Nat.add lf6 lf7
 Nat.add lf7 lf6

Problem: synth_34

Problem: synth_5
 Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)
 Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)
 Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O
 Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O
 Nat.add (Bool_compl.bool_to_nat cin) O
 Bool_compl.bool_to_nat cin

Problem: synth_37
 Nat.add (BV.BV_to_nat w) lf6
 Nat.add lf6 (BV.BV_to_nat w)

Problem: synth_58
 O

Problem: synth_53

Problem: synth_2
 Nat.add lf6 lf2
 Nat.add lf2 lf6

Problem: synth_95
 O

Problem: synth_22
 Nat.add lf7 O
 lf7

Problem: synth_18

Problem: synth_114

Problem: synth_21
 O

Problem: synth_72
 Nat.add (BV.BV_to_nat w) O
 BV.BV_to_nat w

Problem: synth_111
 Nat.add (Bool_compl.bool_to_nat cin) lf5
 Nat.add (Bool_compl.bool_to_nat cin) O
 Nat.add lf5 (Bool_compl.bool_to_nat cin)
 Bool_compl.bool_to_nat cin

Problem: synth_56

Problem: synth_41

Problem: synth_49

Problem: synth_75
 @nil bool

Problem: synth_25

Problem: synth_13
 Nat.add lf7 O
 lf7

Problem: synth_6

Problem: synth_4

Problem: synth_38

Problem: synth_105
 Nat.add (BV.BV_to_nat w) lf5
 Nat.add (BV.BV_to_nat w) O
 Nat.add lf5 (BV.BV_to_nat w)
 BV.BV_to_nat w

Problem: synth_104
 BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin cin)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin cin)) BV.nilbv)
 BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin true)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin true)) BV.nilbv)
 BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w cin) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w cin) BV.nilbv)
 Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin cin)
 Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin true)
 Adder.BV_full_adder w BV.nilbv cin

Problem: synth_65
 Bool_compl.bool_to_nat cin

Problem: synth_23
 @nil bool

Problem: synth_88
 O

Problem: synth_102

Problem: synth_19
 @nil bool

Problem: synth_113
 O

Problem: synth_10

Problem: synth_24
 @nil bool

Problem: synth_97
 O

Problem: synth_92

Problem: synth_32

Problem: synth_48
 Nat.add (BV.BV_to_nat lf4) O
 BV.BV_to_nat lf4

Problem: synth_51
 @nil bool

Problem: synth_112

Problem: synth_35
 O

Problem: synth_115
 O

Problem: synth_28
 Nat.add (BV.BV_to_nat w) O
 BV.BV_to_nat w

Problem: synth_110
 @nil bool

Problem: synth_90
 Bool_compl.bool_to_nat cin

Problem: synth_73
 Bool_compl.bool_to_nat cin

Problem: synth_17

Problem: synth_29
 Nat.add (BV.BV_to_nat w) lf6
 Nat.add lf6 (BV.BV_to_nat w)

Problem: synth_45

Problem: synth_76
 Nat.add (BV.BV_to_nat w) O
 BV.BV_to_nat w

Problem: synth_26

Problem: synth_70
 Nat.add (BV.BV_to_nat w) O
 BV.BV_to_nat w

Problem: synth_9

Problem: synth_30
 Nat.add (BV.BV_to_nat w) lf5
 Nat.add (BV.BV_to_nat w) O
 Nat.add lf5 (BV.BV_to_nat w)
 BV.BV_to_nat w

Problem: synth_81

Problem: synth_1
 Nat.add lf3 O
 lf3

Problem: synth_69

Problem: synth_86
 @nil bool

Problem: synth_55

Problem: synth_107
 Nat.add (BV.BV_to_nat w) lf5
 Nat.add (BV.BV_to_nat w) O
 Nat.add lf5 (BV.BV_to_nat w)
 BV.BV_to_nat w

Problem: synth_71

Problem: synth_15
 BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 true)
 BV.BV_to_nat (Adder.BV_full_adder_sum lf8 (@nil bool) true)
 BV.BV_to_nat (Adder.BV_full_adder_sum lf8 lf8 false)
 BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 false)
 BV.BV_to_nat (Adder.BV_full_adder_sum lf8 (@nil bool) false)
 O

Problem: synth_14
 Nat.add lf6 lf7
 Nat.add lf7 lf6

Problem: synth_103
 Nat.add (BV.BV_to_nat w) lf5
 Nat.add (BV.BV_to_nat w) O
 Nat.add lf5 (BV.BV_to_nat w)
 BV.BV_to_nat w

Problem: synth_87

Problem: synth_79

Problem: synth_83
 Bool_compl.bool_to_nat cin

Problem: synth_12
 O

Problem: synth_85
 O

Problem: synth_62

Problem: synth_74
 Nat.add (BV.BV_to_nat w) O
 BV.BV_to_nat w

Problem: synth_50
 Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 true) cin
 Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 (@nil bool) true) cin
 Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 lf8 false) cin
 Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 false) cin
 Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 (@nil bool) false) cin
 Adder.BV_full_adder w BV.nilbv cin

Problem: synth_84

Problem: synth_20
 Nat.add lf6 lf7
 Nat.add lf7 lf6

Problem: synth_94

Problem: synth_108
 @nil bool

Problem: synth_7
 Nat.add lf5 lf7
 Nat.add lf7 lf5
 Nat.add lf7 O
 lf7

Problem: synth_61
 @nil bool

Problem: synth_27

Problem: synth_42
 @nil bool

Problem: synth_16
 O

Problem: synth_93

Problem: synth_40

Problem: synth_80
 O

Problem: synth_33

Problem: synth_89
 @nil bool

Problem: synth_47
 Nat.add lf1 O
 lf1

Problem: synth_3

Problem: synth_52
 BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin cin)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin cin)) BV.nilbv)
 BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin true)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin true)) BV.nilbv)
 BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w cin) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w cin) BV.nilbv)
 Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin cin)
 Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin true)
 Adder.BV_full_adder w BV.nilbv cin

Problem: synth_44
 @nil bool

Problem: synth_60
 @nil bool

Problem: synth_36
 Nat.add (BV.BV_to_nat w) O
 BV.BV_to_nat w

Problem: synth_82
 O

Problem: synth_78
 Bool_compl.bool_to_nat cin

Problem: synth_99
 @nil bool

Problem: synth_43
 Nat.add (BV.BV_to_nat w) lf6
 Nat.add lf6 (BV.BV_to_nat w)

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 4738 seconds
Lemmas:
Lemma candidate_1: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (bool_to_nat cin)).
Lemma candidate_2: forall (w : BV) (cin : bool) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))   (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (bool_to_nat cin)).
Lemma candidate_3: forall (lf3 : nat), @eq nat lf3 (Nat.add lf3 O).
Lemma candidate_4: forall (lf3 : nat), @eq nat lf3 (lf3).
Lemma candidate_5: forall (lf2 : nat) (lf6 : nat), @eq nat (Nat.add lf2 lf6) (Nat.add lf6 lf2).
Lemma candidate_6: forall (lf2 : nat) (lf6 : nat), @eq nat (Nat.add lf2 lf6) (Nat.add lf2 lf6).
Lemma candidate_7: forall (lf3 : nat), @eq nat lf3 (Nat.add lf3 O).
Lemma candidate_8: forall (lf3 : nat), @eq nat lf3 (lf3).
Lemma candidate_9: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_10: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_11: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_12: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_13: forall (cin : bool), @eq nat (bool_to_nat cin) (Nat.add (Bool_compl.bool_to_nat cin) O).
Lemma candidate_14: forall (cin : bool), @eq nat (bool_to_nat cin) (Bool_compl.bool_to_nat cin).
Lemma candidate_15: forall (lf3 : nat), @eq nat lf3 (Nat.add lf3 O).
Lemma candidate_16: forall (lf3 : nat), @eq nat lf3 (lf3).
Lemma candidate_17: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (Nat.add lf5 lf7).
Lemma candidate_18: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (Nat.add lf7 lf5).
Lemma candidate_19: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (Nat.add lf7 O).
Lemma candidate_20: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (lf7).
Lemma candidate_21: forall (lf7 : nat) (lf5 : nat) (lf6 : nat), @eq nat (Nat.add (Nat.add lf5 lf7) lf6) (Nat.add lf6 lf7).
Lemma candidate_22: forall (lf7 : nat) (lf5 : nat) (lf6 : nat), @eq nat (Nat.add (Nat.add lf5 lf7) lf6) (Nat.add lf7 lf6).
Lemma candidate_23: forall (lf3 : nat), @eq nat lf3 (Nat.add lf3 O).
Lemma candidate_24: forall (lf3 : nat), @eq nat lf3 (lf3).
Lemma candidate_25: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (Nat.add lf5 lf7).
Lemma candidate_26: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (Nat.add lf7 lf5).
Lemma candidate_27: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (Nat.add lf7 O).
Lemma candidate_28: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (lf7).
Lemma candidate_29: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_30: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_31: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_32: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_33: forall (cin : bool), @eq nat (bool_to_nat cin) (Nat.add (Bool_compl.bool_to_nat cin) O).
Lemma candidate_34: forall (cin : bool), @eq nat (bool_to_nat cin) (Bool_compl.bool_to_nat cin).
Lemma candidate_35: forall (lf3 : nat), @eq nat lf3 (Nat.add lf3 O).
Lemma candidate_36: forall (lf3 : nat), @eq nat lf3 (lf3).
Lemma candidate_37: forall (lf3 : nat) (lf7 : nat) (lf6 : nat), @eq nat lf3 (Nat.add (Nat.add (O) lf7) lf6).
Lemma candidate_38: forall (lf7 : nat) (lf8 : list bool), @eq nat (Nat.add (BV_to_nat lf8) lf7) (Nat.add lf7 O).
Lemma candidate_39: forall (lf7 : nat) (lf8 : list bool), @eq nat (Nat.add (BV_to_nat lf8) lf7) (lf7).
Lemma candidate_40: forall (lf7 : nat) (lf6 : nat) (lf8 : list bool), @eq nat (Nat.add (Nat.add (BV_to_nat lf8) lf7) lf6) (Nat.add lf6 lf7).
Lemma candidate_41: forall (lf7 : nat) (lf6 : nat) (lf8 : list bool), @eq nat (Nat.add (Nat.add (BV_to_nat lf8) lf7) lf6) (Nat.add lf7 lf6).
Lemma candidate_42: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 true)).
Lemma candidate_43: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 (@nil bool) true)).
Lemma candidate_44: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 lf8 false)).
Lemma candidate_45: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 false)).
Lemma candidate_46: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 (@nil bool) false)).
Lemma candidate_47: forall (lf8 : list bool), @eq nat (BV_to_nat lf8) (O).
Lemma candidate_48: forall (lf3 : nat), @eq nat lf3 (Nat.add lf3 O).
Lemma candidate_49: forall (lf3 : nat), @eq nat lf3 (lf3).
Lemma candidate_50: forall (lf3 : nat) (lf7 : nat) (cin : bool), @eq nat lf3 (Nat.add (Nat.add (O) lf7) (bool_to_nat cin)).
Lemma candidate_51: forall (lf7 : nat) (lf8 : list bool), @eq nat (Nat.add (BV_to_nat lf8) lf7) (Nat.add lf7 O).
Lemma candidate_52: forall (lf7 : nat) (lf8 : list bool), @eq nat (Nat.add (BV_to_nat lf8) lf7) (lf7).
Lemma candidate_53: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 true)).
Lemma candidate_54: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 (@nil bool) true)).
Lemma candidate_55: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 lf8 false)).
Lemma candidate_56: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 false)).
Lemma candidate_57: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 (@nil bool) false)).
Lemma candidate_58: forall (lf8 : list bool), @eq nat (BV_to_nat lf8) (O).
Lemma candidate_59: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_60: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_61: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_62: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_63: forall (cin : bool), @eq nat (bool_to_nat cin) (Nat.add (Bool_compl.bool_to_nat cin) O).
Lemma candidate_64: forall (cin : bool), @eq nat (bool_to_nat cin) (Bool_compl.bool_to_nat cin).
Lemma candidate_65: forall (lf3 : nat), @eq nat lf3 (Nat.add lf3 O).
Lemma candidate_66: forall (lf3 : nat), @eq nat lf3 (lf3).
Lemma candidate_67: forall (lf3 : nat) (lf7 : nat) (lf6 : nat), @eq nat lf3 (Nat.add (Nat.add (O) lf7) lf6).
Lemma candidate_68: forall (lf3 : nat) (lf7 : nat) (lf6 : nat), @eq nat lf3 (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6).
Lemma candidate_69: forall (lf7 : nat) (lf6 : nat), @eq nat (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6) (Nat.add lf6 lf7).
Lemma candidate_70: forall (lf7 : nat) (lf6 : nat), @eq nat (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6) (Nat.add lf7 lf6).
Lemma candidate_71: @eq nat (BV_to_nat (@nil bool)) (O).
Lemma candidate_72: forall (lf7 : nat), @eq nat (Nat.add (BV_to_nat (@nil bool)) lf7) (Nat.add lf7 O).
Lemma candidate_73: forall (lf7 : nat), @eq nat (Nat.add (BV_to_nat (@nil bool)) lf7) (lf7).
Lemma candidate_74: @eq (list bool) (@nil bool) (@nil bool).
Lemma candidate_75: forall (lf3 : nat) (lf7 : nat) (cin : bool), @eq nat lf3 (Nat.add (Nat.add (O) lf7) (bool_to_nat cin)).
Lemma candidate_76: forall (lf3 : nat) (lf7 : nat) (cin : bool), @eq nat lf3 (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) (bool_to_nat cin)).
Lemma candidate_77: forall (lf3 : nat), @eq nat lf3 (Nat.add lf3 O).
Lemma candidate_78: forall (lf3 : nat), @eq nat lf3 (lf3).
Lemma candidate_79: @eq nat (BV_to_nat (@nil bool)) (O).
Lemma candidate_80: forall (lf7 : nat), @eq nat (Nat.add (BV_to_nat (@nil bool)) lf7) (Nat.add lf7 O).
Lemma candidate_81: forall (lf7 : nat), @eq nat (Nat.add (BV_to_nat (@nil bool)) lf7) (lf7).
Lemma candidate_82: @eq (list bool) (@nil bool) (@nil bool).
Lemma candidate_83: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_84: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_85: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_86: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_87: forall (cin : bool), @eq nat (bool_to_nat cin) (Nat.add (Bool_compl.bool_to_nat cin) O).
Lemma candidate_88: forall (cin : bool), @eq nat (bool_to_nat cin) (Bool_compl.bool_to_nat cin).
Lemma candidate_89: forall (lf3 : nat), @eq nat lf3 (Nat.add lf3 O).
Lemma candidate_90: forall (lf3 : nat), @eq nat lf3 (lf3).
Lemma candidate_91: forall (w : BV), @eq nat (BV_to_nat w) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_92: forall (w : BV), @eq nat (BV_to_nat w) (BV.BV_to_nat w).
Lemma candidate_93: forall (w : BV) (lf5 : nat) (lf6 : nat), @eq nat (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6)   (Nat.add (BV.BV_to_nat w) lf6).
Lemma candidate_94: forall (w : BV) (lf5 : nat) (lf6 : nat), @eq nat (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6)   (Nat.add lf6 (BV.BV_to_nat w)).
Lemma candidate_95: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (Nat.add (BV.BV_to_nat w) lf5).
Lemma candidate_96: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_97: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (Nat.add lf5 (BV.BV_to_nat w)).
Lemma candidate_98: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (BV.BV_to_nat w).
Lemma candidate_99: forall (lf3 : nat), @eq nat lf3 (Nat.add lf3 O).
Lemma candidate_100: forall (lf3 : nat), @eq nat lf3 (lf3).
Lemma candidate_101: forall (w : BV), @eq nat (BV_to_nat w) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_102: forall (w : BV), @eq nat (BV_to_nat w) (BV.BV_to_nat w).
Lemma candidate_103: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (Nat.add (BV.BV_to_nat w) lf5).
Lemma candidate_104: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_105: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (Nat.add lf5 (BV.BV_to_nat w)).
Lemma candidate_106: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (BV.BV_to_nat w).
Lemma candidate_107: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_108: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_109: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_110: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_111: forall (cin : bool), @eq nat (bool_to_nat cin) (Nat.add (Bool_compl.bool_to_nat cin) O).
Lemma candidate_112: forall (cin : bool), @eq nat (bool_to_nat cin) (Bool_compl.bool_to_nat cin).
Lemma candidate_113: forall (lf3 : nat) (w : BV) (lf6 : nat), @eq nat lf3 (Nat.add (Nat.add (O) (BV_to_nat w)) lf6).
Lemma candidate_114: forall (lf3 : nat), @eq nat lf3 (Nat.add lf3 O).
Lemma candidate_115: forall (lf3 : nat), @eq nat lf3 (lf3).
Lemma candidate_116: forall (w : BV) (lf8 : list bool), @eq nat (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_117: forall (w : BV) (lf8 : list bool), @eq nat (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (BV.BV_to_nat w).
Lemma candidate_118: forall (w : BV), @eq nat (BV_to_nat w) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_119: forall (w : BV), @eq nat (BV_to_nat w) (BV.BV_to_nat w).
Lemma candidate_120: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 true)).
Lemma candidate_121: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 (@nil bool) true)).
Lemma candidate_122: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 lf8 false)).
Lemma candidate_123: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 false)).
Lemma candidate_124: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 (@nil bool) false)).
Lemma candidate_125: forall (lf8 : list bool), @eq nat (BV_to_nat lf8) (O).
Lemma candidate_126: forall (w : BV) (lf6 : nat) (lf8 : list bool), @eq nat (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) lf6)   (Nat.add (BV.BV_to_nat w) lf6).
Lemma candidate_127: forall (w : BV) (lf6 : nat) (lf8 : list bool), @eq nat (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) lf6)   (Nat.add lf6 (BV.BV_to_nat w)).
Lemma candidate_128: forall (lf3 : nat) (w : BV) (cin : bool), @eq nat lf3 (Nat.add (Nat.add (O) (BV_to_nat w)) (bool_to_nat cin)).
Lemma candidate_129: forall (lf3 : nat), @eq nat lf3 (Nat.add lf3 O).
Lemma candidate_130: forall (lf3 : nat), @eq nat lf3 (lf3).
Lemma candidate_131: forall (w : BV) (lf8 : list bool), @eq nat (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_132: forall (w : BV) (lf8 : list bool), @eq nat (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (BV.BV_to_nat w).
Lemma candidate_133: forall (w : BV), @eq nat (BV_to_nat w) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_134: forall (w : BV), @eq nat (BV_to_nat w) (BV.BV_to_nat w).
Lemma candidate_135: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 true)).
Lemma candidate_136: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 (@nil bool) true)).
Lemma candidate_137: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 lf8 false)).
Lemma candidate_138: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 false)).
Lemma candidate_139: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 (@nil bool) false)).
Lemma candidate_140: forall (lf8 : list bool), @eq nat (BV_to_nat lf8) (O).
Lemma candidate_141: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_142: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_143: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_144: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_145: forall (cin : bool), @eq nat (bool_to_nat cin) (Nat.add (Bool_compl.bool_to_nat cin) O).
Lemma candidate_146: forall (cin : bool), @eq nat (bool_to_nat cin) (Bool_compl.bool_to_nat cin).
Lemma candidate_147: forall (lf3 : nat) (w : BV) (lf6 : nat), @eq nat lf3 (Nat.add (Nat.add (O) (BV_to_nat w)) lf6).
Lemma candidate_148: forall (lf3 : nat), @eq nat lf3 (Nat.add lf3 O).
Lemma candidate_149: forall (lf3 : nat), @eq nat lf3 (lf3).
Lemma candidate_150: forall (lf3 : nat) (w : BV) (lf6 : nat), @eq nat lf3 (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6).
Lemma candidate_151: forall (w : BV), @eq nat (BV_to_nat w) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_152: forall (w : BV), @eq nat (BV_to_nat w) (BV.BV_to_nat w).
Lemma candidate_153: @eq nat (BV_to_nat (@nil bool)) (O).
Lemma candidate_154: forall (w : BV), @eq nat (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w))   (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_155: forall (w : BV), @eq nat (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (BV.BV_to_nat w).
Lemma candidate_156: forall (w : BV) (lf6 : nat), @eq nat (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6)   (Nat.add (BV.BV_to_nat w) lf6).
Lemma candidate_157: forall (w : BV) (lf6 : nat), @eq nat (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6)   (Nat.add lf6 (BV.BV_to_nat w)).
Lemma candidate_158: @eq (list bool) (@nil bool) (@nil bool).
Lemma candidate_159: forall (lf3 : nat) (w : BV) (cin : bool), @eq nat lf3 (Nat.add (Nat.add (O) (BV_to_nat w)) (bool_to_nat cin)).
Lemma candidate_160: forall (lf3 : nat), @eq nat lf3 (Nat.add lf3 O).
Lemma candidate_161: forall (lf3 : nat), @eq nat lf3 (lf3).
Lemma candidate_162: forall (lf3 : nat) (w : BV) (cin : bool), @eq nat lf3   (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (bool_to_nat cin)).
Lemma candidate_163: forall (w : BV), @eq nat (BV_to_nat w) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_164: forall (w : BV), @eq nat (BV_to_nat w) (BV.BV_to_nat w).
Lemma candidate_165: @eq nat (BV_to_nat (@nil bool)) (O).
Lemma candidate_166: forall (w : BV), @eq nat (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w))   (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_167: forall (w : BV), @eq nat (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (BV.BV_to_nat w).
Lemma candidate_168: @eq (list bool) (@nil bool) (@nil bool).
Lemma candidate_169: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_170: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_171: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_172: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_173: forall (cin : bool), @eq nat (bool_to_nat cin) (Nat.add (Bool_compl.bool_to_nat cin) O).
Lemma candidate_174: forall (cin : bool), @eq nat (bool_to_nat cin) (Bool_compl.bool_to_nat cin).
Lemma candidate_175: forall (lf1 : nat), @eq nat (Nat.add lf1 O) lf1.
Lemma candidate_176: forall (lf1 : nat), @eq nat (lf1) lf1.
Lemma candidate_177: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (BV.BV_to_nat lf4) O).
Lemma candidate_178: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (BV.BV_to_nat lf4).
Lemma candidate_179: forall (lf1 : nat), @eq nat (Nat.add lf1 O) lf1.
Lemma candidate_180: forall (lf1 : nat), @eq nat (lf1) lf1.
Lemma candidate_181: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 true) cin).
Lemma candidate_182: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 (@nil bool) true) cin).
Lemma candidate_183: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 lf8 false) cin).
Lemma candidate_184: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 false) cin).
Lemma candidate_185: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 (@nil bool) false) cin).
Lemma candidate_186: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin) (Adder.BV_full_adder w BV.nilbv cin).
Lemma candidate_187: forall (lf1 : nat) (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin)) lf1.
Lemma candidate_188: forall (lf1 : nat), @eq nat (Nat.add lf1 O) lf1.
Lemma candidate_189: forall (lf1 : nat), @eq nat (lf1) lf1.
Lemma candidate_190: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin cin)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin cin)) BV.nilbv)).
Lemma candidate_191: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin true)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin true)) BV.nilbv)).
Lemma candidate_192: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w cin) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w cin) BV.nilbv)).
Lemma candidate_193: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_194: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin true)).
Lemma candidate_195: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin) (Adder.BV_full_adder w BV.nilbv cin).
Lemma candidate_196: @eq (list bool) (@nil bool) (@nil bool).
Lemma candidate_197: forall (lf2 : nat) (lf6 : nat), @eq nat (Nat.add lf6 lf2) (Nat.add lf2 lf6).
Lemma candidate_198: forall (lf2 : nat) (lf6 : nat), @eq nat (Nat.add lf2 lf6) (Nat.add lf2 lf6).
Lemma candidate_199: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (BV.BV_to_nat lf4) O).
Lemma candidate_200: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (BV.BV_to_nat lf4).
Lemma candidate_201: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (BV.BV_to_nat lf4) O).
Lemma candidate_202: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (BV.BV_to_nat lf4).
Lemma candidate_203: forall (lf2 : nat) (lf6 : nat), @eq nat (Nat.add lf2 lf6) (Nat.add lf6 lf2).
Lemma candidate_204: forall (lf2 : nat) (lf6 : nat), @eq nat (Nat.add lf2 lf6) (Nat.add lf2 lf6).
Lemma candidate_205: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (BV.BV_to_nat lf4) O).
Lemma candidate_206: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (BV.BV_to_nat lf4).
Lemma candidate_207: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (BV.BV_to_nat lf4) O).
Lemma candidate_208: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (BV.BV_to_nat lf4).
Lemma candidate_209: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_210: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_211: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_212: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_213: forall (cin : bool), @eq nat (bool_to_nat cin) (Nat.add (Bool_compl.bool_to_nat cin) O).
Lemma candidate_214: forall (cin : bool), @eq nat (bool_to_nat cin) (Bool_compl.bool_to_nat cin).
Lemma candidate_215: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (BV.BV_to_nat lf4) O).
Lemma candidate_216: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (BV.BV_to_nat lf4).
Lemma candidate_217: forall (lf7 : nat) (lf5 : nat) (lf6 : nat), @eq nat (Nat.add lf6 lf7) (Nat.add (Nat.add lf5 lf7) lf6).
Lemma candidate_218: forall (lf7 : nat) (lf5 : nat) (lf6 : nat), @eq nat (Nat.add lf7 lf6) (Nat.add (Nat.add lf5 lf7) lf6).
Lemma candidate_219: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (Nat.add lf5 lf7).
Lemma candidate_220: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (Nat.add lf7 lf5).
Lemma candidate_221: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (Nat.add lf7 O).
Lemma candidate_222: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (lf7).
Lemma candidate_223: forall (lf7 : nat) (lf5 : nat) (lf6 : nat), @eq nat (Nat.add (Nat.add lf5 lf7) lf6) (Nat.add lf6 lf7).
Lemma candidate_224: forall (lf7 : nat) (lf5 : nat) (lf6 : nat), @eq nat (Nat.add (Nat.add lf5 lf7) lf6) (Nat.add lf7 lf6).
Lemma candidate_225: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (BV.BV_to_nat lf4) O).
Lemma candidate_226: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (BV.BV_to_nat lf4).
Lemma candidate_227: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (BV.BV_to_nat lf4) O).
Lemma candidate_228: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (BV.BV_to_nat lf4).
Lemma candidate_229: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (Nat.add lf5 lf7).
Lemma candidate_230: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (Nat.add lf7 lf5).
Lemma candidate_231: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (Nat.add lf7 O).
Lemma candidate_232: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (lf7).
Lemma candidate_233: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (BV.BV_to_nat lf4) O).
Lemma candidate_234: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (BV.BV_to_nat lf4).
Lemma candidate_235: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_236: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_237: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_238: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_239: forall (cin : bool), @eq nat (bool_to_nat cin) (Nat.add (Bool_compl.bool_to_nat cin) O).
Lemma candidate_240: forall (cin : bool), @eq nat (bool_to_nat cin) (Bool_compl.bool_to_nat cin).
Lemma candidate_241: forall (lf7 : nat) (lf6 : nat) (lf8 : list bool), @eq nat (Nat.add lf6 lf7) (Nat.add (Nat.add (BV_to_nat lf8) lf7) lf6).
Lemma candidate_242: forall (lf7 : nat) (lf6 : nat) (lf8 : list bool), @eq nat (Nat.add lf7 lf6) (Nat.add (Nat.add (BV_to_nat lf8) lf7) lf6).
Lemma candidate_243: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (BV.BV_to_nat lf4) O).
Lemma candidate_244: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (BV.BV_to_nat lf4).
Lemma candidate_245: forall (lf7 : nat) (lf4 : BV) (lf6 : nat), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add (O) lf7) lf6).
Lemma candidate_246: forall (lf7 : nat) (lf8 : list bool), @eq nat (Nat.add (BV_to_nat lf8) lf7) (Nat.add lf7 O).
Lemma candidate_247: forall (lf7 : nat) (lf8 : list bool), @eq nat (Nat.add (BV_to_nat lf8) lf7) (lf7).
Lemma candidate_248: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (BV.BV_to_nat lf4) O).
Lemma candidate_249: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (BV.BV_to_nat lf4).
Lemma candidate_250: forall (lf7 : nat) (lf6 : nat) (lf8 : list bool), @eq nat (Nat.add (Nat.add (BV_to_nat lf8) lf7) lf6) (Nat.add lf6 lf7).
Lemma candidate_251: forall (lf7 : nat) (lf6 : nat) (lf8 : list bool), @eq nat (Nat.add (Nat.add (BV_to_nat lf8) lf7) lf6) (Nat.add lf7 lf6).
Lemma candidate_252: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 true)).
Lemma candidate_253: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 (@nil bool) true)).
Lemma candidate_254: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 lf8 false)).
Lemma candidate_255: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 false)).
Lemma candidate_256: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 (@nil bool) false)).
Lemma candidate_257: forall (lf8 : list bool), @eq nat (BV_to_nat lf8) (O).
Lemma candidate_258: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (BV.BV_to_nat lf4) O).
Lemma candidate_259: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (BV.BV_to_nat lf4).
Lemma candidate_260: forall (lf7 : nat) (lf4 : BV) (cin : bool), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add (O) lf7) (bool_to_nat cin)).
Lemma candidate_261: forall (lf7 : nat) (lf8 : list bool), @eq nat (Nat.add (BV_to_nat lf8) lf7) (Nat.add lf7 O).
Lemma candidate_262: forall (lf7 : nat) (lf8 : list bool), @eq nat (Nat.add (BV_to_nat lf8) lf7) (lf7).
Lemma candidate_263: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (BV.BV_to_nat lf4) O).
Lemma candidate_264: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (BV.BV_to_nat lf4).
Lemma candidate_265: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 true)).
Lemma candidate_266: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 (@nil bool) true)).
Lemma candidate_267: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 lf8 false)).
Lemma candidate_268: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 false)).
Lemma candidate_269: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 (@nil bool) false)).
Lemma candidate_270: forall (lf8 : list bool), @eq nat (BV_to_nat lf8) (O).
Lemma candidate_271: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_272: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_273: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_274: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_275: forall (cin : bool), @eq nat (bool_to_nat cin) (Nat.add (Bool_compl.bool_to_nat cin) O).
Lemma candidate_276: forall (cin : bool), @eq nat (bool_to_nat cin) (Bool_compl.bool_to_nat cin).
Lemma candidate_277: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (BV.BV_to_nat lf4) O).
Lemma candidate_278: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (BV.BV_to_nat lf4).
Lemma candidate_279: forall (lf7 : nat) (lf6 : nat), @eq nat (Nat.add lf6 lf7) (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6).
Lemma candidate_280: forall (lf7 : nat) (lf6 : nat), @eq nat (Nat.add lf7 lf6) (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6).
Lemma candidate_281: forall (lf7 : nat) (lf4 : BV) (lf6 : nat), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add (O) lf7) lf6).
Lemma candidate_282: forall (lf7 : nat) (lf4 : BV) (lf6 : nat), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6).
Lemma candidate_283: forall (lf7 : nat) (lf6 : nat), @eq nat (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6) (Nat.add lf6 lf7).
Lemma candidate_284: forall (lf7 : nat) (lf6 : nat), @eq nat (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6) (Nat.add lf7 lf6).
Lemma candidate_285: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (BV.BV_to_nat lf4) O).
Lemma candidate_286: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (BV.BV_to_nat lf4).
Lemma candidate_287: @eq nat (BV_to_nat (@nil bool)) (O).
Lemma candidate_288: forall (lf7 : nat), @eq nat (Nat.add (BV_to_nat (@nil bool)) lf7) (Nat.add lf7 O).
Lemma candidate_289: forall (lf7 : nat), @eq nat (Nat.add (BV_to_nat (@nil bool)) lf7) (lf7).
Lemma candidate_290: @eq (list bool) (@nil bool) (@nil bool).
Lemma candidate_291: forall (lf7 : nat) (lf4 : BV) (cin : bool), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add (O) lf7) (bool_to_nat cin)).
Lemma candidate_292: forall (lf7 : nat) (lf4 : BV) (cin : bool), @eq nat (BV_to_nat lf4)   (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) (bool_to_nat cin)).
Lemma candidate_293: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (BV.BV_to_nat lf4) O).
Lemma candidate_294: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (BV.BV_to_nat lf4).
Lemma candidate_295: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (BV.BV_to_nat lf4) O).
Lemma candidate_296: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (BV.BV_to_nat lf4).
Lemma candidate_297: @eq nat (BV_to_nat (@nil bool)) (O).
Lemma candidate_298: forall (lf7 : nat), @eq nat (Nat.add (BV_to_nat (@nil bool)) lf7) (Nat.add lf7 O).
Lemma candidate_299: forall (lf7 : nat), @eq nat (Nat.add (BV_to_nat (@nil bool)) lf7) (lf7).
Lemma candidate_300: @eq (list bool) (@nil bool) (@nil bool).
Lemma candidate_301: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_302: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_303: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_304: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_305: forall (cin : bool), @eq nat (bool_to_nat cin) (Nat.add (Bool_compl.bool_to_nat cin) O).
Lemma candidate_306: forall (cin : bool), @eq nat (bool_to_nat cin) (Bool_compl.bool_to_nat cin).
Lemma candidate_307: forall (lf2 : nat) (lf6 : nat), @eq nat (Nat.add lf6 lf2) (Nat.add lf2 lf6).
Lemma candidate_308: forall (lf2 : nat) (lf6 : nat), @eq nat (Nat.add lf2 lf6) (Nat.add lf2 lf6).
Lemma candidate_309: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 true) cin).
Lemma candidate_310: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 (@nil bool) true) cin).
Lemma candidate_311: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 lf8 false) cin).
Lemma candidate_312: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 false) cin).
Lemma candidate_313: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 (@nil bool) false) cin).
Lemma candidate_314: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin) (Adder.BV_full_adder w BV.nilbv cin).
Lemma candidate_315: forall (lf2 : nat) (lf6 : nat), @eq nat (Nat.add lf2 lf6) (Nat.add lf6 lf2).
Lemma candidate_316: forall (lf2 : nat) (lf6 : nat), @eq nat (Nat.add lf2 lf6) (Nat.add lf2 lf6).
Lemma candidate_317: forall (w : BV) (cin : bool) (lf2 : nat) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))   (Nat.add lf2 (Bool_compl.bool_to_nat cin)).
Lemma candidate_318: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 true) cin).
Lemma candidate_319: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 (@nil bool) true) cin).
Lemma candidate_320: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 lf8 false) cin).
Lemma candidate_321: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 false) cin).
Lemma candidate_322: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 (@nil bool) false) cin).
Lemma candidate_323: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin) (Adder.BV_full_adder w BV.nilbv cin).
Lemma candidate_324: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_325: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_326: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_327: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_328: forall (cin : bool), @eq nat (bool_to_nat cin) (Nat.add (Bool_compl.bool_to_nat cin) O).
Lemma candidate_329: forall (cin : bool), @eq nat (bool_to_nat cin) (Bool_compl.bool_to_nat cin).
Lemma candidate_330: forall (w : BV) (cin : bool) (lf2 : nat) (lf6 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin)) (Nat.add lf2 lf6).
Lemma candidate_331: forall (lf2 : nat) (lf6 : nat), @eq nat (Nat.add lf6 lf2) (Nat.add lf2 lf6).
Lemma candidate_332: forall (lf2 : nat) (lf6 : nat), @eq nat (Nat.add lf2 lf6) (Nat.add lf2 lf6).
Lemma candidate_333: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin cin)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin cin)) BV.nilbv)).
Lemma candidate_334: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin true)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin true)) BV.nilbv)).
Lemma candidate_335: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w cin) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w cin) BV.nilbv)).
Lemma candidate_336: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_337: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin true)).
Lemma candidate_338: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin) (Adder.BV_full_adder w BV.nilbv cin).
Lemma candidate_339: @eq (list bool) (@nil bool) (@nil bool).
Lemma candidate_340: forall (lf2 : nat) (lf6 : nat), @eq nat (Nat.add lf2 lf6) (Nat.add lf6 lf2).
Lemma candidate_341: forall (lf2 : nat) (lf6 : nat), @eq nat (Nat.add lf2 lf6) (Nat.add lf2 lf6).
Lemma candidate_342: forall (w : BV) (cin : bool) (lf2 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add lf2 (bool_to_nat cin)).
Lemma candidate_343: forall (w : BV) (cin : bool) (lf2 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add lf2 (Bool_compl.bool_to_nat cin)).
Lemma candidate_344: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin cin)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin cin)) BV.nilbv)).
Lemma candidate_345: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin true)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin true)) BV.nilbv)).
Lemma candidate_346: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w cin) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w cin) BV.nilbv)).
Lemma candidate_347: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_348: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin true)).
Lemma candidate_349: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin) (Adder.BV_full_adder w BV.nilbv cin).
Lemma candidate_350: @eq (list bool) (@nil bool) (@nil bool).
Lemma candidate_351: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_352: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_353: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_354: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_355: forall (cin : bool), @eq nat (bool_to_nat cin) (Nat.add (Bool_compl.bool_to_nat cin) O).
Lemma candidate_356: forall (cin : bool), @eq nat (bool_to_nat cin) (Bool_compl.bool_to_nat cin).
Lemma candidate_357: forall (lf7 : nat) (lf5 : nat) (lf6 : nat), @eq nat (Nat.add lf6 lf7) (Nat.add (Nat.add lf5 lf7) lf6).
Lemma candidate_358: forall (lf7 : nat) (lf5 : nat) (lf6 : nat), @eq nat (Nat.add lf7 lf6) (Nat.add (Nat.add lf5 lf7) lf6).
Lemma candidate_359: forall (w : BV) (cin : bool) (lf6 : nat) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))   (Nat.add (Nat.add (BV.BV_to_nat w) O) lf6).
Lemma candidate_360: forall (w : BV) (cin : bool) (lf6 : nat) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (Nat.add (BV.BV_to_nat w) lf6).
Lemma candidate_361: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 true) cin).
Lemma candidate_362: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 (@nil bool) true) cin).
Lemma candidate_363: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 lf8 false) cin).
Lemma candidate_364: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 false) cin).
Lemma candidate_365: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 (@nil bool) false) cin).
Lemma candidate_366: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin) (Adder.BV_full_adder w BV.nilbv cin).
Lemma candidate_367: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (Nat.add lf5 lf7).
Lemma candidate_368: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (Nat.add lf7 lf5).
Lemma candidate_369: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (Nat.add lf7 O).
Lemma candidate_370: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (lf7).
Lemma candidate_371: forall (lf7 : nat) (lf5 : nat) (lf6 : nat), @eq nat (Nat.add (Nat.add lf5 lf7) lf6) (Nat.add lf6 lf7).
Lemma candidate_372: forall (lf7 : nat) (lf5 : nat) (lf6 : nat), @eq nat (Nat.add (Nat.add lf5 lf7) lf6) (Nat.add lf7 lf6).
Lemma candidate_373: forall (w : BV) (cin : bool) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))   (Nat.add (Nat.add (BV.BV_to_nat w) O) (bool_to_nat cin)).
Lemma candidate_374: forall (w : BV) (cin : bool) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))   (Nat.add (BV.BV_to_nat w) (bool_to_nat cin)).
Lemma candidate_375: forall (lf7 : nat) (w : BV) (cin : bool) (lf5 : nat) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))   (Nat.add (Nat.add lf5 lf7) (Bool_compl.bool_to_nat cin)).
Lemma candidate_376: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 true) cin).
Lemma candidate_377: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 (@nil bool) true) cin).
Lemma candidate_378: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 lf8 false) cin).
Lemma candidate_379: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 false) cin).
Lemma candidate_380: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 (@nil bool) false) cin).
Lemma candidate_381: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin) (Adder.BV_full_adder w BV.nilbv cin).
Lemma candidate_382: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (Nat.add lf5 lf7).
Lemma candidate_383: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (Nat.add lf7 lf5).
Lemma candidate_384: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (Nat.add lf7 O).
Lemma candidate_385: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (lf7).
Lemma candidate_386: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_387: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_388: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_389: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_390: forall (cin : bool), @eq nat (bool_to_nat cin) (Nat.add (Bool_compl.bool_to_nat cin) O).
Lemma candidate_391: forall (cin : bool), @eq nat (bool_to_nat cin) (Bool_compl.bool_to_nat cin).
Lemma candidate_392: forall (w : BV) (cin : bool) (lf6 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add (BV.BV_to_nat w) O) lf6).
Lemma candidate_393: forall (w : BV) (cin : bool) (lf6 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (BV.BV_to_nat w) lf6).
Lemma candidate_394: forall (lf7 : nat) (w : BV) (cin : bool) (lf5 : nat) (lf6 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add lf5 lf7) lf6).
Lemma candidate_395: forall (lf7 : nat) (lf5 : nat) (lf6 : nat), @eq nat (Nat.add lf6 lf7) (Nat.add (Nat.add lf5 lf7) lf6).
Lemma candidate_396: forall (lf7 : nat) (lf5 : nat) (lf6 : nat), @eq nat (Nat.add lf7 lf6) (Nat.add (Nat.add lf5 lf7) lf6).
Lemma candidate_397: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin cin)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin cin)) BV.nilbv)).
Lemma candidate_398: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin true)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin true)) BV.nilbv)).
Lemma candidate_399: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w cin) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w cin) BV.nilbv)).
Lemma candidate_400: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_401: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin true)).
Lemma candidate_402: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin) (Adder.BV_full_adder w BV.nilbv cin).
Lemma candidate_403: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (Nat.add lf5 lf7).
Lemma candidate_404: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (Nat.add lf7 lf5).
Lemma candidate_405: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (Nat.add lf7 O).
Lemma candidate_406: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (lf7).
Lemma candidate_407: forall (lf7 : nat) (lf5 : nat) (lf6 : nat), @eq nat (Nat.add (Nat.add lf5 lf7) lf6) (Nat.add lf6 lf7).
Lemma candidate_408: forall (lf7 : nat) (lf5 : nat) (lf6 : nat), @eq nat (Nat.add (Nat.add lf5 lf7) lf6) (Nat.add lf7 lf6).
Lemma candidate_409: @eq (list bool) (@nil bool) (@nil bool).
Lemma candidate_410: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add (BV.BV_to_nat w) O) (bool_to_nat cin)).
Lemma candidate_411: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (BV.BV_to_nat w) (bool_to_nat cin)).
Lemma candidate_412: forall (lf7 : nat) (w : BV) (cin : bool) (lf5 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add lf5 lf7) (bool_to_nat cin)).
Lemma candidate_413: forall (lf7 : nat) (w : BV) (cin : bool) (lf5 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add lf5 lf7) (Bool_compl.bool_to_nat cin)).
Lemma candidate_414: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin cin)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin cin)) BV.nilbv)).
Lemma candidate_415: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin true)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin true)) BV.nilbv)).
Lemma candidate_416: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w cin) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w cin) BV.nilbv)).
Lemma candidate_417: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_418: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin true)).
Lemma candidate_419: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin) (Adder.BV_full_adder w BV.nilbv cin).
Lemma candidate_420: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (Nat.add lf5 lf7).
Lemma candidate_421: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (Nat.add lf7 lf5).
Lemma candidate_422: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (Nat.add lf7 O).
Lemma candidate_423: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (lf7).
Lemma candidate_424: @eq (list bool) (@nil bool) (@nil bool).
Lemma candidate_425: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_426: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_427: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_428: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_429: forall (cin : bool), @eq nat (bool_to_nat cin) (Nat.add (Bool_compl.bool_to_nat cin) O).
Lemma candidate_430: forall (cin : bool), @eq nat (bool_to_nat cin) (Bool_compl.bool_to_nat cin).
Lemma candidate_431: forall (w : BV) (cin : bool) (lf6 : nat) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))   (Nat.add (Nat.add (BV.BV_to_nat w) O) lf6).
Lemma candidate_432: forall (w : BV) (cin : bool) (lf6 : nat) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (Nat.add (BV.BV_to_nat w) lf6).
Lemma candidate_433: forall (lf7 : nat) (lf6 : nat) (lf8 : list bool), @eq nat (Nat.add lf6 lf7) (Nat.add (Nat.add (BV_to_nat lf8) lf7) lf6).
Lemma candidate_434: forall (lf7 : nat) (lf6 : nat) (lf8 : list bool), @eq nat (Nat.add lf7 lf6) (Nat.add (Nat.add (BV_to_nat lf8) lf7) lf6).
Lemma candidate_435: forall (lf7 : nat) (w : BV) (cin : bool) (lf6 : nat) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (Nat.add (Nat.add (O) lf7) lf6).
Lemma candidate_436: forall (lf7 : nat) (lf8 : list bool), @eq nat (Nat.add (BV_to_nat lf8) lf7) (Nat.add lf7 O).
Lemma candidate_437: forall (lf7 : nat) (lf8 : list bool), @eq nat (Nat.add (BV_to_nat lf8) lf7) (lf7).
Lemma candidate_438: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 true) cin).
Lemma candidate_439: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 (@nil bool) true) cin).
Lemma candidate_440: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 lf8 false) cin).
Lemma candidate_441: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 false) cin).
Lemma candidate_442: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 (@nil bool) false) cin).
Lemma candidate_443: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin) (Adder.BV_full_adder w BV.nilbv cin).
Lemma candidate_444: forall (lf7 : nat) (lf6 : nat) (lf8 : list bool), @eq nat (Nat.add (Nat.add (BV_to_nat lf8) lf7) lf6) (Nat.add lf6 lf7).
Lemma candidate_445: forall (lf7 : nat) (lf6 : nat) (lf8 : list bool), @eq nat (Nat.add (Nat.add (BV_to_nat lf8) lf7) lf6) (Nat.add lf7 lf6).
Lemma candidate_446: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 true)).
Lemma candidate_447: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 (@nil bool) true)).
Lemma candidate_448: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 lf8 false)).
Lemma candidate_449: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 false)).
Lemma candidate_450: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 (@nil bool) false)).
Lemma candidate_451: forall (lf8 : list bool), @eq nat (BV_to_nat lf8) (O).
Lemma candidate_452: forall (w : BV) (cin : bool) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))   (Nat.add (Nat.add (BV.BV_to_nat w) O) (bool_to_nat cin)).
Lemma candidate_453: forall (w : BV) (cin : bool) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))   (Nat.add (BV.BV_to_nat w) (bool_to_nat cin)).
Lemma candidate_454: forall (lf7 : nat) (w : BV) (cin : bool) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))   (Nat.add (Nat.add (O) lf7) (bool_to_nat cin)).
Lemma candidate_455: forall (lf7 : nat) (w : BV) (cin : bool) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))   (Nat.add (Nat.add (BV_to_nat lf8) lf7) (Bool_compl.bool_to_nat cin)).
Lemma candidate_456: forall (lf7 : nat) (lf8 : list bool), @eq nat (Nat.add (BV_to_nat lf8) lf7) (Nat.add lf7 O).
Lemma candidate_457: forall (lf7 : nat) (lf8 : list bool), @eq nat (Nat.add (BV_to_nat lf8) lf7) (lf7).
Lemma candidate_458: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 true) cin).
Lemma candidate_459: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 (@nil bool) true) cin).
Lemma candidate_460: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 lf8 false) cin).
Lemma candidate_461: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 false) cin).
Lemma candidate_462: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 (@nil bool) false) cin).
Lemma candidate_463: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin) (Adder.BV_full_adder w BV.nilbv cin).
Lemma candidate_464: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 true)).
Lemma candidate_465: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 (@nil bool) true)).
Lemma candidate_466: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 lf8 false)).
Lemma candidate_467: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 false)).
Lemma candidate_468: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 (@nil bool) false)).
Lemma candidate_469: forall (lf8 : list bool), @eq nat (BV_to_nat lf8) (O).
Lemma candidate_470: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_471: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_472: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_473: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_474: forall (cin : bool), @eq nat (bool_to_nat cin) (Nat.add (Bool_compl.bool_to_nat cin) O).
Lemma candidate_475: forall (cin : bool), @eq nat (bool_to_nat cin) (Bool_compl.bool_to_nat cin).
Lemma candidate_476: forall (lf7 : nat) (w : BV) (cin : bool) (lf6 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add (O) lf7) lf6).
Lemma candidate_477: forall (w : BV) (cin : bool) (lf6 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add (BV.BV_to_nat w) O) lf6).
Lemma candidate_478: forall (w : BV) (cin : bool) (lf6 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (BV.BV_to_nat w) lf6).
Lemma candidate_479: forall (lf7 : nat) (w : BV) (cin : bool) (lf6 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6).
Lemma candidate_480: forall (lf7 : nat) (lf6 : nat), @eq nat (Nat.add lf6 lf7) (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6).
Lemma candidate_481: forall (lf7 : nat) (lf6 : nat), @eq nat (Nat.add lf7 lf6) (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6).
Lemma candidate_482: forall (lf7 : nat) (lf6 : nat), @eq nat (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6) (Nat.add lf6 lf7).
Lemma candidate_483: forall (lf7 : nat) (lf6 : nat), @eq nat (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6) (Nat.add lf7 lf6).
Lemma candidate_484: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin cin)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin cin)) BV.nilbv)).
Lemma candidate_485: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin true)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin true)) BV.nilbv)).
Lemma candidate_486: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w cin) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w cin) BV.nilbv)).
Lemma candidate_487: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_488: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin true)).
Lemma candidate_489: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin) (Adder.BV_full_adder w BV.nilbv cin).
Lemma candidate_490: @eq nat (BV_to_nat (@nil bool)) (O).
Lemma candidate_491: forall (lf7 : nat), @eq nat (Nat.add (BV_to_nat (@nil bool)) lf7) (Nat.add lf7 O).
Lemma candidate_492: forall (lf7 : nat), @eq nat (Nat.add (BV_to_nat (@nil bool)) lf7) (lf7).
Lemma candidate_493: @eq (list bool) (@nil bool) (@nil bool).
Lemma candidate_494: forall (lf7 : nat) (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add (O) lf7) (bool_to_nat cin)).
Lemma candidate_495: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add (BV.BV_to_nat w) O) (bool_to_nat cin)).
Lemma candidate_496: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (BV.BV_to_nat w) (bool_to_nat cin)).
Lemma candidate_497: forall (lf7 : nat) (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) (bool_to_nat cin)).
Lemma candidate_498: forall (lf7 : nat) (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) (Bool_compl.bool_to_nat cin)).
Lemma candidate_499: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin cin)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin cin)) BV.nilbv)).
Lemma candidate_500: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin true)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin true)) BV.nilbv)).
Lemma candidate_501: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w cin) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w cin) BV.nilbv)).
Lemma candidate_502: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_503: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin true)).
Lemma candidate_504: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin) (Adder.BV_full_adder w BV.nilbv cin).
Lemma candidate_505: @eq nat (BV_to_nat (@nil bool)) (O).
Lemma candidate_506: forall (lf7 : nat), @eq nat (Nat.add (BV_to_nat (@nil bool)) lf7) (Nat.add lf7 O).
Lemma candidate_507: forall (lf7 : nat), @eq nat (Nat.add (BV_to_nat (@nil bool)) lf7) (lf7).
Lemma candidate_508: @eq (list bool) (@nil bool) (@nil bool).
Lemma candidate_509: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_510: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_511: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_512: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_513: forall (cin : bool), @eq nat (bool_to_nat cin) (Nat.add (Bool_compl.bool_to_nat cin) O).
Lemma candidate_514: forall (cin : bool), @eq nat (bool_to_nat cin) (Bool_compl.bool_to_nat cin).
Lemma candidate_515: forall (w : BV) (lf5 : nat) (lf6 : nat), @eq nat (Nat.add (BV.BV_to_nat w) lf6)   (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6).
Lemma candidate_516: forall (w : BV) (lf5 : nat) (lf6 : nat), @eq nat (Nat.add lf6 (BV.BV_to_nat w))   (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6).
Lemma candidate_517: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (BV.BV_to_nat lf4) O).
Lemma candidate_518: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (BV.BV_to_nat lf4).
Lemma candidate_519: forall (w : BV), @eq nat (BV_to_nat w) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_520: forall (w : BV), @eq nat (BV_to_nat w) (BV.BV_to_nat w).
Lemma candidate_521: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (BV.BV_to_nat lf4) O).
Lemma candidate_522: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (BV.BV_to_nat lf4).
Lemma candidate_523: forall (w : BV) (lf5 : nat) (lf6 : nat), @eq nat (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6)   (Nat.add (BV.BV_to_nat w) lf6).
Lemma candidate_524: forall (w : BV) (lf5 : nat) (lf6 : nat), @eq nat (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6)   (Nat.add lf6 (BV.BV_to_nat w)).
Lemma candidate_525: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (Nat.add (BV.BV_to_nat w) lf5).
Lemma candidate_526: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_527: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (Nat.add lf5 (BV.BV_to_nat w)).
Lemma candidate_528: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (BV.BV_to_nat w).
Lemma candidate_529: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (BV.BV_to_nat lf4) O).
Lemma candidate_530: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (BV.BV_to_nat lf4).
Lemma candidate_531: forall (w : BV), @eq nat (BV_to_nat w) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_532: forall (w : BV), @eq nat (BV_to_nat w) (BV.BV_to_nat w).
Lemma candidate_533: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (BV.BV_to_nat lf4) O).
Lemma candidate_534: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (BV.BV_to_nat lf4).
Lemma candidate_535: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (Nat.add (BV.BV_to_nat w) lf5).
Lemma candidate_536: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_537: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (Nat.add lf5 (BV.BV_to_nat w)).
Lemma candidate_538: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (BV.BV_to_nat w).
Lemma candidate_539: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_540: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_541: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_542: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_543: forall (cin : bool), @eq nat (bool_to_nat cin) (Nat.add (Bool_compl.bool_to_nat cin) O).
Lemma candidate_544: forall (cin : bool), @eq nat (bool_to_nat cin) (Bool_compl.bool_to_nat cin).
Lemma candidate_545: forall (w : BV) (lf6 : nat) (lf8 : list bool), @eq nat (Nat.add (BV.BV_to_nat w) lf6)   (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) lf6).
Lemma candidate_546: forall (w : BV) (lf6 : nat) (lf8 : list bool), @eq nat (Nat.add lf6 (BV.BV_to_nat w))   (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) lf6).
Lemma candidate_547: forall (w : BV) (lf4 : BV) (lf6 : nat), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add (O) (BV_to_nat w)) lf6).
Lemma candidate_548: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (BV.BV_to_nat lf4) O).
Lemma candidate_549: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (BV.BV_to_nat lf4).
Lemma candidate_550: forall (w : BV) (lf8 : list bool), @eq nat (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_551: forall (w : BV) (lf8 : list bool), @eq nat (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (BV.BV_to_nat w).
Lemma candidate_552: forall (w : BV), @eq nat (BV_to_nat w) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_553: forall (w : BV), @eq nat (BV_to_nat w) (BV.BV_to_nat w).
Lemma candidate_554: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (BV.BV_to_nat lf4) O).
Lemma candidate_555: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (BV.BV_to_nat lf4).
Lemma candidate_556: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 true)).
Lemma candidate_557: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 (@nil bool) true)).
Lemma candidate_558: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 lf8 false)).
Lemma candidate_559: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 false)).
Lemma candidate_560: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 (@nil bool) false)).
Lemma candidate_561: forall (lf8 : list bool), @eq nat (BV_to_nat lf8) (O).
Lemma candidate_562: forall (w : BV) (lf6 : nat) (lf8 : list bool), @eq nat (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) lf6)   (Nat.add (BV.BV_to_nat w) lf6).
Lemma candidate_563: forall (w : BV) (lf6 : nat) (lf8 : list bool), @eq nat (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) lf6)   (Nat.add lf6 (BV.BV_to_nat w)).
Lemma candidate_564: forall (w : BV) (lf4 : BV) (cin : bool), @eq nat (BV_to_nat lf4)   (Nat.add (Nat.add (O) (BV_to_nat w)) (bool_to_nat cin)).
Lemma candidate_565: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (BV.BV_to_nat lf4) O).
Lemma candidate_566: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (BV.BV_to_nat lf4).
Lemma candidate_567: forall (w : BV) (lf8 : list bool), @eq nat (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_568: forall (w : BV) (lf8 : list bool), @eq nat (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (BV.BV_to_nat w).
Lemma candidate_569: forall (w : BV), @eq nat (BV_to_nat w) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_570: forall (w : BV), @eq nat (BV_to_nat w) (BV.BV_to_nat w).
Lemma candidate_571: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (BV.BV_to_nat lf4) O).
Lemma candidate_572: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (BV.BV_to_nat lf4).
Lemma candidate_573: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 true)).
Lemma candidate_574: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 (@nil bool) true)).
Lemma candidate_575: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 lf8 false)).
Lemma candidate_576: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 false)).
Lemma candidate_577: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 (@nil bool) false)).
Lemma candidate_578: forall (lf8 : list bool), @eq nat (BV_to_nat lf8) (O).
Lemma candidate_579: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_580: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_581: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_582: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_583: forall (cin : bool), @eq nat (bool_to_nat cin) (Nat.add (Bool_compl.bool_to_nat cin) O).
Lemma candidate_584: forall (cin : bool), @eq nat (bool_to_nat cin) (Bool_compl.bool_to_nat cin).
Lemma candidate_585: forall (w : BV) (lf6 : nat), @eq nat (Nat.add (BV.BV_to_nat w) lf6)   (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6).
Lemma candidate_586: forall (w : BV) (lf6 : nat), @eq nat (Nat.add lf6 (BV.BV_to_nat w))   (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6).
Lemma candidate_587: forall (w : BV) (lf4 : BV) (lf6 : nat), @eq nat (BV_to_nat lf4) (Nat.add (Nat.add (O) (BV_to_nat w)) lf6).
Lemma candidate_588: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (BV.BV_to_nat lf4) O).
Lemma candidate_589: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (BV.BV_to_nat lf4).
Lemma candidate_590: forall (w : BV) (lf4 : BV) (lf6 : nat), @eq nat (BV_to_nat lf4)   (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6).
Lemma candidate_591: forall (w : BV), @eq nat (BV_to_nat w) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_592: forall (w : BV), @eq nat (BV_to_nat w) (BV.BV_to_nat w).
Lemma candidate_593: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (BV.BV_to_nat lf4) O).
Lemma candidate_594: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (BV.BV_to_nat lf4).
Lemma candidate_595: @eq nat (BV_to_nat (@nil bool)) (O).
Lemma candidate_596: forall (w : BV), @eq nat (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w))   (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_597: forall (w : BV), @eq nat (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (BV.BV_to_nat w).
Lemma candidate_598: forall (w : BV) (lf6 : nat), @eq nat (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6)   (Nat.add (BV.BV_to_nat w) lf6).
Lemma candidate_599: forall (w : BV) (lf6 : nat), @eq nat (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6)   (Nat.add lf6 (BV.BV_to_nat w)).
Lemma candidate_600: @eq (list bool) (@nil bool) (@nil bool).
Lemma candidate_601: forall (w : BV) (lf4 : BV) (cin : bool), @eq nat (BV_to_nat lf4)   (Nat.add (Nat.add (O) (BV_to_nat w)) (bool_to_nat cin)).
Lemma candidate_602: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (BV.BV_to_nat lf4) O).
Lemma candidate_603: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (BV.BV_to_nat lf4).
Lemma candidate_604: forall (w : BV) (lf4 : BV) (cin : bool), @eq nat (BV_to_nat lf4)   (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (bool_to_nat cin)).
Lemma candidate_605: forall (w : BV), @eq nat (BV_to_nat w) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_606: forall (w : BV), @eq nat (BV_to_nat w) (BV.BV_to_nat w).
Lemma candidate_607: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (Nat.add (BV.BV_to_nat lf4) O).
Lemma candidate_608: forall (lf4 : BV), @eq nat (BV_to_nat lf4) (BV.BV_to_nat lf4).
Lemma candidate_609: @eq nat (BV_to_nat (@nil bool)) (O).
Lemma candidate_610: forall (w : BV), @eq nat (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w))   (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_611: forall (w : BV), @eq nat (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (BV.BV_to_nat w).
Lemma candidate_612: @eq (list bool) (@nil bool) (@nil bool).
Lemma candidate_613: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_614: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_615: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_616: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_617: forall (cin : bool), @eq nat (bool_to_nat cin) (Nat.add (Bool_compl.bool_to_nat cin) O).
Lemma candidate_618: forall (cin : bool), @eq nat (bool_to_nat cin) (Bool_compl.bool_to_nat cin).
Lemma candidate_619: forall (w : BV) (lf5 : nat) (lf6 : nat), @eq nat (Nat.add (BV.BV_to_nat w) lf6)   (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6).
Lemma candidate_620: forall (w : BV) (lf5 : nat) (lf6 : nat), @eq nat (Nat.add lf6 (BV.BV_to_nat w))   (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6).
Lemma candidate_621: forall (w : BV) (cin : bool) (lf5 : nat) (lf6 : nat) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))   (Nat.add (Nat.add lf5 (Nat.add (BV.BV_to_nat w) lf5)) lf6).
Lemma candidate_622: forall (w : BV) (cin : bool) (lf5 : nat) (lf6 : nat) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))   (Nat.add (Nat.add lf5 (Nat.add (BV.BV_to_nat w) O)) lf6).
Lemma candidate_623: forall (w : BV) (cin : bool) (lf5 : nat) (lf6 : nat) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))   (Nat.add (Nat.add lf5 (Nat.add lf5 (BV.BV_to_nat w))) lf6).
Lemma candidate_624: forall (w : BV) (cin : bool) (lf5 : nat) (lf6 : nat) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))   (Nat.add (Nat.add lf5 (BV.BV_to_nat w)) lf6).
Lemma candidate_625: forall (w : BV) (cin : bool) (lf6 : nat) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))   (Nat.add (Nat.add (BV.BV_to_nat w) O) lf6).
Lemma candidate_626: forall (w : BV) (cin : bool) (lf6 : nat) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (Nat.add (BV.BV_to_nat w) lf6).
Lemma candidate_627: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 true) cin).
Lemma candidate_628: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 (@nil bool) true) cin).
Lemma candidate_629: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 lf8 false) cin).
Lemma candidate_630: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 false) cin).
Lemma candidate_631: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 (@nil bool) false) cin).
Lemma candidate_632: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin) (Adder.BV_full_adder w BV.nilbv cin).
Lemma candidate_633: forall (w : BV), @eq nat (BV_to_nat w) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_634: forall (w : BV), @eq nat (BV_to_nat w) (BV.BV_to_nat w).
Lemma candidate_635: forall (w : BV) (lf5 : nat) (lf6 : nat), @eq nat (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6)   (Nat.add (BV.BV_to_nat w) lf6).
Lemma candidate_636: forall (w : BV) (lf5 : nat) (lf6 : nat), @eq nat (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6)   (Nat.add lf6 (BV.BV_to_nat w)).
Lemma candidate_637: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (Nat.add (BV.BV_to_nat w) lf5).
Lemma candidate_638: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_639: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (Nat.add lf5 (BV.BV_to_nat w)).
Lemma candidate_640: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (BV.BV_to_nat w).
Lemma candidate_641: forall (w : BV) (cin : bool) (lf5 : nat), @eq nat   (BV_to_nat      (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin cin)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin cin)) BV.nilbv)))   (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)).
Lemma candidate_642: forall (w : BV) (cin : bool) (lf5 : nat), @eq nat   (BV_to_nat      (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin true)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin true)) BV.nilbv)))   (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)).
Lemma candidate_643: forall (w : BV) (cin : bool) (lf5 : nat), @eq nat   (BV_to_nat      (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w cin) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w cin) BV.nilbv)))   (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)).
Lemma candidate_644: forall (w : BV) (cin : bool) (lf5 : nat), @eq nat   (BV_to_nat      (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin cin)))   (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)).
Lemma candidate_645: forall (w : BV) (cin : bool) (lf5 : nat), @eq nat   (BV_to_nat      (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin true)))   (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)).
Lemma candidate_646: forall (w : BV) (cin : bool) (lf5 : nat), @eq nat (BV_to_nat (Adder.BV_full_adder w BV.nilbv cin))   (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)).
Lemma candidate_647: forall (w : BV) (cin : bool) (lf5 : nat) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))   (Nat.add (Nat.add lf5 (Nat.add (BV.BV_to_nat w) lf5)) (bool_to_nat cin)).
Lemma candidate_648: forall (w : BV) (cin : bool) (lf5 : nat) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))   (Nat.add (Nat.add lf5 (Nat.add (BV.BV_to_nat w) O)) (bool_to_nat cin)).
Lemma candidate_649: forall (w : BV) (cin : bool) (lf5 : nat) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))   (Nat.add (Nat.add lf5 (Nat.add lf5 (BV.BV_to_nat w))) (bool_to_nat cin)).
Lemma candidate_650: forall (w : BV) (cin : bool) (lf5 : nat) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))   (Nat.add (Nat.add lf5 (BV.BV_to_nat w)) (bool_to_nat cin)).
Lemma candidate_651: forall (w : BV) (cin : bool) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))   (Nat.add (Nat.add (BV.BV_to_nat w) O) (bool_to_nat cin)).
Lemma candidate_652: forall (w : BV) (cin : bool) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))   (Nat.add (BV.BV_to_nat w) (bool_to_nat cin)).
Lemma candidate_653: forall (w : BV) (cin : bool) (lf5 : nat) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))   (Nat.add (Nat.add lf5 (BV_to_nat w))      (Nat.add (Bool_compl.bool_to_nat cin) lf5)).
Lemma candidate_654: forall (w : BV) (cin : bool) (lf5 : nat) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))   (Nat.add (Nat.add lf5 (BV_to_nat w))      (Nat.add (Bool_compl.bool_to_nat cin) O)).
Lemma candidate_655: forall (w : BV) (cin : bool) (lf5 : nat) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))   (Nat.add (Nat.add lf5 (BV_to_nat w))      (Nat.add lf5 (Bool_compl.bool_to_nat cin))).
Lemma candidate_656: forall (w : BV) (cin : bool) (lf5 : nat) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))   (Nat.add (Nat.add lf5 (BV_to_nat w)) (Bool_compl.bool_to_nat cin)).
Lemma candidate_657: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 true) cin).
Lemma candidate_658: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 (@nil bool) true) cin).
Lemma candidate_659: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 lf8 false) cin).
Lemma candidate_660: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 false) cin).
Lemma candidate_661: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 (@nil bool) false) cin).
Lemma candidate_662: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin) (Adder.BV_full_adder w BV.nilbv cin).
Lemma candidate_663: forall (w : BV), @eq nat (BV_to_nat w) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_664: forall (w : BV), @eq nat (BV_to_nat w) (BV.BV_to_nat w).
Lemma candidate_665: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (Nat.add (BV.BV_to_nat w) lf5).
Lemma candidate_666: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_667: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (Nat.add lf5 (BV.BV_to_nat w)).
Lemma candidate_668: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (BV.BV_to_nat w).
Lemma candidate_669: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_670: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_671: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_672: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_673: forall (cin : bool), @eq nat (bool_to_nat cin) (Nat.add (Bool_compl.bool_to_nat cin) O).
Lemma candidate_674: forall (cin : bool), @eq nat (bool_to_nat cin) (Bool_compl.bool_to_nat cin).
Lemma candidate_675: forall (w : BV) (cin : bool) (lf5 : nat) (lf6 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add lf5 (Nat.add (BV.BV_to_nat w) lf5)) lf6).
Lemma candidate_676: forall (w : BV) (cin : bool) (lf5 : nat) (lf6 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add lf5 (Nat.add (BV.BV_to_nat w) O)) lf6).
Lemma candidate_677: forall (w : BV) (cin : bool) (lf5 : nat) (lf6 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add lf5 (Nat.add lf5 (BV.BV_to_nat w))) lf6).
Lemma candidate_678: forall (w : BV) (cin : bool) (lf5 : nat) (lf6 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add lf5 (BV.BV_to_nat w)) lf6).
Lemma candidate_679: forall (w : BV) (cin : bool) (lf6 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add (BV.BV_to_nat w) O) lf6).
Lemma candidate_680: forall (w : BV) (cin : bool) (lf6 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (BV.BV_to_nat w) lf6).
Lemma candidate_681: forall (w : BV) (cin : bool) (lf5 : nat) (lf6 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6).
Lemma candidate_682: forall (w : BV) (lf5 : nat) (lf6 : nat), @eq nat (Nat.add (BV.BV_to_nat w) lf6)   (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6).
Lemma candidate_683: forall (w : BV) (lf5 : nat) (lf6 : nat), @eq nat (Nat.add lf6 (BV.BV_to_nat w))   (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6).
Lemma candidate_684: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin cin)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin cin)) BV.nilbv)).
Lemma candidate_685: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin true)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin true)) BV.nilbv)).
Lemma candidate_686: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w cin) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w cin) BV.nilbv)).
Lemma candidate_687: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_688: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin true)).
Lemma candidate_689: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin) (Adder.BV_full_adder w BV.nilbv cin).
Lemma candidate_690: forall (w : BV), @eq nat (BV_to_nat w) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_691: forall (w : BV), @eq nat (BV_to_nat w) (BV.BV_to_nat w).
Lemma candidate_692: forall (w : BV) (lf5 : nat) (lf6 : nat), @eq nat (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6)   (Nat.add (BV.BV_to_nat w) lf6).
Lemma candidate_693: forall (w : BV) (lf5 : nat) (lf6 : nat), @eq nat (Nat.add (Nat.add lf5 (BV_to_nat w)) lf6)   (Nat.add lf6 (BV.BV_to_nat w)).
Lemma candidate_694: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (Nat.add (BV.BV_to_nat w) lf5).
Lemma candidate_695: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_696: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (Nat.add lf5 (BV.BV_to_nat w)).
Lemma candidate_697: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (BV.BV_to_nat w).
Lemma candidate_698: @eq (list bool) (@nil bool) (@nil bool).
Lemma candidate_699: forall (w : BV) (cin : bool) (lf5 : nat), @eq nat   (BV_to_nat      (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin cin)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin cin)) BV.nilbv)))   (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)).
Lemma candidate_700: forall (w : BV) (cin : bool) (lf5 : nat), @eq nat   (BV_to_nat      (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin true)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin true)) BV.nilbv)))   (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)).
Lemma candidate_701: forall (w : BV) (cin : bool) (lf5 : nat), @eq nat   (BV_to_nat      (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w cin) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w cin) BV.nilbv)))   (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)).
Lemma candidate_702: forall (w : BV) (cin : bool) (lf5 : nat), @eq nat   (BV_to_nat      (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin cin)))   (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)).
Lemma candidate_703: forall (w : BV) (cin : bool) (lf5 : nat), @eq nat   (BV_to_nat      (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin true)))   (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)).
Lemma candidate_704: forall (w : BV) (cin : bool) (lf5 : nat), @eq nat (BV_to_nat (Adder.BV_full_adder w BV.nilbv cin))   (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)).
Lemma candidate_705: forall (w : BV) (cin : bool) (lf5 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add lf5 (Nat.add (BV.BV_to_nat w) lf5)) (bool_to_nat cin)).
Lemma candidate_706: forall (w : BV) (cin : bool) (lf5 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add lf5 (Nat.add (BV.BV_to_nat w) O)) (bool_to_nat cin)).
Lemma candidate_707: forall (w : BV) (cin : bool) (lf5 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add lf5 (Nat.add lf5 (BV.BV_to_nat w))) (bool_to_nat cin)).
Lemma candidate_708: forall (w : BV) (cin : bool) (lf5 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add lf5 (BV.BV_to_nat w)) (bool_to_nat cin)).
Lemma candidate_709: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add (BV.BV_to_nat w) O) (bool_to_nat cin)).
Lemma candidate_710: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (BV.BV_to_nat w) (bool_to_nat cin)).
Lemma candidate_711: forall (w : BV) (cin : bool) (lf5 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add lf5 (BV_to_nat w)) (bool_to_nat cin)).
Lemma candidate_712: forall (w : BV) (cin : bool) (lf5 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add lf5 (BV_to_nat w))      (Nat.add (Bool_compl.bool_to_nat cin) lf5)).
Lemma candidate_713: forall (w : BV) (cin : bool) (lf5 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add lf5 (BV_to_nat w))      (Nat.add (Bool_compl.bool_to_nat cin) O)).
Lemma candidate_714: forall (w : BV) (cin : bool) (lf5 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add lf5 (BV_to_nat w))      (Nat.add lf5 (Bool_compl.bool_to_nat cin))).
Lemma candidate_715: forall (w : BV) (cin : bool) (lf5 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add lf5 (BV_to_nat w)) (Bool_compl.bool_to_nat cin)).
Lemma candidate_716: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin cin)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin cin)) BV.nilbv)).
Lemma candidate_717: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin true)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin true)) BV.nilbv)).
Lemma candidate_718: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w cin) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w cin) BV.nilbv)).
Lemma candidate_719: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_720: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin true)).
Lemma candidate_721: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin) (Adder.BV_full_adder w BV.nilbv cin).
Lemma candidate_722: forall (w : BV), @eq nat (BV_to_nat w) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_723: forall (w : BV), @eq nat (BV_to_nat w) (BV.BV_to_nat w).
Lemma candidate_724: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (Nat.add (BV.BV_to_nat w) lf5).
Lemma candidate_725: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_726: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (Nat.add lf5 (BV.BV_to_nat w)).
Lemma candidate_727: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (BV.BV_to_nat w).
Lemma candidate_728: @eq (list bool) (@nil bool) (@nil bool).
Lemma candidate_729: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_730: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_731: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_732: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_733: forall (cin : bool), @eq nat (bool_to_nat cin) (Nat.add (Bool_compl.bool_to_nat cin) O).
Lemma candidate_734: forall (cin : bool), @eq nat (bool_to_nat cin) (Bool_compl.bool_to_nat cin).
Lemma candidate_735: forall (w : BV) (cin : bool) (lf6 : nat) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))   (Nat.add (Nat.add (BV.BV_to_nat w) O) lf6).
Lemma candidate_736: forall (w : BV) (cin : bool) (lf6 : nat) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin)) (Nat.add (BV.BV_to_nat w) lf6).
Lemma candidate_737: forall (w : BV) (lf6 : nat) (lf8 : list bool), @eq nat (Nat.add (BV.BV_to_nat w) lf6)   (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) lf6).
Lemma candidate_738: forall (w : BV) (lf6 : nat) (lf8 : list bool), @eq nat (Nat.add lf6 (BV.BV_to_nat w))   (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) lf6).
Lemma candidate_739: forall (w : BV) (cin : bool) (lf6 : nat) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))   (Nat.add (Nat.add (BV_to_nat lf8) (Nat.add (BV.BV_to_nat w) O)) lf6).
Lemma candidate_740: forall (w : BV) (cin : bool) (lf6 : nat) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))   (Nat.add (Nat.add (BV_to_nat lf8) (BV.BV_to_nat w)) lf6).
Lemma candidate_741: forall (w : BV) (cin : bool) (lf6 : nat) (lf8 : list bool), @eq nat (BV_to_nat (BV_full_adder lf8 w cin))   (Nat.add (Nat.add (O) (BV_to_nat w)) lf6).
Lemma candidate_742: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 true) cin).
Lemma candidate_743: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 (@nil bool) true) cin).
Lemma candidate_744: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 lf8 false) cin).
Lemma candidate_745: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 false) cin).
Lemma candidate_746: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 (@nil bool) false) cin).
Lemma candidate_747: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin) (Adder.BV_full_adder w BV.nilbv cin).
Lemma candidate_748: forall (w : BV) (lf8 : list bool), @eq nat (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_749: forall (w : BV) (lf8 : list bool), @eq nat (Nat.add (BV_to_nat lf8) (BV_to_nat w)) (BV.BV_to_nat w).
Lemma candidate_750: forall (w : BV), @eq nat (BV_to_nat w) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_751: forall (w : BV), @eq nat (BV_to_nat w) (BV.BV_to_nat w).
Lemma candidate_752: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 true)).
Lemma candidate_753: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 (@nil bool) true)).
Lemma candidate_754: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 lf8 false)).
Lemma candidate_755: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 false)).
Lemma candidate_756: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 (@nil bool) false)).
Lemma candidate_757: forall (lf8 : list bool), @eq nat (BV_to_nat lf8) (O).
Lemma candidate_758: forall (w : BV) (lf6 : nat) (lf8 : list bool), @eq nat (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) lf6)   (Nat.add (BV.BV_to_nat w) lf6).
Lemma candidate_759: forall (w : BV) (lf6 : nat) (lf8 : list bool), @eq nat (Nat.add (Nat.add (BV_to_nat lf8) (BV_to_nat w)) lf6)   (Nat.add lf6 (BV.BV_to_nat w)).
Lemma candidate_760: forall (w : BV) (cin : bool) (lf6 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add (BV_to_nat (@nil bool)) (Nat.add (BV.BV_to_nat w) O)) lf6).
Lemma candidate_761: forall (w : BV) (cin : bool) (lf6 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV.BV_to_nat w)) lf6).
Lemma candidate_762: forall (w : BV) (cin : bool) (lf6 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add (O) (BV_to_nat w)) lf6).
Lemma candidate_763: forall (w : BV) (cin : bool) (lf6 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add (BV.BV_to_nat w) O) lf6).
Lemma candidate_764: forall (w : BV) (cin : bool) (lf6 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (BV.BV_to_nat w) lf6).
Lemma candidate_765: forall (w : BV) (cin : bool) (lf6 : nat), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6).
Lemma candidate_766: forall (w : BV) (lf6 : nat), @eq nat (Nat.add (BV.BV_to_nat w) lf6)   (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6).
Lemma candidate_767: forall (w : BV) (lf6 : nat), @eq nat (Nat.add lf6 (BV.BV_to_nat w))   (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6).
Lemma candidate_768: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin cin)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin cin)) BV.nilbv)).
Lemma candidate_769: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin true)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin true)) BV.nilbv)).
Lemma candidate_770: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w cin) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w cin) BV.nilbv)).
Lemma candidate_771: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_772: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin true)).
Lemma candidate_773: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin) (Adder.BV_full_adder w BV.nilbv cin).
Lemma candidate_774: forall (w : BV), @eq nat (BV_to_nat w) (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_775: forall (w : BV), @eq nat (BV_to_nat w) (BV.BV_to_nat w).
Lemma candidate_776: @eq nat (BV_to_nat (@nil bool)) (O).
Lemma candidate_777: forall (w : BV), @eq nat (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w))   (Nat.add (BV.BV_to_nat w) O).
Lemma candidate_778: forall (w : BV), @eq nat (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) (BV.BV_to_nat w).
Lemma candidate_779: forall (w : BV) (lf6 : nat), @eq nat (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6)   (Nat.add (BV.BV_to_nat w) lf6).
Lemma candidate_780: forall (w : BV) (lf6 : nat), @eq nat (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6)   (Nat.add lf6 (BV.BV_to_nat w)).
Lemma candidate_781: @eq (list bool) (@nil bool) (@nil bool).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 5051 seconds
Duplicates removed: 623
Filtered by Quickchick: 110
Filtered by script: 25
Remaining: 23

Lemmas: 
Lemma candidate_175: forall (lf1 : nat), @eq nat (Nat.add lf1 O) lf1.
Lemma candidate_197: forall (lf2 : nat) (lf6 : nat), @eq nat (Nat.add lf6 lf2) (Nat.add lf2 lf6).
Lemma candidate_18: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf5 lf7) (Nat.add lf7 lf5).
Lemma candidate_5: forall (lf2 : nat) (lf6 : nat), @eq nat (Nat.add lf2 lf6) (Nat.add lf6 lf2).
Lemma candidate_95: forall (w : BV) (lf5 : nat), @eq nat (Nat.add lf5 (BV_to_nat w)) (Nat.add (BV.BV_to_nat w) lf5).
Lemma candidate_279: forall (lf7 : nat) (lf6 : nat), @eq nat (Nat.add lf6 lf7) (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6).
Lemma candidate_195: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin) (Adder.BV_full_adder w BV.nilbv cin).
Lemma candidate_69: forall (lf7 : nat) (lf6 : nat), @eq nat (Nat.add (Nat.add (BV_to_nat (@nil bool)) lf7) lf6) (Nat.add lf6 lf7).
Lemma candidate_12: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Nat.add (Bool_compl.bool_to_nat cin) O) O).
Lemma candidate_46: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat (Adder.BV_full_adder_sum lf8 (@nil bool) false)).
Lemma candidate_9: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_10: forall (cin : bool), @eq nat (bool_to_nat cin)   (Bool_compl.bool_to_nat (HalfAdder.half_adder_carry cin true)).
Lemma candidate_11: forall (cin : bool), @eq nat (bool_to_nat cin)   (Nat.add (Bool_compl.bool_to_nat (HalfAdder.half_adder_sum cin false)) O).
Lemma candidate_586: forall (w : BV) (lf6 : nat), @eq nat (Nat.add lf6 (BV.BV_to_nat w))   (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6).
Lemma candidate_157: forall (w : BV) (lf6 : nat), @eq nat (Nat.add (Nat.add (BV_to_nat (@nil bool)) (BV_to_nat w)) lf6)   (Nat.add lf6 (BV.BV_to_nat w)).
Lemma candidate_185: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w (Adder.BV_full_adder_sum lf8 (@nil bool) false) cin).
Lemma candidate_410: forall (w : BV) (cin : bool), @eq nat (BV_to_nat (BV_full_adder (@nil bool) w cin))   (Nat.add (Nat.add (BV.BV_to_nat w) O) (bool_to_nat cin)).
Lemma candidate_193: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin cin)).
Lemma candidate_194: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (Adder.BV_full_adder w BV.nilbv (HalfAdder.half_adder_carry cin true)).
Lemma candidate_45: forall (lf8 : list bool), @eq nat (BV_to_nat lf8)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 false)).
Lemma candidate_184: forall (w : BV) (cin : bool) (lf8 : list bool), @eq BV (BV_full_adder lf8 w cin)   (Adder.BV_full_adder w ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) lf8 false) cin).
Lemma candidate_190: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin cin)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin cin)) BV.nilbv)).
Lemma candidate_191: forall (w : BV) (cin : bool), @eq BV (BV_full_adder (@nil bool) w cin)   (BV.appbv ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) w (HalfAdder.half_adder_carry cin true)) (BV.consbv ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) w (HalfAdder.half_adder_carry cin true)) BV.nilbv)).