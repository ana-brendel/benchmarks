LFind Results
LFind Directory: /home/anabrendel/lfind/benchmarks/circuits/ADDER_tests/AdderProof/_lfind_AdderProof_lemma_plus_assoc_169

Number of Lemmas: 210
Number of Lemmas (after duplicates removed): 37
Number of Lemmas (after QuickChick used to filter): 33
* Number of Candidate Lemmas: 26

Time until ranking: 3159
Time to complete: 4741

Stuck state true independent of hypotheses: true

Category 1:
Count = 0


Category 2:
Count = 3

Lemma candidate_4: forall (lf9 : nat) (lf8 : nat), @eq nat (S (Nat.add (Nat.add lf9 lf8) (Nat.add lf9 lf8)))   (S (Nat.add (Nat.add lf9 lf9) (Nat.add lf8 lf8))).
Lemma candidate_2: forall (l : list bool) (lf8 : nat), @eq nat (S (Nat.add (Nat.add (BV_to_nat l) lf8) (Nat.add (BV_to_nat l) lf8)))   (S (Nat.add (Nat.add (BV_to_nat l) (BV_to_nat l)) (Nat.add lf8 lf8))).
Lemma candidate_3: forall (l0 : list bool) (lf9 : nat), @eq nat   (S (Nat.add (Nat.add lf9 (BV_to_nat l0)) (Nat.add lf9 (BV_to_nat l0))))   (S (Nat.add (Nat.add lf9 lf9) (Nat.add (BV_to_nat l0) (BV_to_nat l0)))).

Category 3 (provable):
Count = 11

Lemma candidate_15: forall (lf9 : nat) (lf8 : nat), @eq nat (Nat.add lf9 lf8) (Nat.add lf8 lf9).
Lemma candidate_8: forall (lf7 : nat) (lf5 : nat), @eq nat (Nat.add lf7 lf5) (Nat.add lf5 lf7).
Lemma candidate_6: forall (lf7 : nat) (lf5 : nat), @eq nat (S (Nat.add lf5 lf7)) (S (Nat.add lf7 lf5)).
Lemma candidate_36: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)).
Lemma candidate_26: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) false)).
Lemma candidate_124: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) false))).
Lemma candidate_63: forall (l0 : list bool), @eq nat (Nat.add (BV_to_nat l0) (BV_to_nat l0))   (Nat.add (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) false)) (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) false))).
Lemma candidate_35: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)).
Lemma candidate_25: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 false)).
Lemma candidate_125: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false))).
Lemma candidate_64: forall (l0 : list bool), @eq nat (Nat.add (BV_to_nat l0) (BV_to_nat l0))   (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 false))).

Category 3 (not provable):
Count = 12

Lemma candidate_34: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@cons bool false (@nil bool)) false)).
Lemma candidate_24: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@cons bool false (@nil bool)) false)).
Lemma candidate_33: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_23: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) (Adder.BV_full_adder_carry l0 (@nil bool) false))).
Lemma candidate_31: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat (Adder.BV_full_adder_sum l (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false))).
Lemma candidate_21: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat (Adder.BV_full_adder_sum l0 (@nil bool) ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l0 false))).
Lemma candidate_32: forall (l : list bool), @eq nat (BV_to_nat l)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l (Adder.BV_full_adder_carry l (@nil bool) false))).
Lemma candidate_22: forall (l0 : list bool), @eq nat (BV_to_nat l0)   (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 (Adder.BV_full_adder_carry l0 (@nil bool) false))).
Lemma candidate_123: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat (Adder.BV_full_adder_carry l (@nil bool) false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))).
Lemma candidate_62: forall (l0 : list bool), @eq nat (Nat.add (BV_to_nat l0) (BV_to_nat l0))   (Nat.add (Bool_compl.bool_to_nat (Adder.BV_full_adder_carry l0 (@nil bool) false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 false)))).
Lemma candidate_122: forall (l : list bool), @eq nat (Nat.add (BV_to_nat l) (BV_to_nat l))   (Nat.add (Bool_compl.bool_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l false)))).
Lemma candidate_61: forall (l0 : list bool), @eq nat (Nat.add (BV_to_nat l0) (BV_to_nat l0))   (Nat.add (Bool_compl.bool_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, bool := match l0 with | nil => fun z : bool => z | cons b l1 => fun z : bool => F0 l1 (HalfAdder.half_adder_carry b z) end) l0 false)) (Nat.add (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 false)) (BV.BV_to_nat ((fix F0 (l0 : list bool) : forall _ : bool, BV.BV := match l0 with | nil => fun _ : bool => BV.nilbv | cons b l1 => fun z : bool => BV.consbv (HalfAdder.half_adder_sum b z) (F0 l1 (HalfAdder.half_adder_carry b z)) end) l0 false)))).