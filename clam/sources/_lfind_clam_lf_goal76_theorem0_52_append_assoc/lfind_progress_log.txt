File Information
- File name: goal76
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal76_theorem0_52_append_assoc
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal76_theorem0_52_append_assoc
- Namespace: adtind
- Proof name: theorem0
- Theorem: Theorem theorem0: forall (x : tree) (y0 : lst),
@eq lst (lfappend (revflat x) y0) (qrevaflat x y0).
- Declarations: 
From lfind Require Import LFind.

Proof Context
* Goal State: @eq lst (lfappend (lfappend (revflat x1) (Cons n (revflat x2))) y)
  (qrevaflat x1 (Cons n (qrevaflat x2 y)))

* Hypothesis:
IHx2 : forall y0 : lst, @eq lst (lfappend (revflat x2) y0) (qrevaflat x2 y0)
x1 : tree
y : lst
x2 : tree
n : natural
IHx1 : forall y0 : lst, @eq lst (lfappend (revflat x1) y0) (qrevaflat x1 y0)

* Types:
Set
natural
Prop
tree
lst

* Polymorphic Types:


* Variables:
x1 : tree
y : lst
x2 : tree
n : natural

* Terms:
forall y0 : lst, @eq lst (lfappend (revflat x1) y0) (qrevaflat x1 y0) : Prop
Cons n (revflat x2) : lst
lfappend (revflat x1) (Cons n (revflat x2)) : lst
y : lst
lfappend (revflat x1) _UNBOUND_REL_1 : lst
qrevaflat x1 (Cons n (qrevaflat x2 y)) : lst
revflat x2 : lst
qrevaflat x2 _UNBOUND_REL_1 : lst
qrevaflat x1 _UNBOUND_REL_1 : lst
revflat x1 : lst
@eq lst (lfappend (revflat x2) _UNBOUND_REL_1) (qrevaflat x2 _UNBOUND_REL_1) : Prop
@eq lst (lfappend (revflat x1) _UNBOUND_REL_1) (qrevaflat x1 _UNBOUND_REL_1) : Prop
x1 : tree
qrevaflat x2 y : lst
lst : Set
tree : Set
forall y0 : lst, @eq lst (lfappend (revflat x2) y0) (qrevaflat x2 y0) : Prop
natural : Set
x2 : tree
lfappend (revflat x2) _UNBOUND_REL_1 : lst
n : natural
Cons n (qrevaflat x2 y) : lst
lfappend (lfappend (revflat x1) (Cons n (revflat x2))) y : lst
@eq lst (lfappend (lfappend (revflat x1) (Cons n (revflat x2))) y)
  (qrevaflat x1 (Cons n (qrevaflat x2 y))) : Prop

* Functions:
lfappend  : forall (_ : lst) (_ : lst), lst
Cons  : forall (_ : natural) (_ : lst), lst
@eq  : forall (A : Type) (_ : A) (_ : A), Prop
revflat  : forall _ : tree, lst
qrevaflat  : forall (_ : tree) (_ : lst), lst

<---GENERALIZATION--->
Time elapsed: 3 seconds
Generalized Variables:
lf3 : lst = qrevaflat x1 (Cons n (qrevaflat x2 y))
lf7 : lst = revflat x2
lf1 : lst = lfappend (lfappend (revflat x1) (Cons n (revflat x2))) y
lf4 : lst = Cons n (qrevaflat x2 y)
lf5 : lst = Cons n (revflat x2)
lf2 : lst = lfappend (revflat x1) (Cons n (revflat x2))
lf8 : lst = revflat x1
lf6 : lst = qrevaflat x2 y

Generalizations:
Lemma conj1: forall (lf1 : lst) (lf3 : lst), @eq lst lf1 lf3.
Lemma conj33: forall (lf2 : lst) (y : lst) (lf3 : lst), @eq lst (lfappend lf2 y) lf3.
Lemma conj37: forall (lf8 : lst) (lf5 : lst) (y : lst) (lf3 : lst), @eq lst (lfappend (lfappend lf8 lf5) y) lf3.
Lemma conj39: forall (lf5 : lst) (x1 : tree) (y : lst) (lf3 : lst), @eq lst (lfappend (lfappend (revflat x1) lf5) y) lf3.
Lemma conj45: forall (lf8 : lst) (y : lst) (lf7 : lst) (n : natural) (lf3 : lst), @eq lst (lfappend (lfappend lf8 (Cons n lf7)) y) lf3.
Lemma conj47: forall (x1 : tree) (y : lst) (lf7 : lst) (n : natural) (lf3 : lst), @eq lst (lfappend (lfappend (revflat x1) (Cons n lf7)) y) lf3.
Lemma conj109: forall (lf8 : lst) (y : lst) (x2 : tree) (n : natural) (lf3 : lst), @eq lst (lfappend (lfappend lf8 (Cons n (revflat x2))) y) lf3.
Lemma conj111: forall (x1 : tree) (y : lst) (x2 : tree) (n : natural) (lf3 : lst), @eq lst (lfappend (lfappend (revflat x1) (Cons n (revflat x2))) y) lf3.
Lemma conj129: forall (lf4 : lst) (x1 : tree) (lf1 : lst), @eq lst lf1 (qrevaflat x1 lf4).
Lemma conj145: forall (lf6 : lst) (x1 : tree) (lf1 : lst) (n : natural), @eq lst lf1 (qrevaflat x1 (Cons n lf6)).
Lemma conj146: forall (x1 : tree) (lf1 : lst) (y : lst) (x2 : tree) (n : natural), @eq lst lf1 (qrevaflat x1 (Cons n (qrevaflat x2 y))).
Lemma conj161: forall (lf2 : lst) (lf4 : lst) (x1 : tree) (y : lst), @eq lst (lfappend lf2 y) (qrevaflat x1 lf4).
Lemma conj165: forall (lf8 : lst) (lf5 : lst) (lf4 : lst) (x1 : tree) (y : lst), @eq lst (lfappend (lfappend lf8 lf5) y) (qrevaflat x1 lf4).
Lemma conj167: forall (lf5 : lst) (lf4 : lst) (x1 : tree) (y : lst), @eq lst (lfappend (lfappend (revflat x1) lf5) y) (qrevaflat x1 lf4).
Lemma conj173: forall (lf8 : lst) (lf4 : lst) (x1 : tree) (y : lst) (lf7 : lst) (n : natural), @eq lst (lfappend (lfappend lf8 (Cons n lf7)) y) (qrevaflat x1 lf4).
Lemma conj175: forall (lf4 : lst) (x1 : tree) (y : lst) (lf7 : lst) (n : natural), @eq lst (lfappend (lfappend (revflat x1) (Cons n lf7)) y) (qrevaflat x1 lf4).
Lemma conj177: forall (lf6 : lst) (lf2 : lst) (x1 : tree) (y : lst) (n : natural), @eq lst (lfappend lf2 y) (qrevaflat x1 (Cons n lf6)).
Lemma conj178: forall (lf2 : lst) (x1 : tree) (y : lst) (x2 : tree) (n : natural), @eq lst (lfappend lf2 y) (qrevaflat x1 (Cons n (qrevaflat x2 y))).
Lemma conj181: forall (lf6 : lst) (lf8 : lst) (lf5 : lst) (x1 : tree) (y : lst) (n : natural), @eq lst (lfappend (lfappend lf8 lf5) y) (qrevaflat x1 (Cons n lf6)).
Lemma conj182: forall (lf8 : lst) (lf5 : lst) (x1 : tree) (y : lst) (x2 : tree) (n : natural), @eq lst (lfappend (lfappend lf8 lf5) y)
  (qrevaflat x1 (Cons n (qrevaflat x2 y))).
Lemma conj183: forall (lf6 : lst) (lf5 : lst) (x1 : tree) (y : lst) (n : natural), @eq lst (lfappend (lfappend (revflat x1) lf5) y) (qrevaflat x1 (Cons n lf6)).
Lemma conj184: forall (lf5 : lst) (x1 : tree) (y : lst) (x2 : tree) (n : natural), @eq lst (lfappend (lfappend (revflat x1) lf5) y)
  (qrevaflat x1 (Cons n (qrevaflat x2 y))).
Lemma conj189: forall (lf6 : lst) (lf8 : lst) (x1 : tree) (y : lst) (n : natural) (lf7 : lst), @eq lst (lfappend (lfappend lf8 (Cons n lf7)) y) (qrevaflat x1 (Cons n lf6)).
Lemma conj190: forall (lf8 : lst) (x1 : tree) (y : lst) (x2 : tree) (n : natural) (lf7 : lst), @eq lst (lfappend (lfappend lf8 (Cons n lf7)) y)
  (qrevaflat x1 (Cons n (qrevaflat x2 y))).
Lemma conj191: forall (lf6 : lst) (x1 : tree) (y : lst) (n : natural) (lf7 : lst), @eq lst (lfappend (lfappend (revflat x1) (Cons n lf7)) y)
  (qrevaflat x1 (Cons n lf6)).
Lemma conj192: forall (x1 : tree) (y : lst) (x2 : tree) (n : natural) (lf7 : lst), @eq lst (lfappend (lfappend (revflat x1) (Cons n lf7)) y)
  (qrevaflat x1 (Cons n (qrevaflat x2 y))).
Lemma conj237: forall (lf8 : lst) (lf4 : lst) (x1 : tree) (y : lst) (x2 : tree) (n : natural), @eq lst (lfappend (lfappend lf8 (Cons n (revflat x2))) y) (qrevaflat x1 lf4).
Lemma conj239: forall (lf4 : lst) (x1 : tree) (y : lst) (x2 : tree) (n : natural), @eq lst (lfappend (lfappend (revflat x1) (Cons n (revflat x2))) y)
  (qrevaflat x1 lf4).
Lemma conj253: forall (lf6 : lst) (lf8 : lst) (x1 : tree) (y : lst) (n : natural) (x2 : tree), @eq lst (lfappend (lfappend lf8 (Cons n (revflat x2))) y)
  (qrevaflat x1 (Cons n lf6)).
Lemma conj254: forall (lf8 : lst) (x1 : tree) (y : lst) (x2 : tree) (n : natural), @eq lst (lfappend (lfappend lf8 (Cons n (revflat x2))) y)
  (qrevaflat x1 (Cons n (qrevaflat x2 y))).
Lemma conj255: forall (lf6 : lst) (x1 : tree) (y : lst) (n : natural) (x2 : tree), @eq lst (lfappend (lfappend (revflat x1) (Cons n (revflat x2))) y)
  (qrevaflat x1 (Cons n lf6)).
Lemma conj256: forall (x1 : tree) (y : lst) (x2 : tree) (n : natural), @eq lst (lfappend (lfappend (revflat x1) (Cons n (revflat x2))) y)
  (qrevaflat x1 (Cons n (qrevaflat x2 y))).


<---VALIDITY CHECKS--->
Time elapsed: 81 seconds
Valid:
Lemma conj256: forall (x1 : tree) (y : lst) (x2 : tree) (n : natural), @eq lst (lfappend (lfappend (revflat x1) (Cons n (revflat x2))) y)
  (qrevaflat x1 (Cons n (qrevaflat x2 y))).

Invalid:
Lemma conj255: forall (lf6 : lst) (x1 : tree) (y : lst) (n : natural) (x2 : tree), @eq lst (lfappend (lfappend (revflat x1) (Cons n (revflat x2))) y)
  (qrevaflat x1 (Cons n lf6)).
Lemma conj254: forall (lf8 : lst) (x1 : tree) (y : lst) (x2 : tree) (n : natural), @eq lst (lfappend (lfappend lf8 (Cons n (revflat x2))) y)
  (qrevaflat x1 (Cons n (qrevaflat x2 y))).
Lemma conj253: forall (lf6 : lst) (lf8 : lst) (x1 : tree) (y : lst) (n : natural) (x2 : tree), @eq lst (lfappend (lfappend lf8 (Cons n (revflat x2))) y)
  (qrevaflat x1 (Cons n lf6)).
Lemma conj239: forall (lf4 : lst) (x1 : tree) (y : lst) (x2 : tree) (n : natural), @eq lst (lfappend (lfappend (revflat x1) (Cons n (revflat x2))) y)
  (qrevaflat x1 lf4).
Lemma conj237: forall (lf8 : lst) (lf4 : lst) (x1 : tree) (y : lst) (x2 : tree) (n : natural), @eq lst (lfappend (lfappend lf8 (Cons n (revflat x2))) y) (qrevaflat x1 lf4).
Lemma conj192: forall (x1 : tree) (y : lst) (x2 : tree) (n : natural) (lf7 : lst), @eq lst (lfappend (lfappend (revflat x1) (Cons n lf7)) y)
  (qrevaflat x1 (Cons n (qrevaflat x2 y))).
Lemma conj191: forall (lf6 : lst) (x1 : tree) (y : lst) (n : natural) (lf7 : lst), @eq lst (lfappend (lfappend (revflat x1) (Cons n lf7)) y)
  (qrevaflat x1 (Cons n lf6)).
Lemma conj190: forall (lf8 : lst) (x1 : tree) (y : lst) (x2 : tree) (n : natural) (lf7 : lst), @eq lst (lfappend (lfappend lf8 (Cons n lf7)) y)
  (qrevaflat x1 (Cons n (qrevaflat x2 y))).
Lemma conj189: forall (lf6 : lst) (lf8 : lst) (x1 : tree) (y : lst) (n : natural) (lf7 : lst), @eq lst (lfappend (lfappend lf8 (Cons n lf7)) y) (qrevaflat x1 (Cons n lf6)).
Lemma conj184: forall (lf5 : lst) (x1 : tree) (y : lst) (x2 : tree) (n : natural), @eq lst (lfappend (lfappend (revflat x1) lf5) y)
  (qrevaflat x1 (Cons n (qrevaflat x2 y))).
Lemma conj183: forall (lf6 : lst) (lf5 : lst) (x1 : tree) (y : lst) (n : natural), @eq lst (lfappend (lfappend (revflat x1) lf5) y) (qrevaflat x1 (Cons n lf6)).
Lemma conj182: forall (lf8 : lst) (lf5 : lst) (x1 : tree) (y : lst) (x2 : tree) (n : natural), @eq lst (lfappend (lfappend lf8 lf5) y)
  (qrevaflat x1 (Cons n (qrevaflat x2 y))).
Lemma conj181: forall (lf6 : lst) (lf8 : lst) (lf5 : lst) (x1 : tree) (y : lst) (n : natural), @eq lst (lfappend (lfappend lf8 lf5) y) (qrevaflat x1 (Cons n lf6)).
Lemma conj178: forall (lf2 : lst) (x1 : tree) (y : lst) (x2 : tree) (n : natural), @eq lst (lfappend lf2 y) (qrevaflat x1 (Cons n (qrevaflat x2 y))).
Lemma conj177: forall (lf6 : lst) (lf2 : lst) (x1 : tree) (y : lst) (n : natural), @eq lst (lfappend lf2 y) (qrevaflat x1 (Cons n lf6)).
Lemma conj175: forall (lf4 : lst) (x1 : tree) (y : lst) (lf7 : lst) (n : natural), @eq lst (lfappend (lfappend (revflat x1) (Cons n lf7)) y) (qrevaflat x1 lf4).
Lemma conj173: forall (lf8 : lst) (lf4 : lst) (x1 : tree) (y : lst) (lf7 : lst) (n : natural), @eq lst (lfappend (lfappend lf8 (Cons n lf7)) y) (qrevaflat x1 lf4).
Lemma conj167: forall (lf5 : lst) (lf4 : lst) (x1 : tree) (y : lst), @eq lst (lfappend (lfappend (revflat x1) lf5) y) (qrevaflat x1 lf4).
Lemma conj165: forall (lf8 : lst) (lf5 : lst) (lf4 : lst) (x1 : tree) (y : lst), @eq lst (lfappend (lfappend lf8 lf5) y) (qrevaflat x1 lf4).
Lemma conj161: forall (lf2 : lst) (lf4 : lst) (x1 : tree) (y : lst), @eq lst (lfappend lf2 y) (qrevaflat x1 lf4).
Lemma conj146: forall (x1 : tree) (lf1 : lst) (y : lst) (x2 : tree) (n : natural), @eq lst lf1 (qrevaflat x1 (Cons n (qrevaflat x2 y))).
Lemma conj145: forall (lf6 : lst) (x1 : tree) (lf1 : lst) (n : natural), @eq lst lf1 (qrevaflat x1 (Cons n lf6)).
Lemma conj129: forall (lf4 : lst) (x1 : tree) (lf1 : lst), @eq lst lf1 (qrevaflat x1 lf4).
Lemma conj111: forall (x1 : tree) (y : lst) (x2 : tree) (n : natural) (lf3 : lst), @eq lst (lfappend (lfappend (revflat x1) (Cons n (revflat x2))) y) lf3.
Lemma conj109: forall (lf8 : lst) (y : lst) (x2 : tree) (n : natural) (lf3 : lst), @eq lst (lfappend (lfappend lf8 (Cons n (revflat x2))) y) lf3.
Lemma conj47: forall (x1 : tree) (y : lst) (lf7 : lst) (n : natural) (lf3 : lst), @eq lst (lfappend (lfappend (revflat x1) (Cons n lf7)) y) lf3.
Lemma conj45: forall (lf8 : lst) (y : lst) (lf7 : lst) (n : natural) (lf3 : lst), @eq lst (lfappend (lfappend lf8 (Cons n lf7)) y) lf3.
Lemma conj39: forall (lf5 : lst) (x1 : tree) (y : lst) (lf3 : lst), @eq lst (lfappend (lfappend (revflat x1) lf5) y) lf3.
Lemma conj37: forall (lf8 : lst) (lf5 : lst) (y : lst) (lf3 : lst), @eq lst (lfappend (lfappend lf8 lf5) y) lf3.
Lemma conj33: forall (lf2 : lst) (y : lst) (lf3 : lst), @eq lst (lfappend lf2 y) lf3.
Lemma conj1: forall (lf1 : lst) (lf3 : lst), @eq lst lf1 lf3.