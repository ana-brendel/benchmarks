File Information
- File name: goal12
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal12_theorem0_40_append_assoc
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal12_theorem0_40_append_assoc
- Namespace: adtind
- Proof name: theorem0
- Theorem: Theorem theorem0: forall x0 y0 : lst, @eq lst (qreva x0 y0) (lfappend (rev x0) y0).
- Declarations: 
From lfind Require Import LFind.

Proof Context
* Goal State: @eq lst (qreva x (Cons n y)) (lfappend (lfappend (rev x) (Cons n Nil)) y)

* Hypothesis:
IHx : forall y0 : lst, @eq lst (qreva x y0) (lfappend (rev x) y0)
x : lst
y : lst
n : natural

* Types:
Set
natural
Prop
lst

* Polymorphic Types:


* Variables:
x : lst
y : lst
n : natural

* Terms:
qreva x (Cons n y) : lst
x : lst
y : lst
Cons n y : lst
lfappend (rev x) _UNBOUND_REL_1 : lst
@eq lst (qreva x (Cons n y)) (lfappend (lfappend (rev x) (Cons n Nil)) y) : Prop
lfappend (rev x) (Cons n Nil) : lst
lfappend (lfappend (rev x) (Cons n Nil)) y : lst
forall y0 : lst, @eq lst (qreva x y0) (lfappend (rev x) y0) : Prop
lst : Set
Cons n Nil : lst
natural : Set
qreva x _UNBOUND_REL_1 : lst
n : natural
rev x : lst
@eq lst (qreva x _UNBOUND_REL_1) (lfappend (rev x) _UNBOUND_REL_1) : Prop
Nil : lst

* Functions:
rev  : forall _ : lst, lst
lfappend  : forall (_ : lst) (_ : lst), lst
qreva  : forall (_ : lst) (_ : lst), lst
Cons  : forall (_ : natural) (_ : lst), lst
@eq  : forall (A : Type) (_ : A) (_ : A), Prop

<---GENERALIZATION--->
Time elapsed: 3 seconds
Generalized Variables:
lf3 : lst = qreva x (Cons n y)
lf7 : lst = Nil
lf1 : lst = lfappend (lfappend (rev x) (Cons n Nil)) y
lf4 : lst = Cons n Nil
lf5 : lst = Cons n y
lf2 : lst = lfappend (rev x) (Cons n Nil)
lf6 : lst = rev x

Generalizations:
Lemma conj1: forall (lf1 : lst) (lf3 : lst), @eq lst lf3 lf1.
Lemma conj17: forall (lf2 : lst) (y : lst) (lf3 : lst), @eq lst lf3 (lfappend lf2 y).
Lemma conj19: forall (lf6 : lst) (lf4 : lst) (y : lst) (lf3 : lst), @eq lst lf3 (lfappend (lfappend lf6 lf4) y).
Lemma conj20: forall (x : lst) (lf4 : lst) (y : lst) (lf3 : lst), @eq lst lf3 (lfappend (lfappend (rev x) lf4) y).
Lemma conj27: forall (lf6 : lst) (y : lst) (lf7 : lst) (n : natural) (lf3 : lst), @eq lst lf3 (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma conj28: forall (x : lst) (y : lst) (lf7 : lst) (n : natural) (lf3 : lst), @eq lst lf3 (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma conj59: forall (lf6 : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst lf3 (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma conj60: forall (x : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst lf3 (lfappend (lfappend (rev x) (Cons n Nil)) y).
Lemma conj65: forall (lf5 : lst) (x : lst) (lf1 : lst), @eq lst (qreva x lf5) lf1.
Lemma conj69: forall (x : lst) (lf1 : lst) (y : lst) (n : natural), @eq lst (qreva x (Cons n y)) lf1.
Lemma conj81: forall (lf2 : lst) (lf5 : lst) (x : lst) (y : lst), @eq lst (qreva x lf5) (lfappend lf2 y).
Lemma conj83: forall (lf6 : lst) (lf5 : lst) (x : lst) (lf4 : lst) (y : lst), @eq lst (qreva x lf5) (lfappend (lfappend lf6 lf4) y).
Lemma conj84: forall (lf5 : lst) (x : lst) (lf4 : lst) (y : lst), @eq lst (qreva x lf5) (lfappend (lfappend (rev x) lf4) y).
Lemma conj85: forall (lf2 : lst) (x : lst) (y : lst) (n : natural), @eq lst (qreva x (Cons n y)) (lfappend lf2 y).
Lemma conj87: forall (lf6 : lst) (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (qreva x (Cons n y)) (lfappend (lfappend lf6 lf4) y).
Lemma conj88: forall (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (qreva x (Cons n y)) (lfappend (lfappend (rev x) lf4) y).
Lemma conj91: forall (lf6 : lst) (lf5 : lst) (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (qreva x lf5) (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma conj92: forall (lf5 : lst) (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (qreva x lf5) (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma conj95: forall (lf6 : lst) (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (qreva x (Cons n y)) (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma conj96: forall (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (qreva x (Cons n y)) (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma conj123: forall (lf6 : lst) (lf5 : lst) (x : lst) (y : lst) (n : natural), @eq lst (qreva x lf5) (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma conj124: forall (lf5 : lst) (x : lst) (y : lst) (n : natural), @eq lst (qreva x lf5) (lfappend (lfappend (rev x) (Cons n Nil)) y).
Lemma conj127: forall (lf6 : lst) (x : lst) (y : lst) (n : natural), @eq lst (qreva x (Cons n y)) (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma conj128: forall (x : lst) (y : lst) (n : natural), @eq lst (qreva x (Cons n y)) (lfappend (lfappend (rev x) (Cons n Nil)) y).


<---VALIDITY CHECKS--->
Time elapsed: 57 seconds
Valid:
Lemma conj128: forall (x : lst) (y : lst) (n : natural), @eq lst (qreva x (Cons n y)) (lfappend (lfappend (rev x) (Cons n Nil)) y).

Invalid:
Lemma conj127: forall (lf6 : lst) (x : lst) (y : lst) (n : natural), @eq lst (qreva x (Cons n y)) (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma conj124: forall (lf5 : lst) (x : lst) (y : lst) (n : natural), @eq lst (qreva x lf5) (lfappend (lfappend (rev x) (Cons n Nil)) y).
Lemma conj123: forall (lf6 : lst) (lf5 : lst) (x : lst) (y : lst) (n : natural), @eq lst (qreva x lf5) (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma conj96: forall (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (qreva x (Cons n y)) (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma conj95: forall (lf6 : lst) (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (qreva x (Cons n y)) (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma conj92: forall (lf5 : lst) (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (qreva x lf5) (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma conj91: forall (lf6 : lst) (lf5 : lst) (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (qreva x lf5) (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma conj88: forall (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (qreva x (Cons n y)) (lfappend (lfappend (rev x) lf4) y).
Lemma conj87: forall (lf6 : lst) (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (qreva x (Cons n y)) (lfappend (lfappend lf6 lf4) y).
Lemma conj85: forall (lf2 : lst) (x : lst) (y : lst) (n : natural), @eq lst (qreva x (Cons n y)) (lfappend lf2 y).
Lemma conj84: forall (lf5 : lst) (x : lst) (lf4 : lst) (y : lst), @eq lst (qreva x lf5) (lfappend (lfappend (rev x) lf4) y).
Lemma conj83: forall (lf6 : lst) (lf5 : lst) (x : lst) (lf4 : lst) (y : lst), @eq lst (qreva x lf5) (lfappend (lfappend lf6 lf4) y).
Lemma conj81: forall (lf2 : lst) (lf5 : lst) (x : lst) (y : lst), @eq lst (qreva x lf5) (lfappend lf2 y).
Lemma conj69: forall (x : lst) (lf1 : lst) (y : lst) (n : natural), @eq lst (qreva x (Cons n y)) lf1.
Lemma conj65: forall (lf5 : lst) (x : lst) (lf1 : lst), @eq lst (qreva x lf5) lf1.
Lemma conj60: forall (x : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst lf3 (lfappend (lfappend (rev x) (Cons n Nil)) y).
Lemma conj59: forall (lf6 : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst lf3 (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma conj28: forall (x : lst) (y : lst) (lf7 : lst) (n : natural) (lf3 : lst), @eq lst lf3 (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma conj27: forall (lf6 : lst) (y : lst) (lf7 : lst) (n : natural) (lf3 : lst), @eq lst lf3 (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma conj20: forall (x : lst) (lf4 : lst) (y : lst) (lf3 : lst), @eq lst lf3 (lfappend (lfappend (rev x) lf4) y).
Lemma conj19: forall (lf6 : lst) (lf4 : lst) (y : lst) (lf3 : lst), @eq lst lf3 (lfappend (lfappend lf6 lf4) y).
Lemma conj17: forall (lf2 : lst) (y : lst) (lf3 : lst), @eq lst lf3 (lfappend lf2 y).
Lemma conj1: forall (lf1 : lst) (lf3 : lst), @eq lst lf3 lf1.