File Information
- File name: goal31
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal31_qreva_qreva_67_qreva_nil
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal31_qreva_qreva_67_qreva_nil
- Namespace: adtind
- Proof name: qreva_qreva
- Theorem: Theorem qreva_qreva: forall x0 : lst, @eq lst (qreva (qreva x0 Nil) Nil) x0.
- Declarations: 
From lfind Require Import LFind.

Proof Context
* Goal State: @eq lst (qreva (qreva x (Cons n Nil)) Nil) (Cons n x)

* Hypothesis:
IHx : @eq lst (qreva (qreva x Nil) Nil) x
x : lst
n : natural

* Types:
Set
natural
Prop
lst

* Polymorphic Types:


* Variables:
x : lst
n : natural

* Terms:
qreva (qreva x (Cons n Nil)) Nil : lst
x : lst
qreva x (Cons n Nil) : lst
Cons n x : lst
qreva x Nil : lst
lst : Set
Cons n Nil : lst
@eq lst (qreva (qreva x (Cons n Nil)) Nil) (Cons n x) : Prop
natural : Set
@eq lst (qreva (qreva x Nil) Nil) x : Prop
n : natural
Nil : lst
qreva (qreva x Nil) Nil : lst

* Functions:
qreva  : forall (_ : lst) (_ : lst), lst
Cons  : forall (_ : natural) (_ : lst), lst
@eq  : forall (A : Type) (_ : A) (_ : A), Prop

<---GENERALIZATION--->
Time elapsed: 2 seconds
Generalized Variables:
lf3 : lst = Cons n Nil
lf1 : lst = qreva (qreva x (Cons n Nil)) Nil
lf4 : lst = Cons n x
lf5 : lst = Nil
lf2 : lst = qreva x (Cons n Nil)

Generalizations:
Lemma conj1: forall (lf4 : lst) (lf1 : lst), @eq lst lf1 lf4.
Lemma conj5: forall (x : lst) (lf1 : lst) (n : natural), @eq lst lf1 (Cons n x).
Lemma conj9: forall (lf2 : lst) (lf5 : lst) (lf4 : lst), @eq lst (qreva lf2 lf5) lf4.
Lemma conj10: forall (lf5 : lst) (x : lst) (lf4 : lst) (lf3 : lst), @eq lst (qreva (qreva x lf3) lf5) lf4.
Lemma conj11: forall (lf2 : lst) (lf4 : lst), @eq lst (qreva lf2 Nil) lf4.
Lemma conj12: forall (x : lst) (lf4 : lst) (lf3 : lst), @eq lst (qreva (qreva x lf3) Nil) lf4.
Lemma conj13: forall (lf2 : lst) (lf5 : lst) (x : lst) (n : natural), @eq lst (qreva lf2 lf5) (Cons n x).
Lemma conj14: forall (lf5 : lst) (x : lst) (n : natural) (lf3 : lst), @eq lst (qreva (qreva x lf3) lf5) (Cons n x).
Lemma conj15: forall (lf2 : lst) (x : lst) (n : natural), @eq lst (qreva lf2 Nil) (Cons n x).
Lemma conj16: forall (x : lst) (n : natural) (lf3 : lst), @eq lst (qreva (qreva x lf3) Nil) (Cons n x).
Lemma conj26: forall (lf5 : lst) (x : lst) (lf4 : lst) (n : natural), @eq lst (qreva (qreva x (Cons n lf5)) lf5) lf4.
Lemma conj28: forall (x : lst) (lf4 : lst) (n : natural), @eq lst (qreva (qreva x (Cons n Nil)) Nil) lf4.
Lemma conj30: forall (lf5 : lst) (x : lst) (n : natural), @eq lst (qreva (qreva x (Cons n lf5)) lf5) (Cons n x).
Lemma conj32: forall (x : lst) (n : natural), @eq lst (qreva (qreva x (Cons n Nil)) Nil) (Cons n x).


<---VALIDITY CHECKS--->
Time elapsed: 31 seconds
Valid:
Lemma conj32: forall (x : lst) (n : natural), @eq lst (qreva (qreva x (Cons n Nil)) Nil) (Cons n x).

Invalid:
Lemma conj30: forall (lf5 : lst) (x : lst) (n : natural), @eq lst (qreva (qreva x (Cons n lf5)) lf5) (Cons n x).
Lemma conj28: forall (x : lst) (lf4 : lst) (n : natural), @eq lst (qreva (qreva x (Cons n Nil)) Nil) lf4.
Lemma conj26: forall (lf5 : lst) (x : lst) (lf4 : lst) (n : natural), @eq lst (qreva (qreva x (Cons n lf5)) lf5) lf4.
Lemma conj16: forall (x : lst) (n : natural) (lf3 : lst), @eq lst (qreva (qreva x lf3) Nil) (Cons n x).
Lemma conj15: forall (lf2 : lst) (x : lst) (n : natural), @eq lst (qreva lf2 Nil) (Cons n x).
Lemma conj14: forall (lf5 : lst) (x : lst) (n : natural) (lf3 : lst), @eq lst (qreva (qreva x lf3) lf5) (Cons n x).
Lemma conj13: forall (lf2 : lst) (lf5 : lst) (x : lst) (n : natural), @eq lst (qreva lf2 lf5) (Cons n x).
Lemma conj12: forall (x : lst) (lf4 : lst) (lf3 : lst), @eq lst (qreva (qreva x lf3) Nil) lf4.
Lemma conj11: forall (lf2 : lst) (lf4 : lst), @eq lst (qreva lf2 Nil) lf4.
Lemma conj10: forall (lf5 : lst) (x : lst) (lf4 : lst) (lf3 : lst), @eq lst (qreva (qreva x lf3) lf5) lf4.
Lemma conj9: forall (lf2 : lst) (lf5 : lst) (lf4 : lst), @eq lst (qreva lf2 lf5) lf4.
Lemma conj5: forall (x : lst) (lf1 : lst) (n : natural), @eq lst lf1 (Cons n x).
Lemma conj1: forall (lf4 : lst) (lf1 : lst), @eq lst lf1 lf4.

<---ADD IMPLICATIONS--->
Time elapsed: 49 seconds
Generalizations:
Lemma conj30: forall (lf5 : lst) (x : lst) (n : natural), @eq lst (qreva (qreva x (Cons n lf5)) lf5) (Cons n x).
Lemma conj30_imp: forall (lf5 : lst) (x : lst) (n : natural), forall _ : @eq lst (qreva (qreva x lf5) lf5) x,
@eq lst (qreva (qreva x (Cons n lf5)) lf5) (Cons n x).
Lemma conj28: forall (x : lst) (lf4 : lst) (n : natural), @eq lst (qreva (qreva x (Cons n Nil)) Nil) lf4.
Lemma conj26: forall (lf5 : lst) (x : lst) (lf4 : lst) (n : natural), @eq lst (qreva (qreva x (Cons n lf5)) lf5) lf4.
Lemma conj16: forall (x : lst) (n : natural) (lf3 : lst), @eq lst (qreva (qreva x lf3) Nil) (Cons n x).
Lemma conj15: forall (lf2 : lst) (x : lst) (n : natural), @eq lst (qreva lf2 Nil) (Cons n x).
Lemma conj14: forall (lf5 : lst) (x : lst) (n : natural) (lf3 : lst), @eq lst (qreva (qreva x lf3) lf5) (Cons n x).
Lemma conj13: forall (lf2 : lst) (lf5 : lst) (x : lst) (n : natural), @eq lst (qreva lf2 lf5) (Cons n x).
Lemma conj12: forall (x : lst) (lf4 : lst) (lf3 : lst), @eq lst (qreva (qreva x lf3) Nil) lf4.
Lemma conj11: forall (lf2 : lst) (lf4 : lst), @eq lst (qreva lf2 Nil) lf4.
Lemma conj10: forall (lf5 : lst) (x : lst) (lf4 : lst) (lf3 : lst), @eq lst (qreva (qreva x lf3) lf5) lf4.
Lemma conj9: forall (lf2 : lst) (lf5 : lst) (lf4 : lst), @eq lst (qreva lf2 lf5) lf4.
Lemma conj5: forall (x : lst) (lf1 : lst) (n : natural), @eq lst lf1 (Cons n x).
Lemma conj1: forall (lf4 : lst) (lf1 : lst), @eq lst lf1 lf4.


<---VALIDITY CHECKS--->
Time elapsed: 73 seconds
Valid:
Lemma conj30_imp: forall (lf5 : lst) (x : lst) (n : natural), forall _ : @eq lst (qreva (qreva x lf5) lf5) x,
@eq lst (qreva (qreva x (Cons n lf5)) lf5) (Cons n x).

Invalid:
Lemma conj1: forall (lf4 : lst) (lf1 : lst), @eq lst lf1 lf4.
Lemma conj5: forall (x : lst) (lf1 : lst) (n : natural), @eq lst lf1 (Cons n x).
Lemma conj9: forall (lf2 : lst) (lf5 : lst) (lf4 : lst), @eq lst (qreva lf2 lf5) lf4.
Lemma conj10: forall (lf5 : lst) (x : lst) (lf4 : lst) (lf3 : lst), @eq lst (qreva (qreva x lf3) lf5) lf4.
Lemma conj11: forall (lf2 : lst) (lf4 : lst), @eq lst (qreva lf2 Nil) lf4.
Lemma conj12: forall (x : lst) (lf4 : lst) (lf3 : lst), @eq lst (qreva (qreva x lf3) Nil) lf4.
Lemma conj13: forall (lf2 : lst) (lf5 : lst) (x : lst) (n : natural), @eq lst (qreva lf2 lf5) (Cons n x).
Lemma conj14: forall (lf5 : lst) (x : lst) (n : natural) (lf3 : lst), @eq lst (qreva (qreva x lf3) lf5) (Cons n x).
Lemma conj15: forall (lf2 : lst) (x : lst) (n : natural), @eq lst (qreva lf2 Nil) (Cons n x).
Lemma conj16: forall (x : lst) (n : natural) (lf3 : lst), @eq lst (qreva (qreva x lf3) Nil) (Cons n x).
Lemma conj26: forall (lf5 : lst) (x : lst) (lf4 : lst) (n : natural), @eq lst (qreva (qreva x (Cons n lf5)) lf5) lf4.
Lemma conj28: forall (x : lst) (lf4 : lst) (n : natural), @eq lst (qreva (qreva x (Cons n Nil)) Nil) lf4.
Lemma conj30: forall (lf5 : lst) (x : lst) (n : natural), @eq lst (qreva (qreva x (Cons n lf5)) lf5) (Cons n x).


<---CREATE SKETCHES--->
Time elapsed: 73 seconds
Sketches:
Sketch conj5_sketch0 : @eq lst lf1 (##hole##)
Sketch conj5_term_sketch0 : @eq lst (Cons n x) (##hole##)
Sketch conj9_sketch0 : @eq lst (##hole##) lf4
Sketch conj9_term_sketch0 : @eq lst (qreva lf2 lf5) (##hole##)
Sketch conj10_sketch0 : @eq lst (qreva (##hole##) lf5) lf4
Sketch conj10_sketch1 : @eq lst (##hole##) lf4
Sketch conj10_term_sketch0 : @eq lst (qreva x lf3) (##hole##)
Sketch conj10_term_sketch1 : @eq lst (qreva (qreva x lf3) lf5) (##hole##)
Sketch conj11_sketch0 : @eq lst (##hole##) lf4
Sketch conj11_sketch1 : @eq lst (qreva lf2 (##hole##)) lf4
Sketch conj11_term_sketch0 : @eq lst (qreva lf2 Nil) (##hole##)
Sketch conj11_term_sketch1 : @eq lst Nil (##hole##)
Sketch conj12_sketch0 : @eq lst (qreva (##hole##) Nil) lf4
Sketch conj12_sketch1 : @eq lst (##hole##) lf4
Sketch conj12_sketch2 : @eq lst (qreva (qreva x lf3) (##hole##)) lf4
Sketch conj12_term_sketch0 : @eq lst (qreva x lf3) (##hole##)
Sketch conj12_term_sketch1 : @eq lst (qreva (qreva x lf3) Nil) (##hole##)
Sketch conj12_term_sketch2 : @eq lst Nil (##hole##)
Sketch conj13_sketch0 : @eq lst (qreva lf2 lf5) (##hole##)
Sketch conj13_sketch1 : @eq lst (##hole##) (Cons n x)
Sketch conj13_term_sketch0 : @eq lst (Cons n x) (##hole##)
Sketch conj13_term_sketch1 : @eq lst (qreva lf2 lf5) (##hole##)
Sketch conj14_sketch0 : @eq lst (qreva (##hole##) lf5) (Cons n x)
Sketch conj14_sketch1 : @eq lst (##hole##) (Cons n x)
Sketch conj14_sketch2 : @eq lst (qreva (qreva x lf3) lf5) (##hole##)
Sketch conj14_term_sketch0 : @eq lst (qreva x lf3) (##hole##)
Sketch conj14_term_sketch1 : @eq lst (qreva (qreva x lf3) lf5) (##hole##)
Sketch conj14_term_sketch2 : @eq lst (Cons n x) (##hole##)
Sketch conj15_sketch0 : @eq lst (qreva lf2 Nil) (##hole##)
Sketch conj15_sketch1 : @eq lst (##hole##) (Cons n x)
Sketch conj15_sketch2 : @eq lst (qreva lf2 (##hole##)) (Cons n x)
Sketch conj15_term_sketch0 : @eq lst (Cons n x) (##hole##)
Sketch conj15_term_sketch1 : @eq lst (qreva lf2 Nil) (##hole##)
Sketch conj15_term_sketch2 : @eq lst Nil (##hole##)
Sketch conj16_sketch0 : @eq lst (qreva (##hole##) Nil) (Cons n x)
Sketch conj16_sketch1 : @eq lst (##hole##) (Cons n x)
Sketch conj16_sketch2 : @eq lst (qreva (qreva x lf3) Nil) (##hole##)
Sketch conj16_sketch3 : @eq lst (qreva (qreva x lf3) (##hole##)) (Cons n x)
Sketch conj16_term_sketch0 : @eq lst (qreva x lf3) (##hole##)
Sketch conj16_term_sketch1 : @eq lst (qreva (qreva x lf3) Nil) (##hole##)
Sketch conj16_term_sketch2 : @eq lst (Cons n x) (##hole##)
Sketch conj16_term_sketch3 : @eq lst Nil (##hole##)
Sketch conj26_sketch0 : @eq lst (qreva (qreva x (##hole##)) lf5) lf4
Sketch conj26_sketch1 : @eq lst (##hole##) lf4
Sketch conj26_sketch2 : @eq lst (qreva (##hole##) lf5) lf4
Sketch conj26_term_sketch0 : @eq lst (Cons n lf5) (##hole##)
Sketch conj26_term_sketch1 : @eq lst (qreva (qreva x (Cons n lf5)) lf5) (##hole##)
Sketch conj26_term_sketch2 : @eq lst (qreva x (Cons n lf5)) (##hole##)
Sketch conj28_sketch0 : @eq lst (##hole##) lf4
Sketch conj28_sketch1 : @eq lst (qreva (##hole##) Nil) lf4
Sketch conj28_sketch2 : @eq lst (qreva (qreva x (##hole##)) Nil) lf4
Sketch conj28_sketch3 : @eq lst (qreva (qreva x (Cons n (##hole##))) (##hole##)) lf4
Sketch conj28_term_sketch0 : @eq lst (qreva (qreva x (Cons n Nil)) Nil) (##hole##)
Sketch conj28_term_sketch1 : @eq lst (qreva x (Cons n Nil)) (##hole##)
Sketch conj28_term_sketch2 : @eq lst (Cons n Nil) (##hole##)
Sketch conj28_term_sketch3 : @eq lst Nil (##hole##)
Sketch conj30_sketch0 : @eq lst (qreva (qreva x (##hole##)) lf5) (Cons n x)
Sketch conj30_sketch1 : @eq lst (##hole##) (Cons n x)
Sketch conj30_sketch2 : @eq lst (qreva (qreva x (Cons n lf5)) lf5) (##hole##)
Sketch conj30_sketch3 : @eq lst (qreva (##hole##) lf5) (Cons n x)
Sketch conj30_term_sketch0 : @eq lst (Cons n lf5) (##hole##)
Sketch conj30_term_sketch1 : @eq lst (qreva (qreva x (Cons n lf5)) lf5) (##hole##)
Sketch conj30_term_sketch2 : @eq lst (Cons n x) (##hole##)
Sketch conj30_term_sketch3 : @eq lst (qreva x (Cons n lf5)) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 157 seconds
Problems per Sketch:
Sketch conj30_sketch0 --> Problem  synth_24
Sketch conj15_sketch1 --> Problem  synth_2
Sketch conj12_sketch0 --> Problem  synth_11
Sketch conj5_sketch0 --> Problem  synth_1
Sketch conj28_sketch0 --> Problem  synth_3
Sketch conj26_term_sketch1 --> Problem  synth_20
Sketch conj16_sketch3 --> Problem  synth_17
Sketch conj14_sketch2 --> Problem  synth_7
Sketch conj15_term_sketch1 --> Problem  synth_9
Sketch conj26_sketch2 --> Problem  synth_5
Sketch conj16_sketch2 --> Problem  synth_13
Sketch conj11_term_sketch1 --> Problem  synth_10
Sketch conj10_term_sketch1 --> Problem  synth_7
Sketch conj30_sketch3 --> Problem  synth_14
Sketch conj15_term_sketch2 --> Problem  synth_10
Sketch conj16_term_sketch1 --> Problem  synth_13
Sketch conj14_term_sketch2 --> Problem  synth_2
Sketch conj30_sketch1 --> Problem  synth_2
Sketch conj26_sketch0 --> Problem  synth_18
Sketch conj30_term_sketch3 --> Problem  synth_14
Sketch conj11_sketch1 --> Problem  synth_8
Sketch conj13_term_sketch1 --> Problem  synth_4
Sketch conj28_term_sketch1 --> Problem  synth_16
Sketch conj12_term_sketch1 --> Problem  synth_13
Sketch conj9_sketch0 --> Problem  synth_3
Sketch conj26_term_sketch2 --> Problem  synth_14
Sketch conj14_term_sketch1 --> Problem  synth_7
Sketch conj12_term_sketch0 --> Problem  synth_6
Sketch conj26_sketch1 --> Problem  synth_3
Sketch conj30_sketch2 --> Problem  synth_20
Sketch conj28_term_sketch0 --> Problem  synth_2
Sketch conj5_term_sketch0 --> Problem  synth_2
Sketch conj10_sketch1 --> Problem  synth_3
Sketch conj9_term_sketch0 --> Problem  synth_4
Sketch conj28_term_sketch3 --> Problem  synth_10
Sketch conj16_sketch1 --> Problem  synth_2
Sketch conj12_sketch1 --> Problem  synth_3
Sketch conj30_term_sketch2 --> Problem  synth_2
Sketch conj12_sketch2 --> Problem  synth_12
Sketch conj10_term_sketch0 --> Problem  synth_6
Sketch conj15_sketch2 --> Problem  synth_15
Sketch conj28_sketch2 --> Problem  synth_21
Sketch conj11_term_sketch0 --> Problem  synth_9
Sketch conj28_sketch3 --> Problem  synth_22
Sketch conj26_term_sketch0 --> Problem  synth_19
Sketch conj16_term_sketch2 --> Problem  synth_2
Sketch conj30_term_sketch1 --> Problem  synth_20
Sketch conj28_sketch1 --> Problem  synth_11
Sketch conj13_term_sketch0 --> Problem  synth_2
Sketch conj15_sketch0 --> Problem  synth_9
Sketch conj28_term_sketch2 --> Problem  synth_23
Sketch conj16_sketch0 --> Problem  synth_16
Sketch conj13_sketch1 --> Problem  synth_2
Sketch conj14_sketch0 --> Problem  synth_14
Sketch conj14_term_sketch0 --> Problem  synth_6
Sketch conj30_term_sketch0 --> Problem  synth_19
Sketch conj16_term_sketch0 --> Problem  synth_6
Sketch conj13_sketch0 --> Problem  synth_4
Sketch conj16_term_sketch3 --> Problem  synth_10
Sketch conj11_sketch0 --> Problem  synth_3
Sketch conj12_term_sketch2 --> Problem  synth_10
Sketch conj10_sketch0 --> Problem  synth_5
Sketch conj15_term_sketch0 --> Problem  synth_2
Sketch conj14_sketch1 --> Problem  synth_2


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 295 seconds

Problem: synth_22
 Nil

Problem: synth_20
 Cons n (lfappend lf5 x)
 qreva lf5 (Cons n x)
 lfappend lf5 (Cons n x)
 Cons n (lfappend x lf5)
 Cons n (lfappend x Nil)
 Cons n x

Problem: synth_18

Problem: synth_17
 Nil

Problem: synth_21

Problem: synth_9
 qreva (lfappend lf2 Nil) Nil
 rev (rev (rev lf2))
 rev (lfappend lf2 Nil)
 lfappend (rev lf2) Nil
 qreva lf2 Nil
 rev lf2

Problem: synth_13
 rev (qreva x (rev lf3))
 rev (qreva x lf3)
 qreva (rev lf3) x
 lfappend (rev lf3) x
 qreva lf3 x
 lfappend lf3 x

Problem: synth_6
 lfappend (rev x) (rev lf3)
 rev (qreva lf3 x)
 rev (lfappend lf3 x)
 lfappend (rev x) lf3
 qreva x (rev lf3)
 qreva x lf3

Problem: synth_11
 qreva (lfappend lf4 Nil) Nil
 rev (rev (rev lf4))
 rev (lfappend lf4 Nil)
 lfappend (rev lf4) Nil
 qreva lf4 Nil
 rev lf4

Problem: synth_7
 rev (qreva x (rev lf3))
 rev (qreva x lf3)
 qreva (rev lf3) x
 lfappend (rev lf3) x
 qreva lf3 x
 lfappend lf3 x

Problem: synth_4
 qreva lf2 (rev lf5)
 qreva lf5 (rev lf2)
 lfappend lf5 (rev lf2)
 qreva lf2 lf5
 qreva lf2 Nil
 rev lf2

Problem: synth_1
 lfappend (lfappend lf1 Nil) Nil
 rev (qreva lf1 Nil)
 qreva (rev lf1) Nil
 rev (rev lf1)
 lfappend lf1 Nil
 lf1

Problem: synth_23
 Cons n Nil

Problem: synth_16
 lfappend (qreva x Nil) (Cons n Nil)
 qreva (lfappend x Nil) (Cons n Nil)
 lfappend (rev (rev (rev x))) (Cons n Nil)
 lfappend (rev (lfappend x Nil)) (Cons n Nil)
 qreva x (Cons n Nil)
 lfappend (rev x) (Cons n Nil)

Problem: synth_19
 lfappend lf5 (Cons n Nil)
 lfappend (rev (rev lf5)) (Cons n Nil)
 lfappend (rev lf5) (Cons n Nil)
 Cons n (rev lf5)
 Cons n lf5
 Cons n Nil

Problem: synth_15
 Nil

Problem: synth_14
 lfappend (rev x) (Cons n (rev lf5))
 lfappend (rev x) (Cons n lf5)
 qreva x (Cons n (rev lf5))
 qreva x (Cons n lf5)
 qreva x (Cons n Nil)
 lfappend (rev x) (Cons n Nil)

Problem: synth_10
 Nil

Problem: synth_8
 Nil

Problem: synth_24
 lfappend lf5 (Cons n Nil)
 lfappend (rev (rev lf5)) (Cons n Nil)
 lfappend (rev lf5) (Cons n Nil)
 Cons n (rev lf5)
 Cons n lf5
 Cons n Nil

Problem: synth_3
 lfappend (lfappend lf4 Nil) Nil
 rev (qreva lf4 Nil)
 qreva (rev lf4) Nil
 rev (rev lf4)
 lfappend lf4 Nil
 lf4

Problem: synth_12
 Nil

Problem: synth_5
 qreva lf5 (rev lf4)
 lfappend lf5 (rev lf4)
 qreva lf4 (rev lf5)
 qreva lf4 lf5
 qreva lf4 Nil
 rev lf4

Problem: synth_2
 Cons n (qreva (rev x) Nil)
 rev (qreva x (Cons n Nil))
 rev (lfappend (rev x) (Cons n Nil))
 Cons n (rev (rev x))
 Cons n (lfappend x Nil)
 Cons n x

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 295 seconds
Lemmas:
Lemma candidate_1: forall (n : natural) (x : lst), @eq lst (qreva (qreva x (Cons n Nil)) Nil) (Cons n x).
Lemma candidate_2: forall (n : natural) (x : lst) (lf5 : lst), forall _ : @eq lst (qreva (qreva x lf5) lf5) x, @eq lst (qreva (qreva x (Cons n lf5)) lf5) (Cons n x).
Lemma candidate_3: forall (lf1 : lst), @eq lst lf1 (lfappend (lfappend lf1 Nil) Nil).
Lemma candidate_4: forall (lf1 : lst), @eq lst lf1 (rev (qreva lf1 Nil)).
Lemma candidate_5: forall (lf1 : lst), @eq lst lf1 (qreva (rev lf1) Nil).
Lemma candidate_6: forall (lf1 : lst), @eq lst lf1 (rev (rev lf1)).
Lemma candidate_7: forall (lf1 : lst), @eq lst lf1 (lfappend lf1 Nil).
Lemma candidate_8: forall (lf1 : lst), @eq lst lf1 (lf1).
Lemma candidate_9: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (qreva (rev x) Nil)).
Lemma candidate_10: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (qreva x (Cons n Nil))).
Lemma candidate_11: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (lfappend (rev x) (Cons n Nil))).
Lemma candidate_12: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rev (rev x))).
Lemma candidate_13: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_14: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_15: forall (lf4 : lst), @eq lst (lfappend (lfappend lf4 Nil) Nil) lf4.
Lemma candidate_16: forall (lf4 : lst), @eq lst (rev (qreva lf4 Nil)) lf4.
Lemma candidate_17: forall (lf4 : lst), @eq lst (qreva (rev lf4) Nil) lf4.
Lemma candidate_18: forall (lf4 : lst), @eq lst (rev (rev lf4)) lf4.
Lemma candidate_19: forall (lf4 : lst), @eq lst (lfappend lf4 Nil) lf4.
Lemma candidate_20: forall (lf4 : lst), @eq lst (lf4) lf4.
Lemma candidate_21: forall (lf5 : lst) (lf2 : lst), @eq lst (qreva lf2 lf5) (qreva lf2 (rev lf5)).
Lemma candidate_22: forall (lf5 : lst) (lf2 : lst), @eq lst (qreva lf2 lf5) (qreva lf5 (rev lf2)).
Lemma candidate_23: forall (lf5 : lst) (lf2 : lst), @eq lst (qreva lf2 lf5) (lfappend lf5 (rev lf2)).
Lemma candidate_24: forall (lf5 : lst) (lf2 : lst), @eq lst (qreva lf2 lf5) (qreva lf2 lf5).
Lemma candidate_25: forall (lf5 : lst) (lf2 : lst), @eq lst (qreva lf2 lf5) (qreva lf2 Nil).
Lemma candidate_26: forall (lf5 : lst) (lf2 : lst), @eq lst (qreva lf2 lf5) (rev lf2).
Lemma candidate_27: forall (lf4 : lst) (lf5 : lst), @eq lst (qreva (qreva lf5 (rev lf4)) lf5) lf4.
Lemma candidate_28: forall (lf4 : lst) (lf5 : lst), @eq lst (qreva (lfappend lf5 (rev lf4)) lf5) lf4.
Lemma candidate_29: forall (lf4 : lst) (lf5 : lst), @eq lst (qreva (qreva lf4 (rev lf5)) lf5) lf4.
Lemma candidate_30: forall (lf4 : lst) (lf5 : lst), @eq lst (qreva (qreva lf4 lf5) lf5) lf4.
Lemma candidate_31: forall (lf4 : lst) (lf5 : lst), @eq lst (qreva (qreva lf4 Nil) lf5) lf4.
Lemma candidate_32: forall (lf4 : lst) (lf5 : lst), @eq lst (qreva (rev lf4) lf5) lf4.
Lemma candidate_33: forall (lf4 : lst), @eq lst (lfappend (lfappend lf4 Nil) Nil) lf4.
Lemma candidate_34: forall (lf4 : lst), @eq lst (rev (qreva lf4 Nil)) lf4.
Lemma candidate_35: forall (lf4 : lst), @eq lst (qreva (rev lf4) Nil) lf4.
Lemma candidate_36: forall (lf4 : lst), @eq lst (rev (rev lf4)) lf4.
Lemma candidate_37: forall (lf4 : lst), @eq lst (lfappend lf4 Nil) lf4.
Lemma candidate_38: forall (lf4 : lst), @eq lst (lf4) lf4.
Lemma candidate_39: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (lfappend (rev x) (rev lf3)).
Lemma candidate_40: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (rev (qreva lf3 x)).
Lemma candidate_41: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (rev (lfappend lf3 x)).
Lemma candidate_42: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (lfappend (rev x) lf3).
Lemma candidate_43: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (qreva x (rev lf3)).
Lemma candidate_44: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (qreva x lf3).
Lemma candidate_45: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x lf3) lf5) (rev (qreva x (rev lf3))).
Lemma candidate_46: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x lf3) lf5) (rev (qreva x lf3)).
Lemma candidate_47: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x lf3) lf5) (qreva (rev lf3) x).
Lemma candidate_48: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x lf3) lf5) (lfappend (rev lf3) x).
Lemma candidate_49: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x lf3) lf5) (qreva lf3 x).
Lemma candidate_50: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x lf3) lf5) (lfappend lf3 x).
Lemma candidate_51: forall (lf4 : lst), @eq lst (lfappend (lfappend lf4 Nil) Nil) lf4.
Lemma candidate_52: forall (lf4 : lst), @eq lst (rev (qreva lf4 Nil)) lf4.
Lemma candidate_53: forall (lf4 : lst), @eq lst (qreva (rev lf4) Nil) lf4.
Lemma candidate_54: forall (lf4 : lst), @eq lst (rev (rev lf4)) lf4.
Lemma candidate_55: forall (lf4 : lst), @eq lst (lfappend lf4 Nil) lf4.
Lemma candidate_56: forall (lf4 : lst), @eq lst (lf4) lf4.
Lemma candidate_57: forall (lf4 : lst) (lf2 : lst), @eq lst (qreva lf2 (Nil)) lf4.
Lemma candidate_58: forall (lf2 : lst), @eq lst (qreva lf2 Nil) (qreva (lfappend lf2 Nil) Nil).
Lemma candidate_59: forall (lf2 : lst), @eq lst (qreva lf2 Nil) (rev (rev (rev lf2))).
Lemma candidate_60: forall (lf2 : lst), @eq lst (qreva lf2 Nil) (rev (lfappend lf2 Nil)).
Lemma candidate_61: forall (lf2 : lst), @eq lst (qreva lf2 Nil) (lfappend (rev lf2) Nil).
Lemma candidate_62: forall (lf2 : lst), @eq lst (qreva lf2 Nil) (qreva lf2 Nil).
Lemma candidate_63: forall (lf2 : lst), @eq lst (qreva lf2 Nil) (rev lf2).
Lemma candidate_64: @eq lst Nil (Nil).
Lemma candidate_65: forall (lf4 : lst), @eq lst (qreva (qreva (lfappend lf4 Nil) Nil) Nil) lf4.
Lemma candidate_66: forall (lf4 : lst), @eq lst (qreva (rev (rev (rev lf4))) Nil) lf4.
Lemma candidate_67: forall (lf4 : lst), @eq lst (qreva (rev (lfappend lf4 Nil)) Nil) lf4.
Lemma candidate_68: forall (lf4 : lst), @eq lst (qreva (lfappend (rev lf4) Nil) Nil) lf4.
Lemma candidate_69: forall (lf4 : lst), @eq lst (qreva (qreva lf4 Nil) Nil) lf4.
Lemma candidate_70: forall (lf4 : lst), @eq lst (qreva (rev lf4) Nil) lf4.
Lemma candidate_71: forall (lf4 : lst), @eq lst (lfappend (lfappend lf4 Nil) Nil) lf4.
Lemma candidate_72: forall (lf4 : lst), @eq lst (rev (qreva lf4 Nil)) lf4.
Lemma candidate_73: forall (lf4 : lst), @eq lst (qreva (rev lf4) Nil) lf4.
Lemma candidate_74: forall (lf4 : lst), @eq lst (rev (rev lf4)) lf4.
Lemma candidate_75: forall (lf4 : lst), @eq lst (lfappend lf4 Nil) lf4.
Lemma candidate_76: forall (lf4 : lst), @eq lst (lf4) lf4.
Lemma candidate_77: forall (lf3 : lst) (lf4 : lst) (x : lst), @eq lst (qreva (qreva x lf3) (Nil)) lf4.
Lemma candidate_78: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (lfappend (rev x) (rev lf3)).
Lemma candidate_79: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (rev (qreva lf3 x)).
Lemma candidate_80: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (rev (lfappend lf3 x)).
Lemma candidate_81: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (lfappend (rev x) lf3).
Lemma candidate_82: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (qreva x (rev lf3)).
Lemma candidate_83: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (qreva x lf3).
Lemma candidate_84: forall (lf3 : lst) (x : lst), @eq lst (qreva (qreva x lf3) Nil) (rev (qreva x (rev lf3))).
Lemma candidate_85: forall (lf3 : lst) (x : lst), @eq lst (qreva (qreva x lf3) Nil) (rev (qreva x lf3)).
Lemma candidate_86: forall (lf3 : lst) (x : lst), @eq lst (qreva (qreva x lf3) Nil) (qreva (rev lf3) x).
Lemma candidate_87: forall (lf3 : lst) (x : lst), @eq lst (qreva (qreva x lf3) Nil) (lfappend (rev lf3) x).
Lemma candidate_88: forall (lf3 : lst) (x : lst), @eq lst (qreva (qreva x lf3) Nil) (qreva lf3 x).
Lemma candidate_89: forall (lf3 : lst) (x : lst), @eq lst (qreva (qreva x lf3) Nil) (lfappend lf3 x).
Lemma candidate_90: @eq lst Nil (Nil).
Lemma candidate_91: forall (lf5 : lst) (lf2 : lst), @eq lst (qreva lf2 lf5) (qreva lf2 (rev lf5)).
Lemma candidate_92: forall (lf5 : lst) (lf2 : lst), @eq lst (qreva lf2 lf5) (qreva lf5 (rev lf2)).
Lemma candidate_93: forall (lf5 : lst) (lf2 : lst), @eq lst (qreva lf2 lf5) (lfappend lf5 (rev lf2)).
Lemma candidate_94: forall (lf5 : lst) (lf2 : lst), @eq lst (qreva lf2 lf5) (qreva lf2 lf5).
Lemma candidate_95: forall (lf5 : lst) (lf2 : lst), @eq lst (qreva lf2 lf5) (qreva lf2 Nil).
Lemma candidate_96: forall (lf5 : lst) (lf2 : lst), @eq lst (qreva lf2 lf5) (rev lf2).
Lemma candidate_97: forall (n : natural) (x : lst), @eq lst (Cons n (qreva (rev x) Nil)) (Cons n x).
Lemma candidate_98: forall (n : natural) (x : lst), @eq lst (rev (qreva x (Cons n Nil))) (Cons n x).
Lemma candidate_99: forall (n : natural) (x : lst), @eq lst (rev (lfappend (rev x) (Cons n Nil))) (Cons n x).
Lemma candidate_100: forall (n : natural) (x : lst), @eq lst (Cons n (rev (rev x))) (Cons n x).
Lemma candidate_101: forall (n : natural) (x : lst), @eq lst (Cons n (lfappend x Nil)) (Cons n x).
Lemma candidate_102: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_103: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (qreva (rev x) Nil)).
Lemma candidate_104: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (qreva x (Cons n Nil))).
Lemma candidate_105: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (lfappend (rev x) (Cons n Nil))).
Lemma candidate_106: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rev (rev x))).
Lemma candidate_107: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_108: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_109: forall (lf5 : lst) (lf2 : lst), @eq lst (qreva lf2 lf5) (qreva lf2 (rev lf5)).
Lemma candidate_110: forall (lf5 : lst) (lf2 : lst), @eq lst (qreva lf2 lf5) (qreva lf5 (rev lf2)).
Lemma candidate_111: forall (lf5 : lst) (lf2 : lst), @eq lst (qreva lf2 lf5) (lfappend lf5 (rev lf2)).
Lemma candidate_112: forall (lf5 : lst) (lf2 : lst), @eq lst (qreva lf2 lf5) (qreva lf2 lf5).
Lemma candidate_113: forall (lf5 : lst) (lf2 : lst), @eq lst (qreva lf2 lf5) (qreva lf2 Nil).
Lemma candidate_114: forall (lf5 : lst) (lf2 : lst), @eq lst (qreva lf2 lf5) (rev lf2).
Lemma candidate_115: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (lfappend (rev x) (Cons n (rev lf5))) lf5) (Cons n x).
Lemma candidate_116: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (lfappend (rev x) (Cons n lf5)) lf5) (Cons n x).
Lemma candidate_117: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x (Cons n (rev lf5))) lf5) (Cons n x).
Lemma candidate_118: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x (Cons n lf5)) lf5) (Cons n x).
Lemma candidate_119: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x (Cons n Nil)) lf5) (Cons n x).
Lemma candidate_120: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (lfappend (rev x) (Cons n Nil)) lf5) (Cons n x).
Lemma candidate_121: forall (n : natural) (x : lst), @eq lst (Cons n (qreva (rev x) Nil)) (Cons n x).
Lemma candidate_122: forall (n : natural) (x : lst), @eq lst (rev (qreva x (Cons n Nil))) (Cons n x).
Lemma candidate_123: forall (n : natural) (x : lst), @eq lst (rev (lfappend (rev x) (Cons n Nil))) (Cons n x).
Lemma candidate_124: forall (n : natural) (x : lst), @eq lst (Cons n (rev (rev x))) (Cons n x).
Lemma candidate_125: forall (n : natural) (x : lst), @eq lst (Cons n (lfappend x Nil)) (Cons n x).
Lemma candidate_126: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_127: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x lf3) lf5) (rev (qreva x (rev lf3))).
Lemma candidate_128: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x lf3) lf5) (rev (qreva x lf3)).
Lemma candidate_129: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x lf3) lf5) (qreva (rev lf3) x).
Lemma candidate_130: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x lf3) lf5) (lfappend (rev lf3) x).
Lemma candidate_131: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x lf3) lf5) (qreva lf3 x).
Lemma candidate_132: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x lf3) lf5) (lfappend lf3 x).
Lemma candidate_133: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (lfappend (rev x) (rev lf3)).
Lemma candidate_134: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (rev (qreva lf3 x)).
Lemma candidate_135: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (rev (lfappend lf3 x)).
Lemma candidate_136: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (lfappend (rev x) lf3).
Lemma candidate_137: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (qreva x (rev lf3)).
Lemma candidate_138: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (qreva x lf3).
Lemma candidate_139: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x lf3) lf5) (rev (qreva x (rev lf3))).
Lemma candidate_140: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x lf3) lf5) (rev (qreva x lf3)).
Lemma candidate_141: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x lf3) lf5) (qreva (rev lf3) x).
Lemma candidate_142: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x lf3) lf5) (lfappend (rev lf3) x).
Lemma candidate_143: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x lf3) lf5) (qreva lf3 x).
Lemma candidate_144: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x lf3) lf5) (lfappend lf3 x).
Lemma candidate_145: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (qreva (rev x) Nil)).
Lemma candidate_146: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (qreva x (Cons n Nil))).
Lemma candidate_147: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (lfappend (rev x) (Cons n Nil))).
Lemma candidate_148: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rev (rev x))).
Lemma candidate_149: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_150: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_151: forall (lf2 : lst), @eq lst (qreva lf2 Nil) (qreva (lfappend lf2 Nil) Nil).
Lemma candidate_152: forall (lf2 : lst), @eq lst (qreva lf2 Nil) (rev (rev (rev lf2))).
Lemma candidate_153: forall (lf2 : lst), @eq lst (qreva lf2 Nil) (rev (lfappend lf2 Nil)).
Lemma candidate_154: forall (lf2 : lst), @eq lst (qreva lf2 Nil) (lfappend (rev lf2) Nil).
Lemma candidate_155: forall (lf2 : lst), @eq lst (qreva lf2 Nil) (qreva lf2 Nil).
Lemma candidate_156: forall (lf2 : lst), @eq lst (qreva lf2 Nil) (rev lf2).
Lemma candidate_157: forall (n : natural) (x : lst), @eq lst (Cons n (qreva (rev x) Nil)) (Cons n x).
Lemma candidate_158: forall (n : natural) (x : lst), @eq lst (rev (qreva x (Cons n Nil))) (Cons n x).
Lemma candidate_159: forall (n : natural) (x : lst), @eq lst (rev (lfappend (rev x) (Cons n Nil))) (Cons n x).
Lemma candidate_160: forall (n : natural) (x : lst), @eq lst (Cons n (rev (rev x))) (Cons n x).
Lemma candidate_161: forall (n : natural) (x : lst), @eq lst (Cons n (lfappend x Nil)) (Cons n x).
Lemma candidate_162: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_163: forall (n : natural) (x : lst) (lf2 : lst), @eq lst (qreva lf2 (Nil)) (Cons n x).
Lemma candidate_164: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (qreva (rev x) Nil)).
Lemma candidate_165: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (qreva x (Cons n Nil))).
Lemma candidate_166: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (lfappend (rev x) (Cons n Nil))).
Lemma candidate_167: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rev (rev x))).
Lemma candidate_168: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_169: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_170: forall (lf2 : lst), @eq lst (qreva lf2 Nil) (qreva (lfappend lf2 Nil) Nil).
Lemma candidate_171: forall (lf2 : lst), @eq lst (qreva lf2 Nil) (rev (rev (rev lf2))).
Lemma candidate_172: forall (lf2 : lst), @eq lst (qreva lf2 Nil) (rev (lfappend lf2 Nil)).
Lemma candidate_173: forall (lf2 : lst), @eq lst (qreva lf2 Nil) (lfappend (rev lf2) Nil).
Lemma candidate_174: forall (lf2 : lst), @eq lst (qreva lf2 Nil) (qreva lf2 Nil).
Lemma candidate_175: forall (lf2 : lst), @eq lst (qreva lf2 Nil) (rev lf2).
Lemma candidate_176: @eq lst Nil (Nil).
Lemma candidate_177: forall (n : natural) (x : lst), @eq lst (qreva (lfappend (qreva x Nil) (Cons n Nil)) Nil) (Cons n x).
Lemma candidate_178: forall (n : natural) (x : lst), @eq lst (qreva (qreva (lfappend x Nil) (Cons n Nil)) Nil) (Cons n x).
Lemma candidate_179: forall (n : natural) (x : lst), @eq lst (qreva (lfappend (rev (rev (rev x))) (Cons n Nil)) Nil) (Cons n x).
Lemma candidate_180: forall (n : natural) (x : lst), @eq lst (qreva (lfappend (rev (lfappend x Nil)) (Cons n Nil)) Nil) (Cons n x).
Lemma candidate_181: forall (n : natural) (x : lst), @eq lst (qreva (qreva x (Cons n Nil)) Nil) (Cons n x).
Lemma candidate_182: forall (n : natural) (x : lst), @eq lst (qreva (lfappend (rev x) (Cons n Nil)) Nil) (Cons n x).
Lemma candidate_183: forall (n : natural) (x : lst), @eq lst (Cons n (qreva (rev x) Nil)) (Cons n x).
Lemma candidate_184: forall (n : natural) (x : lst), @eq lst (rev (qreva x (Cons n Nil))) (Cons n x).
Lemma candidate_185: forall (n : natural) (x : lst), @eq lst (rev (lfappend (rev x) (Cons n Nil))) (Cons n x).
Lemma candidate_186: forall (n : natural) (x : lst), @eq lst (Cons n (rev (rev x))) (Cons n x).
Lemma candidate_187: forall (n : natural) (x : lst), @eq lst (Cons n (lfappend x Nil)) (Cons n x).
Lemma candidate_188: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_189: forall (lf3 : lst) (x : lst), @eq lst (qreva (qreva x lf3) Nil) (rev (qreva x (rev lf3))).
Lemma candidate_190: forall (lf3 : lst) (x : lst), @eq lst (qreva (qreva x lf3) Nil) (rev (qreva x lf3)).
Lemma candidate_191: forall (lf3 : lst) (x : lst), @eq lst (qreva (qreva x lf3) Nil) (qreva (rev lf3) x).
Lemma candidate_192: forall (lf3 : lst) (x : lst), @eq lst (qreva (qreva x lf3) Nil) (lfappend (rev lf3) x).
Lemma candidate_193: forall (lf3 : lst) (x : lst), @eq lst (qreva (qreva x lf3) Nil) (qreva lf3 x).
Lemma candidate_194: forall (lf3 : lst) (x : lst), @eq lst (qreva (qreva x lf3) Nil) (lfappend lf3 x).
Lemma candidate_195: forall (lf3 : lst) (n : natural) (x : lst), @eq lst (qreva (qreva x lf3) (Nil)) (Cons n x).
Lemma candidate_196: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (lfappend (rev x) (rev lf3)).
Lemma candidate_197: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (rev (qreva lf3 x)).
Lemma candidate_198: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (rev (lfappend lf3 x)).
Lemma candidate_199: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (lfappend (rev x) lf3).
Lemma candidate_200: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (qreva x (rev lf3)).
Lemma candidate_201: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (qreva x lf3).
Lemma candidate_202: forall (lf3 : lst) (x : lst), @eq lst (qreva (qreva x lf3) Nil) (rev (qreva x (rev lf3))).
Lemma candidate_203: forall (lf3 : lst) (x : lst), @eq lst (qreva (qreva x lf3) Nil) (rev (qreva x lf3)).
Lemma candidate_204: forall (lf3 : lst) (x : lst), @eq lst (qreva (qreva x lf3) Nil) (qreva (rev lf3) x).
Lemma candidate_205: forall (lf3 : lst) (x : lst), @eq lst (qreva (qreva x lf3) Nil) (lfappend (rev lf3) x).
Lemma candidate_206: forall (lf3 : lst) (x : lst), @eq lst (qreva (qreva x lf3) Nil) (qreva lf3 x).
Lemma candidate_207: forall (lf3 : lst) (x : lst), @eq lst (qreva (qreva x lf3) Nil) (lfappend lf3 x).
Lemma candidate_208: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (qreva (rev x) Nil)).
Lemma candidate_209: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (qreva x (Cons n Nil))).
Lemma candidate_210: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (lfappend (rev x) (Cons n Nil))).
Lemma candidate_211: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rev (rev x))).
Lemma candidate_212: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_213: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_214: @eq lst Nil (Nil).
Lemma candidate_215: forall (lf4 : lst), @eq lst (lfappend (lfappend lf4 Nil) Nil) lf4.
Lemma candidate_216: forall (lf4 : lst), @eq lst (rev (qreva lf4 Nil)) lf4.
Lemma candidate_217: forall (lf4 : lst), @eq lst (qreva (rev lf4) Nil) lf4.
Lemma candidate_218: forall (lf4 : lst), @eq lst (rev (rev lf4)) lf4.
Lemma candidate_219: forall (lf4 : lst), @eq lst (lfappend lf4 Nil) lf4.
Lemma candidate_220: forall (lf4 : lst), @eq lst (lf4) lf4.
Lemma candidate_221: forall (lf4 : lst) (lf5 : lst), @eq lst (qreva (qreva lf5 (rev lf4)) lf5) lf4.
Lemma candidate_222: forall (lf4 : lst) (lf5 : lst), @eq lst (qreva (lfappend lf5 (rev lf4)) lf5) lf4.
Lemma candidate_223: forall (lf4 : lst) (lf5 : lst), @eq lst (qreva (qreva lf4 (rev lf5)) lf5) lf4.
Lemma candidate_224: forall (lf4 : lst) (lf5 : lst), @eq lst (qreva (qreva lf4 lf5) lf5) lf4.
Lemma candidate_225: forall (lf4 : lst) (lf5 : lst), @eq lst (qreva (qreva lf4 Nil) lf5) lf4.
Lemma candidate_226: forall (lf4 : lst) (lf5 : lst), @eq lst (qreva (rev lf4) lf5) lf4.
Lemma candidate_227: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (lfappend lf5 (Cons n Nil)).
Lemma candidate_228: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (lfappend (rev (rev lf5)) (Cons n Nil)).
Lemma candidate_229: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (lfappend (rev lf5) (Cons n Nil)).
Lemma candidate_230: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (rev lf5)).
Lemma candidate_231: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n lf5).
Lemma candidate_232: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n Nil).
Lemma candidate_233: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x (Cons n lf5)) lf5) (Cons n (lfappend lf5 x)).
Lemma candidate_234: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x (Cons n lf5)) lf5) (qreva lf5 (Cons n x)).
Lemma candidate_235: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x (Cons n lf5)) lf5) (lfappend lf5 (Cons n x)).
Lemma candidate_236: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x (Cons n lf5)) lf5) (Cons n (lfappend x lf5)).
Lemma candidate_237: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x (Cons n lf5)) lf5) (Cons n (lfappend x Nil)).
Lemma candidate_238: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x (Cons n lf5)) lf5) (Cons n x).
Lemma candidate_239: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva x (Cons n lf5)) (lfappend (rev x) (Cons n (rev lf5))).
Lemma candidate_240: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva x (Cons n lf5)) (lfappend (rev x) (Cons n lf5)).
Lemma candidate_241: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva x (Cons n lf5)) (qreva x (Cons n (rev lf5))).
Lemma candidate_242: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva x (Cons n lf5)) (qreva x (Cons n lf5)).
Lemma candidate_243: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva x (Cons n lf5)) (qreva x (Cons n Nil)).
Lemma candidate_244: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva x (Cons n lf5)) (lfappend (rev x) (Cons n Nil)).
Lemma candidate_245: forall (lf4 : lst), @eq lst (lfappend (lfappend lf4 Nil) Nil) lf4.
Lemma candidate_246: forall (lf4 : lst), @eq lst (rev (qreva lf4 Nil)) lf4.
Lemma candidate_247: forall (lf4 : lst), @eq lst (qreva (rev lf4) Nil) lf4.
Lemma candidate_248: forall (lf4 : lst), @eq lst (rev (rev lf4)) lf4.
Lemma candidate_249: forall (lf4 : lst), @eq lst (lfappend lf4 Nil) lf4.
Lemma candidate_250: forall (lf4 : lst), @eq lst (lf4) lf4.
Lemma candidate_251: forall (lf4 : lst), @eq lst (qreva (qreva (lfappend lf4 Nil) Nil) Nil) lf4.
Lemma candidate_252: forall (lf4 : lst), @eq lst (qreva (rev (rev (rev lf4))) Nil) lf4.
Lemma candidate_253: forall (lf4 : lst), @eq lst (qreva (rev (lfappend lf4 Nil)) Nil) lf4.
Lemma candidate_254: forall (lf4 : lst), @eq lst (qreva (lfappend (rev lf4) Nil) Nil) lf4.
Lemma candidate_255: forall (lf4 : lst), @eq lst (qreva (qreva lf4 Nil) Nil) lf4.
Lemma candidate_256: forall (lf4 : lst), @eq lst (qreva (rev lf4) Nil) lf4.
Lemma candidate_257: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (qreva (qreva x (Cons n (Nil))) (Nil)) lf4.
Lemma candidate_258: forall (n : natural) (x : lst), @eq lst (qreva (qreva x (Cons n Nil)) Nil) (Cons n (qreva (rev x) Nil)).
Lemma candidate_259: forall (n : natural) (x : lst), @eq lst (qreva (qreva x (Cons n Nil)) Nil) (rev (qreva x (Cons n Nil))).
Lemma candidate_260: forall (n : natural) (x : lst), @eq lst (qreva (qreva x (Cons n Nil)) Nil)   (rev (lfappend (rev x) (Cons n Nil))).
Lemma candidate_261: forall (n : natural) (x : lst), @eq lst (qreva (qreva x (Cons n Nil)) Nil) (Cons n (rev (rev x))).
Lemma candidate_262: forall (n : natural) (x : lst), @eq lst (qreva (qreva x (Cons n Nil)) Nil) (Cons n (lfappend x Nil)).
Lemma candidate_263: forall (n : natural) (x : lst), @eq lst (qreva (qreva x (Cons n Nil)) Nil) (Cons n x).
Lemma candidate_264: forall (n : natural) (x : lst), @eq lst (qreva x (Cons n Nil)) (lfappend (qreva x Nil) (Cons n Nil)).
Lemma candidate_265: forall (n : natural) (x : lst), @eq lst (qreva x (Cons n Nil)) (qreva (lfappend x Nil) (Cons n Nil)).
Lemma candidate_266: forall (n : natural) (x : lst), @eq lst (qreva x (Cons n Nil)) (lfappend (rev (rev (rev x))) (Cons n Nil)).
Lemma candidate_267: forall (n : natural) (x : lst), @eq lst (qreva x (Cons n Nil)) (lfappend (rev (lfappend x Nil)) (Cons n Nil)).
Lemma candidate_268: forall (n : natural) (x : lst), @eq lst (qreva x (Cons n Nil)) (qreva x (Cons n Nil)).
Lemma candidate_269: forall (n : natural) (x : lst), @eq lst (qreva x (Cons n Nil)) (lfappend (rev x) (Cons n Nil)).
Lemma candidate_270: forall (n : natural), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_271: @eq lst Nil (Nil).
Lemma candidate_272: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x (lfappend lf5 (Cons n Nil))) lf5) (Cons n x).
Lemma candidate_273: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x (lfappend (rev (rev lf5)) (Cons n Nil))) lf5)   (Cons n x).
Lemma candidate_274: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x (lfappend (rev lf5) (Cons n Nil))) lf5) (Cons n x).
Lemma candidate_275: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x (Cons n (rev lf5))) lf5) (Cons n x).
Lemma candidate_276: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x (Cons n lf5)) lf5) (Cons n x).
Lemma candidate_277: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x (Cons n Nil)) lf5) (Cons n x).
Lemma candidate_278: forall (n : natural) (x : lst), @eq lst (Cons n (qreva (rev x) Nil)) (Cons n x).
Lemma candidate_279: forall (n : natural) (x : lst), @eq lst (rev (qreva x (Cons n Nil))) (Cons n x).
Lemma candidate_280: forall (n : natural) (x : lst), @eq lst (rev (lfappend (rev x) (Cons n Nil))) (Cons n x).
Lemma candidate_281: forall (n : natural) (x : lst), @eq lst (Cons n (rev (rev x))) (Cons n x).
Lemma candidate_282: forall (n : natural) (x : lst), @eq lst (Cons n (lfappend x Nil)) (Cons n x).
Lemma candidate_283: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_284: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x (Cons n lf5)) lf5) (Cons n (lfappend lf5 x)).
Lemma candidate_285: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x (Cons n lf5)) lf5) (qreva lf5 (Cons n x)).
Lemma candidate_286: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x (Cons n lf5)) lf5) (lfappend lf5 (Cons n x)).
Lemma candidate_287: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x (Cons n lf5)) lf5) (Cons n (lfappend x lf5)).
Lemma candidate_288: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x (Cons n lf5)) lf5) (Cons n (lfappend x Nil)).
Lemma candidate_289: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x (Cons n lf5)) lf5) (Cons n x).
Lemma candidate_290: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (lfappend (rev x) (Cons n (rev lf5))) lf5) (Cons n x).
Lemma candidate_291: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (lfappend (rev x) (Cons n lf5)) lf5) (Cons n x).
Lemma candidate_292: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x (Cons n (rev lf5))) lf5) (Cons n x).
Lemma candidate_293: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x (Cons n lf5)) lf5) (Cons n x).
Lemma candidate_294: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x (Cons n Nil)) lf5) (Cons n x).
Lemma candidate_295: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (lfappend (rev x) (Cons n Nil)) lf5) (Cons n x).
Lemma candidate_296: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (lfappend lf5 (Cons n Nil)).
Lemma candidate_297: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (lfappend (rev (rev lf5)) (Cons n Nil)).
Lemma candidate_298: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (lfappend (rev lf5) (Cons n Nil)).
Lemma candidate_299: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (rev lf5)).
Lemma candidate_300: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n lf5).
Lemma candidate_301: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n Nil).
Lemma candidate_302: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x (Cons n lf5)) lf5) (Cons n (lfappend lf5 x)).
Lemma candidate_303: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x (Cons n lf5)) lf5) (qreva lf5 (Cons n x)).
Lemma candidate_304: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x (Cons n lf5)) lf5) (lfappend lf5 (Cons n x)).
Lemma candidate_305: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x (Cons n lf5)) lf5) (Cons n (lfappend x lf5)).
Lemma candidate_306: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x (Cons n lf5)) lf5) (Cons n (lfappend x Nil)).
Lemma candidate_307: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva (qreva x (Cons n lf5)) lf5) (Cons n x).
Lemma candidate_308: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (qreva (rev x) Nil)).
Lemma candidate_309: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (qreva x (Cons n Nil))).
Lemma candidate_310: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (lfappend (rev x) (Cons n Nil))).
Lemma candidate_311: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rev (rev x))).
Lemma candidate_312: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_313: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_314: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva x (Cons n lf5)) (lfappend (rev x) (Cons n (rev lf5))).
Lemma candidate_315: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva x (Cons n lf5)) (lfappend (rev x) (Cons n lf5)).
Lemma candidate_316: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva x (Cons n lf5)) (qreva x (Cons n (rev lf5))).
Lemma candidate_317: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva x (Cons n lf5)) (qreva x (Cons n lf5)).
Lemma candidate_318: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva x (Cons n lf5)) (qreva x (Cons n Nil)).
Lemma candidate_319: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva x (Cons n lf5)) (lfappend (rev x) (Cons n Nil)).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 550 seconds
Duplicates removed: 205
Filtered by Quickchick: 51
Filtered by script: 12
Remaining: 51

Lemmas: 
Lemma candidate_18: forall (lf4 : lst), @eq lst (rev (rev lf4)) lf4.
Lemma candidate_6: forall (lf1 : lst), @eq lst lf1 (rev (rev lf1)).
Lemma candidate_19: forall (lf4 : lst), @eq lst (lfappend lf4 Nil) lf4.
Lemma candidate_7: forall (lf1 : lst), @eq lst lf1 (lfappend lf1 Nil).
Lemma candidate_63: forall (lf2 : lst), @eq lst (qreva lf2 Nil) (rev lf2).
Lemma candidate_17: forall (lf4 : lst), @eq lst (qreva (rev lf4) Nil) lf4.
Lemma candidate_16: forall (lf4 : lst), @eq lst (rev (qreva lf4 Nil)) lf4.
Lemma candidate_5: forall (lf1 : lst), @eq lst lf1 (qreva (rev lf1) Nil).
Lemma candidate_4: forall (lf1 : lst), @eq lst lf1 (rev (qreva lf1 Nil)).
Lemma candidate_100: forall (n : natural) (x : lst), @eq lst (Cons n (rev (rev x))) (Cons n x).
Lemma candidate_40: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (rev (qreva lf3 x)).
Lemma candidate_12: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rev (rev x))).
Lemma candidate_101: forall (n : natural) (x : lst), @eq lst (Cons n (lfappend x Nil)) (Cons n x).
Lemma candidate_42: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (lfappend (rev x) lf3).
Lemma candidate_13: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_66: forall (lf4 : lst), @eq lst (qreva (rev (rev (rev lf4))) Nil) lf4.
Lemma candidate_59: forall (lf2 : lst), @eq lst (qreva lf2 Nil) (rev (rev (rev lf2))).
Lemma candidate_15: forall (lf4 : lst), @eq lst (lfappend (lfappend lf4 Nil) Nil) lf4.
Lemma candidate_3: forall (lf1 : lst), @eq lst lf1 (lfappend (lfappend lf1 Nil) Nil).
Lemma candidate_98: forall (n : natural) (x : lst), @eq lst (rev (qreva x (Cons n Nil))) (Cons n x).
Lemma candidate_97: forall (n : natural) (x : lst), @eq lst (Cons n (qreva (rev x) Nil)) (Cons n x).
Lemma candidate_88: forall (lf3 : lst) (x : lst), @eq lst (qreva (qreva x lf3) Nil) (qreva lf3 x).
Lemma candidate_10: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (qreva x (Cons n Nil))).
Lemma candidate_9: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (qreva (rev x) Nil)).
Lemma candidate_68: forall (lf4 : lst), @eq lst (qreva (lfappend (rev lf4) Nil) Nil) lf4.
Lemma candidate_67: forall (lf4 : lst), @eq lst (qreva (rev (lfappend lf4 Nil)) Nil) lf4.
Lemma candidate_61: forall (lf2 : lst), @eq lst (qreva lf2 Nil) (lfappend (rev lf2) Nil).
Lemma candidate_60: forall (lf2 : lst), @eq lst (qreva lf2 Nil) (rev (lfappend lf2 Nil)).
Lemma candidate_85: forall (lf3 : lst) (x : lst), @eq lst (qreva (qreva x lf3) Nil) (rev (qreva x lf3)).
Lemma candidate_65: forall (lf4 : lst), @eq lst (qreva (qreva (lfappend lf4 Nil) Nil) Nil) lf4.
Lemma candidate_58: forall (lf2 : lst), @eq lst (qreva lf2 Nil) (qreva (lfappend lf2 Nil) Nil).
Lemma candidate_99: forall (n : natural) (x : lst), @eq lst (rev (lfappend (rev x) (Cons n Nil))) (Cons n x).
Lemma candidate_87: forall (lf3 : lst) (x : lst), @eq lst (qreva (qreva x lf3) Nil) (lfappend (rev lf3) x).
Lemma candidate_11: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (lfappend (rev x) (Cons n Nil))).
Lemma candidate_269: forall (n : natural) (x : lst), @eq lst (qreva x (Cons n Nil)) (lfappend (rev x) (Cons n Nil)).
Lemma candidate_240: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (qreva x (Cons n lf5)) (lfappend (rev x) (Cons n lf5)).
Lemma candidate_182: forall (n : natural) (x : lst), @eq lst (qreva (lfappend (rev x) (Cons n Nil)) Nil) (Cons n x).
Lemma candidate_261: forall (n : natural) (x : lst), @eq lst (qreva (qreva x (Cons n Nil)) Nil) (Cons n (rev (rev x))).
Lemma candidate_265: forall (n : natural) (x : lst), @eq lst (qreva x (Cons n Nil)) (qreva (lfappend x Nil) (Cons n Nil)).
Lemma candidate_264: forall (n : natural) (x : lst), @eq lst (qreva x (Cons n Nil)) (lfappend (qreva x Nil) (Cons n Nil)).
Lemma candidate_262: forall (n : natural) (x : lst), @eq lst (qreva (qreva x (Cons n Nil)) Nil) (Cons n (lfappend x Nil)).
Lemma candidate_178: forall (n : natural) (x : lst), @eq lst (qreva (qreva (lfappend x Nil) (Cons n Nil)) Nil) (Cons n x).
Lemma candidate_177: forall (n : natural) (x : lst), @eq lst (qreva (lfappend (qreva x Nil) (Cons n Nil)) Nil) (Cons n x).
Lemma candidate_259: forall (n : natural) (x : lst), @eq lst (qreva (qreva x (Cons n Nil)) Nil) (rev (qreva x (Cons n Nil))).
Lemma candidate_258: forall (n : natural) (x : lst), @eq lst (qreva (qreva x (Cons n Nil)) Nil) (Cons n (qreva (rev x) Nil)).
Lemma candidate_266: forall (n : natural) (x : lst), @eq lst (qreva x (Cons n Nil)) (lfappend (rev (rev (rev x))) (Cons n Nil)).
Lemma candidate_179: forall (n : natural) (x : lst), @eq lst (qreva (lfappend (rev (rev (rev x))) (Cons n Nil)) Nil) (Cons n x).
Lemma candidate_267: forall (n : natural) (x : lst), @eq lst (qreva x (Cons n Nil)) (lfappend (rev (lfappend x Nil)) (Cons n Nil)).
Lemma candidate_180: forall (n : natural) (x : lst), @eq lst (qreva (lfappend (rev (lfappend x Nil)) (Cons n Nil)) Nil) (Cons n x).
Lemma candidate_260: forall (n : natural) (x : lst), @eq lst (qreva (qreva x (Cons n Nil)) Nil)   (rev (lfappend (rev x) (Cons n Nil))).
Lemma candidate_2: forall (n : natural) (x : lst) (lf5 : lst), forall _ : @eq lst (qreva (qreva x lf5) lf5) x, @eq lst (qreva (qreva x (Cons n lf5)) lf5) (Cons n x).