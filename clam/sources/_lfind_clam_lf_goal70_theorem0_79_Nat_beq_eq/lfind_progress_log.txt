File Information
- File name: goal70
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal70_theorem0_79_Nat_beq_eq
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal70_theorem0_79_Nat_beq_eq
- Namespace: adtind
- Proof name: theorem0
- Theorem: Theorem theorem0: forall (x0 : natural) (y0 : lst),
@eq natural (count (insort y0 x0) x0) (Succ (count y0 x0)).
- Declarations: 
From lfind Require Import LFind.

Proof Context
* Goal State: @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x)))

* Hypothesis:
Heqb : @eq bool (lfeqb x n) true
x : natural
Heqb0 : @eq bool (less x n) true
y : lst
n : natural
IHy : @eq natural (count (insort y x) x) (Succ (count y x))

* Types:
Set
natural
Prop
lst
bool

* Polymorphic Types:


* Variables:
x : natural
y : lst
n : natural

* Terms:
less x n : bool
x : natural
@eq natural (count (insort y x) x) (Succ (count y x)) : Prop
y : lst
insort y x : lst
@eq bool (lfeqb x n) true : Prop
Cons n y : lst
true : bool
Succ (count y x) : natural
bool : Set
count y x : natural
@eq bool (less x n) true : Prop
Cons x (Cons n y) : lst
lst : Set
Succ (Succ (count y x)) : natural
count (insort y x) x : natural
lfeqb x n : bool
natural : Set
n : natural
@eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x))) : Prop
count (Cons x (Cons n y)) x : natural

* Functions:
Succ  : forall _ : natural, natural
count  : forall (_ : lst) (_ : natural), natural
lfeqb  : forall (_ : natural) (_ : natural), bool
less  : forall (_ : natural) (_ : natural), bool
Cons  : forall (_ : natural) (_ : lst), lst
@eq  : forall (A : Type) (_ : A) (_ : A), Prop
insort  : forall (_ : lst) (_ : natural), lst

<---GENERALIZATION--->
Time elapsed: 87 seconds
Generalized Variables:
lf3 : lst = Cons x (Cons n y)
lf1 : natural = count (Cons x (Cons n y)) x
lf4 : natural = Succ (count y x)
lf5 : natural = count y x
lf2 : natural = Succ (Succ (count y x))
lf6 : lst = Cons n y

Generalizations:
Lemma conj1: forall (lf2 : natural) (lf1 : natural), @eq natural lf1 lf2.
Lemma conj3: forall (lf4 : natural) (lf1 : natural), @eq natural lf1 (Succ lf4).
Lemma conj11: forall (lf5 : natural) (lf1 : natural), @eq natural lf1 (Succ (Succ lf5)).
Lemma conj15: forall (x : natural) (lf1 : natural) (y : lst), @eq natural lf1 (Succ (Succ (count y x))).
Lemma conj17: forall (lf2 : natural) (x : natural) (lf3 : lst), @eq natural (count lf3 x) lf2.
Lemma conj19: forall (x : natural) (lf4 : natural) (lf3 : lst), @eq natural (count lf3 x) (Succ lf4).
Lemma conj27: forall (lf5 : natural) (x : natural) (lf3 : lst), @eq natural (count lf3 x) (Succ (Succ lf5)).
Lemma conj31: forall (x : natural) (y : lst) (lf3 : lst), @eq natural (count lf3 x) (Succ (Succ (count y x))).
Lemma conj49: forall (lf6 : lst) (lf2 : natural) (x : natural), @eq natural (count (Cons x lf6) x) lf2.
Lemma conj50: forall (lf2 : natural) (x : natural) (y : lst) (n : natural), @eq natural (count (Cons x (Cons n y)) x) lf2.
Lemma conj51: forall (lf6 : lst) (x : natural) (lf4 : natural), @eq natural (count (Cons x lf6) x) (Succ lf4).
Lemma conj52: forall (x : natural) (lf4 : natural) (y : lst) (n : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma conj59: forall (lf6 : lst) (lf5 : natural) (x : natural), @eq natural (count (Cons x lf6) x) (Succ (Succ lf5)).
Lemma conj60: forall (lf5 : natural) (x : natural) (y : lst) (n : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma conj63: forall (lf6 : lst) (x : natural) (y : lst), @eq natural (count (Cons x lf6) x) (Succ (Succ (count y x))).
Lemma conj64: forall (x : natural) (y : lst) (n : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x))).


<---VALIDITY CHECKS--->
Time elapsed: 118 seconds
Valid:

Invalid:
Lemma conj64: forall (x : natural) (y : lst) (n : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x))).
Lemma conj63: forall (lf6 : lst) (x : natural) (y : lst), @eq natural (count (Cons x lf6) x) (Succ (Succ (count y x))).
Lemma conj60: forall (lf5 : natural) (x : natural) (y : lst) (n : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma conj59: forall (lf6 : lst) (lf5 : natural) (x : natural), @eq natural (count (Cons x lf6) x) (Succ (Succ lf5)).
Lemma conj52: forall (x : natural) (lf4 : natural) (y : lst) (n : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma conj51: forall (lf6 : lst) (x : natural) (lf4 : natural), @eq natural (count (Cons x lf6) x) (Succ lf4).
Lemma conj50: forall (lf2 : natural) (x : natural) (y : lst) (n : natural), @eq natural (count (Cons x (Cons n y)) x) lf2.
Lemma conj49: forall (lf6 : lst) (lf2 : natural) (x : natural), @eq natural (count (Cons x lf6) x) lf2.
Lemma conj31: forall (x : natural) (y : lst) (lf3 : lst), @eq natural (count lf3 x) (Succ (Succ (count y x))).
Lemma conj27: forall (lf5 : natural) (x : natural) (lf3 : lst), @eq natural (count lf3 x) (Succ (Succ lf5)).
Lemma conj19: forall (x : natural) (lf4 : natural) (lf3 : lst), @eq natural (count lf3 x) (Succ lf4).
Lemma conj17: forall (lf2 : natural) (x : natural) (lf3 : lst), @eq natural (count lf3 x) lf2.
Lemma conj15: forall (x : natural) (lf1 : natural) (y : lst), @eq natural lf1 (Succ (Succ (count y x))).
Lemma conj11: forall (lf5 : natural) (lf1 : natural), @eq natural lf1 (Succ (Succ lf5)).
Lemma conj3: forall (lf4 : natural) (lf1 : natural), @eq natural lf1 (Succ lf4).
Lemma conj1: forall (lf2 : natural) (lf1 : natural), @eq natural lf1 lf2.

<---ADD IMPLICATIONS--->
Time elapsed: 170 seconds
Generalizations:
Lemma conj64: forall (x : natural) (y : lst) (n : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x))).
Lemma conj64_imp: forall (x : natural) (y : lst) (n : natural), forall _ : @eq bool (lfeqb x n) true,
@eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x))).
Lemma conj63: forall (lf6 : lst) (x : natural) (y : lst), @eq natural (count (Cons x lf6) x) (Succ (Succ (count y x))).
Lemma conj60: forall (lf5 : natural) (x : natural) (y : lst) (n : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma conj60_imp: forall (lf5 : natural) (x : natural) (y : lst) (n : natural), forall (_ : @eq bool (lfeqb x n) true)
  (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),
       @eq bool (less x n) true),
@eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma conj59: forall (lf6 : lst) (lf5 : natural) (x : natural), @eq natural (count (Cons x lf6) x) (Succ (Succ lf5)).
Lemma conj52: forall (x : natural) (lf4 : natural) (y : lst) (n : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma conj52_imp: forall (x : natural) (lf4 : natural) (y : lst) (n : natural), forall
  _ : forall _ : @eq natural (count (insort y x) x) lf4,
      @eq bool (less x n) true,
@eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma conj51: forall (lf6 : lst) (x : natural) (lf4 : natural), @eq natural (count (Cons x lf6) x) (Succ lf4).
Lemma conj50: forall (lf2 : natural) (x : natural) (y : lst) (n : natural), @eq natural (count (Cons x (Cons n y)) x) lf2.
Lemma conj50_imp: forall (lf2 : natural) (x : natural) (y : lst) (n : natural), forall (_ : @eq bool (lfeqb x n) true) (_ : @eq bool (less x n) true),
@eq natural (count (Cons x (Cons n y)) x) lf2.
Lemma conj49: forall (lf6 : lst) (lf2 : natural) (x : natural), @eq natural (count (Cons x lf6) x) lf2.
Lemma conj31: forall (x : natural) (y : lst) (lf3 : lst), @eq natural (count lf3 x) (Succ (Succ (count y x))).
Lemma conj27: forall (lf5 : natural) (x : natural) (lf3 : lst), @eq natural (count lf3 x) (Succ (Succ lf5)).
Lemma conj19: forall (x : natural) (lf4 : natural) (lf3 : lst), @eq natural (count lf3 x) (Succ lf4).
Lemma conj17: forall (lf2 : natural) (x : natural) (lf3 : lst), @eq natural (count lf3 x) lf2.
Lemma conj15: forall (x : natural) (lf1 : natural) (y : lst), @eq natural lf1 (Succ (Succ (count y x))).
Lemma conj11: forall (lf5 : natural) (lf1 : natural), @eq natural lf1 (Succ (Succ lf5)).
Lemma conj3: forall (lf4 : natural) (lf1 : natural), @eq natural lf1 (Succ lf4).
Lemma conj1: forall (lf2 : natural) (lf1 : natural), @eq natural lf1 lf2.


<---VALIDITY CHECKS--->
Time elapsed: 200 seconds
Valid:
Lemma conj50_imp: forall (lf2 : natural) (x : natural) (y : lst) (n : natural), forall (_ : @eq bool (lfeqb x n) true) (_ : @eq bool (less x n) true),
@eq natural (count (Cons x (Cons n y)) x) lf2.
Lemma conj64_imp: forall (x : natural) (y : lst) (n : natural), forall _ : @eq bool (lfeqb x n) true,
@eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x))).

Invalid:
Lemma conj1: forall (lf2 : natural) (lf1 : natural), @eq natural lf1 lf2.
Lemma conj3: forall (lf4 : natural) (lf1 : natural), @eq natural lf1 (Succ lf4).
Lemma conj11: forall (lf5 : natural) (lf1 : natural), @eq natural lf1 (Succ (Succ lf5)).
Lemma conj15: forall (x : natural) (lf1 : natural) (y : lst), @eq natural lf1 (Succ (Succ (count y x))).
Lemma conj17: forall (lf2 : natural) (x : natural) (lf3 : lst), @eq natural (count lf3 x) lf2.
Lemma conj19: forall (x : natural) (lf4 : natural) (lf3 : lst), @eq natural (count lf3 x) (Succ lf4).
Lemma conj27: forall (lf5 : natural) (x : natural) (lf3 : lst), @eq natural (count lf3 x) (Succ (Succ lf5)).
Lemma conj31: forall (x : natural) (y : lst) (lf3 : lst), @eq natural (count lf3 x) (Succ (Succ (count y x))).
Lemma conj49: forall (lf6 : lst) (lf2 : natural) (x : natural), @eq natural (count (Cons x lf6) x) lf2.
Lemma conj50: forall (lf2 : natural) (x : natural) (y : lst) (n : natural), @eq natural (count (Cons x (Cons n y)) x) lf2.
Lemma conj51: forall (lf6 : lst) (x : natural) (lf4 : natural), @eq natural (count (Cons x lf6) x) (Succ lf4).
Lemma conj52_imp: forall (x : natural) (lf4 : natural) (y : lst) (n : natural), forall
  _ : forall _ : @eq natural (count (insort y x) x) lf4,
      @eq bool (less x n) true,
@eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma conj52: forall (x : natural) (lf4 : natural) (y : lst) (n : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma conj59: forall (lf6 : lst) (lf5 : natural) (x : natural), @eq natural (count (Cons x lf6) x) (Succ (Succ lf5)).
Lemma conj60_imp: forall (lf5 : natural) (x : natural) (y : lst) (n : natural), forall (_ : @eq bool (lfeqb x n) true)
  (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),
       @eq bool (less x n) true),
@eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma conj60: forall (lf5 : natural) (x : natural) (y : lst) (n : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma conj63: forall (lf6 : lst) (x : natural) (y : lst), @eq natural (count (Cons x lf6) x) (Succ (Succ (count y x))).
Lemma conj64: forall (x : natural) (y : lst) (n : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x))).


<---CREATE SKETCHES--->
Time elapsed: 200 seconds
Sketches:
Sketch conj3_sketch0 : @eq natural lf1 (##hole##)
Sketch conj3_term_sketch0 : @eq natural (Succ lf4) (##hole##)
Sketch conj11_sketch0 : @eq natural lf1 (##hole##)
Sketch conj11_sketch1 : @eq natural lf1 (Succ (##hole##))
Sketch conj11_term_sketch0 : @eq natural (Succ (Succ lf5)) (##hole##)
Sketch conj11_term_sketch1 : @eq natural (Succ lf5) (##hole##)
Sketch conj15_sketch0 : @eq natural lf1 (Succ (Succ (##hole##)))
Sketch conj15_sketch1 : @eq natural lf1 (##hole##)
Sketch conj15_sketch2 : @eq natural lf1 (Succ (##hole##))
Sketch conj15_term_sketch0 : @eq natural (count y x) (##hole##)
Sketch conj15_term_sketch1 : @eq natural (Succ (Succ (count y x))) (##hole##)
Sketch conj15_term_sketch2 : @eq natural (Succ (count y x)) (##hole##)
Sketch conj17_sketch0 : @eq natural (##hole##) lf2
Sketch conj17_term_sketch0 : @eq natural (count lf3 x) (##hole##)
Sketch conj19_sketch0 : @eq natural (##hole##) (Succ lf4)
Sketch conj19_sketch1 : @eq natural (count lf3 x) (##hole##)
Sketch conj19_term_sketch0 : @eq natural (count lf3 x) (##hole##)
Sketch conj19_term_sketch1 : @eq natural (Succ lf4) (##hole##)
Sketch conj27_sketch0 : @eq natural (##hole##) (Succ (Succ lf5))
Sketch conj27_sketch1 : @eq natural (count lf3 x) (##hole##)
Sketch conj27_sketch2 : @eq natural (count lf3 x) (Succ (##hole##))
Sketch conj27_term_sketch0 : @eq natural (count lf3 x) (##hole##)
Sketch conj27_term_sketch1 : @eq natural (Succ (Succ lf5)) (##hole##)
Sketch conj27_term_sketch2 : @eq natural (Succ lf5) (##hole##)
Sketch conj31_sketch0 : @eq natural (##hole##) (Succ (Succ (count y x)))
Sketch conj31_sketch1 : @eq natural (count lf3 x) (Succ (Succ (##hole##)))
Sketch conj31_sketch2 : @eq natural (count lf3 x) (##hole##)
Sketch conj31_sketch3 : @eq natural (count lf3 x) (Succ (##hole##))
Sketch conj31_term_sketch0 : @eq natural (count lf3 x) (##hole##)
Sketch conj31_term_sketch1 : @eq natural (count y x) (##hole##)
Sketch conj31_term_sketch2 : @eq natural (Succ (Succ (count y x))) (##hole##)
Sketch conj31_term_sketch3 : @eq natural (Succ (count y x)) (##hole##)
Sketch conj49_sketch0 : @eq natural (count (##hole##) x) lf2
Sketch conj49_sketch1 : @eq natural (##hole##) lf2
Sketch conj49_term_sketch0 : @eq lst (Cons x lf6) (##hole##)
Sketch conj49_term_sketch1 : @eq natural (count (Cons x lf6) x) (##hole##)
Sketch conj50_sketch0 : @eq natural (count (##hole##) x) lf2
Sketch conj50_sketch1 : @eq natural (count (Cons x (##hole##)) x) lf2
Sketch conj50_sketch2 : @eq natural (##hole##) lf2
Sketch conj50_term_sketch0 : @eq lst (Cons x (Cons n y)) (##hole##)
Sketch conj50_term_sketch1 : @eq lst (Cons n y) (##hole##)
Sketch conj50_term_sketch2 : @eq natural (count (Cons x (Cons n y)) x) (##hole##)
Sketch conj51_sketch0 : @eq natural (count (##hole##) x) (Succ lf4)
Sketch conj51_sketch1 : @eq natural (##hole##) (Succ lf4)
Sketch conj51_sketch2 : @eq natural (count (Cons x lf6) x) (##hole##)
Sketch conj51_term_sketch0 : @eq lst (Cons x lf6) (##hole##)
Sketch conj51_term_sketch1 : @eq natural (count (Cons x lf6) x) (##hole##)
Sketch conj51_term_sketch2 : @eq natural (Succ lf4) (##hole##)
Sketch conj52_imp_sketch0 : forall
  _ : forall _ : @eq natural (count (insort y x) x) lf4,
      @eq bool (##hole##) true,
@eq natural (count (Cons x (Cons n y)) x) (Succ lf4)
Sketch conj52_imp_sketch4 : forall
  _ : forall _ : @eq natural (count (insort y x) x) lf4,
      @eq bool (less x n) true, @eq natural (count (##hole##) x) (Succ lf4)
Sketch conj52_imp_sketch1 : forall
  _ : forall _ : @eq natural (count (insort y x) x) lf4,
      @eq bool (less x n) true,
@eq natural (count (Cons x (##hole##)) x) (Succ lf4)
Sketch conj52_imp_sketch2 : forall
  _ : forall _ : @eq natural (count (##hole##) x) lf4,
      @eq bool (less x n) true,
@eq natural (count (Cons x (Cons n y)) x) (Succ lf4)
Sketch conj52_imp_sketch5 : forall
  _ : forall _ : @eq natural (count (insort y x) x) lf4,
      @eq bool (less x n) true,
@eq natural (count (Cons x (Cons n y)) x) (##hole##)
Sketch conj52_imp_sketch6 : forall _ : forall _ : @eq natural (##hole##) lf4, @eq bool (less x n) true,
@eq natural (count (Cons x (Cons n y)) x) (Succ lf4)
Sketch conj52_imp_sketch3 : forall
  _ : forall _ : @eq natural (count (insort y x) x) lf4,
      @eq bool (less x n) (##hole##),
@eq natural (count (Cons x (Cons n y)) x) (Succ lf4)
Sketch conj52_imp_sketch7 : forall
  _ : forall _ : @eq natural (count (insort y x) x) lf4,
      @eq bool (less x n) true, @eq natural (##hole##) (Succ lf4)
Sketch conj52_imp_term_sketch0 : @eq bool (less x n) (##hole##)
Sketch conj52_imp_term_sketch4 : @eq lst (Cons x (Cons n y)) (##hole##)
Sketch conj52_imp_term_sketch1 : @eq lst (Cons n y) (##hole##)
Sketch conj52_imp_term_sketch2 : @eq lst (insort y x) (##hole##)
Sketch conj52_imp_term_sketch5 : @eq natural (Succ lf4) (##hole##)
Sketch conj52_imp_term_sketch6 : @eq natural (count (insort y x) x) (##hole##)
Sketch conj52_imp_term_sketch3 : @eq bool true (##hole##)
Sketch conj52_imp_term_sketch7 : @eq natural (count (Cons x (Cons n y)) x) (##hole##)
Sketch conj52_sketch0 : @eq natural (count (##hole##) x) (Succ lf4)
Sketch conj52_sketch1 : @eq natural (count (Cons x (Cons n y)) x) (##hole##)
Sketch conj52_sketch2 : @eq natural (count (Cons x (##hole##)) x) (Succ lf4)
Sketch conj52_sketch3 : @eq natural (##hole##) (Succ lf4)
Sketch conj52_term_sketch0 : @eq lst (Cons x (Cons n y)) (##hole##)
Sketch conj52_term_sketch1 : @eq natural (Succ lf4) (##hole##)
Sketch conj52_term_sketch2 : @eq lst (Cons n y) (##hole##)
Sketch conj52_term_sketch3 : @eq natural (count (Cons x (Cons n y)) x) (##hole##)
Sketch conj59_sketch0 : @eq natural (count (##hole##) x) (Succ (Succ lf5))
Sketch conj59_sketch1 : @eq natural (##hole##) (Succ (Succ lf5))
Sketch conj59_sketch2 : @eq natural (count (Cons x lf6) x) (##hole##)
Sketch conj59_sketch3 : @eq natural (count (Cons x lf6) x) (Succ (##hole##))
Sketch conj59_term_sketch0 : @eq lst (Cons x lf6) (##hole##)
Sketch conj59_term_sketch1 : @eq natural (count (Cons x lf6) x) (##hole##)
Sketch conj59_term_sketch2 : @eq natural (Succ (Succ lf5)) (##hole##)
Sketch conj59_term_sketch3 : @eq natural (Succ lf5) (##hole##)
Sketch conj60_imp_sketch0 : forall (_ : @eq bool (lfeqb x n) true)
  (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),
       @eq bool (##hole##) true),
@eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5))
Sketch conj60_imp_sketch4 : forall (_ : @eq bool (lfeqb x n) true)
  (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),
       @eq bool (less x n) true),
@eq natural (count (Cons x (Cons n y)) x) (##hole##)
Sketch conj60_imp_sketch5 : forall (_ : @eq bool (lfeqb x n) true)
  (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),
       @eq bool (less x n) true),
@eq natural (count (##hole##) x) (Succ (Succ lf5))
Sketch conj60_imp_sketch1 : forall (_ : @eq bool (lfeqb x n) true)
  (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),
       @eq bool (less x n) true),
@eq natural (count (Cons x (##hole##)) x) (Succ (Succ lf5))
Sketch conj60_imp_sketch2 : forall (_ : @eq bool (lfeqb x n) true)
  (_ : forall _ : @eq natural (count (##hole##) x) (Succ lf5),
       @eq bool (less x n) true),
@eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5))
Sketch conj60_imp_sketch6 : forall (_ : @eq bool (lfeqb x n) true)
  (_ : forall _ : @eq natural (count (insort y x) x) (##hole##),
       @eq bool (less x n) true),
@eq natural (count (Cons x (Cons n y)) x) (Succ (##hole##))
Sketch conj60_imp_sketch7 : forall (_ : @eq bool (lfeqb x n) true)
  (_ : forall _ : @eq natural (##hole##) (Succ lf5), @eq bool (less x n) true),
@eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5))
Sketch conj60_imp_sketch8 : forall (_ : @eq bool (##hole##) true)
  (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),
       @eq bool (less x n) true),
@eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5))
Sketch conj60_imp_sketch3 : forall (_ : @eq bool (lfeqb x n) (##hole##))
  (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),
       @eq bool (less x n) (##hole##)),
@eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5))
Sketch conj60_imp_sketch9 : forall (_ : @eq bool (lfeqb x n) true)
  (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),
       @eq bool (less x n) true), @eq natural (##hole##) (Succ (Succ lf5))
Sketch conj60_imp_term_sketch0 : @eq bool (less x n) (##hole##)
Sketch conj60_imp_term_sketch4 : @eq natural (Succ (Succ lf5)) (##hole##)
Sketch conj60_imp_term_sketch5 : @eq lst (Cons x (Cons n y)) (##hole##)
Sketch conj60_imp_term_sketch1 : @eq lst (Cons n y) (##hole##)
Sketch conj60_imp_term_sketch2 : @eq lst (insort y x) (##hole##)
Sketch conj60_imp_term_sketch6 : @eq natural (Succ lf5) (##hole##)
Sketch conj60_imp_term_sketch7 : @eq natural (count (insort y x) x) (##hole##)
Sketch conj60_imp_term_sketch8 : @eq bool (lfeqb x n) (##hole##)
Sketch conj60_imp_term_sketch3 : @eq bool true (##hole##)
Sketch conj60_imp_term_sketch9 : @eq natural (count (Cons x (Cons n y)) x) (##hole##)
Sketch conj60_sketch0 : @eq natural (count (Cons x (Cons n y)) x) (##hole##)
Sketch conj60_sketch1 : @eq natural (count (##hole##) x) (Succ (Succ lf5))
Sketch conj60_sketch2 : @eq natural (count (Cons x (Cons n y)) x) (Succ (##hole##))
Sketch conj60_sketch3 : @eq natural (count (Cons x (##hole##)) x) (Succ (Succ lf5))
Sketch conj60_sketch4 : @eq natural (##hole##) (Succ (Succ lf5))
Sketch conj60_term_sketch0 : @eq natural (Succ (Succ lf5)) (##hole##)
Sketch conj60_term_sketch1 : @eq lst (Cons x (Cons n y)) (##hole##)
Sketch conj60_term_sketch2 : @eq natural (Succ lf5) (##hole##)
Sketch conj60_term_sketch3 : @eq lst (Cons n y) (##hole##)
Sketch conj60_term_sketch4 : @eq natural (count (Cons x (Cons n y)) x) (##hole##)
Sketch conj63_sketch0 : @eq natural (count (##hole##) x) (Succ (Succ (count y x)))
Sketch conj63_sketch1 : @eq natural (##hole##) (Succ (Succ (count y x)))
Sketch conj63_sketch2 : @eq natural (count (Cons x lf6) x) (Succ (Succ (##hole##)))
Sketch conj63_sketch3 : @eq natural (count (Cons x lf6) x) (##hole##)
Sketch conj63_sketch4 : @eq natural (count (Cons x lf6) x) (Succ (##hole##))
Sketch conj63_term_sketch0 : @eq lst (Cons x lf6) (##hole##)
Sketch conj63_term_sketch1 : @eq natural (count (Cons x lf6) x) (##hole##)
Sketch conj63_term_sketch2 : @eq natural (count y x) (##hole##)
Sketch conj63_term_sketch3 : @eq natural (Succ (Succ (count y x))) (##hole##)
Sketch conj63_term_sketch4 : @eq natural (Succ (count y x)) (##hole##)
Sketch conj64_sketch0 : @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (##hole##)))
Sketch conj64_sketch1 : @eq natural (count (##hole##) x) (Succ (Succ (count y x)))
Sketch conj64_sketch2 : @eq natural (count (Cons x (Cons n y)) x) (##hole##)
Sketch conj64_sketch3 : @eq natural (count (Cons x (##hole##)) x) (Succ (Succ (count y x)))
Sketch conj64_sketch4 : @eq natural (count (Cons x (Cons n y)) x) (Succ (##hole##))
Sketch conj64_sketch5 : @eq natural (##hole##) (Succ (Succ (count y x)))
Sketch conj64_term_sketch0 : @eq natural (count y x) (##hole##)
Sketch conj64_term_sketch1 : @eq lst (Cons x (Cons n y)) (##hole##)
Sketch conj64_term_sketch2 : @eq natural (Succ (Succ (count y x))) (##hole##)
Sketch conj64_term_sketch3 : @eq lst (Cons n y) (##hole##)
Sketch conj64_term_sketch4 : @eq natural (Succ (count y x)) (##hole##)
Sketch conj64_term_sketch5 : @eq natural (count (Cons x (Cons n y)) x) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 374 seconds
Problems per Sketch:
Sketch conj52_sketch2 --> Problem  synth_32
Sketch conj52_sketch1 --> Problem  synth_20
Sketch conj60_term_sketch1 --> Problem  synth_18
Sketch conj59_term_sketch2 --> Problem  synth_4
Sketch conj11_term_sketch1 --> Problem  synth_5
Sketch conj63_sketch4 --> Problem  synth_34
Sketch conj15_term_sketch2 --> Problem  synth_9
Sketch conj59_term_sketch1 --> Problem  synth_16
Sketch conj59_sketch1 --> Problem  synth_4
Sketch conj60_sketch0 --> Problem  synth_20
Sketch conj50_sketch2 --> Problem  synth_10
Sketch conj17_term_sketch0 --> Problem  synth_11
Sketch conj63_term_sketch0 --> Problem  synth_15
Sketch conj31_sketch0 --> Problem  synth_8
Sketch conj52_imp_term_sketch5 --> Problem  synth_2
Sketch conj50_term_sketch2 --> Problem  synth_20
Sketch conj60_term_sketch3 --> Problem  synth_19
Sketch conj64_term_sketch5 --> Problem  synth_20
Sketch conj60_sketch2 --> Problem  synth_40
Sketch conj59_sketch3 --> Problem  synth_34
Sketch conj64_term_sketch1 --> Problem  synth_18
Sketch conj63_term_sketch4 --> Problem  synth_9
Sketch conj3_term_sketch0 --> Problem  synth_2
Sketch conj60_imp_sketch1 --> Problem  synth_38
Sketch conj11_term_sketch0 --> Problem  synth_4
Sketch conj52_imp_sketch3 --> Problem  synth_28
Sketch conj19_term_sketch1 --> Problem  synth_2
Sketch conj27_sketch1 --> Problem  synth_11
Sketch conj60_imp_sketch9 --> Problem  synth_36
Sketch conj60_sketch3 --> Problem  synth_44
Sketch conj51_sketch0 --> Problem  synth_21
Sketch conj52_term_sketch3 --> Problem  synth_20
Sketch conj63_term_sketch1 --> Problem  synth_16
Sketch conj60_imp_sketch4 --> Problem  synth_36
Sketch conj15_sketch1 --> Problem  synth_1
Sketch conj52_imp_sketch7 --> Problem  synth_26
Sketch conj51_term_sketch1 --> Problem  synth_16
Sketch conj15_term_sketch1 --> Problem  synth_8
Sketch conj60_imp_sketch8 --> Problem  synth_42
Sketch conj52_term_sketch0 --> Problem  synth_18
Sketch conj27_term_sketch1 --> Problem  synth_4
Sketch conj60_imp_term_sketch5 --> Problem  synth_18
Sketch conj49_sketch0 --> Problem  synth_14
Sketch conj52_sketch0 --> Problem  synth_21
Sketch conj52_imp_term_sketch1 --> Problem  synth_19
Sketch conj49_term_sketch1 --> Problem  synth_16
Sketch conj64_term_sketch4 --> Problem  synth_9
Sketch conj64_sketch1 --> Problem  synth_45
Sketch conj50_term_sketch0 --> Problem  synth_18
Sketch conj31_term_sketch0 --> Problem  synth_11
Sketch conj52_imp_term_sketch7 --> Problem  synth_20
Sketch conj63_sketch1 --> Problem  synth_8
Sketch conj27_sketch0 --> Problem  synth_4
Sketch conj60_imp_term_sketch6 --> Problem  synth_5
Sketch conj52_imp_sketch4 --> Problem  synth_23
Sketch conj64_sketch4 --> Problem  synth_40
Sketch conj15_sketch2 --> Problem  synth_3
Sketch conj50_sketch1 --> Problem  synth_17
Sketch conj52_imp_term_sketch4 --> Problem  synth_18
Sketch conj60_imp_term_sketch1 --> Problem  synth_19
Sketch conj64_sketch5 --> Problem  synth_8
Sketch conj60_sketch4 --> Problem  synth_4
Sketch conj60_imp_sketch0 --> Problem  synth_35
Sketch conj52_imp_sketch0 --> Problem  synth_22
Sketch conj60_imp_term_sketch0 --> Problem  synth_29
Sketch conj52_imp_term_sketch0 --> Problem  synth_29
Sketch conj11_sketch0 --> Problem  synth_1
Sketch conj27_term_sketch0 --> Problem  synth_11
Sketch conj51_sketch2 --> Problem  synth_16
Sketch conj63_term_sketch2 --> Problem  synth_7
Sketch conj15_term_sketch0 --> Problem  synth_7
Sketch conj52_imp_term_sketch6 --> Problem  synth_9
Sketch conj52_imp_sketch2 --> Problem  synth_25
Sketch conj60_imp_sketch6 --> Problem  synth_40
Sketch conj64_term_sketch0 --> Problem  synth_7
Sketch conj60_imp_sketch7 --> Problem  synth_41
Sketch conj60_term_sketch4 --> Problem  synth_20
Sketch conj52_imp_sketch6 --> Problem  synth_27
Sketch conj11_sketch1 --> Problem  synth_3
Sketch conj52_imp_term_sketch2 --> Problem  synth_30
Sketch conj31_term_sketch3 --> Problem  synth_9
Sketch conj31_term_sketch1 --> Problem  synth_7
Sketch conj60_imp_term_sketch3 --> Problem  synth_31
Sketch conj60_term_sketch2 --> Problem  synth_5
Sketch conj60_sketch1 --> Problem  synth_33
Sketch conj52_imp_sketch1 --> Problem  synth_24
Sketch conj27_term_sketch2 --> Problem  synth_5
Sketch conj59_sketch2 --> Problem  synth_16
Sketch conj60_imp_term_sketch9 --> Problem  synth_20
Sketch conj52_term_sketch1 --> Problem  synth_2
Sketch conj60_imp_term_sketch2 --> Problem  synth_30
Sketch conj51_term_sketch2 --> Problem  synth_2
Sketch conj27_sketch2 --> Problem  synth_12
Sketch conj60_imp_term_sketch8 --> Problem  synth_43
Sketch conj60_term_sketch0 --> Problem  synth_4
Sketch conj52_term_sketch2 --> Problem  synth_19
Sketch conj31_sketch2 --> Problem  synth_11
Sketch conj31_sketch3 --> Problem  synth_12
Sketch conj19_term_sketch0 --> Problem  synth_11
Sketch conj52_imp_term_sketch3 --> Problem  synth_31
Sketch conj60_imp_term_sketch4 --> Problem  synth_4
Sketch conj51_term_sketch0 --> Problem  synth_15
Sketch conj19_sketch0 --> Problem  synth_2
Sketch conj17_sketch0 --> Problem  synth_10
Sketch conj63_sketch2 --> Problem  synth_46
Sketch conj3_sketch0 --> Problem  synth_1
Sketch conj59_sketch0 --> Problem  synth_33
Sketch conj63_term_sketch3 --> Problem  synth_8
Sketch conj63_sketch0 --> Problem  synth_45
Sketch conj63_sketch3 --> Problem  synth_16
Sketch conj59_term_sketch0 --> Problem  synth_15
Sketch conj52_sketch3 --> Problem  synth_2
Sketch conj59_term_sketch3 --> Problem  synth_5
Sketch conj51_sketch1 --> Problem  synth_2
Sketch conj60_imp_term_sketch7 --> Problem  synth_9
Sketch conj50_term_sketch1 --> Problem  synth_19
Sketch conj50_sketch0 --> Problem  synth_14
Sketch conj64_sketch2 --> Problem  synth_20
Sketch conj64_sketch3 --> Problem  synth_48
Sketch conj19_sketch1 --> Problem  synth_11
Sketch conj64_term_sketch2 --> Problem  synth_8
Sketch conj52_imp_sketch5 --> Problem  synth_26
Sketch conj15_sketch0 --> Problem  synth_6
Sketch conj60_imp_sketch3 --> Problem  synth_42
Sketch conj60_imp_sketch5 --> Problem  synth_37
Sketch conj31_sketch1 --> Problem  synth_13
Sketch conj64_sketch0 --> Problem  synth_47
Sketch conj60_imp_sketch2 --> Problem  synth_39
Sketch conj31_term_sketch2 --> Problem  synth_8
Sketch conj64_term_sketch3 --> Problem  synth_19
Sketch conj49_sketch1 --> Problem  synth_10
Sketch conj49_term_sketch0 --> Problem  synth_15


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 685 seconds

Problem: synth_28
 lfeqb x n
 lfeqb lf4 lf4
 match lf4 with | Succ _ => true | Zero => false end
 lfeqb n x
 lfeqb x x
 true

Problem: synth_17

Problem: synth_29
 less x n
 less n x
 less x x
 less n Zero
 less x Zero
 false

Problem: synth_45
 Cons x (Cons x (sort (sort (sort (sort y)))))
 Cons x (Cons x (sort (sort (sort y))))
 Cons x (Cons x (sort (sort y)))
 Cons x (Cons x (sort y))
 Cons x (Cons x y)

Problem: synth_26
 if lfeqb x x then Succ (count (insort y n) x) else count (insort y n) x
 if lfeqb x n then Succ (count (insort y x) x) else count (insort y x) x
 if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x
 Succ (Succ (count y n))
 Succ (Succ (count y x))
 Succ lf4

Problem: synth_9
 count (insort (sort y) x) x
 Succ (count (sort y) x)
 if lfeqb x x then Succ (count (sort y) x) else count (sort y) x
 if lfeqb x x then Succ (count y x) else count y x
 count (insort y x) x
 Succ (count y x)

Problem: synth_30
 sort (sort (insort y x))
 sort (insort (sort y) x)
 insort (sort (sort y)) x
 sort (insort y x)
 insort (sort y) x
 insort y x

Problem: synth_11
 count (sort (sort (sort lf3))) x
 if lfeqb x (Succ x) then Succ (count lf3 x) else count lf3 x
 count (insort lf3 (Succ x)) x
 count (sort (sort lf3)) x
 count (sort lf3) x
 count lf3 x

Problem: synth_39
 sort (insort y n)
 sort (insort y x)
 insort (sort y) n
 insort (sort y) x
 insort y n
 insort y x

Problem: synth_1
 lf1

Problem: synth_46

Problem: synth_15
 Cons x lf6

Problem: synth_31
 true

Problem: synth_14

Problem: synth_8
 Succ (if lfeqb x x then Succ (count y x) else count y x)
 Succ (count (insort y x) x)
 if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x) else if lfeqb x x then Succ (count (sort y) x) else count (sort y) x
 if lfeqb x x then Succ (if lfeqb x x then Succ (count y x) else count y x) else if lfeqb x x then Succ (count y x) else count y x
 if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x
 Succ (Succ (count y x))

Problem: synth_34
 count (sort (sort (sort lf6))) x
 if lfeqb x (Succ x) then Succ (count lf6 x) else count lf6 x
 count (insort lf6 (Succ x)) x
 count (sort (sort lf6)) x
 count (sort lf6) x
 count lf6 x

Problem: synth_12

Problem: synth_5
 Succ (if match lf5 with | Succ Zero => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)
 Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ Zero => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ Zero => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)
 Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ Zero => true | _ => false end then Succ Zero else Zero)
 if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 (Succ Zero) then Succ (if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ (if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 (Succ Zero) then Succ (if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ (if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ Zero else Zero
 if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 lf5 then Succ (if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ (if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 lf5 then Succ (if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ (if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ Zero else Zero
 Succ lf5

Problem: synth_37
 Cons n (Cons x (sort y))
 Cons x (Cons x (sort y))
 Cons n (Cons n y)
 Cons x (Cons n y)
 Cons n (Cons x y)
 Cons x (Cons x y)

Problem: synth_2
 Succ lf4

Problem: synth_22
 less x x
 less n Zero
 lfeqb lf4 Zero
 less lf4 Zero
 less x Zero
 false

Problem: synth_20
 if lfeqb x n then Succ (count (insort y n) x) else count (insort y n) x
 if lfeqb x x then Succ (count (insort y n) x) else count (insort y n) x
 if lfeqb x n then Succ (count (insort y x) x) else count (insort y x) x
 if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x
 Succ (Succ (count y n))
 Succ (Succ (count y x))

Problem: synth_18
 Cons n (Cons x (sort y))
 Cons x (Cons x (sort y))
 Cons n (Cons n y)
 Cons x (Cons n y)
 Cons n (Cons x y)
 Cons x (Cons x y)

Problem: synth_21

Problem: synth_41
 if lfeqb x x then Succ (count y x) else count y x
 count (insort y n) x
 count (insort y x) x
 Succ (count y n)
 Succ (count y x)
 Succ lf5

Problem: synth_25
 sort (insort y n)
 sort (insort y x)
 insort (sort y) n
 insort (sort y) x
 insort y n
 insort y x

Problem: synth_13

Problem: synth_6
 if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero
 if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero
 if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero

Problem: synth_7
 count (sort (sort (sort y))) x
 if lfeqb x (Succ x) then Succ (count y x) else count y x
 count (insort y (Succ x)) x
 count (sort (sort y)) x
 count (sort y) x
 count y x

Problem: synth_4
 Succ (Succ lf5)

Problem: synth_38
 Cons n (sort (sort y))
 Cons x (sort (sort y))
 Cons n (sort y)
 Cons x (sort y)
 Cons n y
 Cons x y

Problem: synth_23
 Cons n (Cons x (sort y))
 Cons x (Cons x (sort y))
 Cons n (Cons n y)
 Cons x (Cons n y)
 Cons n (Cons x y)
 Cons x (Cons x y)

Problem: synth_27
 if lfeqb x x then Succ (count y x) else count y x
 count (insort y n) x
 count (insort y x) x
 Succ (count y n)
 Succ (count y x)
 lf4

Problem: synth_42
 lfeqb n n
 lfeqb x n
 lfeqb n x
 lfeqb x x
 lfeqb lf5 lf5
 true

Problem: synth_16
 count (insort (sort lf6) x) x
 Succ (count (sort lf6) x)
 if lfeqb x x then Succ (count (sort lf6) x) else count (sort lf6) x
 if lfeqb x x then Succ (count lf6 x) else count lf6 x
 count (insort lf6 x) x
 Succ (count lf6 x)

Problem: synth_19
 Cons n (sort (sort (sort (sort (sort y)))))
 Cons n (sort (sort (sort (sort y))))
 Cons n (sort (sort (sort y)))
 Cons n (sort (sort y))
 Cons n (sort y)
 Cons n y

Problem: synth_40
 if lfeqb x n then Succ (count y x) else count y x
 if lfeqb x x then Succ (count y x) else count y x
 count (insort y n) x
 count (insort y x) x
 Succ (count y n)
 Succ (count y x)

Problem: synth_10
 lf2

Problem: synth_33

Problem: synth_47
 count (insort y (Succ x)) x
 count (sort (sort y)) x
 count (sort y) n
 count (sort y) x
 count y n
 count y x

Problem: synth_24
 Cons n (sort (sort y))
 Cons x (sort (sort y))
 Cons n (sort y)
 Cons x (sort y)
 Cons n y
 Cons x y

Problem: synth_3
 Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero)
 Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero)
 Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero)

Problem: synth_32

Problem: synth_48
 Cons x (sort (sort (sort (sort (sort y)))))
 Cons x (sort (sort (sort (sort y))))
 Cons x (sort (sort (sort y)))
 Cons x (sort (sort y))
 Cons x (sort y)
 Cons x y

Problem: synth_44

Problem: synth_36
 if lfeqb x x then Succ (count (insort y n) x) else count (insort y n) x
 if lfeqb x n then Succ (count (insort y x) x) else count (insort y x) x
 if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x
 Succ (Succ (count y n))
 Succ (Succ (count y x))
 Succ (Succ lf5)

Problem: synth_35
 less x x
 less lf5 lf5
 less n Zero
 less x Zero
 less lf5 Zero
 false

Problem: synth_43
 less x (Succ x)
 lfeqb n n
 lfeqb x n
 lfeqb n x
 lfeqb x x
 true

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 686 seconds
Lemmas:
Lemma candidate_1: forall (n : natural) (y : lst) (x : natural) (lf2 : natural), forall (_ : @eq bool (lfeqb x n) true) (_ : @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) lf2.
Lemma candidate_2: forall (n : natural) (y : lst) (x : natural), forall _ : @eq bool (lfeqb x n) true, @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x))).
Lemma candidate_3: forall (lf1 : natural), @eq natural lf1 (lf1).
Lemma candidate_4: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_5: forall (lf1 : natural), @eq natural lf1 (lf1).
Lemma candidate_6: forall (lf1 : natural), @eq natural lf1   (Succ      (Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero))).
Lemma candidate_7: forall (lf1 : natural), @eq natural lf1   (Succ      (Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero))).
Lemma candidate_8: forall (lf1 : natural), @eq natural lf1   (Succ      (Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero))).
Lemma candidate_9: forall (lf5 : natural), @eq natural (Succ (Succ lf5)) (Succ (Succ lf5)).
Lemma candidate_10: forall (lf5 : natural), @eq natural (Succ lf5)   (Succ (if match lf5 with | Succ Zero => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_11: forall (lf5 : natural), @eq natural (Succ lf5)   (Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ Zero => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ Zero => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_12: forall (lf5 : natural), @eq natural (Succ lf5)   (Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ Zero => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_13: forall (lf5 : natural), @eq natural (Succ lf5)   (if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 (Succ Zero) then Succ (if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ (if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 (Succ Zero) then Succ (if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ (if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ Zero else Zero).
Lemma candidate_14: forall (lf5 : natural), @eq natural (Succ lf5)   (if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 lf5 then Succ (if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ (if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 lf5 then Succ (if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ (if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_15: forall (lf5 : natural), @eq natural (Succ lf5) (Succ lf5).
Lemma candidate_16: forall (lf1 : natural), @eq natural lf1   (Succ      (Succ         (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero))).
Lemma candidate_17: forall (lf1 : natural), @eq natural lf1   (Succ      (Succ         (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero))).
Lemma candidate_18: forall (lf1 : natural), @eq natural lf1   (Succ      (Succ         (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero))).
Lemma candidate_19: forall (lf1 : natural), @eq natural lf1 (lf1).
Lemma candidate_20: forall (lf1 : natural), @eq natural lf1   (Succ      (Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero))).
Lemma candidate_21: forall (lf1 : natural), @eq natural lf1   (Succ      (Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero))).
Lemma candidate_22: forall (lf1 : natural), @eq natural lf1   (Succ      (Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero))).
Lemma candidate_23: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort (sort (sort y))) x).
Lemma candidate_24: forall (y : lst) (x : natural), @eq natural (count y x)   (if lfeqb x (Succ x) then Succ (count y x) else count y x).
Lemma candidate_25: forall (y : lst) (x : natural), @eq natural (count y x) (count (insort y (Succ x)) x).
Lemma candidate_26: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort (sort y)) x).
Lemma candidate_27: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort y) x).
Lemma candidate_28: forall (y : lst) (x : natural), @eq natural (count y x) (count y x).
Lemma candidate_29: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x)))   (Succ (if lfeqb x x then Succ (count y x) else count y x)).
Lemma candidate_30: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x))) (Succ (count (insort y x) x)).
Lemma candidate_31: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x)))   (if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x) else if lfeqb x x then Succ (count (sort y) x) else count (sort y) x).
Lemma candidate_32: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x)))   (if lfeqb x x then Succ (if lfeqb x x then Succ (count y x) else count y x) else if lfeqb x x then Succ (count y x) else count y x).
Lemma candidate_33: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x)))   (if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_34: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x))) (Succ (Succ (count y x))).
Lemma candidate_35: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (count (insort (sort y) x) x).
Lemma candidate_36: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count (sort y) x)).
Lemma candidate_37: forall (y : lst) (x : natural), @eq natural (Succ (count y x))   (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x).
Lemma candidate_38: forall (y : lst) (x : natural), @eq natural (Succ (count y x))   (if lfeqb x x then Succ (count y x) else count y x).
Lemma candidate_39: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (count (insort y x) x).
Lemma candidate_40: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count y x)).
Lemma candidate_41: forall (lf2 : natural), @eq natural (lf2) lf2.
Lemma candidate_42: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort (sort lf3))) x).
Lemma candidate_43: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb x (Succ x) then Succ (count lf3 x) else count lf3 x).
Lemma candidate_44: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (insort lf3 (Succ x)) x).
Lemma candidate_45: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort lf3)) x).
Lemma candidate_46: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort lf3) x).
Lemma candidate_47: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count lf3 x).
Lemma candidate_48: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_49: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort (sort lf3))) x).
Lemma candidate_50: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb x (Succ x) then Succ (count lf3 x) else count lf3 x).
Lemma candidate_51: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (insort lf3 (Succ x)) x).
Lemma candidate_52: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort lf3)) x).
Lemma candidate_53: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort lf3) x).
Lemma candidate_54: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count lf3 x).
Lemma candidate_55: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort (sort lf3))) x).
Lemma candidate_56: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb x (Succ x) then Succ (count lf3 x) else count lf3 x).
Lemma candidate_57: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (insort lf3 (Succ x)) x).
Lemma candidate_58: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort lf3)) x).
Lemma candidate_59: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort lf3) x).
Lemma candidate_60: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count lf3 x).
Lemma candidate_61: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_62: forall (lf5 : natural), @eq natural (Succ (Succ lf5)) (Succ (Succ lf5)).
Lemma candidate_63: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort (sort lf3))) x).
Lemma candidate_64: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb x (Succ x) then Succ (count lf3 x) else count lf3 x).
Lemma candidate_65: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (insort lf3 (Succ x)) x).
Lemma candidate_66: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort lf3)) x).
Lemma candidate_67: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort lf3) x).
Lemma candidate_68: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count lf3 x).
Lemma candidate_69: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort (sort lf3))) x).
Lemma candidate_70: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb x (Succ x) then Succ (count lf3 x) else count lf3 x).
Lemma candidate_71: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (insort lf3 (Succ x)) x).
Lemma candidate_72: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort lf3)) x).
Lemma candidate_73: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort lf3) x).
Lemma candidate_74: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count lf3 x).
Lemma candidate_75: forall (lf5 : natural), @eq natural (Succ (Succ lf5)) (Succ (Succ lf5)).
Lemma candidate_76: forall (lf5 : natural), @eq natural (Succ lf5)   (Succ (if match lf5 with | Succ Zero => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_77: forall (lf5 : natural), @eq natural (Succ lf5)   (Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ Zero => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ Zero => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_78: forall (lf5 : natural), @eq natural (Succ lf5)   (Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ Zero => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_79: forall (lf5 : natural), @eq natural (Succ lf5)   (if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 (Succ Zero) then Succ (if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ (if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 (Succ Zero) then Succ (if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ (if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ Zero else Zero).
Lemma candidate_80: forall (lf5 : natural), @eq natural (Succ lf5)   (if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 lf5 then Succ (if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ (if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 lf5 then Succ (if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ (if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_81: forall (lf5 : natural), @eq natural (Succ lf5) (Succ lf5).
Lemma candidate_82: forall (y : lst) (x : natural), @eq natural (Succ (if lfeqb x x then Succ (count y x) else count y x))   (Succ (Succ (count y x))).
Lemma candidate_83: forall (y : lst) (x : natural), @eq natural (Succ (count (insort y x) x)) (Succ (Succ (count y x))).
Lemma candidate_84: forall (y : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x) else if lfeqb x x then Succ (count (sort y) x) else count (sort y) x)   (Succ (Succ (count y x))).
Lemma candidate_85: forall (y : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (if lfeqb x x then Succ (count y x) else count y x) else if lfeqb x x then Succ (count y x) else count y x)   (Succ (Succ (count y x))).
Lemma candidate_86: forall (y : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x)   (Succ (Succ (count y x))).
Lemma candidate_87: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x))) (Succ (Succ (count y x))).
Lemma candidate_88: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort (sort lf3))) x).
Lemma candidate_89: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb x (Succ x) then Succ (count lf3 x) else count lf3 x).
Lemma candidate_90: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (insort lf3 (Succ x)) x).
Lemma candidate_91: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort lf3)) x).
Lemma candidate_92: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort lf3) x).
Lemma candidate_93: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count lf3 x).
Lemma candidate_94: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort (sort lf3))) x).
Lemma candidate_95: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb x (Succ x) then Succ (count lf3 x) else count lf3 x).
Lemma candidate_96: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (insort lf3 (Succ x)) x).
Lemma candidate_97: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort lf3)) x).
Lemma candidate_98: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort lf3) x).
Lemma candidate_99: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count lf3 x).
Lemma candidate_100: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort (sort (sort y))) x).
Lemma candidate_101: forall (y : lst) (x : natural), @eq natural (count y x)   (if lfeqb x (Succ x) then Succ (count y x) else count y x).
Lemma candidate_102: forall (y : lst) (x : natural), @eq natural (count y x) (count (insort y (Succ x)) x).
Lemma candidate_103: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort (sort y)) x).
Lemma candidate_104: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort y) x).
Lemma candidate_105: forall (y : lst) (x : natural), @eq natural (count y x) (count y x).
Lemma candidate_106: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x)))   (Succ (if lfeqb x x then Succ (count y x) else count y x)).
Lemma candidate_107: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x))) (Succ (count (insort y x) x)).
Lemma candidate_108: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x)))   (if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x) else if lfeqb x x then Succ (count (sort y) x) else count (sort y) x).
Lemma candidate_109: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x)))   (if lfeqb x x then Succ (if lfeqb x x then Succ (count y x) else count y x) else if lfeqb x x then Succ (count y x) else count y x).
Lemma candidate_110: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x)))   (if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_111: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x))) (Succ (Succ (count y x))).
Lemma candidate_112: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (count (insort (sort y) x) x).
Lemma candidate_113: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count (sort y) x)).
Lemma candidate_114: forall (y : lst) (x : natural), @eq natural (Succ (count y x))   (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x).
Lemma candidate_115: forall (y : lst) (x : natural), @eq natural (Succ (count y x))   (if lfeqb x x then Succ (count y x) else count y x).
Lemma candidate_116: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (count (insort y x) x).
Lemma candidate_117: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count y x)).
Lemma candidate_118: forall (lf2 : natural), @eq natural (lf2) lf2.
Lemma candidate_119: forall (x : natural) (lf6 : lst), @eq lst (Cons x lf6) (Cons x lf6).
Lemma candidate_120: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (count (insort (sort lf6) x) x).
Lemma candidate_121: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count (sort lf6) x)).
Lemma candidate_122: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x)   (if lfeqb x x then Succ (count (sort lf6) x) else count (sort lf6) x).
Lemma candidate_123: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x)   (if lfeqb x x then Succ (count lf6 x) else count lf6 x).
Lemma candidate_124: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (count (insort lf6 x) x).
Lemma candidate_125: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count lf6 x)).
Lemma candidate_126: forall (lf2 : natural), @eq natural (lf2) lf2.
Lemma candidate_127: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons n (Cons x (sort y))).
Lemma candidate_128: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons x (Cons x (sort y))).
Lemma candidate_129: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons n (Cons n y)).
Lemma candidate_130: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons x (Cons n y)).
Lemma candidate_131: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons n (Cons x y)).
Lemma candidate_132: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons x (Cons x y)).
Lemma candidate_133: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (sort (sort (sort (sort (sort y)))))).
Lemma candidate_134: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (sort (sort (sort (sort y))))).
Lemma candidate_135: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (sort (sort (sort y)))).
Lemma candidate_136: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (sort (sort y))).
Lemma candidate_137: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (sort y)).
Lemma candidate_138: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n y).
Lemma candidate_139: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x n then Succ (count (insort y n) x) else count (insort y n) x).
Lemma candidate_140: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y n) x) else count (insort y n) x).
Lemma candidate_141: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x n then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_142: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_143: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y n))).
Lemma candidate_144: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x))).
Lemma candidate_145: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_146: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (count (insort (sort lf6) x) x).
Lemma candidate_147: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count (sort lf6) x)).
Lemma candidate_148: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x)   (if lfeqb x x then Succ (count (sort lf6) x) else count (sort lf6) x).
Lemma candidate_149: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x)   (if lfeqb x x then Succ (count lf6 x) else count lf6 x).
Lemma candidate_150: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (count (insort lf6 x) x).
Lemma candidate_151: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count lf6 x)).
Lemma candidate_152: forall (x : natural) (lf6 : lst), @eq lst (Cons x lf6) (Cons x lf6).
Lemma candidate_153: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (count (insort (sort lf6) x) x).
Lemma candidate_154: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count (sort lf6) x)).
Lemma candidate_155: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x)   (if lfeqb x x then Succ (count (sort lf6) x) else count (sort lf6) x).
Lemma candidate_156: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x)   (if lfeqb x x then Succ (count lf6 x) else count lf6 x).
Lemma candidate_157: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (count (insort lf6 x) x).
Lemma candidate_158: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count lf6 x)).
Lemma candidate_159: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_160: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x x) true, @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma candidate_161: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less n Zero) true, @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma candidate_162: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (lfeqb lf4 Zero) true, @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma candidate_163: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less lf4 Zero) true, @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma candidate_164: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x Zero) true, @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma candidate_165: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (false) true, @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma candidate_166: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) true, @eq natural (count (Cons n (Cons x (sort y))) x) (Succ lf4).
Lemma candidate_167: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) true, @eq natural (count (Cons x (Cons x (sort y))) x) (Succ lf4).
Lemma candidate_168: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) true, @eq natural (count (Cons n (Cons n y)) x) (Succ lf4).
Lemma candidate_169: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) true, @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma candidate_170: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) true, @eq natural (count (Cons n (Cons x y)) x) (Succ lf4).
Lemma candidate_171: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) true, @eq natural (count (Cons x (Cons x y)) x) (Succ lf4).
Lemma candidate_172: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) true, @eq natural (count (Cons x (Cons n (sort (sort y)))) x) (Succ lf4).
Lemma candidate_173: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) true, @eq natural (count (Cons x (Cons x (sort (sort y)))) x) (Succ lf4).
Lemma candidate_174: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) true, @eq natural (count (Cons x (Cons n (sort y))) x) (Succ lf4).
Lemma candidate_175: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) true, @eq natural (count (Cons x (Cons x (sort y))) x) (Succ lf4).
Lemma candidate_176: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) true, @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma candidate_177: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) true, @eq natural (count (Cons x (Cons x y)) x) (Succ lf4).
Lemma candidate_178: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (sort (insort y n)) x) lf4,       @eq bool (less x n) true, @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma candidate_179: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (sort (insort y x)) x) lf4,       @eq bool (less x n) true, @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma candidate_180: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort (sort y) n) x) lf4,       @eq bool (less x n) true, @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma candidate_181: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort (sort y) x) x) lf4,       @eq bool (less x n) true, @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma candidate_182: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y n) x) lf4,       @eq bool (less x n) true, @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma candidate_183: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) true, @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma candidate_184: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) true, @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y n) x) else count (insort y n) x).
Lemma candidate_185: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) true, @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x n then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_186: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) true, @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_187: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) true, @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y n))).
Lemma candidate_188: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) true, @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x))).
Lemma candidate_189: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) true, @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma candidate_190: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall         _ : @eq natural (if lfeqb x x then Succ (count y x) else count y x)               lf4, @eq bool (less x n) true, @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma candidate_191: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y n) x) lf4,       @eq bool (less x n) true, @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma candidate_192: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) true, @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma candidate_193: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (Succ (count y n)) lf4, @eq bool (less x n) true, @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma candidate_194: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (Succ (count y x)) lf4, @eq bool (less x n) true, @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma candidate_195: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall _ : forall _ : @eq natural (lf4) lf4, @eq bool (less x n) true, @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma candidate_196: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) (lfeqb x n), @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma candidate_197: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) (lfeqb lf4 lf4), @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma candidate_198: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n)         (match lf4 with | Succ _ => true | Zero => false end), @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma candidate_199: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) (lfeqb n x), @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma candidate_200: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) (lfeqb x x), @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma candidate_201: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) (true), @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma candidate_202: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) true, @eq natural   (if lfeqb x x then Succ (count (insort y n) x) else count (insort y n) x)   (Succ lf4).
Lemma candidate_203: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) true, @eq natural   (if lfeqb x n then Succ (count (insort y x) x) else count (insort y x) x)   (Succ lf4).
Lemma candidate_204: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) true, @eq natural   (if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x)   (Succ lf4).
Lemma candidate_205: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) true, @eq natural (Succ (Succ (count y n))) (Succ lf4).
Lemma candidate_206: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) true, @eq natural (Succ (Succ (count y x))) (Succ lf4).
Lemma candidate_207: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) true, @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_208: forall (n : natural) (x : natural), @eq bool (less x n) (less x n).
Lemma candidate_209: forall (n : natural) (x : natural), @eq bool (less x n) (less n x).
Lemma candidate_210: forall (n : natural) (x : natural), @eq bool (less x n) (less x x).
Lemma candidate_211: forall (n : natural) (x : natural), @eq bool (less x n) (less n Zero).
Lemma candidate_212: forall (n : natural) (x : natural), @eq bool (less x n) (less x Zero).
Lemma candidate_213: forall (n : natural) (x : natural), @eq bool (less x n) (false).
Lemma candidate_214: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons n (Cons x (sort y))).
Lemma candidate_215: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons x (Cons x (sort y))).
Lemma candidate_216: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons n (Cons n y)).
Lemma candidate_217: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons x (Cons n y)).
Lemma candidate_218: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons n (Cons x y)).
Lemma candidate_219: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons x (Cons x y)).
Lemma candidate_220: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (sort (sort (sort (sort (sort y)))))).
Lemma candidate_221: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (sort (sort (sort (sort y))))).
Lemma candidate_222: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (sort (sort (sort y)))).
Lemma candidate_223: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (sort (sort y))).
Lemma candidate_224: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (sort y)).
Lemma candidate_225: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n y).
Lemma candidate_226: forall (y : lst) (x : natural), @eq lst (insort y x) (sort (sort (insort y x))).
Lemma candidate_227: forall (y : lst) (x : natural), @eq lst (insort y x) (sort (insort (sort y) x)).
Lemma candidate_228: forall (y : lst) (x : natural), @eq lst (insort y x) (insort (sort (sort y)) x).
Lemma candidate_229: forall (y : lst) (x : natural), @eq lst (insort y x) (sort (insort y x)).
Lemma candidate_230: forall (y : lst) (x : natural), @eq lst (insort y x) (insort (sort y) x).
Lemma candidate_231: forall (y : lst) (x : natural), @eq lst (insort y x) (insort y x).
Lemma candidate_232: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_233: forall (y : lst) (x : natural), @eq natural (count (insort y x) x) (count (insort (sort y) x) x).
Lemma candidate_234: forall (y : lst) (x : natural), @eq natural (count (insort y x) x) (Succ (count (sort y) x)).
Lemma candidate_235: forall (y : lst) (x : natural), @eq natural (count (insort y x) x)   (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x).
Lemma candidate_236: forall (y : lst) (x : natural), @eq natural (count (insort y x) x)   (if lfeqb x x then Succ (count y x) else count y x).
Lemma candidate_237: forall (y : lst) (x : natural), @eq natural (count (insort y x) x) (count (insort y x) x).
Lemma candidate_238: forall (y : lst) (x : natural), @eq natural (count (insort y x) x) (Succ (count y x)).
Lemma candidate_239: @eq bool true (true).
Lemma candidate_240: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x n then Succ (count (insort y n) x) else count (insort y n) x).
Lemma candidate_241: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y n) x) else count (insort y n) x).
Lemma candidate_242: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x n then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_243: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_244: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y n))).
Lemma candidate_245: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x))).
Lemma candidate_246: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x n then Succ (count (insort y n) x) else count (insort y n) x).
Lemma candidate_247: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y n) x) else count (insort y n) x).
Lemma candidate_248: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x n then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_249: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_250: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y n))).
Lemma candidate_251: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x))).
Lemma candidate_252: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_253: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons n (Cons x (sort y))).
Lemma candidate_254: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons x (Cons x (sort y))).
Lemma candidate_255: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons n (Cons n y)).
Lemma candidate_256: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons x (Cons n y)).
Lemma candidate_257: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons n (Cons x y)).
Lemma candidate_258: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons x (Cons x y)).
Lemma candidate_259: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_260: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (sort (sort (sort (sort (sort y)))))).
Lemma candidate_261: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (sort (sort (sort (sort y))))).
Lemma candidate_262: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (sort (sort (sort y)))).
Lemma candidate_263: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (sort (sort y))).
Lemma candidate_264: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (sort y)).
Lemma candidate_265: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n y).
Lemma candidate_266: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x n then Succ (count (insort y n) x) else count (insort y n) x).
Lemma candidate_267: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y n) x) else count (insort y n) x).
Lemma candidate_268: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x n then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_269: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_270: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y n))).
Lemma candidate_271: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x))).
Lemma candidate_272: forall (lf5 : natural), @eq natural (Succ (Succ lf5)) (Succ (Succ lf5)).
Lemma candidate_273: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (count (insort (sort lf6) x) x).
Lemma candidate_274: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count (sort lf6) x)).
Lemma candidate_275: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x)   (if lfeqb x x then Succ (count (sort lf6) x) else count (sort lf6) x).
Lemma candidate_276: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x)   (if lfeqb x x then Succ (count lf6 x) else count lf6 x).
Lemma candidate_277: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (count (insort lf6 x) x).
Lemma candidate_278: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count lf6 x)).
Lemma candidate_279: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count (sort (sort (sort lf6))) x)).
Lemma candidate_280: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x)   (Succ (if lfeqb x (Succ x) then Succ (count lf6 x) else count lf6 x)).
Lemma candidate_281: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count (insort lf6 (Succ x)) x)).
Lemma candidate_282: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count (sort (sort lf6)) x)).
Lemma candidate_283: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count (sort lf6) x)).
Lemma candidate_284: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count lf6 x)).
Lemma candidate_285: forall (x : natural) (lf6 : lst), @eq lst (Cons x lf6) (Cons x lf6).
Lemma candidate_286: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (count (insort (sort lf6) x) x).
Lemma candidate_287: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count (sort lf6) x)).
Lemma candidate_288: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x)   (if lfeqb x x then Succ (count (sort lf6) x) else count (sort lf6) x).
Lemma candidate_289: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x)   (if lfeqb x x then Succ (count lf6 x) else count lf6 x).
Lemma candidate_290: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (count (insort lf6 x) x).
Lemma candidate_291: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count lf6 x)).
Lemma candidate_292: forall (lf5 : natural), @eq natural (Succ (Succ lf5)) (Succ (Succ lf5)).
Lemma candidate_293: forall (lf5 : natural), @eq natural (Succ lf5)   (Succ (if match lf5 with | Succ Zero => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_294: forall (lf5 : natural), @eq natural (Succ lf5)   (Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ Zero => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ Zero => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_295: forall (lf5 : natural), @eq natural (Succ lf5)   (Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ Zero => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_296: forall (lf5 : natural), @eq natural (Succ lf5)   (if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 (Succ Zero) then Succ (if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ (if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 (Succ Zero) then Succ (if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ (if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ Zero else Zero).
Lemma candidate_297: forall (lf5 : natural), @eq natural (Succ lf5)   (if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 lf5 then Succ (if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ (if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 lf5 then Succ (if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ (if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_298: forall (lf5 : natural), @eq natural (Succ lf5) (Succ lf5).
Lemma candidate_299: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x x) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_300: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less lf5 lf5) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_301: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less n Zero) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_302: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x Zero) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_303: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less lf5 Zero) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_304: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (false) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_305: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y n) x) else count (insort y n) x).
Lemma candidate_306: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x n then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_307: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_308: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y n))).
Lemma candidate_309: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x))).
Lemma candidate_310: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_311: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons n (Cons x (sort y))) x) (Succ (Succ lf5)).
Lemma candidate_312: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons x (sort y))) x) (Succ (Succ lf5)).
Lemma candidate_313: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons n (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_314: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_315: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons n (Cons x y)) x) (Succ (Succ lf5)).
Lemma candidate_316: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons x y)) x) (Succ (Succ lf5)).
Lemma candidate_317: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n (sort (sort y)))) x) (Succ (Succ lf5)).
Lemma candidate_318: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons x (sort (sort y)))) x) (Succ (Succ lf5)).
Lemma candidate_319: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n (sort y))) x) (Succ (Succ lf5)).
Lemma candidate_320: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons x (sort y))) x) (Succ (Succ lf5)).
Lemma candidate_321: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_322: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons x y)) x) (Succ (Succ lf5)).
Lemma candidate_323: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (sort (insort y n)) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_324: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (sort (insort y x)) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_325: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort (sort y) n) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_326: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort (sort y) x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_327: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y n) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_328: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_329: forall (n : natural) (y : lst) (x : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall          _ : @eq natural (count (insort y x) x)                (if lfeqb x n then Succ (count y x) else count y x),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x)   (Succ (if lfeqb x n then Succ (count y x) else count y x)).
Lemma candidate_330: forall (n : natural) (y : lst) (x : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall          _ : @eq natural (count (insort y x) x)                (if lfeqb x x then Succ (count y x) else count y x),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x)   (Succ (if lfeqb x x then Succ (count y x) else count y x)).
Lemma candidate_331: forall (n : natural) (y : lst) (x : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (count (insort y n) x),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (count (insort y n) x)).
Lemma candidate_332: forall (n : natural) (y : lst) (x : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (count (insort y x) x),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (count (insort y x) x)).
Lemma candidate_333: forall (n : natural) (y : lst) (x : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ (count y n)),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y n))).
Lemma candidate_334: forall (n : natural) (y : lst) (x : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ (count y x)),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x))).
Lemma candidate_335: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall          _ : @eq natural (if lfeqb x x then Succ (count y x) else count y x)                (Succ lf5), @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_336: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y n) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_337: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_338: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (Succ (count y n)) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_339: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (Succ (count y x)) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_340: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (Succ lf5) (Succ lf5), @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_341: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb n n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_342: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_343: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb n x) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_344: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x x) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_345: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb lf5 lf5) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_346: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (true) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_347: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) (lfeqb n n))   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) (lfeqb n n)), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_348: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) (lfeqb x n))   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) (lfeqb x n)), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_349: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) (lfeqb n x))   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) (lfeqb n x)), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_350: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) (lfeqb x x))   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) (lfeqb x x)), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_351: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) (lfeqb lf5 lf5))   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) (lfeqb lf5 lf5)), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_352: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) (true))   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) (true)), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_353: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural   (if lfeqb x x then Succ (count (insort y n) x) else count (insort y n) x)   (Succ (Succ lf5)).
Lemma candidate_354: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural   (if lfeqb x n then Succ (count (insort y x) x) else count (insort y x) x)   (Succ (Succ lf5)).
Lemma candidate_355: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural   (if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x)   (Succ (Succ lf5)).
Lemma candidate_356: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (Succ (Succ (count y n))) (Succ (Succ lf5)).
Lemma candidate_357: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (Succ (Succ (count y x))) (Succ (Succ lf5)).
Lemma candidate_358: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (Succ (Succ lf5)) (Succ (Succ lf5)).
Lemma candidate_359: forall (n : natural) (x : natural), @eq bool (less x n) (less x n).
Lemma candidate_360: forall (n : natural) (x : natural), @eq bool (less x n) (less n x).
Lemma candidate_361: forall (n : natural) (x : natural), @eq bool (less x n) (less x x).
Lemma candidate_362: forall (n : natural) (x : natural), @eq bool (less x n) (less n Zero).
Lemma candidate_363: forall (n : natural) (x : natural), @eq bool (less x n) (less x Zero).
Lemma candidate_364: forall (n : natural) (x : natural), @eq bool (less x n) (false).
Lemma candidate_365: forall (lf5 : natural), @eq natural (Succ (Succ lf5)) (Succ (Succ lf5)).
Lemma candidate_366: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons n (Cons x (sort y))).
Lemma candidate_367: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons x (Cons x (sort y))).
Lemma candidate_368: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons n (Cons n y)).
Lemma candidate_369: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons x (Cons n y)).
Lemma candidate_370: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons n (Cons x y)).
Lemma candidate_371: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons x (Cons x y)).
Lemma candidate_372: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (sort (sort (sort (sort (sort y)))))).
Lemma candidate_373: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (sort (sort (sort (sort y))))).
Lemma candidate_374: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (sort (sort (sort y)))).
Lemma candidate_375: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (sort (sort y))).
Lemma candidate_376: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (sort y)).
Lemma candidate_377: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n y).
Lemma candidate_378: forall (y : lst) (x : natural), @eq lst (insort y x) (sort (sort (insort y x))).
Lemma candidate_379: forall (y : lst) (x : natural), @eq lst (insort y x) (sort (insort (sort y) x)).
Lemma candidate_380: forall (y : lst) (x : natural), @eq lst (insort y x) (insort (sort (sort y)) x).
Lemma candidate_381: forall (y : lst) (x : natural), @eq lst (insort y x) (sort (insort y x)).
Lemma candidate_382: forall (y : lst) (x : natural), @eq lst (insort y x) (insort (sort y) x).
Lemma candidate_383: forall (y : lst) (x : natural), @eq lst (insort y x) (insort y x).
Lemma candidate_384: forall (lf5 : natural), @eq natural (Succ lf5)   (Succ (if match lf5 with | Succ Zero => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_385: forall (lf5 : natural), @eq natural (Succ lf5)   (Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ Zero => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ Zero => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_386: forall (lf5 : natural), @eq natural (Succ lf5)   (Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ Zero => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_387: forall (lf5 : natural), @eq natural (Succ lf5)   (if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 (Succ Zero) then Succ (if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ (if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 (Succ Zero) then Succ (if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ (if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ Zero else Zero).
Lemma candidate_388: forall (lf5 : natural), @eq natural (Succ lf5)   (if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 lf5 then Succ (if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ (if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 lf5 then Succ (if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ (if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_389: forall (lf5 : natural), @eq natural (Succ lf5) (Succ lf5).
Lemma candidate_390: forall (y : lst) (x : natural), @eq natural (count (insort y x) x) (count (insort (sort y) x) x).
Lemma candidate_391: forall (y : lst) (x : natural), @eq natural (count (insort y x) x) (Succ (count (sort y) x)).
Lemma candidate_392: forall (y : lst) (x : natural), @eq natural (count (insort y x) x)   (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x).
Lemma candidate_393: forall (y : lst) (x : natural), @eq natural (count (insort y x) x)   (if lfeqb x x then Succ (count y x) else count y x).
Lemma candidate_394: forall (y : lst) (x : natural), @eq natural (count (insort y x) x) (count (insort y x) x).
Lemma candidate_395: forall (y : lst) (x : natural), @eq natural (count (insort y x) x) (Succ (count y x)).
Lemma candidate_396: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (less x (Succ x)).
Lemma candidate_397: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb n n).
Lemma candidate_398: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb x n).
Lemma candidate_399: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb n x).
Lemma candidate_400: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb x x).
Lemma candidate_401: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (true).
Lemma candidate_402: @eq bool true (true).
Lemma candidate_403: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x n then Succ (count (insort y n) x) else count (insort y n) x).
Lemma candidate_404: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y n) x) else count (insort y n) x).
Lemma candidate_405: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x n then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_406: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_407: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y n))).
Lemma candidate_408: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x))).
Lemma candidate_409: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x n then Succ (count (insort y n) x) else count (insort y n) x).
Lemma candidate_410: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y n) x) else count (insort y n) x).
Lemma candidate_411: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x n then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_412: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_413: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y n))).
Lemma candidate_414: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x))).
Lemma candidate_415: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (Succ (if lfeqb x n then Succ (count y x) else count y x)).
Lemma candidate_416: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (Succ (if lfeqb x x then Succ (count y x) else count y x)).
Lemma candidate_417: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (count (insort y n) x)).
Lemma candidate_418: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (count (insort y x) x)).
Lemma candidate_419: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y n))).
Lemma candidate_420: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x))).
Lemma candidate_421: forall (lf5 : natural), @eq natural (Succ (Succ lf5)) (Succ (Succ lf5)).
Lemma candidate_422: forall (lf5 : natural), @eq natural (Succ (Succ lf5)) (Succ (Succ lf5)).
Lemma candidate_423: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons n (Cons x (sort y))).
Lemma candidate_424: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons x (Cons x (sort y))).
Lemma candidate_425: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons n (Cons n y)).
Lemma candidate_426: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons x (Cons n y)).
Lemma candidate_427: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons n (Cons x y)).
Lemma candidate_428: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons x (Cons x y)).
Lemma candidate_429: forall (lf5 : natural), @eq natural (Succ lf5)   (Succ (if match lf5 with | Succ Zero => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_430: forall (lf5 : natural), @eq natural (Succ lf5)   (Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ Zero => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ Zero => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_431: forall (lf5 : natural), @eq natural (Succ lf5)   (Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf5 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf5 with | Succ Zero => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_432: forall (lf5 : natural), @eq natural (Succ lf5)   (if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 (Succ Zero) then Succ (if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ (if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 (Succ Zero) then Succ (if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ (if lfeqb lf5 lf5 then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ Zero else Zero).
Lemma candidate_433: forall (lf5 : natural), @eq natural (Succ lf5)   (if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 lf5 then Succ (if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ (if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 (Succ (Succ Zero)) then Succ (if lfeqb lf5 lf5 then Succ (if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 lf5 then Succ (if lfeqb lf5 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf5 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_434: forall (lf5 : natural), @eq natural (Succ lf5) (Succ lf5).
Lemma candidate_435: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (sort (sort (sort (sort (sort y)))))).
Lemma candidate_436: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (sort (sort (sort (sort y))))).
Lemma candidate_437: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (sort (sort (sort y)))).
Lemma candidate_438: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (sort (sort y))).
Lemma candidate_439: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (sort y)).
Lemma candidate_440: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n y).
Lemma candidate_441: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x n then Succ (count (insort y n) x) else count (insort y n) x).
Lemma candidate_442: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y n) x) else count (insort y n) x).
Lemma candidate_443: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x n then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_444: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_445: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y n))).
Lemma candidate_446: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x))).
Lemma candidate_447: forall (y : lst) (x : natural), @eq natural (count (Cons x (Cons x (sort (sort (sort (sort y)))))) x)   (Succ (Succ (count y x))).
Lemma candidate_448: forall (y : lst) (x : natural), @eq natural (count (Cons x (Cons x (sort (sort (sort y))))) x)   (Succ (Succ (count y x))).
Lemma candidate_449: forall (y : lst) (x : natural), @eq natural (count (Cons x (Cons x (sort (sort y)))) x)   (Succ (Succ (count y x))).
Lemma candidate_450: forall (y : lst) (x : natural), @eq natural (count (Cons x (Cons x (sort y))) x) (Succ (Succ (count y x))).
Lemma candidate_451: forall (y : lst) (x : natural), @eq natural (count (Cons x (Cons x y)) x) (Succ (Succ (count y x))).
Lemma candidate_452: forall (y : lst) (x : natural), @eq natural (Succ (if lfeqb x x then Succ (count y x) else count y x))   (Succ (Succ (count y x))).
Lemma candidate_453: forall (y : lst) (x : natural), @eq natural (Succ (count (insort y x) x)) (Succ (Succ (count y x))).
Lemma candidate_454: forall (y : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x) else if lfeqb x x then Succ (count (sort y) x) else count (sort y) x)   (Succ (Succ (count y x))).
Lemma candidate_455: forall (y : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (if lfeqb x x then Succ (count y x) else count y x) else if lfeqb x x then Succ (count y x) else count y x)   (Succ (Succ (count y x))).
Lemma candidate_456: forall (y : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x)   (Succ (Succ (count y x))).
Lemma candidate_457: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x))) (Succ (Succ (count y x))).
Lemma candidate_458: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (count (insort (sort lf6) x) x).
Lemma candidate_459: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count (sort lf6) x)).
Lemma candidate_460: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x)   (if lfeqb x x then Succ (count (sort lf6) x) else count (sort lf6) x).
Lemma candidate_461: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x)   (if lfeqb x x then Succ (count lf6 x) else count lf6 x).
Lemma candidate_462: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (count (insort lf6 x) x).
Lemma candidate_463: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count lf6 x)).
Lemma candidate_464: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count (sort (sort (sort lf6))) x)).
Lemma candidate_465: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x)   (Succ (if lfeqb x (Succ x) then Succ (count lf6 x) else count lf6 x)).
Lemma candidate_466: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count (insort lf6 (Succ x)) x)).
Lemma candidate_467: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count (sort (sort lf6)) x)).
Lemma candidate_468: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count (sort lf6) x)).
Lemma candidate_469: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count lf6 x)).
Lemma candidate_470: forall (x : natural) (lf6 : lst), @eq lst (Cons x lf6) (Cons x lf6).
Lemma candidate_471: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (count (insort (sort lf6) x) x).
Lemma candidate_472: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count (sort lf6) x)).
Lemma candidate_473: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x)   (if lfeqb x x then Succ (count (sort lf6) x) else count (sort lf6) x).
Lemma candidate_474: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x)   (if lfeqb x x then Succ (count lf6 x) else count lf6 x).
Lemma candidate_475: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (count (insort lf6 x) x).
Lemma candidate_476: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count lf6 x)).
Lemma candidate_477: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort (sort (sort y))) x).
Lemma candidate_478: forall (y : lst) (x : natural), @eq natural (count y x)   (if lfeqb x (Succ x) then Succ (count y x) else count y x).
Lemma candidate_479: forall (y : lst) (x : natural), @eq natural (count y x) (count (insort y (Succ x)) x).
Lemma candidate_480: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort (sort y)) x).
Lemma candidate_481: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort y) x).
Lemma candidate_482: forall (y : lst) (x : natural), @eq natural (count y x) (count y x).
Lemma candidate_483: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x)))   (Succ (if lfeqb x x then Succ (count y x) else count y x)).
Lemma candidate_484: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x))) (Succ (count (insort y x) x)).
Lemma candidate_485: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x)))   (if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x) else if lfeqb x x then Succ (count (sort y) x) else count (sort y) x).
Lemma candidate_486: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x)))   (if lfeqb x x then Succ (if lfeqb x x then Succ (count y x) else count y x) else if lfeqb x x then Succ (count y x) else count y x).
Lemma candidate_487: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x)))   (if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_488: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x))) (Succ (Succ (count y x))).
Lemma candidate_489: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (count (insort (sort y) x) x).
Lemma candidate_490: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count (sort y) x)).
Lemma candidate_491: forall (y : lst) (x : natural), @eq natural (Succ (count y x))   (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x).
Lemma candidate_492: forall (y : lst) (x : natural), @eq natural (Succ (count y x))   (if lfeqb x x then Succ (count y x) else count y x).
Lemma candidate_493: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (count (insort y x) x).
Lemma candidate_494: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count y x)).
Lemma candidate_495: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (Succ (Succ (count (insort y (Succ x)) x))).
Lemma candidate_496: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (Succ (Succ (count (sort (sort y)) x))).
Lemma candidate_497: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count (sort y) n))).
Lemma candidate_498: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count (sort y) x))).
Lemma candidate_499: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y n))).
Lemma candidate_500: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x))).
Lemma candidate_501: forall (y : lst) (x : natural), @eq natural (count (Cons x (Cons x (sort (sort (sort (sort y)))))) x)   (Succ (Succ (count y x))).
Lemma candidate_502: forall (y : lst) (x : natural), @eq natural (count (Cons x (Cons x (sort (sort (sort y))))) x)   (Succ (Succ (count y x))).
Lemma candidate_503: forall (y : lst) (x : natural), @eq natural (count (Cons x (Cons x (sort (sort y)))) x)   (Succ (Succ (count y x))).
Lemma candidate_504: forall (y : lst) (x : natural), @eq natural (count (Cons x (Cons x (sort y))) x) (Succ (Succ (count y x))).
Lemma candidate_505: forall (y : lst) (x : natural), @eq natural (count (Cons x (Cons x y)) x) (Succ (Succ (count y x))).
Lemma candidate_506: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x n then Succ (count (insort y n) x) else count (insort y n) x).
Lemma candidate_507: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y n) x) else count (insort y n) x).
Lemma candidate_508: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x n then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_509: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_510: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y n))).
Lemma candidate_511: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x))).
Lemma candidate_512: forall (y : lst) (x : natural), @eq natural (count (Cons x (Cons x (sort (sort (sort (sort (sort y))))))) x)   (Succ (Succ (count y x))).
Lemma candidate_513: forall (y : lst) (x : natural), @eq natural (count (Cons x (Cons x (sort (sort (sort (sort y)))))) x)   (Succ (Succ (count y x))).
Lemma candidate_514: forall (y : lst) (x : natural), @eq natural (count (Cons x (Cons x (sort (sort (sort y))))) x)   (Succ (Succ (count y x))).
Lemma candidate_515: forall (y : lst) (x : natural), @eq natural (count (Cons x (Cons x (sort (sort y)))) x)   (Succ (Succ (count y x))).
Lemma candidate_516: forall (y : lst) (x : natural), @eq natural (count (Cons x (Cons x (sort y))) x) (Succ (Succ (count y x))).
Lemma candidate_517: forall (y : lst) (x : natural), @eq natural (count (Cons x (Cons x y)) x) (Succ (Succ (count y x))).
Lemma candidate_518: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (Succ (if lfeqb x n then Succ (count y x) else count y x)).
Lemma candidate_519: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (Succ (if lfeqb x x then Succ (count y x) else count y x)).
Lemma candidate_520: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (count (insort y n) x)).
Lemma candidate_521: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (count (insort y x) x)).
Lemma candidate_522: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y n))).
Lemma candidate_523: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x))).
Lemma candidate_524: forall (y : lst) (x : natural), @eq natural (Succ (if lfeqb x x then Succ (count y x) else count y x))   (Succ (Succ (count y x))).
Lemma candidate_525: forall (y : lst) (x : natural), @eq natural (Succ (count (insort y x) x)) (Succ (Succ (count y x))).
Lemma candidate_526: forall (y : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x) else if lfeqb x x then Succ (count (sort y) x) else count (sort y) x)   (Succ (Succ (count y x))).
Lemma candidate_527: forall (y : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (if lfeqb x x then Succ (count y x) else count y x) else if lfeqb x x then Succ (count y x) else count y x)   (Succ (Succ (count y x))).
Lemma candidate_528: forall (y : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x)   (Succ (Succ (count y x))).
Lemma candidate_529: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x))) (Succ (Succ (count y x))).
Lemma candidate_530: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort (sort (sort y))) x).
Lemma candidate_531: forall (y : lst) (x : natural), @eq natural (count y x)   (if lfeqb x (Succ x) then Succ (count y x) else count y x).
Lemma candidate_532: forall (y : lst) (x : natural), @eq natural (count y x) (count (insort y (Succ x)) x).
Lemma candidate_533: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort (sort y)) x).
Lemma candidate_534: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort y) x).
Lemma candidate_535: forall (y : lst) (x : natural), @eq natural (count y x) (count y x).
Lemma candidate_536: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons n (Cons x (sort y))).
Lemma candidate_537: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons x (Cons x (sort y))).
Lemma candidate_538: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons n (Cons n y)).
Lemma candidate_539: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons x (Cons n y)).
Lemma candidate_540: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons n (Cons x y)).
Lemma candidate_541: forall (n : natural) (y : lst) (x : natural), @eq lst (Cons x (Cons n y)) (Cons x (Cons x y)).
Lemma candidate_542: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x)))   (Succ (if lfeqb x x then Succ (count y x) else count y x)).
Lemma candidate_543: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x))) (Succ (count (insort y x) x)).
Lemma candidate_544: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x)))   (if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x) else if lfeqb x x then Succ (count (sort y) x) else count (sort y) x).
Lemma candidate_545: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x)))   (if lfeqb x x then Succ (if lfeqb x x then Succ (count y x) else count y x) else if lfeqb x x then Succ (count y x) else count y x).
Lemma candidate_546: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x)))   (if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_547: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x))) (Succ (Succ (count y x))).
Lemma candidate_548: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (sort (sort (sort (sort (sort y)))))).
Lemma candidate_549: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (sort (sort (sort (sort y))))).
Lemma candidate_550: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (sort (sort (sort y)))).
Lemma candidate_551: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (sort (sort y))).
Lemma candidate_552: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (sort y)).
Lemma candidate_553: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n y).
Lemma candidate_554: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (count (insort (sort y) x) x).
Lemma candidate_555: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count (sort y) x)).
Lemma candidate_556: forall (y : lst) (x : natural), @eq natural (Succ (count y x))   (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x).
Lemma candidate_557: forall (y : lst) (x : natural), @eq natural (Succ (count y x))   (if lfeqb x x then Succ (count y x) else count y x).
Lemma candidate_558: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (count (insort y x) x).
Lemma candidate_559: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count y x)).
Lemma candidate_560: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x n then Succ (count (insort y n) x) else count (insort y n) x).
Lemma candidate_561: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y n) x) else count (insort y n) x).
Lemma candidate_562: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x n then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_563: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_564: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y n))).
Lemma candidate_565: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x))).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 1111 seconds
Duplicates removed: 358
Filtered by Quickchick: 121
Filtered by script: 24
Remaining: 62

Lemmas: 
Lemma candidate_399: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb n x).
Lemma candidate_27: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort y) x).
Lemma candidate_46: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort lf3) x).
Lemma candidate_26: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort (sort y)) x).
Lemma candidate_45: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort lf3)) x).
Lemma candidate_25: forall (y : lst) (x : natural), @eq natural (count y x) (count (insort y (Succ x)) x).
Lemma candidate_125: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count lf6 x)).
Lemma candidate_36: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count (sort y) x)).
Lemma candidate_23: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort (sort (sort y))) x).
Lemma candidate_44: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (insort lf3 (Succ x)) x).
Lemma candidate_124: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (count (insort lf6 x) x).
Lemma candidate_234: forall (y : lst) (x : natural), @eq natural (count (insort y x) x) (Succ (count (sort y) x)).
Lemma candidate_42: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort (sort lf3))) x).
Lemma candidate_35: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (count (insort (sort y) x) x).
Lemma candidate_121: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count (sort lf6) x)).
Lemma candidate_233: forall (y : lst) (x : natural), @eq natural (count (insort y x) x) (count (insort (sort y) x) x).
Lemma candidate_120: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (count (insort (sort lf6) x) x).
Lemma candidate_451: forall (y : lst) (x : natural), @eq natural (count (Cons x (Cons x y)) x) (Succ (Succ (count y x))).
Lemma candidate_282: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count (sort (sort lf6)) x)).
Lemma candidate_417: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (count (insort y n) x)).
Lemma candidate_281: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count (insort lf6 (Succ x)) x)).
Lemma candidate_450: forall (y : lst) (x : natural), @eq natural (count (Cons x (Cons x (sort y))) x) (Succ (Succ (count y x))).
Lemma candidate_279: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count (sort (sort (sort lf6))) x)).
Lemma candidate_449: forall (y : lst) (x : natural), @eq natural (count (Cons x (Cons x (sort (sort y)))) x)   (Succ (Succ (count y x))).
Lemma candidate_38: forall (y : lst) (x : natural), @eq natural (Succ (count y x))   (if lfeqb x x then Succ (count y x) else count y x).
Lemma candidate_24: forall (y : lst) (x : natural), @eq natural (count y x)   (if lfeqb x (Succ x) then Succ (count y x) else count y x).
Lemma candidate_236: forall (y : lst) (x : natural), @eq natural (count (insort y x) x)   (if lfeqb x x then Succ (count y x) else count y x).
Lemma candidate_448: forall (y : lst) (x : natural), @eq natural (count (Cons x (Cons x (sort (sort (sort y))))) x)   (Succ (Succ (count y x))).
Lemma candidate_43: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb x (Succ x) then Succ (count lf3 x) else count lf3 x).
Lemma candidate_447: forall (y : lst) (x : natural), @eq natural (count (Cons x (Cons x (sort (sort (sort (sort y)))))) x)   (Succ (Succ (count y x))).
Lemma candidate_82: forall (y : lst) (x : natural), @eq natural (Succ (if lfeqb x x then Succ (count y x) else count y x))   (Succ (Succ (count y x))).
Lemma candidate_37: forall (y : lst) (x : natural), @eq natural (Succ (count y x))   (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x).
Lemma candidate_29: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x)))   (Succ (if lfeqb x x then Succ (count y x) else count y x)).
Lemma candidate_415: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (Succ (if lfeqb x n then Succ (count y x) else count y x)).
Lemma candidate_235: forall (y : lst) (x : natural), @eq natural (count (insort y x) x)   (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x).
Lemma candidate_512: forall (y : lst) (x : natural), @eq natural (count (Cons x (Cons x (sort (sort (sort (sort (sort y))))))) x)   (Succ (Succ (count y x))).
Lemma candidate_2: forall (n : natural) (y : lst) (x : natural), forall _ : @eq bool (lfeqb x n) true, @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x))).
Lemma candidate_280: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x)   (Succ (if lfeqb x (Succ x) then Succ (count lf6 x) else count lf6 x)).
Lemma candidate_122: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x)   (if lfeqb x x then Succ (count (sort lf6) x) else count (sort lf6) x).
Lemma candidate_33: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x)))   (if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_86: forall (y : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x)   (Succ (Succ (count y x))).
Lemma candidate_1: forall (n : natural) (y : lst) (x : natural) (lf2 : natural), forall (_ : @eq bool (lfeqb x n) true) (_ : @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) lf2.
Lemma candidate_141: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x n then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_140: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y n) x) else count (insort y n) x).
Lemma candidate_32: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x)))   (if lfeqb x x then Succ (if lfeqb x x then Succ (count y x) else count y x) else if lfeqb x x then Succ (count y x) else count y x).
Lemma candidate_85: forall (y : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (if lfeqb x x then Succ (count y x) else count y x) else if lfeqb x x then Succ (count y x) else count y x)   (Succ (Succ (count y x))).
Lemma candidate_340: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (Succ lf5) (Succ lf5), @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_31: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x)))   (if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x) else if lfeqb x x then Succ (count (sort y) x) else count (sort y) x).
Lemma candidate_84: forall (y : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x) else if lfeqb x x then Succ (count (sort y) x) else count (sort y) x)   (Succ (Succ (count y x))).
Lemma candidate_309: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x))).
Lemma candidate_308: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y n))).
Lemma candidate_334: forall (n : natural) (y : lst) (x : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ (count y x)),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x))).
Lemma candidate_333: forall (n : natural) (y : lst) (x : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ (count y n)),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y n))).
Lemma candidate_185: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) true, @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x n then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_184: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) true, @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y n) x) else count (insort y n) x).
Lemma candidate_332: forall (n : natural) (y : lst) (x : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (count (insort y x) x),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (count (insort y x) x)).
Lemma candidate_331: forall (n : natural) (y : lst) (x : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (count (insort y n) x),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (count (insort y n) x)).
Lemma candidate_307: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_306: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x n then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_305: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y n) x) else count (insort y n) x).
Lemma candidate_330: forall (n : natural) (y : lst) (x : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall          _ : @eq natural (count (insort y x) x)                (if lfeqb x x then Succ (count y x) else count y x),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x)   (Succ (if lfeqb x x then Succ (count y x) else count y x)).
Lemma candidate_329: forall (n : natural) (y : lst) (x : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall          _ : @eq natural (count (insort y x) x)                (if lfeqb x n then Succ (count y x) else count y x),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x)   (Succ (if lfeqb x n then Succ (count y x) else count y x)).