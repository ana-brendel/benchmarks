LFind Results
LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal70_theorem0_79_Nat_beq_eq

Number of Lemmas: 565
Number of Lemmas (after duplicates removed): 207
Number of Lemmas (after QuickChick used to filter): 86
* Number of Candidate Lemmas: 62

Time until ranking: 1113
Time to complete: 4784

Stuck state true independent of hypotheses: false

Category 1:
Count = 0


Category 2:
Count = 12

Lemma candidate_125: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count lf6 x)).
Lemma candidate_124: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (count (insort lf6 x) x).
Lemma candidate_38: forall (y : lst) (x : natural), @eq natural (Succ (count y x))   (if lfeqb x x then Succ (count y x) else count y x).
Lemma candidate_29: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x)))   (Succ (if lfeqb x x then Succ (count y x) else count y x)).
Lemma candidate_415: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (Succ (if lfeqb x n then Succ (count y x) else count y x)).
Lemma candidate_2: forall (n : natural) (y : lst) (x : natural), forall _ : @eq bool (lfeqb x n) true, @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x))).
Lemma candidate_33: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x)))   (if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_86: forall (y : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x)   (Succ (Succ (count y x))).
Lemma candidate_1: forall (n : natural) (y : lst) (x : natural) (lf2 : natural), forall (_ : @eq bool (lfeqb x n) true) (_ : @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) lf2.
Lemma candidate_141: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x n then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_334: forall (n : natural) (y : lst) (x : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ (count y x)),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x))).
Lemma candidate_332: forall (n : natural) (y : lst) (x : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (count (insort y x) x),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (count (insort y x) x)).

Category 3 (provable):
Count = 2

Lemma candidate_399: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb n x).
Lemma candidate_330: forall (n : natural) (y : lst) (x : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall          _ : @eq natural (count (insort y x) x)                (if lfeqb x x then Succ (count y x) else count y x),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x)   (Succ (if lfeqb x x then Succ (count y x) else count y x)).

Category 3 (not provable):
Count = 48

Lemma candidate_27: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort y) x).
Lemma candidate_46: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort lf3) x).
Lemma candidate_26: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort (sort y)) x).
Lemma candidate_45: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort lf3)) x).
Lemma candidate_25: forall (y : lst) (x : natural), @eq natural (count y x) (count (insort y (Succ x)) x).
Lemma candidate_36: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count (sort y) x)).
Lemma candidate_23: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort (sort (sort y))) x).
Lemma candidate_44: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (insort lf3 (Succ x)) x).
Lemma candidate_234: forall (y : lst) (x : natural), @eq natural (count (insort y x) x) (Succ (count (sort y) x)).
Lemma candidate_42: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort (sort lf3))) x).
Lemma candidate_35: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (count (insort (sort y) x) x).
Lemma candidate_121: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count (sort lf6) x)).
Lemma candidate_233: forall (y : lst) (x : natural), @eq natural (count (insort y x) x) (count (insort (sort y) x) x).
Lemma candidate_120: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (count (insort (sort lf6) x) x).
Lemma candidate_451: forall (y : lst) (x : natural), @eq natural (count (Cons x (Cons x y)) x) (Succ (Succ (count y x))).
Lemma candidate_282: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count (sort (sort lf6)) x)).
Lemma candidate_417: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (count (insort y n) x)).
Lemma candidate_281: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count (insort lf6 (Succ x)) x)).
Lemma candidate_450: forall (y : lst) (x : natural), @eq natural (count (Cons x (Cons x (sort y))) x) (Succ (Succ (count y x))).
Lemma candidate_279: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count (sort (sort (sort lf6))) x)).
Lemma candidate_449: forall (y : lst) (x : natural), @eq natural (count (Cons x (Cons x (sort (sort y)))) x)   (Succ (Succ (count y x))).
Lemma candidate_24: forall (y : lst) (x : natural), @eq natural (count y x)   (if lfeqb x (Succ x) then Succ (count y x) else count y x).
Lemma candidate_236: forall (y : lst) (x : natural), @eq natural (count (insort y x) x)   (if lfeqb x x then Succ (count y x) else count y x).
Lemma candidate_448: forall (y : lst) (x : natural), @eq natural (count (Cons x (Cons x (sort (sort (sort y))))) x)   (Succ (Succ (count y x))).
Lemma candidate_43: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb x (Succ x) then Succ (count lf3 x) else count lf3 x).
Lemma candidate_447: forall (y : lst) (x : natural), @eq natural (count (Cons x (Cons x (sort (sort (sort (sort y)))))) x)   (Succ (Succ (count y x))).
Lemma candidate_82: forall (y : lst) (x : natural), @eq natural (Succ (if lfeqb x x then Succ (count y x) else count y x))   (Succ (Succ (count y x))).
Lemma candidate_37: forall (y : lst) (x : natural), @eq natural (Succ (count y x))   (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x).
Lemma candidate_235: forall (y : lst) (x : natural), @eq natural (count (insort y x) x)   (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x).
Lemma candidate_512: forall (y : lst) (x : natural), @eq natural (count (Cons x (Cons x (sort (sort (sort (sort (sort y))))))) x)   (Succ (Succ (count y x))).
Lemma candidate_280: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x)   (Succ (if lfeqb x (Succ x) then Succ (count lf6 x) else count lf6 x)).
Lemma candidate_122: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x)   (if lfeqb x x then Succ (count (sort lf6) x) else count (sort lf6) x).
Lemma candidate_140: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y n) x) else count (insort y n) x).
Lemma candidate_32: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x)))   (if lfeqb x x then Succ (if lfeqb x x then Succ (count y x) else count y x) else if lfeqb x x then Succ (count y x) else count y x).
Lemma candidate_85: forall (y : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (if lfeqb x x then Succ (count y x) else count y x) else if lfeqb x x then Succ (count y x) else count y x)   (Succ (Succ (count y x))).
Lemma candidate_340: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (Succ lf5) (Succ lf5), @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_31: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x)))   (if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x) else if lfeqb x x then Succ (count (sort y) x) else count (sort y) x).
Lemma candidate_84: forall (y : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x) else if lfeqb x x then Succ (count (sort y) x) else count (sort y) x)   (Succ (Succ (count y x))).
Lemma candidate_309: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x))).
Lemma candidate_308: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y n))).
Lemma candidate_333: forall (n : natural) (y : lst) (x : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ (count y n)),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y n))).
Lemma candidate_185: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) true, @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x n then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_184: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less x n) true, @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y n) x) else count (insort y n) x).
Lemma candidate_331: forall (n : natural) (y : lst) (x : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (count (insort y n) x),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x) (Succ (count (insort y n) x)).
Lemma candidate_307: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_306: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x n then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_305: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y n) x) else count (insort y n) x).
Lemma candidate_329: forall (n : natural) (y : lst) (x : natural), forall (_ : @eq bool (lfeqb x n) true)   (_ : forall          _ : @eq natural (count (insort y x) x)                (if lfeqb x n then Succ (count y x) else count y x),        @eq bool (less x n) true), @eq natural (count (Cons x (Cons n y)) x)   (Succ (if lfeqb x n then Succ (count y x) else count y x)).