File Information
- File name: goal69
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal69_theorem0_63_Nat_beq_eq
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal69_theorem0_63_Nat_beq_eq
- Namespace: adtind
- Proof name: theorem0
- Theorem: Theorem theorem0: forall (x0 y0 : natural) (z0 : lst) (_ : not (@eq natural x0 y0))
  (_ : @eq bool (mem x0 (insort y0 z0)) true), @eq bool (mem x0 z0) true.
- Declarations: 
From lfind Require Import LFind.
Require Import Arith.

Proof Context
* Goal State: @eq bool (orb (lfeqb x n) (mem x z)) true

* Hypothesis:
IHz : forall _ : @eq bool (mem x (insort y z)) true, @eq bool (mem x z) true
H0 : @eq bool (lfeqb x y) true
Heqb : @eq bool (less y n) true
x : natural
H : not (@eq natural x y)
y : natural
z : lst
n : natural

* Types:
Set
natural
Prop
lst
bool

* Polymorphic Types:


* Variables:
x : natural
y : natural
z : lst
n : natural

* Terms:
lfeqb x y : bool
@eq natural x y : Prop
not (@eq natural x y) : Prop
x : natural
@eq bool (lfeqb x y) true : Prop
insort y z : lst
mem x z : bool
forall _ : @eq bool (mem x (insort y z)) true, @eq bool (mem x z) true : Prop
y : natural
true : bool
@eq bool (mem x z) true : Prop
bool : Set
less y n : bool
@eq bool (orb (lfeqb x n) (mem x z)) true : Prop
lst : Set
@eq bool (less y n) true : Prop
@eq bool (mem x (insort y z)) true : Prop
lfeqb x n : bool
z : lst
mem x (insort y z) : bool
natural : Set
n : natural
orb (lfeqb x n) (mem x z) : bool

* Functions:
mem  : forall (_ : natural) (_ : lst), bool
lfeqb  : forall (_ : natural) (_ : natural), bool
orb  : forall (_ : bool) (_ : bool), bool
less  : forall (_ : natural) (_ : natural), bool
not  : forall _ : Prop, Prop
@eq  : forall (A : Type) (_ : A) (_ : A), Prop
insort  : forall (_ : natural) (_ : lst), lst

<---GENERALIZATION--->
Time elapsed: 133 seconds
Generalized Variables:
lf3 : bool = mem x z
lf1 : bool = orb (lfeqb x n) (mem x z)
lf4 : bool = true
lf2 : bool = lfeqb x n

Generalizations:
Lemma conj1: forall (lf4 : bool) (lf1 : bool), @eq bool lf1 lf4.
Lemma conj3: forall (lf1 : bool), @eq bool lf1 true.
Lemma conj5: forall (lf2 : bool) (lf4 : bool) (lf3 : bool), @eq bool (orb lf2 lf3) lf4.
Lemma conj6: forall (x : natural) (lf4 : bool) (n : natural) (lf3 : bool), @eq bool (orb (lfeqb x n) lf3) lf4.
Lemma conj7: forall (lf2 : bool) (lf3 : bool), @eq bool (orb lf2 lf3) true.
Lemma conj8: forall (x : natural) (n : natural) (lf3 : bool), @eq bool (orb (lfeqb x n) lf3) true.
Lemma conj13: forall (lf2 : bool) (x : natural) (lf4 : bool) (z : lst), @eq bool (orb lf2 (mem x z)) lf4.
Lemma conj14: forall (x : natural) (lf4 : bool) (z : lst) (n : natural), @eq bool (orb (lfeqb x n) (mem x z)) lf4.
Lemma conj15: forall (lf2 : bool) (x : natural) (z : lst), @eq bool (orb lf2 (mem x z)) true.
Lemma conj16: forall (x : natural) (z : lst) (n : natural), @eq bool (orb (lfeqb x n) (mem x z)) true.


<---VALIDITY CHECKS--->
Time elapsed: 179 seconds
Valid:

Invalid:
Lemma conj16: forall (x : natural) (z : lst) (n : natural), @eq bool (orb (lfeqb x n) (mem x z)) true.
Lemma conj15: forall (lf2 : bool) (x : natural) (z : lst), @eq bool (orb lf2 (mem x z)) true.
Lemma conj14: forall (x : natural) (lf4 : bool) (z : lst) (n : natural), @eq bool (orb (lfeqb x n) (mem x z)) lf4.
Lemma conj13: forall (lf2 : bool) (x : natural) (lf4 : bool) (z : lst), @eq bool (orb lf2 (mem x z)) lf4.
Lemma conj8: forall (x : natural) (n : natural) (lf3 : bool), @eq bool (orb (lfeqb x n) lf3) true.
Lemma conj7: forall (lf2 : bool) (lf3 : bool), @eq bool (orb lf2 lf3) true.
Lemma conj6: forall (x : natural) (lf4 : bool) (n : natural) (lf3 : bool), @eq bool (orb (lfeqb x n) lf3) lf4.
Lemma conj5: forall (lf2 : bool) (lf4 : bool) (lf3 : bool), @eq bool (orb lf2 lf3) lf4.
Lemma conj3: forall (lf1 : bool), @eq bool lf1 true.
Lemma conj1: forall (lf4 : bool) (lf1 : bool), @eq bool lf1 lf4.

<---ADD IMPLICATIONS--->
Time elapsed: 202 seconds
Generalizations:
Lemma conj16: forall (x : natural) (z : lst) (n : natural), @eq bool (orb (lfeqb x n) (mem x z)) true.
Lemma conj15: forall (lf2 : bool) (x : natural) (z : lst), @eq bool (orb lf2 (mem x z)) true.
Lemma conj14: forall (x : natural) (lf4 : bool) (z : lst) (n : natural), @eq bool (orb (lfeqb x n) (mem x z)) lf4.
Lemma conj13: forall (lf2 : bool) (x : natural) (lf4 : bool) (z : lst), @eq bool (orb lf2 (mem x z)) lf4.
Lemma conj8: forall (x : natural) (n : natural) (lf3 : bool), @eq bool (orb (lfeqb x n) lf3) true.
Lemma conj7: forall (lf2 : bool) (lf3 : bool), @eq bool (orb lf2 lf3) true.
Lemma conj6: forall (x : natural) (lf4 : bool) (n : natural) (lf3 : bool), @eq bool (orb (lfeqb x n) lf3) lf4.
Lemma conj5: forall (lf2 : bool) (lf4 : bool) (lf3 : bool), @eq bool (orb lf2 lf3) lf4.
Lemma conj3: forall (lf1 : bool), @eq bool lf1 true.
Lemma conj1: forall (lf4 : bool) (lf1 : bool), @eq bool lf1 lf4.


<---VALIDITY CHECKS--->
Time elapsed: 218 seconds
Valid:

Invalid:
Lemma conj1: forall (lf4 : bool) (lf1 : bool), @eq bool lf1 lf4.
Lemma conj3: forall (lf1 : bool), @eq bool lf1 true.
Lemma conj5: forall (lf2 : bool) (lf4 : bool) (lf3 : bool), @eq bool (orb lf2 lf3) lf4.
Lemma conj6: forall (x : natural) (lf4 : bool) (n : natural) (lf3 : bool), @eq bool (orb (lfeqb x n) lf3) lf4.
Lemma conj7: forall (lf2 : bool) (lf3 : bool), @eq bool (orb lf2 lf3) true.
Lemma conj8: forall (x : natural) (n : natural) (lf3 : bool), @eq bool (orb (lfeqb x n) lf3) true.
Lemma conj13: forall (lf2 : bool) (x : natural) (lf4 : bool) (z : lst), @eq bool (orb lf2 (mem x z)) lf4.
Lemma conj14: forall (x : natural) (lf4 : bool) (z : lst) (n : natural), @eq bool (orb (lfeqb x n) (mem x z)) lf4.
Lemma conj15: forall (lf2 : bool) (x : natural) (z : lst), @eq bool (orb lf2 (mem x z)) true.
Lemma conj16: forall (x : natural) (z : lst) (n : natural), @eq bool (orb (lfeqb x n) (mem x z)) true.


<---CREATE SKETCHES--->
Time elapsed: 218 seconds
Sketches:
Sketch conj3_sketch0 : @eq bool lf1 (##hole##)
Sketch conj3_term_sketch0 : @eq bool true (##hole##)
Sketch conj5_sketch0 : @eq bool (##hole##) lf4
Sketch conj5_term_sketch0 : @eq bool (orb lf2 lf3) (##hole##)
Sketch conj6_sketch0 : @eq bool (##hole##) lf4
Sketch conj6_sketch1 : @eq bool (orb (##hole##) lf3) lf4
Sketch conj6_term_sketch0 : @eq bool (orb (lfeqb x n) lf3) (##hole##)
Sketch conj6_term_sketch1 : @eq bool (lfeqb x n) (##hole##)
Sketch conj7_sketch0 : @eq bool (##hole##) true
Sketch conj7_sketch1 : @eq bool (orb lf2 lf3) (##hole##)
Sketch conj7_term_sketch0 : @eq bool (orb lf2 lf3) (##hole##)
Sketch conj7_term_sketch1 : @eq bool true (##hole##)
Sketch conj8_sketch0 : @eq bool (##hole##) true
Sketch conj8_sketch1 : @eq bool (orb (##hole##) lf3) true
Sketch conj8_sketch2 : @eq bool (orb (lfeqb x n) lf3) (##hole##)
Sketch conj8_term_sketch0 : @eq bool (orb (lfeqb x n) lf3) (##hole##)
Sketch conj8_term_sketch1 : @eq bool (lfeqb x n) (##hole##)
Sketch conj8_term_sketch2 : @eq bool true (##hole##)
Sketch conj13_sketch0 : @eq bool (##hole##) lf4
Sketch conj13_sketch1 : @eq bool (orb lf2 (##hole##)) lf4
Sketch conj13_term_sketch0 : @eq bool (orb lf2 (mem x z)) (##hole##)
Sketch conj13_term_sketch1 : @eq bool (mem x z) (##hole##)
Sketch conj14_sketch0 : @eq bool (orb (lfeqb x n) (##hole##)) lf4
Sketch conj14_sketch1 : @eq bool (orb (##hole##) (mem x z)) lf4
Sketch conj14_sketch2 : @eq bool (##hole##) lf4
Sketch conj14_term_sketch0 : @eq bool (mem x z) (##hole##)
Sketch conj14_term_sketch1 : @eq bool (lfeqb x n) (##hole##)
Sketch conj14_term_sketch2 : @eq bool (orb (lfeqb x n) (mem x z)) (##hole##)
Sketch conj15_sketch0 : @eq bool (##hole##) true
Sketch conj15_sketch1 : @eq bool (orb lf2 (##hole##)) true
Sketch conj15_sketch2 : @eq bool (orb lf2 (mem x z)) (##hole##)
Sketch conj15_term_sketch0 : @eq bool (orb lf2 (mem x z)) (##hole##)
Sketch conj15_term_sketch1 : @eq bool (mem x z) (##hole##)
Sketch conj15_term_sketch2 : @eq bool true (##hole##)
Sketch conj16_sketch0 : @eq bool (orb (lfeqb x n) (##hole##)) true
Sketch conj16_sketch1 : @eq bool (orb (##hole##) (mem x z)) true
Sketch conj16_sketch2 : @eq bool (orb (lfeqb x n) (mem x z)) (##hole##)
Sketch conj16_sketch3 : @eq bool (##hole##) true
Sketch conj16_term_sketch0 : @eq bool (mem x z) (##hole##)
Sketch conj16_term_sketch1 : @eq bool (lfeqb x n) (##hole##)
Sketch conj16_term_sketch2 : @eq bool true (##hole##)
Sketch conj16_term_sketch3 : @eq bool (orb (lfeqb x n) (mem x z)) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 557 seconds
Problems per Sketch:
Sketch conj15_sketch1 --> Problem  synth_15
Sketch conj7_sketch1 --> Problem  synth_4
Sketch conj5_sketch0 --> Problem  synth_3
Sketch conj16_sketch3 --> Problem  synth_2
Sketch conj14_sketch2 --> Problem  synth_3
Sketch conj15_term_sketch1 --> Problem  synth_11
Sketch conj16_sketch2 --> Problem  synth_14
Sketch conj15_term_sketch2 --> Problem  synth_2
Sketch conj16_term_sketch1 --> Problem  synth_7
Sketch conj14_term_sketch2 --> Problem  synth_14
Sketch conj8_sketch1 --> Problem  synth_8
Sketch conj7_sketch0 --> Problem  synth_2
Sketch conj6_term_sketch0 --> Problem  synth_6
Sketch conj13_term_sketch1 --> Problem  synth_11
Sketch conj8_term_sketch0 --> Problem  synth_6
Sketch conj3_sketch0 --> Problem  synth_1
Sketch conj8_sketch2 --> Problem  synth_6
Sketch conj14_term_sketch1 --> Problem  synth_7
Sketch conj7_term_sketch1 --> Problem  synth_2
Sketch conj8_term_sketch1 --> Problem  synth_7
Sketch conj5_term_sketch0 --> Problem  synth_4
Sketch conj6_sketch0 --> Problem  synth_3
Sketch conj16_sketch1 --> Problem  synth_17
Sketch conj6_sketch1 --> Problem  synth_5
Sketch conj15_sketch2 --> Problem  synth_10
Sketch conj3_term_sketch0 --> Problem  synth_2
Sketch conj16_term_sketch2 --> Problem  synth_2
Sketch conj7_term_sketch0 --> Problem  synth_4
Sketch conj13_term_sketch0 --> Problem  synth_10
Sketch conj15_sketch0 --> Problem  synth_2
Sketch conj6_term_sketch1 --> Problem  synth_7
Sketch conj16_sketch0 --> Problem  synth_16
Sketch conj13_sketch1 --> Problem  synth_9
Sketch conj14_sketch0 --> Problem  synth_12
Sketch conj14_term_sketch0 --> Problem  synth_11
Sketch conj16_term_sketch0 --> Problem  synth_11
Sketch conj13_sketch0 --> Problem  synth_3
Sketch conj8_sketch0 --> Problem  synth_2
Sketch conj16_term_sketch3 --> Problem  synth_14
Sketch conj8_term_sketch2 --> Problem  synth_2
Sketch conj15_term_sketch0 --> Problem  synth_10
Sketch conj14_sketch1 --> Problem  synth_13


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 697 seconds

Problem: synth_17

Problem: synth_9

Problem: synth_13

Problem: synth_6
 less n (Succ n)
 less x (Succ x)
 orb lf3 true
 lfeqb n n
 lfeqb x x
 true

Problem: synth_11
 orb (lfeqb x (Succ x)) (mem x z)
 orb (mem x (sort z)) false
 orb (mem x z) false
 mem x (sort (sort z))
 mem x (sort z)
 mem x z

Problem: synth_7
 mem n (if less x x then Cons x (Cons x Nil) else Cons x (Cons x Nil))
 orb (lfeqb n x) (orb (lfeqb n x) false)
 orb (lfeqb x n) false
 orb (lfeqb n x) false
 lfeqb x n
 lfeqb n x

Problem: synth_4
 orb lf3 (orb lf2 false)
 orb lf2 lf3
 orb lf3 lf2
 orb lf3 true
 orb lf2 true
 true

Problem: synth_1
 orb lf1 (orb lf1 false)
 orb lf1 lf1
 orb lf1 true
 orb lf1 false
 lf1
 true

Problem: synth_16

Problem: synth_15

Problem: synth_14
 less x (Succ (Succ x))
 less n (Succ n)
 less x (Succ x)
 lfeqb n n
 lfeqb x x
 true

Problem: synth_10
 orb lf2 (lfeqb x x)
 less x (Succ (Succ x))
 less x (Succ x)
 orb lf2 true
 lfeqb x x
 true

Problem: synth_8

Problem: synth_3
 orb lf4 (orb lf4 false)
 orb lf4 lf4
 orb lf4 true
 orb lf4 false
 lf4
 true

Problem: synth_12

Problem: synth_5

Problem: synth_2
 true

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 697 seconds
Lemmas:
Lemma candidate_1: forall (lf1 : bool), @eq bool lf1 (orb lf1 (orb lf1 false)).
Lemma candidate_2: forall (lf1 : bool), @eq bool lf1 (orb lf1 lf1).
Lemma candidate_3: forall (lf1 : bool), @eq bool lf1 (orb lf1 true).
Lemma candidate_4: forall (lf1 : bool), @eq bool lf1 (orb lf1 false).
Lemma candidate_5: forall (lf1 : bool), @eq bool lf1 (lf1).
Lemma candidate_6: forall (lf1 : bool), @eq bool lf1 (true).
Lemma candidate_7: @eq bool true (true).
Lemma candidate_8: forall (lf4 : bool), @eq bool (orb lf4 (orb lf4 false)) lf4.
Lemma candidate_9: forall (lf4 : bool), @eq bool (orb lf4 lf4) lf4.
Lemma candidate_10: forall (lf4 : bool), @eq bool (orb lf4 true) lf4.
Lemma candidate_11: forall (lf4 : bool), @eq bool (orb lf4 false) lf4.
Lemma candidate_12: forall (lf4 : bool), @eq bool (lf4) lf4.
Lemma candidate_13: forall (lf4 : bool), @eq bool (true) lf4.
Lemma candidate_14: forall (lf3 : bool) (lf2 : bool), @eq bool (orb lf2 lf3) (orb lf3 (orb lf2 false)).
Lemma candidate_15: forall (lf3 : bool) (lf2 : bool), @eq bool (orb lf2 lf3) (orb lf2 lf3).
Lemma candidate_16: forall (lf3 : bool) (lf2 : bool), @eq bool (orb lf2 lf3) (orb lf3 lf2).
Lemma candidate_17: forall (lf3 : bool) (lf2 : bool), @eq bool (orb lf2 lf3) (orb lf3 true).
Lemma candidate_18: forall (lf3 : bool) (lf2 : bool), @eq bool (orb lf2 lf3) (orb lf2 true).
Lemma candidate_19: forall (lf3 : bool) (lf2 : bool), @eq bool (orb lf2 lf3) (true).
Lemma candidate_20: forall (lf4 : bool), @eq bool (orb lf4 (orb lf4 false)) lf4.
Lemma candidate_21: forall (lf4 : bool), @eq bool (orb lf4 lf4) lf4.
Lemma candidate_22: forall (lf4 : bool), @eq bool (orb lf4 true) lf4.
Lemma candidate_23: forall (lf4 : bool), @eq bool (orb lf4 false) lf4.
Lemma candidate_24: forall (lf4 : bool), @eq bool (lf4) lf4.
Lemma candidate_25: forall (lf4 : bool), @eq bool (true) lf4.
Lemma candidate_26: forall (lf3 : bool) (n : natural) (x : natural), @eq bool (orb (lfeqb x n) lf3) (less n (Succ n)).
Lemma candidate_27: forall (lf3 : bool) (n : natural) (x : natural), @eq bool (orb (lfeqb x n) lf3) (less x (Succ x)).
Lemma candidate_28: forall (lf3 : bool) (n : natural) (x : natural), @eq bool (orb (lfeqb x n) lf3) (orb lf3 true).
Lemma candidate_29: forall (lf3 : bool) (n : natural) (x : natural), @eq bool (orb (lfeqb x n) lf3) (lfeqb n n).
Lemma candidate_30: forall (lf3 : bool) (n : natural) (x : natural), @eq bool (orb (lfeqb x n) lf3) (lfeqb x x).
Lemma candidate_31: forall (lf3 : bool) (n : natural) (x : natural), @eq bool (orb (lfeqb x n) lf3) (true).
Lemma candidate_32: forall (n : natural) (x : natural), @eq bool (lfeqb x n)   (mem n (if less x x then Cons x (Cons x Nil) else Cons x (Cons x Nil))).
Lemma candidate_33: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (orb (lfeqb n x) (orb (lfeqb n x) false)).
Lemma candidate_34: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (orb (lfeqb x n) false).
Lemma candidate_35: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (orb (lfeqb n x) false).
Lemma candidate_36: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb x n).
Lemma candidate_37: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb n x).
Lemma candidate_38: @eq bool (true) true.
Lemma candidate_39: forall (lf3 : bool) (lf2 : bool), @eq bool (orb lf2 lf3) (orb lf3 (orb lf2 false)).
Lemma candidate_40: forall (lf3 : bool) (lf2 : bool), @eq bool (orb lf2 lf3) (orb lf2 lf3).
Lemma candidate_41: forall (lf3 : bool) (lf2 : bool), @eq bool (orb lf2 lf3) (orb lf3 lf2).
Lemma candidate_42: forall (lf3 : bool) (lf2 : bool), @eq bool (orb lf2 lf3) (orb lf3 true).
Lemma candidate_43: forall (lf3 : bool) (lf2 : bool), @eq bool (orb lf2 lf3) (orb lf2 true).
Lemma candidate_44: forall (lf3 : bool) (lf2 : bool), @eq bool (orb lf2 lf3) (true).
Lemma candidate_45: forall (lf3 : bool) (lf2 : bool), @eq bool (orb lf2 lf3) (orb lf3 (orb lf2 false)).
Lemma candidate_46: forall (lf3 : bool) (lf2 : bool), @eq bool (orb lf2 lf3) (orb lf2 lf3).
Lemma candidate_47: forall (lf3 : bool) (lf2 : bool), @eq bool (orb lf2 lf3) (orb lf3 lf2).
Lemma candidate_48: forall (lf3 : bool) (lf2 : bool), @eq bool (orb lf2 lf3) (orb lf3 true).
Lemma candidate_49: forall (lf3 : bool) (lf2 : bool), @eq bool (orb lf2 lf3) (orb lf2 true).
Lemma candidate_50: forall (lf3 : bool) (lf2 : bool), @eq bool (orb lf2 lf3) (true).
Lemma candidate_51: @eq bool true (true).
Lemma candidate_52: @eq bool (true) true.
Lemma candidate_53: forall (lf3 : bool) (n : natural) (x : natural), @eq bool (orb (lfeqb x n) lf3) (less n (Succ n)).
Lemma candidate_54: forall (lf3 : bool) (n : natural) (x : natural), @eq bool (orb (lfeqb x n) lf3) (less x (Succ x)).
Lemma candidate_55: forall (lf3 : bool) (n : natural) (x : natural), @eq bool (orb (lfeqb x n) lf3) (orb lf3 true).
Lemma candidate_56: forall (lf3 : bool) (n : natural) (x : natural), @eq bool (orb (lfeqb x n) lf3) (lfeqb n n).
Lemma candidate_57: forall (lf3 : bool) (n : natural) (x : natural), @eq bool (orb (lfeqb x n) lf3) (lfeqb x x).
Lemma candidate_58: forall (lf3 : bool) (n : natural) (x : natural), @eq bool (orb (lfeqb x n) lf3) (true).
Lemma candidate_59: forall (lf3 : bool) (n : natural) (x : natural), @eq bool (orb (lfeqb x n) lf3) (less n (Succ n)).
Lemma candidate_60: forall (lf3 : bool) (n : natural) (x : natural), @eq bool (orb (lfeqb x n) lf3) (less x (Succ x)).
Lemma candidate_61: forall (lf3 : bool) (n : natural) (x : natural), @eq bool (orb (lfeqb x n) lf3) (orb lf3 true).
Lemma candidate_62: forall (lf3 : bool) (n : natural) (x : natural), @eq bool (orb (lfeqb x n) lf3) (lfeqb n n).
Lemma candidate_63: forall (lf3 : bool) (n : natural) (x : natural), @eq bool (orb (lfeqb x n) lf3) (lfeqb x x).
Lemma candidate_64: forall (lf3 : bool) (n : natural) (x : natural), @eq bool (orb (lfeqb x n) lf3) (true).
Lemma candidate_65: forall (n : natural) (x : natural), @eq bool (lfeqb x n)   (mem n (if less x x then Cons x (Cons x Nil) else Cons x (Cons x Nil))).
Lemma candidate_66: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (orb (lfeqb n x) (orb (lfeqb n x) false)).
Lemma candidate_67: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (orb (lfeqb x n) false).
Lemma candidate_68: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (orb (lfeqb n x) false).
Lemma candidate_69: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb x n).
Lemma candidate_70: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb n x).
Lemma candidate_71: @eq bool true (true).
Lemma candidate_72: forall (lf4 : bool), @eq bool (orb lf4 (orb lf4 false)) lf4.
Lemma candidate_73: forall (lf4 : bool), @eq bool (orb lf4 lf4) lf4.
Lemma candidate_74: forall (lf4 : bool), @eq bool (orb lf4 true) lf4.
Lemma candidate_75: forall (lf4 : bool), @eq bool (orb lf4 false) lf4.
Lemma candidate_76: forall (lf4 : bool), @eq bool (lf4) lf4.
Lemma candidate_77: forall (lf4 : bool), @eq bool (true) lf4.
Lemma candidate_78: forall (z : lst) (x : natural) (lf2 : bool), @eq bool (orb lf2 (mem x z)) (orb lf2 (lfeqb x x)).
Lemma candidate_79: forall (z : lst) (x : natural) (lf2 : bool), @eq bool (orb lf2 (mem x z)) (less x (Succ (Succ x))).
Lemma candidate_80: forall (z : lst) (x : natural) (lf2 : bool), @eq bool (orb lf2 (mem x z)) (less x (Succ x)).
Lemma candidate_81: forall (z : lst) (x : natural) (lf2 : bool), @eq bool (orb lf2 (mem x z)) (orb lf2 true).
Lemma candidate_82: forall (z : lst) (x : natural) (lf2 : bool), @eq bool (orb lf2 (mem x z)) (lfeqb x x).
Lemma candidate_83: forall (z : lst) (x : natural) (lf2 : bool), @eq bool (orb lf2 (mem x z)) (true).
Lemma candidate_84: forall (z : lst) (x : natural), @eq bool (mem x z) (orb (lfeqb x (Succ x)) (mem x z)).
Lemma candidate_85: forall (z : lst) (x : natural), @eq bool (mem x z) (orb (mem x (sort z)) false).
Lemma candidate_86: forall (z : lst) (x : natural), @eq bool (mem x z) (orb (mem x z) false).
Lemma candidate_87: forall (z : lst) (x : natural), @eq bool (mem x z) (mem x (sort (sort z))).
Lemma candidate_88: forall (z : lst) (x : natural), @eq bool (mem x z) (mem x (sort z)).
Lemma candidate_89: forall (z : lst) (x : natural), @eq bool (mem x z) (mem x z).
Lemma candidate_90: forall (lf4 : bool), @eq bool (orb lf4 (orb lf4 false)) lf4.
Lemma candidate_91: forall (lf4 : bool), @eq bool (orb lf4 lf4) lf4.
Lemma candidate_92: forall (lf4 : bool), @eq bool (orb lf4 true) lf4.
Lemma candidate_93: forall (lf4 : bool), @eq bool (orb lf4 false) lf4.
Lemma candidate_94: forall (lf4 : bool), @eq bool (lf4) lf4.
Lemma candidate_95: forall (lf4 : bool), @eq bool (true) lf4.
Lemma candidate_96: forall (z : lst) (x : natural), @eq bool (mem x z) (orb (lfeqb x (Succ x)) (mem x z)).
Lemma candidate_97: forall (z : lst) (x : natural), @eq bool (mem x z) (orb (mem x (sort z)) false).
Lemma candidate_98: forall (z : lst) (x : natural), @eq bool (mem x z) (orb (mem x z) false).
Lemma candidate_99: forall (z : lst) (x : natural), @eq bool (mem x z) (mem x (sort (sort z))).
Lemma candidate_100: forall (z : lst) (x : natural), @eq bool (mem x z) (mem x (sort z)).
Lemma candidate_101: forall (z : lst) (x : natural), @eq bool (mem x z) (mem x z).
Lemma candidate_102: forall (n : natural) (x : natural), @eq bool (lfeqb x n)   (mem n (if less x x then Cons x (Cons x Nil) else Cons x (Cons x Nil))).
Lemma candidate_103: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (orb (lfeqb n x) (orb (lfeqb n x) false)).
Lemma candidate_104: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (orb (lfeqb x n) false).
Lemma candidate_105: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (orb (lfeqb n x) false).
Lemma candidate_106: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb x n).
Lemma candidate_107: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb n x).
Lemma candidate_108: forall (n : natural) (z : lst) (x : natural), @eq bool (orb (lfeqb x n) (mem x z)) (less x (Succ (Succ x))).
Lemma candidate_109: forall (n : natural) (z : lst) (x : natural), @eq bool (orb (lfeqb x n) (mem x z)) (less n (Succ n)).
Lemma candidate_110: forall (n : natural) (z : lst) (x : natural), @eq bool (orb (lfeqb x n) (mem x z)) (less x (Succ x)).
Lemma candidate_111: forall (n : natural) (z : lst) (x : natural), @eq bool (orb (lfeqb x n) (mem x z)) (lfeqb n n).
Lemma candidate_112: forall (n : natural) (z : lst) (x : natural), @eq bool (orb (lfeqb x n) (mem x z)) (lfeqb x x).
Lemma candidate_113: forall (n : natural) (z : lst) (x : natural), @eq bool (orb (lfeqb x n) (mem x z)) (true).
Lemma candidate_114: @eq bool (true) true.
Lemma candidate_115: forall (z : lst) (x : natural) (lf2 : bool), @eq bool (orb lf2 (mem x z)) (orb lf2 (lfeqb x x)).
Lemma candidate_116: forall (z : lst) (x : natural) (lf2 : bool), @eq bool (orb lf2 (mem x z)) (less x (Succ (Succ x))).
Lemma candidate_117: forall (z : lst) (x : natural) (lf2 : bool), @eq bool (orb lf2 (mem x z)) (less x (Succ x)).
Lemma candidate_118: forall (z : lst) (x : natural) (lf2 : bool), @eq bool (orb lf2 (mem x z)) (orb lf2 true).
Lemma candidate_119: forall (z : lst) (x : natural) (lf2 : bool), @eq bool (orb lf2 (mem x z)) (lfeqb x x).
Lemma candidate_120: forall (z : lst) (x : natural) (lf2 : bool), @eq bool (orb lf2 (mem x z)) (true).
Lemma candidate_121: forall (z : lst) (x : natural) (lf2 : bool), @eq bool (orb lf2 (mem x z)) (orb lf2 (lfeqb x x)).
Lemma candidate_122: forall (z : lst) (x : natural) (lf2 : bool), @eq bool (orb lf2 (mem x z)) (less x (Succ (Succ x))).
Lemma candidate_123: forall (z : lst) (x : natural) (lf2 : bool), @eq bool (orb lf2 (mem x z)) (less x (Succ x)).
Lemma candidate_124: forall (z : lst) (x : natural) (lf2 : bool), @eq bool (orb lf2 (mem x z)) (orb lf2 true).
Lemma candidate_125: forall (z : lst) (x : natural) (lf2 : bool), @eq bool (orb lf2 (mem x z)) (lfeqb x x).
Lemma candidate_126: forall (z : lst) (x : natural) (lf2 : bool), @eq bool (orb lf2 (mem x z)) (true).
Lemma candidate_127: forall (z : lst) (x : natural), @eq bool (mem x z) (orb (lfeqb x (Succ x)) (mem x z)).
Lemma candidate_128: forall (z : lst) (x : natural), @eq bool (mem x z) (orb (mem x (sort z)) false).
Lemma candidate_129: forall (z : lst) (x : natural), @eq bool (mem x z) (orb (mem x z) false).
Lemma candidate_130: forall (z : lst) (x : natural), @eq bool (mem x z) (mem x (sort (sort z))).
Lemma candidate_131: forall (z : lst) (x : natural), @eq bool (mem x z) (mem x (sort z)).
Lemma candidate_132: forall (z : lst) (x : natural), @eq bool (mem x z) (mem x z).
Lemma candidate_133: @eq bool true (true).
Lemma candidate_134: forall (n : natural) (z : lst) (x : natural), @eq bool (orb (lfeqb x n) (mem x z)) (less x (Succ (Succ x))).
Lemma candidate_135: forall (n : natural) (z : lst) (x : natural), @eq bool (orb (lfeqb x n) (mem x z)) (less n (Succ n)).
Lemma candidate_136: forall (n : natural) (z : lst) (x : natural), @eq bool (orb (lfeqb x n) (mem x z)) (less x (Succ x)).
Lemma candidate_137: forall (n : natural) (z : lst) (x : natural), @eq bool (orb (lfeqb x n) (mem x z)) (lfeqb n n).
Lemma candidate_138: forall (n : natural) (z : lst) (x : natural), @eq bool (orb (lfeqb x n) (mem x z)) (lfeqb x x).
Lemma candidate_139: forall (n : natural) (z : lst) (x : natural), @eq bool (orb (lfeqb x n) (mem x z)) (true).
Lemma candidate_140: @eq bool (true) true.
Lemma candidate_141: forall (z : lst) (x : natural), @eq bool (mem x z) (orb (lfeqb x (Succ x)) (mem x z)).
Lemma candidate_142: forall (z : lst) (x : natural), @eq bool (mem x z) (orb (mem x (sort z)) false).
Lemma candidate_143: forall (z : lst) (x : natural), @eq bool (mem x z) (orb (mem x z) false).
Lemma candidate_144: forall (z : lst) (x : natural), @eq bool (mem x z) (mem x (sort (sort z))).
Lemma candidate_145: forall (z : lst) (x : natural), @eq bool (mem x z) (mem x (sort z)).
Lemma candidate_146: forall (z : lst) (x : natural), @eq bool (mem x z) (mem x z).
Lemma candidate_147: forall (n : natural) (x : natural), @eq bool (lfeqb x n)   (mem n (if less x x then Cons x (Cons x Nil) else Cons x (Cons x Nil))).
Lemma candidate_148: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (orb (lfeqb n x) (orb (lfeqb n x) false)).
Lemma candidate_149: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (orb (lfeqb x n) false).
Lemma candidate_150: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (orb (lfeqb n x) false).
Lemma candidate_151: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb x n).
Lemma candidate_152: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb n x).
Lemma candidate_153: @eq bool true (true).
Lemma candidate_154: forall (n : natural) (z : lst) (x : natural), @eq bool (orb (lfeqb x n) (mem x z)) (less x (Succ (Succ x))).
Lemma candidate_155: forall (n : natural) (z : lst) (x : natural), @eq bool (orb (lfeqb x n) (mem x z)) (less n (Succ n)).
Lemma candidate_156: forall (n : natural) (z : lst) (x : natural), @eq bool (orb (lfeqb x n) (mem x z)) (less x (Succ x)).
Lemma candidate_157: forall (n : natural) (z : lst) (x : natural), @eq bool (orb (lfeqb x n) (mem x z)) (lfeqb n n).
Lemma candidate_158: forall (n : natural) (z : lst) (x : natural), @eq bool (orb (lfeqb x n) (mem x z)) (lfeqb x x).
Lemma candidate_159: forall (n : natural) (z : lst) (x : natural), @eq bool (orb (lfeqb x n) (mem x z)) (true).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 810 seconds
Duplicates removed: 109
Filtered by Quickchick: 25
Filtered by script: 7
Remaining: 18

Lemmas: 
Lemma candidate_9: forall (lf4 : bool), @eq bool (orb lf4 lf4) lf4.
Lemma candidate_2: forall (lf1 : bool), @eq bool lf1 (orb lf1 lf1).
Lemma candidate_11: forall (lf4 : bool), @eq bool (orb lf4 false) lf4.
Lemma candidate_4: forall (lf1 : bool), @eq bool lf1 (orb lf1 false).
Lemma candidate_37: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb n x).
Lemma candidate_88: forall (z : lst) (x : natural), @eq bool (mem x z) (mem x (sort z)).
Lemma candidate_16: forall (lf3 : bool) (lf2 : bool), @eq bool (orb lf2 lf3) (orb lf3 lf2).
Lemma candidate_8: forall (lf4 : bool), @eq bool (orb lf4 (orb lf4 false)) lf4.
Lemma candidate_1: forall (lf1 : bool), @eq bool lf1 (orb lf1 (orb lf1 false)).
Lemma candidate_86: forall (z : lst) (x : natural), @eq bool (mem x z) (orb (mem x z) false).
Lemma candidate_87: forall (z : lst) (x : natural), @eq bool (mem x z) (mem x (sort (sort z))).
Lemma candidate_35: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (orb (lfeqb n x) false).
Lemma candidate_34: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (orb (lfeqb x n) false).
Lemma candidate_85: forall (z : lst) (x : natural), @eq bool (mem x z) (orb (mem x (sort z)) false).
Lemma candidate_14: forall (lf3 : bool) (lf2 : bool), @eq bool (orb lf2 lf3) (orb lf3 (orb lf2 false)).
Lemma candidate_84: forall (z : lst) (x : natural), @eq bool (mem x z) (orb (lfeqb x (Succ x)) (mem x z)).
Lemma candidate_33: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (orb (lfeqb n x) (orb (lfeqb n x) false)).
Lemma candidate_32: forall (n : natural) (x : natural), @eq bool (lfeqb x n)   (mem n (if less x x then Cons x (Cons x Nil) else Cons x (Cons x Nil))).