File Information
- File name: goal40
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal40_subset_refl_97_subset_append
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal40_subset_refl_97_subset_append
- Namespace: adtind
- Proof name: subset_refl
- Theorem: Theorem subset_refl: forall x0 : lst, @eq bool (lst_subset x0 x0) true.
- Declarations: 
From lfind Require Import LFind.
Require Import Arith.

Proof Context
* Goal State: @eq bool (lst_subset x (lfappend (Cons n Nil) x)) true

* Hypothesis:
IHx : @eq bool (lst_subset x x) true
x : lst
n : natural

* Types:
Set
natural
Prop
lst
bool

* Polymorphic Types:


* Variables:
x : lst
n : natural

* Terms:
@eq bool (lst_subset x (lfappend (Cons n Nil) x)) true : Prop
lst_subset x (lfappend (Cons n Nil) x) : bool
lst_subset x x : bool
bool : Set
x : lst
lfappend (Cons n Nil) x : lst
@eq bool (lst_subset x x) true : Prop
lst : Set
Cons n Nil : lst
natural : Set
true : bool
n : natural
Nil : lst

* Functions:
lfappend  : forall (_ : lst) (_ : lst), lst
lst_subset  : forall (_ : lst) (_ : lst), bool
Cons  : forall (_ : natural) (_ : lst), lst
@eq  : forall (A : Type) (_ : A) (_ : A), Prop

<---GENERALIZATION--->
Time elapsed: 2 seconds
Generalized Variables:
lf3 : lst = Cons n Nil
lf1 : bool = lst_subset x (lfappend (Cons n Nil) x)
lf4 : bool = true
lf5 : lst = Nil
lf2 : lst = lfappend (Cons n Nil) x

Generalizations:
Lemma conj1: forall (lf4 : bool) (lf1 : bool), @eq bool lf1 lf4.
Lemma conj5: forall (lf1 : bool), @eq bool lf1 true.
Lemma conj9: forall (lf2 : lst) (x : lst) (lf4 : bool), @eq bool (lst_subset x lf2) lf4.
Lemma conj10: forall (x : lst) (lf4 : bool) (lf3 : lst), @eq bool (lst_subset x (lfappend lf3 x)) lf4.
Lemma conj13: forall (lf2 : lst) (x : lst), @eq bool (lst_subset x lf2) true.
Lemma conj14: forall (x : lst) (lf3 : lst), @eq bool (lst_subset x (lfappend lf3 x)) true.
Lemma conj26: forall (lf5 : lst) (x : lst) (lf4 : bool) (n : natural), @eq bool (lst_subset x (lfappend (Cons n lf5) x)) lf4.
Lemma conj28: forall (x : lst) (lf4 : bool) (n : natural), @eq bool (lst_subset x (lfappend (Cons n Nil) x)) lf4.
Lemma conj30: forall (lf5 : lst) (x : lst) (n : natural), @eq bool (lst_subset x (lfappend (Cons n lf5) x)) true.
Lemma conj32: forall (x : lst) (n : natural), @eq bool (lst_subset x (lfappend (Cons n Nil) x)) true.


<---VALIDITY CHECKS--->
Time elapsed: 61 seconds
Valid:
Lemma conj32: forall (x : lst) (n : natural), @eq bool (lst_subset x (lfappend (Cons n Nil) x)) true.
Lemma conj30: forall (lf5 : lst) (x : lst) (n : natural), @eq bool (lst_subset x (lfappend (Cons n lf5) x)) true.
Lemma conj14: forall (x : lst) (lf3 : lst), @eq bool (lst_subset x (lfappend lf3 x)) true.

Invalid:
Lemma conj28: forall (x : lst) (lf4 : bool) (n : natural), @eq bool (lst_subset x (lfappend (Cons n Nil) x)) lf4.
Lemma conj26: forall (lf5 : lst) (x : lst) (lf4 : bool) (n : natural), @eq bool (lst_subset x (lfappend (Cons n lf5) x)) lf4.
Lemma conj13: forall (lf2 : lst) (x : lst), @eq bool (lst_subset x lf2) true.
Lemma conj10: forall (x : lst) (lf4 : bool) (lf3 : lst), @eq bool (lst_subset x (lfappend lf3 x)) lf4.
Lemma conj9: forall (lf2 : lst) (x : lst) (lf4 : bool), @eq bool (lst_subset x lf2) lf4.
Lemma conj5: forall (lf1 : bool), @eq bool lf1 true.
Lemma conj1: forall (lf4 : bool) (lf1 : bool), @eq bool lf1 lf4.

<---ADD IMPLICATIONS--->
Time elapsed: 75 seconds
Generalizations:
Lemma conj28: forall (x : lst) (lf4 : bool) (n : natural), @eq bool (lst_subset x (lfappend (Cons n Nil) x)) lf4.
Lemma conj28_imp: forall (x : lst) (lf4 : bool) (n : natural), forall _ : @eq bool (lst_subset x x) lf4,
@eq bool (lst_subset x (lfappend (Cons n Nil) x)) lf4.
Lemma conj26: forall (lf5 : lst) (x : lst) (lf4 : bool) (n : natural), @eq bool (lst_subset x (lfappend (Cons n lf5) x)) lf4.
Lemma conj26_imp: forall (lf5 : lst) (x : lst) (lf4 : bool) (n : natural), forall _ : @eq bool (lst_subset x x) lf4,
@eq bool (lst_subset x (lfappend (Cons n lf5) x)) lf4.
Lemma conj13: forall (lf2 : lst) (x : lst), @eq bool (lst_subset x lf2) true.
Lemma conj10: forall (x : lst) (lf4 : bool) (lf3 : lst), @eq bool (lst_subset x (lfappend lf3 x)) lf4.
Lemma conj10_imp: forall (x : lst) (lf4 : bool) (lf3 : lst), forall _ : @eq bool (lst_subset x x) lf4,
@eq bool (lst_subset x (lfappend lf3 x)) lf4.
Lemma conj9: forall (lf2 : lst) (x : lst) (lf4 : bool), @eq bool (lst_subset x lf2) lf4.
Lemma conj9_imp: forall (lf2 : lst) (x : lst) (lf4 : bool), forall _ : @eq bool (lst_subset x x) lf4, @eq bool (lst_subset x lf2) lf4.
Lemma conj5: forall (lf1 : bool), @eq bool lf1 true.
Lemma conj1: forall (lf4 : bool) (lf1 : bool), @eq bool lf1 lf4.


<---VALIDITY CHECKS--->
Time elapsed: 91 seconds
Valid:
Lemma conj10_imp: forall (x : lst) (lf4 : bool) (lf3 : lst), forall _ : @eq bool (lst_subset x x) lf4,
@eq bool (lst_subset x (lfappend lf3 x)) lf4.
Lemma conj26_imp: forall (lf5 : lst) (x : lst) (lf4 : bool) (n : natural), forall _ : @eq bool (lst_subset x x) lf4,
@eq bool (lst_subset x (lfappend (Cons n lf5) x)) lf4.
Lemma conj28_imp: forall (x : lst) (lf4 : bool) (n : natural), forall _ : @eq bool (lst_subset x x) lf4,
@eq bool (lst_subset x (lfappend (Cons n Nil) x)) lf4.

Invalid:
Lemma conj1: forall (lf4 : bool) (lf1 : bool), @eq bool lf1 lf4.
Lemma conj5: forall (lf1 : bool), @eq bool lf1 true.
Lemma conj9_imp: forall (lf2 : lst) (x : lst) (lf4 : bool), forall _ : @eq bool (lst_subset x x) lf4, @eq bool (lst_subset x lf2) lf4.
Lemma conj9: forall (lf2 : lst) (x : lst) (lf4 : bool), @eq bool (lst_subset x lf2) lf4.
Lemma conj10: forall (x : lst) (lf4 : bool) (lf3 : lst), @eq bool (lst_subset x (lfappend lf3 x)) lf4.
Lemma conj13: forall (lf2 : lst) (x : lst), @eq bool (lst_subset x lf2) true.
Lemma conj26: forall (lf5 : lst) (x : lst) (lf4 : bool) (n : natural), @eq bool (lst_subset x (lfappend (Cons n lf5) x)) lf4.
Lemma conj28: forall (x : lst) (lf4 : bool) (n : natural), @eq bool (lst_subset x (lfappend (Cons n Nil) x)) lf4.


<---CREATE SKETCHES--->
Time elapsed: 91 seconds
Sketches:
Sketch conj5_sketch0 : @eq bool lf1 (##hole##)
Sketch conj5_term_sketch0 : @eq bool true (##hole##)
Sketch conj9_imp_sketch0 : forall _ : @eq bool (##hole##) lf4, @eq bool (lst_subset x lf2) lf4
Sketch conj9_imp_sketch1 : forall _ : @eq bool (lst_subset x x) lf4, @eq bool (##hole##) lf4
Sketch conj9_imp_term_sketch0 : @eq bool (lst_subset x x) (##hole##)
Sketch conj9_imp_term_sketch1 : @eq bool (lst_subset x lf2) (##hole##)
Sketch conj9_sketch0 : @eq bool (##hole##) lf4
Sketch conj9_term_sketch0 : @eq bool (lst_subset x lf2) (##hole##)
Sketch conj10_sketch0 : @eq bool (lst_subset x (##hole##)) lf4
Sketch conj10_sketch1 : @eq bool (##hole##) lf4
Sketch conj10_term_sketch0 : @eq lst (lfappend lf3 x) (##hole##)
Sketch conj10_term_sketch1 : @eq bool (lst_subset x (lfappend lf3 x)) (##hole##)
Sketch conj13_sketch0 : @eq bool (lst_subset x lf2) (##hole##)
Sketch conj13_sketch1 : @eq bool (##hole##) true
Sketch conj13_term_sketch0 : @eq bool true (##hole##)
Sketch conj13_term_sketch1 : @eq bool (lst_subset x lf2) (##hole##)
Sketch conj26_sketch0 : @eq bool (lst_subset x (lfappend (##hole##) x)) lf4
Sketch conj26_sketch1 : @eq bool (lst_subset x (##hole##)) lf4
Sketch conj26_sketch2 : @eq bool (##hole##) lf4
Sketch conj26_term_sketch0 : @eq lst (Cons n lf5) (##hole##)
Sketch conj26_term_sketch1 : @eq lst (lfappend (Cons n lf5) x) (##hole##)
Sketch conj26_term_sketch2 : @eq bool (lst_subset x (lfappend (Cons n lf5) x)) (##hole##)
Sketch conj28_sketch0 : @eq bool (##hole##) lf4
Sketch conj28_sketch1 : @eq bool (lst_subset x (##hole##)) lf4
Sketch conj28_sketch2 : @eq bool (lst_subset x (lfappend (##hole##) x)) lf4
Sketch conj28_sketch3 : @eq bool (lst_subset x (lfappend (Cons n (##hole##)) x)) lf4
Sketch conj28_term_sketch0 : @eq bool (lst_subset x (lfappend (Cons n Nil) x)) (##hole##)
Sketch conj28_term_sketch1 : @eq lst (lfappend (Cons n Nil) x) (##hole##)
Sketch conj28_term_sketch2 : @eq lst (Cons n Nil) (##hole##)
Sketch conj28_term_sketch3 : @eq lst Nil (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 363 seconds
Problems per Sketch:
Sketch conj5_sketch0 --> Problem  synth_1
Sketch conj10_term_sketch0 --> Problem  synth_9
Sketch conj9_imp_term_sketch1 --> Problem  synth_6
Sketch conj28_sketch0 --> Problem  synth_7
Sketch conj26_term_sketch1 --> Problem  synth_13
Sketch conj28_sketch2 --> Problem  synth_11
Sketch conj28_sketch3 --> Problem  synth_15
Sketch conj26_sketch2 --> Problem  synth_7
Sketch conj10_term_sketch1 --> Problem  synth_10
Sketch conj26_term_sketch0 --> Problem  synth_12
Sketch conj28_sketch1 --> Problem  synth_8
Sketch conj13_term_sketch0 --> Problem  synth_2
Sketch conj9_imp_term_sketch0 --> Problem  synth_5
Sketch conj26_sketch0 --> Problem  synth_11
Sketch conj28_term_sketch2 --> Problem  synth_18
Sketch conj13_sketch1 --> Problem  synth_2
Sketch conj13_term_sketch1 --> Problem  synth_6
Sketch conj28_term_sketch1 --> Problem  synth_17
Sketch conj13_sketch0 --> Problem  synth_6
Sketch conj9_sketch0 --> Problem  synth_7
Sketch conj26_term_sketch2 --> Problem  synth_14
Sketch conj9_imp_sketch1 --> Problem  synth_4
Sketch conj26_sketch1 --> Problem  synth_8
Sketch conj28_term_sketch0 --> Problem  synth_16
Sketch conj10_sketch0 --> Problem  synth_8
Sketch conj5_term_sketch0 --> Problem  synth_2
Sketch conj10_sketch1 --> Problem  synth_7
Sketch conj9_imp_sketch0 --> Problem  synth_3
Sketch conj9_term_sketch0 --> Problem  synth_6
Sketch conj28_term_sketch3 --> Problem  synth_19


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 480 seconds

Problem: synth_18
 lst_union (if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil)) Nil
 if lst_mem n (if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil)) then if lst_mem n (if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil)) then if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil) else Cons n (if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil)) else Cons n (if lst_mem n (if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil)) then if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil) else Cons n (if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil)))
 if lst_mem n (if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil)) then if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil) else Cons n (if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil))
 if orb (Neqb n n) false then if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil) else Cons n (if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil))
 if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil)
 Cons n Nil

Problem: synth_17
 lst_union x (Cons n (lst_union x Nil))
 Cons n (lst_union x x)
 lst_union x (Cons n x)
 Cons n (lfappend x Nil)
 Cons n (lst_union x Nil)
 Cons n x

Problem: synth_9
 lst_union lf3 (lfappend lf3 x)
 lst_union x (lfappend lf3 x)
 lfappend lf3 (lst_union x x)
 lfappend lf3 (lfappend x Nil)
 lfappend lf3 (lst_union x Nil)
 lfappend lf3 x

Problem: synth_13
 lst_union lf5 (Cons n x)
 Cons n (lfappend x lf5)
 Cons n (lst_union x lf5)
 Cons n (lfappend x Nil)
 Cons n (lst_union x Nil)
 Cons n x

Problem: synth_6
 lst_subset x (lst_union lf2 Nil)
 lst_subset lf2 (lst_union lf2 Nil)
 lst_subset x x
 lst_subset x lf2
 lst_subset lf2 lf2
 true

Problem: synth_11

Problem: synth_7
 lf4
 true

Problem: synth_4
 lst_subset x (Cons Zero x)
 lst_subset x (lfappend x Nil)
 lst_subset x (lst_union x Nil)
 lst_subset x x
 lf4
 true

Problem: synth_1
 lf1
 true

Problem: synth_16
 lst_subset x (Cons Zero x)
 lst_subset x (lfappend x Nil)
 lst_subset x (lst_union x Nil)
 lst_subset x x
 Neqb n n
 true

Problem: synth_19
 Nil

Problem: synth_15
 Nil

Problem: synth_14
 lst_subset x x
 lst_subset lf5 x
 lst_subset lf5 lf5
 lst_subset lf5 Nil
 Neqb n n
 true

Problem: synth_10
 lst_subset lf3 (lst_union lf3 Nil)
 lst_subset x (lfappend x Nil)
 lst_subset x (lst_union x Nil)
 lst_subset lf3 lf3
 lst_subset x x
 true

Problem: synth_8

Problem: synth_3
 lst_subset lf2 (lst_union lf2 Nil)
 lst_subset x x
 lst_subset x lf2
 lst_subset lf2 lf2
 lf4
 true

Problem: synth_12
 Cons n (lfappend lf5 Nil)
 Cons n (lst_union lf5 Nil)
 lfappend lf5 (Cons n Nil)
 lst_union lf5 (Cons n Nil)
 Cons n lf5
 Cons n Nil

Problem: synth_5
 lst_subset x (lst_union x x)
 lst_subset x (Cons Zero x)
 lst_subset x (lfappend x Nil)
 lst_subset x (lst_union x Nil)
 lst_subset x x
 true

Problem: synth_2
 true

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 481 seconds
Lemmas:
Lemma candidate_1: forall (n : natural) (x : lst), @eq bool (lst_subset x (lfappend (Cons n Nil) x)) true.
Lemma candidate_2: forall (n : natural) (x : lst) (lf5 : lst), @eq bool (lst_subset x (lfappend (Cons n lf5) x)) true.
Lemma candidate_3: forall (lf3 : lst) (x : lst), @eq bool (lst_subset x (lfappend lf3 x)) true.
Lemma candidate_4: forall (lf3 : lst) (lf4 : bool) (x : lst), forall _ : @eq bool (lst_subset x x) lf4, @eq bool (lst_subset x (lfappend lf3 x)) lf4.
Lemma candidate_5: forall (n : natural) (lf4 : bool) (x : lst) (lf5 : lst), forall _ : @eq bool (lst_subset x x) lf4, @eq bool (lst_subset x (lfappend (Cons n lf5) x)) lf4.
Lemma candidate_6: forall (n : natural) (lf4 : bool) (x : lst), forall _ : @eq bool (lst_subset x x) lf4, @eq bool (lst_subset x (lfappend (Cons n Nil) x)) lf4.
Lemma candidate_7: forall (lf1 : bool), @eq bool lf1 (lf1).
Lemma candidate_8: forall (lf1 : bool), @eq bool lf1 (true).
Lemma candidate_9: @eq bool true (true).
Lemma candidate_10: forall (lf4 : bool) (x : lst) (lf2 : lst), forall _ : @eq bool (lst_subset lf2 (lst_union lf2 Nil)) lf4, @eq bool (lst_subset x lf2) lf4.
Lemma candidate_11: forall (lf4 : bool) (x : lst) (lf2 : lst), forall _ : @eq bool (lst_subset x x) lf4, @eq bool (lst_subset x lf2) lf4.
Lemma candidate_12: forall (lf4 : bool) (x : lst) (lf2 : lst), forall _ : @eq bool (lst_subset x lf2) lf4, @eq bool (lst_subset x lf2) lf4.
Lemma candidate_13: forall (lf4 : bool) (x : lst) (lf2 : lst), forall _ : @eq bool (lst_subset lf2 lf2) lf4, @eq bool (lst_subset x lf2) lf4.
Lemma candidate_14: forall (lf4 : bool) (x : lst) (lf2 : lst), forall _ : @eq bool (lf4) lf4, @eq bool (lst_subset x lf2) lf4.
Lemma candidate_15: forall (lf4 : bool) (x : lst) (lf2 : lst), forall _ : @eq bool (true) lf4, @eq bool (lst_subset x lf2) lf4.
Lemma candidate_16: forall (lf4 : bool) (x : lst), forall _ : @eq bool (lst_subset x x) lf4, @eq bool (lst_subset x (Cons Zero x)) lf4.
Lemma candidate_17: forall (lf4 : bool) (x : lst), forall _ : @eq bool (lst_subset x x) lf4, @eq bool (lst_subset x (lfappend x Nil)) lf4.
Lemma candidate_18: forall (lf4 : bool) (x : lst), forall _ : @eq bool (lst_subset x x) lf4, @eq bool (lst_subset x (lst_union x Nil)) lf4.
Lemma candidate_19: forall (lf4 : bool) (x : lst), forall _ : @eq bool (lst_subset x x) lf4, @eq bool (lst_subset x x) lf4.
Lemma candidate_20: forall (lf4 : bool) (x : lst), forall _ : @eq bool (lst_subset x x) lf4, @eq bool (lf4) lf4.
Lemma candidate_21: forall (lf4 : bool) (x : lst), forall _ : @eq bool (lst_subset x x) lf4, @eq bool (true) lf4.
Lemma candidate_22: forall (x : lst), @eq bool (lst_subset x x) (lst_subset x (lst_union x x)).
Lemma candidate_23: forall (x : lst), @eq bool (lst_subset x x) (lst_subset x (Cons Zero x)).
Lemma candidate_24: forall (x : lst), @eq bool (lst_subset x x) (lst_subset x (lfappend x Nil)).
Lemma candidate_25: forall (x : lst), @eq bool (lst_subset x x) (lst_subset x (lst_union x Nil)).
Lemma candidate_26: forall (x : lst), @eq bool (lst_subset x x) (lst_subset x x).
Lemma candidate_27: forall (x : lst), @eq bool (lst_subset x x) (true).
Lemma candidate_28: forall (x : lst) (lf2 : lst), @eq bool (lst_subset x lf2) (lst_subset x (lst_union lf2 Nil)).
Lemma candidate_29: forall (x : lst) (lf2 : lst), @eq bool (lst_subset x lf2) (lst_subset lf2 (lst_union lf2 Nil)).
Lemma candidate_30: forall (x : lst) (lf2 : lst), @eq bool (lst_subset x lf2) (lst_subset x x).
Lemma candidate_31: forall (x : lst) (lf2 : lst), @eq bool (lst_subset x lf2) (lst_subset x lf2).
Lemma candidate_32: forall (x : lst) (lf2 : lst), @eq bool (lst_subset x lf2) (lst_subset lf2 lf2).
Lemma candidate_33: forall (x : lst) (lf2 : lst), @eq bool (lst_subset x lf2) (true).
Lemma candidate_34: forall (lf4 : bool), @eq bool (lf4) lf4.
Lemma candidate_35: forall (lf4 : bool), @eq bool (true) lf4.
Lemma candidate_36: forall (x : lst) (lf2 : lst), @eq bool (lst_subset x lf2) (lst_subset x (lst_union lf2 Nil)).
Lemma candidate_37: forall (x : lst) (lf2 : lst), @eq bool (lst_subset x lf2) (lst_subset lf2 (lst_union lf2 Nil)).
Lemma candidate_38: forall (x : lst) (lf2 : lst), @eq bool (lst_subset x lf2) (lst_subset x x).
Lemma candidate_39: forall (x : lst) (lf2 : lst), @eq bool (lst_subset x lf2) (lst_subset x lf2).
Lemma candidate_40: forall (x : lst) (lf2 : lst), @eq bool (lst_subset x lf2) (lst_subset lf2 lf2).
Lemma candidate_41: forall (x : lst) (lf2 : lst), @eq bool (lst_subset x lf2) (true).
Lemma candidate_42: forall (lf4 : bool), @eq bool (lf4) lf4.
Lemma candidate_43: forall (lf4 : bool), @eq bool (true) lf4.
Lemma candidate_44: forall (lf3 : lst) (x : lst), @eq lst (lfappend lf3 x) (lst_union lf3 (lfappend lf3 x)).
Lemma candidate_45: forall (lf3 : lst) (x : lst), @eq lst (lfappend lf3 x) (lst_union x (lfappend lf3 x)).
Lemma candidate_46: forall (lf3 : lst) (x : lst), @eq lst (lfappend lf3 x) (lfappend lf3 (lst_union x x)).
Lemma candidate_47: forall (lf3 : lst) (x : lst), @eq lst (lfappend lf3 x) (lfappend lf3 (lfappend x Nil)).
Lemma candidate_48: forall (lf3 : lst) (x : lst), @eq lst (lfappend lf3 x) (lfappend lf3 (lst_union x Nil)).
Lemma candidate_49: forall (lf3 : lst) (x : lst), @eq lst (lfappend lf3 x) (lfappend lf3 x).
Lemma candidate_50: forall (lf3 : lst) (x : lst), @eq bool (lst_subset x (lfappend lf3 x)) (lst_subset lf3 (lst_union lf3 Nil)).
Lemma candidate_51: forall (lf3 : lst) (x : lst), @eq bool (lst_subset x (lfappend lf3 x)) (lst_subset x (lfappend x Nil)).
Lemma candidate_52: forall (lf3 : lst) (x : lst), @eq bool (lst_subset x (lfappend lf3 x)) (lst_subset x (lst_union x Nil)).
Lemma candidate_53: forall (lf3 : lst) (x : lst), @eq bool (lst_subset x (lfappend lf3 x)) (lst_subset lf3 lf3).
Lemma candidate_54: forall (lf3 : lst) (x : lst), @eq bool (lst_subset x (lfappend lf3 x)) (lst_subset x x).
Lemma candidate_55: forall (lf3 : lst) (x : lst), @eq bool (lst_subset x (lfappend lf3 x)) (true).
Lemma candidate_56: forall (x : lst) (lf2 : lst), @eq bool (lst_subset x lf2) (lst_subset x (lst_union lf2 Nil)).
Lemma candidate_57: forall (x : lst) (lf2 : lst), @eq bool (lst_subset x lf2) (lst_subset lf2 (lst_union lf2 Nil)).
Lemma candidate_58: forall (x : lst) (lf2 : lst), @eq bool (lst_subset x lf2) (lst_subset x x).
Lemma candidate_59: forall (x : lst) (lf2 : lst), @eq bool (lst_subset x lf2) (lst_subset x lf2).
Lemma candidate_60: forall (x : lst) (lf2 : lst), @eq bool (lst_subset x lf2) (lst_subset lf2 lf2).
Lemma candidate_61: forall (x : lst) (lf2 : lst), @eq bool (lst_subset x lf2) (true).
Lemma candidate_62: @eq bool (true) true.
Lemma candidate_63: @eq bool true (true).
Lemma candidate_64: forall (x : lst) (lf2 : lst), @eq bool (lst_subset x lf2) (lst_subset x (lst_union lf2 Nil)).
Lemma candidate_65: forall (x : lst) (lf2 : lst), @eq bool (lst_subset x lf2) (lst_subset lf2 (lst_union lf2 Nil)).
Lemma candidate_66: forall (x : lst) (lf2 : lst), @eq bool (lst_subset x lf2) (lst_subset x x).
Lemma candidate_67: forall (x : lst) (lf2 : lst), @eq bool (lst_subset x lf2) (lst_subset x lf2).
Lemma candidate_68: forall (x : lst) (lf2 : lst), @eq bool (lst_subset x lf2) (lst_subset lf2 lf2).
Lemma candidate_69: forall (x : lst) (lf2 : lst), @eq bool (lst_subset x lf2) (true).
Lemma candidate_70: forall (lf4 : bool), @eq bool (lf4) lf4.
Lemma candidate_71: forall (lf4 : bool), @eq bool (true) lf4.
Lemma candidate_72: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (lfappend lf5 Nil)).
Lemma candidate_73: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (lst_union lf5 Nil)).
Lemma candidate_74: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (lfappend lf5 (Cons n Nil)).
Lemma candidate_75: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (lst_union lf5 (Cons n Nil)).
Lemma candidate_76: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n lf5).
Lemma candidate_77: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n Nil).
Lemma candidate_78: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (lfappend (Cons n lf5) x) (lst_union lf5 (Cons n x)).
Lemma candidate_79: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (lfappend (Cons n lf5) x) (Cons n (lfappend x lf5)).
Lemma candidate_80: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (lfappend (Cons n lf5) x) (Cons n (lst_union x lf5)).
Lemma candidate_81: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (lfappend (Cons n lf5) x) (Cons n (lfappend x Nil)).
Lemma candidate_82: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (lfappend (Cons n lf5) x) (Cons n (lst_union x Nil)).
Lemma candidate_83: forall (n : natural) (x : lst) (lf5 : lst), @eq lst (lfappend (Cons n lf5) x) (Cons n x).
Lemma candidate_84: forall (n : natural) (x : lst) (lf5 : lst), @eq bool (lst_subset x (lfappend (Cons n lf5) x)) (lst_subset x x).
Lemma candidate_85: forall (n : natural) (x : lst) (lf5 : lst), @eq bool (lst_subset x (lfappend (Cons n lf5) x)) (lst_subset lf5 x).
Lemma candidate_86: forall (n : natural) (x : lst) (lf5 : lst), @eq bool (lst_subset x (lfappend (Cons n lf5) x)) (lst_subset lf5 lf5).
Lemma candidate_87: forall (n : natural) (x : lst) (lf5 : lst), @eq bool (lst_subset x (lfappend (Cons n lf5) x)) (lst_subset lf5 Nil).
Lemma candidate_88: forall (n : natural) (x : lst) (lf5 : lst), @eq bool (lst_subset x (lfappend (Cons n lf5) x)) (Neqb n n).
Lemma candidate_89: forall (n : natural) (x : lst) (lf5 : lst), @eq bool (lst_subset x (lfappend (Cons n lf5) x)) (true).
Lemma candidate_90: forall (lf4 : bool), @eq bool (lf4) lf4.
Lemma candidate_91: forall (lf4 : bool), @eq bool (true) lf4.
Lemma candidate_92: forall (n : natural) (lf4 : bool) (x : lst), @eq bool (lst_subset x (lfappend (Cons n (Nil)) x)) lf4.
Lemma candidate_93: forall (n : natural) (x : lst), @eq bool (lst_subset x (lfappend (Cons n Nil) x))   (lst_subset x (Cons Zero x)).
Lemma candidate_94: forall (n : natural) (x : lst), @eq bool (lst_subset x (lfappend (Cons n Nil) x))   (lst_subset x (lfappend x Nil)).
Lemma candidate_95: forall (n : natural) (x : lst), @eq bool (lst_subset x (lfappend (Cons n Nil) x))   (lst_subset x (lst_union x Nil)).
Lemma candidate_96: forall (n : natural) (x : lst), @eq bool (lst_subset x (lfappend (Cons n Nil) x)) (lst_subset x x).
Lemma candidate_97: forall (n : natural) (x : lst), @eq bool (lst_subset x (lfappend (Cons n Nil) x)) (Neqb n n).
Lemma candidate_98: forall (n : natural) (x : lst), @eq bool (lst_subset x (lfappend (Cons n Nil) x)) (true).
Lemma candidate_99: forall (n : natural) (x : lst), @eq lst (lfappend (Cons n Nil) x) (lst_union x (Cons n (lst_union x Nil))).
Lemma candidate_100: forall (n : natural) (x : lst), @eq lst (lfappend (Cons n Nil) x) (Cons n (lst_union x x)).
Lemma candidate_101: forall (n : natural) (x : lst), @eq lst (lfappend (Cons n Nil) x) (lst_union x (Cons n x)).
Lemma candidate_102: forall (n : natural) (x : lst), @eq lst (lfappend (Cons n Nil) x) (Cons n (lfappend x Nil)).
Lemma candidate_103: forall (n : natural) (x : lst), @eq lst (lfappend (Cons n Nil) x) (Cons n (lst_union x Nil)).
Lemma candidate_104: forall (n : natural) (x : lst), @eq lst (lfappend (Cons n Nil) x) (Cons n x).
Lemma candidate_105: forall (n : natural), @eq lst (Cons n Nil)   (lst_union (if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil)) Nil).
Lemma candidate_106: forall (n : natural), @eq lst (Cons n Nil)   (if lst_mem n (if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil)) then if lst_mem n (if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil)) then if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil) else Cons n (if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil)) else Cons n (if lst_mem n (if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil)) then if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil) else Cons n (if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil)))).
Lemma candidate_107: forall (n : natural), @eq lst (Cons n Nil)   (if lst_mem n (if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil)) then if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil) else Cons n (if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil))).
Lemma candidate_108: forall (n : natural), @eq lst (Cons n Nil)   (if orb (Neqb n n) false then if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil) else Cons n (if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil))).
Lemma candidate_109: forall (n : natural), @eq lst (Cons n Nil)   (if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil)).
Lemma candidate_110: forall (n : natural), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_111: @eq lst Nil (Nil).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 772 seconds
Duplicates removed: 26
Filtered by Quickchick: 23
Filtered by script: 15
Remaining: 47

Lemmas: 
Lemma candidate_3: forall (lf3 : lst) (x : lst), @eq bool (lst_subset x (lfappend lf3 x)) true.
Lemma candidate_55: forall (lf3 : lst) (x : lst), @eq bool (lst_subset x (lfappend lf3 x)) (true).
Lemma candidate_72: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (lfappend lf5 Nil)).
Lemma candidate_73: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (lst_union lf5 Nil)).
Lemma candidate_23: forall (x : lst), @eq bool (lst_subset x x) (lst_subset x (Cons Zero x)).
Lemma candidate_2: forall (n : natural) (x : lst) (lf5 : lst), @eq bool (lst_subset x (lfappend (Cons n lf5) x)) true.
Lemma candidate_46: forall (lf3 : lst) (x : lst), @eq lst (lfappend lf3 x) (lfappend lf3 (lst_union x x)).
Lemma candidate_45: forall (lf3 : lst) (x : lst), @eq lst (lfappend lf3 x) (lst_union x (lfappend lf3 x)).
Lemma candidate_98: forall (n : natural) (x : lst), @eq bool (lst_subset x (lfappend (Cons n Nil) x)) (true).
Lemma candidate_89: forall (n : natural) (x : lst) (lf5 : lst), @eq bool (lst_subset x (lfappend (Cons n lf5) x)) (true).
Lemma candidate_47: forall (lf3 : lst) (x : lst), @eq lst (lfappend lf3 x) (lfappend lf3 (lfappend x Nil)).
Lemma candidate_22: forall (x : lst), @eq bool (lst_subset x x) (lst_subset x (lst_union x x)).
Lemma candidate_54: forall (lf3 : lst) (x : lst), @eq bool (lst_subset x (lfappend lf3 x)) (lst_subset x x).
Lemma candidate_48: forall (lf3 : lst) (x : lst), @eq lst (lfappend lf3 x) (lfappend lf3 (lst_union x Nil)).
Lemma candidate_44: forall (lf3 : lst) (x : lst), @eq lst (lfappend lf3 x) (lst_union lf3 (lfappend lf3 x)).
Lemma candidate_24: forall (x : lst), @eq bool (lst_subset x x) (lst_subset x (lfappend x Nil)).
Lemma candidate_101: forall (n : natural) (x : lst), @eq lst (lfappend (Cons n Nil) x) (lst_union x (Cons n x)).
Lemma candidate_100: forall (n : natural) (x : lst), @eq lst (lfappend (Cons n Nil) x) (Cons n (lst_union x x)).
Lemma candidate_25: forall (x : lst), @eq bool (lst_subset x x) (lst_subset x (lst_union x Nil)).
Lemma candidate_102: forall (n : natural) (x : lst), @eq lst (lfappend (Cons n Nil) x) (Cons n (lfappend x Nil)).
Lemma candidate_103: forall (n : natural) (x : lst), @eq lst (lfappend (Cons n Nil) x) (Cons n (lst_union x Nil)).
Lemma candidate_97: forall (n : natural) (x : lst), @eq bool (lst_subset x (lfappend (Cons n Nil) x)) (Neqb n n).
Lemma candidate_88: forall (n : natural) (x : lst) (lf5 : lst), @eq bool (lst_subset x (lfappend (Cons n lf5) x)) (Neqb n n).
Lemma candidate_53: forall (lf3 : lst) (x : lst), @eq bool (lst_subset x (lfappend lf3 x)) (lst_subset lf3 lf3).
Lemma candidate_21: forall (lf4 : bool) (x : lst), forall _ : @eq bool (lst_subset x x) lf4, @eq bool (true) lf4.
Lemma candidate_28: forall (x : lst) (lf2 : lst), @eq bool (lst_subset x lf2) (lst_subset x (lst_union lf2 Nil)).
Lemma candidate_96: forall (n : natural) (x : lst), @eq bool (lst_subset x (lfappend (Cons n Nil) x)) (lst_subset x x).
Lemma candidate_84: forall (n : natural) (x : lst) (lf5 : lst), @eq bool (lst_subset x (lfappend (Cons n lf5) x)) (lst_subset x x).
Lemma candidate_86: forall (n : natural) (x : lst) (lf5 : lst), @eq bool (lst_subset x (lfappend (Cons n lf5) x)) (lst_subset lf5 lf5).
Lemma candidate_51: forall (lf3 : lst) (x : lst), @eq bool (lst_subset x (lfappend lf3 x)) (lst_subset x (lfappend x Nil)).
Lemma candidate_52: forall (lf3 : lst) (x : lst), @eq bool (lst_subset x (lfappend lf3 x)) (lst_subset x (lst_union x Nil)).
Lemma candidate_99: forall (n : natural) (x : lst), @eq lst (lfappend (Cons n Nil) x) (lst_union x (Cons n (lst_union x Nil))).
Lemma candidate_50: forall (lf3 : lst) (x : lst), @eq bool (lst_subset x (lfappend lf3 x)) (lst_subset lf3 (lst_union lf3 Nil)).
Lemma candidate_93: forall (n : natural) (x : lst), @eq bool (lst_subset x (lfappend (Cons n Nil) x))   (lst_subset x (Cons Zero x)).
Lemma candidate_94: forall (n : natural) (x : lst), @eq bool (lst_subset x (lfappend (Cons n Nil) x))   (lst_subset x (lfappend x Nil)).
Lemma candidate_16: forall (lf4 : bool) (x : lst), forall _ : @eq bool (lst_subset x x) lf4, @eq bool (lst_subset x (Cons Zero x)) lf4.
Lemma candidate_95: forall (n : natural) (x : lst), @eq bool (lst_subset x (lfappend (Cons n Nil) x))   (lst_subset x (lst_union x Nil)).
Lemma candidate_17: forall (lf4 : bool) (x : lst), forall _ : @eq bool (lst_subset x x) lf4, @eq bool (lst_subset x (lfappend x Nil)) lf4.
Lemma candidate_4: forall (lf3 : lst) (lf4 : bool) (x : lst), forall _ : @eq bool (lst_subset x x) lf4, @eq bool (lst_subset x (lfappend lf3 x)) lf4.
Lemma candidate_18: forall (lf4 : bool) (x : lst), forall _ : @eq bool (lst_subset x x) lf4, @eq bool (lst_subset x (lst_union x Nil)) lf4.
Lemma candidate_109: forall (n : natural), @eq lst (Cons n Nil)   (if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil)).
Lemma candidate_6: forall (n : natural) (lf4 : bool) (x : lst), forall _ : @eq bool (lst_subset x x) lf4, @eq bool (lst_subset x (lfappend (Cons n Nil) x)) lf4.
Lemma candidate_5: forall (n : natural) (lf4 : bool) (x : lst) (lf5 : lst), forall _ : @eq bool (lst_subset x x) lf4, @eq bool (lst_subset x (lfappend (Cons n lf5) x)) lf4.
Lemma candidate_105: forall (n : natural), @eq lst (Cons n Nil)   (lst_union (if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil)) Nil).
Lemma candidate_108: forall (n : natural), @eq lst (Cons n Nil)   (if orb (Neqb n n) false then if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil) else Cons n (if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil))).
Lemma candidate_107: forall (n : natural), @eq lst (Cons n Nil)   (if lst_mem n (if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil)) then if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil) else Cons n (if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil))).
Lemma candidate_106: forall (n : natural), @eq lst (Cons n Nil)   (if lst_mem n (if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil)) then if lst_mem n (if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil)) then if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil) else Cons n (if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil)) else Cons n (if lst_mem n (if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil)) then if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil) else Cons n (if orb (Neqb n n) false then Cons n Nil else Cons n (Cons n Nil)))).