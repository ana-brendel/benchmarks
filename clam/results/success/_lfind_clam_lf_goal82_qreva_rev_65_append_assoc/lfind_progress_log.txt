File Information
- File name: goal82
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal82_qreva_rev_65_append_assoc
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal82_qreva_rev_65_append_assoc
- Namespace: adtind
- Proof name: qreva_rev
- Theorem: Theorem qreva_rev: forall x0 y0 : lst, @eq lst (qreva x0 y0) (lfappend (rev x0) y0).
- Declarations: 
From lfind Require Import LFind.
Require Import Arith. 

Proof Context
* Goal State: @eq lst (lfappend (rev x) (Cons n y))
  (lfappend (lfappend (rev x) (Cons n Nil)) y)

* Hypothesis:
IHx : forall y0 : lst, @eq lst (qreva x y0) (lfappend (rev x) y0)
x : lst
y : lst
n : natural

* Types:
Set
natural
Prop
lst

* Polymorphic Types:


* Variables:
x : lst
y : lst
n : natural

* Terms:
@eq lst (lfappend (rev x) (Cons n y))
  (lfappend (lfappend (rev x) (Cons n Nil)) y) : Prop
x : lst
lfappend (rev x) (Cons n y) : lst
y : lst
Cons n y : lst
lfappend (rev x) _UNBOUND_REL_1 : lst
lfappend (rev x) (Cons n Nil) : lst
lfappend (lfappend (rev x) (Cons n Nil)) y : lst
forall y0 : lst, @eq lst (qreva x y0) (lfappend (rev x) y0) : Prop
lst : Set
Cons n Nil : lst
natural : Set
qreva x _UNBOUND_REL_1 : lst
n : natural
rev x : lst
@eq lst (qreva x _UNBOUND_REL_1) (lfappend (rev x) _UNBOUND_REL_1) : Prop
Nil : lst

* Functions:
rev  : forall _ : lst, lst
lfappend  : forall (_ : lst) (_ : lst), lst
qreva  : forall (_ : lst) (_ : lst), lst
Cons  : forall (_ : natural) (_ : lst), lst
@eq  : forall (A : Type) (_ : A) (_ : A), Prop

<---GENERALIZATION--->
Time elapsed: 2 seconds
Generalized Variables:
lf3 : lst = lfappend (rev x) (Cons n y)
lf7 : lst = Nil
lf1 : lst = lfappend (lfappend (rev x) (Cons n Nil)) y
lf4 : lst = Cons n Nil
lf5 : lst = Cons n y
lf2 : lst = lfappend (rev x) (Cons n Nil)
lf6 : lst = rev x

Generalizations:
Lemma conj1: forall (lf1 : lst) (lf3 : lst), @eq lst lf3 lf1.
Lemma conj17: forall (lf2 : lst) (y : lst) (lf3 : lst), @eq lst lf3 (lfappend lf2 y).
Lemma conj19: forall (lf6 : lst) (lf4 : lst) (y : lst) (lf3 : lst), @eq lst lf3 (lfappend (lfappend lf6 lf4) y).
Lemma conj20: forall (x : lst) (lf4 : lst) (y : lst) (lf3 : lst), @eq lst lf3 (lfappend (lfappend (rev x) lf4) y).
Lemma conj27: forall (lf6 : lst) (y : lst) (lf7 : lst) (n : natural) (lf3 : lst), @eq lst lf3 (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma conj28: forall (x : lst) (y : lst) (lf7 : lst) (n : natural) (lf3 : lst), @eq lst lf3 (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma conj59: forall (lf6 : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst lf3 (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma conj60: forall (x : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst lf3 (lfappend (lfappend (rev x) (Cons n Nil)) y).
Lemma conj65: forall (lf6 : lst) (lf5 : lst) (lf1 : lst), @eq lst (lfappend lf6 lf5) lf1.
Lemma conj66: forall (lf5 : lst) (x : lst) (lf1 : lst), @eq lst (lfappend (rev x) lf5) lf1.
Lemma conj69: forall (lf6 : lst) (lf1 : lst) (y : lst) (n : natural), @eq lst (lfappend lf6 (Cons n y)) lf1.
Lemma conj70: forall (x : lst) (lf1 : lst) (y : lst) (n : natural), @eq lst (lfappend (rev x) (Cons n y)) lf1.
Lemma conj81: forall (lf6 : lst) (lf2 : lst) (lf5 : lst) (y : lst), @eq lst (lfappend lf6 lf5) (lfappend lf2 y).
Lemma conj82: forall (lf2 : lst) (lf5 : lst) (x : lst) (y : lst), @eq lst (lfappend (rev x) lf5) (lfappend lf2 y).
Lemma conj83: forall (lf6 : lst) (lf5 : lst) (lf4 : lst) (y : lst), @eq lst (lfappend lf6 lf5) (lfappend (lfappend lf6 lf4) y).
Lemma conj84: forall (lf5 : lst) (x : lst) (lf4 : lst) (y : lst), @eq lst (lfappend (rev x) lf5) (lfappend (lfappend (rev x) lf4) y).
Lemma conj85: forall (lf6 : lst) (lf2 : lst) (y : lst) (n : natural), @eq lst (lfappend lf6 (Cons n y)) (lfappend lf2 y).
Lemma conj86: forall (lf2 : lst) (x : lst) (y : lst) (n : natural), @eq lst (lfappend (rev x) (Cons n y)) (lfappend lf2 y).
Lemma conj87: forall (lf6 : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (lfappend lf6 (Cons n y)) (lfappend (lfappend lf6 lf4) y).
Lemma conj88: forall (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (lfappend (rev x) (Cons n y)) (lfappend (lfappend (rev x) lf4) y).
Lemma conj91: forall (lf6 : lst) (lf5 : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (lfappend lf6 lf5) (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma conj92: forall (lf5 : lst) (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (lfappend (rev x) lf5) (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma conj95: forall (lf6 : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (lfappend lf6 (Cons n y)) (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma conj96: forall (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (lfappend (rev x) (Cons n y))
  (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma conj123: forall (lf6 : lst) (lf5 : lst) (y : lst) (n : natural), @eq lst (lfappend lf6 lf5) (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma conj124: forall (lf5 : lst) (x : lst) (y : lst) (n : natural), @eq lst (lfappend (rev x) lf5) (lfappend (lfappend (rev x) (Cons n Nil)) y).
Lemma conj127: forall (lf6 : lst) (y : lst) (n : natural), @eq lst (lfappend lf6 (Cons n y)) (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma conj128: forall (x : lst) (y : lst) (n : natural), @eq lst (lfappend (rev x) (Cons n y))
  (lfappend (lfappend (rev x) (Cons n Nil)) y).


<---VALIDITY CHECKS--->
Time elapsed: 175 seconds
Valid:
Lemma conj128: forall (x : lst) (y : lst) (n : natural), @eq lst (lfappend (rev x) (Cons n y))
  (lfappend (lfappend (rev x) (Cons n Nil)) y).
Lemma conj127: forall (lf6 : lst) (y : lst) (n : natural), @eq lst (lfappend lf6 (Cons n y)) (lfappend (lfappend lf6 (Cons n Nil)) y).

Invalid:
Lemma conj124: forall (lf5 : lst) (x : lst) (y : lst) (n : natural), @eq lst (lfappend (rev x) lf5) (lfappend (lfappend (rev x) (Cons n Nil)) y).
Lemma conj123: forall (lf6 : lst) (lf5 : lst) (y : lst) (n : natural), @eq lst (lfappend lf6 lf5) (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma conj96: forall (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (lfappend (rev x) (Cons n y))
  (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma conj95: forall (lf6 : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (lfappend lf6 (Cons n y)) (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma conj92: forall (lf5 : lst) (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (lfappend (rev x) lf5) (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma conj91: forall (lf6 : lst) (lf5 : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (lfappend lf6 lf5) (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma conj88: forall (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (lfappend (rev x) (Cons n y)) (lfappend (lfappend (rev x) lf4) y).
Lemma conj87: forall (lf6 : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (lfappend lf6 (Cons n y)) (lfappend (lfappend lf6 lf4) y).
Lemma conj86: forall (lf2 : lst) (x : lst) (y : lst) (n : natural), @eq lst (lfappend (rev x) (Cons n y)) (lfappend lf2 y).
Lemma conj85: forall (lf6 : lst) (lf2 : lst) (y : lst) (n : natural), @eq lst (lfappend lf6 (Cons n y)) (lfappend lf2 y).
Lemma conj84: forall (lf5 : lst) (x : lst) (lf4 : lst) (y : lst), @eq lst (lfappend (rev x) lf5) (lfappend (lfappend (rev x) lf4) y).
Lemma conj83: forall (lf6 : lst) (lf5 : lst) (lf4 : lst) (y : lst), @eq lst (lfappend lf6 lf5) (lfappend (lfappend lf6 lf4) y).
Lemma conj82: forall (lf2 : lst) (lf5 : lst) (x : lst) (y : lst), @eq lst (lfappend (rev x) lf5) (lfappend lf2 y).
Lemma conj81: forall (lf6 : lst) (lf2 : lst) (lf5 : lst) (y : lst), @eq lst (lfappend lf6 lf5) (lfappend lf2 y).
Lemma conj70: forall (x : lst) (lf1 : lst) (y : lst) (n : natural), @eq lst (lfappend (rev x) (Cons n y)) lf1.
Lemma conj69: forall (lf6 : lst) (lf1 : lst) (y : lst) (n : natural), @eq lst (lfappend lf6 (Cons n y)) lf1.
Lemma conj66: forall (lf5 : lst) (x : lst) (lf1 : lst), @eq lst (lfappend (rev x) lf5) lf1.
Lemma conj65: forall (lf6 : lst) (lf5 : lst) (lf1 : lst), @eq lst (lfappend lf6 lf5) lf1.
Lemma conj60: forall (x : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst lf3 (lfappend (lfappend (rev x) (Cons n Nil)) y).
Lemma conj59: forall (lf6 : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst lf3 (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma conj28: forall (x : lst) (y : lst) (lf7 : lst) (n : natural) (lf3 : lst), @eq lst lf3 (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma conj27: forall (lf6 : lst) (y : lst) (lf7 : lst) (n : natural) (lf3 : lst), @eq lst lf3 (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma conj20: forall (x : lst) (lf4 : lst) (y : lst) (lf3 : lst), @eq lst lf3 (lfappend (lfappend (rev x) lf4) y).
Lemma conj19: forall (lf6 : lst) (lf4 : lst) (y : lst) (lf3 : lst), @eq lst lf3 (lfappend (lfappend lf6 lf4) y).
Lemma conj17: forall (lf2 : lst) (y : lst) (lf3 : lst), @eq lst lf3 (lfappend lf2 y).
Lemma conj1: forall (lf1 : lst) (lf3 : lst), @eq lst lf3 lf1.

<---ADD IMPLICATIONS--->
Time elapsed: 204 seconds
Generalizations:
Lemma conj124: forall (lf5 : lst) (x : lst) (y : lst) (n : natural), @eq lst (lfappend (rev x) lf5) (lfappend (lfappend (rev x) (Cons n Nil)) y).
Lemma conj123: forall (lf6 : lst) (lf5 : lst) (y : lst) (n : natural), @eq lst (lfappend lf6 lf5) (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma conj96: forall (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (lfappend (rev x) (Cons n y))
  (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma conj95: forall (lf6 : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (lfappend lf6 (Cons n y)) (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma conj92: forall (lf5 : lst) (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (lfappend (rev x) lf5) (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma conj91: forall (lf6 : lst) (lf5 : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (lfappend lf6 lf5) (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma conj88: forall (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (lfappend (rev x) (Cons n y)) (lfappend (lfappend (rev x) lf4) y).
Lemma conj87: forall (lf6 : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (lfappend lf6 (Cons n y)) (lfappend (lfappend lf6 lf4) y).
Lemma conj86: forall (lf2 : lst) (x : lst) (y : lst) (n : natural), @eq lst (lfappend (rev x) (Cons n y)) (lfappend lf2 y).
Lemma conj85: forall (lf6 : lst) (lf2 : lst) (y : lst) (n : natural), @eq lst (lfappend lf6 (Cons n y)) (lfappend lf2 y).
Lemma conj84: forall (lf5 : lst) (x : lst) (lf4 : lst) (y : lst), @eq lst (lfappend (rev x) lf5) (lfappend (lfappend (rev x) lf4) y).
Lemma conj83: forall (lf6 : lst) (lf5 : lst) (lf4 : lst) (y : lst), @eq lst (lfappend lf6 lf5) (lfappend (lfappend lf6 lf4) y).
Lemma conj82: forall (lf2 : lst) (lf5 : lst) (x : lst) (y : lst), @eq lst (lfappend (rev x) lf5) (lfappend lf2 y).
Lemma conj81: forall (lf6 : lst) (lf2 : lst) (lf5 : lst) (y : lst), @eq lst (lfappend lf6 lf5) (lfappend lf2 y).
Lemma conj70: forall (x : lst) (lf1 : lst) (y : lst) (n : natural), @eq lst (lfappend (rev x) (Cons n y)) lf1.
Lemma conj69: forall (lf6 : lst) (lf1 : lst) (y : lst) (n : natural), @eq lst (lfappend lf6 (Cons n y)) lf1.
Lemma conj66: forall (lf5 : lst) (x : lst) (lf1 : lst), @eq lst (lfappend (rev x) lf5) lf1.
Lemma conj65: forall (lf6 : lst) (lf5 : lst) (lf1 : lst), @eq lst (lfappend lf6 lf5) lf1.
Lemma conj60: forall (x : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst lf3 (lfappend (lfappend (rev x) (Cons n Nil)) y).
Lemma conj59: forall (lf6 : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst lf3 (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma conj28: forall (x : lst) (y : lst) (lf7 : lst) (n : natural) (lf3 : lst), @eq lst lf3 (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma conj27: forall (lf6 : lst) (y : lst) (lf7 : lst) (n : natural) (lf3 : lst), @eq lst lf3 (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma conj20: forall (x : lst) (lf4 : lst) (y : lst) (lf3 : lst), @eq lst lf3 (lfappend (lfappend (rev x) lf4) y).
Lemma conj19: forall (lf6 : lst) (lf4 : lst) (y : lst) (lf3 : lst), @eq lst lf3 (lfappend (lfappend lf6 lf4) y).
Lemma conj17: forall (lf2 : lst) (y : lst) (lf3 : lst), @eq lst lf3 (lfappend lf2 y).
Lemma conj1: forall (lf1 : lst) (lf3 : lst), @eq lst lf3 lf1.


<---VALIDITY CHECKS--->
Time elapsed: 250 seconds
Valid:

Invalid:
Lemma conj1: forall (lf1 : lst) (lf3 : lst), @eq lst lf3 lf1.
Lemma conj17: forall (lf2 : lst) (y : lst) (lf3 : lst), @eq lst lf3 (lfappend lf2 y).
Lemma conj19: forall (lf6 : lst) (lf4 : lst) (y : lst) (lf3 : lst), @eq lst lf3 (lfappend (lfappend lf6 lf4) y).
Lemma conj20: forall (x : lst) (lf4 : lst) (y : lst) (lf3 : lst), @eq lst lf3 (lfappend (lfappend (rev x) lf4) y).
Lemma conj27: forall (lf6 : lst) (y : lst) (lf7 : lst) (n : natural) (lf3 : lst), @eq lst lf3 (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma conj28: forall (x : lst) (y : lst) (lf7 : lst) (n : natural) (lf3 : lst), @eq lst lf3 (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma conj59: forall (lf6 : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst lf3 (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma conj60: forall (x : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst lf3 (lfappend (lfappend (rev x) (Cons n Nil)) y).
Lemma conj65: forall (lf6 : lst) (lf5 : lst) (lf1 : lst), @eq lst (lfappend lf6 lf5) lf1.
Lemma conj66: forall (lf5 : lst) (x : lst) (lf1 : lst), @eq lst (lfappend (rev x) lf5) lf1.
Lemma conj69: forall (lf6 : lst) (lf1 : lst) (y : lst) (n : natural), @eq lst (lfappend lf6 (Cons n y)) lf1.
Lemma conj70: forall (x : lst) (lf1 : lst) (y : lst) (n : natural), @eq lst (lfappend (rev x) (Cons n y)) lf1.
Lemma conj81: forall (lf6 : lst) (lf2 : lst) (lf5 : lst) (y : lst), @eq lst (lfappend lf6 lf5) (lfappend lf2 y).
Lemma conj82: forall (lf2 : lst) (lf5 : lst) (x : lst) (y : lst), @eq lst (lfappend (rev x) lf5) (lfappend lf2 y).
Lemma conj83: forall (lf6 : lst) (lf5 : lst) (lf4 : lst) (y : lst), @eq lst (lfappend lf6 lf5) (lfappend (lfappend lf6 lf4) y).
Lemma conj84: forall (lf5 : lst) (x : lst) (lf4 : lst) (y : lst), @eq lst (lfappend (rev x) lf5) (lfappend (lfappend (rev x) lf4) y).
Lemma conj85: forall (lf6 : lst) (lf2 : lst) (y : lst) (n : natural), @eq lst (lfappend lf6 (Cons n y)) (lfappend lf2 y).
Lemma conj86: forall (lf2 : lst) (x : lst) (y : lst) (n : natural), @eq lst (lfappend (rev x) (Cons n y)) (lfappend lf2 y).
Lemma conj87: forall (lf6 : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (lfappend lf6 (Cons n y)) (lfappend (lfappend lf6 lf4) y).
Lemma conj88: forall (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (lfappend (rev x) (Cons n y)) (lfappend (lfappend (rev x) lf4) y).
Lemma conj91: forall (lf6 : lst) (lf5 : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (lfappend lf6 lf5) (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma conj92: forall (lf5 : lst) (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (lfappend (rev x) lf5) (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma conj95: forall (lf6 : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (lfappend lf6 (Cons n y)) (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma conj96: forall (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (lfappend (rev x) (Cons n y))
  (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma conj123: forall (lf6 : lst) (lf5 : lst) (y : lst) (n : natural), @eq lst (lfappend lf6 lf5) (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma conj124: forall (lf5 : lst) (x : lst) (y : lst) (n : natural), @eq lst (lfappend (rev x) lf5) (lfappend (lfappend (rev x) (Cons n Nil)) y).


<---CREATE SKETCHES--->
Time elapsed: 250 seconds
Sketches:
Sketch conj17_sketch0 : @eq lst lf3 (##hole##)
Sketch conj17_term_sketch0 : @eq lst (lfappend lf2 y) (##hole##)
Sketch conj19_sketch0 : @eq lst lf3 (lfappend (##hole##) y)
Sketch conj19_sketch1 : @eq lst lf3 (##hole##)
Sketch conj19_term_sketch0 : @eq lst (lfappend lf6 lf4) (##hole##)
Sketch conj19_term_sketch1 : @eq lst (lfappend (lfappend lf6 lf4) y) (##hole##)
Sketch conj20_sketch0 : @eq lst lf3 (lfappend (##hole##) y)
Sketch conj20_sketch1 : @eq lst lf3 (##hole##)
Sketch conj20_sketch2 : @eq lst lf3 (lfappend (lfappend (##hole##) lf4) y)
Sketch conj20_term_sketch0 : @eq lst (lfappend (rev x) lf4) (##hole##)
Sketch conj20_term_sketch1 : @eq lst (lfappend (lfappend (rev x) lf4) y) (##hole##)
Sketch conj20_term_sketch2 : @eq lst (rev x) (##hole##)
Sketch conj27_sketch0 : @eq lst lf3 (##hole##)
Sketch conj27_sketch1 : @eq lst lf3 (lfappend (##hole##) y)
Sketch conj27_sketch2 : @eq lst lf3 (lfappend (lfappend lf6 (##hole##)) y)
Sketch conj27_term_sketch0 : @eq lst (lfappend (lfappend lf6 (Cons n lf7)) y) (##hole##)
Sketch conj27_term_sketch1 : @eq lst (lfappend lf6 (Cons n lf7)) (##hole##)
Sketch conj27_term_sketch2 : @eq lst (Cons n lf7) (##hole##)
Sketch conj28_sketch0 : @eq lst lf3 (##hole##)
Sketch conj28_sketch1 : @eq lst lf3 (lfappend (##hole##) y)
Sketch conj28_sketch2 : @eq lst lf3 (lfappend (lfappend (rev x) (##hole##)) y)
Sketch conj28_sketch3 : @eq lst lf3 (lfappend (lfappend (##hole##) (Cons n lf7)) y)
Sketch conj28_term_sketch0 : @eq lst (lfappend (lfappend (rev x) (Cons n lf7)) y) (##hole##)
Sketch conj28_term_sketch1 : @eq lst (lfappend (rev x) (Cons n lf7)) (##hole##)
Sketch conj28_term_sketch2 : @eq lst (Cons n lf7) (##hole##)
Sketch conj28_term_sketch3 : @eq lst (rev x) (##hole##)
Sketch conj59_sketch0 : @eq lst lf3 (##hole##)
Sketch conj59_sketch1 : @eq lst lf3 (lfappend (##hole##) y)
Sketch conj59_sketch2 : @eq lst lf3 (lfappend (lfappend lf6 (##hole##)) y)
Sketch conj59_sketch3 : @eq lst lf3 (lfappend (lfappend lf6 (Cons n (##hole##))) y)
Sketch conj59_term_sketch0 : @eq lst (lfappend (lfappend lf6 (Cons n Nil)) y) (##hole##)
Sketch conj59_term_sketch1 : @eq lst (lfappend lf6 (Cons n Nil)) (##hole##)
Sketch conj59_term_sketch2 : @eq lst (Cons n Nil) (##hole##)
Sketch conj59_term_sketch3 : @eq lst Nil (##hole##)
Sketch conj60_sketch0 : @eq lst lf3 (lfappend (##hole##) y)
Sketch conj60_sketch1 : @eq lst lf3 (##hole##)
Sketch conj60_sketch2 : @eq lst lf3 (lfappend (lfappend (rev x) (##hole##)) y)
Sketch conj60_sketch3 : @eq lst lf3 (lfappend (lfappend (rev x) (Cons n (##hole##))) y)
Sketch conj60_sketch4 : @eq lst lf3 (lfappend (lfappend (##hole##) (Cons n Nil)) y)
Sketch conj60_term_sketch0 : @eq lst (lfappend (rev x) (Cons n Nil)) (##hole##)
Sketch conj60_term_sketch1 : @eq lst (lfappend (lfappend (rev x) (Cons n Nil)) y) (##hole##)
Sketch conj60_term_sketch2 : @eq lst (Cons n Nil) (##hole##)
Sketch conj60_term_sketch3 : @eq lst Nil (##hole##)
Sketch conj60_term_sketch4 : @eq lst (rev x) (##hole##)
Sketch conj65_sketch0 : @eq lst (##hole##) lf1
Sketch conj65_term_sketch0 : @eq lst (lfappend lf6 lf5) (##hole##)
Sketch conj66_sketch0 : @eq lst (##hole##) lf1
Sketch conj66_sketch1 : @eq lst (lfappend (##hole##) lf5) lf1
Sketch conj66_term_sketch0 : @eq lst (lfappend (rev x) lf5) (##hole##)
Sketch conj66_term_sketch1 : @eq lst (rev x) (##hole##)
Sketch conj69_sketch0 : @eq lst (##hole##) lf1
Sketch conj69_sketch1 : @eq lst (lfappend lf6 (##hole##)) lf1
Sketch conj69_term_sketch0 : @eq lst (lfappend lf6 (Cons n y)) (##hole##)
Sketch conj69_term_sketch1 : @eq lst (Cons n y) (##hole##)
Sketch conj70_sketch0 : @eq lst (##hole##) lf1
Sketch conj70_sketch1 : @eq lst (lfappend (rev x) (##hole##)) lf1
Sketch conj70_sketch2 : @eq lst (lfappend (##hole##) (Cons n y)) lf1
Sketch conj70_term_sketch0 : @eq lst (lfappend (rev x) (Cons n y)) (##hole##)
Sketch conj70_term_sketch1 : @eq lst (Cons n y) (##hole##)
Sketch conj70_term_sketch2 : @eq lst (rev x) (##hole##)
Sketch conj81_sketch0 : @eq lst (##hole##) (lfappend lf2 y)
Sketch conj81_sketch1 : @eq lst (lfappend lf6 lf5) (##hole##)
Sketch conj81_term_sketch0 : @eq lst (lfappend lf6 lf5) (##hole##)
Sketch conj81_term_sketch1 : @eq lst (lfappend lf2 y) (##hole##)
Sketch conj82_sketch0 : @eq lst (##hole##) (lfappend lf2 y)
Sketch conj82_sketch1 : @eq lst (lfappend (rev x) lf5) (##hole##)
Sketch conj82_sketch2 : @eq lst (lfappend (##hole##) lf5) (lfappend lf2 y)
Sketch conj82_term_sketch0 : @eq lst (lfappend (rev x) lf5) (##hole##)
Sketch conj82_term_sketch1 : @eq lst (lfappend lf2 y) (##hole##)
Sketch conj82_term_sketch2 : @eq lst (rev x) (##hole##)
Sketch conj83_sketch0 : @eq lst (lfappend lf6 lf5) (lfappend (##hole##) y)
Sketch conj83_sketch1 : @eq lst (lfappend lf6 lf5) (##hole##)
Sketch conj83_sketch2 : @eq lst (##hole##) (lfappend (lfappend lf6 lf4) y)
Sketch conj83_term_sketch0 : @eq lst (lfappend lf6 lf4) (##hole##)
Sketch conj83_term_sketch1 : @eq lst (lfappend (lfappend lf6 lf4) y) (##hole##)
Sketch conj83_term_sketch2 : @eq lst (lfappend lf6 lf5) (##hole##)
Sketch conj84_sketch0 : @eq lst (lfappend (rev x) lf5) (lfappend (##hole##) y)
Sketch conj84_sketch1 : @eq lst (##hole##) (lfappend (lfappend (rev x) lf4) y)
Sketch conj84_sketch2 : @eq lst (lfappend (rev x) lf5) (##hole##)
Sketch conj84_sketch3 : @eq lst (lfappend (##hole##) lf5) (lfappend (lfappend (##hole##) lf4) y)
Sketch conj84_term_sketch0 : @eq lst (lfappend (rev x) lf4) (##hole##)
Sketch conj84_term_sketch1 : @eq lst (lfappend (rev x) lf5) (##hole##)
Sketch conj84_term_sketch2 : @eq lst (lfappend (lfappend (rev x) lf4) y) (##hole##)
Sketch conj84_term_sketch3 : @eq lst (rev x) (##hole##)
Sketch conj85_sketch0 : @eq lst (##hole##) (lfappend lf2 y)
Sketch conj85_sketch1 : @eq lst (lfappend lf6 (##hole##)) (lfappend lf2 y)
Sketch conj85_sketch2 : @eq lst (lfappend lf6 (Cons n y)) (##hole##)
Sketch conj85_term_sketch0 : @eq lst (lfappend lf6 (Cons n y)) (##hole##)
Sketch conj85_term_sketch1 : @eq lst (Cons n y) (##hole##)
Sketch conj85_term_sketch2 : @eq lst (lfappend lf2 y) (##hole##)
Sketch conj86_sketch0 : @eq lst (##hole##) (lfappend lf2 y)
Sketch conj86_sketch1 : @eq lst (lfappend (rev x) (##hole##)) (lfappend lf2 y)
Sketch conj86_sketch2 : @eq lst (lfappend (rev x) (Cons n y)) (##hole##)
Sketch conj86_sketch3 : @eq lst (lfappend (##hole##) (Cons n y)) (lfappend lf2 y)
Sketch conj86_term_sketch0 : @eq lst (lfappend (rev x) (Cons n y)) (##hole##)
Sketch conj86_term_sketch1 : @eq lst (Cons n y) (##hole##)
Sketch conj86_term_sketch2 : @eq lst (lfappend lf2 y) (##hole##)
Sketch conj86_term_sketch3 : @eq lst (rev x) (##hole##)
Sketch conj87_sketch0 : @eq lst (lfappend lf6 (Cons n y)) (lfappend (##hole##) y)
Sketch conj87_sketch1 : @eq lst (lfappend lf6 (Cons n y)) (##hole##)
Sketch conj87_sketch2 : @eq lst (##hole##) (lfappend (lfappend lf6 lf4) y)
Sketch conj87_sketch3 : @eq lst (lfappend lf6 (##hole##)) (lfappend (lfappend lf6 lf4) y)
Sketch conj87_term_sketch0 : @eq lst (lfappend lf6 lf4) (##hole##)
Sketch conj87_term_sketch1 : @eq lst (lfappend (lfappend lf6 lf4) y) (##hole##)
Sketch conj87_term_sketch2 : @eq lst (lfappend lf6 (Cons n y)) (##hole##)
Sketch conj87_term_sketch3 : @eq lst (Cons n y) (##hole##)
Sketch conj88_sketch0 : @eq lst (lfappend (rev x) (Cons n y)) (lfappend (##hole##) y)
Sketch conj88_sketch1 : @eq lst (##hole##) (lfappend (lfappend (rev x) lf4) y)
Sketch conj88_sketch2 : @eq lst (lfappend (rev x) (Cons n y)) (##hole##)
Sketch conj88_sketch3 : @eq lst (lfappend (rev x) (##hole##)) (lfappend (lfappend (rev x) lf4) y)
Sketch conj88_sketch4 : @eq lst (lfappend (##hole##) (Cons n y))
  (lfappend (lfappend (##hole##) lf4) y)
Sketch conj88_term_sketch0 : @eq lst (lfappend (rev x) lf4) (##hole##)
Sketch conj88_term_sketch1 : @eq lst (lfappend (rev x) (Cons n y)) (##hole##)
Sketch conj88_term_sketch2 : @eq lst (lfappend (lfappend (rev x) lf4) y) (##hole##)
Sketch conj88_term_sketch3 : @eq lst (Cons n y) (##hole##)
Sketch conj88_term_sketch4 : @eq lst (rev x) (##hole##)
Sketch conj91_sketch0 : @eq lst (lfappend lf6 lf5) (##hole##)
Sketch conj91_sketch1 : @eq lst (##hole##) (lfappend (lfappend lf6 (Cons n lf7)) y)
Sketch conj91_sketch2 : @eq lst (lfappend lf6 lf5) (lfappend (##hole##) y)
Sketch conj91_sketch3 : @eq lst (lfappend lf6 lf5) (lfappend (lfappend lf6 (##hole##)) y)
Sketch conj91_term_sketch0 : @eq lst (lfappend (lfappend lf6 (Cons n lf7)) y) (##hole##)
Sketch conj91_term_sketch1 : @eq lst (lfappend lf6 lf5) (##hole##)
Sketch conj91_term_sketch2 : @eq lst (lfappend lf6 (Cons n lf7)) (##hole##)
Sketch conj91_term_sketch3 : @eq lst (Cons n lf7) (##hole##)
Sketch conj92_sketch0 : @eq lst (lfappend (rev x) lf5) (##hole##)
Sketch conj92_sketch1 : @eq lst (##hole##) (lfappend (lfappend (rev x) (Cons n lf7)) y)
Sketch conj92_sketch2 : @eq lst (lfappend (rev x) lf5) (lfappend (##hole##) y)
Sketch conj92_sketch3 : @eq lst (lfappend (rev x) lf5) (lfappend (lfappend (rev x) (##hole##)) y)
Sketch conj92_sketch4 : @eq lst (lfappend (##hole##) lf5)
  (lfappend (lfappend (##hole##) (Cons n lf7)) y)
Sketch conj92_term_sketch0 : @eq lst (lfappend (lfappend (rev x) (Cons n lf7)) y) (##hole##)
Sketch conj92_term_sketch1 : @eq lst (lfappend (rev x) lf5) (##hole##)
Sketch conj92_term_sketch2 : @eq lst (lfappend (rev x) (Cons n lf7)) (##hole##)
Sketch conj92_term_sketch3 : @eq lst (Cons n lf7) (##hole##)
Sketch conj92_term_sketch4 : @eq lst (rev x) (##hole##)
Sketch conj95_sketch0 : @eq lst (lfappend lf6 (Cons n y)) (##hole##)
Sketch conj95_sketch1 : @eq lst (##hole##) (lfappend (lfappend lf6 (Cons n lf7)) y)
Sketch conj95_sketch2 : @eq lst (lfappend lf6 (Cons n y)) (lfappend (##hole##) y)
Sketch conj95_sketch3 : @eq lst (lfappend lf6 (##hole##)) (lfappend (lfappend lf6 (Cons n lf7)) y)
Sketch conj95_sketch4 : @eq lst (lfappend lf6 (Cons n y)) (lfappend (lfappend lf6 (##hole##)) y)
Sketch conj95_term_sketch0 : @eq lst (lfappend (lfappend lf6 (Cons n lf7)) y) (##hole##)
Sketch conj95_term_sketch1 : @eq lst (lfappend lf6 (Cons n y)) (##hole##)
Sketch conj95_term_sketch2 : @eq lst (lfappend lf6 (Cons n lf7)) (##hole##)
Sketch conj95_term_sketch3 : @eq lst (Cons n y) (##hole##)
Sketch conj95_term_sketch4 : @eq lst (Cons n lf7) (##hole##)
Sketch conj96_sketch0 : @eq lst (lfappend (rev x) (Cons n y)) (##hole##)
Sketch conj96_sketch1 : @eq lst (##hole##) (lfappend (lfappend (rev x) (Cons n lf7)) y)
Sketch conj96_sketch2 : @eq lst (lfappend (rev x) (Cons n y)) (lfappend (##hole##) y)
Sketch conj96_sketch3 : @eq lst (lfappend (rev x) (##hole##))
  (lfappend (lfappend (rev x) (Cons n lf7)) y)
Sketch conj96_sketch4 : @eq lst (lfappend (rev x) (Cons n y))
  (lfappend (lfappend (rev x) (##hole##)) y)
Sketch conj96_sketch5 : @eq lst (lfappend (##hole##) (Cons n y))
  (lfappend (lfappend (##hole##) (Cons n lf7)) y)
Sketch conj96_term_sketch0 : @eq lst (lfappend (lfappend (rev x) (Cons n lf7)) y) (##hole##)
Sketch conj96_term_sketch1 : @eq lst (lfappend (rev x) (Cons n y)) (##hole##)
Sketch conj96_term_sketch2 : @eq lst (lfappend (rev x) (Cons n lf7)) (##hole##)
Sketch conj96_term_sketch3 : @eq lst (Cons n y) (##hole##)
Sketch conj96_term_sketch4 : @eq lst (Cons n lf7) (##hole##)
Sketch conj96_term_sketch5 : @eq lst (rev x) (##hole##)
Sketch conj123_sketch0 : @eq lst (##hole##) (lfappend (lfappend lf6 (Cons n Nil)) y)
Sketch conj123_sketch1 : @eq lst (lfappend lf6 lf5) (##hole##)
Sketch conj123_sketch2 : @eq lst (lfappend lf6 lf5) (lfappend (##hole##) y)
Sketch conj123_sketch3 : @eq lst (lfappend lf6 lf5) (lfappend (lfappend lf6 (##hole##)) y)
Sketch conj123_sketch4 : @eq lst (lfappend lf6 lf5) (lfappend (lfappend lf6 (Cons n (##hole##))) y)
Sketch conj123_term_sketch0 : @eq lst (lfappend lf6 lf5) (##hole##)
Sketch conj123_term_sketch1 : @eq lst (lfappend (lfappend lf6 (Cons n Nil)) y) (##hole##)
Sketch conj123_term_sketch2 : @eq lst (lfappend lf6 (Cons n Nil)) (##hole##)
Sketch conj123_term_sketch3 : @eq lst (Cons n Nil) (##hole##)
Sketch conj123_term_sketch4 : @eq lst Nil (##hole##)
Sketch conj124_sketch0 : @eq lst (lfappend (rev x) lf5) (lfappend (##hole##) y)
Sketch conj124_sketch1 : @eq lst (lfappend (rev x) lf5) (##hole##)
Sketch conj124_sketch2 : @eq lst (##hole##) (lfappend (lfappend (rev x) (Cons n Nil)) y)
Sketch conj124_sketch3 : @eq lst (lfappend (rev x) lf5) (lfappend (lfappend (rev x) (##hole##)) y)
Sketch conj124_sketch4 : @eq lst (lfappend (rev x) lf5)
  (lfappend (lfappend (rev x) (Cons n (##hole##))) y)
Sketch conj124_sketch5 : @eq lst (lfappend (##hole##) lf5)
  (lfappend (lfappend (##hole##) (Cons n Nil)) y)
Sketch conj124_term_sketch0 : @eq lst (lfappend (rev x) (Cons n Nil)) (##hole##)
Sketch conj124_term_sketch1 : @eq lst (lfappend (lfappend (rev x) (Cons n Nil)) y) (##hole##)
Sketch conj124_term_sketch2 : @eq lst (lfappend (rev x) lf5) (##hole##)
Sketch conj124_term_sketch3 : @eq lst (Cons n Nil) (##hole##)
Sketch conj124_term_sketch4 : @eq lst Nil (##hole##)
Sketch conj124_term_sketch5 : @eq lst (rev x) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 3544 seconds
Problems per Sketch:
Sketch conj88_term_sketch4 --> Problem  synth_9
Sketch conj124_term_sketch0 --> Problem  synth_25
Sketch conj69_sketch0 --> Problem  synth_27
Sketch conj83_sketch1 --> Problem  synth_28
Sketch conj60_term_sketch1 --> Problem  synth_26
Sketch conj59_term_sketch2 --> Problem  synth_21
Sketch conj84_sketch1 --> Problem  synth_8
Sketch conj66_sketch0 --> Problem  synth_27
Sketch conj59_term_sketch1 --> Problem  synth_20
Sketch conj96_sketch4 --> Problem  synth_53
Sketch conj59_sketch1 --> Problem  synth_3
Sketch conj60_sketch0 --> Problem  synth_3
Sketch conj20_term_sketch2 --> Problem  synth_9
Sketch conj124_term_sketch1 --> Problem  synth_26
Sketch conj65_term_sketch0 --> Problem  synth_28
Sketch conj17_term_sketch0 --> Problem  synth_2
Sketch conj87_term_sketch1 --> Problem  synth_5
Sketch conj124_term_sketch2 --> Problem  synth_30
Sketch conj88_sketch0 --> Problem  synth_44
Sketch conj60_term_sketch3 --> Problem  synth_22
Sketch conj124_sketch5 --> Problem  synth_57
Sketch conj123_sketch4 --> Problem  synth_55
Sketch conj81_term_sketch1 --> Problem  synth_2
Sketch conj60_sketch2 --> Problem  synth_14
Sketch conj59_sketch3 --> Problem  synth_18
Sketch conj70_sketch2 --> Problem  synth_34
Sketch conj84_sketch2 --> Problem  synth_30
Sketch conj85_sketch0 --> Problem  synth_2
Sketch conj124_sketch1 --> Problem  synth_30
Sketch conj92_term_sketch2 --> Problem  synth_17
Sketch conj28_sketch2 --> Problem  synth_14
Sketch conj123_sketch3 --> Problem  synth_47
Sketch conj92_term_sketch3 --> Problem  synth_13
Sketch conj86_sketch0 --> Problem  synth_2
Sketch conj83_term_sketch1 --> Problem  synth_5
Sketch conj19_term_sketch1 --> Problem  synth_5
Sketch conj28_term_sketch2 --> Problem  synth_13
Sketch conj82_term_sketch2 --> Problem  synth_9
Sketch conj27_sketch1 --> Problem  synth_3
Sketch conj96_term_sketch2 --> Problem  synth_17
Sketch conj70_term_sketch1 --> Problem  synth_32
Sketch conj91_sketch3 --> Problem  synth_47
Sketch conj60_sketch3 --> Problem  synth_23
Sketch conj88_term_sketch2 --> Problem  synth_8
Sketch conj84_term_sketch3 --> Problem  synth_9
Sketch conj66_sketch1 --> Problem  synth_29
Sketch conj123_term_sketch1 --> Problem  synth_19
Sketch conj91_term_sketch3 --> Problem  synth_13
Sketch conj95_sketch1 --> Problem  synth_11
Sketch conj27_term_sketch1 --> Problem  synth_12
Sketch conj96_sketch1 --> Problem  synth_16
Sketch conj20_sketch2 --> Problem  synth_6
Sketch conj92_sketch4 --> Problem  synth_49
Sketch conj88_term_sketch3 --> Problem  synth_32
Sketch conj96_term_sketch1 --> Problem  synth_26
Sketch conj124_sketch4 --> Problem  synth_56
Sketch conj87_term_sketch3 --> Problem  synth_32
Sketch conj84_term_sketch1 --> Problem  synth_30
Sketch conj85_term_sketch0 --> Problem  synth_19
Sketch conj69_term_sketch0 --> Problem  synth_19
Sketch conj95_term_sketch4 --> Problem  synth_13
Sketch conj91_sketch2 --> Problem  synth_36
Sketch conj92_sketch2 --> Problem  synth_37
Sketch conj95_term_sketch3 --> Problem  synth_32
Sketch conj96_term_sketch4 --> Problem  synth_13
Sketch conj96_term_sketch5 --> Problem  synth_9
Sketch conj70_term_sketch2 --> Problem  synth_9
Sketch conj87_term_sketch0 --> Problem  synth_4
Sketch conj83_sketch0 --> Problem  synth_36
Sketch conj27_sketch0 --> Problem  synth_1
Sketch conj85_term_sketch2 --> Problem  synth_2
Sketch conj96_term_sketch3 --> Problem  synth_32
Sketch conj87_sketch1 --> Problem  synth_19
Sketch conj92_sketch1 --> Problem  synth_16
Sketch conj81_sketch1 --> Problem  synth_28
Sketch conj60_sketch4 --> Problem  synth_24
Sketch conj87_sketch3 --> Problem  synth_43
Sketch conj123_sketch2 --> Problem  synth_36
Sketch conj85_term_sketch1 --> Problem  synth_32
Sketch conj92_term_sketch4 --> Problem  synth_9
Sketch conj84_sketch3 --> Problem  synth_38
Sketch conj27_term_sketch0 --> Problem  synth_11
Sketch conj81_sketch0 --> Problem  synth_2
Sketch conj84_term_sketch2 --> Problem  synth_8
Sketch conj84_sketch0 --> Problem  synth_37
Sketch conj28_sketch0 --> Problem  synth_1
Sketch conj66_term_sketch0 --> Problem  synth_30
Sketch conj124_term_sketch4 --> Problem  synth_22
Sketch conj70_sketch1 --> Problem  synth_33
Sketch conj70_term_sketch0 --> Problem  synth_26
Sketch conj92_term_sketch1 --> Problem  synth_30
Sketch conj60_term_sketch4 --> Problem  synth_9
Sketch conj95_sketch4 --> Problem  synth_51
Sketch conj96_term_sketch0 --> Problem  synth_16
Sketch conj83_term_sketch2 --> Problem  synth_28
Sketch conj123_sketch1 --> Problem  synth_28
Sketch conj82_term_sketch1 --> Problem  synth_2
Sketch conj65_sketch0 --> Problem  synth_27
Sketch conj28_term_sketch1 --> Problem  synth_17
Sketch conj87_sketch2 --> Problem  synth_5
Sketch conj123_term_sketch4 --> Problem  synth_22
Sketch conj60_term_sketch2 --> Problem  synth_21
Sketch conj60_sketch1 --> Problem  synth_1
Sketch conj28_term_sketch3 --> Problem  synth_9
Sketch conj27_term_sketch2 --> Problem  synth_13
Sketch conj123_term_sketch3 --> Problem  synth_21
Sketch conj59_sketch2 --> Problem  synth_10
Sketch conj84_term_sketch0 --> Problem  synth_7
Sketch conj20_sketch0 --> Problem  synth_3
Sketch conj82_sketch0 --> Problem  synth_2
Sketch conj91_sketch0 --> Problem  synth_28
Sketch conj20_term_sketch0 --> Problem  synth_7
Sketch conj91_term_sketch0 --> Problem  synth_11
Sketch conj95_sketch3 --> Problem  synth_50
Sketch conj91_term_sketch2 --> Problem  synth_12
Sketch conj86_sketch1 --> Problem  synth_40
Sketch conj27_sketch2 --> Problem  synth_10
Sketch conj82_sketch1 --> Problem  synth_30
Sketch conj60_term_sketch0 --> Problem  synth_25
Sketch conj85_sketch2 --> Problem  synth_19
Sketch conj96_sketch2 --> Problem  synth_44
Sketch conj85_sketch1 --> Problem  synth_39
Sketch conj70_sketch0 --> Problem  synth_27
Sketch conj69_sketch1 --> Problem  synth_31
Sketch conj123_term_sketch2 --> Problem  synth_20
Sketch conj88_sketch1 --> Problem  synth_8
Sketch conj82_sketch2 --> Problem  synth_35
Sketch conj86_sketch2 --> Problem  synth_26
Sketch conj19_term_sketch0 --> Problem  synth_4
Sketch conj86_term_sketch1 --> Problem  synth_32
Sketch conj87_term_sketch2 --> Problem  synth_19
Sketch conj92_sketch3 --> Problem  synth_48
Sketch conj88_sketch2 --> Problem  synth_26
Sketch conj82_term_sketch0 --> Problem  synth_30
Sketch conj19_sketch0 --> Problem  synth_3
Sketch conj17_sketch0 --> Problem  synth_1
Sketch conj124_sketch2 --> Problem  synth_26
Sketch conj96_sketch3 --> Problem  synth_52
Sketch conj83_term_sketch0 --> Problem  synth_4
Sketch conj69_term_sketch1 --> Problem  synth_32
Sketch conj66_term_sketch1 --> Problem  synth_9
Sketch conj124_term_sketch5 --> Problem  synth_9
Sketch conj124_sketch3 --> Problem  synth_48
Sketch conj96_sketch0 --> Problem  synth_26
Sketch conj59_sketch0 --> Problem  synth_1
Sketch conj96_sketch5 --> Problem  synth_54
Sketch conj95_term_sketch1 --> Problem  synth_19
Sketch conj95_term_sketch0 --> Problem  synth_11
Sketch conj20_sketch1 --> Problem  synth_1
Sketch conj88_term_sketch0 --> Problem  synth_7
Sketch conj59_term_sketch0 --> Problem  synth_19
Sketch conj28_term_sketch0 --> Problem  synth_16
Sketch conj59_term_sketch3 --> Problem  synth_22
Sketch conj123_sketch0 --> Problem  synth_19
Sketch conj86_term_sketch0 --> Problem  synth_26
Sketch conj86_term_sketch2 --> Problem  synth_2
Sketch conj87_sketch0 --> Problem  synth_42
Sketch conj88_term_sketch1 --> Problem  synth_26
Sketch conj20_term_sketch1 --> Problem  synth_8
Sketch conj124_sketch0 --> Problem  synth_37
Sketch conj92_sketch0 --> Problem  synth_30
Sketch conj88_sketch3 --> Problem  synth_45
Sketch conj86_term_sketch3 --> Problem  synth_9
Sketch conj19_sketch1 --> Problem  synth_1
Sketch conj88_sketch4 --> Problem  synth_46
Sketch conj91_sketch1 --> Problem  synth_11
Sketch conj86_sketch3 --> Problem  synth_41
Sketch conj28_sketch3 --> Problem  synth_15
Sketch conj28_sketch1 --> Problem  synth_3
Sketch conj95_sketch2 --> Problem  synth_42
Sketch conj83_sketch2 --> Problem  synth_5
Sketch conj123_term_sketch0 --> Problem  synth_28
Sketch conj91_term_sketch1 --> Problem  synth_28
Sketch conj92_term_sketch0 --> Problem  synth_16
Sketch conj95_term_sketch2 --> Problem  synth_12
Sketch conj95_sketch0 --> Problem  synth_19
Sketch conj81_term_sketch0 --> Problem  synth_28
Sketch conj124_term_sketch3 --> Problem  synth_21


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 4042 seconds

Problem: synth_28
 qreva (rev lf6) (lfappend lf5 Nil)
 lfappend lf6 (rev (rev lf5))
 lfappend lf6 (lfappend lf5 Nil)
 rev (qreva lf5 (rev lf6))
 qreva (rev lf6) lf5
 lfappend lf6 lf5

Problem: synth_17
 lfappend (rev x) (Cons n (rev lf7))
 lfappend (rev x) (Cons n lf7)
 qreva x (Cons n (rev lf7))
 qreva x (Cons n lf7)
 qreva x (Cons n Nil)
 lfappend (rev x) (Cons n Nil)

Problem: synth_29

Problem: synth_45
 rev (qreva y (rev lf4))
 rev (qreva y lf4)
 lfappend (rev lf4) y
 qreva (rev lf4) y
 lfappend lf4 y
 qreva lf4 y

Problem: synth_26
 qreva x (Cons n (rev (rev y)))
 qreva x (Cons n (lfappend y Nil))
 rev (lfappend (rev y) (Cons n x))
 rev (qreva y (Cons n x))
 lfappend (rev x) (Cons n y)
 qreva x (Cons n y)

Problem: synth_9
 lfappend (qreva x Nil) Nil
 rev (rev (rev x))
 rev (lfappend x Nil)
 lfappend (rev x) Nil
 qreva x Nil
 rev x

Problem: synth_30
 lfappend (rev x) (lfappend lf5 Nil)
 qreva x (rev (rev lf5))
 qreva x (lfappend lf5 Nil)
 rev (qreva lf5 x)
 lfappend (rev x) lf5
 qreva x lf5

Problem: synth_11
 qreva lf7 (lfappend lf6 (Cons n y))
 lfappend lf6 (Cons n (lfappend y Nil))
 rev (lfappend (rev y) (Cons n (rev lf6)))
 rev (qreva y (Cons n (rev lf6)))
 qreva (rev lf6) (Cons n y)
 lfappend lf6 (Cons n y)

Problem: synth_54

Problem: synth_39

Problem: synth_1
 qreva (qreva lf3 Nil) Nil
 rev (qreva lf3 Nil)
 qreva (rev lf3) Nil
 rev (rev lf3)
 lfappend lf3 Nil
 lf3

Problem: synth_46

Problem: synth_55
 Nil

Problem: synth_57

Problem: synth_15

Problem: synth_31

Problem: synth_14

Problem: synth_8
 qreva (lfappend lf4 x) y
 qreva (qreva lf4 x) y
 lfappend (rev x) (lfappend lf4 y)
 lfappend (rev x) (qreva lf4 y)
 qreva x (lfappend lf4 y)
 qreva x (qreva lf4 y)

Problem: synth_34

Problem: synth_12
 qreva (rev lf6) (Cons n lf7)
 qreva (rev lf6) (Cons n Nil)
 lfappend lf6 (Cons n (rev lf7))
 lfappend lf6 (Cons n lf7)
 lfappend lf6 (Cons n Nil)
 lfappend (rev (rev lf6)) (Cons n Nil)

Problem: synth_5
 qreva (qreva lf4 (rev lf6)) y
 lfappend (lfappend lf6 lf4) y
 qreva (rev lf6) (lfappend lf4 y)
 qreva (rev lf6) (qreva lf4 y)
 lfappend lf6 (lfappend lf4 y)
 lfappend lf6 (qreva lf4 y)

Problem: synth_37

Problem: synth_53
 Cons n Nil

Problem: synth_50
 Cons n (lfappend lf7 y)
 Cons n (qreva lf7 y)
 lfappend lf7 (Cons n y)
 qreva lf7 (Cons n y)
 Cons n (lfappend y Nil)
 Cons n y

Problem: synth_2
 qreva (rev lf2) (lfappend y Nil)
 lfappend lf2 (rev (rev y))
 lfappend lf2 (lfappend y Nil)
 rev (qreva y (rev lf2))
 qreva (rev lf2) y
 lfappend lf2 y

Problem: synth_22
 Nil

Problem: synth_20
 lfappend (lfappend lf6 Nil) (Cons n Nil)
 qreva (qreva lf6 Nil) (Cons n Nil)
 lfappend (rev (qreva lf6 Nil)) (Cons n Nil)
 qreva (rev lf6) (Cons n Nil)
 lfappend lf6 (Cons n Nil)
 lfappend (rev (rev lf6)) (Cons n Nil)

Problem: synth_18
 Nil

Problem: synth_21
 Cons n Nil

Problem: synth_56
 Nil

Problem: synth_41

Problem: synth_49

Problem: synth_25
 qreva (lfappend x Nil) (Cons n Nil)
 lfappend (qreva x Nil) (Cons n Nil)
 lfappend (rev (rev (rev x))) (Cons n Nil)
 lfappend (rev (lfappend x Nil)) (Cons n Nil)
 qreva x (Cons n Nil)
 lfappend (rev x) (Cons n Nil)

Problem: synth_13
 qreva lf7 (Cons n Nil)
 lfappend (rev (rev lf7)) (Cons n Nil)
 lfappend (rev lf7) (Cons n Nil)
 Cons n (rev lf7)
 Cons n lf7
 Cons n Nil

Problem: synth_6

Problem: synth_7
 lfappend (rev x) (rev lf4)
 rev (lfappend lf4 x)
 rev (qreva lf4 x)
 lfappend (rev x) lf4
 qreva x (rev lf4)
 qreva x lf4

Problem: synth_4
 qreva (rev lf6) (rev lf4)
 rev (lfappend lf4 (rev lf6))
 rev (qreva lf4 (rev lf6))
 qreva (rev lf6) lf4
 lfappend lf6 (rev lf4)
 lfappend lf6 lf4

Problem: synth_38

Problem: synth_23
 Nil

Problem: synth_27
 qreva (qreva lf1 Nil) Nil
 rev (qreva lf1 Nil)
 qreva (rev lf1) Nil
 rev (rev lf1)
 lfappend lf1 Nil
 lf1

Problem: synth_42
 lfappend (lfappend lf6 Nil) (Cons n Nil)
 qreva (qreva lf6 Nil) (Cons n Nil)
 lfappend (rev (qreva lf6 Nil)) (Cons n Nil)
 qreva (rev lf6) (Cons n Nil)
 lfappend lf6 (Cons n Nil)
 lfappend (rev (rev lf6)) (Cons n Nil)

Problem: synth_16
 qreva lf7 (qreva x (Cons n y))
 qreva x (Cons n (lfappend y Nil))
 rev (lfappend (rev y) (Cons n x))
 rev (qreva y (Cons n x))
 lfappend (rev x) (Cons n y)
 qreva x (Cons n y)

Problem: synth_19
 lfappend lf6 (Cons n (rev (rev y)))
 lfappend lf6 (Cons n (lfappend y Nil))
 rev (lfappend (rev y) (Cons n (rev lf6)))
 rev (qreva y (Cons n (rev lf6)))
 qreva (rev lf6) (Cons n y)
 lfappend lf6 (Cons n y)

Problem: synth_40

Problem: synth_10

Problem: synth_33

Problem: synth_47

Problem: synth_24

Problem: synth_3

Problem: synth_52
 Cons n (lfappend lf7 y)
 Cons n (qreva lf7 y)
 lfappend lf7 (Cons n y)
 qreva lf7 (Cons n y)
 Cons n (lfappend y Nil)
 Cons n y

Problem: synth_32
 Cons n (qreva (rev y) Nil)
 rev (qreva y (Cons n Nil))
 rev (lfappend (rev y) (Cons n Nil))
 Cons n (rev (rev y))
 Cons n (lfappend y Nil)
 Cons n y

Problem: synth_48

Problem: synth_44
 qreva (lfappend x Nil) (Cons n Nil)
 lfappend (qreva x Nil) (Cons n Nil)
 lfappend (rev (rev (rev x))) (Cons n Nil)
 lfappend (rev (lfappend x Nil)) (Cons n Nil)
 qreva x (Cons n Nil)
 lfappend (rev x) (Cons n Nil)

Problem: synth_36

Problem: synth_51
 Cons n Nil

Problem: synth_35

Problem: synth_43
 rev (qreva y (rev lf4))
 rev (qreva y lf4)
 lfappend (rev lf4) y
 qreva (rev lf4) y
 lfappend lf4 y
 qreva lf4 y

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 4043 seconds
Lemmas:
Lemma candidate_1: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y))   (lfappend (lfappend (rev x) (Cons n Nil)) y).
Lemma candidate_2: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma candidate_3: forall (lf3 : lst), @eq lst lf3 (qreva (qreva lf3 Nil) Nil).
Lemma candidate_4: forall (lf3 : lst), @eq lst lf3 (rev (qreva lf3 Nil)).
Lemma candidate_5: forall (lf3 : lst), @eq lst lf3 (qreva (rev lf3) Nil).
Lemma candidate_6: forall (lf3 : lst), @eq lst lf3 (rev (rev lf3)).
Lemma candidate_7: forall (lf3 : lst), @eq lst lf3 (lfappend lf3 Nil).
Lemma candidate_8: forall (lf3 : lst), @eq lst lf3 (lf3).
Lemma candidate_9: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (qreva (rev lf2) (lfappend y Nil)).
Lemma candidate_10: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (lfappend lf2 (rev (rev y))).
Lemma candidate_11: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (lfappend lf2 (lfappend y Nil)).
Lemma candidate_12: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (rev (qreva y (rev lf2))).
Lemma candidate_13: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (qreva (rev lf2) y).
Lemma candidate_14: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (lfappend lf2 y).
Lemma candidate_15: forall (lf3 : lst), @eq lst lf3 (qreva (qreva lf3 Nil) Nil).
Lemma candidate_16: forall (lf3 : lst), @eq lst lf3 (rev (qreva lf3 Nil)).
Lemma candidate_17: forall (lf3 : lst), @eq lst lf3 (qreva (rev lf3) Nil).
Lemma candidate_18: forall (lf3 : lst), @eq lst lf3 (rev (rev lf3)).
Lemma candidate_19: forall (lf3 : lst), @eq lst lf3 (lfappend lf3 Nil).
Lemma candidate_20: forall (lf3 : lst), @eq lst lf3 (lf3).
Lemma candidate_21: forall (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf4) (qreva (rev lf6) (rev lf4)).
Lemma candidate_22: forall (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf4) (rev (lfappend lf4 (rev lf6))).
Lemma candidate_23: forall (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf4) (rev (qreva lf4 (rev lf6))).
Lemma candidate_24: forall (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf4) (qreva (rev lf6) lf4).
Lemma candidate_25: forall (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf4) (lfappend lf6 (rev lf4)).
Lemma candidate_26: forall (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf4) (lfappend lf6 lf4).
Lemma candidate_27: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 lf4) y) (qreva (qreva lf4 (rev lf6)) y).
Lemma candidate_28: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 lf4) y) (lfappend (lfappend lf6 lf4) y).
Lemma candidate_29: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 lf4) y) (qreva (rev lf6) (lfappend lf4 y)).
Lemma candidate_30: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 lf4) y) (qreva (rev lf6) (qreva lf4 y)).
Lemma candidate_31: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 lf4) y) (lfappend lf6 (lfappend lf4 y)).
Lemma candidate_32: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 lf4) y) (lfappend lf6 (qreva lf4 y)).
Lemma candidate_33: forall (lf3 : lst), @eq lst lf3 (qreva (qreva lf3 Nil) Nil).
Lemma candidate_34: forall (lf3 : lst), @eq lst lf3 (rev (qreva lf3 Nil)).
Lemma candidate_35: forall (lf3 : lst), @eq lst lf3 (qreva (rev lf3) Nil).
Lemma candidate_36: forall (lf3 : lst), @eq lst lf3 (rev (rev lf3)).
Lemma candidate_37: forall (lf3 : lst), @eq lst lf3 (lfappend lf3 Nil).
Lemma candidate_38: forall (lf3 : lst), @eq lst lf3 (lf3).
Lemma candidate_39: forall (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) lf4) (lfappend (rev x) (rev lf4)).
Lemma candidate_40: forall (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) lf4) (rev (lfappend lf4 x)).
Lemma candidate_41: forall (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) lf4) (rev (qreva lf4 x)).
Lemma candidate_42: forall (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) lf4) (lfappend (rev x) lf4).
Lemma candidate_43: forall (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) lf4) (qreva x (rev lf4)).
Lemma candidate_44: forall (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) lf4) (qreva x lf4).
Lemma candidate_45: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) lf4) y) (qreva (lfappend lf4 x) y).
Lemma candidate_46: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) lf4) y) (qreva (qreva lf4 x) y).
Lemma candidate_47: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) lf4) y)   (lfappend (rev x) (lfappend lf4 y)).
Lemma candidate_48: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) lf4) y) (lfappend (rev x) (qreva lf4 y)).
Lemma candidate_49: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) lf4) y) (qreva x (lfappend lf4 y)).
Lemma candidate_50: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) lf4) y) (qreva x (qreva lf4 y)).
Lemma candidate_51: forall (x : lst), @eq lst (rev x) (lfappend (qreva x Nil) Nil).
Lemma candidate_52: forall (x : lst), @eq lst (rev x) (rev (rev (rev x))).
Lemma candidate_53: forall (x : lst), @eq lst (rev x) (rev (lfappend x Nil)).
Lemma candidate_54: forall (x : lst), @eq lst (rev x) (lfappend (rev x) Nil).
Lemma candidate_55: forall (x : lst), @eq lst (rev x) (qreva x Nil).
Lemma candidate_56: forall (x : lst), @eq lst (rev x) (rev x).
Lemma candidate_57: forall (lf3 : lst), @eq lst lf3 (qreva (qreva lf3 Nil) Nil).
Lemma candidate_58: forall (lf3 : lst), @eq lst lf3 (rev (qreva lf3 Nil)).
Lemma candidate_59: forall (lf3 : lst), @eq lst lf3 (qreva (rev lf3) Nil).
Lemma candidate_60: forall (lf3 : lst), @eq lst lf3 (rev (rev lf3)).
Lemma candidate_61: forall (lf3 : lst), @eq lst lf3 (lfappend lf3 Nil).
Lemma candidate_62: forall (lf3 : lst), @eq lst lf3 (lf3).
Lemma candidate_63: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n lf7)) y)   (qreva lf7 (lfappend lf6 (Cons n y))).
Lemma candidate_64: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n lf7)) y)   (lfappend lf6 (Cons n (lfappend y Nil))).
Lemma candidate_65: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n lf7)) y)   (rev (lfappend (rev y) (Cons n (rev lf6)))).
Lemma candidate_66: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n lf7)) y)   (rev (qreva y (Cons n (rev lf6)))).
Lemma candidate_67: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n lf7)) y) (qreva (rev lf6) (Cons n y)).
Lemma candidate_68: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n lf7)) y) (lfappend lf6 (Cons n y)).
Lemma candidate_69: forall (lf7 : lst) (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n lf7)) (qreva (rev lf6) (Cons n lf7)).
Lemma candidate_70: forall (lf7 : lst) (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n lf7)) (qreva (rev lf6) (Cons n Nil)).
Lemma candidate_71: forall (lf7 : lst) (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n lf7)) (lfappend lf6 (Cons n (rev lf7))).
Lemma candidate_72: forall (lf7 : lst) (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n lf7)) (lfappend lf6 (Cons n lf7)).
Lemma candidate_73: forall (lf7 : lst) (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n lf7)) (lfappend lf6 (Cons n Nil)).
Lemma candidate_74: forall (lf7 : lst) (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n lf7)) (lfappend (rev (rev lf6)) (Cons n Nil)).
Lemma candidate_75: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (qreva lf7 (Cons n Nil)).
Lemma candidate_76: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (lfappend (rev (rev lf7)) (Cons n Nil)).
Lemma candidate_77: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (lfappend (rev lf7) (Cons n Nil)).
Lemma candidate_78: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (Cons n (rev lf7)).
Lemma candidate_79: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (Cons n lf7).
Lemma candidate_80: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (Cons n Nil).
Lemma candidate_81: forall (lf3 : lst), @eq lst lf3 (qreva (qreva lf3 Nil) Nil).
Lemma candidate_82: forall (lf3 : lst), @eq lst lf3 (rev (qreva lf3 Nil)).
Lemma candidate_83: forall (lf3 : lst), @eq lst lf3 (qreva (rev lf3) Nil).
Lemma candidate_84: forall (lf3 : lst), @eq lst lf3 (rev (rev lf3)).
Lemma candidate_85: forall (lf3 : lst), @eq lst lf3 (lfappend lf3 Nil).
Lemma candidate_86: forall (lf3 : lst), @eq lst lf3 (lf3).
Lemma candidate_87: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n lf7)) y)   (qreva lf7 (qreva x (Cons n y))).
Lemma candidate_88: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n lf7)) y)   (qreva x (Cons n (lfappend y Nil))).
Lemma candidate_89: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n lf7)) y)   (rev (lfappend (rev y) (Cons n x))).
Lemma candidate_90: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n lf7)) y)   (rev (qreva y (Cons n x))).
Lemma candidate_91: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n lf7)) y)   (lfappend (rev x) (Cons n y)).
Lemma candidate_92: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n lf7)) y) (qreva x (Cons n y)).
Lemma candidate_93: forall (lf7 : lst) (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n lf7)) (lfappend (rev x) (Cons n (rev lf7))).
Lemma candidate_94: forall (lf7 : lst) (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n lf7)) (lfappend (rev x) (Cons n lf7)).
Lemma candidate_95: forall (lf7 : lst) (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n lf7)) (qreva x (Cons n (rev lf7))).
Lemma candidate_96: forall (lf7 : lst) (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n lf7)) (qreva x (Cons n lf7)).
Lemma candidate_97: forall (lf7 : lst) (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n lf7)) (qreva x (Cons n Nil)).
Lemma candidate_98: forall (lf7 : lst) (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n lf7)) (lfappend (rev x) (Cons n Nil)).
Lemma candidate_99: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (qreva lf7 (Cons n Nil)).
Lemma candidate_100: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (lfappend (rev (rev lf7)) (Cons n Nil)).
Lemma candidate_101: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (lfappend (rev lf7) (Cons n Nil)).
Lemma candidate_102: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (Cons n (rev lf7)).
Lemma candidate_103: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (Cons n lf7).
Lemma candidate_104: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (Cons n Nil).
Lemma candidate_105: forall (x : lst), @eq lst (rev x) (lfappend (qreva x Nil) Nil).
Lemma candidate_106: forall (x : lst), @eq lst (rev x) (rev (rev (rev x))).
Lemma candidate_107: forall (x : lst), @eq lst (rev x) (rev (lfappend x Nil)).
Lemma candidate_108: forall (x : lst), @eq lst (rev x) (lfappend (rev x) Nil).
Lemma candidate_109: forall (x : lst), @eq lst (rev x) (qreva x Nil).
Lemma candidate_110: forall (x : lst), @eq lst (rev x) (rev x).
Lemma candidate_111: forall (lf3 : lst), @eq lst lf3 (qreva (qreva lf3 Nil) Nil).
Lemma candidate_112: forall (lf3 : lst), @eq lst lf3 (rev (qreva lf3 Nil)).
Lemma candidate_113: forall (lf3 : lst), @eq lst lf3 (qreva (rev lf3) Nil).
Lemma candidate_114: forall (lf3 : lst), @eq lst lf3 (rev (rev lf3)).
Lemma candidate_115: forall (lf3 : lst), @eq lst lf3 (lfappend lf3 Nil).
Lemma candidate_116: forall (lf3 : lst), @eq lst lf3 (lf3).
Lemma candidate_117: forall (lf3 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst lf3 (lfappend (lfappend lf6 (Cons n (Nil))) y).
Lemma candidate_118: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n Nil)) y)   (lfappend lf6 (Cons n (rev (rev y)))).
Lemma candidate_119: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n Nil)) y)   (lfappend lf6 (Cons n (lfappend y Nil))).
Lemma candidate_120: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n Nil)) y)   (rev (lfappend (rev y) (Cons n (rev lf6)))).
Lemma candidate_121: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n Nil)) y)   (rev (qreva y (Cons n (rev lf6)))).
Lemma candidate_122: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n Nil)) y) (qreva (rev lf6) (Cons n y)).
Lemma candidate_123: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n Nil)) y) (lfappend lf6 (Cons n y)).
Lemma candidate_124: forall (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n Nil))   (lfappend (lfappend lf6 Nil) (Cons n Nil)).
Lemma candidate_125: forall (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n Nil)) (qreva (qreva lf6 Nil) (Cons n Nil)).
Lemma candidate_126: forall (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n Nil))   (lfappend (rev (qreva lf6 Nil)) (Cons n Nil)).
Lemma candidate_127: forall (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n Nil)) (qreva (rev lf6) (Cons n Nil)).
Lemma candidate_128: forall (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n Nil)) (lfappend lf6 (Cons n Nil)).
Lemma candidate_129: forall (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n Nil)) (lfappend (rev (rev lf6)) (Cons n Nil)).
Lemma candidate_130: forall (n : natural), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_131: @eq lst Nil (Nil).
Lemma candidate_132: forall (lf3 : lst), @eq lst lf3 (qreva (qreva lf3 Nil) Nil).
Lemma candidate_133: forall (lf3 : lst), @eq lst lf3 (rev (qreva lf3 Nil)).
Lemma candidate_134: forall (lf3 : lst), @eq lst lf3 (qreva (rev lf3) Nil).
Lemma candidate_135: forall (lf3 : lst), @eq lst lf3 (rev (rev lf3)).
Lemma candidate_136: forall (lf3 : lst), @eq lst lf3 (lfappend lf3 Nil).
Lemma candidate_137: forall (lf3 : lst), @eq lst lf3 (lf3).
Lemma candidate_138: forall (lf3 : lst) (n : natural) (y : lst) (x : lst), @eq lst lf3 (lfappend (lfappend (rev x) (Cons n (Nil))) y).
Lemma candidate_139: forall (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n Nil)) (qreva (lfappend x Nil) (Cons n Nil)).
Lemma candidate_140: forall (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n Nil)) (lfappend (qreva x Nil) (Cons n Nil)).
Lemma candidate_141: forall (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n Nil))   (lfappend (rev (rev (rev x))) (Cons n Nil)).
Lemma candidate_142: forall (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n Nil))   (lfappend (rev (lfappend x Nil)) (Cons n Nil)).
Lemma candidate_143: forall (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n Nil)) (qreva x (Cons n Nil)).
Lemma candidate_144: forall (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n Nil)) (lfappend (rev x) (Cons n Nil)).
Lemma candidate_145: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n Nil)) y)   (qreva x (Cons n (rev (rev y)))).
Lemma candidate_146: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n Nil)) y)   (qreva x (Cons n (lfappend y Nil))).
Lemma candidate_147: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n Nil)) y)   (rev (lfappend (rev y) (Cons n x))).
Lemma candidate_148: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n Nil)) y)   (rev (qreva y (Cons n x))).
Lemma candidate_149: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n Nil)) y)   (lfappend (rev x) (Cons n y)).
Lemma candidate_150: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n Nil)) y) (qreva x (Cons n y)).
Lemma candidate_151: forall (n : natural), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_152: @eq lst Nil (Nil).
Lemma candidate_153: forall (x : lst), @eq lst (rev x) (lfappend (qreva x Nil) Nil).
Lemma candidate_154: forall (x : lst), @eq lst (rev x) (rev (rev (rev x))).
Lemma candidate_155: forall (x : lst), @eq lst (rev x) (rev (lfappend x Nil)).
Lemma candidate_156: forall (x : lst), @eq lst (rev x) (lfappend (rev x) Nil).
Lemma candidate_157: forall (x : lst), @eq lst (rev x) (qreva x Nil).
Lemma candidate_158: forall (x : lst), @eq lst (rev x) (rev x).
Lemma candidate_159: forall (lf1 : lst), @eq lst (qreva (qreva lf1 Nil) Nil) lf1.
Lemma candidate_160: forall (lf1 : lst), @eq lst (rev (qreva lf1 Nil)) lf1.
Lemma candidate_161: forall (lf1 : lst), @eq lst (qreva (rev lf1) Nil) lf1.
Lemma candidate_162: forall (lf1 : lst), @eq lst (rev (rev lf1)) lf1.
Lemma candidate_163: forall (lf1 : lst), @eq lst (lfappend lf1 Nil) lf1.
Lemma candidate_164: forall (lf1 : lst), @eq lst (lf1) lf1.
Lemma candidate_165: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (qreva (rev lf6) (lfappend lf5 Nil)).
Lemma candidate_166: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 (rev (rev lf5))).
Lemma candidate_167: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 (lfappend lf5 Nil)).
Lemma candidate_168: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (rev (qreva lf5 (rev lf6))).
Lemma candidate_169: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (qreva (rev lf6) lf5).
Lemma candidate_170: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 lf5).
Lemma candidate_171: forall (lf1 : lst), @eq lst (qreva (qreva lf1 Nil) Nil) lf1.
Lemma candidate_172: forall (lf1 : lst), @eq lst (rev (qreva lf1 Nil)) lf1.
Lemma candidate_173: forall (lf1 : lst), @eq lst (qreva (rev lf1) Nil) lf1.
Lemma candidate_174: forall (lf1 : lst), @eq lst (rev (rev lf1)) lf1.
Lemma candidate_175: forall (lf1 : lst), @eq lst (lfappend lf1 Nil) lf1.
Lemma candidate_176: forall (lf1 : lst), @eq lst (lf1) lf1.
Lemma candidate_177: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (lfappend (rev x) (lfappend lf5 Nil)).
Lemma candidate_178: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (qreva x (rev (rev lf5))).
Lemma candidate_179: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (qreva x (lfappend lf5 Nil)).
Lemma candidate_180: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (rev (qreva lf5 x)).
Lemma candidate_181: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (lfappend (rev x) lf5).
Lemma candidate_182: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (qreva x lf5).
Lemma candidate_183: forall (x : lst), @eq lst (rev x) (lfappend (qreva x Nil) Nil).
Lemma candidate_184: forall (x : lst), @eq lst (rev x) (rev (rev (rev x))).
Lemma candidate_185: forall (x : lst), @eq lst (rev x) (rev (lfappend x Nil)).
Lemma candidate_186: forall (x : lst), @eq lst (rev x) (lfappend (rev x) Nil).
Lemma candidate_187: forall (x : lst), @eq lst (rev x) (qreva x Nil).
Lemma candidate_188: forall (x : lst), @eq lst (rev x) (rev x).
Lemma candidate_189: forall (lf1 : lst), @eq lst (qreva (qreva lf1 Nil) Nil) lf1.
Lemma candidate_190: forall (lf1 : lst), @eq lst (rev (qreva lf1 Nil)) lf1.
Lemma candidate_191: forall (lf1 : lst), @eq lst (qreva (rev lf1) Nil) lf1.
Lemma candidate_192: forall (lf1 : lst), @eq lst (rev (rev lf1)) lf1.
Lemma candidate_193: forall (lf1 : lst), @eq lst (lfappend lf1 Nil) lf1.
Lemma candidate_194: forall (lf1 : lst), @eq lst (lf1) lf1.
Lemma candidate_195: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend lf6 (Cons n (rev (rev y)))).
Lemma candidate_196: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend lf6 (Cons n (lfappend y Nil))).
Lemma candidate_197: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (rev (lfappend (rev y) (Cons n (rev lf6)))).
Lemma candidate_198: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (rev (qreva y (Cons n (rev lf6)))).
Lemma candidate_199: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (qreva (rev lf6) (Cons n y)).
Lemma candidate_200: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend lf6 (Cons n y)).
Lemma candidate_201: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (qreva (rev y) Nil)).
Lemma candidate_202: forall (n : natural) (y : lst), @eq lst (Cons n y) (rev (qreva y (Cons n Nil))).
Lemma candidate_203: forall (n : natural) (y : lst), @eq lst (Cons n y) (rev (lfappend (rev y) (Cons n Nil))).
Lemma candidate_204: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (rev (rev y))).
Lemma candidate_205: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (lfappend y Nil)).
Lemma candidate_206: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n y).
Lemma candidate_207: forall (lf1 : lst), @eq lst (qreva (qreva lf1 Nil) Nil) lf1.
Lemma candidate_208: forall (lf1 : lst), @eq lst (rev (qreva lf1 Nil)) lf1.
Lemma candidate_209: forall (lf1 : lst), @eq lst (qreva (rev lf1) Nil) lf1.
Lemma candidate_210: forall (lf1 : lst), @eq lst (rev (rev lf1)) lf1.
Lemma candidate_211: forall (lf1 : lst), @eq lst (lfappend lf1 Nil) lf1.
Lemma candidate_212: forall (lf1 : lst), @eq lst (lf1) lf1.
Lemma candidate_213: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (qreva x (Cons n (rev (rev y)))).
Lemma candidate_214: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (qreva x (Cons n (lfappend y Nil))).
Lemma candidate_215: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (rev (lfappend (rev y) (Cons n x))).
Lemma candidate_216: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (rev (qreva y (Cons n x))).
Lemma candidate_217: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (lfappend (rev x) (Cons n y)).
Lemma candidate_218: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (qreva x (Cons n y)).
Lemma candidate_219: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (qreva (rev y) Nil)).
Lemma candidate_220: forall (n : natural) (y : lst), @eq lst (Cons n y) (rev (qreva y (Cons n Nil))).
Lemma candidate_221: forall (n : natural) (y : lst), @eq lst (Cons n y) (rev (lfappend (rev y) (Cons n Nil))).
Lemma candidate_222: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (rev (rev y))).
Lemma candidate_223: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (lfappend y Nil)).
Lemma candidate_224: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n y).
Lemma candidate_225: forall (x : lst), @eq lst (rev x) (lfappend (qreva x Nil) Nil).
Lemma candidate_226: forall (x : lst), @eq lst (rev x) (rev (rev (rev x))).
Lemma candidate_227: forall (x : lst), @eq lst (rev x) (rev (lfappend x Nil)).
Lemma candidate_228: forall (x : lst), @eq lst (rev x) (lfappend (rev x) Nil).
Lemma candidate_229: forall (x : lst), @eq lst (rev x) (qreva x Nil).
Lemma candidate_230: forall (x : lst), @eq lst (rev x) (rev x).
Lemma candidate_231: forall (y : lst) (lf2 : lst), @eq lst (qreva (rev lf2) (lfappend y Nil)) (lfappend lf2 y).
Lemma candidate_232: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 (rev (rev y))) (lfappend lf2 y).
Lemma candidate_233: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 (lfappend y Nil)) (lfappend lf2 y).
Lemma candidate_234: forall (y : lst) (lf2 : lst), @eq lst (rev (qreva y (rev lf2))) (lfappend lf2 y).
Lemma candidate_235: forall (y : lst) (lf2 : lst), @eq lst (qreva (rev lf2) y) (lfappend lf2 y).
Lemma candidate_236: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (lfappend lf2 y).
Lemma candidate_237: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (qreva (rev lf6) (lfappend lf5 Nil)).
Lemma candidate_238: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 (rev (rev lf5))).
Lemma candidate_239: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 (lfappend lf5 Nil)).
Lemma candidate_240: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (rev (qreva lf5 (rev lf6))).
Lemma candidate_241: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (qreva (rev lf6) lf5).
Lemma candidate_242: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 lf5).
Lemma candidate_243: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (qreva (rev lf6) (lfappend lf5 Nil)).
Lemma candidate_244: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 (rev (rev lf5))).
Lemma candidate_245: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 (lfappend lf5 Nil)).
Lemma candidate_246: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (rev (qreva lf5 (rev lf6))).
Lemma candidate_247: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (qreva (rev lf6) lf5).
Lemma candidate_248: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 lf5).
Lemma candidate_249: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (qreva (rev lf2) (lfappend y Nil)).
Lemma candidate_250: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (lfappend lf2 (rev (rev y))).
Lemma candidate_251: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (lfappend lf2 (lfappend y Nil)).
Lemma candidate_252: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (rev (qreva y (rev lf2))).
Lemma candidate_253: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (qreva (rev lf2) y).
Lemma candidate_254: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (lfappend lf2 y).
Lemma candidate_255: forall (y : lst) (lf2 : lst), @eq lst (qreva (rev lf2) (lfappend y Nil)) (lfappend lf2 y).
Lemma candidate_256: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 (rev (rev y))) (lfappend lf2 y).
Lemma candidate_257: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 (lfappend y Nil)) (lfappend lf2 y).
Lemma candidate_258: forall (y : lst) (lf2 : lst), @eq lst (rev (qreva y (rev lf2))) (lfappend lf2 y).
Lemma candidate_259: forall (y : lst) (lf2 : lst), @eq lst (qreva (rev lf2) y) (lfappend lf2 y).
Lemma candidate_260: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (lfappend lf2 y).
Lemma candidate_261: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (lfappend (rev x) (lfappend lf5 Nil)).
Lemma candidate_262: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (qreva x (rev (rev lf5))).
Lemma candidate_263: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (qreva x (lfappend lf5 Nil)).
Lemma candidate_264: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (rev (qreva lf5 x)).
Lemma candidate_265: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (lfappend (rev x) lf5).
Lemma candidate_266: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (qreva x lf5).
Lemma candidate_267: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (lfappend (rev x) (lfappend lf5 Nil)).
Lemma candidate_268: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (qreva x (rev (rev lf5))).
Lemma candidate_269: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (qreva x (lfappend lf5 Nil)).
Lemma candidate_270: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (rev (qreva lf5 x)).
Lemma candidate_271: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (lfappend (rev x) lf5).
Lemma candidate_272: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (qreva x lf5).
Lemma candidate_273: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (qreva (rev lf2) (lfappend y Nil)).
Lemma candidate_274: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (lfappend lf2 (rev (rev y))).
Lemma candidate_275: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (lfappend lf2 (lfappend y Nil)).
Lemma candidate_276: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (rev (qreva y (rev lf2))).
Lemma candidate_277: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (qreva (rev lf2) y).
Lemma candidate_278: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (lfappend lf2 y).
Lemma candidate_279: forall (x : lst), @eq lst (rev x) (lfappend (qreva x Nil) Nil).
Lemma candidate_280: forall (x : lst), @eq lst (rev x) (rev (rev (rev x))).
Lemma candidate_281: forall (x : lst), @eq lst (rev x) (rev (lfappend x Nil)).
Lemma candidate_282: forall (x : lst), @eq lst (rev x) (lfappend (rev x) Nil).
Lemma candidate_283: forall (x : lst), @eq lst (rev x) (qreva x Nil).
Lemma candidate_284: forall (x : lst), @eq lst (rev x) (rev x).
Lemma candidate_285: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (qreva (rev lf6) (lfappend lf5 Nil)).
Lemma candidate_286: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 (rev (rev lf5))).
Lemma candidate_287: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 (lfappend lf5 Nil)).
Lemma candidate_288: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (rev (qreva lf5 (rev lf6))).
Lemma candidate_289: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (qreva (rev lf6) lf5).
Lemma candidate_290: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 lf5).
Lemma candidate_291: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (qreva (qreva lf4 (rev lf6)) y) (lfappend (lfappend lf6 lf4) y).
Lemma candidate_292: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 lf4) y) (lfappend (lfappend lf6 lf4) y).
Lemma candidate_293: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (qreva (rev lf6) (lfappend lf4 y)) (lfappend (lfappend lf6 lf4) y).
Lemma candidate_294: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (qreva (rev lf6) (qreva lf4 y)) (lfappend (lfappend lf6 lf4) y).
Lemma candidate_295: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 (lfappend lf4 y)) (lfappend (lfappend lf6 lf4) y).
Lemma candidate_296: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 (qreva lf4 y)) (lfappend (lfappend lf6 lf4) y).
Lemma candidate_297: forall (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf4) (qreva (rev lf6) (rev lf4)).
Lemma candidate_298: forall (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf4) (rev (lfappend lf4 (rev lf6))).
Lemma candidate_299: forall (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf4) (rev (qreva lf4 (rev lf6))).
Lemma candidate_300: forall (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf4) (qreva (rev lf6) lf4).
Lemma candidate_301: forall (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf4) (lfappend lf6 (rev lf4)).
Lemma candidate_302: forall (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf4) (lfappend lf6 lf4).
Lemma candidate_303: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 lf4) y) (qreva (qreva lf4 (rev lf6)) y).
Lemma candidate_304: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 lf4) y) (lfappend (lfappend lf6 lf4) y).
Lemma candidate_305: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 lf4) y) (qreva (rev lf6) (lfappend lf4 y)).
Lemma candidate_306: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 lf4) y) (qreva (rev lf6) (qreva lf4 y)).
Lemma candidate_307: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 lf4) y) (lfappend lf6 (lfappend lf4 y)).
Lemma candidate_308: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 lf4) y) (lfappend lf6 (qreva lf4 y)).
Lemma candidate_309: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (qreva (rev lf6) (lfappend lf5 Nil)).
Lemma candidate_310: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 (rev (rev lf5))).
Lemma candidate_311: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 (lfappend lf5 Nil)).
Lemma candidate_312: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (rev (qreva lf5 (rev lf6))).
Lemma candidate_313: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (qreva (rev lf6) lf5).
Lemma candidate_314: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 lf5).
Lemma candidate_315: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (qreva (lfappend lf4 x) y) (lfappend (lfappend (rev x) lf4) y).
Lemma candidate_316: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (qreva (qreva lf4 x) y) (lfappend (lfappend (rev x) lf4) y).
Lemma candidate_317: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) (lfappend lf4 y))   (lfappend (lfappend (rev x) lf4) y).
Lemma candidate_318: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) (qreva lf4 y)) (lfappend (lfappend (rev x) lf4) y).
Lemma candidate_319: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (qreva x (lfappend lf4 y)) (lfappend (lfappend (rev x) lf4) y).
Lemma candidate_320: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (qreva x (qreva lf4 y)) (lfappend (lfappend (rev x) lf4) y).
Lemma candidate_321: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (lfappend (rev x) (lfappend lf5 Nil)).
Lemma candidate_322: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (qreva x (rev (rev lf5))).
Lemma candidate_323: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (qreva x (lfappend lf5 Nil)).
Lemma candidate_324: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (rev (qreva lf5 x)).
Lemma candidate_325: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (lfappend (rev x) lf5).
Lemma candidate_326: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (qreva x lf5).
Lemma candidate_327: forall (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) lf4) (lfappend (rev x) (rev lf4)).
Lemma candidate_328: forall (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) lf4) (rev (lfappend lf4 x)).
Lemma candidate_329: forall (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) lf4) (rev (qreva lf4 x)).
Lemma candidate_330: forall (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) lf4) (lfappend (rev x) lf4).
Lemma candidate_331: forall (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) lf4) (qreva x (rev lf4)).
Lemma candidate_332: forall (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) lf4) (qreva x lf4).
Lemma candidate_333: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (lfappend (rev x) (lfappend lf5 Nil)).
Lemma candidate_334: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (qreva x (rev (rev lf5))).
Lemma candidate_335: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (qreva x (lfappend lf5 Nil)).
Lemma candidate_336: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (rev (qreva lf5 x)).
Lemma candidate_337: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (lfappend (rev x) lf5).
Lemma candidate_338: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (qreva x lf5).
Lemma candidate_339: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) lf4) y) (qreva (lfappend lf4 x) y).
Lemma candidate_340: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) lf4) y) (qreva (qreva lf4 x) y).
Lemma candidate_341: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) lf4) y)   (lfappend (rev x) (lfappend lf4 y)).
Lemma candidate_342: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) lf4) y) (lfappend (rev x) (qreva lf4 y)).
Lemma candidate_343: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) lf4) y) (qreva x (lfappend lf4 y)).
Lemma candidate_344: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) lf4) y) (qreva x (qreva lf4 y)).
Lemma candidate_345: forall (x : lst), @eq lst (rev x) (lfappend (qreva x Nil) Nil).
Lemma candidate_346: forall (x : lst), @eq lst (rev x) (rev (rev (rev x))).
Lemma candidate_347: forall (x : lst), @eq lst (rev x) (rev (lfappend x Nil)).
Lemma candidate_348: forall (x : lst), @eq lst (rev x) (lfappend (rev x) Nil).
Lemma candidate_349: forall (x : lst), @eq lst (rev x) (qreva x Nil).
Lemma candidate_350: forall (x : lst), @eq lst (rev x) (rev x).
Lemma candidate_351: forall (y : lst) (lf2 : lst), @eq lst (qreva (rev lf2) (lfappend y Nil)) (lfappend lf2 y).
Lemma candidate_352: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 (rev (rev y))) (lfappend lf2 y).
Lemma candidate_353: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 (lfappend y Nil)) (lfappend lf2 y).
Lemma candidate_354: forall (y : lst) (lf2 : lst), @eq lst (rev (qreva y (rev lf2))) (lfappend lf2 y).
Lemma candidate_355: forall (y : lst) (lf2 : lst), @eq lst (qreva (rev lf2) y) (lfappend lf2 y).
Lemma candidate_356: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (lfappend lf2 y).
Lemma candidate_357: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend lf6 (Cons n (rev (rev y)))).
Lemma candidate_358: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend lf6 (Cons n (lfappend y Nil))).
Lemma candidate_359: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (rev (lfappend (rev y) (Cons n (rev lf6)))).
Lemma candidate_360: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (rev (qreva y (Cons n (rev lf6)))).
Lemma candidate_361: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (qreva (rev lf6) (Cons n y)).
Lemma candidate_362: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend lf6 (Cons n y)).
Lemma candidate_363: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend lf6 (Cons n (rev (rev y)))).
Lemma candidate_364: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend lf6 (Cons n (lfappend y Nil))).
Lemma candidate_365: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (rev (lfappend (rev y) (Cons n (rev lf6)))).
Lemma candidate_366: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (rev (qreva y (Cons n (rev lf6)))).
Lemma candidate_367: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (qreva (rev lf6) (Cons n y)).
Lemma candidate_368: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend lf6 (Cons n y)).
Lemma candidate_369: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (qreva (rev y) Nil)).
Lemma candidate_370: forall (n : natural) (y : lst), @eq lst (Cons n y) (rev (qreva y (Cons n Nil))).
Lemma candidate_371: forall (n : natural) (y : lst), @eq lst (Cons n y) (rev (lfappend (rev y) (Cons n Nil))).
Lemma candidate_372: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (rev (rev y))).
Lemma candidate_373: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (lfappend y Nil)).
Lemma candidate_374: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n y).
Lemma candidate_375: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (qreva (rev lf2) (lfappend y Nil)).
Lemma candidate_376: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (lfappend lf2 (rev (rev y))).
Lemma candidate_377: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (lfappend lf2 (lfappend y Nil)).
Lemma candidate_378: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (rev (qreva y (rev lf2))).
Lemma candidate_379: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (qreva (rev lf2) y).
Lemma candidate_380: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (lfappend lf2 y).
Lemma candidate_381: forall (y : lst) (lf2 : lst), @eq lst (qreva (rev lf2) (lfappend y Nil)) (lfappend lf2 y).
Lemma candidate_382: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 (rev (rev y))) (lfappend lf2 y).
Lemma candidate_383: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 (lfappend y Nil)) (lfappend lf2 y).
Lemma candidate_384: forall (y : lst) (lf2 : lst), @eq lst (rev (qreva y (rev lf2))) (lfappend lf2 y).
Lemma candidate_385: forall (y : lst) (lf2 : lst), @eq lst (qreva (rev lf2) y) (lfappend lf2 y).
Lemma candidate_386: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (lfappend lf2 y).
Lemma candidate_387: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (qreva x (Cons n (rev (rev y)))).
Lemma candidate_388: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (qreva x (Cons n (lfappend y Nil))).
Lemma candidate_389: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (rev (lfappend (rev y) (Cons n x))).
Lemma candidate_390: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (rev (qreva y (Cons n x))).
Lemma candidate_391: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (lfappend (rev x) (Cons n y)).
Lemma candidate_392: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (qreva x (Cons n y)).
Lemma candidate_393: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (qreva x (Cons n (rev (rev y)))).
Lemma candidate_394: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (qreva x (Cons n (lfappend y Nil))).
Lemma candidate_395: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (rev (lfappend (rev y) (Cons n x))).
Lemma candidate_396: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (rev (qreva y (Cons n x))).
Lemma candidate_397: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (lfappend (rev x) (Cons n y)).
Lemma candidate_398: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (qreva x (Cons n y)).
Lemma candidate_399: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (qreva (rev y) Nil)).
Lemma candidate_400: forall (n : natural) (y : lst), @eq lst (Cons n y) (rev (qreva y (Cons n Nil))).
Lemma candidate_401: forall (n : natural) (y : lst), @eq lst (Cons n y) (rev (lfappend (rev y) (Cons n Nil))).
Lemma candidate_402: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (rev (rev y))).
Lemma candidate_403: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (lfappend y Nil)).
Lemma candidate_404: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n y).
Lemma candidate_405: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (qreva (rev lf2) (lfappend y Nil)).
Lemma candidate_406: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (lfappend lf2 (rev (rev y))).
Lemma candidate_407: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (lfappend lf2 (lfappend y Nil)).
Lemma candidate_408: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (rev (qreva y (rev lf2))).
Lemma candidate_409: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (qreva (rev lf2) y).
Lemma candidate_410: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (lfappend lf2 y).
Lemma candidate_411: forall (x : lst), @eq lst (rev x) (lfappend (qreva x Nil) Nil).
Lemma candidate_412: forall (x : lst), @eq lst (rev x) (rev (rev (rev x))).
Lemma candidate_413: forall (x : lst), @eq lst (rev x) (rev (lfappend x Nil)).
Lemma candidate_414: forall (x : lst), @eq lst (rev x) (lfappend (rev x) Nil).
Lemma candidate_415: forall (x : lst), @eq lst (rev x) (qreva x Nil).
Lemma candidate_416: forall (x : lst), @eq lst (rev x) (rev x).
Lemma candidate_417: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y))   (lfappend (lfappend (lfappend lf6 Nil) (Cons n Nil)) y).
Lemma candidate_418: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y))   (lfappend (qreva (qreva lf6 Nil) (Cons n Nil)) y).
Lemma candidate_419: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y))   (lfappend (lfappend (rev (qreva lf6 Nil)) (Cons n Nil)) y).
Lemma candidate_420: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend (qreva (rev lf6) (Cons n Nil)) y).
Lemma candidate_421: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma candidate_422: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y))   (lfappend (lfappend (rev (rev lf6)) (Cons n Nil)) y).
Lemma candidate_423: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend lf6 (Cons n (rev (rev y)))).
Lemma candidate_424: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend lf6 (Cons n (lfappend y Nil))).
Lemma candidate_425: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (rev (lfappend (rev y) (Cons n (rev lf6)))).
Lemma candidate_426: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (rev (qreva y (Cons n (rev lf6)))).
Lemma candidate_427: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (qreva (rev lf6) (Cons n y)).
Lemma candidate_428: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend lf6 (Cons n y)).
Lemma candidate_429: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (qreva (qreva lf4 (rev lf6)) y) (lfappend (lfappend lf6 lf4) y).
Lemma candidate_430: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 lf4) y) (lfappend (lfappend lf6 lf4) y).
Lemma candidate_431: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (qreva (rev lf6) (lfappend lf4 y)) (lfappend (lfappend lf6 lf4) y).
Lemma candidate_432: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (qreva (rev lf6) (qreva lf4 y)) (lfappend (lfappend lf6 lf4) y).
Lemma candidate_433: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 (lfappend lf4 y)) (lfappend (lfappend lf6 lf4) y).
Lemma candidate_434: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 (qreva lf4 y)) (lfappend (lfappend lf6 lf4) y).
Lemma candidate_435: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 (rev (qreva y (rev lf4))))   (lfappend (lfappend lf6 lf4) y).
Lemma candidate_436: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 (rev (qreva y lf4))) (lfappend (lfappend lf6 lf4) y).
Lemma candidate_437: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 (lfappend (rev lf4) y)) (lfappend (lfappend lf6 lf4) y).
Lemma candidate_438: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 (qreva (rev lf4) y)) (lfappend (lfappend lf6 lf4) y).
Lemma candidate_439: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 (lfappend lf4 y)) (lfappend (lfappend lf6 lf4) y).
Lemma candidate_440: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 (qreva lf4 y)) (lfappend (lfappend lf6 lf4) y).
Lemma candidate_441: forall (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf4) (qreva (rev lf6) (rev lf4)).
Lemma candidate_442: forall (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf4) (rev (lfappend lf4 (rev lf6))).
Lemma candidate_443: forall (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf4) (rev (qreva lf4 (rev lf6))).
Lemma candidate_444: forall (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf4) (qreva (rev lf6) lf4).
Lemma candidate_445: forall (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf4) (lfappend lf6 (rev lf4)).
Lemma candidate_446: forall (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf4) (lfappend lf6 lf4).
Lemma candidate_447: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 lf4) y) (qreva (qreva lf4 (rev lf6)) y).
Lemma candidate_448: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 lf4) y) (lfappend (lfappend lf6 lf4) y).
Lemma candidate_449: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 lf4) y) (qreva (rev lf6) (lfappend lf4 y)).
Lemma candidate_450: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 lf4) y) (qreva (rev lf6) (qreva lf4 y)).
Lemma candidate_451: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 lf4) y) (lfappend lf6 (lfappend lf4 y)).
Lemma candidate_452: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 lf4) y) (lfappend lf6 (qreva lf4 y)).
Lemma candidate_453: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend lf6 (Cons n (rev (rev y)))).
Lemma candidate_454: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend lf6 (Cons n (lfappend y Nil))).
Lemma candidate_455: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (rev (lfappend (rev y) (Cons n (rev lf6)))).
Lemma candidate_456: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (rev (qreva y (Cons n (rev lf6)))).
Lemma candidate_457: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (qreva (rev lf6) (Cons n y)).
Lemma candidate_458: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend lf6 (Cons n y)).
Lemma candidate_459: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (qreva (rev y) Nil)).
Lemma candidate_460: forall (n : natural) (y : lst), @eq lst (Cons n y) (rev (qreva y (Cons n Nil))).
Lemma candidate_461: forall (n : natural) (y : lst), @eq lst (Cons n y) (rev (lfappend (rev y) (Cons n Nil))).
Lemma candidate_462: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (rev (rev y))).
Lemma candidate_463: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (lfappend y Nil)).
Lemma candidate_464: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n y).
Lemma candidate_465: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y))   (lfappend (qreva (lfappend x Nil) (Cons n Nil)) y).
Lemma candidate_466: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y))   (lfappend (lfappend (qreva x Nil) (Cons n Nil)) y).
Lemma candidate_467: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y))   (lfappend (lfappend (rev (rev (rev x))) (Cons n Nil)) y).
Lemma candidate_468: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y))   (lfappend (lfappend (rev (lfappend x Nil)) (Cons n Nil)) y).
Lemma candidate_469: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (lfappend (qreva x (Cons n Nil)) y).
Lemma candidate_470: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y))   (lfappend (lfappend (rev x) (Cons n Nil)) y).
Lemma candidate_471: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (qreva (lfappend lf4 x) y) (lfappend (lfappend (rev x) lf4) y).
Lemma candidate_472: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (qreva (qreva lf4 x) y) (lfappend (lfappend (rev x) lf4) y).
Lemma candidate_473: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) (lfappend lf4 y))   (lfappend (lfappend (rev x) lf4) y).
Lemma candidate_474: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) (qreva lf4 y)) (lfappend (lfappend (rev x) lf4) y).
Lemma candidate_475: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (qreva x (lfappend lf4 y)) (lfappend (lfappend (rev x) lf4) y).
Lemma candidate_476: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (qreva x (qreva lf4 y)) (lfappend (lfappend (rev x) lf4) y).
Lemma candidate_477: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (qreva x (Cons n (rev (rev y)))).
Lemma candidate_478: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (qreva x (Cons n (lfappend y Nil))).
Lemma candidate_479: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (rev (lfappend (rev y) (Cons n x))).
Lemma candidate_480: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (rev (qreva y (Cons n x))).
Lemma candidate_481: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (lfappend (rev x) (Cons n y)).
Lemma candidate_482: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (qreva x (Cons n y)).
Lemma candidate_483: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) (rev (qreva y (rev lf4))))   (lfappend (lfappend (rev x) lf4) y).
Lemma candidate_484: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) (rev (qreva y lf4)))   (lfappend (lfappend (rev x) lf4) y).
Lemma candidate_485: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) (lfappend (rev lf4) y))   (lfappend (lfappend (rev x) lf4) y).
Lemma candidate_486: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) (qreva (rev lf4) y))   (lfappend (lfappend (rev x) lf4) y).
Lemma candidate_487: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) (lfappend lf4 y))   (lfappend (lfappend (rev x) lf4) y).
Lemma candidate_488: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) (qreva lf4 y)) (lfappend (lfappend (rev x) lf4) y).
Lemma candidate_489: forall (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) lf4) (lfappend (rev x) (rev lf4)).
Lemma candidate_490: forall (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) lf4) (rev (lfappend lf4 x)).
Lemma candidate_491: forall (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) lf4) (rev (qreva lf4 x)).
Lemma candidate_492: forall (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) lf4) (lfappend (rev x) lf4).
Lemma candidate_493: forall (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) lf4) (qreva x (rev lf4)).
Lemma candidate_494: forall (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) lf4) (qreva x lf4).
Lemma candidate_495: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (qreva x (Cons n (rev (rev y)))).
Lemma candidate_496: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (qreva x (Cons n (lfappend y Nil))).
Lemma candidate_497: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (rev (lfappend (rev y) (Cons n x))).
Lemma candidate_498: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (rev (qreva y (Cons n x))).
Lemma candidate_499: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (lfappend (rev x) (Cons n y)).
Lemma candidate_500: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (qreva x (Cons n y)).
Lemma candidate_501: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) lf4) y) (qreva (lfappend lf4 x) y).
Lemma candidate_502: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) lf4) y) (qreva (qreva lf4 x) y).
Lemma candidate_503: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) lf4) y)   (lfappend (rev x) (lfappend lf4 y)).
Lemma candidate_504: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) lf4) y) (lfappend (rev x) (qreva lf4 y)).
Lemma candidate_505: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) lf4) y) (qreva x (lfappend lf4 y)).
Lemma candidate_506: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) lf4) y) (qreva x (qreva lf4 y)).
Lemma candidate_507: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (qreva (rev y) Nil)).
Lemma candidate_508: forall (n : natural) (y : lst), @eq lst (Cons n y) (rev (qreva y (Cons n Nil))).
Lemma candidate_509: forall (n : natural) (y : lst), @eq lst (Cons n y) (rev (lfappend (rev y) (Cons n Nil))).
Lemma candidate_510: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (rev (rev y))).
Lemma candidate_511: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (lfappend y Nil)).
Lemma candidate_512: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n y).
Lemma candidate_513: forall (x : lst), @eq lst (rev x) (lfappend (qreva x Nil) Nil).
Lemma candidate_514: forall (x : lst), @eq lst (rev x) (rev (rev (rev x))).
Lemma candidate_515: forall (x : lst), @eq lst (rev x) (rev (lfappend x Nil)).
Lemma candidate_516: forall (x : lst), @eq lst (rev x) (lfappend (rev x) Nil).
Lemma candidate_517: forall (x : lst), @eq lst (rev x) (qreva x Nil).
Lemma candidate_518: forall (x : lst), @eq lst (rev x) (rev x).
Lemma candidate_519: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (qreva (rev lf6) (lfappend lf5 Nil)).
Lemma candidate_520: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 (rev (rev lf5))).
Lemma candidate_521: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 (lfappend lf5 Nil)).
Lemma candidate_522: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (rev (qreva lf5 (rev lf6))).
Lemma candidate_523: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (qreva (rev lf6) lf5).
Lemma candidate_524: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 lf5).
Lemma candidate_525: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (qreva lf7 (lfappend lf6 (Cons n y)))   (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma candidate_526: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n (lfappend y Nil)))   (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma candidate_527: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (rev (lfappend (rev y) (Cons n (rev lf6))))   (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma candidate_528: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (rev (qreva y (Cons n (rev lf6))))   (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma candidate_529: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (qreva (rev lf6) (Cons n y)) (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma candidate_530: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma candidate_531: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n lf7)) y)   (qreva lf7 (lfappend lf6 (Cons n y))).
Lemma candidate_532: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n lf7)) y)   (lfappend lf6 (Cons n (lfappend y Nil))).
Lemma candidate_533: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n lf7)) y)   (rev (lfappend (rev y) (Cons n (rev lf6)))).
Lemma candidate_534: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n lf7)) y)   (rev (qreva y (Cons n (rev lf6)))).
Lemma candidate_535: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n lf7)) y) (qreva (rev lf6) (Cons n y)).
Lemma candidate_536: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n lf7)) y) (lfappend lf6 (Cons n y)).
Lemma candidate_537: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (qreva (rev lf6) (lfappend lf5 Nil)).
Lemma candidate_538: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 (rev (rev lf5))).
Lemma candidate_539: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 (lfappend lf5 Nil)).
Lemma candidate_540: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (rev (qreva lf5 (rev lf6))).
Lemma candidate_541: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (qreva (rev lf6) lf5).
Lemma candidate_542: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 lf5).
Lemma candidate_543: forall (lf7 : lst) (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n lf7)) (qreva (rev lf6) (Cons n lf7)).
Lemma candidate_544: forall (lf7 : lst) (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n lf7)) (qreva (rev lf6) (Cons n Nil)).
Lemma candidate_545: forall (lf7 : lst) (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n lf7)) (lfappend lf6 (Cons n (rev lf7))).
Lemma candidate_546: forall (lf7 : lst) (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n lf7)) (lfappend lf6 (Cons n lf7)).
Lemma candidate_547: forall (lf7 : lst) (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n lf7)) (lfappend lf6 (Cons n Nil)).
Lemma candidate_548: forall (lf7 : lst) (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n lf7)) (lfappend (rev (rev lf6)) (Cons n Nil)).
Lemma candidate_549: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (qreva lf7 (Cons n Nil)).
Lemma candidate_550: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (lfappend (rev (rev lf7)) (Cons n Nil)).
Lemma candidate_551: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (lfappend (rev lf7) (Cons n Nil)).
Lemma candidate_552: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (Cons n (rev lf7)).
Lemma candidate_553: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (Cons n lf7).
Lemma candidate_554: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (Cons n Nil).
Lemma candidate_555: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (lfappend (rev x) (lfappend lf5 Nil)).
Lemma candidate_556: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (qreva x (rev (rev lf5))).
Lemma candidate_557: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (qreva x (lfappend lf5 Nil)).
Lemma candidate_558: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (rev (qreva lf5 x)).
Lemma candidate_559: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (lfappend (rev x) lf5).
Lemma candidate_560: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (qreva x lf5).
Lemma candidate_561: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (qreva lf7 (qreva x (Cons n y)))   (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma candidate_562: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (qreva x (Cons n (lfappend y Nil)))   (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma candidate_563: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (rev y) (Cons n x)))   (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma candidate_564: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva y (Cons n x)))   (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma candidate_565: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y))   (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma candidate_566: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (qreva x (Cons n y)) (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma candidate_567: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n lf7)) y)   (qreva lf7 (qreva x (Cons n y))).
Lemma candidate_568: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n lf7)) y)   (qreva x (Cons n (lfappend y Nil))).
Lemma candidate_569: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n lf7)) y)   (rev (lfappend (rev y) (Cons n x))).
Lemma candidate_570: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n lf7)) y)   (rev (qreva y (Cons n x))).
Lemma candidate_571: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n lf7)) y)   (lfappend (rev x) (Cons n y)).
Lemma candidate_572: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n lf7)) y) (qreva x (Cons n y)).
Lemma candidate_573: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (lfappend (rev x) (lfappend lf5 Nil)).
Lemma candidate_574: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (qreva x (rev (rev lf5))).
Lemma candidate_575: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (qreva x (lfappend lf5 Nil)).
Lemma candidate_576: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (rev (qreva lf5 x)).
Lemma candidate_577: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (lfappend (rev x) lf5).
Lemma candidate_578: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (qreva x lf5).
Lemma candidate_579: forall (lf7 : lst) (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n lf7)) (lfappend (rev x) (Cons n (rev lf7))).
Lemma candidate_580: forall (lf7 : lst) (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n lf7)) (lfappend (rev x) (Cons n lf7)).
Lemma candidate_581: forall (lf7 : lst) (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n lf7)) (qreva x (Cons n (rev lf7))).
Lemma candidate_582: forall (lf7 : lst) (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n lf7)) (qreva x (Cons n lf7)).
Lemma candidate_583: forall (lf7 : lst) (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n lf7)) (qreva x (Cons n Nil)).
Lemma candidate_584: forall (lf7 : lst) (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n lf7)) (lfappend (rev x) (Cons n Nil)).
Lemma candidate_585: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (qreva lf7 (Cons n Nil)).
Lemma candidate_586: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (lfappend (rev (rev lf7)) (Cons n Nil)).
Lemma candidate_587: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (lfappend (rev lf7) (Cons n Nil)).
Lemma candidate_588: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (Cons n (rev lf7)).
Lemma candidate_589: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (Cons n lf7).
Lemma candidate_590: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (Cons n Nil).
Lemma candidate_591: forall (x : lst), @eq lst (rev x) (lfappend (qreva x Nil) Nil).
Lemma candidate_592: forall (x : lst), @eq lst (rev x) (rev (rev (rev x))).
Lemma candidate_593: forall (x : lst), @eq lst (rev x) (rev (lfappend x Nil)).
Lemma candidate_594: forall (x : lst), @eq lst (rev x) (lfappend (rev x) Nil).
Lemma candidate_595: forall (x : lst), @eq lst (rev x) (qreva x Nil).
Lemma candidate_596: forall (x : lst), @eq lst (rev x) (rev x).
Lemma candidate_597: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend lf6 (Cons n (rev (rev y)))).
Lemma candidate_598: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend lf6 (Cons n (lfappend y Nil))).
Lemma candidate_599: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (rev (lfappend (rev y) (Cons n (rev lf6)))).
Lemma candidate_600: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (rev (qreva y (Cons n (rev lf6)))).
Lemma candidate_601: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (qreva (rev lf6) (Cons n y)).
Lemma candidate_602: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend lf6 (Cons n y)).
Lemma candidate_603: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (qreva lf7 (lfappend lf6 (Cons n y)))   (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma candidate_604: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n (lfappend y Nil)))   (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma candidate_605: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (rev (lfappend (rev y) (Cons n (rev lf6))))   (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma candidate_606: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (rev (qreva y (Cons n (rev lf6))))   (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma candidate_607: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (qreva (rev lf6) (Cons n y)) (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma candidate_608: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma candidate_609: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y))   (lfappend (lfappend (lfappend lf6 Nil) (Cons n Nil)) y).
Lemma candidate_610: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y))   (lfappend (qreva (qreva lf6 Nil) (Cons n Nil)) y).
Lemma candidate_611: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y))   (lfappend (lfappend (rev (qreva lf6 Nil)) (Cons n Nil)) y).
Lemma candidate_612: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend (qreva (rev lf6) (Cons n Nil)) y).
Lemma candidate_613: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma candidate_614: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y))   (lfappend (lfappend (rev (rev lf6)) (Cons n Nil)) y).
Lemma candidate_615: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n (lfappend lf7 y)))   (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma candidate_616: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n (qreva lf7 y)))   (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma candidate_617: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (lfappend lf7 (Cons n y)))   (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma candidate_618: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (qreva lf7 (Cons n y)))   (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma candidate_619: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n (lfappend y Nil)))   (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma candidate_620: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma candidate_621: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma candidate_622: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n lf7)) y)   (qreva lf7 (lfappend lf6 (Cons n y))).
Lemma candidate_623: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n lf7)) y)   (lfappend lf6 (Cons n (lfappend y Nil))).
Lemma candidate_624: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n lf7)) y)   (rev (lfappend (rev y) (Cons n (rev lf6)))).
Lemma candidate_625: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n lf7)) y)   (rev (qreva y (Cons n (rev lf6)))).
Lemma candidate_626: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n lf7)) y) (qreva (rev lf6) (Cons n y)).
Lemma candidate_627: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n lf7)) y) (lfappend lf6 (Cons n y)).
Lemma candidate_628: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend lf6 (Cons n (rev (rev y)))).
Lemma candidate_629: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend lf6 (Cons n (lfappend y Nil))).
Lemma candidate_630: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (rev (lfappend (rev y) (Cons n (rev lf6)))).
Lemma candidate_631: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (rev (qreva y (Cons n (rev lf6)))).
Lemma candidate_632: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (qreva (rev lf6) (Cons n y)).
Lemma candidate_633: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend lf6 (Cons n y)).
Lemma candidate_634: forall (lf7 : lst) (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n lf7)) (qreva (rev lf6) (Cons n lf7)).
Lemma candidate_635: forall (lf7 : lst) (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n lf7)) (qreva (rev lf6) (Cons n Nil)).
Lemma candidate_636: forall (lf7 : lst) (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n lf7)) (lfappend lf6 (Cons n (rev lf7))).
Lemma candidate_637: forall (lf7 : lst) (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n lf7)) (lfappend lf6 (Cons n lf7)).
Lemma candidate_638: forall (lf7 : lst) (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n lf7)) (lfappend lf6 (Cons n Nil)).
Lemma candidate_639: forall (lf7 : lst) (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n lf7)) (lfappend (rev (rev lf6)) (Cons n Nil)).
Lemma candidate_640: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (qreva (rev y) Nil)).
Lemma candidate_641: forall (n : natural) (y : lst), @eq lst (Cons n y) (rev (qreva y (Cons n Nil))).
Lemma candidate_642: forall (n : natural) (y : lst), @eq lst (Cons n y) (rev (lfappend (rev y) (Cons n Nil))).
Lemma candidate_643: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (rev (rev y))).
Lemma candidate_644: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (lfappend y Nil)).
Lemma candidate_645: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n y).
Lemma candidate_646: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (qreva lf7 (Cons n Nil)).
Lemma candidate_647: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (lfappend (rev (rev lf7)) (Cons n Nil)).
Lemma candidate_648: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (lfappend (rev lf7) (Cons n Nil)).
Lemma candidate_649: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (Cons n (rev lf7)).
Lemma candidate_650: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (Cons n lf7).
Lemma candidate_651: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (Cons n Nil).
Lemma candidate_652: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (qreva x (Cons n (rev (rev y)))).
Lemma candidate_653: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (qreva x (Cons n (lfappend y Nil))).
Lemma candidate_654: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (rev (lfappend (rev y) (Cons n x))).
Lemma candidate_655: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (rev (qreva y (Cons n x))).
Lemma candidate_656: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (lfappend (rev x) (Cons n y)).
Lemma candidate_657: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (qreva x (Cons n y)).
Lemma candidate_658: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (qreva lf7 (qreva x (Cons n y)))   (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma candidate_659: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (qreva x (Cons n (lfappend y Nil)))   (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma candidate_660: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (rev y) (Cons n x)))   (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma candidate_661: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva y (Cons n x)))   (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma candidate_662: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y))   (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma candidate_663: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (qreva x (Cons n y)) (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma candidate_664: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y))   (lfappend (qreva (lfappend x Nil) (Cons n Nil)) y).
Lemma candidate_665: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y))   (lfappend (lfappend (qreva x Nil) (Cons n Nil)) y).
Lemma candidate_666: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y))   (lfappend (lfappend (rev (rev (rev x))) (Cons n Nil)) y).
Lemma candidate_667: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y))   (lfappend (lfappend (rev (lfappend x Nil)) (Cons n Nil)) y).
Lemma candidate_668: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (lfappend (qreva x (Cons n Nil)) y).
Lemma candidate_669: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y))   (lfappend (lfappend (rev x) (Cons n Nil)) y).
Lemma candidate_670: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n (lfappend lf7 y)))   (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma candidate_671: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n (qreva lf7 y)))   (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma candidate_672: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (lfappend lf7 (Cons n y)))   (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma candidate_673: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (qreva lf7 (Cons n y)))   (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma candidate_674: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n (lfappend y Nil)))   (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma candidate_675: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y))   (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma candidate_676: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y))   (lfappend (lfappend (rev x) (Cons n Nil)) y).
Lemma candidate_677: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n lf7)) y)   (qreva lf7 (qreva x (Cons n y))).
Lemma candidate_678: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n lf7)) y)   (qreva x (Cons n (lfappend y Nil))).
Lemma candidate_679: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n lf7)) y)   (rev (lfappend (rev y) (Cons n x))).
Lemma candidate_680: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n lf7)) y)   (rev (qreva y (Cons n x))).
Lemma candidate_681: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n lf7)) y)   (lfappend (rev x) (Cons n y)).
Lemma candidate_682: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n lf7)) y) (qreva x (Cons n y)).
Lemma candidate_683: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (qreva x (Cons n (rev (rev y)))).
Lemma candidate_684: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (qreva x (Cons n (lfappend y Nil))).
Lemma candidate_685: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (rev (lfappend (rev y) (Cons n x))).
Lemma candidate_686: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (rev (qreva y (Cons n x))).
Lemma candidate_687: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (lfappend (rev x) (Cons n y)).
Lemma candidate_688: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (qreva x (Cons n y)).
Lemma candidate_689: forall (lf7 : lst) (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n lf7)) (lfappend (rev x) (Cons n (rev lf7))).
Lemma candidate_690: forall (lf7 : lst) (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n lf7)) (lfappend (rev x) (Cons n lf7)).
Lemma candidate_691: forall (lf7 : lst) (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n lf7)) (qreva x (Cons n (rev lf7))).
Lemma candidate_692: forall (lf7 : lst) (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n lf7)) (qreva x (Cons n lf7)).
Lemma candidate_693: forall (lf7 : lst) (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n lf7)) (qreva x (Cons n Nil)).
Lemma candidate_694: forall (lf7 : lst) (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n lf7)) (lfappend (rev x) (Cons n Nil)).
Lemma candidate_695: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (qreva (rev y) Nil)).
Lemma candidate_696: forall (n : natural) (y : lst), @eq lst (Cons n y) (rev (qreva y (Cons n Nil))).
Lemma candidate_697: forall (n : natural) (y : lst), @eq lst (Cons n y) (rev (lfappend (rev y) (Cons n Nil))).
Lemma candidate_698: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (rev (rev y))).
Lemma candidate_699: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (lfappend y Nil)).
Lemma candidate_700: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n y).
Lemma candidate_701: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (qreva lf7 (Cons n Nil)).
Lemma candidate_702: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (lfappend (rev (rev lf7)) (Cons n Nil)).
Lemma candidate_703: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (lfappend (rev lf7) (Cons n Nil)).
Lemma candidate_704: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (Cons n (rev lf7)).
Lemma candidate_705: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (Cons n lf7).
Lemma candidate_706: forall (lf7 : lst) (n : natural), @eq lst (Cons n lf7) (Cons n Nil).
Lemma candidate_707: forall (x : lst), @eq lst (rev x) (lfappend (qreva x Nil) Nil).
Lemma candidate_708: forall (x : lst), @eq lst (rev x) (rev (rev (rev x))).
Lemma candidate_709: forall (x : lst), @eq lst (rev x) (rev (lfappend x Nil)).
Lemma candidate_710: forall (x : lst), @eq lst (rev x) (lfappend (rev x) Nil).
Lemma candidate_711: forall (x : lst), @eq lst (rev x) (qreva x Nil).
Lemma candidate_712: forall (x : lst), @eq lst (rev x) (rev x).
Lemma candidate_713: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n (rev (rev y))))   (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma candidate_714: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n (lfappend y Nil)))   (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma candidate_715: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (rev (lfappend (rev y) (Cons n (rev lf6))))   (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma candidate_716: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (rev (qreva y (Cons n (rev lf6))))   (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma candidate_717: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (qreva (rev lf6) (Cons n y)) (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma candidate_718: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma candidate_719: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (qreva (rev lf6) (lfappend lf5 Nil)).
Lemma candidate_720: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 (rev (rev lf5))).
Lemma candidate_721: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 (lfappend lf5 Nil)).
Lemma candidate_722: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (rev (qreva lf5 (rev lf6))).
Lemma candidate_723: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (qreva (rev lf6) lf5).
Lemma candidate_724: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 lf5).
Lemma candidate_725: forall (n : natural) (y : lst) (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend (lfappend lf6 (Cons n (Nil))) y).
Lemma candidate_726: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (qreva (rev lf6) (lfappend lf5 Nil)).
Lemma candidate_727: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 (rev (rev lf5))).
Lemma candidate_728: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 (lfappend lf5 Nil)).
Lemma candidate_729: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (rev (qreva lf5 (rev lf6))).
Lemma candidate_730: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (qreva (rev lf6) lf5).
Lemma candidate_731: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 lf5).
Lemma candidate_732: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n Nil)) y)   (lfappend lf6 (Cons n (rev (rev y)))).
Lemma candidate_733: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n Nil)) y)   (lfappend lf6 (Cons n (lfappend y Nil))).
Lemma candidate_734: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n Nil)) y)   (rev (lfappend (rev y) (Cons n (rev lf6)))).
Lemma candidate_735: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n Nil)) y)   (rev (qreva y (Cons n (rev lf6)))).
Lemma candidate_736: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n Nil)) y) (qreva (rev lf6) (Cons n y)).
Lemma candidate_737: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n Nil)) y) (lfappend lf6 (Cons n y)).
Lemma candidate_738: forall (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n Nil))   (lfappend (lfappend lf6 Nil) (Cons n Nil)).
Lemma candidate_739: forall (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n Nil)) (qreva (qreva lf6 Nil) (Cons n Nil)).
Lemma candidate_740: forall (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n Nil))   (lfappend (rev (qreva lf6 Nil)) (Cons n Nil)).
Lemma candidate_741: forall (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n Nil)) (qreva (rev lf6) (Cons n Nil)).
Lemma candidate_742: forall (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n Nil)) (lfappend lf6 (Cons n Nil)).
Lemma candidate_743: forall (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n Nil)) (lfappend (rev (rev lf6)) (Cons n Nil)).
Lemma candidate_744: forall (n : natural), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_745: @eq lst Nil (Nil).
Lemma candidate_746: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (lfappend (rev x) (lfappend lf5 Nil)).
Lemma candidate_747: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (qreva x (rev (rev lf5))).
Lemma candidate_748: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (qreva x (lfappend lf5 Nil)).
Lemma candidate_749: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (rev (qreva lf5 x)).
Lemma candidate_750: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (lfappend (rev x) lf5).
Lemma candidate_751: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (qreva x lf5).
Lemma candidate_752: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva x (Cons n (rev (rev y))))   (lfappend (lfappend (rev x) (Cons n Nil)) y).
Lemma candidate_753: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva x (Cons n (lfappend y Nil)))   (lfappend (lfappend (rev x) (Cons n Nil)) y).
Lemma candidate_754: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (rev y) (Cons n x)))   (lfappend (lfappend (rev x) (Cons n Nil)) y).
Lemma candidate_755: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva y (Cons n x)))   (lfappend (lfappend (rev x) (Cons n Nil)) y).
Lemma candidate_756: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y))   (lfappend (lfappend (rev x) (Cons n Nil)) y).
Lemma candidate_757: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva x (Cons n y)) (lfappend (lfappend (rev x) (Cons n Nil)) y).
Lemma candidate_758: forall (n : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (lfappend (lfappend (rev x) (Cons n (Nil))) y).
Lemma candidate_759: forall (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n Nil)) (qreva (lfappend x Nil) (Cons n Nil)).
Lemma candidate_760: forall (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n Nil)) (lfappend (qreva x Nil) (Cons n Nil)).
Lemma candidate_761: forall (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n Nil))   (lfappend (rev (rev (rev x))) (Cons n Nil)).
Lemma candidate_762: forall (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n Nil))   (lfappend (rev (lfappend x Nil)) (Cons n Nil)).
Lemma candidate_763: forall (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n Nil)) (qreva x (Cons n Nil)).
Lemma candidate_764: forall (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n Nil)) (lfappend (rev x) (Cons n Nil)).
Lemma candidate_765: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n Nil)) y)   (qreva x (Cons n (rev (rev y)))).
Lemma candidate_766: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n Nil)) y)   (qreva x (Cons n (lfappend y Nil))).
Lemma candidate_767: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n Nil)) y)   (rev (lfappend (rev y) (Cons n x))).
Lemma candidate_768: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n Nil)) y)   (rev (qreva y (Cons n x))).
Lemma candidate_769: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n Nil)) y)   (lfappend (rev x) (Cons n y)).
Lemma candidate_770: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n Nil)) y) (qreva x (Cons n y)).
Lemma candidate_771: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (lfappend (rev x) (lfappend lf5 Nil)).
Lemma candidate_772: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (qreva x (rev (rev lf5))).
Lemma candidate_773: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (qreva x (lfappend lf5 Nil)).
Lemma candidate_774: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (rev (qreva lf5 x)).
Lemma candidate_775: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (lfappend (rev x) lf5).
Lemma candidate_776: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (qreva x lf5).
Lemma candidate_777: forall (n : natural), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_778: @eq lst Nil (Nil).
Lemma candidate_779: forall (x : lst), @eq lst (rev x) (lfappend (qreva x Nil) Nil).
Lemma candidate_780: forall (x : lst), @eq lst (rev x) (rev (rev (rev x))).
Lemma candidate_781: forall (x : lst), @eq lst (rev x) (rev (lfappend x Nil)).
Lemma candidate_782: forall (x : lst), @eq lst (rev x) (lfappend (rev x) Nil).
Lemma candidate_783: forall (x : lst), @eq lst (rev x) (qreva x Nil).
Lemma candidate_784: forall (x : lst), @eq lst (rev x) (rev x).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 5392 seconds
Duplicates removed: 580
Filtered by Quickchick: 68
Filtered by script: 24
Remaining: 112

Lemmas: 
Lemma candidate_162: forall (lf1 : lst), @eq lst (rev (rev lf1)) lf1.
Lemma candidate_6: forall (lf3 : lst), @eq lst lf3 (rev (rev lf3)).
Lemma candidate_55: forall (x : lst), @eq lst (rev x) (qreva x Nil).
Lemma candidate_163: forall (lf1 : lst), @eq lst (lfappend lf1 Nil) lf1.
Lemma candidate_7: forall (lf3 : lst), @eq lst lf3 (lfappend lf3 Nil).
Lemma candidate_161: forall (lf1 : lst), @eq lst (qreva (rev lf1) Nil) lf1.
Lemma candidate_160: forall (lf1 : lst), @eq lst (rev (qreva lf1 Nil)) lf1.
Lemma candidate_5: forall (lf3 : lst), @eq lst lf3 (qreva (rev lf3) Nil).
Lemma candidate_4: forall (lf3 : lst), @eq lst lf3 (rev (qreva lf3 Nil)).
Lemma candidate_52: forall (x : lst), @eq lst (rev x) (rev (rev (rev x))).
Lemma candidate_54: forall (x : lst), @eq lst (rev x) (lfappend (rev x) Nil).
Lemma candidate_53: forall (x : lst), @eq lst (rev x) (rev (lfappend x Nil)).
Lemma candidate_159: forall (lf1 : lst), @eq lst (qreva (qreva lf1 Nil) Nil) lf1.
Lemma candidate_3: forall (lf3 : lst), @eq lst lf3 (qreva (qreva lf3 Nil) Nil).
Lemma candidate_204: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (rev (rev y))).
Lemma candidate_235: forall (y : lst) (lf2 : lst), @eq lst (qreva (rev lf2) y) (lfappend lf2 y).
Lemma candidate_205: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (lfappend y Nil)).
Lemma candidate_51: forall (x : lst), @eq lst (rev x) (lfappend (qreva x Nil) Nil).
Lemma candidate_13: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (qreva (rev lf2) y).
Lemma candidate_202: forall (n : natural) (y : lst), @eq lst (Cons n y) (rev (qreva y (Cons n Nil))).
Lemma candidate_201: forall (n : natural) (y : lst), @eq lst (Cons n y) (Cons n (qreva (rev y) Nil)).
Lemma candidate_169: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (qreva (rev lf6) lf5).
Lemma candidate_24: forall (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf4) (qreva (rev lf6) lf4).
Lemma candidate_234: forall (y : lst) (lf2 : lst), @eq lst (rev (qreva y (rev lf2))) (lfappend lf2 y).
Lemma candidate_180: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (rev (qreva lf5 x)).
Lemma candidate_41: forall (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) lf4) (rev (qreva lf4 x)).
Lemma candidate_12: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (rev (qreva y (rev lf2))).
Lemma candidate_232: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 (rev (rev y))) (lfappend lf2 y).
Lemma candidate_10: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (lfappend lf2 (rev (rev y))).
Lemma candidate_168: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (rev (qreva lf5 (rev lf6))).
Lemma candidate_23: forall (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf4) (rev (qreva lf4 (rev lf6))).
Lemma candidate_233: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 (lfappend y Nil)) (lfappend lf2 y).
Lemma candidate_203: forall (n : natural) (y : lst), @eq lst (Cons n y) (rev (lfappend (rev y) (Cons n Nil))).
Lemma candidate_178: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (qreva x (rev (rev lf5))).
Lemma candidate_11: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (lfappend lf2 (lfappend y Nil)).
Lemma candidate_166: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 (rev (rev lf5))).
Lemma candidate_231: forall (y : lst) (lf2 : lst), @eq lst (qreva (rev lf2) (lfappend y Nil)) (lfappend lf2 y).
Lemma candidate_179: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (qreva x (lfappend lf5 Nil)).
Lemma candidate_9: forall (y : lst) (lf2 : lst), @eq lst (lfappend lf2 y) (qreva (rev lf2) (lfappend y Nil)).
Lemma candidate_167: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 (lfappend lf5 Nil)).
Lemma candidate_199: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (qreva (rev lf6) (Cons n y)).
Lemma candidate_165: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (qreva (rev lf6) (lfappend lf5 Nil)).
Lemma candidate_216: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (rev (qreva y (Cons n x))).
Lemma candidate_127: forall (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n Nil)) (qreva (rev lf6) (Cons n Nil)).
Lemma candidate_69: forall (lf7 : lst) (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n lf7)) (qreva (rev lf6) (Cons n lf7)).
Lemma candidate_316: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (qreva (qreva lf4 x) y) (lfappend (lfappend (rev x) lf4) y).
Lemma candidate_46: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) lf4) y) (qreva (qreva lf4 x) y).
Lemma candidate_198: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (rev (qreva y (Cons n (rev lf6)))).
Lemma candidate_177: forall (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf5) (lfappend (rev x) (lfappend lf5 Nil)).
Lemma candidate_319: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (qreva x (lfappend lf4 y)) (lfappend (lfappend (rev x) lf4) y).
Lemma candidate_213: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (qreva x (Cons n (rev (rev y)))).
Lemma candidate_49: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) lf4) y) (qreva x (lfappend lf4 y)).
Lemma candidate_295: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 (lfappend lf4 y)) (lfappend (lfappend lf6 lf4) y).
Lemma candidate_291: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (qreva (qreva lf4 (rev lf6)) y) (lfappend (lfappend lf6 lf4) y).
Lemma candidate_195: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend lf6 (Cons n (rev (rev y)))).
Lemma candidate_31: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 lf4) y) (lfappend lf6 (lfappend lf4 y)).
Lemma candidate_27: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 lf4) y) (qreva (qreva lf4 (rev lf6)) y).
Lemma candidate_125: forall (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n Nil)) (qreva (qreva lf6 Nil) (Cons n Nil)).
Lemma candidate_757: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva x (Cons n y)) (lfappend (lfappend (rev x) (Cons n Nil)) y).
Lemma candidate_469: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (lfappend (qreva x (Cons n Nil)) y).
Lemma candidate_215: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (rev (lfappend (rev y) (Cons n x))).
Lemma candidate_214: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y)) (qreva x (Cons n (lfappend y Nil))).
Lemma candidate_150: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n Nil)) y) (qreva x (Cons n y)).
Lemma candidate_438: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 (qreva (rev lf4) y)) (lfappend (lfappend lf6 lf4) y).
Lemma candidate_293: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (qreva (rev lf6) (lfappend lf4 y)) (lfappend (lfappend lf6 lf4) y).
Lemma candidate_196: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend lf6 (Cons n (lfappend y Nil))).
Lemma candidate_123: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n Nil)) y) (lfappend lf6 (Cons n y)).
Lemma candidate_29: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 lf4) y) (qreva (rev lf6) (lfappend lf4 y)).
Lemma candidate_2: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma candidate_129: forall (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n Nil)) (lfappend (rev (rev lf6)) (Cons n Nil)).
Lemma candidate_717: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (qreva (rev lf6) (Cons n y)) (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma candidate_420: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (lfappend (qreva (rev lf6) (Cons n Nil)) y).
Lemma candidate_197: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y)) (rev (lfappend (rev y) (Cons n (rev lf6)))).
Lemma candidate_140: forall (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n Nil)) (lfappend (qreva x Nil) (Cons n Nil)).
Lemma candidate_139: forall (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n Nil)) (qreva (lfappend x Nil) (Cons n Nil)).
Lemma candidate_122: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n Nil)) y) (qreva (rev lf6) (Cons n y)).
Lemma candidate_124: forall (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n Nil))   (lfappend (lfappend lf6 Nil) (Cons n Nil)).
Lemma candidate_755: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva y (Cons n x)))   (lfappend (lfappend (rev x) (Cons n Nil)) y).
Lemma candidate_317: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) (lfappend lf4 y))   (lfappend (lfappend (rev x) lf4) y).
Lemma candidate_148: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n Nil)) y)   (rev (qreva y (Cons n x))).
Lemma candidate_47: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) lf4) y)   (lfappend (rev x) (lfappend lf4 y)).
Lemma candidate_435: forall (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 (rev (qreva y (rev lf4))))   (lfappend (lfappend lf6 lf4) y).
Lemma candidate_126: forall (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n Nil))   (lfappend (rev (qreva lf6 Nil)) (Cons n Nil)).
Lemma candidate_486: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) (qreva (rev lf4) y))   (lfappend (lfappend (rev x) lf4) y).
Lemma candidate_149: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n Nil)) y)   (lfappend (rev x) (Cons n y)).
Lemma candidate_716: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (rev (qreva y (Cons n (rev lf6))))   (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma candidate_418: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y))   (lfappend (qreva (qreva lf6 Nil) (Cons n Nil)) y).
Lemma candidate_141: forall (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n Nil))   (lfappend (rev (rev (rev x))) (Cons n Nil)).
Lemma candidate_121: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n Nil)) y)   (rev (qreva y (Cons n (rev lf6)))).
Lemma candidate_752: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva x (Cons n (rev (rev y))))   (lfappend (lfappend (rev x) (Cons n Nil)) y).
Lemma candidate_145: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n Nil)) y)   (qreva x (Cons n (rev (rev y)))).
Lemma candidate_713: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n (rev (rev y))))   (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma candidate_422: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y))   (lfappend (lfappend (rev (rev lf6)) (Cons n Nil)) y).
Lemma candidate_142: forall (n : natural) (x : lst), @eq lst (lfappend (rev x) (Cons n Nil))   (lfappend (rev (lfappend x Nil)) (Cons n Nil)).
Lemma candidate_118: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n Nil)) y)   (lfappend lf6 (Cons n (rev (rev y)))).
Lemma candidate_754: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (rev y) (Cons n x)))   (lfappend (lfappend (rev x) (Cons n Nil)) y).
Lemma candidate_753: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva x (Cons n (lfappend y Nil)))   (lfappend (lfappend (rev x) (Cons n Nil)) y).
Lemma candidate_483: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (rev x) (rev (qreva y (rev lf4))))   (lfappend (lfappend (rev x) lf4) y).
Lemma candidate_466: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y))   (lfappend (lfappend (qreva x Nil) (Cons n Nil)) y).
Lemma candidate_465: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y))   (lfappend (qreva (lfappend x Nil) (Cons n Nil)) y).
Lemma candidate_147: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n Nil)) y)   (rev (lfappend (rev y) (Cons n x))).
Lemma candidate_146: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev x) (Cons n Nil)) y)   (qreva x (Cons n (lfappend y Nil))).
Lemma candidate_714: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n (lfappend y Nil)))   (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma candidate_615: forall (lf7 : lst) (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n (lfappend lf7 y)))   (lfappend (lfappend lf6 (Cons n lf7)) y).
Lemma candidate_417: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y))   (lfappend (lfappend (lfappend lf6 Nil) (Cons n Nil)) y).
Lemma candidate_119: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n Nil)) y)   (lfappend lf6 (Cons n (lfappend y Nil))).
Lemma candidate_715: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (rev (lfappend (rev y) (Cons n (rev lf6))))   (lfappend (lfappend lf6 (Cons n Nil)) y).
Lemma candidate_419: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n y))   (lfappend (lfappend (rev (qreva lf6 Nil)) (Cons n Nil)) y).
Lemma candidate_120: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n Nil)) y)   (rev (lfappend (rev y) (Cons n (rev lf6)))).
Lemma candidate_467: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y))   (lfappend (lfappend (rev (rev (rev x))) (Cons n Nil)) y).
Lemma candidate_670: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n (lfappend lf7 y)))   (lfappend (lfappend (rev x) (Cons n lf7)) y).
Lemma candidate_468: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev x) (Cons n y))   (lfappend (lfappend (rev (lfappend x Nil)) (Cons n Nil)) y).