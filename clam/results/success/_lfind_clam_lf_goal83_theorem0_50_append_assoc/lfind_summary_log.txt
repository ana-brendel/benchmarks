LFind Results
LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal83_theorem0_50_append_assoc

Number of Lemmas: 1920
Number of Lemmas (after duplicates removed): 419
Number of Lemmas (after QuickChick used to filter): 142
* Number of Candidate Lemmas: 94

Time until ranking: 8795
Time to complete: 13363

Stuck state true independent of hypotheses: true

Category 1:
Count = 0


Category 2:
Count = 8

Lemma candidate_104: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5) (lfappend x (lfappend y lf5)).
Lemma candidate_304: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 x)).
Lemma candidate_100: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5)   (lfappend x (rotate (len lf5) (lfappend lf5 y))).
Lemma candidate_1273: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (rotate n (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1271: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n (rotate n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1645: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (lfappend (lfappend lf5 Nil) x)).
Lemma candidate_301: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (rotate (len x) (lfappend x lf5))).
Lemma candidate_335: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend lf8 x))).

Category 3 (provable):
Count = 24

Lemma candidate_77: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n Nil)).
Lemma candidate_415: forall (lf1 : lst), @eq lst lf1 (lfappend (lfappend lf1 Nil) Nil).
Lemma candidate_3: forall (lf3 : lst), @eq lst (lfappend (lfappend lf3 Nil) Nil) lf3.
Lemma candidate_414: forall (lf1 : lst), @eq lst lf1 (lfappend lf1 (rotate (len lf1) Nil)).
Lemma candidate_106: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) y).
Lemma candidate_74: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n (rotate n Nil))).
Lemma candidate_448: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (lfappend lf6 Nil)) (lfappend y lf6).
Lemma candidate_445: forall (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend y Nil) lf6) (lfappend y lf6).
Lemma candidate_424: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (lfappend lf6 Nil)).
Lemma candidate_422: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y lf6) Nil).
Lemma candidate_421: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y Nil) lf6).
Lemma candidate_30: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (lfappend lf4 (lfappend lf5 Nil)).
Lemma candidate_27: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (lfappend (lfappend lf4 lf5) Nil).
Lemma candidate_26: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (lfappend (lfappend lf4 Nil) lf5).
Lemma candidate_477: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_83: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (lfappend lf4 (Cons n (rotate n Nil))).
Lemma candidate_81: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil))   (lfappend (lfappend lf4 Nil) (Cons n Nil)).
Lemma candidate_475: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rotate n Nil) (lfappend y (Cons n x)))   (lfappend y (Cons n x)).
Lemma candidate_433: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (rotate n Nil) (lfappend y (Cons n x))).
Lemma candidate_82: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil))   (lfappend lf4 (rotate (len lf4) (Cons n Nil))).
Lemma candidate_166: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend (lfappend x y) (Cons n (rotate n Nil))).
Lemma candidate_275: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend lf4 (Cons n (rotate n Nil)))).
Lemma candidate_68: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (lfappend (rotate n Nil) (rotate lf7 (lfappend lf4 (Cons n Nil)))).
Lemma candidate_69: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (lfappend (rotate lf7 Nil) (rotate lf7 (lfappend lf4 (Cons n Nil)))).

Category 3 (not provable):
Count = 62

Lemma candidate_417: forall (lf1 : lst), @eq lst lf1 (rotate (len lf1) lf1).
Lemma candidate_5: forall (lf3 : lst), @eq lst (rotate (len lf3) lf3) lf3.
Lemma candidate_186: forall (x : lst), @eq natural (len x) (len (rotate (len x) x)).
Lemma candidate_78: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n Nil)).
Lemma candidate_441: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) x)).
Lemma candidate_2: forall (lf3 : lst), @eq lst (lfappend lf3 (rotate (len lf3) Nil)) lf3.
Lemma candidate_109: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend y Nil)).
Lemma candidate_107: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x y) Nil).
Lemma candidate_105: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (rotate (len y) y)).
Lemma candidate_440: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_76: forall (n : natural), @eq lst (Cons n Nil) (rotate n (rotate n (Cons n Nil))).
Lemma candidate_75: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n (rotate n Nil))).
Lemma candidate_444: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (rotate (len lf6) lf6)) (lfappend y lf6).
Lemma candidate_420: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (rotate (len lf6) lf6)).
Lemma candidate_11: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate (len lf2) (rotate lf7 lf2)).
Lemma candidate_9: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate lf7 (rotate (len lf2) lf2)).
Lemma candidate_193: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len x) (rotate (len lf2) lf2)).
Lemma candidate_192: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len lf2) (rotate (len x) lf2)).
Lemma candidate_8: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate lf7 (lfappend lf2 (rotate lf7 Nil))).
Lemma candidate_478: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (lfappend x Nil))) (lfappend y (Cons n x)).
Lemma candidate_436: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_435: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_84: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (lfappend lf4 (rotate n (Cons n Nil))).
Lemma candidate_102: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5)   (lfappend x (lfappend y (lfappend lf5 Nil))).
Lemma candidate_99: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5)   (lfappend (lfappend x y) (lfappend lf5 Nil)).
Lemma candidate_190: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2)   (rotate (len lf2) (rotate (len x) (lfappend lf2 Nil))).
Lemma candidate_303: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend (lfappend y lf5) x).
Lemma candidate_476: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n (lfappend x Nil)))   (lfappend y (Cons n x)).
Lemma candidate_434: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (lfappend y Nil) (Cons n (lfappend x Nil))).
Lemma candidate_170: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend x (lfappend y (Cons n Nil))).
Lemma candidate_127: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend x (lfappend y (Cons n lf8))).
Lemma candidate_23: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5))   (rotate lf7 (lfappend lf4 (lfappend lf5 Nil))).
Lemma candidate_1275: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend x (lfappend y (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_80: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil))   (lfappend (lfappend lf4 Nil) (rotate n (Cons n Nil))).
Lemma candidate_187: forall (x : lst), @eq natural (len x)   (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_94: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (rotate lf7 (lfappend x (lfappend y lf5))).
Lemma candidate_211: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (rotate (len x) (lfappend lf4 (lfappend lf5 Nil))).
Lemma candidate_168: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend (lfappend x y) (rotate n (Cons n Nil))).
Lemma candidate_1646: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (lfappend (lfappend lf5 x) Nil)).
Lemma candidate_302: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 (lfappend x Nil))).
Lemma candidate_300: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend (lfappend y lf5) (lfappend x Nil)).
Lemma candidate_299: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend (lfappend y Nil) (lfappend lf5 x)).
Lemma candidate_167: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend (lfappend x Nil) (lfappend y (Cons n Nil))).
Lemma candidate_1644: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 (rotate (len x) x))).
Lemma candidate_387: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_386: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_1272: forall (n : natural) (y : lst) (x : lst), @eq lst   (rotate (len x) (lfappend (lfappend x Nil) (lfappend y (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_72: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (rotate lf7 (lfappend (lfappend lf4 Nil) (Cons n Nil))).
Lemma candidate_1796: forall (n : natural) (y : lst) (x : lst), @eq lst   (rotate (len x) (lfappend (lfappend x y) (rotate (len x) (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1795: forall (n : natural) (y : lst) (x : lst), @eq lst   (rotate (len x) (lfappend (lfappend x y) (rotate (len y) (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1794: forall (n : natural) (y : lst) (x : lst), @eq lst   (rotate (len x) (lfappend (lfappend x y) (Cons n (rotate (len x) Nil))))   (lfappend y (Cons n x)).
Lemma candidate_185: forall (x : lst), @eq natural (len x)   (len match lfappend x Nil with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_276: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend lf4 (rotate n (Cons n Nil)))).
Lemma candidate_277: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend (lfappend lf4 Nil) (Cons n Nil))).
Lemma candidate_384: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend (rotate n Nil) (lfappend y (Cons n x))).
Lemma candidate_274: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend lf4 (rotate (len x) (Cons n Nil)))).
Lemma candidate_385: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend (lfappend y Nil) (Cons n (lfappend x Nil))).
Lemma candidate_71: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (match rotate lf7 (Cons n lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_278: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (match rotate (len x) (Cons n lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_165: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (match lfappend y (Cons n x) with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end).
Lemma candidate_1270: forall (n : natural) (y : lst) (x : lst), @eq lst   (rotate (len x)      (match lfappend y (Cons n x) with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y (Cons n x)).
Lemma candidate_70: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (match rotate lf7 (lfappend lf4 (Cons n Nil)) with | Cons y x => rotate (len lf4) (lfappend x (Cons y Nil)) | Nil => Nil end).