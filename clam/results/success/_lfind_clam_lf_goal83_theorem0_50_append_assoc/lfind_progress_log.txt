File Information
- File name: goal83
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal83_theorem0_50_append_assoc
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal83_theorem0_50_append_assoc
- Namespace: adtind
- Proof name: theorem0
- Theorem: Theorem theorem0: forall x0 y0 : lst,
@eq lst (rotate (len x0) (lfappend x0 y0)) (lfappend y0 x0).
- Declarations: 
From lfind Require Import LFind.

Proof Context
* Goal State: @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))
  (lfappend y (Cons n x))

* Hypothesis:
IHx : forall y0 : lst, @eq lst (rotate (len x) (lfappend x y0)) (lfappend y0 x)
x : lst
y : lst
n : natural

* Types:
Set
natural
Prop
lst

* Polymorphic Types:


* Variables:
x : lst
y : lst
n : natural

* Terms:
x : lst
len x : natural
y : lst
rotate (len x) (lfappend x _UNBOUND_REL_1) : lst
lfappend (lfappend x y) (Cons n Nil) : lst
lfappend x _UNBOUND_REL_1 : lst
lfappend _UNBOUND_REL_1 x : lst
@eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))
  (lfappend y (Cons n x)) : Prop
lfappend y (Cons n x) : lst
rotate (len x) (lfappend (lfappend x y) (Cons n Nil)) : lst
Cons n x : lst
lst : Set
Cons n Nil : lst
forall y0 : lst, @eq lst (rotate (len x) (lfappend x y0)) (lfappend y0 x) : Prop
natural : Set
n : natural
lfappend x y : lst
Nil : lst
@eq lst (rotate (len x) (lfappend x _UNBOUND_REL_1))
  (lfappend _UNBOUND_REL_1 x) : Prop

* Functions:
len  : forall _ : lst, natural
lfappend  : forall (_ : lst) (_ : lst), lst
rotate  : forall (_ : natural) (_ : lst), lst
Cons  : forall (_ : natural) (_ : lst), lst
@eq  : forall (A : Type) (_ : A) (_ : A), Prop

<---GENERALIZATION--->
Time elapsed: 2 seconds
Generalized Variables:
lf3 : lst = lfappend y (Cons n x)
lf7 : natural = len x
lf1 : lst = rotate (len x) (lfappend (lfappend x y) (Cons n Nil))
lf4 : lst = lfappend x y
lf5 : lst = Cons n Nil
lf2 : lst = lfappend (lfappend x y) (Cons n Nil)
lf8 : lst = Nil
lf6 : lst = Cons n x

Generalizations:
Lemma conj1: forall (lf1 : lst) (lf3 : lst), @eq lst lf1 lf3.
Lemma conj33: forall (lf2 : lst) (lf7 : natural) (lf3 : lst), @eq lst (rotate lf7 lf2) lf3.
Lemma conj37: forall (lf5 : lst) (lf4 : lst) (lf7 : natural) (lf3 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5)) lf3.
Lemma conj45: forall (lf8 : lst) (lf4 : lst) (n : natural) (lf7 : natural) (lf3 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8))) lf3.
Lemma conj47: forall (lf4 : lst) (n : natural) (lf7 : natural) (lf3 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil))) lf3.
Lemma conj53: forall (lf5 : lst) (x : lst) (y : lst) (lf7 : natural) (lf3 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5)) lf3.
Lemma conj61: forall (lf8 : lst) (x : lst) (y : lst) (n : natural) (lf7 : natural) (lf3 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8))) lf3.
Lemma conj63: forall (x : lst) (y : lst) (n : natural) (lf7 : natural) (lf3 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil))) lf3.
Lemma conj97: forall (lf2 : lst) (x : lst) (lf3 : lst), @eq lst (rotate (len x) lf2) lf3.
Lemma conj101: forall (lf5 : lst) (x : lst) (lf4 : lst) (lf3 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5)) lf3.
Lemma conj109: forall (lf8 : lst) (x : lst) (lf4 : lst) (n : natural) (lf3 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8))) lf3.
Lemma conj111: forall (x : lst) (lf4 : lst) (n : natural) (lf3 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil))) lf3.
Lemma conj117: forall (lf5 : lst) (x : lst) (y : lst) (lf3 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5)) lf3.
Lemma conj125: forall (lf8 : lst) (x : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8))) lf3.
Lemma conj127: forall (x : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))) lf3.
Lemma conj129: forall (lf6 : lst) (lf1 : lst) (y : lst), @eq lst lf1 (lfappend y lf6).
Lemma conj130: forall (x : lst) (lf1 : lst) (y : lst) (n : natural), @eq lst lf1 (lfappend y (Cons n x)).
Lemma conj161: forall (lf6 : lst) (lf2 : lst) (y : lst) (lf7 : natural), @eq lst (rotate lf7 lf2) (lfappend y lf6).
Lemma conj162: forall (lf2 : lst) (x : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 lf2) (lfappend y (Cons n x)).
Lemma conj165: forall (lf6 : lst) (lf5 : lst) (lf4 : lst) (y : lst) (lf7 : natural), @eq lst (rotate lf7 (lfappend lf4 lf5)) (lfappend y lf6).
Lemma conj166: forall (lf5 : lst) (x : lst) (lf4 : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend lf4 lf5)) (lfappend y (Cons n x)).
Lemma conj173: forall (lf6 : lst) (lf8 : lst) (lf4 : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8))) (lfappend y lf6).
Lemma conj174: forall (lf8 : lst) (x : lst) (lf4 : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8))) (lfappend y (Cons n x)).
Lemma conj175: forall (lf6 : lst) (lf4 : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil))) (lfappend y lf6).
Lemma conj176: forall (x : lst) (lf4 : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil))) (lfappend y (Cons n x)).
Lemma conj181: forall (lf6 : lst) (lf5 : lst) (x : lst) (y : lst) (lf7 : natural), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5)) (lfappend y lf6).
Lemma conj182: forall (lf5 : lst) (x : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5)) (lfappend y (Cons n x)).
Lemma conj189: forall (lf6 : lst) (lf8 : lst) (x : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8))) (lfappend y lf6).
Lemma conj190: forall (lf8 : lst) (x : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))
  (lfappend y (Cons n x)).
Lemma conj191: forall (lf6 : lst) (x : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil))) (lfappend y lf6).
Lemma conj192: forall (x : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))
  (lfappend y (Cons n x)).
Lemma conj225: forall (lf6 : lst) (lf2 : lst) (x : lst) (y : lst), @eq lst (rotate (len x) lf2) (lfappend y lf6).
Lemma conj226: forall (lf2 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rotate (len x) lf2) (lfappend y (Cons n x)).
Lemma conj229: forall (lf6 : lst) (lf5 : lst) (x : lst) (lf4 : lst) (y : lst), @eq lst (rotate (len x) (lfappend lf4 lf5)) (lfappend y lf6).
Lemma conj230: forall (lf5 : lst) (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend lf4 lf5)) (lfappend y (Cons n x)).
Lemma conj237: forall (lf6 : lst) (lf8 : lst) (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8))) (lfappend y lf6).
Lemma conj238: forall (lf8 : lst) (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8))) (lfappend y (Cons n x)).
Lemma conj239: forall (lf6 : lst) (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil))) (lfappend y lf6).
Lemma conj240: forall (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil))) (lfappend y (Cons n x)).
Lemma conj245: forall (lf6 : lst) (lf5 : lst) (x : lst) (y : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5)) (lfappend y lf6).
Lemma conj246: forall (lf5 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))
  (lfappend y (Cons n x)).
Lemma conj253: forall (lf6 : lst) (lf8 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))
  (lfappend y lf6).
Lemma conj254: forall (lf8 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))
  (lfappend y (Cons n x)).
Lemma conj255: forall (lf6 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))
  (lfappend y lf6).
Lemma conj256: forall (x : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))
  (lfappend y (Cons n x)).


<---VALIDITY CHECKS--->
Time elapsed: 188 seconds
Valid:
Lemma conj256: forall (x : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))
  (lfappend y (Cons n x)).

Invalid:
Lemma conj255: forall (lf6 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))
  (lfappend y lf6).
Lemma conj254: forall (lf8 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))
  (lfappend y (Cons n x)).
Lemma conj253: forall (lf6 : lst) (lf8 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))
  (lfappend y lf6).
Lemma conj246: forall (lf5 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))
  (lfappend y (Cons n x)).
Lemma conj245: forall (lf6 : lst) (lf5 : lst) (x : lst) (y : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5)) (lfappend y lf6).
Lemma conj240: forall (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil))) (lfappend y (Cons n x)).
Lemma conj239: forall (lf6 : lst) (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil))) (lfappend y lf6).
Lemma conj238: forall (lf8 : lst) (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8))) (lfappend y (Cons n x)).
Lemma conj237: forall (lf6 : lst) (lf8 : lst) (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8))) (lfappend y lf6).
Lemma conj230: forall (lf5 : lst) (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend lf4 lf5)) (lfappend y (Cons n x)).
Lemma conj229: forall (lf6 : lst) (lf5 : lst) (x : lst) (lf4 : lst) (y : lst), @eq lst (rotate (len x) (lfappend lf4 lf5)) (lfappend y lf6).
Lemma conj226: forall (lf2 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rotate (len x) lf2) (lfappend y (Cons n x)).
Lemma conj225: forall (lf6 : lst) (lf2 : lst) (x : lst) (y : lst), @eq lst (rotate (len x) lf2) (lfappend y lf6).
Lemma conj192: forall (x : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))
  (lfappend y (Cons n x)).
Lemma conj191: forall (lf6 : lst) (x : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil))) (lfappend y lf6).
Lemma conj190: forall (lf8 : lst) (x : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))
  (lfappend y (Cons n x)).
Lemma conj189: forall (lf6 : lst) (lf8 : lst) (x : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8))) (lfappend y lf6).
Lemma conj182: forall (lf5 : lst) (x : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5)) (lfappend y (Cons n x)).
Lemma conj181: forall (lf6 : lst) (lf5 : lst) (x : lst) (y : lst) (lf7 : natural), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5)) (lfappend y lf6).
Lemma conj176: forall (x : lst) (lf4 : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil))) (lfappend y (Cons n x)).
Lemma conj175: forall (lf6 : lst) (lf4 : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil))) (lfappend y lf6).
Lemma conj174: forall (lf8 : lst) (x : lst) (lf4 : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8))) (lfappend y (Cons n x)).
Lemma conj173: forall (lf6 : lst) (lf8 : lst) (lf4 : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8))) (lfappend y lf6).
Lemma conj166: forall (lf5 : lst) (x : lst) (lf4 : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend lf4 lf5)) (lfappend y (Cons n x)).
Lemma conj165: forall (lf6 : lst) (lf5 : lst) (lf4 : lst) (y : lst) (lf7 : natural), @eq lst (rotate lf7 (lfappend lf4 lf5)) (lfappend y lf6).
Lemma conj162: forall (lf2 : lst) (x : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 lf2) (lfappend y (Cons n x)).
Lemma conj161: forall (lf6 : lst) (lf2 : lst) (y : lst) (lf7 : natural), @eq lst (rotate lf7 lf2) (lfappend y lf6).
Lemma conj130: forall (x : lst) (lf1 : lst) (y : lst) (n : natural), @eq lst lf1 (lfappend y (Cons n x)).
Lemma conj129: forall (lf6 : lst) (lf1 : lst) (y : lst), @eq lst lf1 (lfappend y lf6).
Lemma conj127: forall (x : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))) lf3.
Lemma conj125: forall (lf8 : lst) (x : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8))) lf3.
Lemma conj117: forall (lf5 : lst) (x : lst) (y : lst) (lf3 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5)) lf3.
Lemma conj111: forall (x : lst) (lf4 : lst) (n : natural) (lf3 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil))) lf3.
Lemma conj109: forall (lf8 : lst) (x : lst) (lf4 : lst) (n : natural) (lf3 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8))) lf3.
Lemma conj101: forall (lf5 : lst) (x : lst) (lf4 : lst) (lf3 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5)) lf3.
Lemma conj97: forall (lf2 : lst) (x : lst) (lf3 : lst), @eq lst (rotate (len x) lf2) lf3.
Lemma conj63: forall (x : lst) (y : lst) (n : natural) (lf7 : natural) (lf3 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil))) lf3.
Lemma conj61: forall (lf8 : lst) (x : lst) (y : lst) (n : natural) (lf7 : natural) (lf3 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8))) lf3.
Lemma conj53: forall (lf5 : lst) (x : lst) (y : lst) (lf7 : natural) (lf3 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5)) lf3.
Lemma conj47: forall (lf4 : lst) (n : natural) (lf7 : natural) (lf3 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil))) lf3.
Lemma conj45: forall (lf8 : lst) (lf4 : lst) (n : natural) (lf7 : natural) (lf3 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8))) lf3.
Lemma conj37: forall (lf5 : lst) (lf4 : lst) (lf7 : natural) (lf3 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5)) lf3.
Lemma conj33: forall (lf2 : lst) (lf7 : natural) (lf3 : lst), @eq lst (rotate lf7 lf2) lf3.
Lemma conj1: forall (lf1 : lst) (lf3 : lst), @eq lst lf1 lf3.

<---ADD IMPLICATIONS--->
Time elapsed: 188 seconds
Generalizations:
Lemma conj255: forall (lf6 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))
  (lfappend y lf6).
Lemma conj254: forall (lf8 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))
  (lfappend y (Cons n x)).
Lemma conj253: forall (lf6 : lst) (lf8 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))
  (lfappend y lf6).
Lemma conj246: forall (lf5 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))
  (lfappend y (Cons n x)).
Lemma conj245: forall (lf6 : lst) (lf5 : lst) (x : lst) (y : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5)) (lfappend y lf6).
Lemma conj240: forall (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil))) (lfappend y (Cons n x)).
Lemma conj239: forall (lf6 : lst) (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil))) (lfappend y lf6).
Lemma conj238: forall (lf8 : lst) (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8))) (lfappend y (Cons n x)).
Lemma conj237: forall (lf6 : lst) (lf8 : lst) (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8))) (lfappend y lf6).
Lemma conj230: forall (lf5 : lst) (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend lf4 lf5)) (lfappend y (Cons n x)).
Lemma conj229: forall (lf6 : lst) (lf5 : lst) (x : lst) (lf4 : lst) (y : lst), @eq lst (rotate (len x) (lfappend lf4 lf5)) (lfappend y lf6).
Lemma conj226: forall (lf2 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rotate (len x) lf2) (lfappend y (Cons n x)).
Lemma conj225: forall (lf6 : lst) (lf2 : lst) (x : lst) (y : lst), @eq lst (rotate (len x) lf2) (lfappend y lf6).
Lemma conj192: forall (x : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))
  (lfappend y (Cons n x)).
Lemma conj191: forall (lf6 : lst) (x : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil))) (lfappend y lf6).
Lemma conj190: forall (lf8 : lst) (x : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))
  (lfappend y (Cons n x)).
Lemma conj189: forall (lf6 : lst) (lf8 : lst) (x : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8))) (lfappend y lf6).
Lemma conj182: forall (lf5 : lst) (x : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5)) (lfappend y (Cons n x)).
Lemma conj181: forall (lf6 : lst) (lf5 : lst) (x : lst) (y : lst) (lf7 : natural), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5)) (lfappend y lf6).
Lemma conj176: forall (x : lst) (lf4 : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil))) (lfappend y (Cons n x)).
Lemma conj175: forall (lf6 : lst) (lf4 : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil))) (lfappend y lf6).
Lemma conj174: forall (lf8 : lst) (x : lst) (lf4 : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8))) (lfappend y (Cons n x)).
Lemma conj173: forall (lf6 : lst) (lf8 : lst) (lf4 : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8))) (lfappend y lf6).
Lemma conj166: forall (lf5 : lst) (x : lst) (lf4 : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend lf4 lf5)) (lfappend y (Cons n x)).
Lemma conj165: forall (lf6 : lst) (lf5 : lst) (lf4 : lst) (y : lst) (lf7 : natural), @eq lst (rotate lf7 (lfappend lf4 lf5)) (lfappend y lf6).
Lemma conj162: forall (lf2 : lst) (x : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 lf2) (lfappend y (Cons n x)).
Lemma conj161: forall (lf6 : lst) (lf2 : lst) (y : lst) (lf7 : natural), @eq lst (rotate lf7 lf2) (lfappend y lf6).
Lemma conj130: forall (x : lst) (lf1 : lst) (y : lst) (n : natural), @eq lst lf1 (lfappend y (Cons n x)).
Lemma conj129: forall (lf6 : lst) (lf1 : lst) (y : lst), @eq lst lf1 (lfappend y lf6).
Lemma conj127: forall (x : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))) lf3.
Lemma conj125: forall (lf8 : lst) (x : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8))) lf3.
Lemma conj117: forall (lf5 : lst) (x : lst) (y : lst) (lf3 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5)) lf3.
Lemma conj111: forall (x : lst) (lf4 : lst) (n : natural) (lf3 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil))) lf3.
Lemma conj109: forall (lf8 : lst) (x : lst) (lf4 : lst) (n : natural) (lf3 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8))) lf3.
Lemma conj101: forall (lf5 : lst) (x : lst) (lf4 : lst) (lf3 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5)) lf3.
Lemma conj97: forall (lf2 : lst) (x : lst) (lf3 : lst), @eq lst (rotate (len x) lf2) lf3.
Lemma conj63: forall (x : lst) (y : lst) (n : natural) (lf7 : natural) (lf3 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil))) lf3.
Lemma conj61: forall (lf8 : lst) (x : lst) (y : lst) (n : natural) (lf7 : natural) (lf3 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8))) lf3.
Lemma conj53: forall (lf5 : lst) (x : lst) (y : lst) (lf7 : natural) (lf3 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5)) lf3.
Lemma conj47: forall (lf4 : lst) (n : natural) (lf7 : natural) (lf3 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil))) lf3.
Lemma conj45: forall (lf8 : lst) (lf4 : lst) (n : natural) (lf7 : natural) (lf3 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8))) lf3.
Lemma conj37: forall (lf5 : lst) (lf4 : lst) (lf7 : natural) (lf3 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5)) lf3.
Lemma conj33: forall (lf2 : lst) (lf7 : natural) (lf3 : lst), @eq lst (rotate lf7 lf2) lf3.
Lemma conj1: forall (lf1 : lst) (lf3 : lst), @eq lst lf1 lf3.


<---VALIDITY CHECKS--->
Time elapsed: 255 seconds
Valid:

Invalid:
Lemma conj1: forall (lf1 : lst) (lf3 : lst), @eq lst lf1 lf3.
Lemma conj33: forall (lf2 : lst) (lf7 : natural) (lf3 : lst), @eq lst (rotate lf7 lf2) lf3.
Lemma conj37: forall (lf5 : lst) (lf4 : lst) (lf7 : natural) (lf3 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5)) lf3.
Lemma conj45: forall (lf8 : lst) (lf4 : lst) (n : natural) (lf7 : natural) (lf3 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8))) lf3.
Lemma conj47: forall (lf4 : lst) (n : natural) (lf7 : natural) (lf3 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil))) lf3.
Lemma conj53: forall (lf5 : lst) (x : lst) (y : lst) (lf7 : natural) (lf3 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5)) lf3.
Lemma conj61: forall (lf8 : lst) (x : lst) (y : lst) (n : natural) (lf7 : natural) (lf3 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8))) lf3.
Lemma conj63: forall (x : lst) (y : lst) (n : natural) (lf7 : natural) (lf3 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil))) lf3.
Lemma conj97: forall (lf2 : lst) (x : lst) (lf3 : lst), @eq lst (rotate (len x) lf2) lf3.
Lemma conj101: forall (lf5 : lst) (x : lst) (lf4 : lst) (lf3 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5)) lf3.
Lemma conj109: forall (lf8 : lst) (x : lst) (lf4 : lst) (n : natural) (lf3 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8))) lf3.
Lemma conj111: forall (x : lst) (lf4 : lst) (n : natural) (lf3 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil))) lf3.
Lemma conj117: forall (lf5 : lst) (x : lst) (y : lst) (lf3 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5)) lf3.
Lemma conj125: forall (lf8 : lst) (x : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8))) lf3.
Lemma conj127: forall (x : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))) lf3.
Lemma conj129: forall (lf6 : lst) (lf1 : lst) (y : lst), @eq lst lf1 (lfappend y lf6).
Lemma conj130: forall (x : lst) (lf1 : lst) (y : lst) (n : natural), @eq lst lf1 (lfappend y (Cons n x)).
Lemma conj161: forall (lf6 : lst) (lf2 : lst) (y : lst) (lf7 : natural), @eq lst (rotate lf7 lf2) (lfappend y lf6).
Lemma conj162: forall (lf2 : lst) (x : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 lf2) (lfappend y (Cons n x)).
Lemma conj165: forall (lf6 : lst) (lf5 : lst) (lf4 : lst) (y : lst) (lf7 : natural), @eq lst (rotate lf7 (lfappend lf4 lf5)) (lfappend y lf6).
Lemma conj166: forall (lf5 : lst) (x : lst) (lf4 : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend lf4 lf5)) (lfappend y (Cons n x)).
Lemma conj173: forall (lf6 : lst) (lf8 : lst) (lf4 : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8))) (lfappend y lf6).
Lemma conj174: forall (lf8 : lst) (x : lst) (lf4 : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8))) (lfappend y (Cons n x)).
Lemma conj175: forall (lf6 : lst) (lf4 : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil))) (lfappend y lf6).
Lemma conj176: forall (x : lst) (lf4 : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil))) (lfappend y (Cons n x)).
Lemma conj181: forall (lf6 : lst) (lf5 : lst) (x : lst) (y : lst) (lf7 : natural), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5)) (lfappend y lf6).
Lemma conj182: forall (lf5 : lst) (x : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5)) (lfappend y (Cons n x)).
Lemma conj189: forall (lf6 : lst) (lf8 : lst) (x : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8))) (lfappend y lf6).
Lemma conj190: forall (lf8 : lst) (x : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))
  (lfappend y (Cons n x)).
Lemma conj191: forall (lf6 : lst) (x : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil))) (lfappend y lf6).
Lemma conj192: forall (x : lst) (y : lst) (n : natural) (lf7 : natural), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))
  (lfappend y (Cons n x)).
Lemma conj225: forall (lf6 : lst) (lf2 : lst) (x : lst) (y : lst), @eq lst (rotate (len x) lf2) (lfappend y lf6).
Lemma conj226: forall (lf2 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rotate (len x) lf2) (lfappend y (Cons n x)).
Lemma conj229: forall (lf6 : lst) (lf5 : lst) (x : lst) (lf4 : lst) (y : lst), @eq lst (rotate (len x) (lfappend lf4 lf5)) (lfappend y lf6).
Lemma conj230: forall (lf5 : lst) (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend lf4 lf5)) (lfappend y (Cons n x)).
Lemma conj237: forall (lf6 : lst) (lf8 : lst) (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8))) (lfappend y lf6).
Lemma conj238: forall (lf8 : lst) (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8))) (lfappend y (Cons n x)).
Lemma conj239: forall (lf6 : lst) (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil))) (lfappend y lf6).
Lemma conj240: forall (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil))) (lfappend y (Cons n x)).
Lemma conj245: forall (lf6 : lst) (lf5 : lst) (x : lst) (y : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5)) (lfappend y lf6).
Lemma conj246: forall (lf5 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))
  (lfappend y (Cons n x)).
Lemma conj253: forall (lf6 : lst) (lf8 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))
  (lfappend y lf6).
Lemma conj254: forall (lf8 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))
  (lfappend y (Cons n x)).
Lemma conj255: forall (lf6 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))
  (lfappend y lf6).


<---CREATE SKETCHES--->
Time elapsed: 256 seconds
Sketches:
Sketch conj33_sketch0 : @eq lst (##hole##) lf3
Sketch conj33_term_sketch0 : @eq lst (rotate lf7 lf2) (##hole##)
Sketch conj37_sketch0 : @eq lst (##hole##) lf3
Sketch conj37_sketch1 : @eq lst (rotate lf7 (##hole##)) lf3
Sketch conj37_term_sketch0 : @eq lst (rotate lf7 (lfappend lf4 lf5)) (##hole##)
Sketch conj37_term_sketch1 : @eq lst (lfappend lf4 lf5) (##hole##)
Sketch conj45_sketch0 : @eq lst (##hole##) lf3
Sketch conj45_sketch1 : @eq lst (rotate lf7 (##hole##)) lf3
Sketch conj45_sketch2 : @eq lst (rotate lf7 (lfappend lf4 (##hole##))) lf3
Sketch conj45_term_sketch0 : @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8))) (##hole##)
Sketch conj45_term_sketch1 : @eq lst (lfappend lf4 (Cons n lf8)) (##hole##)
Sketch conj45_term_sketch2 : @eq lst (Cons n lf8) (##hole##)
Sketch conj47_sketch0 : @eq lst (##hole##) lf3
Sketch conj47_sketch1 : @eq lst (rotate lf7 (lfappend lf4 (##hole##))) lf3
Sketch conj47_sketch2 : @eq lst (rotate lf7 (##hole##)) lf3
Sketch conj47_sketch3 : @eq lst (rotate lf7 (lfappend lf4 (Cons n (##hole##)))) lf3
Sketch conj47_term_sketch0 : @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil))) (##hole##)
Sketch conj47_term_sketch1 : @eq lst (Cons n Nil) (##hole##)
Sketch conj47_term_sketch2 : @eq lst (lfappend lf4 (Cons n Nil)) (##hole##)
Sketch conj47_term_sketch3 : @eq lst Nil (##hole##)
Sketch conj53_sketch0 : @eq lst (##hole##) lf3
Sketch conj53_sketch1 : @eq lst (rotate lf7 (##hole##)) lf3
Sketch conj53_sketch2 : @eq lst (rotate lf7 (lfappend (##hole##) lf5)) lf3
Sketch conj53_term_sketch0 : @eq lst (rotate lf7 (lfappend (lfappend x y) lf5)) (##hole##)
Sketch conj53_term_sketch1 : @eq lst (lfappend (lfappend x y) lf5) (##hole##)
Sketch conj53_term_sketch2 : @eq lst (lfappend x y) (##hole##)
Sketch conj61_sketch0 : @eq lst (##hole##) lf3
Sketch conj61_sketch1 : @eq lst (rotate lf7 (##hole##)) lf3
Sketch conj61_sketch2 : @eq lst (rotate lf7 (lfappend (lfappend x y) (##hole##))) lf3
Sketch conj61_sketch3 : @eq lst (rotate lf7 (lfappend (##hole##) (Cons n lf8))) lf3
Sketch conj61_term_sketch0 : @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8))) (##hole##)
Sketch conj61_term_sketch1 : @eq lst (lfappend (lfappend x y) (Cons n lf8)) (##hole##)
Sketch conj61_term_sketch2 : @eq lst (Cons n lf8) (##hole##)
Sketch conj61_term_sketch3 : @eq lst (lfappend x y) (##hole##)
Sketch conj63_sketch0 : @eq lst (##hole##) lf3
Sketch conj63_sketch1 : @eq lst (rotate lf7 (lfappend (lfappend x y) (##hole##))) lf3
Sketch conj63_sketch2 : @eq lst (rotate lf7 (##hole##)) lf3
Sketch conj63_sketch3 : @eq lst (rotate lf7 (lfappend (##hole##) (Cons n Nil))) lf3
Sketch conj63_sketch4 : @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n (##hole##)))) lf3
Sketch conj63_term_sketch0 : @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil))) (##hole##)
Sketch conj63_term_sketch1 : @eq lst (Cons n Nil) (##hole##)
Sketch conj63_term_sketch2 : @eq lst (lfappend (lfappend x y) (Cons n Nil)) (##hole##)
Sketch conj63_term_sketch3 : @eq lst (lfappend x y) (##hole##)
Sketch conj63_term_sketch4 : @eq lst Nil (##hole##)
Sketch conj97_sketch0 : @eq lst (rotate (##hole##) lf2) lf3
Sketch conj97_sketch1 : @eq lst (##hole##) lf3
Sketch conj97_term_sketch0 : @eq natural (len x) (##hole##)
Sketch conj97_term_sketch1 : @eq lst (rotate (len x) lf2) (##hole##)
Sketch conj101_sketch0 : @eq lst (rotate (##hole##) (lfappend lf4 lf5)) lf3
Sketch conj101_sketch1 : @eq lst (##hole##) lf3
Sketch conj101_sketch2 : @eq lst (rotate (len x) (##hole##)) lf3
Sketch conj101_term_sketch0 : @eq natural (len x) (##hole##)
Sketch conj101_term_sketch1 : @eq lst (rotate (len x) (lfappend lf4 lf5)) (##hole##)
Sketch conj101_term_sketch2 : @eq lst (lfappend lf4 lf5) (##hole##)
Sketch conj109_sketch0 : @eq lst (rotate (##hole##) (lfappend lf4 (Cons n lf8))) lf3
Sketch conj109_sketch1 : @eq lst (rotate (len x) (##hole##)) lf3
Sketch conj109_sketch2 : @eq lst (rotate (len x) (lfappend lf4 (##hole##))) lf3
Sketch conj109_sketch3 : @eq lst (##hole##) lf3
Sketch conj109_term_sketch0 : @eq natural (len x) (##hole##)
Sketch conj109_term_sketch1 : @eq lst (lfappend lf4 (Cons n lf8)) (##hole##)
Sketch conj109_term_sketch2 : @eq lst (Cons n lf8) (##hole##)
Sketch conj109_term_sketch3 : @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8))) (##hole##)
Sketch conj111_sketch0 : @eq lst (rotate (##hole##) (lfappend lf4 (Cons n Nil))) lf3
Sketch conj111_sketch1 : @eq lst (rotate (len x) (lfappend lf4 (##hole##))) lf3
Sketch conj111_sketch2 : @eq lst (##hole##) lf3
Sketch conj111_sketch3 : @eq lst (rotate (len x) (##hole##)) lf3
Sketch conj111_sketch4 : @eq lst (rotate (len x) (lfappend lf4 (Cons n (##hole##)))) lf3
Sketch conj111_term_sketch0 : @eq natural (len x) (##hole##)
Sketch conj111_term_sketch1 : @eq lst (Cons n Nil) (##hole##)
Sketch conj111_term_sketch2 : @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil))) (##hole##)
Sketch conj111_term_sketch3 : @eq lst (lfappend lf4 (Cons n Nil)) (##hole##)
Sketch conj111_term_sketch4 : @eq lst Nil (##hole##)
Sketch conj117_sketch0 : @eq lst (##hole##) lf3
Sketch conj117_sketch1 : @eq lst (rotate (##hole##) (lfappend (lfappend x y) lf5)) lf3
Sketch conj117_sketch2 : @eq lst (rotate (len x) (##hole##)) lf3
Sketch conj117_sketch3 : @eq lst (rotate (len x) (lfappend (##hole##) lf5)) lf3
Sketch conj117_term_sketch0 : @eq lst (rotate (len x) (lfappend (lfappend x y) lf5)) (##hole##)
Sketch conj117_term_sketch1 : @eq natural (len x) (##hole##)
Sketch conj117_term_sketch2 : @eq lst (lfappend (lfappend x y) lf5) (##hole##)
Sketch conj117_term_sketch3 : @eq lst (lfappend x y) (##hole##)
Sketch conj125_sketch0 : @eq lst (##hole##) lf3
Sketch conj125_sketch1 : @eq lst (rotate (##hole##) (lfappend (lfappend x y) (Cons n lf8))) lf3
Sketch conj125_sketch2 : @eq lst (rotate (len x) (##hole##)) lf3
Sketch conj125_sketch3 : @eq lst (rotate (len x) (lfappend (lfappend x y) (##hole##))) lf3
Sketch conj125_sketch4 : @eq lst (rotate (len x) (lfappend (##hole##) (Cons n lf8))) lf3
Sketch conj125_term_sketch0 : @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8))) (##hole##)
Sketch conj125_term_sketch1 : @eq natural (len x) (##hole##)
Sketch conj125_term_sketch2 : @eq lst (lfappend (lfappend x y) (Cons n lf8)) (##hole##)
Sketch conj125_term_sketch3 : @eq lst (Cons n lf8) (##hole##)
Sketch conj125_term_sketch4 : @eq lst (lfappend x y) (##hole##)
Sketch conj127_sketch0 : @eq lst (##hole##) lf3
Sketch conj127_sketch1 : @eq lst (rotate (##hole##) (lfappend (lfappend x y) (Cons n Nil))) lf3
Sketch conj127_sketch2 : @eq lst (rotate (len x) (lfappend (lfappend x y) (##hole##))) lf3
Sketch conj127_sketch3 : @eq lst (rotate (len x) (##hole##)) lf3
Sketch conj127_sketch4 : @eq lst (rotate (len x) (lfappend (##hole##) (Cons n Nil))) lf3
Sketch conj127_sketch5 : @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n (##hole##)))) lf3
Sketch conj127_term_sketch0 : @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))) (##hole##)
Sketch conj127_term_sketch1 : @eq natural (len x) (##hole##)
Sketch conj127_term_sketch2 : @eq lst (Cons n Nil) (##hole##)
Sketch conj127_term_sketch3 : @eq lst (lfappend (lfappend x y) (Cons n Nil)) (##hole##)
Sketch conj127_term_sketch4 : @eq lst (lfappend x y) (##hole##)
Sketch conj127_term_sketch5 : @eq lst Nil (##hole##)
Sketch conj129_sketch0 : @eq lst lf1 (##hole##)
Sketch conj129_term_sketch0 : @eq lst (lfappend y lf6) (##hole##)
Sketch conj130_sketch0 : @eq lst lf1 (##hole##)
Sketch conj130_sketch1 : @eq lst lf1 (lfappend y (##hole##))
Sketch conj130_term_sketch0 : @eq lst (lfappend y (Cons n x)) (##hole##)
Sketch conj130_term_sketch1 : @eq lst (Cons n x) (##hole##)
Sketch conj161_sketch0 : @eq lst (##hole##) (lfappend y lf6)
Sketch conj161_sketch1 : @eq lst (rotate lf7 lf2) (##hole##)
Sketch conj161_term_sketch0 : @eq lst (rotate lf7 lf2) (##hole##)
Sketch conj161_term_sketch1 : @eq lst (lfappend y lf6) (##hole##)
Sketch conj162_sketch0 : @eq lst (rotate lf7 lf2) (##hole##)
Sketch conj162_sketch1 : @eq lst (##hole##) (lfappend y (Cons n x))
Sketch conj162_sketch2 : @eq lst (rotate lf7 lf2) (lfappend y (##hole##))
Sketch conj162_term_sketch0 : @eq lst (lfappend y (Cons n x)) (##hole##)
Sketch conj162_term_sketch1 : @eq lst (rotate lf7 lf2) (##hole##)
Sketch conj162_term_sketch2 : @eq lst (Cons n x) (##hole##)
Sketch conj165_sketch0 : @eq lst (##hole##) (lfappend y lf6)
Sketch conj165_sketch1 : @eq lst (rotate lf7 (##hole##)) (lfappend y lf6)
Sketch conj165_sketch2 : @eq lst (rotate lf7 (lfappend lf4 lf5)) (##hole##)
Sketch conj165_term_sketch0 : @eq lst (rotate lf7 (lfappend lf4 lf5)) (##hole##)
Sketch conj165_term_sketch1 : @eq lst (lfappend lf4 lf5) (##hole##)
Sketch conj165_term_sketch2 : @eq lst (lfappend y lf6) (##hole##)
Sketch conj166_sketch0 : @eq lst (rotate lf7 (lfappend lf4 lf5)) (##hole##)
Sketch conj166_sketch1 : @eq lst (##hole##) (lfappend y (Cons n x))
Sketch conj166_sketch2 : @eq lst (rotate lf7 (##hole##)) (lfappend y (Cons n x))
Sketch conj166_sketch3 : @eq lst (rotate lf7 (lfappend lf4 lf5)) (lfappend y (##hole##))
Sketch conj166_term_sketch0 : @eq lst (lfappend y (Cons n x)) (##hole##)
Sketch conj166_term_sketch1 : @eq lst (rotate lf7 (lfappend lf4 lf5)) (##hole##)
Sketch conj166_term_sketch2 : @eq lst (lfappend lf4 lf5) (##hole##)
Sketch conj166_term_sketch3 : @eq lst (Cons n x) (##hole##)
Sketch conj173_sketch0 : @eq lst (##hole##) (lfappend y lf6)
Sketch conj173_sketch1 : @eq lst (rotate lf7 (##hole##)) (lfappend y lf6)
Sketch conj173_sketch2 : @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8))) (##hole##)
Sketch conj173_sketch3 : @eq lst (rotate lf7 (lfappend lf4 (##hole##))) (lfappend y lf6)
Sketch conj173_term_sketch0 : @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8))) (##hole##)
Sketch conj173_term_sketch1 : @eq lst (lfappend lf4 (Cons n lf8)) (##hole##)
Sketch conj173_term_sketch2 : @eq lst (lfappend y lf6) (##hole##)
Sketch conj173_term_sketch3 : @eq lst (Cons n lf8) (##hole##)
Sketch conj174_sketch0 : @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8))) (##hole##)
Sketch conj174_sketch1 : @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8))) (lfappend y (##hole##))
Sketch conj174_sketch2 : @eq lst (##hole##) (lfappend y (Cons n x))
Sketch conj174_sketch3 : @eq lst (rotate lf7 (##hole##)) (lfappend y (Cons n x))
Sketch conj174_sketch4 : @eq lst (rotate lf7 (lfappend lf4 (##hole##))) (lfappend y (Cons n x))
Sketch conj174_term_sketch0 : @eq lst (lfappend y (Cons n x)) (##hole##)
Sketch conj174_term_sketch1 : @eq lst (Cons n x) (##hole##)
Sketch conj174_term_sketch2 : @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8))) (##hole##)
Sketch conj174_term_sketch3 : @eq lst (lfappend lf4 (Cons n lf8)) (##hole##)
Sketch conj174_term_sketch4 : @eq lst (Cons n lf8) (##hole##)
Sketch conj175_sketch0 : @eq lst (##hole##) (lfappend y lf6)
Sketch conj175_sketch1 : @eq lst (rotate lf7 (lfappend lf4 (##hole##))) (lfappend y lf6)
Sketch conj175_sketch2 : @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil))) (##hole##)
Sketch conj175_sketch3 : @eq lst (rotate lf7 (##hole##)) (lfappend y lf6)
Sketch conj175_sketch4 : @eq lst (rotate lf7 (lfappend lf4 (Cons n (##hole##)))) (lfappend y lf6)
Sketch conj175_term_sketch0 : @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil))) (##hole##)
Sketch conj175_term_sketch1 : @eq lst (Cons n Nil) (##hole##)
Sketch conj175_term_sketch2 : @eq lst (lfappend y lf6) (##hole##)
Sketch conj175_term_sketch3 : @eq lst (lfappend lf4 (Cons n Nil)) (##hole##)
Sketch conj175_term_sketch4 : @eq lst Nil (##hole##)
Sketch conj176_sketch0 : @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil))) (##hole##)
Sketch conj176_sketch1 : @eq lst (##hole##) (lfappend y (Cons n x))
Sketch conj176_sketch2 : @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil))) (lfappend y (##hole##))
Sketch conj176_sketch3 : @eq lst (rotate lf7 (lfappend lf4 (##hole##))) (lfappend y (Cons n x))
Sketch conj176_sketch4 : @eq lst (rotate lf7 (##hole##)) (lfappend y (Cons n x))
Sketch conj176_sketch5 : @eq lst (rotate lf7 (lfappend lf4 (Cons n (##hole##))))
  (lfappend y (Cons n x))
Sketch conj176_term_sketch0 : @eq lst (lfappend y (Cons n x)) (##hole##)
Sketch conj176_term_sketch1 : @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil))) (##hole##)
Sketch conj176_term_sketch2 : @eq lst (Cons n x) (##hole##)
Sketch conj176_term_sketch3 : @eq lst (Cons n Nil) (##hole##)
Sketch conj176_term_sketch4 : @eq lst (lfappend lf4 (Cons n Nil)) (##hole##)
Sketch conj176_term_sketch5 : @eq lst Nil (##hole##)
Sketch conj181_sketch0 : @eq lst (##hole##) (lfappend y lf6)
Sketch conj181_sketch1 : @eq lst (rotate lf7 (lfappend (lfappend x y) lf5)) (##hole##)
Sketch conj181_sketch2 : @eq lst (rotate lf7 (##hole##)) (lfappend y lf6)
Sketch conj181_sketch3 : @eq lst (rotate lf7 (lfappend (##hole##) lf5)) (lfappend y lf6)
Sketch conj181_term_sketch0 : @eq lst (rotate lf7 (lfappend (lfappend x y) lf5)) (##hole##)
Sketch conj181_term_sketch1 : @eq lst (lfappend y lf6) (##hole##)
Sketch conj181_term_sketch2 : @eq lst (lfappend (lfappend x y) lf5) (##hole##)
Sketch conj181_term_sketch3 : @eq lst (lfappend x y) (##hole##)
Sketch conj182_sketch0 : @eq lst (##hole##) (lfappend y (Cons n x))
Sketch conj182_sketch1 : @eq lst (rotate lf7 (lfappend (lfappend x y) lf5)) (##hole##)
Sketch conj182_sketch2 : @eq lst (rotate lf7 (lfappend (lfappend x y) lf5)) (lfappend y (##hole##))
Sketch conj182_sketch3 : @eq lst (rotate lf7 (##hole##)) (lfappend y (Cons n x))
Sketch conj182_sketch4 : @eq lst (rotate lf7 (lfappend (##hole##) lf5)) (lfappend y (Cons n x))
Sketch conj182_term_sketch0 : @eq lst (rotate lf7 (lfappend (lfappend x y) lf5)) (##hole##)
Sketch conj182_term_sketch1 : @eq lst (lfappend y (Cons n x)) (##hole##)
Sketch conj182_term_sketch2 : @eq lst (Cons n x) (##hole##)
Sketch conj182_term_sketch3 : @eq lst (lfappend (lfappend x y) lf5) (##hole##)
Sketch conj182_term_sketch4 : @eq lst (lfappend x y) (##hole##)
Sketch conj189_sketch0 : @eq lst (##hole##) (lfappend y lf6)
Sketch conj189_sketch1 : @eq lst (rotate lf7 (##hole##)) (lfappend y lf6)
Sketch conj189_sketch2 : @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8))) (##hole##)
Sketch conj189_sketch3 : @eq lst (rotate lf7 (lfappend (lfappend x y) (##hole##))) (lfappend y lf6)
Sketch conj189_sketch4 : @eq lst (rotate lf7 (lfappend (##hole##) (Cons n lf8))) (lfappend y lf6)
Sketch conj189_term_sketch0 : @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8))) (##hole##)
Sketch conj189_term_sketch1 : @eq lst (lfappend (lfappend x y) (Cons n lf8)) (##hole##)
Sketch conj189_term_sketch2 : @eq lst (lfappend y lf6) (##hole##)
Sketch conj189_term_sketch3 : @eq lst (Cons n lf8) (##hole##)
Sketch conj189_term_sketch4 : @eq lst (lfappend x y) (##hole##)
Sketch conj190_sketch0 : @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8))) (##hole##)
Sketch conj190_sketch1 : @eq lst (##hole##) (lfappend y (Cons n x))
Sketch conj190_sketch2 : @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))
  (lfappend y (##hole##))
Sketch conj190_sketch3 : @eq lst (rotate lf7 (##hole##)) (lfappend y (Cons n x))
Sketch conj190_sketch4 : @eq lst (rotate lf7 (lfappend (lfappend x y) (##hole##)))
  (lfappend y (Cons n x))
Sketch conj190_sketch5 : @eq lst (rotate lf7 (lfappend (##hole##) (Cons n lf8)))
  (lfappend y (Cons n x))
Sketch conj190_term_sketch0 : @eq lst (lfappend y (Cons n x)) (##hole##)
Sketch conj190_term_sketch1 : @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8))) (##hole##)
Sketch conj190_term_sketch2 : @eq lst (Cons n x) (##hole##)
Sketch conj190_term_sketch3 : @eq lst (lfappend (lfappend x y) (Cons n lf8)) (##hole##)
Sketch conj190_term_sketch4 : @eq lst (Cons n lf8) (##hole##)
Sketch conj190_term_sketch5 : @eq lst (lfappend x y) (##hole##)
Sketch conj191_sketch0 : @eq lst (##hole##) (lfappend y lf6)
Sketch conj191_sketch1 : @eq lst (rotate lf7 (lfappend (lfappend x y) (##hole##))) (lfappend y lf6)
Sketch conj191_sketch2 : @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil))) (##hole##)
Sketch conj191_sketch3 : @eq lst (rotate lf7 (##hole##)) (lfappend y lf6)
Sketch conj191_sketch4 : @eq lst (rotate lf7 (lfappend (##hole##) (Cons n Nil))) (lfappend y lf6)
Sketch conj191_sketch5 : @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n (##hole##))))
  (lfappend y lf6)
Sketch conj191_term_sketch0 : @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil))) (##hole##)
Sketch conj191_term_sketch1 : @eq lst (Cons n Nil) (##hole##)
Sketch conj191_term_sketch2 : @eq lst (lfappend y lf6) (##hole##)
Sketch conj191_term_sketch3 : @eq lst (lfappend (lfappend x y) (Cons n Nil)) (##hole##)
Sketch conj191_term_sketch4 : @eq lst (lfappend x y) (##hole##)
Sketch conj191_term_sketch5 : @eq lst Nil (##hole##)
Sketch conj192_sketch0 : @eq lst (##hole##) (lfappend y (Cons n x))
Sketch conj192_sketch1 : @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil))) (##hole##)
Sketch conj192_sketch2 : @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))
  (lfappend y (##hole##))
Sketch conj192_sketch3 : @eq lst (rotate lf7 (lfappend (lfappend x y) (##hole##)))
  (lfappend y (Cons n x))
Sketch conj192_sketch4 : @eq lst (rotate lf7 (##hole##)) (lfappend y (Cons n x))
Sketch conj192_sketch5 : @eq lst (rotate lf7 (lfappend (##hole##) (Cons n Nil)))
  (lfappend y (Cons n x))
Sketch conj192_sketch6 : @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n (##hole##))))
  (lfappend y (Cons n x))
Sketch conj192_term_sketch0 : @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil))) (##hole##)
Sketch conj192_term_sketch1 : @eq lst (lfappend y (Cons n x)) (##hole##)
Sketch conj192_term_sketch2 : @eq lst (Cons n x) (##hole##)
Sketch conj192_term_sketch3 : @eq lst (Cons n Nil) (##hole##)
Sketch conj192_term_sketch4 : @eq lst (lfappend (lfappend x y) (Cons n Nil)) (##hole##)
Sketch conj192_term_sketch5 : @eq lst (lfappend x y) (##hole##)
Sketch conj192_term_sketch6 : @eq lst Nil (##hole##)
Sketch conj225_sketch0 : @eq lst (rotate (##hole##) lf2) (lfappend y lf6)
Sketch conj225_sketch1 : @eq lst (##hole##) (lfappend y lf6)
Sketch conj225_sketch2 : @eq lst (rotate (len x) lf2) (##hole##)
Sketch conj225_term_sketch0 : @eq natural (len x) (##hole##)
Sketch conj225_term_sketch1 : @eq lst (rotate (len x) lf2) (##hole##)
Sketch conj225_term_sketch2 : @eq lst (lfappend y lf6) (##hole##)
Sketch conj226_sketch0 : @eq lst (rotate (len x) lf2) (##hole##)
Sketch conj226_sketch1 : @eq lst (rotate (##hole##) lf2) (lfappend y (Cons n x))
Sketch conj226_sketch2 : @eq lst (rotate (len x) lf2) (lfappend y (##hole##))
Sketch conj226_sketch3 : @eq lst (##hole##) (lfappend y (Cons n x))
Sketch conj226_term_sketch0 : @eq lst (lfappend y (Cons n x)) (##hole##)
Sketch conj226_term_sketch1 : @eq natural (len x) (##hole##)
Sketch conj226_term_sketch2 : @eq lst (Cons n x) (##hole##)
Sketch conj226_term_sketch3 : @eq lst (rotate (len x) lf2) (##hole##)
Sketch conj229_sketch0 : @eq lst (rotate (##hole##) (lfappend lf4 lf5)) (lfappend y lf6)
Sketch conj229_sketch1 : @eq lst (##hole##) (lfappend y lf6)
Sketch conj229_sketch2 : @eq lst (rotate (len x) (##hole##)) (lfappend y lf6)
Sketch conj229_sketch3 : @eq lst (rotate (len x) (lfappend lf4 lf5)) (##hole##)
Sketch conj229_term_sketch0 : @eq natural (len x) (##hole##)
Sketch conj229_term_sketch1 : @eq lst (rotate (len x) (lfappend lf4 lf5)) (##hole##)
Sketch conj229_term_sketch2 : @eq lst (lfappend lf4 lf5) (##hole##)
Sketch conj229_term_sketch3 : @eq lst (lfappend y lf6) (##hole##)
Sketch conj230_sketch0 : @eq lst (rotate (len x) (lfappend lf4 lf5)) (##hole##)
Sketch conj230_sketch1 : @eq lst (rotate (##hole##) (lfappend lf4 lf5)) (lfappend y (Cons n x))
Sketch conj230_sketch2 : @eq lst (##hole##) (lfappend y (Cons n x))
Sketch conj230_sketch3 : @eq lst (rotate (len x) (##hole##)) (lfappend y (Cons n x))
Sketch conj230_sketch4 : @eq lst (rotate (len x) (lfappend lf4 lf5)) (lfappend y (##hole##))
Sketch conj230_term_sketch0 : @eq lst (lfappend y (Cons n x)) (##hole##)
Sketch conj230_term_sketch1 : @eq natural (len x) (##hole##)
Sketch conj230_term_sketch2 : @eq lst (rotate (len x) (lfappend lf4 lf5)) (##hole##)
Sketch conj230_term_sketch3 : @eq lst (lfappend lf4 lf5) (##hole##)
Sketch conj230_term_sketch4 : @eq lst (Cons n x) (##hole##)
Sketch conj237_sketch0 : @eq lst (rotate (##hole##) (lfappend lf4 (Cons n lf8))) (lfappend y lf6)
Sketch conj237_sketch1 : @eq lst (rotate (len x) (##hole##)) (lfappend y lf6)
Sketch conj237_sketch2 : @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8))) (##hole##)
Sketch conj237_sketch3 : @eq lst (rotate (len x) (lfappend lf4 (##hole##))) (lfappend y lf6)
Sketch conj237_sketch4 : @eq lst (##hole##) (lfappend y lf6)
Sketch conj237_term_sketch0 : @eq natural (len x) (##hole##)
Sketch conj237_term_sketch1 : @eq lst (lfappend lf4 (Cons n lf8)) (##hole##)
Sketch conj237_term_sketch2 : @eq lst (lfappend y lf6) (##hole##)
Sketch conj237_term_sketch3 : @eq lst (Cons n lf8) (##hole##)
Sketch conj237_term_sketch4 : @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8))) (##hole##)
Sketch conj238_sketch0 : @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8))) (##hole##)
Sketch conj238_sketch1 : @eq lst (rotate (##hole##) (lfappend lf4 (Cons n lf8)))
  (lfappend y (Cons n x))
Sketch conj238_sketch2 : @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8))) (lfappend y (##hole##))
Sketch conj238_sketch3 : @eq lst (rotate (len x) (##hole##)) (lfappend y (Cons n x))
Sketch conj238_sketch4 : @eq lst (rotate (len x) (lfappend lf4 (##hole##))) (lfappend y (Cons n x))
Sketch conj238_sketch5 : @eq lst (##hole##) (lfappend y (Cons n x))
Sketch conj238_term_sketch0 : @eq lst (lfappend y (Cons n x)) (##hole##)
Sketch conj238_term_sketch1 : @eq natural (len x) (##hole##)
Sketch conj238_term_sketch2 : @eq lst (Cons n x) (##hole##)
Sketch conj238_term_sketch3 : @eq lst (lfappend lf4 (Cons n lf8)) (##hole##)
Sketch conj238_term_sketch4 : @eq lst (Cons n lf8) (##hole##)
Sketch conj238_term_sketch5 : @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8))) (##hole##)
Sketch conj239_sketch0 : @eq lst (rotate (##hole##) (lfappend lf4 (Cons n Nil))) (lfappend y lf6)
Sketch conj239_sketch1 : @eq lst (rotate (len x) (lfappend lf4 (##hole##))) (lfappend y lf6)
Sketch conj239_sketch2 : @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil))) (##hole##)
Sketch conj239_sketch3 : @eq lst (##hole##) (lfappend y lf6)
Sketch conj239_sketch4 : @eq lst (rotate (len x) (##hole##)) (lfappend y lf6)
Sketch conj239_sketch5 : @eq lst (rotate (len x) (lfappend lf4 (Cons n (##hole##)))) (lfappend y lf6)
Sketch conj239_term_sketch0 : @eq natural (len x) (##hole##)
Sketch conj239_term_sketch1 : @eq lst (Cons n Nil) (##hole##)
Sketch conj239_term_sketch2 : @eq lst (lfappend y lf6) (##hole##)
Sketch conj239_term_sketch3 : @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil))) (##hole##)
Sketch conj239_term_sketch4 : @eq lst (lfappend lf4 (Cons n Nil)) (##hole##)
Sketch conj239_term_sketch5 : @eq lst Nil (##hole##)
Sketch conj240_sketch0 : @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil))) (##hole##)
Sketch conj240_sketch1 : @eq lst (rotate (##hole##) (lfappend lf4 (Cons n Nil)))
  (lfappend y (Cons n x))
Sketch conj240_sketch2 : @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil))) (lfappend y (##hole##))
Sketch conj240_sketch3 : @eq lst (rotate (len x) (lfappend lf4 (##hole##))) (lfappend y (Cons n x))
Sketch conj240_sketch4 : @eq lst (##hole##) (lfappend y (Cons n x))
Sketch conj240_sketch5 : @eq lst (rotate (len x) (##hole##)) (lfappend y (Cons n x))
Sketch conj240_sketch6 : @eq lst (rotate (len x) (lfappend lf4 (Cons n (##hole##))))
  (lfappend y (Cons n x))
Sketch conj240_term_sketch0 : @eq lst (lfappend y (Cons n x)) (##hole##)
Sketch conj240_term_sketch1 : @eq natural (len x) (##hole##)
Sketch conj240_term_sketch2 : @eq lst (Cons n x) (##hole##)
Sketch conj240_term_sketch3 : @eq lst (Cons n Nil) (##hole##)
Sketch conj240_term_sketch4 : @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil))) (##hole##)
Sketch conj240_term_sketch5 : @eq lst (lfappend lf4 (Cons n Nil)) (##hole##)
Sketch conj240_term_sketch6 : @eq lst Nil (##hole##)
Sketch conj245_sketch0 : @eq lst (##hole##) (lfappend y lf6)
Sketch conj245_sketch1 : @eq lst (rotate (##hole##) (lfappend (lfappend x y) lf5)) (lfappend y lf6)
Sketch conj245_sketch2 : @eq lst (rotate (len x) (lfappend (lfappend x y) lf5)) (##hole##)
Sketch conj245_sketch3 : @eq lst (rotate (len x) (##hole##)) (lfappend y lf6)
Sketch conj245_sketch4 : @eq lst (rotate (len x) (lfappend (##hole##) lf5)) (lfappend y lf6)
Sketch conj245_term_sketch0 : @eq lst (rotate (len x) (lfappend (lfappend x y) lf5)) (##hole##)
Sketch conj245_term_sketch1 : @eq natural (len x) (##hole##)
Sketch conj245_term_sketch2 : @eq lst (lfappend y lf6) (##hole##)
Sketch conj245_term_sketch3 : @eq lst (lfappend (lfappend x y) lf5) (##hole##)
Sketch conj245_term_sketch4 : @eq lst (lfappend x y) (##hole##)
Sketch conj246_sketch0 : @eq lst (rotate (len x) (lfappend (lfappend x y) lf5)) (##hole##)
Sketch conj246_sketch1 : @eq lst (##hole##) (lfappend y (Cons n x))
Sketch conj246_sketch2 : @eq lst (rotate (##hole##) (lfappend (lfappend x y) lf5))
  (lfappend y (Cons n x))
Sketch conj246_sketch3 : @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))
  (lfappend y (##hole##))
Sketch conj246_sketch4 : @eq lst (rotate (len x) (##hole##)) (lfappend y (Cons n x))
Sketch conj246_sketch5 : @eq lst (rotate (len x) (lfappend (##hole##) lf5)) (lfappend y (Cons n x))
Sketch conj246_term_sketch0 : @eq lst (lfappend y (Cons n x)) (##hole##)
Sketch conj246_term_sketch1 : @eq lst (rotate (len x) (lfappend (lfappend x y) lf5)) (##hole##)
Sketch conj246_term_sketch2 : @eq natural (len x) (##hole##)
Sketch conj246_term_sketch3 : @eq lst (Cons n x) (##hole##)
Sketch conj246_term_sketch4 : @eq lst (lfappend (lfappend x y) lf5) (##hole##)
Sketch conj246_term_sketch5 : @eq lst (lfappend x y) (##hole##)
Sketch conj253_sketch0 : @eq lst (##hole##) (lfappend y lf6)
Sketch conj253_sketch1 : @eq lst (rotate (##hole##) (lfappend (lfappend x y) (Cons n lf8)))
  (lfappend y lf6)
Sketch conj253_sketch2 : @eq lst (rotate (len x) (##hole##)) (lfappend y lf6)
Sketch conj253_sketch3 : @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8))) (##hole##)
Sketch conj253_sketch4 : @eq lst (rotate (len x) (lfappend (lfappend x y) (##hole##)))
  (lfappend y lf6)
Sketch conj253_sketch5 : @eq lst (rotate (len x) (lfappend (##hole##) (Cons n lf8))) (lfappend y lf6)
Sketch conj253_term_sketch0 : @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8))) (##hole##)
Sketch conj253_term_sketch1 : @eq natural (len x) (##hole##)
Sketch conj253_term_sketch2 : @eq lst (lfappend (lfappend x y) (Cons n lf8)) (##hole##)
Sketch conj253_term_sketch3 : @eq lst (lfappend y lf6) (##hole##)
Sketch conj253_term_sketch4 : @eq lst (Cons n lf8) (##hole##)
Sketch conj253_term_sketch5 : @eq lst (lfappend x y) (##hole##)
Sketch conj254_sketch0 : @eq lst (##hole##) (lfappend y (Cons n x))
Sketch conj254_sketch1 : @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8))) (##hole##)
Sketch conj254_sketch2 : @eq lst (rotate (##hole##) (lfappend (lfappend x y) (Cons n lf8)))
  (lfappend y (Cons n x))
Sketch conj254_sketch3 : @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))
  (lfappend y (##hole##))
Sketch conj254_sketch4 : @eq lst (rotate (len x) (##hole##)) (lfappend y (Cons n x))
Sketch conj254_sketch5 : @eq lst (rotate (len x) (lfappend (lfappend x y) (##hole##)))
  (lfappend y (Cons n x))
Sketch conj254_sketch6 : @eq lst (rotate (len x) (lfappend (##hole##) (Cons n lf8)))
  (lfappend y (Cons n x))
Sketch conj254_term_sketch0 : @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8))) (##hole##)
Sketch conj254_term_sketch1 : @eq lst (lfappend y (Cons n x)) (##hole##)
Sketch conj254_term_sketch2 : @eq natural (len x) (##hole##)
Sketch conj254_term_sketch3 : @eq lst (Cons n x) (##hole##)
Sketch conj254_term_sketch4 : @eq lst (lfappend (lfappend x y) (Cons n lf8)) (##hole##)
Sketch conj254_term_sketch5 : @eq lst (Cons n lf8) (##hole##)
Sketch conj254_term_sketch6 : @eq lst (lfappend x y) (##hole##)
Sketch conj255_sketch0 : @eq lst (##hole##) (lfappend y lf6)
Sketch conj255_sketch1 : @eq lst (rotate (##hole##) (lfappend (lfappend x y) (Cons n Nil)))
  (lfappend y lf6)
Sketch conj255_sketch2 : @eq lst (rotate (len x) (lfappend (lfappend x y) (##hole##)))
  (lfappend y lf6)
Sketch conj255_sketch3 : @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))) (##hole##)
Sketch conj255_sketch4 : @eq lst (rotate (len x) (##hole##)) (lfappend y lf6)
Sketch conj255_sketch5 : @eq lst (rotate (len x) (lfappend (##hole##) (Cons n Nil))) (lfappend y lf6)
Sketch conj255_sketch6 : @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n (##hole##))))
  (lfappend y lf6)
Sketch conj255_term_sketch0 : @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))) (##hole##)
Sketch conj255_term_sketch1 : @eq natural (len x) (##hole##)
Sketch conj255_term_sketch2 : @eq lst (Cons n Nil) (##hole##)
Sketch conj255_term_sketch3 : @eq lst (lfappend y lf6) (##hole##)
Sketch conj255_term_sketch4 : @eq lst (lfappend (lfappend x y) (Cons n Nil)) (##hole##)
Sketch conj255_term_sketch5 : @eq lst (lfappend x y) (##hole##)
Sketch conj255_term_sketch6 : @eq lst Nil (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 6661 seconds
Problems per Sketch:
Sketch conj254_term_sketch5 --> Problem  synth_9
Sketch conj238_sketch4 --> Problem  synth_88
Sketch conj181_term_sketch3 --> Problem  synth_18
Sketch conj101_term_sketch2 --> Problem  synth_5
Sketch conj253_term_sketch5 --> Problem  synth_18
Sketch conj63_sketch4 --> Problem  synth_24
Sketch conj238_sketch0 --> Problem  synth_35
Sketch conj246_sketch4 --> Problem  synth_26
Sketch conj240_sketch6 --> Problem  synth_93
Sketch conj130_sketch0 --> Problem  synth_50
Sketch conj53_term_sketch2 --> Problem  synth_18
Sketch conj125_term_sketch3 --> Problem  synth_9
Sketch conj127_sketch3 --> Problem  synth_31
Sketch conj182_term_sketch4 --> Problem  synth_18
Sketch conj109_term_sketch1 --> Problem  synth_8
Sketch conj63_term_sketch0 --> Problem  synth_25
Sketch conj191_sketch3 --> Problem  synth_55
Sketch conj190_term_sketch0 --> Problem  synth_49
Sketch conj127_term_sketch0 --> Problem  synth_49
Sketch conj173_sketch0 --> Problem  synth_51
Sketch conj61_term_sketch2 --> Problem  synth_9
Sketch conj246_term_sketch5 --> Problem  synth_18
Sketch conj246_sketch5 --> Problem  synth_98
Sketch conj246_sketch3 --> Problem  synth_97
Sketch conj237_term_sketch4 --> Problem  synth_35
Sketch conj130_sketch1 --> Problem  synth_52
Sketch conj130_term_sketch1 --> Problem  synth_53
Sketch conj254_sketch1 --> Problem  synth_45
Sketch conj175_term_sketch0 --> Problem  synth_11
Sketch conj192_term_sketch0 --> Problem  synth_25
Sketch conj101_sketch0 --> Problem  synth_30
Sketch conj246_term_sketch3 --> Problem  synth_53
Sketch conj238_term_sketch0 --> Problem  synth_49
Sketch conj246_sketch2 --> Problem  synth_96
Sketch conj226_term_sketch3 --> Problem  synth_29
Sketch conj230_sketch3 --> Problem  synth_26
Sketch conj175_sketch0 --> Problem  synth_51
Sketch conj192_sketch6 --> Problem  synth_76
Sketch conj47_sketch2 --> Problem  synth_3
Sketch conj253_sketch5 --> Problem  synth_101
Sketch conj192_sketch3 --> Problem  synth_70
Sketch conj174_sketch2 --> Problem  synth_49
Sketch conj253_term_sketch0 --> Problem  synth_45
Sketch conj237_sketch0 --> Problem  synth_84
Sketch conj182_sketch2 --> Problem  synth_65
Sketch conj181_sketch2 --> Problem  synth_55
Sketch conj176_term_sketch0 --> Problem  synth_49
Sketch conj237_sketch1 --> Problem  synth_81
Sketch conj238_sketch2 --> Problem  synth_87
Sketch conj125_term_sketch4 --> Problem  synth_18
Sketch conj97_term_sketch1 --> Problem  synth_29
Sketch conj226_sketch2 --> Problem  synth_79
Sketch conj162_sketch0 --> Problem  synth_2
Sketch conj125_sketch2 --> Problem  synth_31
Sketch conj246_sketch0 --> Problem  synth_41
Sketch conj239_sketch3 --> Problem  synth_51
Sketch conj239_term_sketch3 --> Problem  synth_38
Sketch conj125_sketch3 --> Problem  synth_43
Sketch conj192_term_sketch1 --> Problem  synth_49
Sketch conj189_sketch4 --> Problem  synth_68
Sketch conj230_term_sketch3 --> Problem  synth_5
Sketch conj225_term_sketch2 --> Problem  synth_51
Sketch conj47_term_sketch1 --> Problem  synth_12
Sketch conj245_term_sketch2 --> Problem  synth_51
Sketch conj240_term_sketch1 --> Problem  synth_28
Sketch conj182_sketch4 --> Problem  synth_66
Sketch conj254_sketch0 --> Problem  synth_49
Sketch conj45_sketch0 --> Problem  synth_1
Sketch conj255_term_sketch6 --> Problem  synth_14
Sketch conj226_sketch1 --> Problem  synth_78
Sketch conj97_term_sketch0 --> Problem  synth_28
Sketch conj237_term_sketch1 --> Problem  synth_8
Sketch conj161_sketch1 --> Problem  synth_2
Sketch conj53_term_sketch1 --> Problem  synth_17
Sketch conj190_term_sketch3 --> Problem  synth_22
Sketch conj117_sketch3 --> Problem  synth_40
Sketch conj63_sketch1 --> Problem  synth_19
Sketch conj190_sketch2 --> Problem  synth_69
Sketch conj189_sketch2 --> Problem  synth_21
Sketch conj239_term_sketch0 --> Problem  synth_28
Sketch conj237_sketch2 --> Problem  synth_35
Sketch conj182_term_sketch2 --> Problem  synth_53
Sketch conj190_term_sketch4 --> Problem  synth_9
Sketch conj229_sketch0 --> Problem  synth_80
Sketch conj173_term_sketch3 --> Problem  synth_9
Sketch conj181_sketch0 --> Problem  synth_51
Sketch conj101_sketch2 --> Problem  synth_31
Sketch conj245_sketch1 --> Problem  synth_94
Sketch conj254_term_sketch2 --> Problem  synth_28
Sketch conj127_sketch0 --> Problem  synth_1
Sketch conj165_sketch2 --> Problem  synth_4
Sketch conj240_term_sketch5 --> Problem  synth_13
Sketch conj176_term_sketch4 --> Problem  synth_13
Sketch conj240_term_sketch0 --> Problem  synth_49
Sketch conj191_sketch1 --> Problem  synth_67
Sketch conj175_sketch1 --> Problem  synth_58
Sketch conj245_term_sketch0 --> Problem  synth_41
Sketch conj230_sketch0 --> Problem  synth_32
Sketch conj189_sketch0 --> Problem  synth_51
Sketch conj254_sketch2 --> Problem  synth_102
Sketch conj61_term_sketch0 --> Problem  synth_21
Sketch conj61_sketch0 --> Problem  synth_1
Sketch conj111_term_sketch1 --> Problem  synth_12
Sketch conj192_sketch0 --> Problem  synth_49
Sketch conj253_term_sketch1 --> Problem  synth_28
Sketch conj129_sketch0 --> Problem  synth_50
Sketch conj181_sketch1 --> Problem  synth_16
Sketch conj165_sketch1 --> Problem  synth_55
Sketch conj255_term_sketch4 --> Problem  synth_26
Sketch conj47_term_sketch3 --> Problem  synth_14
Sketch conj33_sketch0 --> Problem  synth_1
Sketch conj246_term_sketch1 --> Problem  synth_41
Sketch conj192_term_sketch6 --> Problem  synth_14
Sketch conj239_sketch4 --> Problem  synth_81
Sketch conj166_term_sketch0 --> Problem  synth_49
Sketch conj239_term_sketch1 --> Problem  synth_12
Sketch conj255_term_sketch5 --> Problem  synth_18
Sketch conj230_sketch1 --> Problem  synth_82
Sketch conj182_sketch1 --> Problem  synth_16
Sketch conj191_term_sketch5 --> Problem  synth_14
Sketch conj191_sketch2 --> Problem  synth_25
Sketch conj190_sketch3 --> Problem  synth_56
Sketch conj176_sketch3 --> Problem  synth_60
Sketch conj230_sketch2 --> Problem  synth_49
Sketch conj175_sketch3 --> Problem  synth_55
Sketch conj162_term_sketch1 --> Problem  synth_2
Sketch conj125_sketch0 --> Problem  synth_1
Sketch conj53_term_sketch0 --> Problem  synth_16
Sketch conj190_term_sketch1 --> Problem  synth_21
Sketch conj254_sketch6 --> Problem  synth_105
Sketch conj175_term_sketch3 --> Problem  synth_13
Sketch conj175_sketch4 --> Problem  synth_61
Sketch conj239_term_sketch2 --> Problem  synth_51
Sketch conj45_sketch1 --> Problem  synth_3
Sketch conj230_term_sketch4 --> Problem  synth_53
Sketch conj254_term_sketch4 --> Problem  synth_22
Sketch conj101_term_sketch1 --> Problem  synth_32
Sketch conj254_sketch4 --> Problem  synth_26
Sketch conj109_term_sketch3 --> Problem  synth_35
Sketch conj239_sketch1 --> Problem  synth_85
Sketch conj225_sketch1 --> Problem  synth_51
Sketch conj125_term_sketch1 --> Problem  synth_28
Sketch conj182_term_sketch3 --> Problem  synth_17
Sketch conj45_term_sketch0 --> Problem  synth_7
Sketch conj192_sketch2 --> Problem  synth_74
Sketch conj33_term_sketch0 --> Problem  synth_2
Sketch conj245_term_sketch3 --> Problem  synth_17
Sketch conj182_term_sketch1 --> Problem  synth_49
Sketch conj97_sketch0 --> Problem  synth_27
Sketch conj192_term_sketch2 --> Problem  synth_53
Sketch conj182_term_sketch0 --> Problem  synth_16
Sketch conj239_term_sketch5 --> Problem  synth_14
Sketch conj225_term_sketch1 --> Problem  synth_29
Sketch conj191_term_sketch4 --> Problem  synth_18
Sketch conj61_sketch2 --> Problem  synth_19
Sketch conj238_term_sketch3 --> Problem  synth_8
Sketch conj117_term_sketch2 --> Problem  synth_17
Sketch conj182_sketch3 --> Problem  synth_56
Sketch conj192_term_sketch5 --> Problem  synth_18
Sketch conj192_sketch1 --> Problem  synth_25
Sketch conj240_term_sketch4 --> Problem  synth_38
Sketch conj161_term_sketch0 --> Problem  synth_2
Sketch conj191_term_sketch2 --> Problem  synth_51
Sketch conj63_sketch2 --> Problem  synth_3
Sketch conj125_sketch1 --> Problem  synth_42
Sketch conj229_sketch1 --> Problem  synth_51
Sketch conj255_term_sketch0 --> Problem  synth_49
Sketch conj181_term_sketch2 --> Problem  synth_17
Sketch conj192_sketch5 --> Problem  synth_75
Sketch conj254_term_sketch6 --> Problem  synth_18
Sketch conj176_term_sketch1 --> Problem  synth_11
Sketch conj176_sketch5 --> Problem  synth_63
Sketch conj47_term_sketch0 --> Problem  synth_11
Sketch conj255_sketch6 --> Problem  synth_108
Sketch conj253_term_sketch4 --> Problem  synth_9
Sketch conj117_sketch2 --> Problem  synth_31
Sketch conj61_term_sketch3 --> Problem  synth_18
Sketch conj226_sketch0 --> Problem  synth_29
Sketch conj239_sketch5 --> Problem  synth_90
Sketch conj182_sketch0 --> Problem  synth_49
Sketch conj161_term_sketch1 --> Problem  synth_51
Sketch conj253_sketch0 --> Problem  synth_51
Sketch conj176_sketch1 --> Problem  synth_49
Sketch conj111_term_sketch4 --> Problem  synth_14
Sketch conj97_sketch1 --> Problem  synth_1
Sketch conj191_sketch5 --> Problem  synth_73
Sketch conj101_term_sketch0 --> Problem  synth_28
Sketch conj189_term_sketch0 --> Problem  synth_21
Sketch conj237_sketch3 --> Problem  synth_85
Sketch conj175_term_sketch2 --> Problem  synth_51
Sketch conj225_sketch2 --> Problem  synth_29
Sketch conj109_sketch0 --> Problem  synth_33
Sketch conj47_term_sketch2 --> Problem  synth_13
Sketch conj192_sketch4 --> Problem  synth_56
Sketch conj166_term_sketch3 --> Problem  synth_53
Sketch conj189_term_sketch3 --> Problem  synth_9
Sketch conj111_term_sketch2 --> Problem  synth_38
Sketch conj176_sketch2 --> Problem  synth_62
Sketch conj240_sketch5 --> Problem  synth_26
Sketch conj238_sketch3 --> Problem  synth_26
Sketch conj162_sketch2 --> Problem  synth_54
Sketch conj162_term_sketch2 --> Problem  synth_53
Sketch conj101_sketch1 --> Problem  synth_1
Sketch conj37_sketch1 --> Problem  synth_3
Sketch conj245_sketch3 --> Problem  synth_81
Sketch conj176_term_sketch3 --> Problem  synth_12
Sketch conj117_term_sketch1 --> Problem  synth_28
Sketch conj174_term_sketch0 --> Problem  synth_49
Sketch conj53_sketch1 --> Problem  synth_3
Sketch conj127_sketch5 --> Problem  synth_48
Sketch conj254_term_sketch0 --> Problem  synth_45
Sketch conj175_sketch2 --> Problem  synth_11
Sketch conj174_term_sketch4 --> Problem  synth_9
Sketch conj238_sketch1 --> Problem  synth_86
Sketch conj240_sketch0 --> Problem  synth_38
Sketch conj176_sketch0 --> Problem  synth_11
Sketch conj173_term_sketch2 --> Problem  synth_51
Sketch conj237_sketch4 --> Problem  synth_51
Sketch conj240_term_sketch6 --> Problem  synth_14
Sketch conj61_sketch1 --> Problem  synth_3
Sketch conj166_term_sketch2 --> Problem  synth_5
Sketch conj238_term_sketch2 --> Problem  synth_53
Sketch conj173_sketch2 --> Problem  synth_7
Sketch conj130_term_sketch0 --> Problem  synth_49
Sketch conj253_term_sketch3 --> Problem  synth_51
Sketch conj240_sketch3 --> Problem  synth_88
Sketch conj174_sketch4 --> Problem  synth_60
Sketch conj254_term_sketch3 --> Problem  synth_53
Sketch conj189_term_sketch2 --> Problem  synth_51
Sketch conj109_term_sketch2 --> Problem  synth_9
Sketch conj127_sketch4 --> Problem  synth_47
Sketch conj111_sketch3 --> Problem  synth_31
Sketch conj63_term_sketch4 --> Problem  synth_14
Sketch conj181_term_sketch0 --> Problem  synth_16
Sketch conj225_sketch0 --> Problem  synth_77
Sketch conj125_term_sketch2 --> Problem  synth_22
Sketch conj240_term_sketch3 --> Problem  synth_12
Sketch conj166_sketch0 --> Problem  synth_4
Sketch conj109_sketch1 --> Problem  synth_31
Sketch conj238_term_sketch4 --> Problem  synth_9
Sketch conj190_sketch0 --> Problem  synth_21
Sketch conj237_term_sketch0 --> Problem  synth_28
Sketch conj127_term_sketch5 --> Problem  synth_14
Sketch conj254_term_sketch1 --> Problem  synth_49
Sketch conj47_sketch3 --> Problem  synth_10
Sketch conj255_term_sketch3 --> Problem  synth_51
Sketch conj239_sketch0 --> Problem  synth_89
Sketch conj245_sketch4 --> Problem  synth_95
Sketch conj229_sketch2 --> Problem  synth_81
Sketch conj117_term_sketch3 --> Problem  synth_18
Sketch conj63_term_sketch1 --> Problem  synth_12
Sketch conj230_sketch4 --> Problem  synth_83
Sketch conj127_term_sketch4 --> Problem  synth_18
Sketch conj226_term_sketch0 --> Problem  synth_49
Sketch conj109_sketch2 --> Problem  synth_34
Sketch conj237_term_sketch2 --> Problem  synth_51
Sketch conj238_term_sketch1 --> Problem  synth_28
Sketch conj226_term_sketch1 --> Problem  synth_28
Sketch conj37_sketch0 --> Problem  synth_1
Sketch conj109_term_sketch0 --> Problem  synth_28
Sketch conj239_term_sketch4 --> Problem  synth_13
Sketch conj47_sketch1 --> Problem  synth_6
Sketch conj253_sketch4 --> Problem  synth_100
Sketch conj127_term_sketch3 --> Problem  synth_26
Sketch conj255_sketch4 --> Problem  synth_81
Sketch conj255_sketch2 --> Problem  synth_100
Sketch conj166_sketch2 --> Problem  synth_56
Sketch conj237_term_sketch3 --> Problem  synth_9
Sketch conj53_sketch2 --> Problem  synth_15
Sketch conj190_sketch1 --> Problem  synth_49
Sketch conj109_sketch3 --> Problem  synth_1
Sketch conj176_term_sketch2 --> Problem  synth_53
Sketch conj253_term_sketch2 --> Problem  synth_22
Sketch conj173_sketch1 --> Problem  synth_55
Sketch conj246_term_sketch2 --> Problem  synth_28
Sketch conj246_term_sketch0 --> Problem  synth_49
Sketch conj174_term_sketch3 --> Problem  synth_8
Sketch conj174_term_sketch2 --> Problem  synth_7
Sketch conj174_term_sketch1 --> Problem  synth_53
Sketch conj255_term_sketch2 --> Problem  synth_12
Sketch conj166_term_sketch1 --> Problem  synth_4
Sketch conj165_term_sketch1 --> Problem  synth_5
Sketch conj255_sketch5 --> Problem  synth_107
Sketch conj127_term_sketch2 --> Problem  synth_12
Sketch conj111_sketch1 --> Problem  synth_34
Sketch conj229_term_sketch3 --> Problem  synth_51
Sketch conj238_sketch5 --> Problem  synth_49
Sketch conj239_sketch2 --> Problem  synth_38
Sketch conj226_sketch3 --> Problem  synth_49
Sketch conj63_term_sketch2 --> Problem  synth_26
Sketch conj190_sketch5 --> Problem  synth_71
Sketch conj253_sketch1 --> Problem  synth_99
Sketch conj245_sketch0 --> Problem  synth_51
Sketch conj173_term_sketch1 --> Problem  synth_8
Sketch conj45_term_sketch2 --> Problem  synth_9
Sketch conj117_sketch0 --> Problem  synth_1
Sketch conj254_sketch3 --> Problem  synth_103
Sketch conj191_sketch4 --> Problem  synth_72
Sketch conj189_sketch3 --> Problem  synth_67
Sketch conj246_sketch1 --> Problem  synth_49
Sketch conj189_term_sketch4 --> Problem  synth_18
Sketch conj111_term_sketch3 --> Problem  synth_13
Sketch conj240_term_sketch2 --> Problem  synth_53
Sketch conj245_term_sketch1 --> Problem  synth_28
Sketch conj173_term_sketch0 --> Problem  synth_7
Sketch conj229_sketch3 --> Problem  synth_32
Sketch conj111_term_sketch0 --> Problem  synth_28
Sketch conj191_sketch0 --> Problem  synth_51
Sketch conj127_sketch2 --> Problem  synth_43
Sketch conj111_sketch2 --> Problem  synth_1
Sketch conj189_term_sketch1 --> Problem  synth_22
Sketch conj192_term_sketch3 --> Problem  synth_12
Sketch conj240_sketch1 --> Problem  synth_91
Sketch conj125_term_sketch0 --> Problem  synth_45
Sketch conj166_sketch1 --> Problem  synth_49
Sketch conj165_sketch0 --> Problem  synth_51
Sketch conj240_sketch4 --> Problem  synth_49
Sketch conj162_sketch1 --> Problem  synth_49
Sketch conj174_sketch3 --> Problem  synth_56
Sketch conj255_term_sketch1 --> Problem  synth_28
Sketch conj238_term_sketch5 --> Problem  synth_35
Sketch conj176_term_sketch5 --> Problem  synth_14
Sketch conj229_term_sketch0 --> Problem  synth_28
Sketch conj53_sketch0 --> Problem  synth_1
Sketch conj190_term_sketch5 --> Problem  synth_18
Sketch conj129_term_sketch0 --> Problem  synth_51
Sketch conj230_term_sketch2 --> Problem  synth_32
Sketch conj226_term_sketch2 --> Problem  synth_53
Sketch conj181_sketch3 --> Problem  synth_64
Sketch conj161_sketch0 --> Problem  synth_51
Sketch conj45_sketch2 --> Problem  synth_6
Sketch conj175_term_sketch4 --> Problem  synth_14
Sketch conj165_term_sketch0 --> Problem  synth_4
Sketch conj61_sketch3 --> Problem  synth_20
Sketch conj166_sketch3 --> Problem  synth_57
Sketch conj230_term_sketch1 --> Problem  synth_28
Sketch conj191_term_sketch0 --> Problem  synth_25
Sketch conj125_sketch4 --> Problem  synth_44
Sketch conj191_term_sketch3 --> Problem  synth_26
Sketch conj37_term_sketch0 --> Problem  synth_4
Sketch conj240_sketch2 --> Problem  synth_92
Sketch conj189_sketch1 --> Problem  synth_55
Sketch conj253_sketch2 --> Problem  synth_81
Sketch conj229_term_sketch2 --> Problem  synth_5
Sketch conj176_sketch4 --> Problem  synth_56
Sketch conj225_term_sketch0 --> Problem  synth_28
Sketch conj63_term_sketch3 --> Problem  synth_18
Sketch conj63_sketch0 --> Problem  synth_1
Sketch conj63_sketch3 --> Problem  synth_23
Sketch conj111_sketch4 --> Problem  synth_37
Sketch conj117_term_sketch0 --> Problem  synth_41
Sketch conj117_sketch1 --> Problem  synth_39
Sketch conj127_sketch1 --> Problem  synth_46
Sketch conj245_sketch2 --> Problem  synth_41
Sketch conj253_sketch3 --> Problem  synth_45
Sketch conj255_sketch0 --> Problem  synth_51
Sketch conj255_sketch1 --> Problem  synth_106
Sketch conj229_term_sketch1 --> Problem  synth_32
Sketch conj111_sketch0 --> Problem  synth_36
Sketch conj190_sketch4 --> Problem  synth_70
Sketch conj175_term_sketch1 --> Problem  synth_12
Sketch conj61_term_sketch1 --> Problem  synth_22
Sketch conj230_term_sketch0 --> Problem  synth_49
Sketch conj192_term_sketch4 --> Problem  synth_26
Sketch conj37_term_sketch1 --> Problem  synth_5
Sketch conj45_term_sketch1 --> Problem  synth_8
Sketch conj127_term_sketch1 --> Problem  synth_28
Sketch conj165_term_sketch2 --> Problem  synth_51
Sketch conj255_sketch3 --> Problem  synth_49
Sketch conj246_term_sketch4 --> Problem  synth_17
Sketch conj191_term_sketch1 --> Problem  synth_12
Sketch conj181_term_sketch1 --> Problem  synth_51
Sketch conj245_term_sketch4 --> Problem  synth_18
Sketch conj174_sketch0 --> Problem  synth_7
Sketch conj162_term_sketch0 --> Problem  synth_49
Sketch conj254_sketch5 --> Problem  synth_104
Sketch conj174_sketch1 --> Problem  synth_59
Sketch conj173_sketch3 --> Problem  synth_58
Sketch conj190_term_sketch2 --> Problem  synth_53
Sketch conj47_sketch0 --> Problem  synth_1


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 7256 seconds

Problem: synth_63
 rotate (len y) Nil
 rotate (len lf4) Nil
 rotate (len x) Nil
 rotate n Nil
 rotate lf7 Nil
 Nil

Problem: synth_106
 len (rotate (len lf6) x)
 len match x with | Cons y x => rotate n (lfappend x (Cons y Nil)) | Nil => Nil end
 len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end
 len (rotate n x)
 len (lfappend x Nil)
 len x

Problem: synth_91
 len (rotate (len x) x)
 len match x with | Cons y x => rotate n (lfappend x (Cons y Nil)) | Nil => Nil end
 len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end
 len (rotate n x)
 len (lfappend x Nil)
 len x

Problem: synth_68

Problem: synth_67

Problem: synth_77

Problem: synth_64

Problem: synth_96
 len (rotate (len lf5) x)
 len match x with | Cons y x => rotate n (lfappend x (Cons y Nil)) | Nil => Nil end
 len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end
 len (rotate n x)
 len (lfappend x Nil)
 len x

Problem: synth_11
 lfappend (rotate n Nil) (rotate lf7 (lfappend lf4 (Cons n Nil)))
 lfappend (rotate lf7 Nil) (rotate lf7 (lfappend lf4 (Cons n Nil)))
 match rotate lf7 (lfappend lf4 (Cons n Nil)) with | Cons y x => rotate (len lf4) (lfappend x (Cons y Nil)) | Nil => Nil end
 match rotate lf7 (Cons n lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end
 rotate lf7 (lfappend (lfappend lf4 Nil) (Cons n Nil))
 rotate lf7 (lfappend lf4 (Cons n Nil))

Problem: synth_54

Problem: synth_39
 len (rotate (len y) x)
 len (rotate (len x) x)
 len (rotate (len lf5) x)
 len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end
 len (lfappend x Nil)
 len x

Problem: synth_46
 len (rotate (len x) x)
 len match x with | Cons y x => rotate n (lfappend x (Cons y Nil)) | Nil => Nil end
 len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end
 len (rotate n x)
 len (lfappend x Nil)
 len x

Problem: synth_101
 rotate (len y) (lfappend y x)
 lfappend lf8 (lfappend x y)
 lfappend x (lfappend lf8 y)
 lfappend x (lfappend y lf8)
 lfappend x (lfappend y Nil)
 lfappend x y

Problem: synth_98
 lfappend x (rotate (len y) y)
 lfappend (lfappend x Nil) y
 lfappend (lfappend x y) Nil
 rotate (len y) (lfappend y x)
 lfappend x (lfappend y Nil)
 lfappend x y

Problem: synth_100

Problem: synth_66
 lfappend (rotate lf7 x) y
 lfappend (lfappend x Nil) y
 lfappend (lfappend x y) Nil
 rotate (len y) (lfappend y x)
 lfappend x (lfappend y Nil)
 lfappend x y

Problem: synth_57

Problem: synth_59

Problem: synth_31

Problem: synth_8
 lfappend lf4 (Cons n (rotate n Nil))
 lfappend lf8 (lfappend lf4 (Cons n Nil))
 lfappend lf4 (lfappend lf8 (Cons n Nil))
 lfappend lf4 (rotate n (Cons n Nil))
 lfappend lf4 (Cons n lf8)
 lfappend lf4 (Cons n Nil)

Problem: synth_34

Problem: synth_5
 lfappend (lfappend lf4 Nil) lf5
 lfappend (lfappend lf4 lf5) Nil
 rotate (len lf5) (lfappend lf5 lf4)
 match lfappend lf5 lf4 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end
 lfappend lf4 (lfappend lf5 Nil)
 lfappend lf4 lf5

Problem: synth_37
 rotate n (rotate n Nil)
 rotate (len lf3) Nil
 rotate (len lf4) Nil
 rotate (len x) Nil
 rotate n Nil
 Nil

Problem: synth_58

Problem: synth_53
 rotate (len x) (lfappend x (Cons n Nil))
 Cons n (rotate (len x) (lfappend x Nil))
 Cons n (lfappend x (rotate n Nil))
 Cons n (rotate (len x) x)
 Cons n (lfappend x Nil)
 Cons n x

Problem: synth_2
 rotate lf7 (lfappend lf2 (rotate lf7 Nil))
 rotate lf7 (rotate (len lf2) lf2)
 lfappend (rotate lf7 lf2) Nil
 rotate (len lf2) (rotate lf7 lf2)
 rotate lf7 (lfappend lf2 Nil)
 rotate lf7 lf2

Problem: synth_95
 lfappend x (rotate (len y) y)
 lfappend (lfappend x Nil) y
 lfappend (lfappend x y) Nil
 rotate (len y) (lfappend y x)
 lfappend x (lfappend y Nil)
 lfappend x y

Problem: synth_22
 lfappend (lfappend x y) (lfappend lf8 (Cons n Nil))
 lfappend (lfappend x y) (rotate n (Cons n Nil))
 lfappend (lfappend x y) (Cons n lf8)
 lfappend (lfappend x y) (Cons n Nil)
 lfappend x (lfappend y (Cons n lf8))
 lfappend x (lfappend y (Cons n Nil))

Problem: synth_18
 lfappend x (rotate (len y) y)
 lfappend (lfappend x Nil) y
 lfappend (lfappend x y) Nil
 rotate (len y) (lfappend y x)
 lfappend x (lfappend y Nil)
 lfappend x y

Problem: synth_21
 lfappend lf8 (lfappend y (Cons n x))
 lfappend y (lfappend lf8 (Cons n x))
 lfappend y (Cons n (rotate lf7 x))
 lfappend y (Cons n (lfappend x lf8))
 lfappend y (Cons n (lfappend x Nil))
 lfappend y (Cons n x)

Problem: synth_72

Problem: synth_56
 lfappend (lfappend x Nil) (lfappend y (Cons n Nil))
 lfappend (lfappend x y) (rotate n (Cons n Nil))
 lfappend (lfappend x y) (rotate lf7 (Cons n Nil))
 lfappend (lfappend x y) (Cons n (rotate lf7 Nil))
 lfappend (lfappend x y) (Cons n Nil)
 lfappend x (lfappend y (Cons n Nil))

Problem: synth_41
 lfappend (lfappend y Nil) (lfappend lf5 x)
 lfappend (lfappend y lf5) (lfappend x Nil)
 lfappend y (rotate (len x) (lfappend x lf5))
 lfappend y (lfappend lf5 (lfappend x Nil))
 lfappend (lfappend y lf5) x
 lfappend y (lfappend lf5 x)

Problem: synth_49
 rotate (len x) (lfappend (lfappend x y) (Cons n Nil))
 lfappend (rotate n Nil) (lfappend y (Cons n x))
 lfappend (lfappend y Nil) (Cons n (lfappend x Nil))
 lfappend (lfappend y Nil) (Cons n x)
 lfappend y (Cons n (lfappend x Nil))
 lfappend y (Cons n x)

Problem: synth_75
 lfappend (rotate lf7 x) y
 lfappend (lfappend x Nil) y
 lfappend (lfappend x y) Nil
 rotate (len y) (lfappend y x)
 lfappend x (lfappend y Nil)
 lfappend x y

Problem: synth_25
 rotate lf7 (lfappend (lfappend x y) (Cons n Nil))
 lfappend (lfappend y Nil) (Cons n x)
 lfappend y (rotate lf7 (lfappend x (Cons n Nil)))
 lfappend y (Cons n (rotate lf7 x))
 lfappend y (Cons n (lfappend x Nil))
 lfappend y (Cons n x)

Problem: synth_13
 lfappend (lfappend lf4 Nil) (rotate n (Cons n Nil))
 lfappend (lfappend lf4 Nil) (Cons n Nil)
 lfappend lf4 (rotate (len lf4) (Cons n Nil))
 lfappend lf4 (Cons n (rotate n Nil))
 lfappend lf4 (rotate n (Cons n Nil))
 lfappend lf4 (Cons n Nil)

Problem: synth_6

Problem: synth_4
 rotate lf7 (rotate (len lf5) (lfappend lf5 lf4))
 rotate lf7 match lfappend lf5 lf4 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end
 rotate lf7 (lfappend lf4 (rotate lf7 lf5))
 rotate lf7 (lfappend lf4 (lfappend lf5 Nil))
 match lfappend lf5 lf4 with | Cons y x => rotate lf7 (lfappend x (Cons y Nil)) | Nil => Nil end
 rotate lf7 (lfappend lf4 lf5)

Problem: synth_38
 rotate (len x) (lfappend lf4 (rotate (len x) (Cons n Nil)))
 rotate (len x) (lfappend lf4 (Cons n (rotate n Nil)))
 rotate (len x) (lfappend lf4 (rotate n (Cons n Nil)))
 rotate (len x) (lfappend (lfappend lf4 Nil) (Cons n Nil))
 match rotate (len x) (Cons n lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end
 rotate (len x) (lfappend lf4 (Cons n Nil))

Problem: synth_105
 rotate (len y) (lfappend y x)
 lfappend lf8 (lfappend x y)
 lfappend x (lfappend lf8 y)
 lfappend x (lfappend y lf8)
 lfappend x (lfappend y Nil)
 lfappend x y

Problem: synth_104
 Cons n (rotate (len x) Nil)
 rotate (len y) (Cons n Nil)
 rotate (len x) (Cons n Nil)
 Cons n (rotate n Nil)
 rotate n (Cons n Nil)
 Cons n Nil

Problem: synth_65
 match lfappend lf5 x with | Cons y x => rotate lf7 (lfappend x (Cons y Nil)) | Nil => Nil end
 rotate (len x) (lfappend x lf5)
 lfappend lf5 (rotate lf7 x)
 rotate lf7 (lfappend x lf5)
 lfappend lf5 (lfappend x Nil)
 lfappend lf5 x

Problem: synth_23

Problem: synth_88
 rotate (len y) (Cons n Nil)
 rotate (len lf4) (Cons n Nil)
 rotate (len x) (Cons n Nil)
 Cons n (rotate n Nil)
 rotate n (Cons n Nil)
 Cons n Nil

Problem: synth_102
 len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end
 len (lfappend lf8 x)
 len (rotate n x)
 len (lfappend x lf8)
 len (lfappend x Nil)
 len x

Problem: synth_19

Problem: synth_10
 rotate lf7 (rotate lf7 Nil)
 rotate (len lf3) Nil
 rotate (len lf4) Nil
 rotate n Nil
 rotate lf7 Nil
 Nil

Problem: synth_24
 rotate (len lf3) Nil
 rotate (len y) Nil
 rotate (len x) Nil
 rotate n Nil
 rotate lf7 Nil
 Nil

Problem: synth_97
 lfappend lf5 (rotate (len x) x)
 lfappend (lfappend lf5 Nil) x
 lfappend (lfappend lf5 x) Nil
 rotate (len x) (lfappend x lf5)
 lfappend lf5 (lfappend x Nil)
 lfappend lf5 x

Problem: synth_92
 rotate (len x) (lfappend x (Cons n Nil))
 Cons n (rotate (len x) (lfappend x Nil))
 Cons n (lfappend x (rotate n Nil))
 Cons n (rotate (len x) x)
 Cons n (lfappend x Nil)
 Cons n x

Problem: synth_32
 match rotate (len x) (lfappend lf5 lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end
 rotate (len x) (rotate (len lf5) (lfappend lf5 lf4))
 rotate (len x) match lfappend lf5 lf4 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end
 rotate (len x) (lfappend lf4 (lfappend lf5 Nil))
 match lfappend lf5 lf4 with | Cons y x0 => rotate (len x) (lfappend x0 (Cons y Nil)) | Nil => Nil end
 rotate (len x) (lfappend lf4 lf5)

Problem: synth_48
 rotate n (rotate n Nil)
 rotate (len lf3) Nil
 rotate (len y) Nil
 rotate (len x) Nil
 rotate n Nil
 Nil

Problem: synth_51
 lfappend y (rotate (len lf6) lf6)
 lfappend (lfappend y Nil) lf6
 lfappend (lfappend y lf6) Nil
 rotate (len lf6) (lfappend lf6 y)
 lfappend y (lfappend lf6 Nil)
 lfappend y lf6

Problem: synth_35
 match lfappend lf8 (Cons n lf4) with | Cons y x0 => rotate (len x) (lfappend x0 (Cons y Nil)) | Nil => Nil end
 rotate (len x) (lfappend (lfappend lf4 lf8) (Cons n Nil))
 rotate (len x) (lfappend (lfappend lf4 Nil) (Cons n Nil))
 match rotate (len x) (Cons n lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end
 rotate (len x) (lfappend lf4 (Cons n lf8))
 rotate (len x) (lfappend lf4 (Cons n Nil))

Problem: synth_28
 len (rotate (len x) (lfappend x Nil))
 len match lfappend x Nil with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end
 len (rotate (len x) x)
 len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end
 len (lfappend x Nil)
 len x

Problem: synth_90
 rotate (len y) Nil
 rotate (len lf4) Nil
 rotate (len x) Nil
 rotate (len lf6) Nil
 rotate n Nil
 Nil

Problem: synth_73
 rotate (len y) Nil
 rotate (len x) Nil
 rotate (len lf6) Nil
 rotate n Nil
 rotate lf7 Nil
 Nil

Problem: synth_17
 lfappend (lfappend x y) (lfappend lf5 Nil)
 lfappend x (rotate (len lf5) (lfappend lf5 y))
 lfappend x match lfappend lf5 y with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end
 lfappend x (lfappend y (lfappend lf5 Nil))
 lfappend (lfappend x y) lf5
 lfappend x (lfappend y lf5)

Problem: synth_29
 rotate (len lf2) (rotate (len x) (lfappend lf2 Nil))
 rotate (len x) (rotate (len lf2) (lfappend lf2 Nil))
 rotate (len lf2) (rotate (len x) lf2)
 rotate (len x) (rotate (len lf2) lf2)
 rotate (len x) (lfappend lf2 Nil)
 rotate (len x) lf2

Problem: synth_45
 lfappend y (Cons n (lfappend lf8 x))
 lfappend lf8 (lfappend y (Cons n x))
 lfappend y (lfappend lf8 (Cons n x))
 lfappend y (Cons n (lfappend x lf8))
 lfappend y (Cons n (lfappend x Nil))
 lfappend y (Cons n x)

Problem: synth_76
 rotate lf7 (rotate lf7 Nil)
 rotate (len y) Nil
 rotate (len x) Nil
 rotate n Nil
 rotate lf7 Nil
 Nil

Problem: synth_26
 match lfappend y (Cons n x) with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end
 lfappend (lfappend x y) (Cons n (rotate n Nil))
 lfappend (lfappend x Nil) (lfappend y (Cons n Nil))
 lfappend (lfappend x y) (rotate n (Cons n Nil))
 lfappend (lfappend x y) (Cons n Nil)
 lfappend x (lfappend y (Cons n Nil))

Problem: synth_70
 rotate (len x) (Cons n Nil)
 Cons n (rotate n Nil)
 rotate n (Cons n Nil)
 rotate lf7 (Cons n Nil)
 Cons n (rotate lf7 Nil)
 Cons n Nil

Problem: synth_9
 Cons n (lfappend lf8 Nil)
 Cons n (rotate n Nil)
 lfappend lf8 (Cons n Nil)
 rotate n (Cons n Nil)
 Cons n lf8
 Cons n Nil

Problem: synth_30

Problem: synth_81
 match lfappend y (lfappend lf6 Nil) with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end
 match rotate (len y) (lfappend y lf6) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end
 rotate (len y) match lfappend y lf6 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end
 match lfappend lf6 (lfappend y Nil) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end
 match lfappend y lf6 with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end
 match lfappend lf6 y with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end

Problem: synth_1
 lfappend lf3 (rotate (len lf3) Nil)
 lfappend (lfappend lf3 Nil) Nil
 rotate (len lf3) (lfappend lf3 Nil)
 rotate (len lf3) lf3
 lfappend lf3 Nil
 lf3

Problem: synth_69
 Cons n (lfappend lf8 x)
 lfappend lf8 (Cons n x)
 Cons n (rotate lf7 x)
 Cons n (lfappend x lf8)
 Cons n (lfappend x Nil)
 Cons n x

Problem: synth_86
 len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end
 len (lfappend lf8 x)
 len (rotate n x)
 len (lfappend x lf8)
 len (lfappend x Nil)
 len x

Problem: synth_55
 match lfappend y (lfappend lf6 Nil) with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end
 match rotate (len y) (lfappend y lf6) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end
 rotate (len y) match lfappend y lf6 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end
 match lfappend lf6 (lfappend y Nil) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end
 match lfappend y lf6 with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end
 match lfappend lf6 y with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end

Problem: synth_107
 lfappend x (rotate (len y) y)
 lfappend (lfappend x Nil) y
 lfappend (lfappend x y) Nil
 rotate (len y) (lfappend y x)
 lfappend x (lfappend y Nil)
 lfappend x y

Problem: synth_71
 rotate (len y) (lfappend y x)
 lfappend lf8 (lfappend x y)
 lfappend x (lfappend lf8 y)
 lfappend x (lfappend y lf8)
 lfappend x (lfappend y Nil)
 lfappend x y

Problem: synth_15

Problem: synth_14
 Nil

Problem: synth_103
 rotate (len lf8) (Cons n x)
 Cons n (lfappend lf8 x)
 lfappend lf8 (Cons n x)
 Cons n (lfappend x lf8)
 Cons n (lfappend x Nil)
 Cons n x

Problem: synth_87
 rotate (len lf8) (Cons n x)
 Cons n (lfappend lf8 x)
 lfappend lf8 (Cons n x)
 Cons n (lfappend x lf8)
 Cons n (lfappend x Nil)
 Cons n x

Problem: synth_79

Problem: synth_83
 lfappend lf5 (rotate (len x) x)
 lfappend (lfappend lf5 Nil) x
 lfappend (lfappend lf5 x) Nil
 rotate (len x) (lfappend x lf5)
 lfappend lf5 (lfappend x Nil)
 lfappend lf5 x

Problem: synth_12
 Cons n (rotate n (rotate n Nil))
 rotate n (Cons n (rotate n Nil))
 rotate n (rotate n (Cons n Nil))
 Cons n (rotate n Nil)
 rotate n (Cons n Nil)
 Cons n Nil

Problem: synth_85

Problem: synth_62

Problem: synth_74
 Cons n (lfappend x (rotate lf7 Nil))
 Cons n (rotate (len x) x)
 rotate lf7 (lfappend x (Cons n Nil))
 Cons n (rotate lf7 x)
 Cons n (lfappend x Nil)
 Cons n x

Problem: synth_50
 lfappend lf1 (rotate (len lf1) Nil)
 lfappend (lfappend lf1 Nil) Nil
 rotate (len lf1) (lfappend lf1 Nil)
 rotate (len lf1) lf1
 lfappend lf1 Nil
 lf1

Problem: synth_84

Problem: synth_20

Problem: synth_94
 len (rotate (len x) x)
 len (rotate (len lf5) x)
 len (rotate (len lf6) x)
 len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end
 len (lfappend x Nil)
 len x

Problem: synth_108
 rotate n (rotate n Nil)
 rotate (len y) Nil
 rotate (len x) Nil
 rotate (len lf6) Nil
 rotate n Nil
 Nil

Problem: synth_7
 match rotate lf7 (Cons n lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end
 rotate lf7 (lfappend (lfappend lf4 lf8) (Cons n Nil))
 rotate lf7 (lfappend (lfappend lf4 Nil) (Cons n Nil))
 lfappend lf8 (rotate lf7 (lfappend lf4 (Cons n Nil)))
 rotate lf7 (lfappend lf4 (Cons n lf8))
 rotate lf7 (lfappend lf4 (Cons n Nil))

Problem: synth_61
 rotate (len y) Nil
 rotate (len lf4) Nil
 rotate (len lf6) Nil
 rotate n Nil
 rotate lf7 Nil
 Nil

Problem: synth_27

Problem: synth_42
 len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end
 len (lfappend lf8 x)
 len (rotate n x)
 len (lfappend x lf8)
 len (lfappend x Nil)
 len x

Problem: synth_16
 lfappend y (lfappend lf5 (rotate lf7 x))
 rotate lf7 (lfappend x (lfappend y lf5))
 lfappend y (rotate lf7 (lfappend x lf5))
 lfappend y (lfappend lf5 (lfappend x Nil))
 lfappend (lfappend y lf5) x
 lfappend y (lfappend lf5 x)

Problem: synth_93
 rotate n (rotate n Nil)
 rotate (len y) Nil
 rotate (len lf4) Nil
 rotate (len x) Nil
 rotate n Nil
 Nil

Problem: synth_40

Problem: synth_80

Problem: synth_33

Problem: synth_89

Problem: synth_47

Problem: synth_3

Problem: synth_52

Problem: synth_44

Problem: synth_60
 rotate (len x) (Cons n Nil)
 Cons n (rotate n Nil)
 rotate n (Cons n Nil)
 rotate lf7 (Cons n Nil)
 Cons n (rotate lf7 Nil)
 Cons n Nil

Problem: synth_36

Problem: synth_82
 len (rotate (len lf5) x)
 len match x with | Cons y x => rotate n (lfappend x (Cons y Nil)) | Nil => Nil end
 len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end
 len (rotate n x)
 len (lfappend x Nil)
 len x

Problem: synth_78
 len (rotate (len lf2) x)
 len match x with | Cons y x => rotate n (lfappend x (Cons y Nil)) | Nil => Nil end
 len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end
 len (rotate n x)
 len (lfappend x Nil)
 len x

Problem: synth_99
 len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end
 len (lfappend lf8 x)
 len (rotate n x)
 len (lfappend x lf8)
 len (lfappend x Nil)
 len x

Problem: synth_43

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 7257 seconds
Lemmas:
Lemma candidate_1: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_2: forall (lf3 : lst), @eq lst (lfappend lf3 (rotate (len lf3) Nil)) lf3.
Lemma candidate_3: forall (lf3 : lst), @eq lst (lfappend (lfappend lf3 Nil) Nil) lf3.
Lemma candidate_4: forall (lf3 : lst), @eq lst (rotate (len lf3) (lfappend lf3 Nil)) lf3.
Lemma candidate_5: forall (lf3 : lst), @eq lst (rotate (len lf3) lf3) lf3.
Lemma candidate_6: forall (lf3 : lst), @eq lst (lfappend lf3 Nil) lf3.
Lemma candidate_7: forall (lf3 : lst), @eq lst (lf3) lf3.
Lemma candidate_8: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate lf7 (lfappend lf2 (rotate lf7 Nil))).
Lemma candidate_9: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate lf7 (rotate (len lf2) lf2)).
Lemma candidate_10: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (lfappend (rotate lf7 lf2) Nil).
Lemma candidate_11: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate (len lf2) (rotate lf7 lf2)).
Lemma candidate_12: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate lf7 (lfappend lf2 Nil)).
Lemma candidate_13: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate lf7 lf2).
Lemma candidate_14: forall (lf3 : lst), @eq lst (lfappend lf3 (rotate (len lf3) Nil)) lf3.
Lemma candidate_15: forall (lf3 : lst), @eq lst (lfappend (lfappend lf3 Nil) Nil) lf3.
Lemma candidate_16: forall (lf3 : lst), @eq lst (rotate (len lf3) (lfappend lf3 Nil)) lf3.
Lemma candidate_17: forall (lf3 : lst), @eq lst (rotate (len lf3) lf3) lf3.
Lemma candidate_18: forall (lf3 : lst), @eq lst (lfappend lf3 Nil) lf3.
Lemma candidate_19: forall (lf3 : lst), @eq lst (lf3) lf3.
Lemma candidate_20: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5))   (rotate lf7 (rotate (len lf5) (lfappend lf5 lf4))).
Lemma candidate_21: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5))   (rotate lf7 match lfappend lf5 lf4 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_22: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5))   (rotate lf7 (lfappend lf4 (rotate lf7 lf5))).
Lemma candidate_23: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5))   (rotate lf7 (lfappend lf4 (lfappend lf5 Nil))).
Lemma candidate_24: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5))   (match lfappend lf5 lf4 with | Cons y x => rotate lf7 (lfappend x (Cons y Nil)) | Nil => Nil end).
Lemma candidate_25: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5)) (rotate lf7 (lfappend lf4 lf5)).
Lemma candidate_26: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (lfappend (lfappend lf4 Nil) lf5).
Lemma candidate_27: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (lfappend (lfappend lf4 lf5) Nil).
Lemma candidate_28: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (rotate (len lf5) (lfappend lf5 lf4)).
Lemma candidate_29: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5)   (match lfappend lf5 lf4 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_30: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (lfappend lf4 (lfappend lf5 Nil)).
Lemma candidate_31: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (lfappend lf4 lf5).
Lemma candidate_32: forall (lf3 : lst), @eq lst (lfappend lf3 (rotate (len lf3) Nil)) lf3.
Lemma candidate_33: forall (lf3 : lst), @eq lst (lfappend (lfappend lf3 Nil) Nil) lf3.
Lemma candidate_34: forall (lf3 : lst), @eq lst (rotate (len lf3) (lfappend lf3 Nil)) lf3.
Lemma candidate_35: forall (lf3 : lst), @eq lst (rotate (len lf3) lf3) lf3.
Lemma candidate_36: forall (lf3 : lst), @eq lst (lfappend lf3 Nil) lf3.
Lemma candidate_37: forall (lf3 : lst), @eq lst (lf3) lf3.
Lemma candidate_38: forall (n : natural) (lf7 : natural) (lf4 : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8)))   (match rotate lf7 (Cons n lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_39: forall (n : natural) (lf7 : natural) (lf4 : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8)))   (rotate lf7 (lfappend (lfappend lf4 lf8) (Cons n Nil))).
Lemma candidate_40: forall (n : natural) (lf7 : natural) (lf4 : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8)))   (rotate lf7 (lfappend (lfappend lf4 Nil) (Cons n Nil))).
Lemma candidate_41: forall (n : natural) (lf7 : natural) (lf4 : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8)))   (lfappend lf8 (rotate lf7 (lfappend lf4 (Cons n Nil)))).
Lemma candidate_42: forall (n : natural) (lf7 : natural) (lf4 : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8)))   (rotate lf7 (lfappend lf4 (Cons n lf8))).
Lemma candidate_43: forall (n : natural) (lf7 : natural) (lf4 : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8)))   (rotate lf7 (lfappend lf4 (Cons n Nil))).
Lemma candidate_44: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8)) (lfappend lf4 (Cons n (rotate n Nil))).
Lemma candidate_45: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8))   (lfappend lf8 (lfappend lf4 (Cons n Nil))).
Lemma candidate_46: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8))   (lfappend lf4 (lfappend lf8 (Cons n Nil))).
Lemma candidate_47: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8)) (lfappend lf4 (rotate n (Cons n Nil))).
Lemma candidate_48: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8)) (lfappend lf4 (Cons n lf8)).
Lemma candidate_49: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8)) (lfappend lf4 (Cons n Nil)).
Lemma candidate_50: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n (lfappend lf8 Nil)).
Lemma candidate_51: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n (rotate n Nil)).
Lemma candidate_52: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (lfappend lf8 (Cons n Nil)).
Lemma candidate_53: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (rotate n (Cons n Nil)).
Lemma candidate_54: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n lf8).
Lemma candidate_55: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n Nil).
Lemma candidate_56: forall (lf3 : lst), @eq lst (lfappend lf3 (rotate (len lf3) Nil)) lf3.
Lemma candidate_57: forall (lf3 : lst), @eq lst (lfappend (lfappend lf3 Nil) Nil) lf3.
Lemma candidate_58: forall (lf3 : lst), @eq lst (rotate (len lf3) (lfappend lf3 Nil)) lf3.
Lemma candidate_59: forall (lf3 : lst), @eq lst (rotate (len lf3) lf3) lf3.
Lemma candidate_60: forall (lf3 : lst), @eq lst (lfappend lf3 Nil) lf3.
Lemma candidate_61: forall (lf3 : lst), @eq lst (lf3) lf3.
Lemma candidate_62: forall (lf3 : lst) (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n (rotate lf7 (rotate lf7 Nil)))))   lf3.
Lemma candidate_63: forall (lf3 : lst) (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n (rotate (len lf3) Nil)))) lf3.
Lemma candidate_64: forall (lf3 : lst) (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n (rotate (len lf4) Nil)))) lf3.
Lemma candidate_65: forall (lf3 : lst) (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n (rotate n Nil)))) lf3.
Lemma candidate_66: forall (lf3 : lst) (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n (rotate lf7 Nil)))) lf3.
Lemma candidate_67: forall (lf3 : lst) (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n (Nil)))) lf3.
Lemma candidate_68: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (lfappend (rotate n Nil) (rotate lf7 (lfappend lf4 (Cons n Nil)))).
Lemma candidate_69: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (lfappend (rotate lf7 Nil) (rotate lf7 (lfappend lf4 (Cons n Nil)))).
Lemma candidate_70: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (match rotate lf7 (lfappend lf4 (Cons n Nil)) with | Cons y x => rotate (len lf4) (lfappend x (Cons y Nil)) | Nil => Nil end).
Lemma candidate_71: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (match rotate lf7 (Cons n lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_72: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (rotate lf7 (lfappend (lfappend lf4 Nil) (Cons n Nil))).
Lemma candidate_73: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (rotate lf7 (lfappend lf4 (Cons n Nil))).
Lemma candidate_74: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n (rotate n Nil))).
Lemma candidate_75: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n (rotate n Nil))).
Lemma candidate_76: forall (n : natural), @eq lst (Cons n Nil) (rotate n (rotate n (Cons n Nil))).
Lemma candidate_77: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n Nil)).
Lemma candidate_78: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n Nil)).
Lemma candidate_79: forall (n : natural), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_80: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil))   (lfappend (lfappend lf4 Nil) (rotate n (Cons n Nil))).
Lemma candidate_81: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil))   (lfappend (lfappend lf4 Nil) (Cons n Nil)).
Lemma candidate_82: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil))   (lfappend lf4 (rotate (len lf4) (Cons n Nil))).
Lemma candidate_83: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (lfappend lf4 (Cons n (rotate n Nil))).
Lemma candidate_84: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (lfappend lf4 (rotate n (Cons n Nil))).
Lemma candidate_85: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (lfappend lf4 (Cons n Nil)).
Lemma candidate_86: @eq lst Nil (Nil).
Lemma candidate_87: forall (lf3 : lst), @eq lst (lfappend lf3 (rotate (len lf3) Nil)) lf3.
Lemma candidate_88: forall (lf3 : lst), @eq lst (lfappend (lfappend lf3 Nil) Nil) lf3.
Lemma candidate_89: forall (lf3 : lst), @eq lst (rotate (len lf3) (lfappend lf3 Nil)) lf3.
Lemma candidate_90: forall (lf3 : lst), @eq lst (rotate (len lf3) lf3) lf3.
Lemma candidate_91: forall (lf3 : lst), @eq lst (lfappend lf3 Nil) lf3.
Lemma candidate_92: forall (lf3 : lst), @eq lst (lf3) lf3.
Lemma candidate_93: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 (rotate lf7 x))).
Lemma candidate_94: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (rotate lf7 (lfappend x (lfappend y lf5))).
Lemma candidate_95: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend y (rotate lf7 (lfappend x lf5))).
Lemma candidate_96: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 (lfappend x Nil))).
Lemma candidate_97: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend (lfappend y lf5) x).
Lemma candidate_98: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 x)).
Lemma candidate_99: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5)   (lfappend (lfappend x y) (lfappend lf5 Nil)).
Lemma candidate_100: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5)   (lfappend x (rotate (len lf5) (lfappend lf5 y))).
Lemma candidate_101: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5)   (lfappend x match lfappend lf5 y with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_102: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5)   (lfappend x (lfappend y (lfappend lf5 Nil))).
Lemma candidate_103: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5) (lfappend (lfappend x y) lf5).
Lemma candidate_104: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5) (lfappend x (lfappend y lf5)).
Lemma candidate_105: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (rotate (len y) y)).
Lemma candidate_106: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) y).
Lemma candidate_107: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x y) Nil).
Lemma candidate_108: forall (y : lst) (x : lst), @eq lst (lfappend x y) (rotate (len y) (lfappend y x)).
Lemma candidate_109: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend y Nil)).
Lemma candidate_110: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x y).
Lemma candidate_111: forall (lf3 : lst), @eq lst (lfappend lf3 (rotate (len lf3) Nil)) lf3.
Lemma candidate_112: forall (lf3 : lst), @eq lst (lfappend (lfappend lf3 Nil) Nil) lf3.
Lemma candidate_113: forall (lf3 : lst), @eq lst (rotate (len lf3) (lfappend lf3 Nil)) lf3.
Lemma candidate_114: forall (lf3 : lst), @eq lst (rotate (len lf3) lf3) lf3.
Lemma candidate_115: forall (lf3 : lst), @eq lst (lfappend lf3 Nil) lf3.
Lemma candidate_116: forall (lf3 : lst), @eq lst (lf3) lf3.
Lemma candidate_117: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend lf8 (lfappend y (Cons n x))).
Lemma candidate_118: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (lfappend lf8 (Cons n x))).
Lemma candidate_119: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (rotate lf7 x))).
Lemma candidate_120: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend x lf8))).
Lemma candidate_121: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_122: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_123: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend (lfappend x y) (lfappend lf8 (Cons n Nil))).
Lemma candidate_124: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend (lfappend x y) (rotate n (Cons n Nil))).
Lemma candidate_125: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend (lfappend x y) (Cons n lf8)).
Lemma candidate_126: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend (lfappend x y) (Cons n Nil)).
Lemma candidate_127: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend x (lfappend y (Cons n lf8))).
Lemma candidate_128: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend x (lfappend y (Cons n Nil))).
Lemma candidate_129: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n (lfappend lf8 Nil)).
Lemma candidate_130: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n (rotate n Nil)).
Lemma candidate_131: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (lfappend lf8 (Cons n Nil)).
Lemma candidate_132: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (rotate n (Cons n Nil)).
Lemma candidate_133: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n lf8).
Lemma candidate_134: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n Nil).
Lemma candidate_135: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (rotate (len y) y)).
Lemma candidate_136: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) y).
Lemma candidate_137: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x y) Nil).
Lemma candidate_138: forall (y : lst) (x : lst), @eq lst (lfappend x y) (rotate (len y) (lfappend y x)).
Lemma candidate_139: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend y Nil)).
Lemma candidate_140: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x y).
Lemma candidate_141: forall (lf3 : lst), @eq lst (lfappend lf3 (rotate (len lf3) Nil)) lf3.
Lemma candidate_142: forall (lf3 : lst), @eq lst (lfappend (lfappend lf3 Nil) Nil) lf3.
Lemma candidate_143: forall (lf3 : lst), @eq lst (rotate (len lf3) (lfappend lf3 Nil)) lf3.
Lemma candidate_144: forall (lf3 : lst), @eq lst (rotate (len lf3) lf3) lf3.
Lemma candidate_145: forall (lf3 : lst), @eq lst (lfappend lf3 Nil) lf3.
Lemma candidate_146: forall (lf3 : lst), @eq lst (lf3) lf3.
Lemma candidate_147: forall (lf3 : lst) (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst   (rotate lf7 (lfappend (lfappend x y) (Cons n (rotate (len lf3) Nil)))) lf3.
Lemma candidate_148: forall (lf3 : lst) (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n (rotate (len y) Nil))))   lf3.
Lemma candidate_149: forall (lf3 : lst) (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n (rotate (len x) Nil))))   lf3.
Lemma candidate_150: forall (lf3 : lst) (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n (rotate n Nil)))) lf3.
Lemma candidate_151: forall (lf3 : lst) (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n (rotate lf7 Nil)))) lf3.
Lemma candidate_152: forall (lf3 : lst) (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n (Nil)))) lf3.
Lemma candidate_153: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (rotate lf7 (lfappend (lfappend x y) (Cons n Nil))).
Lemma candidate_154: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_155: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (rotate lf7 (lfappend x (Cons n Nil)))).
Lemma candidate_156: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n (rotate lf7 x))).
Lemma candidate_157: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_158: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_159: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n (rotate n Nil))).
Lemma candidate_160: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n (rotate n Nil))).
Lemma candidate_161: forall (n : natural), @eq lst (Cons n Nil) (rotate n (rotate n (Cons n Nil))).
Lemma candidate_162: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n Nil)).
Lemma candidate_163: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n Nil)).
Lemma candidate_164: forall (n : natural), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_165: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (match lfappend y (Cons n x) with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end).
Lemma candidate_166: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend (lfappend x y) (Cons n (rotate n Nil))).
Lemma candidate_167: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend (lfappend x Nil) (lfappend y (Cons n Nil))).
Lemma candidate_168: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend (lfappend x y) (rotate n (Cons n Nil))).
Lemma candidate_169: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend (lfappend x y) (Cons n Nil)).
Lemma candidate_170: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend x (lfappend y (Cons n Nil))).
Lemma candidate_171: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (rotate (len y) y)).
Lemma candidate_172: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) y).
Lemma candidate_173: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x y) Nil).
Lemma candidate_174: forall (y : lst) (x : lst), @eq lst (lfappend x y) (rotate (len y) (lfappend y x)).
Lemma candidate_175: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend y Nil)).
Lemma candidate_176: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x y).
Lemma candidate_177: @eq lst Nil (Nil).
Lemma candidate_178: forall (lf3 : lst), @eq lst (lfappend lf3 (rotate (len lf3) Nil)) lf3.
Lemma candidate_179: forall (lf3 : lst), @eq lst (lfappend (lfappend lf3 Nil) Nil) lf3.
Lemma candidate_180: forall (lf3 : lst), @eq lst (rotate (len lf3) (lfappend lf3 Nil)) lf3.
Lemma candidate_181: forall (lf3 : lst), @eq lst (rotate (len lf3) lf3) lf3.
Lemma candidate_182: forall (lf3 : lst), @eq lst (lfappend lf3 Nil) lf3.
Lemma candidate_183: forall (lf3 : lst), @eq lst (lf3) lf3.
Lemma candidate_184: forall (x : lst), @eq natural (len x) (len (rotate (len x) (lfappend x Nil))).
Lemma candidate_185: forall (x : lst), @eq natural (len x)   (len match lfappend x Nil with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_186: forall (x : lst), @eq natural (len x) (len (rotate (len x) x)).
Lemma candidate_187: forall (x : lst), @eq natural (len x)   (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_188: forall (x : lst), @eq natural (len x) (len (lfappend x Nil)).
Lemma candidate_189: forall (x : lst), @eq natural (len x) (len x).
Lemma candidate_190: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2)   (rotate (len lf2) (rotate (len x) (lfappend lf2 Nil))).
Lemma candidate_191: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2)   (rotate (len x) (rotate (len lf2) (lfappend lf2 Nil))).
Lemma candidate_192: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len lf2) (rotate (len x) lf2)).
Lemma candidate_193: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len x) (rotate (len lf2) lf2)).
Lemma candidate_194: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len x) (lfappend lf2 Nil)).
Lemma candidate_195: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len x) lf2).
Lemma candidate_196: forall (lf3 : lst), @eq lst (lfappend lf3 (rotate (len lf3) Nil)) lf3.
Lemma candidate_197: forall (lf3 : lst), @eq lst (lfappend (lfappend lf3 Nil) Nil) lf3.
Lemma candidate_198: forall (lf3 : lst), @eq lst (rotate (len lf3) (lfappend lf3 Nil)) lf3.
Lemma candidate_199: forall (lf3 : lst), @eq lst (rotate (len lf3) lf3) lf3.
Lemma candidate_200: forall (lf3 : lst), @eq lst (lfappend lf3 Nil) lf3.
Lemma candidate_201: forall (lf3 : lst), @eq lst (lf3) lf3.
Lemma candidate_202: forall (x : lst), @eq natural (len x) (len (rotate (len x) (lfappend x Nil))).
Lemma candidate_203: forall (x : lst), @eq natural (len x)   (len match lfappend x Nil with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_204: forall (x : lst), @eq natural (len x) (len (rotate (len x) x)).
Lemma candidate_205: forall (x : lst), @eq natural (len x)   (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_206: forall (x : lst), @eq natural (len x) (len (lfappend x Nil)).
Lemma candidate_207: forall (x : lst), @eq natural (len x) (len x).
Lemma candidate_208: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (match rotate (len x) (lfappend lf5 lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_209: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (rotate (len x) (rotate (len lf5) (lfappend lf5 lf4))).
Lemma candidate_210: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (rotate (len x) match lfappend lf5 lf4 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_211: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (rotate (len x) (lfappend lf4 (lfappend lf5 Nil))).
Lemma candidate_212: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (match lfappend lf5 lf4 with | Cons y x0 => rotate (len x) (lfappend x0 (Cons y Nil)) | Nil => Nil end).
Lemma candidate_213: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (rotate (len x) (lfappend lf4 lf5)).
Lemma candidate_214: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (lfappend (lfappend lf4 Nil) lf5).
Lemma candidate_215: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (lfappend (lfappend lf4 lf5) Nil).
Lemma candidate_216: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (rotate (len lf5) (lfappend lf5 lf4)).
Lemma candidate_217: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5)   (match lfappend lf5 lf4 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_218: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (lfappend lf4 (lfappend lf5 Nil)).
Lemma candidate_219: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (lfappend lf4 lf5).
Lemma candidate_220: forall (lf3 : lst), @eq lst (lfappend lf3 (rotate (len lf3) Nil)) lf3.
Lemma candidate_221: forall (lf3 : lst), @eq lst (lfappend (lfappend lf3 Nil) Nil) lf3.
Lemma candidate_222: forall (lf3 : lst), @eq lst (rotate (len lf3) (lfappend lf3 Nil)) lf3.
Lemma candidate_223: forall (lf3 : lst), @eq lst (rotate (len lf3) lf3) lf3.
Lemma candidate_224: forall (lf3 : lst), @eq lst (lfappend lf3 Nil) lf3.
Lemma candidate_225: forall (lf3 : lst), @eq lst (lf3) lf3.
Lemma candidate_226: forall (x : lst), @eq natural (len x) (len (rotate (len x) (lfappend x Nil))).
Lemma candidate_227: forall (x : lst), @eq natural (len x)   (len match lfappend x Nil with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_228: forall (x : lst), @eq natural (len x) (len (rotate (len x) x)).
Lemma candidate_229: forall (x : lst), @eq natural (len x)   (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_230: forall (x : lst), @eq natural (len x) (len (lfappend x Nil)).
Lemma candidate_231: forall (x : lst), @eq natural (len x) (len x).
Lemma candidate_232: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8)) (lfappend lf4 (Cons n (rotate n Nil))).
Lemma candidate_233: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8))   (lfappend lf8 (lfappend lf4 (Cons n Nil))).
Lemma candidate_234: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8))   (lfappend lf4 (lfappend lf8 (Cons n Nil))).
Lemma candidate_235: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8)) (lfappend lf4 (rotate n (Cons n Nil))).
Lemma candidate_236: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8)) (lfappend lf4 (Cons n lf8)).
Lemma candidate_237: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8)) (lfappend lf4 (Cons n Nil)).
Lemma candidate_238: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n (lfappend lf8 Nil)).
Lemma candidate_239: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n (rotate n Nil)).
Lemma candidate_240: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (lfappend lf8 (Cons n Nil)).
Lemma candidate_241: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (rotate n (Cons n Nil)).
Lemma candidate_242: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n lf8).
Lemma candidate_243: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n Nil).
Lemma candidate_244: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (match lfappend lf8 (Cons n lf4) with | Cons y x0 => rotate (len x) (lfappend x0 (Cons y Nil)) | Nil => Nil end).
Lemma candidate_245: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (rotate (len x) (lfappend (lfappend lf4 lf8) (Cons n Nil))).
Lemma candidate_246: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (rotate (len x) (lfappend (lfappend lf4 Nil) (Cons n Nil))).
Lemma candidate_247: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (match rotate (len x) (Cons n lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_248: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (rotate (len x) (lfappend lf4 (Cons n lf8))).
Lemma candidate_249: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (rotate (len x) (lfappend lf4 (Cons n Nil))).
Lemma candidate_250: forall (lf3 : lst), @eq lst (lfappend lf3 (rotate (len lf3) Nil)) lf3.
Lemma candidate_251: forall (lf3 : lst), @eq lst (lfappend (lfappend lf3 Nil) Nil) lf3.
Lemma candidate_252: forall (lf3 : lst), @eq lst (rotate (len lf3) (lfappend lf3 Nil)) lf3.
Lemma candidate_253: forall (lf3 : lst), @eq lst (rotate (len lf3) lf3) lf3.
Lemma candidate_254: forall (lf3 : lst), @eq lst (lfappend lf3 Nil) lf3.
Lemma candidate_255: forall (lf3 : lst), @eq lst (lf3) lf3.
Lemma candidate_256: forall (lf3 : lst) (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n (rotate n (rotate n Nil)))))   lf3.
Lemma candidate_257: forall (lf3 : lst) (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n (rotate (len lf3) Nil)))) lf3.
Lemma candidate_258: forall (lf3 : lst) (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n (rotate (len lf4) Nil)))) lf3.
Lemma candidate_259: forall (lf3 : lst) (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n (rotate (len x) Nil)))) lf3.
Lemma candidate_260: forall (lf3 : lst) (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n (rotate n Nil)))) lf3.
Lemma candidate_261: forall (lf3 : lst) (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n (Nil)))) lf3.
Lemma candidate_262: forall (x : lst), @eq natural (len x) (len (rotate (len x) (lfappend x Nil))).
Lemma candidate_263: forall (x : lst), @eq natural (len x)   (len match lfappend x Nil with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_264: forall (x : lst), @eq natural (len x) (len (rotate (len x) x)).
Lemma candidate_265: forall (x : lst), @eq natural (len x)   (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_266: forall (x : lst), @eq natural (len x) (len (lfappend x Nil)).
Lemma candidate_267: forall (x : lst), @eq natural (len x) (len x).
Lemma candidate_268: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n (rotate n Nil))).
Lemma candidate_269: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n (rotate n Nil))).
Lemma candidate_270: forall (n : natural), @eq lst (Cons n Nil) (rotate n (rotate n (Cons n Nil))).
Lemma candidate_271: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n Nil)).
Lemma candidate_272: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n Nil)).
Lemma candidate_273: forall (n : natural), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_274: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend lf4 (rotate (len x) (Cons n Nil)))).
Lemma candidate_275: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend lf4 (Cons n (rotate n Nil)))).
Lemma candidate_276: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend lf4 (rotate n (Cons n Nil)))).
Lemma candidate_277: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend (lfappend lf4 Nil) (Cons n Nil))).
Lemma candidate_278: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (match rotate (len x) (Cons n lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_279: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend lf4 (Cons n Nil))).
Lemma candidate_280: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil))   (lfappend (lfappend lf4 Nil) (rotate n (Cons n Nil))).
Lemma candidate_281: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil))   (lfappend (lfappend lf4 Nil) (Cons n Nil)).
Lemma candidate_282: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil))   (lfappend lf4 (rotate (len lf4) (Cons n Nil))).
Lemma candidate_283: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (lfappend lf4 (Cons n (rotate n Nil))).
Lemma candidate_284: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (lfappend lf4 (rotate n (Cons n Nil))).
Lemma candidate_285: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (lfappend lf4 (Cons n Nil)).
Lemma candidate_286: @eq lst Nil (Nil).
Lemma candidate_287: forall (lf3 : lst), @eq lst (lfappend lf3 (rotate (len lf3) Nil)) lf3.
Lemma candidate_288: forall (lf3 : lst), @eq lst (lfappend (lfappend lf3 Nil) Nil) lf3.
Lemma candidate_289: forall (lf3 : lst), @eq lst (rotate (len lf3) (lfappend lf3 Nil)) lf3.
Lemma candidate_290: forall (lf3 : lst), @eq lst (rotate (len lf3) lf3) lf3.
Lemma candidate_291: forall (lf3 : lst), @eq lst (lfappend lf3 Nil) lf3.
Lemma candidate_292: forall (lf3 : lst), @eq lst (lf3) lf3.
Lemma candidate_293: forall (lf3 : lst) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len (rotate (len y) x)) (lfappend (lfappend x y) lf5)) lf3.
Lemma candidate_294: forall (lf3 : lst) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len (rotate (len x) x)) (lfappend (lfappend x y) lf5)) lf3.
Lemma candidate_295: forall (lf3 : lst) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len (rotate (len lf5) x)) (lfappend (lfappend x y) lf5)) lf3.
Lemma candidate_296: forall (lf3 : lst) (y : lst) (x : lst) (lf5 : lst), @eq lst   (rotate      (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end)      (lfappend (lfappend x y) lf5)) lf3.
Lemma candidate_297: forall (lf3 : lst) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len (lfappend x Nil)) (lfappend (lfappend x y) lf5)) lf3.
Lemma candidate_298: forall (lf3 : lst) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5)) lf3.
Lemma candidate_299: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend (lfappend y Nil) (lfappend lf5 x)).
Lemma candidate_300: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend (lfappend y lf5) (lfappend x Nil)).
Lemma candidate_301: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (rotate (len x) (lfappend x lf5))).
Lemma candidate_302: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 (lfappend x Nil))).
Lemma candidate_303: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend (lfappend y lf5) x).
Lemma candidate_304: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 x)).
Lemma candidate_305: forall (x : lst), @eq natural (len x) (len (rotate (len x) (lfappend x Nil))).
Lemma candidate_306: forall (x : lst), @eq natural (len x)   (len match lfappend x Nil with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_307: forall (x : lst), @eq natural (len x) (len (rotate (len x) x)).
Lemma candidate_308: forall (x : lst), @eq natural (len x)   (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_309: forall (x : lst), @eq natural (len x) (len (lfappend x Nil)).
Lemma candidate_310: forall (x : lst), @eq natural (len x) (len x).
Lemma candidate_311: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5)   (lfappend (lfappend x y) (lfappend lf5 Nil)).
Lemma candidate_312: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5)   (lfappend x (rotate (len lf5) (lfappend lf5 y))).
Lemma candidate_313: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5)   (lfappend x match lfappend lf5 y with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_314: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5)   (lfappend x (lfappend y (lfappend lf5 Nil))).
Lemma candidate_315: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5) (lfappend (lfappend x y) lf5).
Lemma candidate_316: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5) (lfappend x (lfappend y lf5)).
Lemma candidate_317: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (rotate (len y) y)).
Lemma candidate_318: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) y).
Lemma candidate_319: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x y) Nil).
Lemma candidate_320: forall (y : lst) (x : lst), @eq lst (lfappend x y) (rotate (len y) (lfappend y x)).
Lemma candidate_321: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend y Nil)).
Lemma candidate_322: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x y).
Lemma candidate_323: forall (lf3 : lst), @eq lst (lfappend lf3 (rotate (len lf3) Nil)) lf3.
Lemma candidate_324: forall (lf3 : lst), @eq lst (lfappend (lfappend lf3 Nil) Nil) lf3.
Lemma candidate_325: forall (lf3 : lst), @eq lst (rotate (len lf3) (lfappend lf3 Nil)) lf3.
Lemma candidate_326: forall (lf3 : lst), @eq lst (rotate (len lf3) lf3) lf3.
Lemma candidate_327: forall (lf3 : lst), @eq lst (lfappend lf3 Nil) lf3.
Lemma candidate_328: forall (lf3 : lst), @eq lst (lf3) lf3.
Lemma candidate_329: forall (lf3 : lst) (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst   (rotate      (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end)      (lfappend (lfappend x y) (Cons n lf8))) lf3.
Lemma candidate_330: forall (lf3 : lst) (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst   (rotate (len (lfappend lf8 x)) (lfappend (lfappend x y) (Cons n lf8))) lf3.
Lemma candidate_331: forall (lf3 : lst) (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len (rotate n x)) (lfappend (lfappend x y) (Cons n lf8)))   lf3.
Lemma candidate_332: forall (lf3 : lst) (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst   (rotate (len (lfappend x lf8)) (lfappend (lfappend x y) (Cons n lf8))) lf3.
Lemma candidate_333: forall (lf3 : lst) (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst   (rotate (len (lfappend x Nil)) (lfappend (lfappend x y) (Cons n lf8))) lf3.
Lemma candidate_334: forall (lf3 : lst) (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8))) lf3.
Lemma candidate_335: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend lf8 x))).
Lemma candidate_336: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend lf8 (lfappend y (Cons n x))).
Lemma candidate_337: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (lfappend lf8 (Cons n x))).
Lemma candidate_338: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend x lf8))).
Lemma candidate_339: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_340: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_341: forall (x : lst), @eq natural (len x) (len (rotate (len x) (lfappend x Nil))).
Lemma candidate_342: forall (x : lst), @eq natural (len x)   (len match lfappend x Nil with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_343: forall (x : lst), @eq natural (len x) (len (rotate (len x) x)).
Lemma candidate_344: forall (x : lst), @eq natural (len x)   (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_345: forall (x : lst), @eq natural (len x) (len (lfappend x Nil)).
Lemma candidate_346: forall (x : lst), @eq natural (len x) (len x).
Lemma candidate_347: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend (lfappend x y) (lfappend lf8 (Cons n Nil))).
Lemma candidate_348: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend (lfappend x y) (rotate n (Cons n Nil))).
Lemma candidate_349: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend (lfappend x y) (Cons n lf8)).
Lemma candidate_350: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend (lfappend x y) (Cons n Nil)).
Lemma candidate_351: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend x (lfappend y (Cons n lf8))).
Lemma candidate_352: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend x (lfappend y (Cons n Nil))).
Lemma candidate_353: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n (lfappend lf8 Nil)).
Lemma candidate_354: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n (rotate n Nil)).
Lemma candidate_355: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (lfappend lf8 (Cons n Nil)).
Lemma candidate_356: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (rotate n (Cons n Nil)).
Lemma candidate_357: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n lf8).
Lemma candidate_358: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n Nil).
Lemma candidate_359: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (rotate (len y) y)).
Lemma candidate_360: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) y).
Lemma candidate_361: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x y) Nil).
Lemma candidate_362: forall (y : lst) (x : lst), @eq lst (lfappend x y) (rotate (len y) (lfappend y x)).
Lemma candidate_363: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend y Nil)).
Lemma candidate_364: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x y).
Lemma candidate_365: forall (lf3 : lst), @eq lst (lfappend lf3 (rotate (len lf3) Nil)) lf3.
Lemma candidate_366: forall (lf3 : lst), @eq lst (lfappend (lfappend lf3 Nil) Nil) lf3.
Lemma candidate_367: forall (lf3 : lst), @eq lst (rotate (len lf3) (lfappend lf3 Nil)) lf3.
Lemma candidate_368: forall (lf3 : lst), @eq lst (rotate (len lf3) lf3) lf3.
Lemma candidate_369: forall (lf3 : lst), @eq lst (lfappend lf3 Nil) lf3.
Lemma candidate_370: forall (lf3 : lst), @eq lst (lf3) lf3.
Lemma candidate_371: forall (lf3 : lst) (n : natural) (y : lst) (x : lst), @eq lst   (rotate (len (rotate (len x) x)) (lfappend (lfappend x y) (Cons n Nil)))   lf3.
Lemma candidate_372: forall (lf3 : lst) (n : natural) (y : lst) (x : lst), @eq lst   (rotate      (len match x with | Cons y x => rotate n (lfappend x (Cons y Nil)) | Nil => Nil end)      (lfappend (lfappend x y) (Cons n Nil))) lf3.
Lemma candidate_373: forall (lf3 : lst) (n : natural) (y : lst) (x : lst), @eq lst   (rotate      (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end)      (lfappend (lfappend x y) (Cons n Nil))) lf3.
Lemma candidate_374: forall (lf3 : lst) (n : natural) (y : lst) (x : lst), @eq lst (rotate (len (rotate n x)) (lfappend (lfappend x y) (Cons n Nil)))   lf3.
Lemma candidate_375: forall (lf3 : lst) (n : natural) (y : lst) (x : lst), @eq lst   (rotate (len (lfappend x Nil)) (lfappend (lfappend x y) (Cons n Nil))) lf3.
Lemma candidate_376: forall (lf3 : lst) (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))) lf3.
Lemma candidate_377: forall (lf3 : lst) (n : natural) (y : lst) (x : lst), @eq lst   (rotate (len x)      (lfappend (lfappend x y) (Cons n (rotate n (rotate n Nil))))) lf3.
Lemma candidate_378: forall (lf3 : lst) (n : natural) (y : lst) (x : lst), @eq lst   (rotate (len x) (lfappend (lfappend x y) (Cons n (rotate (len lf3) Nil))))   lf3.
Lemma candidate_379: forall (lf3 : lst) (n : natural) (y : lst) (x : lst), @eq lst   (rotate (len x) (lfappend (lfappend x y) (Cons n (rotate (len y) Nil))))   lf3.
Lemma candidate_380: forall (lf3 : lst) (n : natural) (y : lst) (x : lst), @eq lst   (rotate (len x) (lfappend (lfappend x y) (Cons n (rotate (len x) Nil))))   lf3.
Lemma candidate_381: forall (lf3 : lst) (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n (rotate n Nil))))   lf3.
Lemma candidate_382: forall (lf3 : lst) (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n (Nil)))) lf3.
Lemma candidate_383: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))).
Lemma candidate_384: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend (rotate n Nil) (lfappend y (Cons n x))).
Lemma candidate_385: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend (lfappend y Nil) (Cons n (lfappend x Nil))).
Lemma candidate_386: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_387: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_388: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_389: forall (x : lst), @eq natural (len x) (len (rotate (len x) (lfappend x Nil))).
Lemma candidate_390: forall (x : lst), @eq natural (len x)   (len match lfappend x Nil with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_391: forall (x : lst), @eq natural (len x) (len (rotate (len x) x)).
Lemma candidate_392: forall (x : lst), @eq natural (len x)   (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_393: forall (x : lst), @eq natural (len x) (len (lfappend x Nil)).
Lemma candidate_394: forall (x : lst), @eq natural (len x) (len x).
Lemma candidate_395: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n (rotate n Nil))).
Lemma candidate_396: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n (rotate n Nil))).
Lemma candidate_397: forall (n : natural), @eq lst (Cons n Nil) (rotate n (rotate n (Cons n Nil))).
Lemma candidate_398: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n Nil)).
Lemma candidate_399: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n Nil)).
Lemma candidate_400: forall (n : natural), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_401: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (match lfappend y (Cons n x) with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end).
Lemma candidate_402: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend (lfappend x y) (Cons n (rotate n Nil))).
Lemma candidate_403: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend (lfappend x Nil) (lfappend y (Cons n Nil))).
Lemma candidate_404: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend (lfappend x y) (rotate n (Cons n Nil))).
Lemma candidate_405: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend (lfappend x y) (Cons n Nil)).
Lemma candidate_406: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend x (lfappend y (Cons n Nil))).
Lemma candidate_407: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (rotate (len y) y)).
Lemma candidate_408: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) y).
Lemma candidate_409: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x y) Nil).
Lemma candidate_410: forall (y : lst) (x : lst), @eq lst (lfappend x y) (rotate (len y) (lfappend y x)).
Lemma candidate_411: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend y Nil)).
Lemma candidate_412: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x y).
Lemma candidate_413: @eq lst Nil (Nil).
Lemma candidate_414: forall (lf1 : lst), @eq lst lf1 (lfappend lf1 (rotate (len lf1) Nil)).
Lemma candidate_415: forall (lf1 : lst), @eq lst lf1 (lfappend (lfappend lf1 Nil) Nil).
Lemma candidate_416: forall (lf1 : lst), @eq lst lf1 (rotate (len lf1) (lfappend lf1 Nil)).
Lemma candidate_417: forall (lf1 : lst), @eq lst lf1 (rotate (len lf1) lf1).
Lemma candidate_418: forall (lf1 : lst), @eq lst lf1 (lfappend lf1 Nil).
Lemma candidate_419: forall (lf1 : lst), @eq lst lf1 (lf1).
Lemma candidate_420: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (rotate (len lf6) lf6)).
Lemma candidate_421: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y Nil) lf6).
Lemma candidate_422: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y lf6) Nil).
Lemma candidate_423: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (rotate (len lf6) (lfappend lf6 y)).
Lemma candidate_424: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (lfappend lf6 Nil)).
Lemma candidate_425: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y lf6).
Lemma candidate_426: forall (lf1 : lst), @eq lst lf1 (lfappend lf1 (rotate (len lf1) Nil)).
Lemma candidate_427: forall (lf1 : lst), @eq lst lf1 (lfappend (lfappend lf1 Nil) Nil).
Lemma candidate_428: forall (lf1 : lst), @eq lst lf1 (rotate (len lf1) (lfappend lf1 Nil)).
Lemma candidate_429: forall (lf1 : lst), @eq lst lf1 (rotate (len lf1) lf1).
Lemma candidate_430: forall (lf1 : lst), @eq lst lf1 (lfappend lf1 Nil).
Lemma candidate_431: forall (lf1 : lst), @eq lst lf1 (lf1).
Lemma candidate_432: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))).
Lemma candidate_433: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (rotate n Nil) (lfappend y (Cons n x))).
Lemma candidate_434: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (lfappend y Nil) (Cons n (lfappend x Nil))).
Lemma candidate_435: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_436: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_437: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_438: forall (n : natural) (x : lst), @eq lst (Cons n x) (rotate (len x) (lfappend x (Cons n Nil))).
Lemma candidate_439: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) (lfappend x Nil))).
Lemma candidate_440: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_441: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) x)).
Lemma candidate_442: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_443: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_444: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (rotate (len lf6) lf6)) (lfappend y lf6).
Lemma candidate_445: forall (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend y Nil) lf6) (lfappend y lf6).
Lemma candidate_446: forall (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend y lf6) Nil) (lfappend y lf6).
Lemma candidate_447: forall (y : lst) (lf6 : lst), @eq lst (rotate (len lf6) (lfappend lf6 y)) (lfappend y lf6).
Lemma candidate_448: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (lfappend lf6 Nil)) (lfappend y lf6).
Lemma candidate_449: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y lf6).
Lemma candidate_450: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate lf7 (lfappend lf2 (rotate lf7 Nil))).
Lemma candidate_451: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate lf7 (rotate (len lf2) lf2)).
Lemma candidate_452: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (lfappend (rotate lf7 lf2) Nil).
Lemma candidate_453: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate (len lf2) (rotate lf7 lf2)).
Lemma candidate_454: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate lf7 (lfappend lf2 Nil)).
Lemma candidate_455: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate lf7 lf2).
Lemma candidate_456: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate lf7 (lfappend lf2 (rotate lf7 Nil))).
Lemma candidate_457: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate lf7 (rotate (len lf2) lf2)).
Lemma candidate_458: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (lfappend (rotate lf7 lf2) Nil).
Lemma candidate_459: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate (len lf2) (rotate lf7 lf2)).
Lemma candidate_460: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate lf7 (lfappend lf2 Nil)).
Lemma candidate_461: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate lf7 lf2).
Lemma candidate_462: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (rotate (len lf6) lf6)).
Lemma candidate_463: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y Nil) lf6).
Lemma candidate_464: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y lf6) Nil).
Lemma candidate_465: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (rotate (len lf6) (lfappend lf6 y)).
Lemma candidate_466: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (lfappend lf6 Nil)).
Lemma candidate_467: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y lf6).
Lemma candidate_468: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate lf7 (lfappend lf2 (rotate lf7 Nil))).
Lemma candidate_469: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate lf7 (rotate (len lf2) lf2)).
Lemma candidate_470: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (lfappend (rotate lf7 lf2) Nil).
Lemma candidate_471: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate (len lf2) (rotate lf7 lf2)).
Lemma candidate_472: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate lf7 (lfappend lf2 Nil)).
Lemma candidate_473: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate lf7 lf2).
Lemma candidate_474: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_475: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rotate n Nil) (lfappend y (Cons n x)))   (lfappend y (Cons n x)).
Lemma candidate_476: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n (lfappend x Nil)))   (lfappend y (Cons n x)).
Lemma candidate_477: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_478: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (lfappend x Nil))) (lfappend y (Cons n x)).
Lemma candidate_479: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_480: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))).
Lemma candidate_481: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (rotate n Nil) (lfappend y (Cons n x))).
Lemma candidate_482: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (lfappend y Nil) (Cons n (lfappend x Nil))).
Lemma candidate_483: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_484: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_485: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_486: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate lf7 (lfappend lf2 (rotate lf7 Nil))).
Lemma candidate_487: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate lf7 (rotate (len lf2) lf2)).
Lemma candidate_488: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (lfappend (rotate lf7 lf2) Nil).
Lemma candidate_489: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate (len lf2) (rotate lf7 lf2)).
Lemma candidate_490: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate lf7 (lfappend lf2 Nil)).
Lemma candidate_491: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate lf7 lf2).
Lemma candidate_492: forall (n : natural) (x : lst), @eq lst (Cons n x) (rotate (len x) (lfappend x (Cons n Nil))).
Lemma candidate_493: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) (lfappend x Nil))).
Lemma candidate_494: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_495: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) x)).
Lemma candidate_496: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_497: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_498: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (rotate (len lf6) lf6)) (lfappend y lf6).
Lemma candidate_499: forall (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend y Nil) lf6) (lfappend y lf6).
Lemma candidate_500: forall (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend y lf6) Nil) (lfappend y lf6).
Lemma candidate_501: forall (y : lst) (lf6 : lst), @eq lst (rotate (len lf6) (lfappend lf6 y)) (lfappend y lf6).
Lemma candidate_502: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (lfappend lf6 Nil)) (lfappend y lf6).
Lemma candidate_503: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y lf6).
Lemma candidate_504: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (match lfappend y (lfappend lf6 Nil) with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_505: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (match rotate (len y) (lfappend y lf6) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_506: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (rotate (len y) match lfappend y lf6 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_507: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (match lfappend lf6 (lfappend y Nil) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_508: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (match lfappend y lf6 with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_509: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (match lfappend lf6 y with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_510: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5))   (rotate lf7 (rotate (len lf5) (lfappend lf5 lf4))).
Lemma candidate_511: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5))   (rotate lf7 match lfappend lf5 lf4 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_512: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5))   (rotate lf7 (lfappend lf4 (rotate lf7 lf5))).
Lemma candidate_513: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5))   (rotate lf7 (lfappend lf4 (lfappend lf5 Nil))).
Lemma candidate_514: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5))   (match lfappend lf5 lf4 with | Cons y x => rotate lf7 (lfappend x (Cons y Nil)) | Nil => Nil end).
Lemma candidate_515: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5)) (rotate lf7 (lfappend lf4 lf5)).
Lemma candidate_516: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5))   (rotate lf7 (rotate (len lf5) (lfappend lf5 lf4))).
Lemma candidate_517: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5))   (rotate lf7 match lfappend lf5 lf4 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_518: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5))   (rotate lf7 (lfappend lf4 (rotate lf7 lf5))).
Lemma candidate_519: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5))   (rotate lf7 (lfappend lf4 (lfappend lf5 Nil))).
Lemma candidate_520: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5))   (match lfappend lf5 lf4 with | Cons y x => rotate lf7 (lfappend x (Cons y Nil)) | Nil => Nil end).
Lemma candidate_521: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5)) (rotate lf7 (lfappend lf4 lf5)).
Lemma candidate_522: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (lfappend (lfappend lf4 Nil) lf5).
Lemma candidate_523: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (lfappend (lfappend lf4 lf5) Nil).
Lemma candidate_524: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (rotate (len lf5) (lfappend lf5 lf4)).
Lemma candidate_525: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5)   (match lfappend lf5 lf4 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_526: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (lfappend lf4 (lfappend lf5 Nil)).
Lemma candidate_527: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (lfappend lf4 lf5).
Lemma candidate_528: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (rotate (len lf6) lf6)).
Lemma candidate_529: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y Nil) lf6).
Lemma candidate_530: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y lf6) Nil).
Lemma candidate_531: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (rotate (len lf6) (lfappend lf6 y)).
Lemma candidate_532: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (lfappend lf6 Nil)).
Lemma candidate_533: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y lf6).
Lemma candidate_534: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5))   (rotate lf7 (rotate (len lf5) (lfappend lf5 lf4))).
Lemma candidate_535: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5))   (rotate lf7 match lfappend lf5 lf4 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_536: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5))   (rotate lf7 (lfappend lf4 (rotate lf7 lf5))).
Lemma candidate_537: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5))   (rotate lf7 (lfappend lf4 (lfappend lf5 Nil))).
Lemma candidate_538: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5))   (match lfappend lf5 lf4 with | Cons y x => rotate lf7 (lfappend x (Cons y Nil)) | Nil => Nil end).
Lemma candidate_539: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5)) (rotate lf7 (lfappend lf4 lf5)).
Lemma candidate_540: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_541: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rotate n Nil) (lfappend y (Cons n x)))   (lfappend y (Cons n x)).
Lemma candidate_542: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n (lfappend x Nil)))   (lfappend y (Cons n x)).
Lemma candidate_543: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_544: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (lfappend x Nil))) (lfappend y (Cons n x)).
Lemma candidate_545: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_546: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x Nil) (lfappend y (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_547: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (rotate n (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_548: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (rotate lf7 (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_549: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n (rotate lf7 Nil))))   (lfappend y (Cons n x)).
Lemma candidate_550: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_551: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend x (lfappend y (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_552: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))).
Lemma candidate_553: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (rotate n Nil) (lfappend y (Cons n x))).
Lemma candidate_554: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (lfappend y Nil) (Cons n (lfappend x Nil))).
Lemma candidate_555: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_556: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_557: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_558: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5))   (rotate lf7 (rotate (len lf5) (lfappend lf5 lf4))).
Lemma candidate_559: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5))   (rotate lf7 match lfappend lf5 lf4 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_560: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5))   (rotate lf7 (lfappend lf4 (rotate lf7 lf5))).
Lemma candidate_561: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5))   (rotate lf7 (lfappend lf4 (lfappend lf5 Nil))).
Lemma candidate_562: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5))   (match lfappend lf5 lf4 with | Cons y x => rotate lf7 (lfappend x (Cons y Nil)) | Nil => Nil end).
Lemma candidate_563: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5)) (rotate lf7 (lfappend lf4 lf5)).
Lemma candidate_564: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (lfappend (lfappend lf4 Nil) lf5).
Lemma candidate_565: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (lfappend (lfappend lf4 lf5) Nil).
Lemma candidate_566: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (rotate (len lf5) (lfappend lf5 lf4)).
Lemma candidate_567: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5)   (match lfappend lf5 lf4 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_568: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (lfappend lf4 (lfappend lf5 Nil)).
Lemma candidate_569: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (lfappend lf4 lf5).
Lemma candidate_570: forall (n : natural) (x : lst), @eq lst (Cons n x) (rotate (len x) (lfappend x (Cons n Nil))).
Lemma candidate_571: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) (lfappend x Nil))).
Lemma candidate_572: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_573: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) x)).
Lemma candidate_574: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_575: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_576: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (rotate (len lf6) lf6)) (lfappend y lf6).
Lemma candidate_577: forall (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend y Nil) lf6) (lfappend y lf6).
Lemma candidate_578: forall (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend y lf6) Nil) (lfappend y lf6).
Lemma candidate_579: forall (y : lst) (lf6 : lst), @eq lst (rotate (len lf6) (lfappend lf6 y)) (lfappend y lf6).
Lemma candidate_580: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (lfappend lf6 Nil)) (lfappend y lf6).
Lemma candidate_581: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y lf6).
Lemma candidate_582: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (match lfappend y (lfappend lf6 Nil) with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_583: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (match rotate (len y) (lfappend y lf6) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_584: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (rotate (len y) match lfappend y lf6 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_585: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (match lfappend lf6 (lfappend y Nil) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_586: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (match lfappend y lf6 with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_587: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (match lfappend lf6 y with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_588: forall (n : natural) (lf7 : natural) (lf4 : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8)))   (match rotate lf7 (Cons n lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_589: forall (n : natural) (lf7 : natural) (lf4 : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8)))   (rotate lf7 (lfappend (lfappend lf4 lf8) (Cons n Nil))).
Lemma candidate_590: forall (n : natural) (lf7 : natural) (lf4 : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8)))   (rotate lf7 (lfappend (lfappend lf4 Nil) (Cons n Nil))).
Lemma candidate_591: forall (n : natural) (lf7 : natural) (lf4 : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8)))   (lfappend lf8 (rotate lf7 (lfappend lf4 (Cons n Nil)))).
Lemma candidate_592: forall (n : natural) (lf7 : natural) (lf4 : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8)))   (rotate lf7 (lfappend lf4 (Cons n lf8))).
Lemma candidate_593: forall (n : natural) (lf7 : natural) (lf4 : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8)))   (rotate lf7 (lfappend lf4 (Cons n Nil))).
Lemma candidate_594: forall (n : natural) (lf7 : natural) (lf4 : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8)))   (match rotate lf7 (Cons n lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_595: forall (n : natural) (lf7 : natural) (lf4 : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8)))   (rotate lf7 (lfappend (lfappend lf4 lf8) (Cons n Nil))).
Lemma candidate_596: forall (n : natural) (lf7 : natural) (lf4 : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8)))   (rotate lf7 (lfappend (lfappend lf4 Nil) (Cons n Nil))).
Lemma candidate_597: forall (n : natural) (lf7 : natural) (lf4 : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8)))   (lfappend lf8 (rotate lf7 (lfappend lf4 (Cons n Nil)))).
Lemma candidate_598: forall (n : natural) (lf7 : natural) (lf4 : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8)))   (rotate lf7 (lfappend lf4 (Cons n lf8))).
Lemma candidate_599: forall (n : natural) (lf7 : natural) (lf4 : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8)))   (rotate lf7 (lfappend lf4 (Cons n Nil))).
Lemma candidate_600: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8)) (lfappend lf4 (Cons n (rotate n Nil))).
Lemma candidate_601: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8))   (lfappend lf8 (lfappend lf4 (Cons n Nil))).
Lemma candidate_602: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8))   (lfappend lf4 (lfappend lf8 (Cons n Nil))).
Lemma candidate_603: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8)) (lfappend lf4 (rotate n (Cons n Nil))).
Lemma candidate_604: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8)) (lfappend lf4 (Cons n lf8)).
Lemma candidate_605: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8)) (lfappend lf4 (Cons n Nil)).
Lemma candidate_606: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (rotate (len lf6) lf6)).
Lemma candidate_607: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y Nil) lf6).
Lemma candidate_608: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y lf6) Nil).
Lemma candidate_609: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (rotate (len lf6) (lfappend lf6 y)).
Lemma candidate_610: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (lfappend lf6 Nil)).
Lemma candidate_611: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y lf6).
Lemma candidate_612: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n (lfappend lf8 Nil)).
Lemma candidate_613: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n (rotate n Nil)).
Lemma candidate_614: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (lfappend lf8 (Cons n Nil)).
Lemma candidate_615: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (rotate n (Cons n Nil)).
Lemma candidate_616: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n lf8).
Lemma candidate_617: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n Nil).
Lemma candidate_618: forall (n : natural) (lf7 : natural) (lf4 : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8)))   (match rotate lf7 (Cons n lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_619: forall (n : natural) (lf7 : natural) (lf4 : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8)))   (rotate lf7 (lfappend (lfappend lf4 lf8) (Cons n Nil))).
Lemma candidate_620: forall (n : natural) (lf7 : natural) (lf4 : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8)))   (rotate lf7 (lfappend (lfappend lf4 Nil) (Cons n Nil))).
Lemma candidate_621: forall (n : natural) (lf7 : natural) (lf4 : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8)))   (lfappend lf8 (rotate lf7 (lfappend lf4 (Cons n Nil)))).
Lemma candidate_622: forall (n : natural) (lf7 : natural) (lf4 : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8)))   (rotate lf7 (lfappend lf4 (Cons n lf8))).
Lemma candidate_623: forall (n : natural) (lf7 : natural) (lf4 : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8)))   (rotate lf7 (lfappend lf4 (Cons n Nil))).
Lemma candidate_624: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_625: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rotate n Nil) (lfappend y (Cons n x)))   (lfappend y (Cons n x)).
Lemma candidate_626: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n (lfappend x Nil)))   (lfappend y (Cons n x)).
Lemma candidate_627: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_628: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (lfappend x Nil))) (lfappend y (Cons n x)).
Lemma candidate_629: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_630: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x Nil) (lfappend y (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_631: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (rotate n (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_632: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (rotate lf7 (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_633: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n (rotate lf7 Nil))))   (lfappend y (Cons n x)).
Lemma candidate_634: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_635: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend x (lfappend y (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_636: forall (n : natural) (lf7 : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate lf7 (lfappend lf4 (rotate (len x) (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_637: forall (n : natural) (lf7 : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n (rotate n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_638: forall (n : natural) (lf7 : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate lf7 (lfappend lf4 (rotate n (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_639: forall (n : natural) (lf7 : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate lf7 (lfappend lf4 (rotate lf7 (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_640: forall (n : natural) (lf7 : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n (rotate lf7 Nil))))   (lfappend y (Cons n x)).
Lemma candidate_641: forall (n : natural) (lf7 : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil))) (lfappend y (Cons n x)).
Lemma candidate_642: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))).
Lemma candidate_643: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (rotate n Nil) (lfappend y (Cons n x))).
Lemma candidate_644: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (lfappend y Nil) (Cons n (lfappend x Nil))).
Lemma candidate_645: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_646: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_647: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_648: forall (n : natural) (x : lst), @eq lst (Cons n x) (rotate (len x) (lfappend x (Cons n Nil))).
Lemma candidate_649: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) (lfappend x Nil))).
Lemma candidate_650: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_651: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) x)).
Lemma candidate_652: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_653: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_654: forall (n : natural) (lf7 : natural) (lf4 : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8)))   (match rotate lf7 (Cons n lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_655: forall (n : natural) (lf7 : natural) (lf4 : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8)))   (rotate lf7 (lfappend (lfappend lf4 lf8) (Cons n Nil))).
Lemma candidate_656: forall (n : natural) (lf7 : natural) (lf4 : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8)))   (rotate lf7 (lfappend (lfappend lf4 Nil) (Cons n Nil))).
Lemma candidate_657: forall (n : natural) (lf7 : natural) (lf4 : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8)))   (lfappend lf8 (rotate lf7 (lfappend lf4 (Cons n Nil)))).
Lemma candidate_658: forall (n : natural) (lf7 : natural) (lf4 : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8)))   (rotate lf7 (lfappend lf4 (Cons n lf8))).
Lemma candidate_659: forall (n : natural) (lf7 : natural) (lf4 : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n lf8)))   (rotate lf7 (lfappend lf4 (Cons n Nil))).
Lemma candidate_660: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8)) (lfappend lf4 (Cons n (rotate n Nil))).
Lemma candidate_661: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8))   (lfappend lf8 (lfappend lf4 (Cons n Nil))).
Lemma candidate_662: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8))   (lfappend lf4 (lfappend lf8 (Cons n Nil))).
Lemma candidate_663: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8)) (lfappend lf4 (rotate n (Cons n Nil))).
Lemma candidate_664: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8)) (lfappend lf4 (Cons n lf8)).
Lemma candidate_665: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8)) (lfappend lf4 (Cons n Nil)).
Lemma candidate_666: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n (lfappend lf8 Nil)).
Lemma candidate_667: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n (rotate n Nil)).
Lemma candidate_668: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (lfappend lf8 (Cons n Nil)).
Lemma candidate_669: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (rotate n (Cons n Nil)).
Lemma candidate_670: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n lf8).
Lemma candidate_671: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n Nil).
Lemma candidate_672: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (rotate (len lf6) lf6)) (lfappend y lf6).
Lemma candidate_673: forall (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend y Nil) lf6) (lfappend y lf6).
Lemma candidate_674: forall (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend y lf6) Nil) (lfappend y lf6).
Lemma candidate_675: forall (y : lst) (lf6 : lst), @eq lst (rotate (len lf6) (lfappend lf6 y)) (lfappend y lf6).
Lemma candidate_676: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (lfappend lf6 Nil)) (lfappend y lf6).
Lemma candidate_677: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y lf6).
Lemma candidate_678: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (lfappend (rotate n Nil) (rotate lf7 (lfappend lf4 (Cons n Nil)))).
Lemma candidate_679: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (lfappend (rotate lf7 Nil) (rotate lf7 (lfappend lf4 (Cons n Nil)))).
Lemma candidate_680: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (match rotate lf7 (lfappend lf4 (Cons n Nil)) with | Cons y x => rotate (len lf4) (lfappend x (Cons y Nil)) | Nil => Nil end).
Lemma candidate_681: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (match rotate lf7 (Cons n lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_682: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (rotate lf7 (lfappend (lfappend lf4 Nil) (Cons n Nil))).
Lemma candidate_683: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (rotate lf7 (lfappend lf4 (Cons n Nil))).
Lemma candidate_684: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (match lfappend y (lfappend lf6 Nil) with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_685: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (match rotate (len y) (lfappend y lf6) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_686: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (rotate (len y) match lfappend y lf6 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_687: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (match lfappend lf6 (lfappend y Nil) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_688: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (match lfappend y lf6 with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_689: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (match lfappend lf6 y with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_690: forall (n : natural) (lf7 : natural) (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n (rotate (len y) Nil))))   (lfappend y lf6).
Lemma candidate_691: forall (n : natural) (lf7 : natural) (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n (rotate (len lf4) Nil))))   (lfappend y lf6).
Lemma candidate_692: forall (n : natural) (lf7 : natural) (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n (rotate (len lf6) Nil))))   (lfappend y lf6).
Lemma candidate_693: forall (n : natural) (lf7 : natural) (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n (rotate n Nil)))) (lfappend y lf6).
Lemma candidate_694: forall (n : natural) (lf7 : natural) (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n (rotate lf7 Nil))))   (lfappend y lf6).
Lemma candidate_695: forall (n : natural) (lf7 : natural) (y : lst) (lf4 : lst) (lf6 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n (Nil)))) (lfappend y lf6).
Lemma candidate_696: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (lfappend (rotate n Nil) (rotate lf7 (lfappend lf4 (Cons n Nil)))).
Lemma candidate_697: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (lfappend (rotate lf7 Nil) (rotate lf7 (lfappend lf4 (Cons n Nil)))).
Lemma candidate_698: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (match rotate lf7 (lfappend lf4 (Cons n Nil)) with | Cons y x => rotate (len lf4) (lfappend x (Cons y Nil)) | Nil => Nil end).
Lemma candidate_699: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (match rotate lf7 (Cons n lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_700: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (rotate lf7 (lfappend (lfappend lf4 Nil) (Cons n Nil))).
Lemma candidate_701: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (rotate lf7 (lfappend lf4 (Cons n Nil))).
Lemma candidate_702: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n (rotate n Nil))).
Lemma candidate_703: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n (rotate n Nil))).
Lemma candidate_704: forall (n : natural), @eq lst (Cons n Nil) (rotate n (rotate n (Cons n Nil))).
Lemma candidate_705: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n Nil)).
Lemma candidate_706: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n Nil)).
Lemma candidate_707: forall (n : natural), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_708: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (rotate (len lf6) lf6)).
Lemma candidate_709: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y Nil) lf6).
Lemma candidate_710: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y lf6) Nil).
Lemma candidate_711: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (rotate (len lf6) (lfappend lf6 y)).
Lemma candidate_712: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (lfappend lf6 Nil)).
Lemma candidate_713: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y lf6).
Lemma candidate_714: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil))   (lfappend (lfappend lf4 Nil) (rotate n (Cons n Nil))).
Lemma candidate_715: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil))   (lfappend (lfappend lf4 Nil) (Cons n Nil)).
Lemma candidate_716: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil))   (lfappend lf4 (rotate (len lf4) (Cons n Nil))).
Lemma candidate_717: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (lfappend lf4 (Cons n (rotate n Nil))).
Lemma candidate_718: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (lfappend lf4 (rotate n (Cons n Nil))).
Lemma candidate_719: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (lfappend lf4 (Cons n Nil)).
Lemma candidate_720: @eq lst Nil (Nil).
Lemma candidate_721: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (lfappend (rotate n Nil) (rotate lf7 (lfappend lf4 (Cons n Nil)))).
Lemma candidate_722: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (lfappend (rotate lf7 Nil) (rotate lf7 (lfappend lf4 (Cons n Nil)))).
Lemma candidate_723: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (match rotate lf7 (lfappend lf4 (Cons n Nil)) with | Cons y x => rotate (len lf4) (lfappend x (Cons y Nil)) | Nil => Nil end).
Lemma candidate_724: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (match rotate lf7 (Cons n lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_725: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (rotate lf7 (lfappend (lfappend lf4 Nil) (Cons n Nil))).
Lemma candidate_726: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (rotate lf7 (lfappend lf4 (Cons n Nil))).
Lemma candidate_727: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_728: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rotate n Nil) (lfappend y (Cons n x)))   (lfappend y (Cons n x)).
Lemma candidate_729: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n (lfappend x Nil)))   (lfappend y (Cons n x)).
Lemma candidate_730: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_731: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (lfappend x Nil))) (lfappend y (Cons n x)).
Lemma candidate_732: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_733: forall (n : natural) (lf7 : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate lf7 (lfappend lf4 (rotate (len x) (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_734: forall (n : natural) (lf7 : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n (rotate n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_735: forall (n : natural) (lf7 : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate lf7 (lfappend lf4 (rotate n (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_736: forall (n : natural) (lf7 : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate lf7 (lfappend lf4 (rotate lf7 (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_737: forall (n : natural) (lf7 : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n (rotate lf7 Nil))))   (lfappend y (Cons n x)).
Lemma candidate_738: forall (n : natural) (lf7 : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil))) (lfappend y (Cons n x)).
Lemma candidate_739: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x Nil) (lfappend y (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_740: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (rotate n (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_741: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (rotate lf7 (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_742: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n (rotate lf7 Nil))))   (lfappend y (Cons n x)).
Lemma candidate_743: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_744: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend x (lfappend y (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_745: forall (n : natural) (lf7 : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n (rotate (len y) Nil))))   (lfappend y (Cons n x)).
Lemma candidate_746: forall (n : natural) (lf7 : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n (rotate (len lf4) Nil))))   (lfappend y (Cons n x)).
Lemma candidate_747: forall (n : natural) (lf7 : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n (rotate (len x) Nil))))   (lfappend y (Cons n x)).
Lemma candidate_748: forall (n : natural) (lf7 : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n (rotate n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_749: forall (n : natural) (lf7 : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n (rotate lf7 Nil))))   (lfappend y (Cons n x)).
Lemma candidate_750: forall (n : natural) (lf7 : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n (Nil)))) (lfappend y (Cons n x)).
Lemma candidate_751: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))).
Lemma candidate_752: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (rotate n Nil) (lfappend y (Cons n x))).
Lemma candidate_753: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (lfappend y Nil) (Cons n (lfappend x Nil))).
Lemma candidate_754: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_755: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_756: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_757: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (lfappend (rotate n Nil) (rotate lf7 (lfappend lf4 (Cons n Nil)))).
Lemma candidate_758: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (lfappend (rotate lf7 Nil) (rotate lf7 (lfappend lf4 (Cons n Nil)))).
Lemma candidate_759: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (match rotate lf7 (lfappend lf4 (Cons n Nil)) with | Cons y x => rotate (len lf4) (lfappend x (Cons y Nil)) | Nil => Nil end).
Lemma candidate_760: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (match rotate lf7 (Cons n lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_761: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (rotate lf7 (lfappend (lfappend lf4 Nil) (Cons n Nil))).
Lemma candidate_762: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (rotate lf7 (lfappend lf4 (Cons n Nil))).
Lemma candidate_763: forall (n : natural) (x : lst), @eq lst (Cons n x) (rotate (len x) (lfappend x (Cons n Nil))).
Lemma candidate_764: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) (lfappend x Nil))).
Lemma candidate_765: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_766: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) x)).
Lemma candidate_767: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_768: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_769: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n (rotate n Nil))).
Lemma candidate_770: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n (rotate n Nil))).
Lemma candidate_771: forall (n : natural), @eq lst (Cons n Nil) (rotate n (rotate n (Cons n Nil))).
Lemma candidate_772: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n Nil)).
Lemma candidate_773: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n Nil)).
Lemma candidate_774: forall (n : natural), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_775: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil))   (lfappend (lfappend lf4 Nil) (rotate n (Cons n Nil))).
Lemma candidate_776: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil))   (lfappend (lfappend lf4 Nil) (Cons n Nil)).
Lemma candidate_777: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil))   (lfappend lf4 (rotate (len lf4) (Cons n Nil))).
Lemma candidate_778: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (lfappend lf4 (Cons n (rotate n Nil))).
Lemma candidate_779: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (lfappend lf4 (rotate n (Cons n Nil))).
Lemma candidate_780: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (lfappend lf4 (Cons n Nil)).
Lemma candidate_781: @eq lst Nil (Nil).
Lemma candidate_782: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (rotate (len lf6) lf6)) (lfappend y lf6).
Lemma candidate_783: forall (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend y Nil) lf6) (lfappend y lf6).
Lemma candidate_784: forall (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend y lf6) Nil) (lfappend y lf6).
Lemma candidate_785: forall (y : lst) (lf6 : lst), @eq lst (rotate (len lf6) (lfappend lf6 y)) (lfappend y lf6).
Lemma candidate_786: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (lfappend lf6 Nil)) (lfappend y lf6).
Lemma candidate_787: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y lf6).
Lemma candidate_788: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 (rotate lf7 x))).
Lemma candidate_789: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (rotate lf7 (lfappend x (lfappend y lf5))).
Lemma candidate_790: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend y (rotate lf7 (lfappend x lf5))).
Lemma candidate_791: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 (lfappend x Nil))).
Lemma candidate_792: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend (lfappend y lf5) x).
Lemma candidate_793: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 x)).
Lemma candidate_794: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (match lfappend y (lfappend lf6 Nil) with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_795: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (match rotate (len y) (lfappend y lf6) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_796: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (rotate (len y) match lfappend y lf6 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_797: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (match lfappend lf6 (lfappend y Nil) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_798: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (match lfappend y lf6 with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_799: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (match lfappend lf6 y with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_800: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 (rotate lf7 x))).
Lemma candidate_801: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (rotate lf7 (lfappend x (lfappend y lf5))).
Lemma candidate_802: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend y (rotate lf7 (lfappend x lf5))).
Lemma candidate_803: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 (lfappend x Nil))).
Lemma candidate_804: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend (lfappend y lf5) x).
Lemma candidate_805: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 x)).
Lemma candidate_806: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (rotate (len lf6) lf6)).
Lemma candidate_807: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y Nil) lf6).
Lemma candidate_808: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y lf6) Nil).
Lemma candidate_809: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (rotate (len lf6) (lfappend lf6 y)).
Lemma candidate_810: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (lfappend lf6 Nil)).
Lemma candidate_811: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y lf6).
Lemma candidate_812: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5)   (lfappend (lfappend x y) (lfappend lf5 Nil)).
Lemma candidate_813: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5)   (lfappend x (rotate (len lf5) (lfappend lf5 y))).
Lemma candidate_814: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5)   (lfappend x match lfappend lf5 y with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_815: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5)   (lfappend x (lfappend y (lfappend lf5 Nil))).
Lemma candidate_816: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5) (lfappend (lfappend x y) lf5).
Lemma candidate_817: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5) (lfappend x (lfappend y lf5)).
Lemma candidate_818: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (rotate (len y) y)).
Lemma candidate_819: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) y).
Lemma candidate_820: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x y) Nil).
Lemma candidate_821: forall (y : lst) (x : lst), @eq lst (lfappend x y) (rotate (len y) (lfappend y x)).
Lemma candidate_822: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend y Nil)).
Lemma candidate_823: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x y).
Lemma candidate_824: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_825: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rotate n Nil) (lfappend y (Cons n x)))   (lfappend y (Cons n x)).
Lemma candidate_826: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n (lfappend x Nil)))   (lfappend y (Cons n x)).
Lemma candidate_827: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_828: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (lfappend x Nil))) (lfappend y (Cons n x)).
Lemma candidate_829: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_830: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 (rotate lf7 x))).
Lemma candidate_831: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (rotate lf7 (lfappend x (lfappend y lf5))).
Lemma candidate_832: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend y (rotate lf7 (lfappend x lf5))).
Lemma candidate_833: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 (lfappend x Nil))).
Lemma candidate_834: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend (lfappend y lf5) x).
Lemma candidate_835: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 x)).
Lemma candidate_836: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend y      (match lfappend lf5 x with | Cons y x => rotate lf7 (lfappend x (Cons y Nil)) | Nil => Nil end)).
Lemma candidate_837: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend y (rotate (len x) (lfappend x lf5))).
Lemma candidate_838: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 (rotate lf7 x))).
Lemma candidate_839: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend y (rotate lf7 (lfappend x lf5))).
Lemma candidate_840: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 (lfappend x Nil))).
Lemma candidate_841: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 x)).
Lemma candidate_842: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x Nil) (lfappend y (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_843: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (rotate n (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_844: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (rotate lf7 (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_845: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n (rotate lf7 Nil))))   (lfappend y (Cons n x)).
Lemma candidate_846: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_847: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend x (lfappend y (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_848: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend (rotate lf7 x) y) lf5))   (lfappend y (Cons n x)).
Lemma candidate_849: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend (lfappend x Nil) y) lf5))   (lfappend y (Cons n x)).
Lemma candidate_850: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend (lfappend x y) Nil) lf5))   (lfappend y (Cons n x)).
Lemma candidate_851: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (rotate (len y) (lfappend y x)) lf5))   (lfappend y (Cons n x)).
Lemma candidate_852: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x (lfappend y Nil)) lf5))   (lfappend y (Cons n x)).
Lemma candidate_853: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5)) (lfappend y (Cons n x)).
Lemma candidate_854: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 (rotate lf7 x))).
Lemma candidate_855: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (rotate lf7 (lfappend x (lfappend y lf5))).
Lemma candidate_856: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend y (rotate lf7 (lfappend x lf5))).
Lemma candidate_857: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 (lfappend x Nil))).
Lemma candidate_858: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend (lfappend y lf5) x).
Lemma candidate_859: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 x)).
Lemma candidate_860: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))).
Lemma candidate_861: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (rotate n Nil) (lfappend y (Cons n x))).
Lemma candidate_862: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (lfappend y Nil) (Cons n (lfappend x Nil))).
Lemma candidate_863: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_864: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_865: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_866: forall (n : natural) (x : lst), @eq lst (Cons n x) (rotate (len x) (lfappend x (Cons n Nil))).
Lemma candidate_867: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) (lfappend x Nil))).
Lemma candidate_868: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_869: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) x)).
Lemma candidate_870: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_871: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_872: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5)   (lfappend (lfappend x y) (lfappend lf5 Nil)).
Lemma candidate_873: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5)   (lfappend x (rotate (len lf5) (lfappend lf5 y))).
Lemma candidate_874: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5)   (lfappend x match lfappend lf5 y with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_875: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5)   (lfappend x (lfappend y (lfappend lf5 Nil))).
Lemma candidate_876: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5) (lfappend (lfappend x y) lf5).
Lemma candidate_877: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5) (lfappend x (lfappend y lf5)).
Lemma candidate_878: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (rotate (len y) y)).
Lemma candidate_879: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) y).
Lemma candidate_880: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x y) Nil).
Lemma candidate_881: forall (y : lst) (x : lst), @eq lst (lfappend x y) (rotate (len y) (lfappend y x)).
Lemma candidate_882: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend y Nil)).
Lemma candidate_883: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x y).
Lemma candidate_884: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (rotate (len lf6) lf6)) (lfappend y lf6).
Lemma candidate_885: forall (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend y Nil) lf6) (lfappend y lf6).
Lemma candidate_886: forall (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend y lf6) Nil) (lfappend y lf6).
Lemma candidate_887: forall (y : lst) (lf6 : lst), @eq lst (rotate (len lf6) (lfappend lf6 y)) (lfappend y lf6).
Lemma candidate_888: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (lfappend lf6 Nil)) (lfappend y lf6).
Lemma candidate_889: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y lf6).
Lemma candidate_890: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (match lfappend y (lfappend lf6 Nil) with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_891: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (match rotate (len y) (lfappend y lf6) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_892: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (rotate (len y) match lfappend y lf6 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_893: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (match lfappend lf6 (lfappend y Nil) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_894: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (match lfappend y lf6 with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_895: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (match lfappend lf6 y with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_896: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend lf8 (lfappend y (Cons n x))).
Lemma candidate_897: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (lfappend lf8 (Cons n x))).
Lemma candidate_898: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (rotate lf7 x))).
Lemma candidate_899: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend x lf8))).
Lemma candidate_900: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_901: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_902: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend lf8 (lfappend y (Cons n x))).
Lemma candidate_903: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (lfappend lf8 (Cons n x))).
Lemma candidate_904: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (rotate lf7 x))).
Lemma candidate_905: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend x lf8))).
Lemma candidate_906: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_907: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_908: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend (lfappend x y) (lfappend lf8 (Cons n Nil))).
Lemma candidate_909: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend (lfappend x y) (rotate n (Cons n Nil))).
Lemma candidate_910: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend (lfappend x y) (Cons n lf8)).
Lemma candidate_911: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend (lfappend x y) (Cons n Nil)).
Lemma candidate_912: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend x (lfappend y (Cons n lf8))).
Lemma candidate_913: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend x (lfappend y (Cons n Nil))).
Lemma candidate_914: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (rotate (len lf6) lf6)).
Lemma candidate_915: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y Nil) lf6).
Lemma candidate_916: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y lf6) Nil).
Lemma candidate_917: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (rotate (len lf6) (lfappend lf6 y)).
Lemma candidate_918: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (lfappend lf6 Nil)).
Lemma candidate_919: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y lf6).
Lemma candidate_920: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n (lfappend lf8 Nil)).
Lemma candidate_921: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n (rotate n Nil)).
Lemma candidate_922: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (lfappend lf8 (Cons n Nil)).
Lemma candidate_923: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (rotate n (Cons n Nil)).
Lemma candidate_924: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n lf8).
Lemma candidate_925: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n Nil).
Lemma candidate_926: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (rotate (len y) y)).
Lemma candidate_927: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) y).
Lemma candidate_928: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x y) Nil).
Lemma candidate_929: forall (y : lst) (x : lst), @eq lst (lfappend x y) (rotate (len y) (lfappend y x)).
Lemma candidate_930: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend y Nil)).
Lemma candidate_931: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x y).
Lemma candidate_932: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend lf8 (lfappend y (Cons n x))).
Lemma candidate_933: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (lfappend lf8 (Cons n x))).
Lemma candidate_934: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (rotate lf7 x))).
Lemma candidate_935: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend x lf8))).
Lemma candidate_936: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_937: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_938: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_939: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rotate n Nil) (lfappend y (Cons n x)))   (lfappend y (Cons n x)).
Lemma candidate_940: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n (lfappend x Nil)))   (lfappend y (Cons n x)).
Lemma candidate_941: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_942: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (lfappend x Nil))) (lfappend y (Cons n x)).
Lemma candidate_943: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_944: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend lf8 x))).
Lemma candidate_945: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (lfappend lf8 (Cons n x))).
Lemma candidate_946: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (rotate lf7 x))).
Lemma candidate_947: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend x lf8))).
Lemma candidate_948: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_949: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_950: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x Nil) (lfappend y (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_951: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (rotate n (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_952: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (rotate lf7 (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_953: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n (rotate lf7 Nil))))   (lfappend y (Cons n x)).
Lemma candidate_954: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_955: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend x (lfappend y (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_956: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (rotate (len x) (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_957: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n (rotate n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_958: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (rotate n (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_959: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (rotate lf7 (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_960: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n (rotate lf7 Nil))))   (lfappend y (Cons n x)).
Lemma candidate_961: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_962: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (rotate (len y) (lfappend y x)) (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_963: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend lf8 (lfappend x y)) (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_964: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x (lfappend lf8 y)) (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_965: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x (lfappend y lf8)) (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_966: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x (lfappend y Nil)) (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_967: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_968: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))).
Lemma candidate_969: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (rotate n Nil) (lfappend y (Cons n x))).
Lemma candidate_970: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (lfappend y Nil) (Cons n (lfappend x Nil))).
Lemma candidate_971: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_972: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_973: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_974: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend lf8 (lfappend y (Cons n x))).
Lemma candidate_975: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (lfappend lf8 (Cons n x))).
Lemma candidate_976: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (rotate lf7 x))).
Lemma candidate_977: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend x lf8))).
Lemma candidate_978: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_979: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_980: forall (n : natural) (x : lst), @eq lst (Cons n x) (rotate (len x) (lfappend x (Cons n Nil))).
Lemma candidate_981: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) (lfappend x Nil))).
Lemma candidate_982: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_983: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) x)).
Lemma candidate_984: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_985: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_986: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend (lfappend x y) (lfappend lf8 (Cons n Nil))).
Lemma candidate_987: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend (lfappend x y) (rotate n (Cons n Nil))).
Lemma candidate_988: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend (lfappend x y) (Cons n lf8)).
Lemma candidate_989: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend (lfappend x y) (Cons n Nil)).
Lemma candidate_990: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend x (lfappend y (Cons n lf8))).
Lemma candidate_991: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend x (lfappend y (Cons n Nil))).
Lemma candidate_992: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n (lfappend lf8 Nil)).
Lemma candidate_993: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n (rotate n Nil)).
Lemma candidate_994: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (lfappend lf8 (Cons n Nil)).
Lemma candidate_995: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (rotate n (Cons n Nil)).
Lemma candidate_996: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n lf8).
Lemma candidate_997: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n Nil).
Lemma candidate_998: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (rotate (len y) y)).
Lemma candidate_999: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) y).
Lemma candidate_1000: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x y) Nil).
Lemma candidate_1001: forall (y : lst) (x : lst), @eq lst (lfappend x y) (rotate (len y) (lfappend y x)).
Lemma candidate_1002: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend y Nil)).
Lemma candidate_1003: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x y).
Lemma candidate_1004: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (rotate (len lf6) lf6)) (lfappend y lf6).
Lemma candidate_1005: forall (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend y Nil) lf6) (lfappend y lf6).
Lemma candidate_1006: forall (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend y lf6) Nil) (lfappend y lf6).
Lemma candidate_1007: forall (y : lst) (lf6 : lst), @eq lst (rotate (len lf6) (lfappend lf6 y)) (lfappend y lf6).
Lemma candidate_1008: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (lfappend lf6 Nil)) (lfappend y lf6).
Lemma candidate_1009: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y lf6).
Lemma candidate_1010: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (rotate lf7 (lfappend (lfappend x y) (Cons n Nil))).
Lemma candidate_1011: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_1012: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (rotate lf7 (lfappend x (Cons n Nil)))).
Lemma candidate_1013: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n (rotate lf7 x))).
Lemma candidate_1014: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1015: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1016: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (match lfappend y (lfappend lf6 Nil) with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1017: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (match rotate (len y) (lfappend y lf6) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1018: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (rotate (len y) match lfappend y lf6 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1019: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (match lfappend lf6 (lfappend y Nil) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1020: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (match lfappend y lf6 with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1021: forall (lf7 : natural) (y : lst) (lf6 : lst), @eq lst   (rotate lf7      (match lfappend lf6 y with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1022: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n (rotate (len y) Nil))))   (lfappend y lf6).
Lemma candidate_1023: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n (rotate (len x) Nil))))   (lfappend y lf6).
Lemma candidate_1024: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate lf7 (lfappend (lfappend x y) (Cons n (rotate (len lf6) Nil))))   (lfappend y lf6).
Lemma candidate_1025: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n (rotate n Nil))))   (lfappend y lf6).
Lemma candidate_1026: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n (rotate lf7 Nil))))   (lfappend y lf6).
Lemma candidate_1027: forall (n : natural) (lf7 : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n (Nil))))   (lfappend y lf6).
Lemma candidate_1028: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (rotate lf7 (lfappend (lfappend x y) (Cons n Nil))).
Lemma candidate_1029: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_1030: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (rotate lf7 (lfappend x (Cons n Nil)))).
Lemma candidate_1031: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n (rotate lf7 x))).
Lemma candidate_1032: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1033: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1034: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n (rotate n Nil))).
Lemma candidate_1035: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n (rotate n Nil))).
Lemma candidate_1036: forall (n : natural), @eq lst (Cons n Nil) (rotate n (rotate n (Cons n Nil))).
Lemma candidate_1037: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n Nil)).
Lemma candidate_1038: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n Nil)).
Lemma candidate_1039: forall (n : natural), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_1040: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (rotate (len lf6) lf6)).
Lemma candidate_1041: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y Nil) lf6).
Lemma candidate_1042: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y lf6) Nil).
Lemma candidate_1043: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (rotate (len lf6) (lfappend lf6 y)).
Lemma candidate_1044: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (lfappend lf6 Nil)).
Lemma candidate_1045: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y lf6).
Lemma candidate_1046: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (match lfappend y (Cons n x) with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end).
Lemma candidate_1047: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend (lfappend x y) (Cons n (rotate n Nil))).
Lemma candidate_1048: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend (lfappend x Nil) (lfappend y (Cons n Nil))).
Lemma candidate_1049: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend (lfappend x y) (rotate n (Cons n Nil))).
Lemma candidate_1050: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend (lfappend x y) (Cons n Nil)).
Lemma candidate_1051: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend x (lfappend y (Cons n Nil))).
Lemma candidate_1052: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (rotate (len y) y)).
Lemma candidate_1053: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) y).
Lemma candidate_1054: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x y) Nil).
Lemma candidate_1055: forall (y : lst) (x : lst), @eq lst (lfappend x y) (rotate (len y) (lfappend y x)).
Lemma candidate_1056: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend y Nil)).
Lemma candidate_1057: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x y).
Lemma candidate_1058: @eq lst Nil (Nil).
Lemma candidate_1059: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1060: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rotate n Nil) (lfappend y (Cons n x)))   (lfappend y (Cons n x)).
Lemma candidate_1061: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n (lfappend x Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1062: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1063: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (lfappend x Nil))) (lfappend y (Cons n x)).
Lemma candidate_1064: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1065: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (rotate lf7 (lfappend (lfappend x y) (Cons n Nil))).
Lemma candidate_1066: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_1067: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (rotate lf7 (lfappend x (Cons n Nil)))).
Lemma candidate_1068: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n (rotate lf7 x))).
Lemma candidate_1069: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1070: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1071: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n (lfappend x (rotate lf7 Nil)))).
Lemma candidate_1072: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n (rotate (len x) x))).
Lemma candidate_1073: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (rotate lf7 (lfappend x (Cons n Nil)))).
Lemma candidate_1074: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n (rotate lf7 x))).
Lemma candidate_1075: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1076: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1077: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (rotate (len x) (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1078: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n (rotate n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1079: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (rotate n (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1080: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (rotate lf7 (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1081: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n (rotate lf7 Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1082: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1083: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x Nil) (lfappend y (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1084: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (rotate n (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1085: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (rotate lf7 (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1086: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n (rotate lf7 Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1087: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1088: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend x (lfappend y (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1089: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend (rotate lf7 x) y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1090: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend (lfappend x Nil) y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1091: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend (lfappend x y) Nil) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1092: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (rotate (len y) (lfappend y x)) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1093: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x (lfappend y Nil)) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1094: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1095: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst   (rotate lf7      (lfappend (lfappend x y) (Cons n (rotate lf7 (rotate lf7 Nil)))))   (lfappend y (Cons n x)).
Lemma candidate_1096: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n (rotate (len y) Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1097: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n (rotate (len x) Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1098: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n (rotate n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1099: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n (rotate lf7 Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1100: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n (Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1101: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (rotate lf7 (lfappend (lfappend x y) (Cons n Nil))).
Lemma candidate_1102: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_1103: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (rotate lf7 (lfappend x (Cons n Nil)))).
Lemma candidate_1104: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n (rotate lf7 x))).
Lemma candidate_1105: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1106: forall (n : natural) (lf7 : natural) (y : lst) (x : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1107: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))).
Lemma candidate_1108: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (rotate n Nil) (lfappend y (Cons n x))).
Lemma candidate_1109: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (lfappend y Nil) (Cons n (lfappend x Nil))).
Lemma candidate_1110: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_1111: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1112: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1113: forall (n : natural) (x : lst), @eq lst (Cons n x) (rotate (len x) (lfappend x (Cons n Nil))).
Lemma candidate_1114: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) (lfappend x Nil))).
Lemma candidate_1115: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_1116: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) x)).
Lemma candidate_1117: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_1118: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_1119: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n (rotate n Nil))).
Lemma candidate_1120: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n (rotate n Nil))).
Lemma candidate_1121: forall (n : natural), @eq lst (Cons n Nil) (rotate n (rotate n (Cons n Nil))).
Lemma candidate_1122: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n Nil)).
Lemma candidate_1123: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n Nil)).
Lemma candidate_1124: forall (n : natural), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_1125: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (match lfappend y (Cons n x) with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end).
Lemma candidate_1126: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend (lfappend x y) (Cons n (rotate n Nil))).
Lemma candidate_1127: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend (lfappend x Nil) (lfappend y (Cons n Nil))).
Lemma candidate_1128: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend (lfappend x y) (rotate n (Cons n Nil))).
Lemma candidate_1129: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend (lfappend x y) (Cons n Nil)).
Lemma candidate_1130: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend x (lfappend y (Cons n Nil))).
Lemma candidate_1131: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (rotate (len y) y)).
Lemma candidate_1132: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) y).
Lemma candidate_1133: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x y) Nil).
Lemma candidate_1134: forall (y : lst) (x : lst), @eq lst (lfappend x y) (rotate (len y) (lfappend y x)).
Lemma candidate_1135: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend y Nil)).
Lemma candidate_1136: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x y).
Lemma candidate_1137: @eq lst Nil (Nil).
Lemma candidate_1138: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (rotate (len lf6) lf6)) (lfappend y lf6).
Lemma candidate_1139: forall (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend y Nil) lf6) (lfappend y lf6).
Lemma candidate_1140: forall (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend y lf6) Nil) (lfappend y lf6).
Lemma candidate_1141: forall (y : lst) (lf6 : lst), @eq lst (rotate (len lf6) (lfappend lf6 y)) (lfappend y lf6).
Lemma candidate_1142: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (lfappend lf6 Nil)) (lfappend y lf6).
Lemma candidate_1143: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y lf6).
Lemma candidate_1144: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2)   (rotate (len lf2) (rotate (len x) (lfappend lf2 Nil))).
Lemma candidate_1145: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2)   (rotate (len x) (rotate (len lf2) (lfappend lf2 Nil))).
Lemma candidate_1146: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len lf2) (rotate (len x) lf2)).
Lemma candidate_1147: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len x) (rotate (len lf2) lf2)).
Lemma candidate_1148: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len x) (lfappend lf2 Nil)).
Lemma candidate_1149: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len x) lf2).
Lemma candidate_1150: forall (x : lst), @eq natural (len x) (len (rotate (len x) (lfappend x Nil))).
Lemma candidate_1151: forall (x : lst), @eq natural (len x)   (len match lfappend x Nil with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1152: forall (x : lst), @eq natural (len x) (len (rotate (len x) x)).
Lemma candidate_1153: forall (x : lst), @eq natural (len x)   (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1154: forall (x : lst), @eq natural (len x) (len (lfappend x Nil)).
Lemma candidate_1155: forall (x : lst), @eq natural (len x) (len x).
Lemma candidate_1156: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2)   (rotate (len lf2) (rotate (len x) (lfappend lf2 Nil))).
Lemma candidate_1157: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2)   (rotate (len x) (rotate (len lf2) (lfappend lf2 Nil))).
Lemma candidate_1158: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len lf2) (rotate (len x) lf2)).
Lemma candidate_1159: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len x) (rotate (len lf2) lf2)).
Lemma candidate_1160: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len x) (lfappend lf2 Nil)).
Lemma candidate_1161: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len x) lf2).
Lemma candidate_1162: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (rotate (len lf6) lf6)).
Lemma candidate_1163: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y Nil) lf6).
Lemma candidate_1164: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y lf6) Nil).
Lemma candidate_1165: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (rotate (len lf6) (lfappend lf6 y)).
Lemma candidate_1166: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (lfappend lf6 Nil)).
Lemma candidate_1167: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y lf6).
Lemma candidate_1168: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2)   (rotate (len lf2) (rotate (len x) (lfappend lf2 Nil))).
Lemma candidate_1169: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2)   (rotate (len x) (rotate (len lf2) (lfappend lf2 Nil))).
Lemma candidate_1170: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len lf2) (rotate (len x) lf2)).
Lemma candidate_1171: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len x) (rotate (len lf2) lf2)).
Lemma candidate_1172: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len x) (lfappend lf2 Nil)).
Lemma candidate_1173: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len x) lf2).
Lemma candidate_1174: forall (n : natural) (y : lst) (x : lst) (lf2 : lst), @eq lst (rotate (len (rotate (len lf2) x)) lf2) (lfappend y (Cons n x)).
Lemma candidate_1175: forall (n : natural) (y : lst) (x : lst) (lf2 : lst), @eq lst   (rotate      (len match x with | Cons y x => rotate n (lfappend x (Cons y Nil)) | Nil => Nil end)      lf2) (lfappend y (Cons n x)).
Lemma candidate_1176: forall (n : natural) (y : lst) (x : lst) (lf2 : lst), @eq lst   (rotate      (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end)      lf2) (lfappend y (Cons n x)).
Lemma candidate_1177: forall (n : natural) (y : lst) (x : lst) (lf2 : lst), @eq lst (rotate (len (rotate n x)) lf2) (lfappend y (Cons n x)).
Lemma candidate_1178: forall (n : natural) (y : lst) (x : lst) (lf2 : lst), @eq lst (rotate (len (lfappend x Nil)) lf2) (lfappend y (Cons n x)).
Lemma candidate_1179: forall (n : natural) (y : lst) (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (lfappend y (Cons n x)).
Lemma candidate_1180: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1181: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rotate n Nil) (lfappend y (Cons n x)))   (lfappend y (Cons n x)).
Lemma candidate_1182: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n (lfappend x Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1183: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1184: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (lfappend x Nil))) (lfappend y (Cons n x)).
Lemma candidate_1185: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1186: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))).
Lemma candidate_1187: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (rotate n Nil) (lfappend y (Cons n x))).
Lemma candidate_1188: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (lfappend y Nil) (Cons n (lfappend x Nil))).
Lemma candidate_1189: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_1190: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1191: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1192: forall (x : lst), @eq natural (len x) (len (rotate (len x) (lfappend x Nil))).
Lemma candidate_1193: forall (x : lst), @eq natural (len x)   (len match lfappend x Nil with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1194: forall (x : lst), @eq natural (len x) (len (rotate (len x) x)).
Lemma candidate_1195: forall (x : lst), @eq natural (len x)   (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1196: forall (x : lst), @eq natural (len x) (len (lfappend x Nil)).
Lemma candidate_1197: forall (x : lst), @eq natural (len x) (len x).
Lemma candidate_1198: forall (n : natural) (x : lst), @eq lst (Cons n x) (rotate (len x) (lfappend x (Cons n Nil))).
Lemma candidate_1199: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) (lfappend x Nil))).
Lemma candidate_1200: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_1201: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) x)).
Lemma candidate_1202: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_1203: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_1204: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2)   (rotate (len lf2) (rotate (len x) (lfappend lf2 Nil))).
Lemma candidate_1205: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2)   (rotate (len x) (rotate (len lf2) (lfappend lf2 Nil))).
Lemma candidate_1206: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len lf2) (rotate (len x) lf2)).
Lemma candidate_1207: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len x) (rotate (len lf2) lf2)).
Lemma candidate_1208: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len x) (lfappend lf2 Nil)).
Lemma candidate_1209: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len x) lf2).
Lemma candidate_1210: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (rotate (len lf6) lf6)) (lfappend y lf6).
Lemma candidate_1211: forall (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend y Nil) lf6) (lfappend y lf6).
Lemma candidate_1212: forall (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend y lf6) Nil) (lfappend y lf6).
Lemma candidate_1213: forall (y : lst) (lf6 : lst), @eq lst (rotate (len lf6) (lfappend lf6 y)) (lfappend y lf6).
Lemma candidate_1214: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (lfappend lf6 Nil)) (lfappend y lf6).
Lemma candidate_1215: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y lf6).
Lemma candidate_1216: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (match lfappend y (lfappend lf6 Nil) with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1217: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (match rotate (len y) (lfappend y lf6) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1218: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (rotate (len y) match lfappend y lf6 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1219: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (match lfappend lf6 (lfappend y Nil) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1220: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (match lfappend y lf6 with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1221: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (match lfappend lf6 y with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1222: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (match rotate (len x) (lfappend lf5 lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1223: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (rotate (len x) (rotate (len lf5) (lfappend lf5 lf4))).
Lemma candidate_1224: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (rotate (len x) match lfappend lf5 lf4 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1225: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (rotate (len x) (lfappend lf4 (lfappend lf5 Nil))).
Lemma candidate_1226: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (match lfappend lf5 lf4 with | Cons y x0 => rotate (len x) (lfappend x0 (Cons y Nil)) | Nil => Nil end).
Lemma candidate_1227: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (rotate (len x) (lfappend lf4 lf5)).
Lemma candidate_1228: forall (x : lst), @eq natural (len x) (len (rotate (len x) (lfappend x Nil))).
Lemma candidate_1229: forall (x : lst), @eq natural (len x)   (len match lfappend x Nil with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1230: forall (x : lst), @eq natural (len x) (len (rotate (len x) x)).
Lemma candidate_1231: forall (x : lst), @eq natural (len x)   (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1232: forall (x : lst), @eq natural (len x) (len (lfappend x Nil)).
Lemma candidate_1233: forall (x : lst), @eq natural (len x) (len x).
Lemma candidate_1234: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (match rotate (len x) (lfappend lf5 lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1235: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (rotate (len x) (rotate (len lf5) (lfappend lf5 lf4))).
Lemma candidate_1236: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (rotate (len x) match lfappend lf5 lf4 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1237: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (rotate (len x) (lfappend lf4 (lfappend lf5 Nil))).
Lemma candidate_1238: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (match lfappend lf5 lf4 with | Cons y x0 => rotate (len x) (lfappend x0 (Cons y Nil)) | Nil => Nil end).
Lemma candidate_1239: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (rotate (len x) (lfappend lf4 lf5)).
Lemma candidate_1240: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (lfappend (lfappend lf4 Nil) lf5).
Lemma candidate_1241: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (lfappend (lfappend lf4 lf5) Nil).
Lemma candidate_1242: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (rotate (len lf5) (lfappend lf5 lf4)).
Lemma candidate_1243: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5)   (match lfappend lf5 lf4 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1244: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (lfappend lf4 (lfappend lf5 Nil)).
Lemma candidate_1245: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (lfappend lf4 lf5).
Lemma candidate_1246: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (rotate (len lf6) lf6)).
Lemma candidate_1247: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y Nil) lf6).
Lemma candidate_1248: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y lf6) Nil).
Lemma candidate_1249: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (rotate (len lf6) (lfappend lf6 y)).
Lemma candidate_1250: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (lfappend lf6 Nil)).
Lemma candidate_1251: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y lf6).
Lemma candidate_1252: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (match rotate (len x) (lfappend lf5 lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1253: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (rotate (len x) (rotate (len lf5) (lfappend lf5 lf4))).
Lemma candidate_1254: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (rotate (len x) match lfappend lf5 lf4 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1255: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (rotate (len x) (lfappend lf4 (lfappend lf5 Nil))).
Lemma candidate_1256: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (match lfappend lf5 lf4 with | Cons y x0 => rotate (len x) (lfappend x0 (Cons y Nil)) | Nil => Nil end).
Lemma candidate_1257: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (rotate (len x) (lfappend lf4 lf5)).
Lemma candidate_1258: forall (n : natural) (y : lst) (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len (rotate (len lf5) x)) (lfappend lf4 lf5))   (lfappend y (Cons n x)).
Lemma candidate_1259: forall (n : natural) (y : lst) (lf4 : lst) (x : lst) (lf5 : lst), @eq lst   (rotate      (len match x with | Cons y x => rotate n (lfappend x (Cons y Nil)) | Nil => Nil end)      (lfappend lf4 lf5)) (lfappend y (Cons n x)).
Lemma candidate_1260: forall (n : natural) (y : lst) (lf4 : lst) (x : lst) (lf5 : lst), @eq lst   (rotate      (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end)      (lfappend lf4 lf5)) (lfappend y (Cons n x)).
Lemma candidate_1261: forall (n : natural) (y : lst) (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len (rotate n x)) (lfappend lf4 lf5))   (lfappend y (Cons n x)).
Lemma candidate_1262: forall (n : natural) (y : lst) (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len (lfappend x Nil)) (lfappend lf4 lf5))   (lfappend y (Cons n x)).
Lemma candidate_1263: forall (n : natural) (y : lst) (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5)) (lfappend y (Cons n x)).
Lemma candidate_1264: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1265: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rotate n Nil) (lfappend y (Cons n x)))   (lfappend y (Cons n x)).
Lemma candidate_1266: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n (lfappend x Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1267: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1268: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (lfappend x Nil))) (lfappend y (Cons n x)).
Lemma candidate_1269: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1270: forall (n : natural) (y : lst) (x : lst), @eq lst   (rotate (len x)      (match lfappend y (Cons n x) with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y (Cons n x)).
Lemma candidate_1271: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n (rotate n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1272: forall (n : natural) (y : lst) (x : lst), @eq lst   (rotate (len x) (lfappend (lfappend x Nil) (lfappend y (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1273: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (rotate n (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1274: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1275: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend x (lfappend y (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1276: forall (y : lst) (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (lfappend y (lfappend lf5 (rotate (len x) x))).
Lemma candidate_1277: forall (y : lst) (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (lfappend y (lfappend (lfappend lf5 Nil) x)).
Lemma candidate_1278: forall (y : lst) (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (lfappend y (lfappend (lfappend lf5 x) Nil)).
Lemma candidate_1279: forall (y : lst) (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (lfappend y (rotate (len x) (lfappend x lf5))).
Lemma candidate_1280: forall (y : lst) (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (lfappend y (lfappend lf5 (lfappend x Nil))).
Lemma candidate_1281: forall (y : lst) (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5)) (lfappend y (lfappend lf5 x)).
Lemma candidate_1282: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))).
Lemma candidate_1283: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (rotate n Nil) (lfappend y (Cons n x))).
Lemma candidate_1284: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (lfappend y Nil) (Cons n (lfappend x Nil))).
Lemma candidate_1285: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_1286: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1287: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1288: forall (x : lst), @eq natural (len x) (len (rotate (len x) (lfappend x Nil))).
Lemma candidate_1289: forall (x : lst), @eq natural (len x)   (len match lfappend x Nil with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1290: forall (x : lst), @eq natural (len x) (len (rotate (len x) x)).
Lemma candidate_1291: forall (x : lst), @eq natural (len x)   (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1292: forall (x : lst), @eq natural (len x) (len (lfappend x Nil)).
Lemma candidate_1293: forall (x : lst), @eq natural (len x) (len x).
Lemma candidate_1294: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (match rotate (len x) (lfappend lf5 lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1295: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (rotate (len x) (rotate (len lf5) (lfappend lf5 lf4))).
Lemma candidate_1296: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (rotate (len x) match lfappend lf5 lf4 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1297: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (rotate (len x) (lfappend lf4 (lfappend lf5 Nil))).
Lemma candidate_1298: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (match lfappend lf5 lf4 with | Cons y x0 => rotate (len x) (lfappend x0 (Cons y Nil)) | Nil => Nil end).
Lemma candidate_1299: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (rotate (len x) (lfappend lf4 lf5)).
Lemma candidate_1300: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (lfappend (lfappend lf4 Nil) lf5).
Lemma candidate_1301: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (lfappend (lfappend lf4 lf5) Nil).
Lemma candidate_1302: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (rotate (len lf5) (lfappend lf5 lf4)).
Lemma candidate_1303: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5)   (match lfappend lf5 lf4 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1304: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (lfappend lf4 (lfappend lf5 Nil)).
Lemma candidate_1305: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (lfappend lf4 lf5).
Lemma candidate_1306: forall (n : natural) (x : lst), @eq lst (Cons n x) (rotate (len x) (lfappend x (Cons n Nil))).
Lemma candidate_1307: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) (lfappend x Nil))).
Lemma candidate_1308: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_1309: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) x)).
Lemma candidate_1310: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_1311: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_1312: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (match lfappend y (lfappend lf6 Nil) with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1313: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (match rotate (len y) (lfappend y lf6) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1314: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (rotate (len y) match lfappend y lf6 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1315: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (match lfappend lf6 (lfappend y Nil) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1316: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (match lfappend y lf6 with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1317: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (match lfappend lf6 y with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1318: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (match lfappend lf8 (Cons n lf4) with | Cons y x0 => rotate (len x) (lfappend x0 (Cons y Nil)) | Nil => Nil end).
Lemma candidate_1319: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (rotate (len x) (lfappend (lfappend lf4 lf8) (Cons n Nil))).
Lemma candidate_1320: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (rotate (len x) (lfappend (lfappend lf4 Nil) (Cons n Nil))).
Lemma candidate_1321: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (match rotate (len x) (Cons n lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1322: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (rotate (len x) (lfappend lf4 (Cons n lf8))).
Lemma candidate_1323: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (rotate (len x) (lfappend lf4 (Cons n Nil))).
Lemma candidate_1324: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (rotate (len lf6) lf6)) (lfappend y lf6).
Lemma candidate_1325: forall (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend y Nil) lf6) (lfappend y lf6).
Lemma candidate_1326: forall (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend y lf6) Nil) (lfappend y lf6).
Lemma candidate_1327: forall (y : lst) (lf6 : lst), @eq lst (rotate (len lf6) (lfappend lf6 y)) (lfappend y lf6).
Lemma candidate_1328: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (lfappend lf6 Nil)) (lfappend y lf6).
Lemma candidate_1329: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y lf6).
Lemma candidate_1330: forall (x : lst), @eq natural (len x) (len (rotate (len x) (lfappend x Nil))).
Lemma candidate_1331: forall (x : lst), @eq natural (len x)   (len match lfappend x Nil with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1332: forall (x : lst), @eq natural (len x) (len (rotate (len x) x)).
Lemma candidate_1333: forall (x : lst), @eq natural (len x)   (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1334: forall (x : lst), @eq natural (len x) (len (lfappend x Nil)).
Lemma candidate_1335: forall (x : lst), @eq natural (len x) (len x).
Lemma candidate_1336: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8)) (lfappend lf4 (Cons n (rotate n Nil))).
Lemma candidate_1337: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8))   (lfappend lf8 (lfappend lf4 (Cons n Nil))).
Lemma candidate_1338: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8))   (lfappend lf4 (lfappend lf8 (Cons n Nil))).
Lemma candidate_1339: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8)) (lfappend lf4 (rotate n (Cons n Nil))).
Lemma candidate_1340: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8)) (lfappend lf4 (Cons n lf8)).
Lemma candidate_1341: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8)) (lfappend lf4 (Cons n Nil)).
Lemma candidate_1342: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (rotate (len lf6) lf6)).
Lemma candidate_1343: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y Nil) lf6).
Lemma candidate_1344: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y lf6) Nil).
Lemma candidate_1345: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (rotate (len lf6) (lfappend lf6 y)).
Lemma candidate_1346: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (lfappend lf6 Nil)).
Lemma candidate_1347: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y lf6).
Lemma candidate_1348: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n (lfappend lf8 Nil)).
Lemma candidate_1349: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n (rotate n Nil)).
Lemma candidate_1350: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (lfappend lf8 (Cons n Nil)).
Lemma candidate_1351: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (rotate n (Cons n Nil)).
Lemma candidate_1352: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n lf8).
Lemma candidate_1353: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n Nil).
Lemma candidate_1354: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (match lfappend lf8 (Cons n lf4) with | Cons y x0 => rotate (len x) (lfappend x0 (Cons y Nil)) | Nil => Nil end).
Lemma candidate_1355: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (rotate (len x) (lfappend (lfappend lf4 lf8) (Cons n Nil))).
Lemma candidate_1356: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (rotate (len x) (lfappend (lfappend lf4 Nil) (Cons n Nil))).
Lemma candidate_1357: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (match rotate (len x) (Cons n lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1358: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (rotate (len x) (lfappend lf4 (Cons n lf8))).
Lemma candidate_1359: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (rotate (len x) (lfappend lf4 (Cons n Nil))).
Lemma candidate_1360: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (match lfappend lf8 (Cons n lf4) with | Cons y x0 => rotate (len x) (lfappend x0 (Cons y Nil)) | Nil => Nil end).
Lemma candidate_1361: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (rotate (len x) (lfappend (lfappend lf4 lf8) (Cons n Nil))).
Lemma candidate_1362: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (rotate (len x) (lfappend (lfappend lf4 Nil) (Cons n Nil))).
Lemma candidate_1363: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (match rotate (len x) (Cons n lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1364: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (rotate (len x) (lfappend lf4 (Cons n lf8))).
Lemma candidate_1365: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (rotate (len x) (lfappend lf4 (Cons n Nil))).
Lemma candidate_1366: forall (n : natural) (y : lst) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst   (rotate      (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end)      (lfappend lf4 (Cons n lf8))) (lfappend y (Cons n x)).
Lemma candidate_1367: forall (n : natural) (y : lst) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len (lfappend lf8 x)) (lfappend lf4 (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_1368: forall (n : natural) (y : lst) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len (rotate n x)) (lfappend lf4 (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_1369: forall (n : natural) (y : lst) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len (lfappend x lf8)) (lfappend lf4 (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_1370: forall (n : natural) (y : lst) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len (lfappend x Nil)) (lfappend lf4 (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_1371: forall (n : natural) (y : lst) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8))) (lfappend y (Cons n x)).
Lemma candidate_1372: forall (n : natural) (y : lst) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (lfappend y (rotate (len lf8) (Cons n x))).
Lemma candidate_1373: forall (n : natural) (y : lst) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (lfappend y (Cons n (lfappend lf8 x))).
Lemma candidate_1374: forall (n : natural) (y : lst) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (lfappend y (lfappend lf8 (Cons n x))).
Lemma candidate_1375: forall (n : natural) (y : lst) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (lfappend y (Cons n (lfappend x lf8))).
Lemma candidate_1376: forall (n : natural) (y : lst) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1377: forall (n : natural) (y : lst) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8))) (lfappend y (Cons n x)).
Lemma candidate_1378: forall (n : natural) (y : lst) (x : lst), @eq lst   (rotate (len x)      (match lfappend y (Cons n x) with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y (Cons n x)).
Lemma candidate_1379: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n (rotate n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1380: forall (n : natural) (y : lst) (x : lst), @eq lst   (rotate (len x) (lfappend (lfappend x Nil) (lfappend y (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1381: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (rotate n (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1382: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1383: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend x (lfappend y (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1384: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (rotate (len y) (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1385: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (rotate (len lf4) (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1386: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (rotate (len x) (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1387: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n (rotate n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1388: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (rotate n (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1389: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil))) (lfappend y (Cons n x)).
Lemma candidate_1390: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1391: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rotate n Nil) (lfappend y (Cons n x)))   (lfappend y (Cons n x)).
Lemma candidate_1392: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n (lfappend x Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1393: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1394: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (lfappend x Nil))) (lfappend y (Cons n x)).
Lemma candidate_1395: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1396: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))).
Lemma candidate_1397: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (rotate n Nil) (lfappend y (Cons n x))).
Lemma candidate_1398: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (lfappend y Nil) (Cons n (lfappend x Nil))).
Lemma candidate_1399: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_1400: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1401: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1402: forall (x : lst), @eq natural (len x) (len (rotate (len x) (lfappend x Nil))).
Lemma candidate_1403: forall (x : lst), @eq natural (len x)   (len match lfappend x Nil with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1404: forall (x : lst), @eq natural (len x) (len (rotate (len x) x)).
Lemma candidate_1405: forall (x : lst), @eq natural (len x)   (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1406: forall (x : lst), @eq natural (len x) (len (lfappend x Nil)).
Lemma candidate_1407: forall (x : lst), @eq natural (len x) (len x).
Lemma candidate_1408: forall (n : natural) (x : lst), @eq lst (Cons n x) (rotate (len x) (lfappend x (Cons n Nil))).
Lemma candidate_1409: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) (lfappend x Nil))).
Lemma candidate_1410: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_1411: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) x)).
Lemma candidate_1412: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_1413: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_1414: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8)) (lfappend lf4 (Cons n (rotate n Nil))).
Lemma candidate_1415: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8))   (lfappend lf8 (lfappend lf4 (Cons n Nil))).
Lemma candidate_1416: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8))   (lfappend lf4 (lfappend lf8 (Cons n Nil))).
Lemma candidate_1417: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8)) (lfappend lf4 (rotate n (Cons n Nil))).
Lemma candidate_1418: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8)) (lfappend lf4 (Cons n lf8)).
Lemma candidate_1419: forall (n : natural) (lf4 : lst) (lf8 : lst), @eq lst (lfappend lf4 (Cons n lf8)) (lfappend lf4 (Cons n Nil)).
Lemma candidate_1420: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n (lfappend lf8 Nil)).
Lemma candidate_1421: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n (rotate n Nil)).
Lemma candidate_1422: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (lfappend lf8 (Cons n Nil)).
Lemma candidate_1423: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (rotate n (Cons n Nil)).
Lemma candidate_1424: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n lf8).
Lemma candidate_1425: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n Nil).
Lemma candidate_1426: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (match lfappend lf8 (Cons n lf4) with | Cons y x0 => rotate (len x) (lfappend x0 (Cons y Nil)) | Nil => Nil end).
Lemma candidate_1427: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (rotate (len x) (lfappend (lfappend lf4 lf8) (Cons n Nil))).
Lemma candidate_1428: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (rotate (len x) (lfappend (lfappend lf4 Nil) (Cons n Nil))).
Lemma candidate_1429: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (match rotate (len x) (Cons n lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1430: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (rotate (len x) (lfappend lf4 (Cons n lf8))).
Lemma candidate_1431: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n lf8)))   (rotate (len x) (lfappend lf4 (Cons n Nil))).
Lemma candidate_1432: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend lf4 (rotate (len x) (Cons n Nil)))).
Lemma candidate_1433: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend lf4 (Cons n (rotate n Nil)))).
Lemma candidate_1434: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend lf4 (rotate n (Cons n Nil)))).
Lemma candidate_1435: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend (lfappend lf4 Nil) (Cons n Nil))).
Lemma candidate_1436: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (match rotate (len x) (Cons n lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1437: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend lf4 (Cons n Nil))).
Lemma candidate_1438: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (rotate (len lf6) lf6)) (lfappend y lf6).
Lemma candidate_1439: forall (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend y Nil) lf6) (lfappend y lf6).
Lemma candidate_1440: forall (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend y lf6) Nil) (lfappend y lf6).
Lemma candidate_1441: forall (y : lst) (lf6 : lst), @eq lst (rotate (len lf6) (lfappend lf6 y)) (lfappend y lf6).
Lemma candidate_1442: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (lfappend lf6 Nil)) (lfappend y lf6).
Lemma candidate_1443: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y lf6).
Lemma candidate_1444: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (match lfappend y (lfappend lf6 Nil) with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1445: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (match rotate (len y) (lfappend y lf6) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1446: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (rotate (len y) match lfappend y lf6 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1447: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (match lfappend lf6 (lfappend y Nil) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1448: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (match lfappend y lf6 with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1449: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (match lfappend lf6 y with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1450: forall (n : natural) (y : lst) (lf4 : lst) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n (rotate (len y) Nil))))   (lfappend y lf6).
Lemma candidate_1451: forall (n : natural) (y : lst) (lf4 : lst) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n (rotate (len lf4) Nil))))   (lfappend y lf6).
Lemma candidate_1452: forall (n : natural) (y : lst) (lf4 : lst) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n (rotate (len x) Nil))))   (lfappend y lf6).
Lemma candidate_1453: forall (n : natural) (y : lst) (lf4 : lst) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n (rotate (len lf6) Nil))))   (lfappend y lf6).
Lemma candidate_1454: forall (n : natural) (y : lst) (lf4 : lst) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n (rotate n Nil))))   (lfappend y lf6).
Lemma candidate_1455: forall (n : natural) (y : lst) (lf4 : lst) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n (Nil)))) (lfappend y lf6).
Lemma candidate_1456: forall (x : lst), @eq natural (len x) (len (rotate (len x) (lfappend x Nil))).
Lemma candidate_1457: forall (x : lst), @eq natural (len x)   (len match lfappend x Nil with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1458: forall (x : lst), @eq natural (len x) (len (rotate (len x) x)).
Lemma candidate_1459: forall (x : lst), @eq natural (len x)   (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1460: forall (x : lst), @eq natural (len x) (len (lfappend x Nil)).
Lemma candidate_1461: forall (x : lst), @eq natural (len x) (len x).
Lemma candidate_1462: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n (rotate n Nil))).
Lemma candidate_1463: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n (rotate n Nil))).
Lemma candidate_1464: forall (n : natural), @eq lst (Cons n Nil) (rotate n (rotate n (Cons n Nil))).
Lemma candidate_1465: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n Nil)).
Lemma candidate_1466: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n Nil)).
Lemma candidate_1467: forall (n : natural), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_1468: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (rotate (len lf6) lf6)).
Lemma candidate_1469: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y Nil) lf6).
Lemma candidate_1470: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y lf6) Nil).
Lemma candidate_1471: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (rotate (len lf6) (lfappend lf6 y)).
Lemma candidate_1472: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (lfappend lf6 Nil)).
Lemma candidate_1473: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y lf6).
Lemma candidate_1474: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend lf4 (rotate (len x) (Cons n Nil)))).
Lemma candidate_1475: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend lf4 (Cons n (rotate n Nil)))).
Lemma candidate_1476: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend lf4 (rotate n (Cons n Nil)))).
Lemma candidate_1477: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend (lfappend lf4 Nil) (Cons n Nil))).
Lemma candidate_1478: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (match rotate (len x) (Cons n lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1479: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend lf4 (Cons n Nil))).
Lemma candidate_1480: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil))   (lfappend (lfappend lf4 Nil) (rotate n (Cons n Nil))).
Lemma candidate_1481: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil))   (lfappend (lfappend lf4 Nil) (Cons n Nil)).
Lemma candidate_1482: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil))   (lfappend lf4 (rotate (len lf4) (Cons n Nil))).
Lemma candidate_1483: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (lfappend lf4 (Cons n (rotate n Nil))).
Lemma candidate_1484: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (lfappend lf4 (rotate n (Cons n Nil))).
Lemma candidate_1485: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (lfappend lf4 (Cons n Nil)).
Lemma candidate_1486: @eq lst Nil (Nil).
Lemma candidate_1487: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend lf4 (rotate (len x) (Cons n Nil)))).
Lemma candidate_1488: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend lf4 (Cons n (rotate n Nil)))).
Lemma candidate_1489: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend lf4 (rotate n (Cons n Nil)))).
Lemma candidate_1490: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend (lfappend lf4 Nil) (Cons n Nil))).
Lemma candidate_1491: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (match rotate (len x) (Cons n lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1492: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend lf4 (Cons n Nil))).
Lemma candidate_1493: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len (rotate (len x) x)) (lfappend lf4 (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1494: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst   (rotate      (len match x with | Cons y x => rotate n (lfappend x (Cons y Nil)) | Nil => Nil end)      (lfappend lf4 (Cons n Nil))) (lfappend y (Cons n x)).
Lemma candidate_1495: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst   (rotate      (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end)      (lfappend lf4 (Cons n Nil))) (lfappend y (Cons n x)).
Lemma candidate_1496: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len (rotate n x)) (lfappend lf4 (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1497: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len (lfappend x Nil)) (lfappend lf4 (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1498: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil))) (lfappend y (Cons n x)).
Lemma candidate_1499: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (lfappend y (rotate (len x) (lfappend x (Cons n Nil)))).
Lemma candidate_1500: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (lfappend y (Cons n (rotate (len x) (lfappend x Nil)))).
Lemma candidate_1501: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (lfappend y (Cons n (lfappend x (rotate n Nil)))).
Lemma candidate_1502: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (lfappend y (Cons n (rotate (len x) x))).
Lemma candidate_1503: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1504: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil))) (lfappend y (Cons n x)).
Lemma candidate_1505: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (rotate (len y) (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1506: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (rotate (len lf4) (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1507: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (rotate (len x) (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1508: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n (rotate n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1509: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (rotate n (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1510: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil))) (lfappend y (Cons n x)).
Lemma candidate_1511: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1512: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rotate n Nil) (lfappend y (Cons n x)))   (lfappend y (Cons n x)).
Lemma candidate_1513: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n (lfappend x Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1514: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1515: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (lfappend x Nil))) (lfappend y (Cons n x)).
Lemma candidate_1516: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1517: forall (n : natural) (y : lst) (x : lst), @eq lst   (rotate (len x)      (match lfappend y (Cons n x) with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y (Cons n x)).
Lemma candidate_1518: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n (rotate n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1519: forall (n : natural) (y : lst) (x : lst), @eq lst   (rotate (len x) (lfappend (lfappend x Nil) (lfappend y (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1520: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (rotate n (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1521: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1522: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend x (lfappend y (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1523: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n (rotate n (rotate n Nil)))))   (lfappend y (Cons n x)).
Lemma candidate_1524: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n (rotate (len y) Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1525: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n (rotate (len lf4) Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1526: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n (rotate (len x) Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1527: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n (rotate n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1528: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n (Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1529: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))).
Lemma candidate_1530: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (rotate n Nil) (lfappend y (Cons n x))).
Lemma candidate_1531: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (lfappend y Nil) (Cons n (lfappend x Nil))).
Lemma candidate_1532: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_1533: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1534: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1535: forall (x : lst), @eq natural (len x) (len (rotate (len x) (lfappend x Nil))).
Lemma candidate_1536: forall (x : lst), @eq natural (len x)   (len match lfappend x Nil with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1537: forall (x : lst), @eq natural (len x) (len (rotate (len x) x)).
Lemma candidate_1538: forall (x : lst), @eq natural (len x)   (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1539: forall (x : lst), @eq natural (len x) (len (lfappend x Nil)).
Lemma candidate_1540: forall (x : lst), @eq natural (len x) (len x).
Lemma candidate_1541: forall (n : natural) (x : lst), @eq lst (Cons n x) (rotate (len x) (lfappend x (Cons n Nil))).
Lemma candidate_1542: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) (lfappend x Nil))).
Lemma candidate_1543: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_1544: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) x)).
Lemma candidate_1545: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_1546: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_1547: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n (rotate n Nil))).
Lemma candidate_1548: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n (rotate n Nil))).
Lemma candidate_1549: forall (n : natural), @eq lst (Cons n Nil) (rotate n (rotate n (Cons n Nil))).
Lemma candidate_1550: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n Nil)).
Lemma candidate_1551: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n Nil)).
Lemma candidate_1552: forall (n : natural), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_1553: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend lf4 (rotate (len x) (Cons n Nil)))).
Lemma candidate_1554: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend lf4 (Cons n (rotate n Nil)))).
Lemma candidate_1555: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend lf4 (rotate n (Cons n Nil)))).
Lemma candidate_1556: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend (lfappend lf4 Nil) (Cons n Nil))).
Lemma candidate_1557: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (match rotate (len x) (Cons n lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1558: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend lf4 (Cons n Nil))).
Lemma candidate_1559: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil))   (lfappend (lfappend lf4 Nil) (rotate n (Cons n Nil))).
Lemma candidate_1560: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil))   (lfappend (lfappend lf4 Nil) (Cons n Nil)).
Lemma candidate_1561: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil))   (lfappend lf4 (rotate (len lf4) (Cons n Nil))).
Lemma candidate_1562: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (lfappend lf4 (Cons n (rotate n Nil))).
Lemma candidate_1563: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (lfappend lf4 (rotate n (Cons n Nil))).
Lemma candidate_1564: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (lfappend lf4 (Cons n Nil)).
Lemma candidate_1565: @eq lst Nil (Nil).
Lemma candidate_1566: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (rotate (len lf6) lf6)) (lfappend y lf6).
Lemma candidate_1567: forall (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend y Nil) lf6) (lfappend y lf6).
Lemma candidate_1568: forall (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend y lf6) Nil) (lfappend y lf6).
Lemma candidate_1569: forall (y : lst) (lf6 : lst), @eq lst (rotate (len lf6) (lfappend lf6 y)) (lfappend y lf6).
Lemma candidate_1570: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (lfappend lf6 Nil)) (lfappend y lf6).
Lemma candidate_1571: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y lf6).
Lemma candidate_1572: forall (y : lst) (x : lst) (lf5 : lst) (lf6 : lst), @eq lst (rotate (len (rotate (len x) x)) (lfappend (lfappend x y) lf5))   (lfappend y lf6).
Lemma candidate_1573: forall (y : lst) (x : lst) (lf5 : lst) (lf6 : lst), @eq lst (rotate (len (rotate (len lf5) x)) (lfappend (lfappend x y) lf5))   (lfappend y lf6).
Lemma candidate_1574: forall (y : lst) (x : lst) (lf5 : lst) (lf6 : lst), @eq lst (rotate (len (rotate (len lf6) x)) (lfappend (lfappend x y) lf5))   (lfappend y lf6).
Lemma candidate_1575: forall (y : lst) (x : lst) (lf5 : lst) (lf6 : lst), @eq lst   (rotate      (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end)      (lfappend (lfappend x y) lf5)) (lfappend y lf6).
Lemma candidate_1576: forall (y : lst) (x : lst) (lf5 : lst) (lf6 : lst), @eq lst (rotate (len (lfappend x Nil)) (lfappend (lfappend x y) lf5))   (lfappend y lf6).
Lemma candidate_1577: forall (y : lst) (x : lst) (lf5 : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5)) (lfappend y lf6).
Lemma candidate_1578: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend (lfappend y Nil) (lfappend lf5 x)).
Lemma candidate_1579: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend (lfappend y lf5) (lfappend x Nil)).
Lemma candidate_1580: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (rotate (len x) (lfappend x lf5))).
Lemma candidate_1581: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 (lfappend x Nil))).
Lemma candidate_1582: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend (lfappend y lf5) x).
Lemma candidate_1583: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 x)).
Lemma candidate_1584: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (match lfappend y (lfappend lf6 Nil) with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1585: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (match rotate (len y) (lfappend y lf6) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1586: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (rotate (len y) match lfappend y lf6 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1587: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (match lfappend lf6 (lfappend y Nil) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1588: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (match lfappend y lf6 with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1589: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (match lfappend lf6 y with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1590: forall (y : lst) (x : lst) (lf5 : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend (lfappend x (rotate (len y) y)) lf5))   (lfappend y lf6).
Lemma candidate_1591: forall (y : lst) (x : lst) (lf5 : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend (lfappend (lfappend x Nil) y) lf5))   (lfappend y lf6).
Lemma candidate_1592: forall (y : lst) (x : lst) (lf5 : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend (lfappend (lfappend x y) Nil) lf5))   (lfappend y lf6).
Lemma candidate_1593: forall (y : lst) (x : lst) (lf5 : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend (rotate (len y) (lfappend y x)) lf5))   (lfappend y lf6).
Lemma candidate_1594: forall (y : lst) (x : lst) (lf5 : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend (lfappend x (lfappend y Nil)) lf5))   (lfappend y lf6).
Lemma candidate_1595: forall (y : lst) (x : lst) (lf5 : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5)) (lfappend y lf6).
Lemma candidate_1596: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend (lfappend y Nil) (lfappend lf5 x)).
Lemma candidate_1597: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend (lfappend y lf5) (lfappend x Nil)).
Lemma candidate_1598: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (rotate (len x) (lfappend x lf5))).
Lemma candidate_1599: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 (lfappend x Nil))).
Lemma candidate_1600: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend (lfappend y lf5) x).
Lemma candidate_1601: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 x)).
Lemma candidate_1602: forall (x : lst), @eq natural (len x) (len (rotate (len x) (lfappend x Nil))).
Lemma candidate_1603: forall (x : lst), @eq natural (len x)   (len match lfappend x Nil with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1604: forall (x : lst), @eq natural (len x) (len (rotate (len x) x)).
Lemma candidate_1605: forall (x : lst), @eq natural (len x)   (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1606: forall (x : lst), @eq natural (len x) (len (lfappend x Nil)).
Lemma candidate_1607: forall (x : lst), @eq natural (len x) (len x).
Lemma candidate_1608: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (rotate (len lf6) lf6)).
Lemma candidate_1609: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y Nil) lf6).
Lemma candidate_1610: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y lf6) Nil).
Lemma candidate_1611: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (rotate (len lf6) (lfappend lf6 y)).
Lemma candidate_1612: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (lfappend lf6 Nil)).
Lemma candidate_1613: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y lf6).
Lemma candidate_1614: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5)   (lfappend (lfappend x y) (lfappend lf5 Nil)).
Lemma candidate_1615: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5)   (lfappend x (rotate (len lf5) (lfappend lf5 y))).
Lemma candidate_1616: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5)   (lfappend x match lfappend lf5 y with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1617: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5)   (lfappend x (lfappend y (lfappend lf5 Nil))).
Lemma candidate_1618: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5) (lfappend (lfappend x y) lf5).
Lemma candidate_1619: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5) (lfappend x (lfappend y lf5)).
Lemma candidate_1620: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (rotate (len y) y)).
Lemma candidate_1621: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) y).
Lemma candidate_1622: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x y) Nil).
Lemma candidate_1623: forall (y : lst) (x : lst), @eq lst (lfappend x y) (rotate (len y) (lfappend y x)).
Lemma candidate_1624: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend y Nil)).
Lemma candidate_1625: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x y).
Lemma candidate_1626: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend (lfappend y Nil) (lfappend lf5 x)).
Lemma candidate_1627: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend (lfappend y lf5) (lfappend x Nil)).
Lemma candidate_1628: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (rotate (len x) (lfappend x lf5))).
Lemma candidate_1629: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 (lfappend x Nil))).
Lemma candidate_1630: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend (lfappend y lf5) x).
Lemma candidate_1631: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 x)).
Lemma candidate_1632: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1633: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rotate n Nil) (lfappend y (Cons n x)))   (lfappend y (Cons n x)).
Lemma candidate_1634: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n (lfappend x Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1635: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1636: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (lfappend x Nil))) (lfappend y (Cons n x)).
Lemma candidate_1637: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1638: forall (n : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len (rotate (len lf5) x)) (lfappend (lfappend x y) lf5))   (lfappend y (Cons n x)).
Lemma candidate_1639: forall (n : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst   (rotate      (len match x with | Cons y x => rotate n (lfappend x (Cons y Nil)) | Nil => Nil end)      (lfappend (lfappend x y) lf5)) (lfappend y (Cons n x)).
Lemma candidate_1640: forall (n : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst   (rotate      (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end)      (lfappend (lfappend x y) lf5)) (lfappend y (Cons n x)).
Lemma candidate_1641: forall (n : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len (rotate n x)) (lfappend (lfappend x y) lf5))   (lfappend y (Cons n x)).
Lemma candidate_1642: forall (n : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len (lfappend x Nil)) (lfappend (lfappend x y) lf5))   (lfappend y (Cons n x)).
Lemma candidate_1643: forall (n : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (Cons n x)).
Lemma candidate_1644: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 (rotate (len x) x))).
Lemma candidate_1645: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (lfappend (lfappend lf5 Nil) x)).
Lemma candidate_1646: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (lfappend (lfappend lf5 x) Nil)).
Lemma candidate_1647: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (rotate (len x) (lfappend x lf5))).
Lemma candidate_1648: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 (lfappend x Nil))).
Lemma candidate_1649: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 x)).
Lemma candidate_1650: forall (n : natural) (y : lst) (x : lst), @eq lst   (rotate (len x)      (match lfappend y (Cons n x) with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y (Cons n x)).
Lemma candidate_1651: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n (rotate n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1652: forall (n : natural) (y : lst) (x : lst), @eq lst   (rotate (len x) (lfappend (lfappend x Nil) (lfappend y (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1653: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (rotate n (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1654: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1655: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend x (lfappend y (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1656: forall (n : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x (rotate (len y) y)) lf5))   (lfappend y (Cons n x)).
Lemma candidate_1657: forall (n : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend (lfappend x Nil) y) lf5))   (lfappend y (Cons n x)).
Lemma candidate_1658: forall (n : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend (lfappend x y) Nil) lf5))   (lfappend y (Cons n x)).
Lemma candidate_1659: forall (n : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (rotate (len y) (lfappend y x)) lf5))   (lfappend y (Cons n x)).
Lemma candidate_1660: forall (n : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x (lfappend y Nil)) lf5))   (lfappend y (Cons n x)).
Lemma candidate_1661: forall (n : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (Cons n x)).
Lemma candidate_1662: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))).
Lemma candidate_1663: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (rotate n Nil) (lfappend y (Cons n x))).
Lemma candidate_1664: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (lfappend y Nil) (Cons n (lfappend x Nil))).
Lemma candidate_1665: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_1666: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1667: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1668: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend (lfappend y Nil) (lfappend lf5 x)).
Lemma candidate_1669: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend (lfappend y lf5) (lfappend x Nil)).
Lemma candidate_1670: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (rotate (len x) (lfappend x lf5))).
Lemma candidate_1671: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 (lfappend x Nil))).
Lemma candidate_1672: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend (lfappend y lf5) x).
Lemma candidate_1673: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 x)).
Lemma candidate_1674: forall (x : lst), @eq natural (len x) (len (rotate (len x) (lfappend x Nil))).
Lemma candidate_1675: forall (x : lst), @eq natural (len x)   (len match lfappend x Nil with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1676: forall (x : lst), @eq natural (len x) (len (rotate (len x) x)).
Lemma candidate_1677: forall (x : lst), @eq natural (len x)   (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1678: forall (x : lst), @eq natural (len x) (len (lfappend x Nil)).
Lemma candidate_1679: forall (x : lst), @eq natural (len x) (len x).
Lemma candidate_1680: forall (n : natural) (x : lst), @eq lst (Cons n x) (rotate (len x) (lfappend x (Cons n Nil))).
Lemma candidate_1681: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) (lfappend x Nil))).
Lemma candidate_1682: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_1683: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) x)).
Lemma candidate_1684: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_1685: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_1686: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5)   (lfappend (lfappend x y) (lfappend lf5 Nil)).
Lemma candidate_1687: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5)   (lfappend x (rotate (len lf5) (lfappend lf5 y))).
Lemma candidate_1688: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5)   (lfappend x match lfappend lf5 y with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1689: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5)   (lfappend x (lfappend y (lfappend lf5 Nil))).
Lemma candidate_1690: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5) (lfappend (lfappend x y) lf5).
Lemma candidate_1691: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5) (lfappend x (lfappend y lf5)).
Lemma candidate_1692: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (rotate (len y) y)).
Lemma candidate_1693: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) y).
Lemma candidate_1694: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x y) Nil).
Lemma candidate_1695: forall (y : lst) (x : lst), @eq lst (lfappend x y) (rotate (len y) (lfappend y x)).
Lemma candidate_1696: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend y Nil)).
Lemma candidate_1697: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x y).
Lemma candidate_1698: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (rotate (len lf6) lf6)) (lfappend y lf6).
Lemma candidate_1699: forall (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend y Nil) lf6) (lfappend y lf6).
Lemma candidate_1700: forall (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend y lf6) Nil) (lfappend y lf6).
Lemma candidate_1701: forall (y : lst) (lf6 : lst), @eq lst (rotate (len lf6) (lfappend lf6 y)) (lfappend y lf6).
Lemma candidate_1702: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (lfappend lf6 Nil)) (lfappend y lf6).
Lemma candidate_1703: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y lf6).
Lemma candidate_1704: forall (n : natural) (y : lst) (x : lst) (lf6 : lst) (lf8 : lst), @eq lst   (rotate      (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end)      (lfappend (lfappend x y) (Cons n lf8))) (lfappend y lf6).
Lemma candidate_1705: forall (n : natural) (y : lst) (x : lst) (lf6 : lst) (lf8 : lst), @eq lst   (rotate (len (lfappend lf8 x)) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y lf6).
Lemma candidate_1706: forall (n : natural) (y : lst) (x : lst) (lf6 : lst) (lf8 : lst), @eq lst (rotate (len (rotate n x)) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y lf6).
Lemma candidate_1707: forall (n : natural) (y : lst) (x : lst) (lf6 : lst) (lf8 : lst), @eq lst   (rotate (len (lfappend x lf8)) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y lf6).
Lemma candidate_1708: forall (n : natural) (y : lst) (x : lst) (lf6 : lst) (lf8 : lst), @eq lst   (rotate (len (lfappend x Nil)) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y lf6).
Lemma candidate_1709: forall (n : natural) (y : lst) (x : lst) (lf6 : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y lf6).
Lemma candidate_1710: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (match lfappend y (lfappend lf6 Nil) with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1711: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (match rotate (len y) (lfappend y lf6) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1712: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (rotate (len y) match lfappend y lf6 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1713: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (match lfappend lf6 (lfappend y Nil) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1714: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (match lfappend y lf6 with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1715: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (match lfappend lf6 y with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1716: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend lf8 x))).
Lemma candidate_1717: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend lf8 (lfappend y (Cons n x))).
Lemma candidate_1718: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (lfappend lf8 (Cons n x))).
Lemma candidate_1719: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend x lf8))).
Lemma candidate_1720: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1721: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_1722: forall (n : natural) (y : lst) (x : lst) (lf6 : lst) (lf8 : lst), @eq lst   (rotate (len x) (lfappend (rotate (len y) (lfappend y x)) (Cons n lf8)))   (lfappend y lf6).
Lemma candidate_1723: forall (n : natural) (y : lst) (x : lst) (lf6 : lst) (lf8 : lst), @eq lst   (rotate (len x) (lfappend (lfappend lf8 (lfappend x y)) (Cons n lf8)))   (lfappend y lf6).
Lemma candidate_1724: forall (n : natural) (y : lst) (x : lst) (lf6 : lst) (lf8 : lst), @eq lst   (rotate (len x) (lfappend (lfappend x (lfappend lf8 y)) (Cons n lf8)))   (lfappend y lf6).
Lemma candidate_1725: forall (n : natural) (y : lst) (x : lst) (lf6 : lst) (lf8 : lst), @eq lst   (rotate (len x) (lfappend (lfappend x (lfappend y lf8)) (Cons n lf8)))   (lfappend y lf6).
Lemma candidate_1726: forall (n : natural) (y : lst) (x : lst) (lf6 : lst) (lf8 : lst), @eq lst   (rotate (len x) (lfappend (lfappend x (lfappend y Nil)) (Cons n lf8)))   (lfappend y lf6).
Lemma candidate_1727: forall (n : natural) (y : lst) (x : lst) (lf6 : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y lf6).
Lemma candidate_1728: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend lf8 x))).
Lemma candidate_1729: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend lf8 (lfappend y (Cons n x))).
Lemma candidate_1730: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (lfappend lf8 (Cons n x))).
Lemma candidate_1731: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend x lf8))).
Lemma candidate_1732: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1733: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_1734: forall (x : lst), @eq natural (len x) (len (rotate (len x) (lfappend x Nil))).
Lemma candidate_1735: forall (x : lst), @eq natural (len x)   (len match lfappend x Nil with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1736: forall (x : lst), @eq natural (len x) (len (rotate (len x) x)).
Lemma candidate_1737: forall (x : lst), @eq natural (len x)   (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1738: forall (x : lst), @eq natural (len x) (len (lfappend x Nil)).
Lemma candidate_1739: forall (x : lst), @eq natural (len x) (len x).
Lemma candidate_1740: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend (lfappend x y) (lfappend lf8 (Cons n Nil))).
Lemma candidate_1741: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend (lfappend x y) (rotate n (Cons n Nil))).
Lemma candidate_1742: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend (lfappend x y) (Cons n lf8)).
Lemma candidate_1743: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend (lfappend x y) (Cons n Nil)).
Lemma candidate_1744: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend x (lfappend y (Cons n lf8))).
Lemma candidate_1745: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend x (lfappend y (Cons n Nil))).
Lemma candidate_1746: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (rotate (len lf6) lf6)).
Lemma candidate_1747: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y Nil) lf6).
Lemma candidate_1748: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y lf6) Nil).
Lemma candidate_1749: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (rotate (len lf6) (lfappend lf6 y)).
Lemma candidate_1750: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (lfappend lf6 Nil)).
Lemma candidate_1751: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y lf6).
Lemma candidate_1752: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n (lfappend lf8 Nil)).
Lemma candidate_1753: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n (rotate n Nil)).
Lemma candidate_1754: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (lfappend lf8 (Cons n Nil)).
Lemma candidate_1755: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (rotate n (Cons n Nil)).
Lemma candidate_1756: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n lf8).
Lemma candidate_1757: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n Nil).
Lemma candidate_1758: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (rotate (len y) y)).
Lemma candidate_1759: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) y).
Lemma candidate_1760: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x y) Nil).
Lemma candidate_1761: forall (y : lst) (x : lst), @eq lst (lfappend x y) (rotate (len y) (lfappend y x)).
Lemma candidate_1762: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend y Nil)).
Lemma candidate_1763: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x y).
Lemma candidate_1764: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1765: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rotate n Nil) (lfappend y (Cons n x)))   (lfappend y (Cons n x)).
Lemma candidate_1766: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n (lfappend x Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1767: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1768: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (lfappend x Nil))) (lfappend y (Cons n x)).
Lemma candidate_1769: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1770: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend lf8 x))).
Lemma candidate_1771: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend lf8 (lfappend y (Cons n x))).
Lemma candidate_1772: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (lfappend lf8 (Cons n x))).
Lemma candidate_1773: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend x lf8))).
Lemma candidate_1774: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1775: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_1776: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst   (rotate      (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end)      (lfappend (lfappend x y) (Cons n lf8))) (lfappend y (Cons n x)).
Lemma candidate_1777: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst   (rotate (len (lfappend lf8 x)) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_1778: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len (rotate n x)) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_1779: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst   (rotate (len (lfappend x lf8)) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_1780: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst   (rotate (len (lfappend x Nil)) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_1781: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_1782: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (rotate (len lf8) (Cons n x))).
Lemma candidate_1783: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend lf8 x))).
Lemma candidate_1784: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (lfappend lf8 (Cons n x))).
Lemma candidate_1785: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend x lf8))).
Lemma candidate_1786: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1787: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_1788: forall (n : natural) (y : lst) (x : lst), @eq lst   (rotate (len x)      (match lfappend y (Cons n x) with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y (Cons n x)).
Lemma candidate_1789: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n (rotate n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1790: forall (n : natural) (y : lst) (x : lst), @eq lst   (rotate (len x) (lfappend (lfappend x Nil) (lfappend y (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1791: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (rotate n (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1792: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1793: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend x (lfappend y (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1794: forall (n : natural) (y : lst) (x : lst), @eq lst   (rotate (len x) (lfappend (lfappend x y) (Cons n (rotate (len x) Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1795: forall (n : natural) (y : lst) (x : lst), @eq lst   (rotate (len x) (lfappend (lfappend x y) (rotate (len y) (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1796: forall (n : natural) (y : lst) (x : lst), @eq lst   (rotate (len x) (lfappend (lfappend x y) (rotate (len x) (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1797: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n (rotate n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1798: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (rotate n (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1799: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1800: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst   (rotate (len x) (lfappend (rotate (len y) (lfappend y x)) (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_1801: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst   (rotate (len x) (lfappend (lfappend lf8 (lfappend x y)) (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_1802: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst   (rotate (len x) (lfappend (lfappend x (lfappend lf8 y)) (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_1803: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst   (rotate (len x) (lfappend (lfappend x (lfappend y lf8)) (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_1804: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst   (rotate (len x) (lfappend (lfappend x (lfappend y Nil)) (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_1805: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_1806: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend lf8 x))).
Lemma candidate_1807: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend lf8 (lfappend y (Cons n x))).
Lemma candidate_1808: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (lfappend lf8 (Cons n x))).
Lemma candidate_1809: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend x lf8))).
Lemma candidate_1810: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1811: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n x)).
Lemma candidate_1812: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))).
Lemma candidate_1813: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (rotate n Nil) (lfappend y (Cons n x))).
Lemma candidate_1814: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (lfappend y Nil) (Cons n (lfappend x Nil))).
Lemma candidate_1815: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_1816: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1817: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1818: forall (x : lst), @eq natural (len x) (len (rotate (len x) (lfappend x Nil))).
Lemma candidate_1819: forall (x : lst), @eq natural (len x)   (len match lfappend x Nil with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1820: forall (x : lst), @eq natural (len x) (len (rotate (len x) x)).
Lemma candidate_1821: forall (x : lst), @eq natural (len x)   (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1822: forall (x : lst), @eq natural (len x) (len (lfappend x Nil)).
Lemma candidate_1823: forall (x : lst), @eq natural (len x) (len x).
Lemma candidate_1824: forall (n : natural) (x : lst), @eq lst (Cons n x) (rotate (len x) (lfappend x (Cons n Nil))).
Lemma candidate_1825: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) (lfappend x Nil))).
Lemma candidate_1826: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_1827: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) x)).
Lemma candidate_1828: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_1829: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_1830: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend (lfappend x y) (lfappend lf8 (Cons n Nil))).
Lemma candidate_1831: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend (lfappend x y) (rotate n (Cons n Nil))).
Lemma candidate_1832: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend (lfappend x y) (Cons n lf8)).
Lemma candidate_1833: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend (lfappend x y) (Cons n Nil)).
Lemma candidate_1834: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend x (lfappend y (Cons n lf8))).
Lemma candidate_1835: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend x (lfappend y (Cons n Nil))).
Lemma candidate_1836: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n (lfappend lf8 Nil)).
Lemma candidate_1837: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n (rotate n Nil)).
Lemma candidate_1838: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (lfappend lf8 (Cons n Nil)).
Lemma candidate_1839: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (rotate n (Cons n Nil)).
Lemma candidate_1840: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n lf8).
Lemma candidate_1841: forall (n : natural) (lf8 : lst), @eq lst (Cons n lf8) (Cons n Nil).
Lemma candidate_1842: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (rotate (len y) y)).
Lemma candidate_1843: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) y).
Lemma candidate_1844: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x y) Nil).
Lemma candidate_1845: forall (y : lst) (x : lst), @eq lst (lfappend x y) (rotate (len y) (lfappend y x)).
Lemma candidate_1846: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend y Nil)).
Lemma candidate_1847: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x y).
Lemma candidate_1848: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (rotate (len lf6) lf6)) (lfappend y lf6).
Lemma candidate_1849: forall (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend y Nil) lf6) (lfappend y lf6).
Lemma candidate_1850: forall (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend y lf6) Nil) (lfappend y lf6).
Lemma candidate_1851: forall (y : lst) (lf6 : lst), @eq lst (rotate (len lf6) (lfappend lf6 y)) (lfappend y lf6).
Lemma candidate_1852: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (lfappend lf6 Nil)) (lfappend y lf6).
Lemma candidate_1853: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y lf6).
Lemma candidate_1854: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len (rotate (len lf6) x)) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y lf6).
Lemma candidate_1855: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate      (len match x with | Cons y x => rotate n (lfappend x (Cons y Nil)) | Nil => Nil end)      (lfappend (lfappend x y) (Cons n Nil))) (lfappend y lf6).
Lemma candidate_1856: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate      (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end)      (lfappend (lfappend x y) (Cons n Nil))) (lfappend y lf6).
Lemma candidate_1857: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (rotate (len (rotate n x)) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y lf6).
Lemma candidate_1858: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len (lfappend x Nil)) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y lf6).
Lemma candidate_1859: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y lf6).
Lemma candidate_1860: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))).
Lemma candidate_1861: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend (rotate n Nil) (lfappend y (Cons n x))).
Lemma candidate_1862: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend (lfappend y Nil) (Cons n (lfappend x Nil))).
Lemma candidate_1863: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_1864: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1865: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1866: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (match lfappend y (lfappend lf6 Nil) with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1867: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (match rotate (len y) (lfappend y lf6) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1868: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (rotate (len y) match lfappend y lf6 with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1869: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (match lfappend lf6 (lfappend y Nil) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1870: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (match lfappend y lf6 with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1871: forall (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (match lfappend lf6 y with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end))   (lfappend y lf6).
Lemma candidate_1872: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x) (lfappend (lfappend x (rotate (len y) y)) (Cons n Nil)))   (lfappend y lf6).
Lemma candidate_1873: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x) (lfappend (lfappend (lfappend x Nil) y) (Cons n Nil)))   (lfappend y lf6).
Lemma candidate_1874: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x) (lfappend (lfappend (lfappend x y) Nil) (Cons n Nil)))   (lfappend y lf6).
Lemma candidate_1875: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x) (lfappend (rotate (len y) (lfappend y x)) (Cons n Nil)))   (lfappend y lf6).
Lemma candidate_1876: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x) (lfappend (lfappend x (lfappend y Nil)) (Cons n Nil)))   (lfappend y lf6).
Lemma candidate_1877: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y lf6).
Lemma candidate_1878: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x)      (lfappend (lfappend x y) (Cons n (rotate n (rotate n Nil)))))   (lfappend y lf6).
Lemma candidate_1879: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x) (lfappend (lfappend x y) (Cons n (rotate (len y) Nil))))   (lfappend y lf6).
Lemma candidate_1880: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x) (lfappend (lfappend x y) (Cons n (rotate (len x) Nil))))   (lfappend y lf6).
Lemma candidate_1881: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst   (rotate (len x) (lfappend (lfappend x y) (Cons n (rotate (len lf6) Nil))))   (lfappend y lf6).
Lemma candidate_1882: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n (rotate n Nil))))   (lfappend y lf6).
Lemma candidate_1883: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n (Nil))))   (lfappend y lf6).
Lemma candidate_1884: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))).
Lemma candidate_1885: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend (rotate n Nil) (lfappend y (Cons n x))).
Lemma candidate_1886: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend (lfappend y Nil) (Cons n (lfappend x Nil))).
Lemma candidate_1887: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_1888: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1889: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_1890: forall (x : lst), @eq natural (len x) (len (rotate (len x) (lfappend x Nil))).
Lemma candidate_1891: forall (x : lst), @eq natural (len x)   (len match lfappend x Nil with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1892: forall (x : lst), @eq natural (len x) (len (rotate (len x) x)).
Lemma candidate_1893: forall (x : lst), @eq natural (len x)   (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_1894: forall (x : lst), @eq natural (len x) (len (lfappend x Nil)).
Lemma candidate_1895: forall (x : lst), @eq natural (len x) (len x).
Lemma candidate_1896: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n (rotate n Nil))).
Lemma candidate_1897: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n (rotate n Nil))).
Lemma candidate_1898: forall (n : natural), @eq lst (Cons n Nil) (rotate n (rotate n (Cons n Nil))).
Lemma candidate_1899: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n Nil)).
Lemma candidate_1900: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n Nil)).
Lemma candidate_1901: forall (n : natural), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_1902: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (rotate (len lf6) lf6)).
Lemma candidate_1903: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y Nil) lf6).
Lemma candidate_1904: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y lf6) Nil).
Lemma candidate_1905: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (rotate (len lf6) (lfappend lf6 y)).
Lemma candidate_1906: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (lfappend lf6 Nil)).
Lemma candidate_1907: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y lf6).
Lemma candidate_1908: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (match lfappend y (Cons n x) with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end).
Lemma candidate_1909: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend (lfappend x y) (Cons n (rotate n Nil))).
Lemma candidate_1910: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend (lfappend x Nil) (lfappend y (Cons n Nil))).
Lemma candidate_1911: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend (lfappend x y) (rotate n (Cons n Nil))).
Lemma candidate_1912: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend (lfappend x y) (Cons n Nil)).
Lemma candidate_1913: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend x (lfappend y (Cons n Nil))).
Lemma candidate_1914: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (rotate (len y) y)).
Lemma candidate_1915: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) y).
Lemma candidate_1916: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x y) Nil).
Lemma candidate_1917: forall (y : lst) (x : lst), @eq lst (lfappend x y) (rotate (len y) (lfappend y x)).
Lemma candidate_1918: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend y Nil)).
Lemma candidate_1919: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x y).
Lemma candidate_1920: @eq lst Nil (Nil).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 8793 seconds
Duplicates removed: 1501
Filtered by Quickchick: 277
Filtered by script: 48
Remaining: 94

Lemmas: 
Lemma candidate_417: forall (lf1 : lst), @eq lst lf1 (rotate (len lf1) lf1).
Lemma candidate_5: forall (lf3 : lst), @eq lst (rotate (len lf3) lf3) lf3.
Lemma candidate_186: forall (x : lst), @eq natural (len x) (len (rotate (len x) x)).
Lemma candidate_78: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n Nil)).
Lemma candidate_77: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n Nil)).
Lemma candidate_415: forall (lf1 : lst), @eq lst lf1 (lfappend (lfappend lf1 Nil) Nil).
Lemma candidate_3: forall (lf3 : lst), @eq lst (lfappend (lfappend lf3 Nil) Nil) lf3.
Lemma candidate_441: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) x)).
Lemma candidate_414: forall (lf1 : lst), @eq lst lf1 (lfappend lf1 (rotate (len lf1) Nil)).
Lemma candidate_2: forall (lf3 : lst), @eq lst (lfappend lf3 (rotate (len lf3) Nil)) lf3.
Lemma candidate_109: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend y Nil)).
Lemma candidate_107: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x y) Nil).
Lemma candidate_106: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) y).
Lemma candidate_105: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (rotate (len y) y)).
Lemma candidate_440: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_76: forall (n : natural), @eq lst (Cons n Nil) (rotate n (rotate n (Cons n Nil))).
Lemma candidate_75: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n (rotate n Nil))).
Lemma candidate_74: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n (rotate n Nil))).
Lemma candidate_448: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (lfappend lf6 Nil)) (lfappend y lf6).
Lemma candidate_445: forall (y : lst) (lf6 : lst), @eq lst (lfappend (lfappend y Nil) lf6) (lfappend y lf6).
Lemma candidate_424: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (lfappend lf6 Nil)).
Lemma candidate_422: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y lf6) Nil).
Lemma candidate_421: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend (lfappend y Nil) lf6).
Lemma candidate_444: forall (y : lst) (lf6 : lst), @eq lst (lfappend y (rotate (len lf6) lf6)) (lfappend y lf6).
Lemma candidate_420: forall (y : lst) (lf6 : lst), @eq lst (lfappend y lf6) (lfappend y (rotate (len lf6) lf6)).
Lemma candidate_30: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (lfappend lf4 (lfappend lf5 Nil)).
Lemma candidate_27: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (lfappend (lfappend lf4 lf5) Nil).
Lemma candidate_26: forall (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 lf5) (lfappend (lfappend lf4 Nil) lf5).
Lemma candidate_11: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate (len lf2) (rotate lf7 lf2)).
Lemma candidate_9: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate lf7 (rotate (len lf2) lf2)).
Lemma candidate_104: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5) (lfappend x (lfappend y lf5)).
Lemma candidate_193: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len x) (rotate (len lf2) lf2)).
Lemma candidate_192: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len lf2) (rotate (len x) lf2)).
Lemma candidate_8: forall (lf7 : natural) (lf2 : lst), @eq lst (rotate lf7 lf2) (rotate lf7 (lfappend lf2 (rotate lf7 Nil))).
Lemma candidate_478: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (lfappend x Nil))) (lfappend y (Cons n x)).
Lemma candidate_477: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_436: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_435: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_84: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (lfappend lf4 (rotate n (Cons n Nil))).
Lemma candidate_83: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (lfappend lf4 (Cons n (rotate n Nil))).
Lemma candidate_81: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil))   (lfappend (lfappend lf4 Nil) (Cons n Nil)).
Lemma candidate_475: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rotate n Nil) (lfappend y (Cons n x)))   (lfappend y (Cons n x)).
Lemma candidate_433: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (rotate n Nil) (lfappend y (Cons n x))).
Lemma candidate_102: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5)   (lfappend x (lfappend y (lfappend lf5 Nil))).
Lemma candidate_99: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5)   (lfappend (lfappend x y) (lfappend lf5 Nil)).
Lemma candidate_82: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil))   (lfappend lf4 (rotate (len lf4) (Cons n Nil))).
Lemma candidate_190: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2)   (rotate (len lf2) (rotate (len x) (lfappend lf2 Nil))).
Lemma candidate_304: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 x)).
Lemma candidate_303: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend (lfappend y lf5) x).
Lemma candidate_476: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n (lfappend x Nil)))   (lfappend y (Cons n x)).
Lemma candidate_434: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (lfappend y Nil) (Cons n (lfappend x Nil))).
Lemma candidate_170: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend x (lfappend y (Cons n Nil))).
Lemma candidate_127: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (lfappend (lfappend x y) (Cons n lf8))   (lfappend x (lfappend y (Cons n lf8))).
Lemma candidate_100: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend x y) lf5)   (lfappend x (rotate (len lf5) (lfappend lf5 y))).
Lemma candidate_23: forall (lf7 : natural) (lf4 : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend lf4 lf5))   (rotate lf7 (lfappend lf4 (lfappend lf5 Nil))).
Lemma candidate_1275: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend x (lfappend y (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_80: forall (n : natural) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil))   (lfappend (lfappend lf4 Nil) (rotate n (Cons n Nil))).
Lemma candidate_187: forall (x : lst), @eq natural (len x)   (len match x with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_94: forall (lf7 : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate lf7 (lfappend (lfappend x y) lf5))   (rotate lf7 (lfappend x (lfappend y lf5))).
Lemma candidate_211: forall (lf4 : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend lf4 lf5))   (rotate (len x) (lfappend lf4 (lfappend lf5 Nil))).
Lemma candidate_168: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend (lfappend x y) (rotate n (Cons n Nil))).
Lemma candidate_166: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend (lfappend x y) (Cons n (rotate n Nil))).
Lemma candidate_1273: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (rotate n (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1271: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n (rotate n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1646: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (lfappend (lfappend lf5 x) Nil)).
Lemma candidate_1645: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (lfappend (lfappend lf5 Nil) x)).
Lemma candidate_302: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 (lfappend x Nil))).
Lemma candidate_300: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend (lfappend y lf5) (lfappend x Nil)).
Lemma candidate_299: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend (lfappend y Nil) (lfappend lf5 x)).
Lemma candidate_167: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (lfappend (lfappend x Nil) (lfappend y (Cons n Nil))).
Lemma candidate_1644: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (lfappend lf5 (rotate (len x) x))).
Lemma candidate_301: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) lf5))   (lfappend y (rotate (len x) (lfappend x lf5))).
Lemma candidate_387: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_386: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_335: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n lf8)))   (lfappend y (Cons n (lfappend lf8 x))).
Lemma candidate_1272: forall (n : natural) (y : lst) (x : lst), @eq lst   (rotate (len x) (lfappend (lfappend x Nil) (lfappend y (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_72: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (rotate lf7 (lfappend (lfappend lf4 Nil) (Cons n Nil))).
Lemma candidate_1796: forall (n : natural) (y : lst) (x : lst), @eq lst   (rotate (len x) (lfappend (lfappend x y) (rotate (len x) (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1795: forall (n : natural) (y : lst) (x : lst), @eq lst   (rotate (len x) (lfappend (lfappend x y) (rotate (len y) (Cons n Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1794: forall (n : natural) (y : lst) (x : lst), @eq lst   (rotate (len x) (lfappend (lfappend x y) (Cons n (rotate (len x) Nil))))   (lfappend y (Cons n x)).
Lemma candidate_185: forall (x : lst), @eq natural (len x)   (len match lfappend x Nil with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_276: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend lf4 (rotate n (Cons n Nil)))).
Lemma candidate_275: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend lf4 (Cons n (rotate n Nil)))).
Lemma candidate_277: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend (lfappend lf4 Nil) (Cons n Nil))).
Lemma candidate_384: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend (rotate n Nil) (lfappend y (Cons n x))).
Lemma candidate_274: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (rotate (len x) (lfappend lf4 (rotate (len x) (Cons n Nil)))).
Lemma candidate_68: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (lfappend (rotate n Nil) (rotate lf7 (lfappend lf4 (Cons n Nil)))).
Lemma candidate_385: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend (lfappend y Nil) (Cons n (lfappend x Nil))).
Lemma candidate_69: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (lfappend (rotate lf7 Nil) (rotate lf7 (lfappend lf4 (Cons n Nil)))).
Lemma candidate_71: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (match rotate lf7 (Cons n lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_278: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend lf4 (Cons n Nil)))   (match rotate (len x) (Cons n lf4) with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_165: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend x y) (Cons n Nil))   (match lfappend y (Cons n x) with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end).
Lemma candidate_1270: forall (n : natural) (y : lst) (x : lst), @eq lst   (rotate (len x)      (match lfappend y (Cons n x) with | Cons y0 x => rotate (len y) (lfappend x (Cons y0 Nil)) | Nil => Nil end))   (lfappend y (Cons n x)).
Lemma candidate_70: forall (n : natural) (lf7 : natural) (lf4 : lst), @eq lst (rotate lf7 (lfappend lf4 (Cons n Nil)))   (match rotate lf7 (lfappend lf4 (Cons n Nil)) with | Cons y x => rotate (len lf4) (lfappend x (Cons y Nil)) | Nil => Nil end).