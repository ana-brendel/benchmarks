File Information
- File name: goal83
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal83_theorem0_51_append_assoc
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal83_theorem0_51_append_assoc
- Namespace: adtind
- Proof name: theorem0
- Theorem: Theorem theorem0: forall x0 y0 : lst,
@eq lst (rotate (len x0) (lfappend x0 y0)) (lfappend y0 x0).
- Declarations: 
From lfind Require Import LFind.

Proof Context
* Goal State: @eq lst (lfappend (lfappend y (Cons n Nil)) x) (lfappend y (Cons n x))

* Hypothesis:
IHx : forall y0 : lst, @eq lst (rotate (len x) (lfappend x y0)) (lfappend y0 x)
x : lst
y : lst
n : natural

* Types:
Set
natural
Prop
lst

* Polymorphic Types:


* Variables:
x : lst
y : lst
n : natural

* Terms:
x : lst
len x : natural
y : lst
rotate (len x) (lfappend x _UNBOUND_REL_1) : lst
lfappend x _UNBOUND_REL_1 : lst
lfappend (lfappend y (Cons n Nil)) x : lst
@eq lst (lfappend (lfappend y (Cons n Nil)) x) (lfappend y (Cons n x)) : Prop
lfappend _UNBOUND_REL_1 x : lst
lfappend y (Cons n x) : lst
lfappend y (Cons n Nil) : lst
Cons n x : lst
lst : Set
Cons n Nil : lst
forall y0 : lst, @eq lst (rotate (len x) (lfappend x y0)) (lfappend y0 x) : Prop
natural : Set
n : natural
Nil : lst
@eq lst (rotate (len x) (lfappend x _UNBOUND_REL_1))
  (lfappend _UNBOUND_REL_1 x) : Prop

* Functions:
len  : forall _ : lst, natural
lfappend  : forall (_ : lst) (_ : lst), lst
rotate  : forall (_ : natural) (_ : lst), lst
Cons  : forall (_ : natural) (_ : lst), lst
@eq  : forall (A : Type) (_ : A) (_ : A), Prop

<---GENERALIZATION--->
Time elapsed: 2 seconds
Generalized Variables:
lf3 : lst = lfappend y (Cons n x)
lf1 : lst = lfappend (lfappend y (Cons n Nil)) x
lf4 : lst = Cons n Nil
lf5 : lst = Cons n x
lf2 : lst = lfappend y (Cons n Nil)
lf6 : lst = Nil

Generalizations:
Lemma conj1: forall (lf1 : lst) (lf3 : lst), @eq lst lf1 lf3.
Lemma conj17: forall (lf2 : lst) (x : lst) (lf3 : lst), @eq lst (lfappend lf2 x) lf3.
Lemma conj19: forall (x : lst) (lf4 : lst) (y : lst) (lf3 : lst), @eq lst (lfappend (lfappend y lf4) x) lf3.
Lemma conj27: forall (lf6 : lst) (x : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x) lf3.
Lemma conj28: forall (x : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x) lf3.
Lemma conj33: forall (lf5 : lst) (lf1 : lst) (y : lst), @eq lst lf1 (lfappend y lf5).
Lemma conj37: forall (x : lst) (lf1 : lst) (y : lst) (n : natural), @eq lst lf1 (lfappend y (Cons n x)).
Lemma conj49: forall (lf2 : lst) (lf5 : lst) (x : lst) (y : lst), @eq lst (lfappend lf2 x) (lfappend y lf5).
Lemma conj51: forall (lf5 : lst) (x : lst) (lf4 : lst) (y : lst), @eq lst (lfappend (lfappend y lf4) x) (lfappend y lf5).
Lemma conj53: forall (lf2 : lst) (x : lst) (y : lst) (n : natural), @eq lst (lfappend lf2 x) (lfappend y (Cons n x)).
Lemma conj55: forall (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (lfappend (lfappend y lf4) x) (lfappend y (Cons n x)).
Lemma conj59: forall (lf6 : lst) (lf5 : lst) (x : lst) (y : lst) (n : natural), @eq lst (lfappend (lfappend y (Cons n lf6)) x) (lfappend y lf5).
Lemma conj60: forall (lf5 : lst) (x : lst) (y : lst) (n : natural), @eq lst (lfappend (lfappend y (Cons n Nil)) x) (lfappend y lf5).
Lemma conj63: forall (lf6 : lst) (x : lst) (y : lst) (n : natural), @eq lst (lfappend (lfappend y (Cons n lf6)) x) (lfappend y (Cons n x)).
Lemma conj64: forall (x : lst) (y : lst) (n : natural), @eq lst (lfappend (lfappend y (Cons n Nil)) x) (lfappend y (Cons n x)).


<---VALIDITY CHECKS--->
Time elapsed: 135 seconds
Valid:
Lemma conj64: forall (x : lst) (y : lst) (n : natural), @eq lst (lfappend (lfappend y (Cons n Nil)) x) (lfappend y (Cons n x)).

Invalid:
Lemma conj63: forall (lf6 : lst) (x : lst) (y : lst) (n : natural), @eq lst (lfappend (lfappend y (Cons n lf6)) x) (lfappend y (Cons n x)).
Lemma conj60: forall (lf5 : lst) (x : lst) (y : lst) (n : natural), @eq lst (lfappend (lfappend y (Cons n Nil)) x) (lfappend y lf5).
Lemma conj59: forall (lf6 : lst) (lf5 : lst) (x : lst) (y : lst) (n : natural), @eq lst (lfappend (lfappend y (Cons n lf6)) x) (lfappend y lf5).
Lemma conj55: forall (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (lfappend (lfappend y lf4) x) (lfappend y (Cons n x)).
Lemma conj53: forall (lf2 : lst) (x : lst) (y : lst) (n : natural), @eq lst (lfappend lf2 x) (lfappend y (Cons n x)).
Lemma conj51: forall (lf5 : lst) (x : lst) (lf4 : lst) (y : lst), @eq lst (lfappend (lfappend y lf4) x) (lfappend y lf5).
Lemma conj49: forall (lf2 : lst) (lf5 : lst) (x : lst) (y : lst), @eq lst (lfappend lf2 x) (lfappend y lf5).
Lemma conj37: forall (x : lst) (lf1 : lst) (y : lst) (n : natural), @eq lst lf1 (lfappend y (Cons n x)).
Lemma conj33: forall (lf5 : lst) (lf1 : lst) (y : lst), @eq lst lf1 (lfappend y lf5).
Lemma conj28: forall (x : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x) lf3.
Lemma conj27: forall (lf6 : lst) (x : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x) lf3.
Lemma conj19: forall (x : lst) (lf4 : lst) (y : lst) (lf3 : lst), @eq lst (lfappend (lfappend y lf4) x) lf3.
Lemma conj17: forall (lf2 : lst) (x : lst) (lf3 : lst), @eq lst (lfappend lf2 x) lf3.
Lemma conj1: forall (lf1 : lst) (lf3 : lst), @eq lst lf1 lf3.

<---ADD IMPLICATIONS--->
Time elapsed: 166 seconds
Generalizations:
Lemma conj63: forall (lf6 : lst) (x : lst) (y : lst) (n : natural), @eq lst (lfappend (lfappend y (Cons n lf6)) x) (lfappend y (Cons n x)).
Lemma conj60: forall (lf5 : lst) (x : lst) (y : lst) (n : natural), @eq lst (lfappend (lfappend y (Cons n Nil)) x) (lfappend y lf5).
Lemma conj59: forall (lf6 : lst) (lf5 : lst) (x : lst) (y : lst) (n : natural), @eq lst (lfappend (lfappend y (Cons n lf6)) x) (lfappend y lf5).
Lemma conj55: forall (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (lfappend (lfappend y lf4) x) (lfappend y (Cons n x)).
Lemma conj53: forall (lf2 : lst) (x : lst) (y : lst) (n : natural), @eq lst (lfappend lf2 x) (lfappend y (Cons n x)).
Lemma conj51: forall (lf5 : lst) (x : lst) (lf4 : lst) (y : lst), @eq lst (lfappend (lfappend y lf4) x) (lfappend y lf5).
Lemma conj49: forall (lf2 : lst) (lf5 : lst) (x : lst) (y : lst), @eq lst (lfappend lf2 x) (lfappend y lf5).
Lemma conj37: forall (x : lst) (lf1 : lst) (y : lst) (n : natural), @eq lst lf1 (lfappend y (Cons n x)).
Lemma conj33: forall (lf5 : lst) (lf1 : lst) (y : lst), @eq lst lf1 (lfappend y lf5).
Lemma conj28: forall (x : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x) lf3.
Lemma conj27: forall (lf6 : lst) (x : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x) lf3.
Lemma conj19: forall (x : lst) (lf4 : lst) (y : lst) (lf3 : lst), @eq lst (lfappend (lfappend y lf4) x) lf3.
Lemma conj17: forall (lf2 : lst) (x : lst) (lf3 : lst), @eq lst (lfappend lf2 x) lf3.
Lemma conj1: forall (lf1 : lst) (lf3 : lst), @eq lst lf1 lf3.


<---VALIDITY CHECKS--->
Time elapsed: 201 seconds
Valid:

Invalid:
Lemma conj1: forall (lf1 : lst) (lf3 : lst), @eq lst lf1 lf3.
Lemma conj17: forall (lf2 : lst) (x : lst) (lf3 : lst), @eq lst (lfappend lf2 x) lf3.
Lemma conj19: forall (x : lst) (lf4 : lst) (y : lst) (lf3 : lst), @eq lst (lfappend (lfappend y lf4) x) lf3.
Lemma conj27: forall (lf6 : lst) (x : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x) lf3.
Lemma conj28: forall (x : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x) lf3.
Lemma conj33: forall (lf5 : lst) (lf1 : lst) (y : lst), @eq lst lf1 (lfappend y lf5).
Lemma conj37: forall (x : lst) (lf1 : lst) (y : lst) (n : natural), @eq lst lf1 (lfappend y (Cons n x)).
Lemma conj49: forall (lf2 : lst) (lf5 : lst) (x : lst) (y : lst), @eq lst (lfappend lf2 x) (lfappend y lf5).
Lemma conj51: forall (lf5 : lst) (x : lst) (lf4 : lst) (y : lst), @eq lst (lfappend (lfappend y lf4) x) (lfappend y lf5).
Lemma conj53: forall (lf2 : lst) (x : lst) (y : lst) (n : natural), @eq lst (lfappend lf2 x) (lfappend y (Cons n x)).
Lemma conj55: forall (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (lfappend (lfappend y lf4) x) (lfappend y (Cons n x)).
Lemma conj59: forall (lf6 : lst) (lf5 : lst) (x : lst) (y : lst) (n : natural), @eq lst (lfappend (lfappend y (Cons n lf6)) x) (lfappend y lf5).
Lemma conj60: forall (lf5 : lst) (x : lst) (y : lst) (n : natural), @eq lst (lfappend (lfappend y (Cons n Nil)) x) (lfappend y lf5).
Lemma conj63: forall (lf6 : lst) (x : lst) (y : lst) (n : natural), @eq lst (lfappend (lfappend y (Cons n lf6)) x) (lfappend y (Cons n x)).


<---CREATE SKETCHES--->
Time elapsed: 201 seconds
Sketches:
Sketch conj17_sketch0 : @eq lst (##hole##) lf3
Sketch conj17_term_sketch0 : @eq lst (lfappend lf2 x) (##hole##)
Sketch conj19_sketch0 : @eq lst (lfappend (##hole##) x) lf3
Sketch conj19_sketch1 : @eq lst (##hole##) lf3
Sketch conj19_term_sketch0 : @eq lst (lfappend y lf4) (##hole##)
Sketch conj19_term_sketch1 : @eq lst (lfappend (lfappend y lf4) x) (##hole##)
Sketch conj27_sketch0 : @eq lst (##hole##) lf3
Sketch conj27_sketch1 : @eq lst (lfappend (lfappend y (##hole##)) x) lf3
Sketch conj27_sketch2 : @eq lst (lfappend (##hole##) x) lf3
Sketch conj27_term_sketch0 : @eq lst (lfappend (lfappend y (Cons n lf6)) x) (##hole##)
Sketch conj27_term_sketch1 : @eq lst (Cons n lf6) (##hole##)
Sketch conj27_term_sketch2 : @eq lst (lfappend y (Cons n lf6)) (##hole##)
Sketch conj28_sketch0 : @eq lst (lfappend (##hole##) x) lf3
Sketch conj28_sketch1 : @eq lst (lfappend (lfappend y (##hole##)) x) lf3
Sketch conj28_sketch2 : @eq lst (lfappend (lfappend y (Cons n (##hole##))) x) lf3
Sketch conj28_sketch3 : @eq lst (##hole##) lf3
Sketch conj28_term_sketch0 : @eq lst (lfappend y (Cons n Nil)) (##hole##)
Sketch conj28_term_sketch1 : @eq lst (Cons n Nil) (##hole##)
Sketch conj28_term_sketch2 : @eq lst Nil (##hole##)
Sketch conj28_term_sketch3 : @eq lst (lfappend (lfappend y (Cons n Nil)) x) (##hole##)
Sketch conj33_sketch0 : @eq lst lf1 (##hole##)
Sketch conj33_term_sketch0 : @eq lst (lfappend y lf5) (##hole##)
Sketch conj37_sketch0 : @eq lst lf1 (##hole##)
Sketch conj37_sketch1 : @eq lst lf1 (lfappend y (##hole##))
Sketch conj37_term_sketch0 : @eq lst (lfappend y (Cons n x)) (##hole##)
Sketch conj37_term_sketch1 : @eq lst (Cons n x) (##hole##)
Sketch conj49_sketch0 : @eq lst (lfappend lf2 x) (##hole##)
Sketch conj49_sketch1 : @eq lst (##hole##) (lfappend y lf5)
Sketch conj49_term_sketch0 : @eq lst (lfappend y lf5) (##hole##)
Sketch conj49_term_sketch1 : @eq lst (lfappend lf2 x) (##hole##)
Sketch conj51_sketch0 : @eq lst (lfappend (##hole##) x) (lfappend y lf5)
Sketch conj51_sketch1 : @eq lst (lfappend (lfappend y lf4) x) (##hole##)
Sketch conj51_sketch2 : @eq lst (##hole##) (lfappend y lf5)
Sketch conj51_term_sketch0 : @eq lst (lfappend y lf4) (##hole##)
Sketch conj51_term_sketch1 : @eq lst (lfappend y lf5) (##hole##)
Sketch conj51_term_sketch2 : @eq lst (lfappend (lfappend y lf4) x) (##hole##)
Sketch conj53_sketch0 : @eq lst (lfappend lf2 x) (##hole##)
Sketch conj53_sketch1 : @eq lst (lfappend lf2 x) (lfappend y (##hole##))
Sketch conj53_sketch2 : @eq lst (##hole##) (lfappend y (Cons n x))
Sketch conj53_term_sketch0 : @eq lst (lfappend y (Cons n x)) (##hole##)
Sketch conj53_term_sketch1 : @eq lst (Cons n x) (##hole##)
Sketch conj53_term_sketch2 : @eq lst (lfappend lf2 x) (##hole##)
Sketch conj55_sketch0 : @eq lst (lfappend (##hole##) x) (lfappend y (Cons n x))
Sketch conj55_sketch1 : @eq lst (lfappend (lfappend y lf4) x) (##hole##)
Sketch conj55_sketch2 : @eq lst (lfappend (lfappend y lf4) x) (lfappend y (##hole##))
Sketch conj55_sketch3 : @eq lst (##hole##) (lfappend y (Cons n x))
Sketch conj55_term_sketch0 : @eq lst (lfappend y lf4) (##hole##)
Sketch conj55_term_sketch1 : @eq lst (lfappend y (Cons n x)) (##hole##)
Sketch conj55_term_sketch2 : @eq lst (Cons n x) (##hole##)
Sketch conj55_term_sketch3 : @eq lst (lfappend (lfappend y lf4) x) (##hole##)
Sketch conj59_sketch0 : @eq lst (##hole##) (lfappend y lf5)
Sketch conj59_sketch1 : @eq lst (lfappend (lfappend y (##hole##)) x) (lfappend y lf5)
Sketch conj59_sketch2 : @eq lst (lfappend (lfappend y (Cons n lf6)) x) (##hole##)
Sketch conj59_sketch3 : @eq lst (lfappend (##hole##) x) (lfappend y lf5)
Sketch conj59_term_sketch0 : @eq lst (lfappend (lfappend y (Cons n lf6)) x) (##hole##)
Sketch conj59_term_sketch1 : @eq lst (Cons n lf6) (##hole##)
Sketch conj59_term_sketch2 : @eq lst (lfappend y lf5) (##hole##)
Sketch conj59_term_sketch3 : @eq lst (lfappend y (Cons n lf6)) (##hole##)
Sketch conj60_sketch0 : @eq lst (lfappend (##hole##) x) (lfappend y lf5)
Sketch conj60_sketch1 : @eq lst (lfappend (lfappend y (Cons n Nil)) x) (##hole##)
Sketch conj60_sketch2 : @eq lst (lfappend (lfappend y (##hole##)) x) (lfappend y lf5)
Sketch conj60_sketch3 : @eq lst (lfappend (lfappend y (Cons n (##hole##))) x) (lfappend y lf5)
Sketch conj60_sketch4 : @eq lst (##hole##) (lfappend y lf5)
Sketch conj60_term_sketch0 : @eq lst (lfappend y (Cons n Nil)) (##hole##)
Sketch conj60_term_sketch1 : @eq lst (lfappend y lf5) (##hole##)
Sketch conj60_term_sketch2 : @eq lst (Cons n Nil) (##hole##)
Sketch conj60_term_sketch3 : @eq lst Nil (##hole##)
Sketch conj60_term_sketch4 : @eq lst (lfappend (lfappend y (Cons n Nil)) x) (##hole##)
Sketch conj63_sketch0 : @eq lst (##hole##) (lfappend y (Cons n x))
Sketch conj63_sketch1 : @eq lst (lfappend (lfappend y (Cons n lf6)) x) (##hole##)
Sketch conj63_sketch2 : @eq lst (lfappend (lfappend y (##hole##)) x) (lfappend y (Cons n x))
Sketch conj63_sketch3 : @eq lst (lfappend (lfappend y (Cons n lf6)) x) (lfappend y (##hole##))
Sketch conj63_sketch4 : @eq lst (lfappend (##hole##) x) (lfappend y (Cons n x))
Sketch conj63_term_sketch0 : @eq lst (lfappend (lfappend y (Cons n lf6)) x) (##hole##)
Sketch conj63_term_sketch1 : @eq lst (lfappend y (Cons n x)) (##hole##)
Sketch conj63_term_sketch2 : @eq lst (Cons n lf6) (##hole##)
Sketch conj63_term_sketch3 : @eq lst (Cons n x) (##hole##)
Sketch conj63_term_sketch4 : @eq lst (lfappend y (Cons n lf6)) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 1450 seconds
Problems per Sketch:
Sketch conj33_sketch0 --> Problem  synth_15
Sketch conj28_sketch0 --> Problem  synth_3
Sketch conj53_sketch1 --> Problem  synth_20
Sketch conj60_term_sketch1 --> Problem  synth_16
Sketch conj59_term_sketch2 --> Problem  synth_16
Sketch conj63_sketch4 --> Problem  synth_21
Sketch conj60_term_sketch4 --> Problem  synth_14
Sketch conj59_term_sketch1 --> Problem  synth_8
Sketch conj59_sketch1 --> Problem  synth_23
Sketch conj53_term_sketch2 --> Problem  synth_2
Sketch conj60_sketch0 --> Problem  synth_19
Sketch conj53_term_sketch0 --> Problem  synth_14
Sketch conj17_term_sketch0 --> Problem  synth_2
Sketch conj28_term_sketch1 --> Problem  synth_12
Sketch conj63_term_sketch0 --> Problem  synth_7
Sketch conj55_sketch3 --> Problem  synth_14
Sketch conj60_term_sketch3 --> Problem  synth_13
Sketch conj60_term_sketch2 --> Problem  synth_12
Sketch conj60_sketch1 --> Problem  synth_14
Sketch conj55_sketch1 --> Problem  synth_5
Sketch conj28_term_sketch3 --> Problem  synth_14
Sketch conj60_sketch2 --> Problem  synth_23
Sketch conj59_sketch3 --> Problem  synth_19
Sketch conj27_term_sketch2 --> Problem  synth_9
Sketch conj63_term_sketch4 --> Problem  synth_9
Sketch conj59_sketch2 --> Problem  synth_7
Sketch conj28_sketch2 --> Problem  synth_10
Sketch conj33_term_sketch0 --> Problem  synth_16
Sketch conj19_term_sketch1 --> Problem  synth_5
Sketch conj51_term_sketch2 --> Problem  synth_5
Sketch conj27_sketch2 --> Problem  synth_3
Sketch conj28_term_sketch2 --> Problem  synth_13
Sketch conj60_term_sketch0 --> Problem  synth_11
Sketch conj27_sketch1 --> Problem  synth_6
Sketch conj53_sketch0 --> Problem  synth_2
Sketch conj60_sketch3 --> Problem  synth_24
Sketch conj51_sketch0 --> Problem  synth_19
Sketch conj19_term_sketch0 --> Problem  synth_4
Sketch conj63_term_sketch1 --> Problem  synth_14
Sketch conj51_term_sketch1 --> Problem  synth_16
Sketch conj51_term_sketch0 --> Problem  synth_4
Sketch conj55_term_sketch0 --> Problem  synth_4
Sketch conj27_term_sketch1 --> Problem  synth_8
Sketch conj19_sketch0 --> Problem  synth_3
Sketch conj17_sketch0 --> Problem  synth_1
Sketch conj49_sketch0 --> Problem  synth_2
Sketch conj63_sketch2 --> Problem  synth_25
Sketch conj37_sketch0 --> Problem  synth_15
Sketch conj55_term_sketch1 --> Problem  synth_14
Sketch conj37_term_sketch0 --> Problem  synth_14
Sketch conj59_sketch0 --> Problem  synth_16
Sketch conj49_term_sketch1 --> Problem  synth_2
Sketch conj63_term_sketch3 --> Problem  synth_18
Sketch conj63_sketch0 --> Problem  synth_14
Sketch conj55_term_sketch3 --> Problem  synth_5
Sketch conj63_sketch3 --> Problem  synth_26
Sketch conj59_term_sketch0 --> Problem  synth_7
Sketch conj53_term_sketch1 --> Problem  synth_18
Sketch conj28_term_sketch0 --> Problem  synth_11
Sketch conj59_term_sketch3 --> Problem  synth_9
Sketch conj51_sketch1 --> Problem  synth_5
Sketch conj55_sketch0 --> Problem  synth_21
Sketch conj63_sketch1 --> Problem  synth_7
Sketch conj53_sketch2 --> Problem  synth_14
Sketch conj27_sketch0 --> Problem  synth_1
Sketch conj19_sketch1 --> Problem  synth_1
Sketch conj28_sketch3 --> Problem  synth_1
Sketch conj28_sketch1 --> Problem  synth_6
Sketch conj37_term_sketch1 --> Problem  synth_18
Sketch conj60_sketch4 --> Problem  synth_16
Sketch conj55_term_sketch2 --> Problem  synth_18
Sketch conj27_term_sketch0 --> Problem  synth_7
Sketch conj51_sketch2 --> Problem  synth_16
Sketch conj63_term_sketch2 --> Problem  synth_8
Sketch conj55_sketch2 --> Problem  synth_22
Sketch conj49_sketch1 --> Problem  synth_16
Sketch conj49_term_sketch0 --> Problem  synth_16
Sketch conj37_sketch1 --> Problem  synth_17


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 1576 seconds

Problem: synth_22
 lfappend lf4 (rotate (len x) x)
 lfappend (lfappend lf4 Nil) x
 lfappend (lfappend lf4 x) Nil
 rotate (len x) (lfappend x lf4)
 lfappend lf4 (lfappend x Nil)
 lfappend lf4 x

Problem: synth_20

Problem: synth_18
 rotate (len x) (lfappend x (Cons n Nil))
 Cons n (rotate (len x) (lfappend x Nil))
 Cons n (lfappend x (rotate n Nil))
 Cons n (rotate (len x) x)
 Cons n (lfappend x Nil)
 Cons n x

Problem: synth_17

Problem: synth_21
 lfappend (lfappend y Nil) (Cons n Nil)
 lfappend y (rotate (len y) (Cons n Nil))
 lfappend y (rotate (len x) (Cons n Nil))
 lfappend y (Cons n (rotate n Nil))
 lfappend y (rotate n (Cons n Nil))
 lfappend y (Cons n Nil)

Problem: synth_26
 rotate (len lf6) (Cons n x)
 Cons n (lfappend lf6 x)
 lfappend lf6 (Cons n x)
 Cons n (lfappend x lf6)
 Cons n (lfappend x Nil)
 Cons n x

Problem: synth_9
 lfappend y (Cons n (rotate n Nil))
 lfappend lf6 (lfappend y (Cons n Nil))
 lfappend y (lfappend lf6 (Cons n Nil))
 lfappend y (rotate n (Cons n Nil))
 lfappend y (Cons n lf6)
 lfappend y (Cons n Nil)

Problem: synth_25
 Cons n (rotate (len x) Nil)
 rotate (len y) (Cons n Nil)
 rotate (len x) (Cons n Nil)
 Cons n (rotate n Nil)
 rotate n (Cons n Nil)
 Cons n Nil

Problem: synth_13
 Nil

Problem: synth_6

Problem: synth_11
 lfappend (lfappend y Nil) (rotate n (Cons n Nil))
 lfappend (lfappend y Nil) (Cons n Nil)
 lfappend y (rotate (len y) (Cons n Nil))
 lfappend y (Cons n (rotate n Nil))
 lfappend y (rotate n (Cons n Nil))
 lfappend y (Cons n Nil)

Problem: synth_7
 lfappend y (Cons n (lfappend lf6 x))
 lfappend lf6 (lfappend y (Cons n x))
 lfappend y (lfappend lf6 (Cons n x))
 lfappend y (Cons n (lfappend x lf6))
 lfappend y (Cons n (lfappend x Nil))
 lfappend y (Cons n x)

Problem: synth_4
 lfappend (lfappend y Nil) lf4
 lfappend (lfappend y lf4) Nil
 rotate (len lf4) (lfappend lf4 y)
 match lfappend lf4 y with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end
 lfappend y (lfappend lf4 Nil)
 lfappend y lf4

Problem: synth_1
 lfappend lf3 (rotate (len lf3) Nil)
 lfappend (lfappend lf3 Nil) Nil
 rotate (len lf3) (lfappend lf3 Nil)
 rotate (len lf3) lf3
 lfappend lf3 Nil
 lf3

Problem: synth_23

Problem: synth_16
 lfappend y (rotate (len lf5) lf5)
 lfappend (lfappend y Nil) lf5
 lfappend (lfappend y lf5) Nil
 rotate (len lf5) (lfappend lf5 y)
 lfappend y (lfappend lf5 Nil)
 lfappend y lf5

Problem: synth_19

Problem: synth_15
 lfappend lf1 (rotate (len lf1) Nil)
 lfappend (lfappend lf1 Nil) Nil
 rotate (len lf1) (lfappend lf1 Nil)
 rotate (len lf1) lf1
 lfappend lf1 Nil
 lf1

Problem: synth_14
 rotate (len x) (lfappend (lfappend x y) (Cons n Nil))
 lfappend (rotate n Nil) (lfappend y (Cons n x))
 lfappend (lfappend y Nil) (Cons n (lfappend x Nil))
 lfappend (lfappend y Nil) (Cons n x)
 lfappend y (Cons n (lfappend x Nil))
 lfappend y (Cons n x)

Problem: synth_10
 rotate n (rotate n Nil)
 rotate (len lf3) Nil
 rotate (len y) Nil
 rotate (len x) Nil
 rotate n Nil
 Nil

Problem: synth_8
 Cons n (lfappend lf6 Nil)
 Cons n (rotate n Nil)
 lfappend lf6 (Cons n Nil)
 rotate n (Cons n Nil)
 Cons n lf6
 Cons n Nil

Problem: synth_24
 rotate n (rotate n Nil)
 rotate (len y) Nil
 rotate (len x) Nil
 rotate (len lf5) Nil
 rotate n Nil
 Nil

Problem: synth_3

Problem: synth_12
 Cons n (rotate n (rotate n Nil))
 rotate n (Cons n (rotate n Nil))
 rotate n (rotate n (Cons n Nil))
 Cons n (rotate n Nil)
 rotate n (Cons n Nil)
 Cons n Nil

Problem: synth_5
 lfappend (lfappend y Nil) (lfappend lf4 x)
 lfappend (lfappend y lf4) (lfappend x Nil)
 lfappend y (rotate (len x) (lfappend x lf4))
 lfappend y (lfappend lf4 (lfappend x Nil))
 lfappend (lfappend y lf4) x
 lfappend y (lfappend lf4 x)

Problem: synth_2
 lfappend lf2 (rotate (len x) x)
 lfappend (lfappend lf2 Nil) x
 lfappend (lfappend lf2 x) Nil
 rotate (len x) (lfappend x lf2)
 lfappend lf2 (lfappend x Nil)
 lfappend lf2 x

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 1576 seconds
Lemmas:
Lemma candidate_1: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x) (lfappend y (Cons n x)).
Lemma candidate_2: forall (lf3 : lst), @eq lst (lfappend lf3 (rotate (len lf3) Nil)) lf3.
Lemma candidate_3: forall (lf3 : lst), @eq lst (lfappend (lfappend lf3 Nil) Nil) lf3.
Lemma candidate_4: forall (lf3 : lst), @eq lst (rotate (len lf3) (lfappend lf3 Nil)) lf3.
Lemma candidate_5: forall (lf3 : lst), @eq lst (rotate (len lf3) lf3) lf3.
Lemma candidate_6: forall (lf3 : lst), @eq lst (lfappend lf3 Nil) lf3.
Lemma candidate_7: forall (lf3 : lst), @eq lst (lf3) lf3.
Lemma candidate_8: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend lf2 (rotate (len x) x)).
Lemma candidate_9: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend (lfappend lf2 Nil) x).
Lemma candidate_10: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend (lfappend lf2 x) Nil).
Lemma candidate_11: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (rotate (len x) (lfappend x lf2)).
Lemma candidate_12: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend lf2 (lfappend x Nil)).
Lemma candidate_13: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend lf2 x).
Lemma candidate_14: forall (lf3 : lst), @eq lst (lfappend lf3 (rotate (len lf3) Nil)) lf3.
Lemma candidate_15: forall (lf3 : lst), @eq lst (lfappend (lfappend lf3 Nil) Nil) lf3.
Lemma candidate_16: forall (lf3 : lst), @eq lst (rotate (len lf3) (lfappend lf3 Nil)) lf3.
Lemma candidate_17: forall (lf3 : lst), @eq lst (rotate (len lf3) lf3) lf3.
Lemma candidate_18: forall (lf3 : lst), @eq lst (lfappend lf3 Nil) lf3.
Lemma candidate_19: forall (lf3 : lst), @eq lst (lf3) lf3.
Lemma candidate_20: forall (y : lst) (lf4 : lst), @eq lst (lfappend y lf4) (lfappend (lfappend y Nil) lf4).
Lemma candidate_21: forall (y : lst) (lf4 : lst), @eq lst (lfappend y lf4) (lfappend (lfappend y lf4) Nil).
Lemma candidate_22: forall (y : lst) (lf4 : lst), @eq lst (lfappend y lf4) (rotate (len lf4) (lfappend lf4 y)).
Lemma candidate_23: forall (y : lst) (lf4 : lst), @eq lst (lfappend y lf4)   (match lfappend lf4 y with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_24: forall (y : lst) (lf4 : lst), @eq lst (lfappend y lf4) (lfappend y (lfappend lf4 Nil)).
Lemma candidate_25: forall (y : lst) (lf4 : lst), @eq lst (lfappend y lf4) (lfappend y lf4).
Lemma candidate_26: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend (lfappend y Nil) (lfappend lf4 x)).
Lemma candidate_27: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend (lfappend y lf4) (lfappend x Nil)).
Lemma candidate_28: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend y (rotate (len x) (lfappend x lf4))).
Lemma candidate_29: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend y (lfappend lf4 (lfappend x Nil))).
Lemma candidate_30: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x) (lfappend (lfappend y lf4) x).
Lemma candidate_31: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x) (lfappend y (lfappend lf4 x)).
Lemma candidate_32: forall (lf3 : lst), @eq lst (lfappend lf3 (rotate (len lf3) Nil)) lf3.
Lemma candidate_33: forall (lf3 : lst), @eq lst (lfappend (lfappend lf3 Nil) Nil) lf3.
Lemma candidate_34: forall (lf3 : lst), @eq lst (rotate (len lf3) (lfappend lf3 Nil)) lf3.
Lemma candidate_35: forall (lf3 : lst), @eq lst (rotate (len lf3) lf3) lf3.
Lemma candidate_36: forall (lf3 : lst), @eq lst (lfappend lf3 Nil) lf3.
Lemma candidate_37: forall (lf3 : lst), @eq lst (lf3) lf3.
Lemma candidate_38: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend y (Cons n (lfappend lf6 x))).
Lemma candidate_39: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend lf6 (lfappend y (Cons n x))).
Lemma candidate_40: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend y (lfappend lf6 (Cons n x))).
Lemma candidate_41: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend y (Cons n (lfappend x lf6))).
Lemma candidate_42: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_43: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x) (lfappend y (Cons n x)).
Lemma candidate_44: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (Cons n (lfappend lf6 Nil)).
Lemma candidate_45: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (Cons n (rotate n Nil)).
Lemma candidate_46: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (lfappend lf6 (Cons n Nil)).
Lemma candidate_47: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (rotate n (Cons n Nil)).
Lemma candidate_48: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (Cons n lf6).
Lemma candidate_49: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (Cons n Nil).
Lemma candidate_50: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend y (Cons n lf6)) (lfappend y (Cons n (rotate n Nil))).
Lemma candidate_51: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend y (Cons n lf6)) (lfappend lf6 (lfappend y (Cons n Nil))).
Lemma candidate_52: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend y (Cons n lf6)) (lfappend y (lfappend lf6 (Cons n Nil))).
Lemma candidate_53: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend y (Cons n lf6)) (lfappend y (rotate n (Cons n Nil))).
Lemma candidate_54: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend y (Cons n lf6)) (lfappend y (Cons n lf6)).
Lemma candidate_55: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend y (Cons n lf6)) (lfappend y (Cons n Nil)).
Lemma candidate_56: forall (lf3 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n (rotate n (rotate n Nil)))) x) lf3.
Lemma candidate_57: forall (lf3 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n (rotate (len lf3) Nil))) x) lf3.
Lemma candidate_58: forall (lf3 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n (rotate (len y) Nil))) x) lf3.
Lemma candidate_59: forall (lf3 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n (rotate (len x) Nil))) x) lf3.
Lemma candidate_60: forall (lf3 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n (rotate n Nil))) x) lf3.
Lemma candidate_61: forall (lf3 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n (Nil))) x) lf3.
Lemma candidate_62: forall (lf3 : lst), @eq lst (lfappend lf3 (rotate (len lf3) Nil)) lf3.
Lemma candidate_63: forall (lf3 : lst), @eq lst (lfappend (lfappend lf3 Nil) Nil) lf3.
Lemma candidate_64: forall (lf3 : lst), @eq lst (rotate (len lf3) (lfappend lf3 Nil)) lf3.
Lemma candidate_65: forall (lf3 : lst), @eq lst (rotate (len lf3) lf3) lf3.
Lemma candidate_66: forall (lf3 : lst), @eq lst (lfappend lf3 Nil) lf3.
Lemma candidate_67: forall (lf3 : lst), @eq lst (lf3) lf3.
Lemma candidate_68: forall (n : natural) (y : lst), @eq lst (lfappend y (Cons n Nil))   (lfappend (lfappend y Nil) (rotate n (Cons n Nil))).
Lemma candidate_69: forall (n : natural) (y : lst), @eq lst (lfappend y (Cons n Nil)) (lfappend (lfappend y Nil) (Cons n Nil)).
Lemma candidate_70: forall (n : natural) (y : lst), @eq lst (lfappend y (Cons n Nil)) (lfappend y (rotate (len y) (Cons n Nil))).
Lemma candidate_71: forall (n : natural) (y : lst), @eq lst (lfappend y (Cons n Nil)) (lfappend y (Cons n (rotate n Nil))).
Lemma candidate_72: forall (n : natural) (y : lst), @eq lst (lfappend y (Cons n Nil)) (lfappend y (rotate n (Cons n Nil))).
Lemma candidate_73: forall (n : natural) (y : lst), @eq lst (lfappend y (Cons n Nil)) (lfappend y (Cons n Nil)).
Lemma candidate_74: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n (rotate n Nil))).
Lemma candidate_75: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n (rotate n Nil))).
Lemma candidate_76: forall (n : natural), @eq lst (Cons n Nil) (rotate n (rotate n (Cons n Nil))).
Lemma candidate_77: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n Nil)).
Lemma candidate_78: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n Nil)).
Lemma candidate_79: forall (n : natural), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_80: @eq lst Nil (Nil).
Lemma candidate_81: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x)   (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))).
Lemma candidate_82: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x)   (lfappend (rotate n Nil) (lfappend y (Cons n x))).
Lemma candidate_83: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x)   (lfappend (lfappend y Nil) (Cons n (lfappend x Nil))).
Lemma candidate_84: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x)   (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_85: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x)   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_86: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x) (lfappend y (Cons n x)).
Lemma candidate_87: forall (lf1 : lst), @eq lst lf1 (lfappend lf1 (rotate (len lf1) Nil)).
Lemma candidate_88: forall (lf1 : lst), @eq lst lf1 (lfappend (lfappend lf1 Nil) Nil).
Lemma candidate_89: forall (lf1 : lst), @eq lst lf1 (rotate (len lf1) (lfappend lf1 Nil)).
Lemma candidate_90: forall (lf1 : lst), @eq lst lf1 (rotate (len lf1) lf1).
Lemma candidate_91: forall (lf1 : lst), @eq lst lf1 (lfappend lf1 Nil).
Lemma candidate_92: forall (lf1 : lst), @eq lst lf1 (lf1).
Lemma candidate_93: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend y (rotate (len lf5) lf5)).
Lemma candidate_94: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend (lfappend y Nil) lf5).
Lemma candidate_95: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend (lfappend y lf5) Nil).
Lemma candidate_96: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (rotate (len lf5) (lfappend lf5 y)).
Lemma candidate_97: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend y (lfappend lf5 Nil)).
Lemma candidate_98: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend y lf5).
Lemma candidate_99: forall (lf1 : lst), @eq lst lf1 (lfappend lf1 (rotate (len lf1) Nil)).
Lemma candidate_100: forall (lf1 : lst), @eq lst lf1 (lfappend (lfappend lf1 Nil) Nil).
Lemma candidate_101: forall (lf1 : lst), @eq lst lf1 (rotate (len lf1) (lfappend lf1 Nil)).
Lemma candidate_102: forall (lf1 : lst), @eq lst lf1 (rotate (len lf1) lf1).
Lemma candidate_103: forall (lf1 : lst), @eq lst lf1 (lfappend lf1 Nil).
Lemma candidate_104: forall (lf1 : lst), @eq lst lf1 (lf1).
Lemma candidate_105: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))).
Lemma candidate_106: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (rotate n Nil) (lfappend y (Cons n x))).
Lemma candidate_107: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (lfappend y Nil) (Cons n (lfappend x Nil))).
Lemma candidate_108: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_109: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_110: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_111: forall (n : natural) (x : lst), @eq lst (Cons n x) (rotate (len x) (lfappend x (Cons n Nil))).
Lemma candidate_112: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) (lfappend x Nil))).
Lemma candidate_113: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_114: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) x)).
Lemma candidate_115: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_116: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_117: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend lf2 (rotate (len x) x)).
Lemma candidate_118: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend (lfappend lf2 Nil) x).
Lemma candidate_119: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend (lfappend lf2 x) Nil).
Lemma candidate_120: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (rotate (len x) (lfappend x lf2)).
Lemma candidate_121: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend lf2 (lfappend x Nil)).
Lemma candidate_122: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend lf2 x).
Lemma candidate_123: forall (y : lst) (lf5 : lst), @eq lst (lfappend y (rotate (len lf5) lf5)) (lfappend y lf5).
Lemma candidate_124: forall (y : lst) (lf5 : lst), @eq lst (lfappend (lfappend y Nil) lf5) (lfappend y lf5).
Lemma candidate_125: forall (y : lst) (lf5 : lst), @eq lst (lfappend (lfappend y lf5) Nil) (lfappend y lf5).
Lemma candidate_126: forall (y : lst) (lf5 : lst), @eq lst (rotate (len lf5) (lfappend lf5 y)) (lfappend y lf5).
Lemma candidate_127: forall (y : lst) (lf5 : lst), @eq lst (lfappend y (lfappend lf5 Nil)) (lfappend y lf5).
Lemma candidate_128: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend y lf5).
Lemma candidate_129: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend y (rotate (len lf5) lf5)).
Lemma candidate_130: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend (lfappend y Nil) lf5).
Lemma candidate_131: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend (lfappend y lf5) Nil).
Lemma candidate_132: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (rotate (len lf5) (lfappend lf5 y)).
Lemma candidate_133: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend y (lfappend lf5 Nil)).
Lemma candidate_134: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend y lf5).
Lemma candidate_135: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend lf2 (rotate (len x) x)).
Lemma candidate_136: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend (lfappend lf2 Nil) x).
Lemma candidate_137: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend (lfappend lf2 x) Nil).
Lemma candidate_138: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (rotate (len x) (lfappend x lf2)).
Lemma candidate_139: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend lf2 (lfappend x Nil)).
Lemma candidate_140: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend lf2 x).
Lemma candidate_141: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend (lfappend y Nil) (lfappend lf4 x)).
Lemma candidate_142: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend (lfappend y lf4) (lfappend x Nil)).
Lemma candidate_143: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend y (rotate (len x) (lfappend x lf4))).
Lemma candidate_144: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend y (lfappend lf4 (lfappend x Nil))).
Lemma candidate_145: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x) (lfappend (lfappend y lf4) x).
Lemma candidate_146: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x) (lfappend y (lfappend lf4 x)).
Lemma candidate_147: forall (y : lst) (lf5 : lst), @eq lst (lfappend y (rotate (len lf5) lf5)) (lfappend y lf5).
Lemma candidate_148: forall (y : lst) (lf5 : lst), @eq lst (lfappend (lfappend y Nil) lf5) (lfappend y lf5).
Lemma candidate_149: forall (y : lst) (lf5 : lst), @eq lst (lfappend (lfappend y lf5) Nil) (lfappend y lf5).
Lemma candidate_150: forall (y : lst) (lf5 : lst), @eq lst (rotate (len lf5) (lfappend lf5 y)) (lfappend y lf5).
Lemma candidate_151: forall (y : lst) (lf5 : lst), @eq lst (lfappend y (lfappend lf5 Nil)) (lfappend y lf5).
Lemma candidate_152: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend y lf5).
Lemma candidate_153: forall (y : lst) (lf4 : lst), @eq lst (lfappend y lf4) (lfappend (lfappend y Nil) lf4).
Lemma candidate_154: forall (y : lst) (lf4 : lst), @eq lst (lfappend y lf4) (lfappend (lfappend y lf4) Nil).
Lemma candidate_155: forall (y : lst) (lf4 : lst), @eq lst (lfappend y lf4) (rotate (len lf4) (lfappend lf4 y)).
Lemma candidate_156: forall (y : lst) (lf4 : lst), @eq lst (lfappend y lf4)   (match lfappend lf4 y with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_157: forall (y : lst) (lf4 : lst), @eq lst (lfappend y lf4) (lfappend y (lfappend lf4 Nil)).
Lemma candidate_158: forall (y : lst) (lf4 : lst), @eq lst (lfappend y lf4) (lfappend y lf4).
Lemma candidate_159: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend y (rotate (len lf5) lf5)).
Lemma candidate_160: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend (lfappend y Nil) lf5).
Lemma candidate_161: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend (lfappend y lf5) Nil).
Lemma candidate_162: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (rotate (len lf5) (lfappend lf5 y)).
Lemma candidate_163: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend y (lfappend lf5 Nil)).
Lemma candidate_164: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend y lf5).
Lemma candidate_165: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend (lfappend y Nil) (lfappend lf4 x)).
Lemma candidate_166: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend (lfappend y lf4) (lfappend x Nil)).
Lemma candidate_167: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend y (rotate (len x) (lfappend x lf4))).
Lemma candidate_168: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend y (lfappend lf4 (lfappend x Nil))).
Lemma candidate_169: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x) (lfappend (lfappend y lf4) x).
Lemma candidate_170: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x) (lfappend y (lfappend lf4 x)).
Lemma candidate_171: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend lf2 (rotate (len x) x)).
Lemma candidate_172: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend (lfappend lf2 Nil) x).
Lemma candidate_173: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend (lfappend lf2 x) Nil).
Lemma candidate_174: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (rotate (len x) (lfappend x lf2)).
Lemma candidate_175: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend lf2 (lfappend x Nil)).
Lemma candidate_176: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend lf2 x).
Lemma candidate_177: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_178: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rotate n Nil) (lfappend y (Cons n x)))   (lfappend y (Cons n x)).
Lemma candidate_179: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n (lfappend x Nil)))   (lfappend y (Cons n x)).
Lemma candidate_180: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_181: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (lfappend x Nil))) (lfappend y (Cons n x)).
Lemma candidate_182: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_183: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))).
Lemma candidate_184: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (rotate n Nil) (lfappend y (Cons n x))).
Lemma candidate_185: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (lfappend y Nil) (Cons n (lfappend x Nil))).
Lemma candidate_186: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_187: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_188: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_189: forall (n : natural) (x : lst), @eq lst (Cons n x) (rotate (len x) (lfappend x (Cons n Nil))).
Lemma candidate_190: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) (lfappend x Nil))).
Lemma candidate_191: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_192: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) x)).
Lemma candidate_193: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_194: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_195: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend lf2 (rotate (len x) x)).
Lemma candidate_196: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend (lfappend lf2 Nil) x).
Lemma candidate_197: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend (lfappend lf2 x) Nil).
Lemma candidate_198: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (rotate (len x) (lfappend x lf2)).
Lemma candidate_199: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend lf2 (lfappend x Nil)).
Lemma candidate_200: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend lf2 x).
Lemma candidate_201: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (lfappend y Nil) (Cons n Nil)) x)   (lfappend y (Cons n x)).
Lemma candidate_202: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (rotate (len y) (Cons n Nil))) x)   (lfappend y (Cons n x)).
Lemma candidate_203: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (rotate (len x) (Cons n Nil))) x)   (lfappend y (Cons n x)).
Lemma candidate_204: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n (rotate n Nil))) x)   (lfappend y (Cons n x)).
Lemma candidate_205: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (rotate n (Cons n Nil))) x)   (lfappend y (Cons n x)).
Lemma candidate_206: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x) (lfappend y (Cons n x)).
Lemma candidate_207: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend (lfappend y Nil) (lfappend lf4 x)).
Lemma candidate_208: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend (lfappend y lf4) (lfappend x Nil)).
Lemma candidate_209: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend y (rotate (len x) (lfappend x lf4))).
Lemma candidate_210: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend y (lfappend lf4 (lfappend x Nil))).
Lemma candidate_211: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x) (lfappend (lfappend y lf4) x).
Lemma candidate_212: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x) (lfappend y (lfappend lf4 x)).
Lemma candidate_213: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend y (lfappend lf4 (rotate (len x) x))).
Lemma candidate_214: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend y (lfappend (lfappend lf4 Nil) x)).
Lemma candidate_215: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend y (lfappend (lfappend lf4 x) Nil)).
Lemma candidate_216: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend y (rotate (len x) (lfappend x lf4))).
Lemma candidate_217: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend y (lfappend lf4 (lfappend x Nil))).
Lemma candidate_218: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x) (lfappend y (lfappend lf4 x)).
Lemma candidate_219: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_220: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rotate n Nil) (lfappend y (Cons n x)))   (lfappend y (Cons n x)).
Lemma candidate_221: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n (lfappend x Nil)))   (lfappend y (Cons n x)).
Lemma candidate_222: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_223: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (lfappend x Nil))) (lfappend y (Cons n x)).
Lemma candidate_224: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_225: forall (y : lst) (lf4 : lst), @eq lst (lfappend y lf4) (lfappend (lfappend y Nil) lf4).
Lemma candidate_226: forall (y : lst) (lf4 : lst), @eq lst (lfappend y lf4) (lfappend (lfappend y lf4) Nil).
Lemma candidate_227: forall (y : lst) (lf4 : lst), @eq lst (lfappend y lf4) (rotate (len lf4) (lfappend lf4 y)).
Lemma candidate_228: forall (y : lst) (lf4 : lst), @eq lst (lfappend y lf4)   (match lfappend lf4 y with | Cons y x => lfappend x (Cons y Nil) | Nil => Nil end).
Lemma candidate_229: forall (y : lst) (lf4 : lst), @eq lst (lfappend y lf4) (lfappend y (lfappend lf4 Nil)).
Lemma candidate_230: forall (y : lst) (lf4 : lst), @eq lst (lfappend y lf4) (lfappend y lf4).
Lemma candidate_231: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))).
Lemma candidate_232: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (rotate n Nil) (lfappend y (Cons n x))).
Lemma candidate_233: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (lfappend y Nil) (Cons n (lfappend x Nil))).
Lemma candidate_234: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_235: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_236: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_237: forall (n : natural) (x : lst), @eq lst (Cons n x) (rotate (len x) (lfappend x (Cons n Nil))).
Lemma candidate_238: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) (lfappend x Nil))).
Lemma candidate_239: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_240: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) x)).
Lemma candidate_241: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_242: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_243: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend (lfappend y Nil) (lfappend lf4 x)).
Lemma candidate_244: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend (lfappend y lf4) (lfappend x Nil)).
Lemma candidate_245: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend y (rotate (len x) (lfappend x lf4))).
Lemma candidate_246: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend y (lfappend lf4 (lfappend x Nil))).
Lemma candidate_247: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x) (lfappend (lfappend y lf4) x).
Lemma candidate_248: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x) (lfappend y (lfappend lf4 x)).
Lemma candidate_249: forall (y : lst) (lf5 : lst), @eq lst (lfappend y (rotate (len lf5) lf5)) (lfappend y lf5).
Lemma candidate_250: forall (y : lst) (lf5 : lst), @eq lst (lfappend (lfappend y Nil) lf5) (lfappend y lf5).
Lemma candidate_251: forall (y : lst) (lf5 : lst), @eq lst (lfappend (lfappend y lf5) Nil) (lfappend y lf5).
Lemma candidate_252: forall (y : lst) (lf5 : lst), @eq lst (rotate (len lf5) (lfappend lf5 y)) (lfappend y lf5).
Lemma candidate_253: forall (y : lst) (lf5 : lst), @eq lst (lfappend y (lfappend lf5 Nil)) (lfappend y lf5).
Lemma candidate_254: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend y lf5).
Lemma candidate_255: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend y (Cons n (lfappend lf6 x))).
Lemma candidate_256: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend lf6 (lfappend y (Cons n x))).
Lemma candidate_257: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend y (lfappend lf6 (Cons n x))).
Lemma candidate_258: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend y (Cons n (lfappend x lf6))).
Lemma candidate_259: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_260: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x) (lfappend y (Cons n x)).
Lemma candidate_261: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend y (Cons n (lfappend lf6 x))).
Lemma candidate_262: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend lf6 (lfappend y (Cons n x))).
Lemma candidate_263: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend y (lfappend lf6 (Cons n x))).
Lemma candidate_264: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend y (Cons n (lfappend x lf6))).
Lemma candidate_265: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_266: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x) (lfappend y (Cons n x)).
Lemma candidate_267: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (Cons n (lfappend lf6 Nil)).
Lemma candidate_268: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (Cons n (rotate n Nil)).
Lemma candidate_269: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (lfappend lf6 (Cons n Nil)).
Lemma candidate_270: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (rotate n (Cons n Nil)).
Lemma candidate_271: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (Cons n lf6).
Lemma candidate_272: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (Cons n Nil).
Lemma candidate_273: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend y (rotate (len lf5) lf5)).
Lemma candidate_274: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend (lfappend y Nil) lf5).
Lemma candidate_275: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend (lfappend y lf5) Nil).
Lemma candidate_276: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (rotate (len lf5) (lfappend lf5 y)).
Lemma candidate_277: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend y (lfappend lf5 Nil)).
Lemma candidate_278: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend y lf5).
Lemma candidate_279: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend y (Cons n lf6)) (lfappend y (Cons n (rotate n Nil))).
Lemma candidate_280: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend y (Cons n lf6)) (lfappend lf6 (lfappend y (Cons n Nil))).
Lemma candidate_281: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend y (Cons n lf6)) (lfappend y (lfappend lf6 (Cons n Nil))).
Lemma candidate_282: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend y (Cons n lf6)) (lfappend y (rotate n (Cons n Nil))).
Lemma candidate_283: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend y (Cons n lf6)) (lfappend y (Cons n lf6)).
Lemma candidate_284: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend y (Cons n lf6)) (lfappend y (Cons n Nil)).
Lemma candidate_285: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x)   (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))).
Lemma candidate_286: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x)   (lfappend (rotate n Nil) (lfappend y (Cons n x))).
Lemma candidate_287: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x)   (lfappend (lfappend y Nil) (Cons n (lfappend x Nil))).
Lemma candidate_288: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x)   (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_289: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x)   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_290: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x) (lfappend y (Cons n x)).
Lemma candidate_291: forall (n : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend y (Cons n (rotate n (rotate n Nil)))) x)   (lfappend y lf5).
Lemma candidate_292: forall (n : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend y (Cons n (rotate (len y) Nil))) x)   (lfappend y lf5).
Lemma candidate_293: forall (n : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend y (Cons n (rotate (len x) Nil))) x)   (lfappend y lf5).
Lemma candidate_294: forall (n : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend y (Cons n (rotate (len lf5) Nil))) x)   (lfappend y lf5).
Lemma candidate_295: forall (n : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend y (Cons n (rotate n Nil))) x) (lfappend y lf5).
Lemma candidate_296: forall (n : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (lfappend y (Cons n (Nil))) x) (lfappend y lf5).
Lemma candidate_297: forall (y : lst) (lf5 : lst), @eq lst (lfappend y (rotate (len lf5) lf5)) (lfappend y lf5).
Lemma candidate_298: forall (y : lst) (lf5 : lst), @eq lst (lfappend (lfappend y Nil) lf5) (lfappend y lf5).
Lemma candidate_299: forall (y : lst) (lf5 : lst), @eq lst (lfappend (lfappend y lf5) Nil) (lfappend y lf5).
Lemma candidate_300: forall (y : lst) (lf5 : lst), @eq lst (rotate (len lf5) (lfappend lf5 y)) (lfappend y lf5).
Lemma candidate_301: forall (y : lst) (lf5 : lst), @eq lst (lfappend y (lfappend lf5 Nil)) (lfappend y lf5).
Lemma candidate_302: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend y lf5).
Lemma candidate_303: forall (n : natural) (y : lst), @eq lst (lfappend y (Cons n Nil))   (lfappend (lfappend y Nil) (rotate n (Cons n Nil))).
Lemma candidate_304: forall (n : natural) (y : lst), @eq lst (lfappend y (Cons n Nil)) (lfappend (lfappend y Nil) (Cons n Nil)).
Lemma candidate_305: forall (n : natural) (y : lst), @eq lst (lfappend y (Cons n Nil)) (lfappend y (rotate (len y) (Cons n Nil))).
Lemma candidate_306: forall (n : natural) (y : lst), @eq lst (lfappend y (Cons n Nil)) (lfappend y (Cons n (rotate n Nil))).
Lemma candidate_307: forall (n : natural) (y : lst), @eq lst (lfappend y (Cons n Nil)) (lfappend y (rotate n (Cons n Nil))).
Lemma candidate_308: forall (n : natural) (y : lst), @eq lst (lfappend y (Cons n Nil)) (lfappend y (Cons n Nil)).
Lemma candidate_309: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend y (rotate (len lf5) lf5)).
Lemma candidate_310: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend (lfappend y Nil) lf5).
Lemma candidate_311: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend (lfappend y lf5) Nil).
Lemma candidate_312: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (rotate (len lf5) (lfappend lf5 y)).
Lemma candidate_313: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend y (lfappend lf5 Nil)).
Lemma candidate_314: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend y lf5).
Lemma candidate_315: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n (rotate n Nil))).
Lemma candidate_316: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n (rotate n Nil))).
Lemma candidate_317: forall (n : natural), @eq lst (Cons n Nil) (rotate n (rotate n (Cons n Nil))).
Lemma candidate_318: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n Nil)).
Lemma candidate_319: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n Nil)).
Lemma candidate_320: forall (n : natural), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_321: @eq lst Nil (Nil).
Lemma candidate_322: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x)   (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))).
Lemma candidate_323: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x)   (lfappend (rotate n Nil) (lfappend y (Cons n x))).
Lemma candidate_324: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x)   (lfappend (lfappend y Nil) (Cons n (lfappend x Nil))).
Lemma candidate_325: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x)   (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_326: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x)   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_327: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x) (lfappend y (Cons n x)).
Lemma candidate_328: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_329: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rotate n Nil) (lfappend y (Cons n x)))   (lfappend y (Cons n x)).
Lemma candidate_330: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n (lfappend x Nil)))   (lfappend y (Cons n x)).
Lemma candidate_331: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_332: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (lfappend x Nil))) (lfappend y (Cons n x)).
Lemma candidate_333: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_334: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend y (Cons n (lfappend lf6 x))).
Lemma candidate_335: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend lf6 (lfappend y (Cons n x))).
Lemma candidate_336: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend y (lfappend lf6 (Cons n x))).
Lemma candidate_337: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend y (Cons n (lfappend x lf6))).
Lemma candidate_338: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_339: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x) (lfappend y (Cons n x)).
Lemma candidate_340: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n (rotate (len x) Nil))) x)   (lfappend y (Cons n x)).
Lemma candidate_341: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (rotate (len y) (Cons n Nil))) x)   (lfappend y (Cons n x)).
Lemma candidate_342: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (rotate (len x) (Cons n Nil))) x)   (lfappend y (Cons n x)).
Lemma candidate_343: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n (rotate n Nil))) x)   (lfappend y (Cons n x)).
Lemma candidate_344: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (rotate n (Cons n Nil))) x)   (lfappend y (Cons n x)).
Lemma candidate_345: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x) (lfappend y (Cons n x)).
Lemma candidate_346: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend y (rotate (len lf6) (Cons n x))).
Lemma candidate_347: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend y (Cons n (lfappend lf6 x))).
Lemma candidate_348: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend y (lfappend lf6 (Cons n x))).
Lemma candidate_349: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend y (Cons n (lfappend x lf6))).
Lemma candidate_350: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_351: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x) (lfappend y (Cons n x)).
Lemma candidate_352: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (lfappend y Nil) (Cons n Nil)) x)   (lfappend y (Cons n x)).
Lemma candidate_353: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (rotate (len y) (Cons n Nil))) x)   (lfappend y (Cons n x)).
Lemma candidate_354: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (rotate (len x) (Cons n Nil))) x)   (lfappend y (Cons n x)).
Lemma candidate_355: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n (rotate n Nil))) x)   (lfappend y (Cons n x)).
Lemma candidate_356: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (rotate n (Cons n Nil))) x)   (lfappend y (Cons n x)).
Lemma candidate_357: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x) (lfappend y (Cons n x)).
Lemma candidate_358: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend y (Cons n (lfappend lf6 x))).
Lemma candidate_359: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend lf6 (lfappend y (Cons n x))).
Lemma candidate_360: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend y (lfappend lf6 (Cons n x))).
Lemma candidate_361: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend y (Cons n (lfappend x lf6))).
Lemma candidate_362: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_363: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x) (lfappend y (Cons n x)).
Lemma candidate_364: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))).
Lemma candidate_365: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (rotate n Nil) (lfappend y (Cons n x))).
Lemma candidate_366: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (lfappend y Nil) (Cons n (lfappend x Nil))).
Lemma candidate_367: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_368: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_369: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_370: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (Cons n (lfappend lf6 Nil)).
Lemma candidate_371: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (Cons n (rotate n Nil)).
Lemma candidate_372: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (lfappend lf6 (Cons n Nil)).
Lemma candidate_373: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (rotate n (Cons n Nil)).
Lemma candidate_374: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (Cons n lf6).
Lemma candidate_375: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (Cons n Nil).
Lemma candidate_376: forall (n : natural) (x : lst), @eq lst (Cons n x) (rotate (len x) (lfappend x (Cons n Nil))).
Lemma candidate_377: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) (lfappend x Nil))).
Lemma candidate_378: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_379: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) x)).
Lemma candidate_380: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_381: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_382: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend y (Cons n lf6)) (lfappend y (Cons n (rotate n Nil))).
Lemma candidate_383: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend y (Cons n lf6)) (lfappend lf6 (lfappend y (Cons n Nil))).
Lemma candidate_384: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend y (Cons n lf6)) (lfappend y (lfappend lf6 (Cons n Nil))).
Lemma candidate_385: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend y (Cons n lf6)) (lfappend y (rotate n (Cons n Nil))).
Lemma candidate_386: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend y (Cons n lf6)) (lfappend y (Cons n lf6)).
Lemma candidate_387: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend y (Cons n lf6)) (lfappend y (Cons n Nil)).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 2298 seconds
Duplicates removed: 271
Filtered by Quickchick: 28
Filtered by script: 27
Remaining: 61

Lemmas: 
Lemma candidate_90: forall (lf1 : lst), @eq lst lf1 (rotate (len lf1) lf1).
Lemma candidate_5: forall (lf3 : lst), @eq lst (rotate (len lf3) lf3) lf3.
Lemma candidate_78: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n Nil)).
Lemma candidate_77: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n Nil)).
Lemma candidate_88: forall (lf1 : lst), @eq lst lf1 (lfappend (lfappend lf1 Nil) Nil).
Lemma candidate_3: forall (lf3 : lst), @eq lst (lfappend (lfappend lf3 Nil) Nil) lf3.
Lemma candidate_114: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) x)).
Lemma candidate_87: forall (lf1 : lst), @eq lst lf1 (lfappend lf1 (rotate (len lf1) Nil)).
Lemma candidate_2: forall (lf3 : lst), @eq lst (lfappend lf3 (rotate (len lf3) Nil)) lf3.
Lemma candidate_113: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_76: forall (n : natural), @eq lst (Cons n Nil) (rotate n (rotate n (Cons n Nil))).
Lemma candidate_75: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n (rotate n Nil))).
Lemma candidate_74: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n (rotate n Nil))).
Lemma candidate_127: forall (y : lst) (lf5 : lst), @eq lst (lfappend y (lfappend lf5 Nil)) (lfappend y lf5).
Lemma candidate_124: forall (y : lst) (lf5 : lst), @eq lst (lfappend (lfappend y Nil) lf5) (lfappend y lf5).
Lemma candidate_97: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend y (lfappend lf5 Nil)).
Lemma candidate_95: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend (lfappend y lf5) Nil).
Lemma candidate_94: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend (lfappend y Nil) lf5).
Lemma candidate_24: forall (y : lst) (lf4 : lst), @eq lst (lfappend y lf4) (lfappend y (lfappend lf4 Nil)).
Lemma candidate_21: forall (y : lst) (lf4 : lst), @eq lst (lfappend y lf4) (lfappend (lfappend y lf4) Nil).
Lemma candidate_20: forall (y : lst) (lf4 : lst), @eq lst (lfappend y lf4) (lfappend (lfappend y Nil) lf4).
Lemma candidate_12: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend lf2 (lfappend x Nil)).
Lemma candidate_10: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend (lfappend lf2 x) Nil).
Lemma candidate_9: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend (lfappend lf2 Nil) x).
Lemma candidate_8: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend lf2 (rotate (len x) x)).
Lemma candidate_123: forall (y : lst) (lf5 : lst), @eq lst (lfappend y (rotate (len lf5) lf5)) (lfappend y lf5).
Lemma candidate_93: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend y (rotate (len lf5) lf5)).
Lemma candidate_31: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x) (lfappend y (lfappend lf4 x)).
Lemma candidate_181: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (lfappend x Nil))) (lfappend y (Cons n x)).
Lemma candidate_180: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_109: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_108: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_72: forall (n : natural) (y : lst), @eq lst (lfappend y (Cons n Nil)) (lfappend y (rotate n (Cons n Nil))).
Lemma candidate_71: forall (n : natural) (y : lst), @eq lst (lfappend y (Cons n Nil)) (lfappend y (Cons n (rotate n Nil))).
Lemma candidate_69: forall (n : natural) (y : lst), @eq lst (lfappend y (Cons n Nil)) (lfappend (lfappend y Nil) (Cons n Nil)).
Lemma candidate_70: forall (n : natural) (y : lst), @eq lst (lfappend y (Cons n Nil)) (lfappend y (rotate (len y) (Cons n Nil))).
Lemma candidate_205: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (rotate n (Cons n Nil))) x)   (lfappend y (Cons n x)).
Lemma candidate_204: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n (rotate n Nil))) x)   (lfappend y (Cons n x)).
Lemma candidate_178: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rotate n Nil) (lfappend y (Cons n x)))   (lfappend y (Cons n x)).
Lemma candidate_106: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (rotate n Nil) (lfappend y (Cons n x))).
Lemma candidate_215: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend y (lfappend (lfappend lf4 x) Nil)).
Lemma candidate_214: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend y (lfappend (lfappend lf4 Nil) x)).
Lemma candidate_29: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend y (lfappend lf4 (lfappend x Nil))).
Lemma candidate_27: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend (lfappend y lf4) (lfappend x Nil)).
Lemma candidate_26: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend (lfappend y Nil) (lfappend lf4 x)).
Lemma candidate_213: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend y (lfappend lf4 (rotate (len x) x))).
Lemma candidate_28: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x)   (lfappend y (rotate (len x) (lfappend x lf4))).
Lemma candidate_201: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (lfappend y Nil) (Cons n Nil)) x)   (lfappend y (Cons n x)).
Lemma candidate_179: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y Nil) (Cons n (lfappend x Nil)))   (lfappend y (Cons n x)).
Lemma candidate_107: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x))   (lfappend (lfappend y Nil) (Cons n (lfappend x Nil))).
Lemma candidate_85: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x)   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_84: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x)   (lfappend (lfappend y Nil) (Cons n x)).
Lemma candidate_68: forall (n : natural) (y : lst), @eq lst (lfappend y (Cons n Nil))   (lfappend (lfappend y Nil) (rotate n (Cons n Nil))).
Lemma candidate_38: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend y (Cons n (lfappend lf6 x))).
Lemma candidate_340: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n (rotate (len x) Nil))) x)   (lfappend y (Cons n x)).
Lemma candidate_203: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (rotate (len x) (Cons n Nil))) x)   (lfappend y (Cons n x)).
Lemma candidate_202: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (rotate (len y) (Cons n Nil))) x)   (lfappend y (Cons n x)).
Lemma candidate_177: forall (n : natural) (y : lst) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x y) (Cons n Nil)))   (lfappend y (Cons n x)).
Lemma candidate_82: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x)   (lfappend (rotate n Nil) (lfappend y (Cons n x))).
Lemma candidate_83: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x)   (lfappend (lfappend y Nil) (Cons n (lfappend x Nil))).
Lemma candidate_81: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x)   (rotate (len x) (lfappend (lfappend x y) (Cons n Nil))).