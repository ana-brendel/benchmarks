File Information
- File name: goal32
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal32_rotate_len_59_rotate_len_append
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal32_rotate_len_59_rotate_len_append
- Namespace: adtind
- Proof name: rotate_len
- Theorem: Theorem rotate_len: forall x0 : lst, @eq lst (rotate (len x0) x0) x0.
- Declarations: 
From lfind Require Import LFind.

Proof Context
* Goal State: @eq lst (rotate (len x) (lfappend x (Cons n Nil))) (Cons n x)

* Hypothesis:
IHx : @eq lst (rotate (len x) x) x
x : lst
n : natural

* Types:
Set
natural
Prop
lst

* Polymorphic Types:


* Variables:
x : lst
n : natural

* Terms:
@eq lst (rotate (len x) x) x : Prop
lfappend x (Cons n Nil) : lst
@eq lst (rotate (len x) (lfappend x (Cons n Nil))) (Cons n x) : Prop
x : lst
len x : natural
rotate (len x) x : lst
Cons n x : lst
rotate (len x) (lfappend x (Cons n Nil)) : lst
lst : Set
Cons n Nil : lst
natural : Set
n : natural
Nil : lst

* Functions:
len  : forall _ : lst, natural
lfappend  : forall (_ : lst) (_ : lst), lst
rotate  : forall (_ : natural) (_ : lst), lst
Cons  : forall (_ : natural) (_ : lst), lst
@eq  : forall (A : Type) (_ : A) (_ : A), Prop

<---GENERALIZATION--->
Time elapsed: 2 seconds
Generalized Variables:
lf3 : lst = Cons n Nil
lf1 : lst = rotate (len x) (lfappend x (Cons n Nil))
lf4 : lst = Cons n x
lf5 : natural = len x
lf2 : lst = lfappend x (Cons n Nil)
lf6 : lst = Nil

Generalizations:
Lemma conj1: forall (lf4 : lst) (lf1 : lst), @eq lst lf1 lf4.
Lemma conj9: forall (x : lst) (lf1 : lst) (n : natural), @eq lst lf1 (Cons n x).
Lemma conj17: forall (lf2 : lst) (lf5 : natural) (lf4 : lst), @eq lst (rotate lf5 lf2) lf4.
Lemma conj19: forall (lf5 : natural) (x : lst) (lf4 : lst) (lf3 : lst), @eq lst (rotate lf5 (lfappend x lf3)) lf4.
Lemma conj21: forall (lf2 : lst) (x : lst) (lf4 : lst), @eq lst (rotate (len x) lf2) lf4.
Lemma conj23: forall (x : lst) (lf4 : lst) (lf3 : lst), @eq lst (rotate (len x) (lfappend x lf3)) lf4.
Lemma conj25: forall (lf2 : lst) (lf5 : natural) (x : lst) (n : natural), @eq lst (rotate lf5 lf2) (Cons n x).
Lemma conj27: forall (lf5 : natural) (x : lst) (n : natural) (lf3 : lst), @eq lst (rotate lf5 (lfappend x lf3)) (Cons n x).
Lemma conj29: forall (lf2 : lst) (x : lst) (n : natural), @eq lst (rotate (len x) lf2) (Cons n x).
Lemma conj31: forall (x : lst) (n : natural) (lf3 : lst), @eq lst (rotate (len x) (lfappend x lf3)) (Cons n x).
Lemma conj51: forall (lf6 : lst) (lf5 : natural) (x : lst) (lf4 : lst) (n : natural), @eq lst (rotate lf5 (lfappend x (Cons n lf6))) lf4.
Lemma conj52: forall (lf5 : natural) (x : lst) (lf4 : lst) (n : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil))) lf4.
Lemma conj55: forall (lf6 : lst) (x : lst) (lf4 : lst) (n : natural), @eq lst (rotate (len x) (lfappend x (Cons n lf6))) lf4.
Lemma conj56: forall (x : lst) (lf4 : lst) (n : natural), @eq lst (rotate (len x) (lfappend x (Cons n Nil))) lf4.
Lemma conj59: forall (lf6 : lst) (lf5 : natural) (x : lst) (n : natural), @eq lst (rotate lf5 (lfappend x (Cons n lf6))) (Cons n x).
Lemma conj60: forall (lf5 : natural) (x : lst) (n : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil))) (Cons n x).
Lemma conj63: forall (lf6 : lst) (x : lst) (n : natural), @eq lst (rotate (len x) (lfappend x (Cons n lf6))) (Cons n x).
Lemma conj64: forall (x : lst) (n : natural), @eq lst (rotate (len x) (lfappend x (Cons n Nil))) (Cons n x).


<---VALIDITY CHECKS--->
Time elapsed: 112 seconds
Valid:
Lemma conj64: forall (x : lst) (n : natural), @eq lst (rotate (len x) (lfappend x (Cons n Nil))) (Cons n x).

Invalid:
Lemma conj63: forall (lf6 : lst) (x : lst) (n : natural), @eq lst (rotate (len x) (lfappend x (Cons n lf6))) (Cons n x).
Lemma conj60: forall (lf5 : natural) (x : lst) (n : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil))) (Cons n x).
Lemma conj59: forall (lf6 : lst) (lf5 : natural) (x : lst) (n : natural), @eq lst (rotate lf5 (lfappend x (Cons n lf6))) (Cons n x).
Lemma conj56: forall (x : lst) (lf4 : lst) (n : natural), @eq lst (rotate (len x) (lfappend x (Cons n Nil))) lf4.
Lemma conj55: forall (lf6 : lst) (x : lst) (lf4 : lst) (n : natural), @eq lst (rotate (len x) (lfappend x (Cons n lf6))) lf4.
Lemma conj52: forall (lf5 : natural) (x : lst) (lf4 : lst) (n : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil))) lf4.
Lemma conj51: forall (lf6 : lst) (lf5 : natural) (x : lst) (lf4 : lst) (n : natural), @eq lst (rotate lf5 (lfappend x (Cons n lf6))) lf4.
Lemma conj31: forall (x : lst) (n : natural) (lf3 : lst), @eq lst (rotate (len x) (lfappend x lf3)) (Cons n x).
Lemma conj29: forall (lf2 : lst) (x : lst) (n : natural), @eq lst (rotate (len x) lf2) (Cons n x).
Lemma conj27: forall (lf5 : natural) (x : lst) (n : natural) (lf3 : lst), @eq lst (rotate lf5 (lfappend x lf3)) (Cons n x).
Lemma conj25: forall (lf2 : lst) (lf5 : natural) (x : lst) (n : natural), @eq lst (rotate lf5 lf2) (Cons n x).
Lemma conj23: forall (x : lst) (lf4 : lst) (lf3 : lst), @eq lst (rotate (len x) (lfappend x lf3)) lf4.
Lemma conj21: forall (lf2 : lst) (x : lst) (lf4 : lst), @eq lst (rotate (len x) lf2) lf4.
Lemma conj19: forall (lf5 : natural) (x : lst) (lf4 : lst) (lf3 : lst), @eq lst (rotate lf5 (lfappend x lf3)) lf4.
Lemma conj17: forall (lf2 : lst) (lf5 : natural) (lf4 : lst), @eq lst (rotate lf5 lf2) lf4.
Lemma conj9: forall (x : lst) (lf1 : lst) (n : natural), @eq lst lf1 (Cons n x).
Lemma conj1: forall (lf4 : lst) (lf1 : lst), @eq lst lf1 lf4.

<---ADD IMPLICATIONS--->
Time elapsed: 146 seconds
Generalizations:
Lemma conj63: forall (lf6 : lst) (x : lst) (n : natural), @eq lst (rotate (len x) (lfappend x (Cons n lf6))) (Cons n x).
Lemma conj60: forall (lf5 : natural) (x : lst) (n : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil))) (Cons n x).
Lemma conj59: forall (lf6 : lst) (lf5 : natural) (x : lst) (n : natural), @eq lst (rotate lf5 (lfappend x (Cons n lf6))) (Cons n x).
Lemma conj56: forall (x : lst) (lf4 : lst) (n : natural), @eq lst (rotate (len x) (lfappend x (Cons n Nil))) lf4.
Lemma conj55: forall (lf6 : lst) (x : lst) (lf4 : lst) (n : natural), @eq lst (rotate (len x) (lfappend x (Cons n lf6))) lf4.
Lemma conj52: forall (lf5 : natural) (x : lst) (lf4 : lst) (n : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil))) lf4.
Lemma conj51: forall (lf6 : lst) (lf5 : natural) (x : lst) (lf4 : lst) (n : natural), @eq lst (rotate lf5 (lfappend x (Cons n lf6))) lf4.
Lemma conj31: forall (x : lst) (n : natural) (lf3 : lst), @eq lst (rotate (len x) (lfappend x lf3)) (Cons n x).
Lemma conj29: forall (lf2 : lst) (x : lst) (n : natural), @eq lst (rotate (len x) lf2) (Cons n x).
Lemma conj27: forall (lf5 : natural) (x : lst) (n : natural) (lf3 : lst), @eq lst (rotate lf5 (lfappend x lf3)) (Cons n x).
Lemma conj25: forall (lf2 : lst) (lf5 : natural) (x : lst) (n : natural), @eq lst (rotate lf5 lf2) (Cons n x).
Lemma conj23: forall (x : lst) (lf4 : lst) (lf3 : lst), @eq lst (rotate (len x) (lfappend x lf3)) lf4.
Lemma conj21: forall (lf2 : lst) (x : lst) (lf4 : lst), @eq lst (rotate (len x) lf2) lf4.
Lemma conj19: forall (lf5 : natural) (x : lst) (lf4 : lst) (lf3 : lst), @eq lst (rotate lf5 (lfappend x lf3)) lf4.
Lemma conj17: forall (lf2 : lst) (lf5 : natural) (lf4 : lst), @eq lst (rotate lf5 lf2) lf4.
Lemma conj9: forall (x : lst) (lf1 : lst) (n : natural), @eq lst lf1 (Cons n x).
Lemma conj1: forall (lf4 : lst) (lf1 : lst), @eq lst lf1 lf4.


<---VALIDITY CHECKS--->
Time elapsed: 186 seconds
Valid:

Invalid:
Lemma conj1: forall (lf4 : lst) (lf1 : lst), @eq lst lf1 lf4.
Lemma conj9: forall (x : lst) (lf1 : lst) (n : natural), @eq lst lf1 (Cons n x).
Lemma conj17: forall (lf2 : lst) (lf5 : natural) (lf4 : lst), @eq lst (rotate lf5 lf2) lf4.
Lemma conj19: forall (lf5 : natural) (x : lst) (lf4 : lst) (lf3 : lst), @eq lst (rotate lf5 (lfappend x lf3)) lf4.
Lemma conj21: forall (lf2 : lst) (x : lst) (lf4 : lst), @eq lst (rotate (len x) lf2) lf4.
Lemma conj23: forall (x : lst) (lf4 : lst) (lf3 : lst), @eq lst (rotate (len x) (lfappend x lf3)) lf4.
Lemma conj25: forall (lf2 : lst) (lf5 : natural) (x : lst) (n : natural), @eq lst (rotate lf5 lf2) (Cons n x).
Lemma conj27: forall (lf5 : natural) (x : lst) (n : natural) (lf3 : lst), @eq lst (rotate lf5 (lfappend x lf3)) (Cons n x).
Lemma conj29: forall (lf2 : lst) (x : lst) (n : natural), @eq lst (rotate (len x) lf2) (Cons n x).
Lemma conj31: forall (x : lst) (n : natural) (lf3 : lst), @eq lst (rotate (len x) (lfappend x lf3)) (Cons n x).
Lemma conj51: forall (lf6 : lst) (lf5 : natural) (x : lst) (lf4 : lst) (n : natural), @eq lst (rotate lf5 (lfappend x (Cons n lf6))) lf4.
Lemma conj52: forall (lf5 : natural) (x : lst) (lf4 : lst) (n : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil))) lf4.
Lemma conj55: forall (lf6 : lst) (x : lst) (lf4 : lst) (n : natural), @eq lst (rotate (len x) (lfappend x (Cons n lf6))) lf4.
Lemma conj56: forall (x : lst) (lf4 : lst) (n : natural), @eq lst (rotate (len x) (lfappend x (Cons n Nil))) lf4.
Lemma conj59: forall (lf6 : lst) (lf5 : natural) (x : lst) (n : natural), @eq lst (rotate lf5 (lfappend x (Cons n lf6))) (Cons n x).
Lemma conj60: forall (lf5 : natural) (x : lst) (n : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil))) (Cons n x).
Lemma conj63: forall (lf6 : lst) (x : lst) (n : natural), @eq lst (rotate (len x) (lfappend x (Cons n lf6))) (Cons n x).


<---CREATE SKETCHES--->
Time elapsed: 187 seconds
Sketches:
Sketch conj9_sketch0 : @eq lst lf1 (##hole##)
Sketch conj9_term_sketch0 : @eq lst (Cons n x) (##hole##)
Sketch conj17_sketch0 : @eq lst (##hole##) lf4
Sketch conj17_term_sketch0 : @eq lst (rotate lf5 lf2) (##hole##)
Sketch conj19_sketch0 : @eq lst (rotate lf5 (##hole##)) lf4
Sketch conj19_sketch1 : @eq lst (##hole##) lf4
Sketch conj19_term_sketch0 : @eq lst (lfappend x lf3) (##hole##)
Sketch conj19_term_sketch1 : @eq lst (rotate lf5 (lfappend x lf3)) (##hole##)
Sketch conj21_sketch0 : @eq lst (rotate (##hole##) lf2) lf4
Sketch conj21_sketch1 : @eq lst (##hole##) lf4
Sketch conj21_term_sketch0 : @eq natural (len x) (##hole##)
Sketch conj21_term_sketch1 : @eq lst (rotate (len x) lf2) (##hole##)
Sketch conj23_sketch0 : @eq lst (rotate (##hole##) (lfappend x lf3)) lf4
Sketch conj23_sketch1 : @eq lst (rotate (len x) (##hole##)) lf4
Sketch conj23_sketch2 : @eq lst (##hole##) lf4
Sketch conj23_term_sketch0 : @eq natural (len x) (##hole##)
Sketch conj23_term_sketch1 : @eq lst (lfappend x lf3) (##hole##)
Sketch conj23_term_sketch2 : @eq lst (rotate (len x) (lfappend x lf3)) (##hole##)
Sketch conj25_sketch0 : @eq lst (##hole##) (Cons n x)
Sketch conj25_sketch1 : @eq lst (rotate lf5 lf2) (##hole##)
Sketch conj25_term_sketch0 : @eq lst (rotate lf5 lf2) (##hole##)
Sketch conj25_term_sketch1 : @eq lst (Cons n x) (##hole##)
Sketch conj27_sketch0 : @eq lst (rotate lf5 (lfappend x lf3)) (##hole##)
Sketch conj27_sketch1 : @eq lst (rotate lf5 (##hole##)) (Cons n x)
Sketch conj27_sketch2 : @eq lst (##hole##) (Cons n x)
Sketch conj27_term_sketch0 : @eq lst (Cons n x) (##hole##)
Sketch conj27_term_sketch1 : @eq lst (lfappend x lf3) (##hole##)
Sketch conj27_term_sketch2 : @eq lst (rotate lf5 (lfappend x lf3)) (##hole##)
Sketch conj29_sketch0 : @eq lst (rotate (##hole##) lf2) (Cons n x)
Sketch conj29_sketch1 : @eq lst (rotate (len x) lf2) (##hole##)
Sketch conj29_sketch2 : @eq lst (##hole##) (Cons n x)
Sketch conj29_term_sketch0 : @eq natural (len x) (##hole##)
Sketch conj29_term_sketch1 : @eq lst (Cons n x) (##hole##)
Sketch conj29_term_sketch2 : @eq lst (rotate (len x) lf2) (##hole##)
Sketch conj31_sketch0 : @eq lst (rotate (##hole##) (lfappend x lf3)) (Cons n x)
Sketch conj31_sketch1 : @eq lst (rotate (len x) (lfappend x lf3)) (##hole##)
Sketch conj31_sketch2 : @eq lst (rotate (len x) (##hole##)) (Cons n x)
Sketch conj31_sketch3 : @eq lst (##hole##) (Cons n x)
Sketch conj31_term_sketch0 : @eq natural (len x) (##hole##)
Sketch conj31_term_sketch1 : @eq lst (Cons n x) (##hole##)
Sketch conj31_term_sketch2 : @eq lst (lfappend x lf3) (##hole##)
Sketch conj31_term_sketch3 : @eq lst (rotate (len x) (lfappend x lf3)) (##hole##)
Sketch conj51_sketch0 : @eq lst (rotate lf5 (lfappend x (##hole##))) lf4
Sketch conj51_sketch1 : @eq lst (##hole##) lf4
Sketch conj51_sketch2 : @eq lst (rotate lf5 (##hole##)) lf4
Sketch conj51_term_sketch0 : @eq lst (Cons n lf6) (##hole##)
Sketch conj51_term_sketch1 : @eq lst (rotate lf5 (lfappend x (Cons n lf6))) (##hole##)
Sketch conj51_term_sketch2 : @eq lst (lfappend x (Cons n lf6)) (##hole##)
Sketch conj52_sketch0 : @eq lst (rotate lf5 (##hole##)) lf4
Sketch conj52_sketch1 : @eq lst (rotate lf5 (lfappend x (##hole##))) lf4
Sketch conj52_sketch2 : @eq lst (rotate lf5 (lfappend x (Cons n (##hole##)))) lf4
Sketch conj52_sketch3 : @eq lst (##hole##) lf4
Sketch conj52_term_sketch0 : @eq lst (lfappend x (Cons n Nil)) (##hole##)
Sketch conj52_term_sketch1 : @eq lst (Cons n Nil) (##hole##)
Sketch conj52_term_sketch2 : @eq lst Nil (##hole##)
Sketch conj52_term_sketch3 : @eq lst (rotate lf5 (lfappend x (Cons n Nil))) (##hole##)
Sketch conj55_sketch0 : @eq lst (rotate (len x) (lfappend x (##hole##))) lf4
Sketch conj55_sketch1 : @eq lst (rotate (##hole##) (lfappend x (Cons n lf6))) lf4
Sketch conj55_sketch2 : @eq lst (rotate (len x) (##hole##)) lf4
Sketch conj55_sketch3 : @eq lst (##hole##) lf4
Sketch conj55_term_sketch0 : @eq lst (Cons n lf6) (##hole##)
Sketch conj55_term_sketch1 : @eq natural (len x) (##hole##)
Sketch conj55_term_sketch2 : @eq lst (lfappend x (Cons n lf6)) (##hole##)
Sketch conj55_term_sketch3 : @eq lst (rotate (len x) (lfappend x (Cons n lf6))) (##hole##)
Sketch conj56_sketch0 : @eq lst (rotate (len x) (##hole##)) lf4
Sketch conj56_sketch1 : @eq lst (rotate (##hole##) (lfappend x (Cons n Nil))) lf4
Sketch conj56_sketch2 : @eq lst (##hole##) lf4
Sketch conj56_sketch3 : @eq lst (rotate (len x) (lfappend x (##hole##))) lf4
Sketch conj56_sketch4 : @eq lst (rotate (len x) (lfappend x (Cons n (##hole##)))) lf4
Sketch conj56_term_sketch0 : @eq lst (lfappend x (Cons n Nil)) (##hole##)
Sketch conj56_term_sketch1 : @eq natural (len x) (##hole##)
Sketch conj56_term_sketch2 : @eq lst (rotate (len x) (lfappend x (Cons n Nil))) (##hole##)
Sketch conj56_term_sketch3 : @eq lst (Cons n Nil) (##hole##)
Sketch conj56_term_sketch4 : @eq lst Nil (##hole##)
Sketch conj59_sketch0 : @eq lst (rotate lf5 (lfappend x (##hole##))) (Cons n x)
Sketch conj59_sketch1 : @eq lst (rotate lf5 (lfappend x (Cons n lf6))) (##hole##)
Sketch conj59_sketch2 : @eq lst (##hole##) (Cons n x)
Sketch conj59_sketch3 : @eq lst (rotate lf5 (##hole##)) (Cons n x)
Sketch conj59_term_sketch0 : @eq lst (Cons n lf6) (##hole##)
Sketch conj59_term_sketch1 : @eq lst (Cons n x) (##hole##)
Sketch conj59_term_sketch2 : @eq lst (rotate lf5 (lfappend x (Cons n lf6))) (##hole##)
Sketch conj59_term_sketch3 : @eq lst (lfappend x (Cons n lf6)) (##hole##)
Sketch conj60_sketch0 : @eq lst (rotate lf5 (##hole##)) (Cons n x)
Sketch conj60_sketch1 : @eq lst (rotate lf5 (lfappend x (Cons n Nil))) (##hole##)
Sketch conj60_sketch2 : @eq lst (rotate lf5 (lfappend x (##hole##))) (Cons n x)
Sketch conj60_sketch3 : @eq lst (rotate lf5 (lfappend x (Cons n (##hole##)))) (Cons n x)
Sketch conj60_sketch4 : @eq lst (##hole##) (Cons n x)
Sketch conj60_term_sketch0 : @eq lst (lfappend x (Cons n Nil)) (##hole##)
Sketch conj60_term_sketch1 : @eq lst (Cons n x) (##hole##)
Sketch conj60_term_sketch2 : @eq lst (Cons n Nil) (##hole##)
Sketch conj60_term_sketch3 : @eq lst Nil (##hole##)
Sketch conj60_term_sketch4 : @eq lst (rotate lf5 (lfappend x (Cons n Nil))) (##hole##)
Sketch conj63_sketch0 : @eq lst (rotate (len x) (lfappend x (##hole##))) (Cons n x)
Sketch conj63_sketch1 : @eq lst (rotate (##hole##) (lfappend x (Cons n lf6))) (Cons n x)
Sketch conj63_sketch2 : @eq lst (rotate (len x) (lfappend x (Cons n lf6))) (##hole##)
Sketch conj63_sketch3 : @eq lst (rotate (len x) (##hole##)) (Cons n x)
Sketch conj63_sketch4 : @eq lst (##hole##) (Cons n x)
Sketch conj63_term_sketch0 : @eq lst (Cons n lf6) (##hole##)
Sketch conj63_term_sketch1 : @eq natural (len x) (##hole##)
Sketch conj63_term_sketch2 : @eq lst (Cons n x) (##hole##)
Sketch conj63_term_sketch3 : @eq lst (lfappend x (Cons n lf6)) (##hole##)
Sketch conj63_term_sketch4 : @eq lst (rotate (len x) (lfappend x (Cons n lf6))) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 1301 seconds
Problems per Sketch:
Sketch conj52_sketch2 --> Problem  synth_22
Sketch conj52_sketch1 --> Problem  synth_18
Sketch conj60_term_sketch1 --> Problem  synth_2
Sketch conj59_term_sketch2 --> Problem  synth_20
Sketch conj25_sketch1 --> Problem  synth_4
Sketch conj63_sketch4 --> Problem  synth_2
Sketch conj23_sketch0 --> Problem  synth_11
Sketch conj60_term_sketch4 --> Problem  synth_25
Sketch conj59_term_sketch1 --> Problem  synth_2
Sketch conj29_term_sketch2 --> Problem  synth_10
Sketch conj59_sketch1 --> Problem  synth_20
Sketch conj60_sketch0 --> Problem  synth_14
Sketch conj56_sketch4 --> Problem  synth_30
Sketch conj17_term_sketch0 --> Problem  synth_4
Sketch conj21_term_sketch1 --> Problem  synth_10
Sketch conj63_term_sketch0 --> Problem  synth_19
Sketch conj56_term_sketch0 --> Problem  synth_17
Sketch conj31_sketch0 --> Problem  synth_16
Sketch conj31_term_sketch3 --> Problem  synth_13
Sketch conj55_sketch3 --> Problem  synth_3
Sketch conj31_term_sketch1 --> Problem  synth_2
Sketch conj60_term_sketch3 --> Problem  synth_24
Sketch conj23_sketch1 --> Problem  synth_12
Sketch conj60_term_sketch2 --> Problem  synth_23
Sketch conj60_sketch1 --> Problem  synth_25
Sketch conj55_sketch1 --> Problem  synth_27
Sketch conj9_term_sketch0 --> Problem  synth_2
Sketch conj60_sketch2 --> Problem  synth_31
Sketch conj59_sketch3 --> Problem  synth_14
Sketch conj27_term_sketch2 --> Problem  synth_7
Sketch conj63_term_sketch4 --> Problem  synth_28
Sketch conj59_sketch2 --> Problem  synth_2
Sketch conj29_sketch0 --> Problem  synth_15
Sketch conj52_term_sketch1 --> Problem  synth_23
Sketch conj23_term_sketch2 --> Problem  synth_13
Sketch conj21_sketch0 --> Problem  synth_8
Sketch conj19_term_sketch1 --> Problem  synth_7
Sketch conj51_term_sketch2 --> Problem  synth_21
Sketch conj27_sketch2 --> Problem  synth_2
Sketch conj60_term_sketch0 --> Problem  synth_17
Sketch conj52_term_sketch2 --> Problem  synth_24
Sketch conj31_sketch2 --> Problem  synth_17
Sketch conj27_sketch1 --> Problem  synth_14
Sketch conj60_sketch3 --> Problem  synth_32
Sketch conj51_sketch0 --> Problem  synth_18
Sketch conj29_term_sketch1 --> Problem  synth_2
Sketch conj31_sketch3 --> Problem  synth_2
Sketch conj23_term_sketch0 --> Problem  synth_9
Sketch conj56_term_sketch3 --> Problem  synth_23
Sketch conj19_term_sketch0 --> Problem  synth_6
Sketch conj29_sketch1 --> Problem  synth_10
Sketch conj52_term_sketch3 --> Problem  synth_25
Sketch conj63_term_sketch1 --> Problem  synth_9
Sketch conj51_term_sketch1 --> Problem  synth_20
Sketch conj51_term_sketch0 --> Problem  synth_19
Sketch conj56_sketch3 --> Problem  synth_26
Sketch conj55_term_sketch0 --> Problem  synth_19
Sketch conj52_term_sketch0 --> Problem  synth_17
Sketch conj27_term_sketch1 --> Problem  synth_6
Sketch conj23_sketch2 --> Problem  synth_3
Sketch conj19_sketch0 --> Problem  synth_5
Sketch conj17_sketch0 --> Problem  synth_3
Sketch conj63_sketch2 --> Problem  synth_28
Sketch conj25_term_sketch1 --> Problem  synth_2
Sketch conj55_term_sketch1 --> Problem  synth_9
Sketch conj52_sketch0 --> Problem  synth_5
Sketch conj56_term_sketch4 --> Problem  synth_24
Sketch conj59_sketch0 --> Problem  synth_31
Sketch conj9_sketch0 --> Problem  synth_1
Sketch conj23_term_sketch1 --> Problem  synth_6
Sketch conj63_term_sketch3 --> Problem  synth_21
Sketch conj63_sketch0 --> Problem  synth_33
Sketch conj55_term_sketch3 --> Problem  synth_28
Sketch conj63_sketch3 --> Problem  synth_17
Sketch conj29_term_sketch0 --> Problem  synth_9
Sketch conj59_term_sketch0 --> Problem  synth_19
Sketch conj52_sketch3 --> Problem  synth_3
Sketch conj31_term_sketch0 --> Problem  synth_9
Sketch conj59_term_sketch3 --> Problem  synth_21
Sketch conj51_sketch1 --> Problem  synth_3
Sketch conj55_sketch0 --> Problem  synth_26
Sketch conj63_sketch1 --> Problem  synth_34
Sketch conj56_term_sketch2 --> Problem  synth_2
Sketch conj27_sketch0 --> Problem  synth_7
Sketch conj21_term_sketch0 --> Problem  synth_9
Sketch conj56_term_sketch1 --> Problem  synth_9
Sketch conj56_sketch2 --> Problem  synth_3
Sketch conj19_sketch1 --> Problem  synth_3
Sketch conj25_sketch0 --> Problem  synth_2
Sketch conj21_sketch1 --> Problem  synth_3
Sketch conj60_sketch4 --> Problem  synth_2
Sketch conj56_sketch0 --> Problem  synth_12
Sketch conj56_sketch1 --> Problem  synth_29
Sketch conj31_sketch1 --> Problem  synth_13
Sketch conj31_term_sketch2 --> Problem  synth_6
Sketch conj55_term_sketch2 --> Problem  synth_21
Sketch conj27_term_sketch0 --> Problem  synth_2
Sketch conj51_sketch2 --> Problem  synth_5
Sketch conj29_sketch2 --> Problem  synth_2
Sketch conj25_term_sketch0 --> Problem  synth_4
Sketch conj63_term_sketch2 --> Problem  synth_2
Sketch conj55_sketch2 --> Problem  synth_12


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 1392 seconds

Problem: synth_28
 rotate (len lf6) (Cons n x)
 Cons n (lfappend lf6 x)
 lfappend lf6 (Cons n x)
 Cons n (lfappend x lf6)
 Cons n (lfappend x Nil)
 Cons n x

Problem: synth_17
 lfappend (lfappend x Nil) (rotate n (Cons n Nil))
 lfappend (lfappend x Nil) (Cons n Nil)
 lfappend x (rotate (len x) (Cons n Nil))
 lfappend x (Cons n (rotate n Nil))
 lfappend x (rotate n (Cons n Nil))
 lfappend x (Cons n Nil)

Problem: synth_29
 len (rotate (len x) x)
 len match x with | Nil => Nil | Cons y x => rotate n (lfappend x (Cons y Nil)) end
 len match x with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end
 len (rotate n x)
 len (lfappend x Nil)
 len x

Problem: synth_26

Problem: synth_9
 len (rotate (len x) (lfappend x Nil))
 len match lfappend x Nil with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end
 len (rotate (len x) x)
 len match x with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end
 len (lfappend x Nil)
 len x

Problem: synth_30
 match rotate n Nil with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end
 rotate n (rotate n Nil)
 rotate (len lf4) Nil
 rotate (len x) Nil
 rotate n Nil
 Nil

Problem: synth_11
 len (rotate (len lf3) x)
 len (rotate (len lf4) x)
 len (rotate (len x) x)
 len match x with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end
 len (lfappend x Nil)
 len x

Problem: synth_1
 lfappend lf1 (rotate (len lf1) Nil)
 lfappend (lfappend lf1 Nil) Nil
 rotate (len lf1) (lfappend lf1 Nil)
 rotate (len lf1) lf1
 lfappend lf1 Nil
 lf1

Problem: synth_15
 len (rotate (len lf2) x)
 len match x with | Nil => Nil | Cons y x => rotate n (lfappend x (Cons y Nil)) end
 len match x with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end
 len (rotate n x)
 len (lfappend x Nil)
 len x

Problem: synth_31
 rotate (len x) (Cons n Nil)
 Cons n (rotate n Nil)
 rotate n (Cons n Nil)
 rotate lf5 (Cons n Nil)
 Cons n (rotate lf5 Nil)
 Cons n Nil

Problem: synth_14
 lfappend x (rotate (len x) (Cons n Nil))
 lfappend x (Cons n (rotate n Nil))
 lfappend x (rotate n (Cons n Nil))
 lfappend x (rotate lf5 (Cons n Nil))
 lfappend x (Cons n (rotate lf5 Nil))
 lfappend x (Cons n Nil)

Problem: synth_8

Problem: synth_34
 len match x with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end
 len (lfappend lf6 x)
 len (rotate n x)
 len (lfappend x lf6)
 len (lfappend x Nil)
 len x

Problem: synth_12
 match rotate (len lf4) lf4 with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end
 rotate (len lf4) match lf4 with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end
 match lfappend lf4 Nil with | Nil => Nil | Cons y x => rotate (len lf4) (lfappend x (Cons y Nil)) end
 match lf4 with | Nil => Nil | Cons y x => rotate (len lf4) (lfappend x (Cons y Nil)) end
 match lfappend lf4 Nil with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end
 match lf4 with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end

Problem: synth_5
 match lfappend lf4 Nil with | Nil => Nil | Cons y x => rotate (len lf4) (lfappend x (Cons y Nil)) end
 match lfappend lf4 Nil with | Nil => Nil | Cons y x => match lfappend x (Cons y Nil) with | Nil => Nil | Cons y0 x0 => rotate lf5 (lfappend x0 (Cons y0 Nil)) end end
 match lf4 with | Nil => Nil | Cons y x => rotate (len lf4) (lfappend x (Cons y Nil)) end
 match lf4 with | Nil => Nil | Cons y x => match lfappend x (Cons y Nil) with | Nil => Nil | Cons y0 x0 => rotate lf5 (lfappend x0 (Cons y0 Nil)) end end
 match lfappend lf4 Nil with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end
 match lf4 with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end

Problem: synth_2
 rotate (len x) (lfappend x (Cons n Nil))
 Cons n (rotate (len x) (lfappend x Nil))
 Cons n (lfappend x (rotate n Nil))
 Cons n (rotate (len x) x)
 Cons n (lfappend x Nil)
 Cons n x

Problem: synth_22
 rotate lf5 (rotate lf5 Nil)
 rotate (len lf4) Nil
 rotate (len x) Nil
 rotate n Nil
 rotate lf5 Nil
 Nil

Problem: synth_20
 Cons n (lfappend lf6 x)
 lfappend lf6 (Cons n x)
 Cons n (rotate lf5 x)
 Cons n (lfappend x lf6)
 Cons n (lfappend x Nil)
 Cons n x

Problem: synth_18

Problem: synth_21
 lfappend x (Cons n (rotate n Nil))
 lfappend lf6 (lfappend x (Cons n Nil))
 lfappend x (lfappend lf6 (Cons n Nil))
 lfappend x (rotate n (Cons n Nil))
 lfappend x (Cons n lf6)
 lfappend x (Cons n Nil)

Problem: synth_25
 Cons n (lfappend x (rotate lf5 Nil))
 Cons n (rotate (len x) x)
 rotate lf5 (lfappend x (Cons n Nil))
 Cons n (rotate lf5 x)
 Cons n (lfappend x Nil)
 Cons n x

Problem: synth_13
 lfappend lf3 (rotate (len x) x)
 lfappend (lfappend lf3 Nil) x
 lfappend (lfappend lf3 x) Nil
 rotate (len x) (lfappend x lf3)
 lfappend lf3 (lfappend x Nil)
 lfappend lf3 x

Problem: synth_6
 lfappend (lfappend x Nil) lf3
 lfappend (lfappend x lf3) Nil
 rotate (len lf3) (lfappend lf3 x)
 match lfappend lf3 x with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end
 lfappend x (lfappend lf3 Nil)
 lfappend x lf3

Problem: synth_7
 rotate (len x) (lfappend x lf3)
 match lfappend lf3 x with | Nil => Nil | Cons y x => rotate lf5 (lfappend x (Cons y Nil)) end
 rotate lf5 (lfappend x lf3)
 lfappend lf3 (rotate lf5 x)
 lfappend lf3 (lfappend x Nil)
 lfappend lf3 x

Problem: synth_4
 rotate lf5 match lf2 with | Nil => Nil | Cons y x => rotate lf5 (lfappend x (Cons y Nil)) end
 lfappend (rotate lf5 lf2) Nil
 rotate (len lf2) (rotate lf5 lf2)
 match rotate lf5 lf2 with | Nil => Nil | Cons y x => rotate lf5 (lfappend x (Cons y Nil)) end
 rotate lf5 (lfappend lf2 Nil)
 rotate lf5 lf2

Problem: synth_23
 Cons n (rotate n (rotate n Nil))
 rotate n (Cons n (rotate n Nil))
 rotate n (rotate n (Cons n Nil))
 Cons n (rotate n Nil)
 rotate n (Cons n Nil)
 Cons n Nil

Problem: synth_27
 len match x with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end
 len (lfappend lf6 x)
 len (rotate n x)
 len (lfappend x lf6)
 len (lfappend x Nil)
 len x

Problem: synth_16
 len (rotate (len x) x)
 len match x with | Nil => Nil | Cons y x => rotate n (lfappend x (Cons y Nil)) end
 len match x with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end
 len (rotate n x)
 len (lfappend x Nil)
 len x

Problem: synth_19
 Cons n (lfappend lf6 Nil)
 Cons n (rotate n Nil)
 lfappend lf6 (Cons n Nil)
 rotate n (Cons n Nil)
 Cons n lf6
 Cons n Nil

Problem: synth_10
 rotate (len lf2) (rotate (len x) (lfappend lf2 Nil))
 rotate (len x) (rotate (len lf2) (lfappend lf2 Nil))
 rotate (len lf2) (rotate (len x) lf2)
 rotate (len x) (rotate (len lf2) lf2)
 rotate (len x) (lfappend lf2 Nil)
 rotate (len x) lf2

Problem: synth_33
 rotate n (rotate n (Cons n Nil))
 Cons n (rotate (len x) Nil)
 rotate (len x) (Cons n Nil)
 Cons n (rotate n Nil)
 rotate n (Cons n Nil)
 Cons n Nil

Problem: synth_24
 Nil

Problem: synth_3
 lfappend lf4 (rotate (len lf4) Nil)
 lfappend (lfappend lf4 Nil) Nil
 rotate (len lf4) (lfappend lf4 Nil)
 rotate (len lf4) lf4
 lfappend lf4 Nil
 lf4

Problem: synth_32
 rotate n (rotate lf5 Nil)
 rotate lf5 (rotate lf5 Nil)
 rotate (len x) Nil
 rotate n Nil
 rotate lf5 Nil
 Nil

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 1393 seconds
Lemmas:
Lemma candidate_1: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n Nil))) (Cons n x).
Lemma candidate_2: forall (lf1 : lst), @eq lst lf1 (lfappend lf1 (rotate (len lf1) Nil)).
Lemma candidate_3: forall (lf1 : lst), @eq lst lf1 (lfappend (lfappend lf1 Nil) Nil).
Lemma candidate_4: forall (lf1 : lst), @eq lst lf1 (rotate (len lf1) (lfappend lf1 Nil)).
Lemma candidate_5: forall (lf1 : lst), @eq lst lf1 (rotate (len lf1) lf1).
Lemma candidate_6: forall (lf1 : lst), @eq lst lf1 (lfappend lf1 Nil).
Lemma candidate_7: forall (lf1 : lst), @eq lst lf1 (lf1).
Lemma candidate_8: forall (n : natural) (x : lst), @eq lst (Cons n x) (rotate (len x) (lfappend x (Cons n Nil))).
Lemma candidate_9: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) (lfappend x Nil))).
Lemma candidate_10: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_11: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) x)).
Lemma candidate_12: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_13: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_14: forall (lf4 : lst), @eq lst (lfappend lf4 (rotate (len lf4) Nil)) lf4.
Lemma candidate_15: forall (lf4 : lst), @eq lst (lfappend (lfappend lf4 Nil) Nil) lf4.
Lemma candidate_16: forall (lf4 : lst), @eq lst (rotate (len lf4) (lfappend lf4 Nil)) lf4.
Lemma candidate_17: forall (lf4 : lst), @eq lst (rotate (len lf4) lf4) lf4.
Lemma candidate_18: forall (lf4 : lst), @eq lst (lfappend lf4 Nil) lf4.
Lemma candidate_19: forall (lf4 : lst), @eq lst (lf4) lf4.
Lemma candidate_20: forall (lf5 : natural) (lf2 : lst), @eq lst (rotate lf5 lf2)   (rotate lf5 match lf2 with | Nil => Nil | Cons y x => rotate lf5 (lfappend x (Cons y Nil)) end).
Lemma candidate_21: forall (lf5 : natural) (lf2 : lst), @eq lst (rotate lf5 lf2) (lfappend (rotate lf5 lf2) Nil).
Lemma candidate_22: forall (lf5 : natural) (lf2 : lst), @eq lst (rotate lf5 lf2) (rotate (len lf2) (rotate lf5 lf2)).
Lemma candidate_23: forall (lf5 : natural) (lf2 : lst), @eq lst (rotate lf5 lf2)   (match rotate lf5 lf2 with | Nil => Nil | Cons y x => rotate lf5 (lfappend x (Cons y Nil)) end).
Lemma candidate_24: forall (lf5 : natural) (lf2 : lst), @eq lst (rotate lf5 lf2) (rotate lf5 (lfappend lf2 Nil)).
Lemma candidate_25: forall (lf5 : natural) (lf2 : lst), @eq lst (rotate lf5 lf2) (rotate lf5 lf2).
Lemma candidate_26: forall (lf4 : lst) (lf5 : natural), @eq lst   (rotate lf5      (match lfappend lf4 Nil with | Nil => Nil | Cons y x => rotate (len lf4) (lfappend x (Cons y Nil)) end))   lf4.
Lemma candidate_27: forall (lf4 : lst) (lf5 : natural), @eq lst   (rotate lf5      (match lfappend lf4 Nil with | Nil => Nil | Cons y x => match lfappend x (Cons y Nil) with | Nil => Nil | Cons y0 x0 => rotate lf5 (lfappend x0 (Cons y0 Nil)) end end))   lf4.
Lemma candidate_28: forall (lf4 : lst) (lf5 : natural), @eq lst   (rotate lf5      (match lf4 with | Nil => Nil | Cons y x => rotate (len lf4) (lfappend x (Cons y Nil)) end))   lf4.
Lemma candidate_29: forall (lf4 : lst) (lf5 : natural), @eq lst   (rotate lf5      (match lf4 with | Nil => Nil | Cons y x => match lfappend x (Cons y Nil) with | Nil => Nil | Cons y0 x0 => rotate lf5 (lfappend x0 (Cons y0 Nil)) end end))   lf4.
Lemma candidate_30: forall (lf4 : lst) (lf5 : natural), @eq lst   (rotate lf5      (match lfappend lf4 Nil with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end))   lf4.
Lemma candidate_31: forall (lf4 : lst) (lf5 : natural), @eq lst   (rotate lf5      (match lf4 with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end))   lf4.
Lemma candidate_32: forall (lf4 : lst), @eq lst (lfappend lf4 (rotate (len lf4) Nil)) lf4.
Lemma candidate_33: forall (lf4 : lst), @eq lst (lfappend (lfappend lf4 Nil) Nil) lf4.
Lemma candidate_34: forall (lf4 : lst), @eq lst (rotate (len lf4) (lfappend lf4 Nil)) lf4.
Lemma candidate_35: forall (lf4 : lst), @eq lst (rotate (len lf4) lf4) lf4.
Lemma candidate_36: forall (lf4 : lst), @eq lst (lfappend lf4 Nil) lf4.
Lemma candidate_37: forall (lf4 : lst), @eq lst (lf4) lf4.
Lemma candidate_38: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend (lfappend x Nil) lf3).
Lemma candidate_39: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend (lfappend x lf3) Nil).
Lemma candidate_40: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (rotate (len lf3) (lfappend lf3 x)).
Lemma candidate_41: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3)   (match lfappend lf3 x with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end).
Lemma candidate_42: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend x (lfappend lf3 Nil)).
Lemma candidate_43: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend x lf3).
Lemma candidate_44: forall (lf3 : lst) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x lf3)) (rotate (len x) (lfappend x lf3)).
Lemma candidate_45: forall (lf3 : lst) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x lf3))   (match lfappend lf3 x with | Nil => Nil | Cons y x => rotate lf5 (lfappend x (Cons y Nil)) end).
Lemma candidate_46: forall (lf3 : lst) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x lf3)) (rotate lf5 (lfappend x lf3)).
Lemma candidate_47: forall (lf3 : lst) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x lf3)) (lfappend lf3 (rotate lf5 x)).
Lemma candidate_48: forall (lf3 : lst) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x lf3)) (lfappend lf3 (lfappend x Nil)).
Lemma candidate_49: forall (lf3 : lst) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x lf3)) (lfappend lf3 x).
Lemma candidate_50: forall (lf4 : lst), @eq lst (lfappend lf4 (rotate (len lf4) Nil)) lf4.
Lemma candidate_51: forall (lf4 : lst), @eq lst (lfappend (lfappend lf4 Nil) Nil) lf4.
Lemma candidate_52: forall (lf4 : lst), @eq lst (rotate (len lf4) (lfappend lf4 Nil)) lf4.
Lemma candidate_53: forall (lf4 : lst), @eq lst (rotate (len lf4) lf4) lf4.
Lemma candidate_54: forall (lf4 : lst), @eq lst (lfappend lf4 Nil) lf4.
Lemma candidate_55: forall (lf4 : lst), @eq lst (lf4) lf4.
Lemma candidate_56: forall (x : lst), @eq natural (len x) (len (rotate (len x) (lfappend x Nil))).
Lemma candidate_57: forall (x : lst), @eq natural (len x)   (len match lfappend x Nil with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end).
Lemma candidate_58: forall (x : lst), @eq natural (len x) (len (rotate (len x) x)).
Lemma candidate_59: forall (x : lst), @eq natural (len x)   (len match x with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end).
Lemma candidate_60: forall (x : lst), @eq natural (len x) (len (lfappend x Nil)).
Lemma candidate_61: forall (x : lst), @eq natural (len x) (len x).
Lemma candidate_62: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2)   (rotate (len lf2) (rotate (len x) (lfappend lf2 Nil))).
Lemma candidate_63: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2)   (rotate (len x) (rotate (len lf2) (lfappend lf2 Nil))).
Lemma candidate_64: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len lf2) (rotate (len x) lf2)).
Lemma candidate_65: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len x) (rotate (len lf2) lf2)).
Lemma candidate_66: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len x) (lfappend lf2 Nil)).
Lemma candidate_67: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len x) lf2).
Lemma candidate_68: forall (lf3 : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len (rotate (len lf3) x)) (lfappend x lf3)) lf4.
Lemma candidate_69: forall (lf3 : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len (rotate (len lf4) x)) (lfappend x lf3)) lf4.
Lemma candidate_70: forall (lf3 : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len (rotate (len x) x)) (lfappend x lf3)) lf4.
Lemma candidate_71: forall (lf3 : lst) (lf4 : lst) (x : lst), @eq lst   (rotate      (len match x with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end)      (lfappend x lf3)) lf4.
Lemma candidate_72: forall (lf3 : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len (lfappend x Nil)) (lfappend x lf3)) lf4.
Lemma candidate_73: forall (lf3 : lst) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend x lf3)) lf4.
Lemma candidate_74: forall (lf4 : lst) (x : lst), @eq lst   (rotate (len x)      (match rotate (len lf4) lf4 with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end))   lf4.
Lemma candidate_75: forall (lf4 : lst) (x : lst), @eq lst   (rotate (len x)      (rotate (len lf4) match lf4 with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end))   lf4.
Lemma candidate_76: forall (lf4 : lst) (x : lst), @eq lst   (rotate (len x)      (match lfappend lf4 Nil with | Nil => Nil | Cons y x => rotate (len lf4) (lfappend x (Cons y Nil)) end))   lf4.
Lemma candidate_77: forall (lf4 : lst) (x : lst), @eq lst   (rotate (len x)      (match lf4 with | Nil => Nil | Cons y x => rotate (len lf4) (lfappend x (Cons y Nil)) end))   lf4.
Lemma candidate_78: forall (lf4 : lst) (x : lst), @eq lst   (rotate (len x)      (match lfappend lf4 Nil with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end))   lf4.
Lemma candidate_79: forall (lf4 : lst) (x : lst), @eq lst   (rotate (len x)      (match lf4 with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end))   lf4.
Lemma candidate_80: forall (lf4 : lst), @eq lst (lfappend lf4 (rotate (len lf4) Nil)) lf4.
Lemma candidate_81: forall (lf4 : lst), @eq lst (lfappend (lfappend lf4 Nil) Nil) lf4.
Lemma candidate_82: forall (lf4 : lst), @eq lst (rotate (len lf4) (lfappend lf4 Nil)) lf4.
Lemma candidate_83: forall (lf4 : lst), @eq lst (rotate (len lf4) lf4) lf4.
Lemma candidate_84: forall (lf4 : lst), @eq lst (lfappend lf4 Nil) lf4.
Lemma candidate_85: forall (lf4 : lst), @eq lst (lf4) lf4.
Lemma candidate_86: forall (x : lst), @eq natural (len x) (len (rotate (len x) (lfappend x Nil))).
Lemma candidate_87: forall (x : lst), @eq natural (len x)   (len match lfappend x Nil with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end).
Lemma candidate_88: forall (x : lst), @eq natural (len x) (len (rotate (len x) x)).
Lemma candidate_89: forall (x : lst), @eq natural (len x)   (len match x with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end).
Lemma candidate_90: forall (x : lst), @eq natural (len x) (len (lfappend x Nil)).
Lemma candidate_91: forall (x : lst), @eq natural (len x) (len x).
Lemma candidate_92: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend (lfappend x Nil) lf3).
Lemma candidate_93: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend (lfappend x lf3) Nil).
Lemma candidate_94: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (rotate (len lf3) (lfappend lf3 x)).
Lemma candidate_95: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3)   (match lfappend lf3 x with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end).
Lemma candidate_96: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend x (lfappend lf3 Nil)).
Lemma candidate_97: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend x lf3).
Lemma candidate_98: forall (lf3 : lst) (x : lst), @eq lst (rotate (len x) (lfappend x lf3)) (lfappend lf3 (rotate (len x) x)).
Lemma candidate_99: forall (lf3 : lst) (x : lst), @eq lst (rotate (len x) (lfappend x lf3)) (lfappend (lfappend lf3 Nil) x).
Lemma candidate_100: forall (lf3 : lst) (x : lst), @eq lst (rotate (len x) (lfappend x lf3)) (lfappend (lfappend lf3 x) Nil).
Lemma candidate_101: forall (lf3 : lst) (x : lst), @eq lst (rotate (len x) (lfappend x lf3)) (rotate (len x) (lfappend x lf3)).
Lemma candidate_102: forall (lf3 : lst) (x : lst), @eq lst (rotate (len x) (lfappend x lf3)) (lfappend lf3 (lfappend x Nil)).
Lemma candidate_103: forall (lf3 : lst) (x : lst), @eq lst (rotate (len x) (lfappend x lf3)) (lfappend lf3 x).
Lemma candidate_104: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n Nil))) (Cons n x).
Lemma candidate_105: forall (n : natural) (x : lst), @eq lst (Cons n (rotate (len x) (lfappend x Nil))) (Cons n x).
Lemma candidate_106: forall (n : natural) (x : lst), @eq lst (Cons n (lfappend x (rotate n Nil))) (Cons n x).
Lemma candidate_107: forall (n : natural) (x : lst), @eq lst (Cons n (rotate (len x) x)) (Cons n x).
Lemma candidate_108: forall (n : natural) (x : lst), @eq lst (Cons n (lfappend x Nil)) (Cons n x).
Lemma candidate_109: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_110: forall (lf5 : natural) (lf2 : lst), @eq lst (rotate lf5 lf2)   (rotate lf5 match lf2 with | Nil => Nil | Cons y x => rotate lf5 (lfappend x (Cons y Nil)) end).
Lemma candidate_111: forall (lf5 : natural) (lf2 : lst), @eq lst (rotate lf5 lf2) (lfappend (rotate lf5 lf2) Nil).
Lemma candidate_112: forall (lf5 : natural) (lf2 : lst), @eq lst (rotate lf5 lf2) (rotate (len lf2) (rotate lf5 lf2)).
Lemma candidate_113: forall (lf5 : natural) (lf2 : lst), @eq lst (rotate lf5 lf2)   (match rotate lf5 lf2 with | Nil => Nil | Cons y x => rotate lf5 (lfappend x (Cons y Nil)) end).
Lemma candidate_114: forall (lf5 : natural) (lf2 : lst), @eq lst (rotate lf5 lf2) (rotate lf5 (lfappend lf2 Nil)).
Lemma candidate_115: forall (lf5 : natural) (lf2 : lst), @eq lst (rotate lf5 lf2) (rotate lf5 lf2).
Lemma candidate_116: forall (lf5 : natural) (lf2 : lst), @eq lst (rotate lf5 lf2)   (rotate lf5 match lf2 with | Nil => Nil | Cons y x => rotate lf5 (lfappend x (Cons y Nil)) end).
Lemma candidate_117: forall (lf5 : natural) (lf2 : lst), @eq lst (rotate lf5 lf2) (lfappend (rotate lf5 lf2) Nil).
Lemma candidate_118: forall (lf5 : natural) (lf2 : lst), @eq lst (rotate lf5 lf2) (rotate (len lf2) (rotate lf5 lf2)).
Lemma candidate_119: forall (lf5 : natural) (lf2 : lst), @eq lst (rotate lf5 lf2)   (match rotate lf5 lf2 with | Nil => Nil | Cons y x => rotate lf5 (lfappend x (Cons y Nil)) end).
Lemma candidate_120: forall (lf5 : natural) (lf2 : lst), @eq lst (rotate lf5 lf2) (rotate lf5 (lfappend lf2 Nil)).
Lemma candidate_121: forall (lf5 : natural) (lf2 : lst), @eq lst (rotate lf5 lf2) (rotate lf5 lf2).
Lemma candidate_122: forall (n : natural) (x : lst), @eq lst (Cons n x) (rotate (len x) (lfappend x (Cons n Nil))).
Lemma candidate_123: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) (lfappend x Nil))).
Lemma candidate_124: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_125: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) x)).
Lemma candidate_126: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_127: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_128: forall (lf3 : lst) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x lf3)) (rotate (len x) (lfappend x lf3)).
Lemma candidate_129: forall (lf3 : lst) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x lf3))   (match lfappend lf3 x with | Nil => Nil | Cons y x => rotate lf5 (lfappend x (Cons y Nil)) end).
Lemma candidate_130: forall (lf3 : lst) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x lf3)) (rotate lf5 (lfappend x lf3)).
Lemma candidate_131: forall (lf3 : lst) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x lf3)) (lfappend lf3 (rotate lf5 x)).
Lemma candidate_132: forall (lf3 : lst) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x lf3)) (lfappend lf3 (lfappend x Nil)).
Lemma candidate_133: forall (lf3 : lst) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x lf3)) (lfappend lf3 x).
Lemma candidate_134: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (rotate (len x) (Cons n Nil)))) (Cons n x).
Lemma candidate_135: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n (rotate n Nil)))) (Cons n x).
Lemma candidate_136: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (rotate n (Cons n Nil)))) (Cons n x).
Lemma candidate_137: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (rotate lf5 (Cons n Nil)))) (Cons n x).
Lemma candidate_138: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n (rotate lf5 Nil)))) (Cons n x).
Lemma candidate_139: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil))) (Cons n x).
Lemma candidate_140: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n Nil))) (Cons n x).
Lemma candidate_141: forall (n : natural) (x : lst), @eq lst (Cons n (rotate (len x) (lfappend x Nil))) (Cons n x).
Lemma candidate_142: forall (n : natural) (x : lst), @eq lst (Cons n (lfappend x (rotate n Nil))) (Cons n x).
Lemma candidate_143: forall (n : natural) (x : lst), @eq lst (Cons n (rotate (len x) x)) (Cons n x).
Lemma candidate_144: forall (n : natural) (x : lst), @eq lst (Cons n (lfappend x Nil)) (Cons n x).
Lemma candidate_145: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_146: forall (n : natural) (x : lst), @eq lst (Cons n x) (rotate (len x) (lfappend x (Cons n Nil))).
Lemma candidate_147: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) (lfappend x Nil))).
Lemma candidate_148: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_149: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) x)).
Lemma candidate_150: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_151: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_152: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend (lfappend x Nil) lf3).
Lemma candidate_153: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend (lfappend x lf3) Nil).
Lemma candidate_154: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (rotate (len lf3) (lfappend lf3 x)).
Lemma candidate_155: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3)   (match lfappend lf3 x with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end).
Lemma candidate_156: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend x (lfappend lf3 Nil)).
Lemma candidate_157: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend x lf3).
Lemma candidate_158: forall (lf3 : lst) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x lf3)) (rotate (len x) (lfappend x lf3)).
Lemma candidate_159: forall (lf3 : lst) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x lf3))   (match lfappend lf3 x with | Nil => Nil | Cons y x => rotate lf5 (lfappend x (Cons y Nil)) end).
Lemma candidate_160: forall (lf3 : lst) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x lf3)) (rotate lf5 (lfappend x lf3)).
Lemma candidate_161: forall (lf3 : lst) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x lf3)) (lfappend lf3 (rotate lf5 x)).
Lemma candidate_162: forall (lf3 : lst) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x lf3)) (lfappend lf3 (lfappend x Nil)).
Lemma candidate_163: forall (lf3 : lst) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x lf3)) (lfappend lf3 x).
Lemma candidate_164: forall (n : natural) (x : lst) (lf2 : lst), @eq lst (rotate (len (rotate (len lf2) x)) lf2) (Cons n x).
Lemma candidate_165: forall (n : natural) (x : lst) (lf2 : lst), @eq lst   (rotate      (len match x with | Nil => Nil | Cons y x => rotate n (lfappend x (Cons y Nil)) end)      lf2) (Cons n x).
Lemma candidate_166: forall (n : natural) (x : lst) (lf2 : lst), @eq lst   (rotate      (len match x with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end)      lf2) (Cons n x).
Lemma candidate_167: forall (n : natural) (x : lst) (lf2 : lst), @eq lst (rotate (len (rotate n x)) lf2) (Cons n x).
Lemma candidate_168: forall (n : natural) (x : lst) (lf2 : lst), @eq lst (rotate (len (lfappend x Nil)) lf2) (Cons n x).
Lemma candidate_169: forall (n : natural) (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (Cons n x).
Lemma candidate_170: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2)   (rotate (len lf2) (rotate (len x) (lfappend lf2 Nil))).
Lemma candidate_171: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2)   (rotate (len x) (rotate (len lf2) (lfappend lf2 Nil))).
Lemma candidate_172: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len lf2) (rotate (len x) lf2)).
Lemma candidate_173: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len x) (rotate (len lf2) lf2)).
Lemma candidate_174: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len x) (lfappend lf2 Nil)).
Lemma candidate_175: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len x) lf2).
Lemma candidate_176: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n Nil))) (Cons n x).
Lemma candidate_177: forall (n : natural) (x : lst), @eq lst (Cons n (rotate (len x) (lfappend x Nil))) (Cons n x).
Lemma candidate_178: forall (n : natural) (x : lst), @eq lst (Cons n (lfappend x (rotate n Nil))) (Cons n x).
Lemma candidate_179: forall (n : natural) (x : lst), @eq lst (Cons n (rotate (len x) x)) (Cons n x).
Lemma candidate_180: forall (n : natural) (x : lst), @eq lst (Cons n (lfappend x Nil)) (Cons n x).
Lemma candidate_181: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_182: forall (x : lst), @eq natural (len x) (len (rotate (len x) (lfappend x Nil))).
Lemma candidate_183: forall (x : lst), @eq natural (len x)   (len match lfappend x Nil with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end).
Lemma candidate_184: forall (x : lst), @eq natural (len x) (len (rotate (len x) x)).
Lemma candidate_185: forall (x : lst), @eq natural (len x)   (len match x with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end).
Lemma candidate_186: forall (x : lst), @eq natural (len x) (len (lfappend x Nil)).
Lemma candidate_187: forall (x : lst), @eq natural (len x) (len x).
Lemma candidate_188: forall (n : natural) (x : lst), @eq lst (Cons n x) (rotate (len x) (lfappend x (Cons n Nil))).
Lemma candidate_189: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) (lfappend x Nil))).
Lemma candidate_190: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_191: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) x)).
Lemma candidate_192: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_193: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_194: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2)   (rotate (len lf2) (rotate (len x) (lfappend lf2 Nil))).
Lemma candidate_195: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2)   (rotate (len x) (rotate (len lf2) (lfappend lf2 Nil))).
Lemma candidate_196: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len lf2) (rotate (len x) lf2)).
Lemma candidate_197: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len x) (rotate (len lf2) lf2)).
Lemma candidate_198: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len x) (lfappend lf2 Nil)).
Lemma candidate_199: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len x) lf2).
Lemma candidate_200: forall (lf3 : lst) (n : natural) (x : lst), @eq lst (rotate (len (rotate (len x) x)) (lfappend x lf3)) (Cons n x).
Lemma candidate_201: forall (lf3 : lst) (n : natural) (x : lst), @eq lst   (rotate      (len match x with | Nil => Nil | Cons y x => rotate n (lfappend x (Cons y Nil)) end)      (lfappend x lf3)) (Cons n x).
Lemma candidate_202: forall (lf3 : lst) (n : natural) (x : lst), @eq lst   (rotate      (len match x with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end)      (lfappend x lf3)) (Cons n x).
Lemma candidate_203: forall (lf3 : lst) (n : natural) (x : lst), @eq lst (rotate (len (rotate n x)) (lfappend x lf3)) (Cons n x).
Lemma candidate_204: forall (lf3 : lst) (n : natural) (x : lst), @eq lst (rotate (len (lfappend x Nil)) (lfappend x lf3)) (Cons n x).
Lemma candidate_205: forall (lf3 : lst) (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x lf3)) (Cons n x).
Lemma candidate_206: forall (lf3 : lst) (x : lst), @eq lst (rotate (len x) (lfappend x lf3)) (lfappend lf3 (rotate (len x) x)).
Lemma candidate_207: forall (lf3 : lst) (x : lst), @eq lst (rotate (len x) (lfappend x lf3)) (lfappend (lfappend lf3 Nil) x).
Lemma candidate_208: forall (lf3 : lst) (x : lst), @eq lst (rotate (len x) (lfappend x lf3)) (lfappend (lfappend lf3 x) Nil).
Lemma candidate_209: forall (lf3 : lst) (x : lst), @eq lst (rotate (len x) (lfappend x lf3)) (rotate (len x) (lfappend x lf3)).
Lemma candidate_210: forall (lf3 : lst) (x : lst), @eq lst (rotate (len x) (lfappend x lf3)) (lfappend lf3 (lfappend x Nil)).
Lemma candidate_211: forall (lf3 : lst) (x : lst), @eq lst (rotate (len x) (lfappend x lf3)) (lfappend lf3 x).
Lemma candidate_212: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x Nil) (rotate n (Cons n Nil))))   (Cons n x).
Lemma candidate_213: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x Nil) (Cons n Nil))) (Cons n x).
Lemma candidate_214: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (rotate (len x) (Cons n Nil))))   (Cons n x).
Lemma candidate_215: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n (rotate n Nil)))) (Cons n x).
Lemma candidate_216: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (rotate n (Cons n Nil)))) (Cons n x).
Lemma candidate_217: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n Nil))) (Cons n x).
Lemma candidate_218: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n Nil))) (Cons n x).
Lemma candidate_219: forall (n : natural) (x : lst), @eq lst (Cons n (rotate (len x) (lfappend x Nil))) (Cons n x).
Lemma candidate_220: forall (n : natural) (x : lst), @eq lst (Cons n (lfappend x (rotate n Nil))) (Cons n x).
Lemma candidate_221: forall (n : natural) (x : lst), @eq lst (Cons n (rotate (len x) x)) (Cons n x).
Lemma candidate_222: forall (n : natural) (x : lst), @eq lst (Cons n (lfappend x Nil)) (Cons n x).
Lemma candidate_223: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_224: forall (x : lst), @eq natural (len x) (len (rotate (len x) (lfappend x Nil))).
Lemma candidate_225: forall (x : lst), @eq natural (len x)   (len match lfappend x Nil with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end).
Lemma candidate_226: forall (x : lst), @eq natural (len x) (len (rotate (len x) x)).
Lemma candidate_227: forall (x : lst), @eq natural (len x)   (len match x with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end).
Lemma candidate_228: forall (x : lst), @eq natural (len x) (len (lfappend x Nil)).
Lemma candidate_229: forall (x : lst), @eq natural (len x) (len x).
Lemma candidate_230: forall (n : natural) (x : lst), @eq lst (Cons n x) (rotate (len x) (lfappend x (Cons n Nil))).
Lemma candidate_231: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) (lfappend x Nil))).
Lemma candidate_232: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_233: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) x)).
Lemma candidate_234: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_235: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_236: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend (lfappend x Nil) lf3).
Lemma candidate_237: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend (lfappend x lf3) Nil).
Lemma candidate_238: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (rotate (len lf3) (lfappend lf3 x)).
Lemma candidate_239: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3)   (match lfappend lf3 x with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end).
Lemma candidate_240: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend x (lfappend lf3 Nil)).
Lemma candidate_241: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend x lf3).
Lemma candidate_242: forall (lf3 : lst) (x : lst), @eq lst (rotate (len x) (lfappend x lf3)) (lfappend lf3 (rotate (len x) x)).
Lemma candidate_243: forall (lf3 : lst) (x : lst), @eq lst (rotate (len x) (lfappend x lf3)) (lfappend (lfappend lf3 Nil) x).
Lemma candidate_244: forall (lf3 : lst) (x : lst), @eq lst (rotate (len x) (lfappend x lf3)) (lfappend (lfappend lf3 x) Nil).
Lemma candidate_245: forall (lf3 : lst) (x : lst), @eq lst (rotate (len x) (lfappend x lf3)) (rotate (len x) (lfappend x lf3)).
Lemma candidate_246: forall (lf3 : lst) (x : lst), @eq lst (rotate (len x) (lfappend x lf3)) (lfappend lf3 (lfappend x Nil)).
Lemma candidate_247: forall (lf3 : lst) (x : lst), @eq lst (rotate (len x) (lfappend x lf3)) (lfappend lf3 x).
Lemma candidate_248: forall (lf4 : lst), @eq lst (lfappend lf4 (rotate (len lf4) Nil)) lf4.
Lemma candidate_249: forall (lf4 : lst), @eq lst (lfappend (lfappend lf4 Nil) Nil) lf4.
Lemma candidate_250: forall (lf4 : lst), @eq lst (rotate (len lf4) (lfappend lf4 Nil)) lf4.
Lemma candidate_251: forall (lf4 : lst), @eq lst (rotate (len lf4) lf4) lf4.
Lemma candidate_252: forall (lf4 : lst), @eq lst (lfappend lf4 Nil) lf4.
Lemma candidate_253: forall (lf4 : lst), @eq lst (lf4) lf4.
Lemma candidate_254: forall (lf4 : lst) (lf5 : natural), @eq lst   (rotate lf5      (match lfappend lf4 Nil with | Nil => Nil | Cons y x => rotate (len lf4) (lfappend x (Cons y Nil)) end))   lf4.
Lemma candidate_255: forall (lf4 : lst) (lf5 : natural), @eq lst   (rotate lf5      (match lfappend lf4 Nil with | Nil => Nil | Cons y x => match lfappend x (Cons y Nil) with | Nil => Nil | Cons y0 x0 => rotate lf5 (lfappend x0 (Cons y0 Nil)) end end))   lf4.
Lemma candidate_256: forall (lf4 : lst) (lf5 : natural), @eq lst   (rotate lf5      (match lf4 with | Nil => Nil | Cons y x => rotate (len lf4) (lfappend x (Cons y Nil)) end))   lf4.
Lemma candidate_257: forall (lf4 : lst) (lf5 : natural), @eq lst   (rotate lf5      (match lf4 with | Nil => Nil | Cons y x => match lfappend x (Cons y Nil) with | Nil => Nil | Cons y0 x0 => rotate lf5 (lfappend x0 (Cons y0 Nil)) end end))   lf4.
Lemma candidate_258: forall (lf4 : lst) (lf5 : natural), @eq lst   (rotate lf5      (match lfappend lf4 Nil with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end))   lf4.
Lemma candidate_259: forall (lf4 : lst) (lf5 : natural), @eq lst   (rotate lf5      (match lf4 with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end))   lf4.
Lemma candidate_260: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (Cons n (lfappend lf6 Nil)).
Lemma candidate_261: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (Cons n (rotate n Nil)).
Lemma candidate_262: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (lfappend lf6 (Cons n Nil)).
Lemma candidate_263: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (rotate n (Cons n Nil)).
Lemma candidate_264: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (Cons n lf6).
Lemma candidate_265: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (Cons n Nil).
Lemma candidate_266: forall (n : natural) (x : lst) (lf5 : natural) (lf6 : lst), @eq lst (rotate lf5 (lfappend x (Cons n lf6))) (Cons n (lfappend lf6 x)).
Lemma candidate_267: forall (n : natural) (x : lst) (lf5 : natural) (lf6 : lst), @eq lst (rotate lf5 (lfappend x (Cons n lf6))) (lfappend lf6 (Cons n x)).
Lemma candidate_268: forall (n : natural) (x : lst) (lf5 : natural) (lf6 : lst), @eq lst (rotate lf5 (lfappend x (Cons n lf6))) (Cons n (rotate lf5 x)).
Lemma candidate_269: forall (n : natural) (x : lst) (lf5 : natural) (lf6 : lst), @eq lst (rotate lf5 (lfappend x (Cons n lf6))) (Cons n (lfappend x lf6)).
Lemma candidate_270: forall (n : natural) (x : lst) (lf5 : natural) (lf6 : lst), @eq lst (rotate lf5 (lfappend x (Cons n lf6))) (Cons n (lfappend x Nil)).
Lemma candidate_271: forall (n : natural) (x : lst) (lf5 : natural) (lf6 : lst), @eq lst (rotate lf5 (lfappend x (Cons n lf6))) (Cons n x).
Lemma candidate_272: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend x (Cons n lf6)) (lfappend x (Cons n (rotate n Nil))).
Lemma candidate_273: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend x (Cons n lf6)) (lfappend lf6 (lfappend x (Cons n Nil))).
Lemma candidate_274: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend x (Cons n lf6)) (lfappend x (lfappend lf6 (Cons n Nil))).
Lemma candidate_275: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend x (Cons n lf6)) (lfappend x (rotate n (Cons n Nil))).
Lemma candidate_276: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend x (Cons n lf6)) (lfappend x (Cons n lf6)).
Lemma candidate_277: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend x (Cons n lf6)) (lfappend x (Cons n Nil)).
Lemma candidate_278: forall (lf4 : lst) (lf5 : natural), @eq lst   (rotate lf5      (match lfappend lf4 Nil with | Nil => Nil | Cons y x => rotate (len lf4) (lfappend x (Cons y Nil)) end))   lf4.
Lemma candidate_279: forall (lf4 : lst) (lf5 : natural), @eq lst   (rotate lf5      (match lfappend lf4 Nil with | Nil => Nil | Cons y x => match lfappend x (Cons y Nil) with | Nil => Nil | Cons y0 x0 => rotate lf5 (lfappend x0 (Cons y0 Nil)) end end))   lf4.
Lemma candidate_280: forall (lf4 : lst) (lf5 : natural), @eq lst   (rotate lf5      (match lf4 with | Nil => Nil | Cons y x => rotate (len lf4) (lfappend x (Cons y Nil)) end))   lf4.
Lemma candidate_281: forall (lf4 : lst) (lf5 : natural), @eq lst   (rotate lf5      (match lf4 with | Nil => Nil | Cons y x => match lfappend x (Cons y Nil) with | Nil => Nil | Cons y0 x0 => rotate lf5 (lfappend x0 (Cons y0 Nil)) end end))   lf4.
Lemma candidate_282: forall (lf4 : lst) (lf5 : natural), @eq lst   (rotate lf5      (match lfappend lf4 Nil with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end))   lf4.
Lemma candidate_283: forall (lf4 : lst) (lf5 : natural), @eq lst   (rotate lf5      (match lf4 with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end))   lf4.
Lemma candidate_284: forall (n : natural) (lf4 : lst) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n (rotate lf5 (rotate lf5 Nil))))) lf4.
Lemma candidate_285: forall (n : natural) (lf4 : lst) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n (rotate (len lf4) Nil)))) lf4.
Lemma candidate_286: forall (n : natural) (lf4 : lst) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n (rotate (len x) Nil)))) lf4.
Lemma candidate_287: forall (n : natural) (lf4 : lst) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n (rotate n Nil)))) lf4.
Lemma candidate_288: forall (n : natural) (lf4 : lst) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n (rotate lf5 Nil)))) lf4.
Lemma candidate_289: forall (n : natural) (lf4 : lst) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n (Nil)))) lf4.
Lemma candidate_290: forall (lf4 : lst), @eq lst (lfappend lf4 (rotate (len lf4) Nil)) lf4.
Lemma candidate_291: forall (lf4 : lst), @eq lst (lfappend (lfappend lf4 Nil) Nil) lf4.
Lemma candidate_292: forall (lf4 : lst), @eq lst (rotate (len lf4) (lfappend lf4 Nil)) lf4.
Lemma candidate_293: forall (lf4 : lst), @eq lst (rotate (len lf4) lf4) lf4.
Lemma candidate_294: forall (lf4 : lst), @eq lst (lfappend lf4 Nil) lf4.
Lemma candidate_295: forall (lf4 : lst), @eq lst (lf4) lf4.
Lemma candidate_296: forall (n : natural) (x : lst), @eq lst (lfappend x (Cons n Nil))   (lfappend (lfappend x Nil) (rotate n (Cons n Nil))).
Lemma candidate_297: forall (n : natural) (x : lst), @eq lst (lfappend x (Cons n Nil)) (lfappend (lfappend x Nil) (Cons n Nil)).
Lemma candidate_298: forall (n : natural) (x : lst), @eq lst (lfappend x (Cons n Nil)) (lfappend x (rotate (len x) (Cons n Nil))).
Lemma candidate_299: forall (n : natural) (x : lst), @eq lst (lfappend x (Cons n Nil)) (lfappend x (Cons n (rotate n Nil))).
Lemma candidate_300: forall (n : natural) (x : lst), @eq lst (lfappend x (Cons n Nil)) (lfappend x (rotate n (Cons n Nil))).
Lemma candidate_301: forall (n : natural) (x : lst), @eq lst (lfappend x (Cons n Nil)) (lfappend x (Cons n Nil)).
Lemma candidate_302: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n (rotate n Nil))).
Lemma candidate_303: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n (rotate n Nil))).
Lemma candidate_304: forall (n : natural), @eq lst (Cons n Nil) (rotate n (rotate n (Cons n Nil))).
Lemma candidate_305: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n Nil)).
Lemma candidate_306: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n Nil)).
Lemma candidate_307: forall (n : natural), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_308: @eq lst Nil (Nil).
Lemma candidate_309: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil)))   (Cons n (lfappend x (rotate lf5 Nil))).
Lemma candidate_310: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil))) (Cons n (rotate (len x) x)).
Lemma candidate_311: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil)))   (rotate lf5 (lfappend x (Cons n Nil))).
Lemma candidate_312: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil))) (Cons n (rotate lf5 x)).
Lemma candidate_313: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil))) (Cons n (lfappend x Nil)).
Lemma candidate_314: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil))) (Cons n x).
Lemma candidate_315: forall (n : natural) (lf4 : lst) (x : lst) (lf6 : lst), @eq lst   (rotate      (len match x with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end)      (lfappend x (Cons n lf6))) lf4.
Lemma candidate_316: forall (n : natural) (lf4 : lst) (x : lst) (lf6 : lst), @eq lst (rotate (len (lfappend lf6 x)) (lfappend x (Cons n lf6))) lf4.
Lemma candidate_317: forall (n : natural) (lf4 : lst) (x : lst) (lf6 : lst), @eq lst (rotate (len (rotate n x)) (lfappend x (Cons n lf6))) lf4.
Lemma candidate_318: forall (n : natural) (lf4 : lst) (x : lst) (lf6 : lst), @eq lst (rotate (len (lfappend x lf6)) (lfappend x (Cons n lf6))) lf4.
Lemma candidate_319: forall (n : natural) (lf4 : lst) (x : lst) (lf6 : lst), @eq lst (rotate (len (lfappend x Nil)) (lfappend x (Cons n lf6))) lf4.
Lemma candidate_320: forall (n : natural) (lf4 : lst) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend x (Cons n lf6))) lf4.
Lemma candidate_321: forall (lf4 : lst) (x : lst), @eq lst   (rotate (len x)      (match rotate (len lf4) lf4 with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end))   lf4.
Lemma candidate_322: forall (lf4 : lst) (x : lst), @eq lst   (rotate (len x)      (rotate (len lf4) match lf4 with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end))   lf4.
Lemma candidate_323: forall (lf4 : lst) (x : lst), @eq lst   (rotate (len x)      (match lfappend lf4 Nil with | Nil => Nil | Cons y x => rotate (len lf4) (lfappend x (Cons y Nil)) end))   lf4.
Lemma candidate_324: forall (lf4 : lst) (x : lst), @eq lst   (rotate (len x)      (match lf4 with | Nil => Nil | Cons y x => rotate (len lf4) (lfappend x (Cons y Nil)) end))   lf4.
Lemma candidate_325: forall (lf4 : lst) (x : lst), @eq lst   (rotate (len x)      (match lfappend lf4 Nil with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end))   lf4.
Lemma candidate_326: forall (lf4 : lst) (x : lst), @eq lst   (rotate (len x)      (match lf4 with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end))   lf4.
Lemma candidate_327: forall (lf4 : lst), @eq lst (lfappend lf4 (rotate (len lf4) Nil)) lf4.
Lemma candidate_328: forall (lf4 : lst), @eq lst (lfappend (lfappend lf4 Nil) Nil) lf4.
Lemma candidate_329: forall (lf4 : lst), @eq lst (rotate (len lf4) (lfappend lf4 Nil)) lf4.
Lemma candidate_330: forall (lf4 : lst), @eq lst (rotate (len lf4) lf4) lf4.
Lemma candidate_331: forall (lf4 : lst), @eq lst (lfappend lf4 Nil) lf4.
Lemma candidate_332: forall (lf4 : lst), @eq lst (lf4) lf4.
Lemma candidate_333: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (Cons n (lfappend lf6 Nil)).
Lemma candidate_334: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (Cons n (rotate n Nil)).
Lemma candidate_335: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (lfappend lf6 (Cons n Nil)).
Lemma candidate_336: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (rotate n (Cons n Nil)).
Lemma candidate_337: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (Cons n lf6).
Lemma candidate_338: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (Cons n Nil).
Lemma candidate_339: forall (x : lst), @eq natural (len x) (len (rotate (len x) (lfappend x Nil))).
Lemma candidate_340: forall (x : lst), @eq natural (len x)   (len match lfappend x Nil with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end).
Lemma candidate_341: forall (x : lst), @eq natural (len x) (len (rotate (len x) x)).
Lemma candidate_342: forall (x : lst), @eq natural (len x)   (len match x with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end).
Lemma candidate_343: forall (x : lst), @eq natural (len x) (len (lfappend x Nil)).
Lemma candidate_344: forall (x : lst), @eq natural (len x) (len x).
Lemma candidate_345: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend x (Cons n lf6)) (lfappend x (Cons n (rotate n Nil))).
Lemma candidate_346: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend x (Cons n lf6)) (lfappend lf6 (lfappend x (Cons n Nil))).
Lemma candidate_347: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend x (Cons n lf6)) (lfappend x (lfappend lf6 (Cons n Nil))).
Lemma candidate_348: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend x (Cons n lf6)) (lfappend x (rotate n (Cons n Nil))).
Lemma candidate_349: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend x (Cons n lf6)) (lfappend x (Cons n lf6)).
Lemma candidate_350: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend x (Cons n lf6)) (lfappend x (Cons n Nil)).
Lemma candidate_351: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend x (Cons n lf6)))   (rotate (len lf6) (Cons n x)).
Lemma candidate_352: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend x (Cons n lf6))) (Cons n (lfappend lf6 x)).
Lemma candidate_353: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend x (Cons n lf6))) (lfappend lf6 (Cons n x)).
Lemma candidate_354: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend x (Cons n lf6))) (Cons n (lfappend x lf6)).
Lemma candidate_355: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend x (Cons n lf6))) (Cons n (lfappend x Nil)).
Lemma candidate_356: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend x (Cons n lf6))) (Cons n x).
Lemma candidate_357: forall (lf4 : lst) (x : lst), @eq lst   (rotate (len x)      (match rotate (len lf4) lf4 with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end))   lf4.
Lemma candidate_358: forall (lf4 : lst) (x : lst), @eq lst   (rotate (len x)      (rotate (len lf4) match lf4 with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end))   lf4.
Lemma candidate_359: forall (lf4 : lst) (x : lst), @eq lst   (rotate (len x)      (match lfappend lf4 Nil with | Nil => Nil | Cons y x => rotate (len lf4) (lfappend x (Cons y Nil)) end))   lf4.
Lemma candidate_360: forall (lf4 : lst) (x : lst), @eq lst   (rotate (len x)      (match lf4 with | Nil => Nil | Cons y x => rotate (len lf4) (lfappend x (Cons y Nil)) end))   lf4.
Lemma candidate_361: forall (lf4 : lst) (x : lst), @eq lst   (rotate (len x)      (match lfappend lf4 Nil with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end))   lf4.
Lemma candidate_362: forall (lf4 : lst) (x : lst), @eq lst   (rotate (len x)      (match lf4 with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end))   lf4.
Lemma candidate_363: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len (rotate (len x) x)) (lfappend x (Cons n Nil))) lf4.
Lemma candidate_364: forall (n : natural) (lf4 : lst) (x : lst), @eq lst   (rotate      (len match x with | Nil => Nil | Cons y x => rotate n (lfappend x (Cons y Nil)) end)      (lfappend x (Cons n Nil))) lf4.
Lemma candidate_365: forall (n : natural) (lf4 : lst) (x : lst), @eq lst   (rotate      (len match x with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end)      (lfappend x (Cons n Nil))) lf4.
Lemma candidate_366: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len (rotate n x)) (lfappend x (Cons n Nil))) lf4.
Lemma candidate_367: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len (lfappend x Nil)) (lfappend x (Cons n Nil))) lf4.
Lemma candidate_368: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n Nil))) lf4.
Lemma candidate_369: forall (lf4 : lst), @eq lst (lfappend lf4 (rotate (len lf4) Nil)) lf4.
Lemma candidate_370: forall (lf4 : lst), @eq lst (lfappend (lfappend lf4 Nil) Nil) lf4.
Lemma candidate_371: forall (lf4 : lst), @eq lst (rotate (len lf4) (lfappend lf4 Nil)) lf4.
Lemma candidate_372: forall (lf4 : lst), @eq lst (rotate (len lf4) lf4) lf4.
Lemma candidate_373: forall (lf4 : lst), @eq lst (lfappend lf4 Nil) lf4.
Lemma candidate_374: forall (lf4 : lst), @eq lst (lf4) lf4.
Lemma candidate_375: forall (n : natural) (lf4 : lst) (x : lst), @eq lst   (rotate (len x)      (lfappend x         (Cons n            (match rotate n Nil with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end))))   lf4.
Lemma candidate_376: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n (rotate n (rotate n Nil))))) lf4.
Lemma candidate_377: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n (rotate (len lf4) Nil)))) lf4.
Lemma candidate_378: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n (rotate (len x) Nil)))) lf4.
Lemma candidate_379: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n (rotate n Nil)))) lf4.
Lemma candidate_380: forall (n : natural) (lf4 : lst) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n (Nil)))) lf4.
Lemma candidate_381: forall (n : natural) (x : lst), @eq lst (lfappend x (Cons n Nil))   (lfappend (lfappend x Nil) (rotate n (Cons n Nil))).
Lemma candidate_382: forall (n : natural) (x : lst), @eq lst (lfappend x (Cons n Nil)) (lfappend (lfappend x Nil) (Cons n Nil)).
Lemma candidate_383: forall (n : natural) (x : lst), @eq lst (lfappend x (Cons n Nil)) (lfappend x (rotate (len x) (Cons n Nil))).
Lemma candidate_384: forall (n : natural) (x : lst), @eq lst (lfappend x (Cons n Nil)) (lfappend x (Cons n (rotate n Nil))).
Lemma candidate_385: forall (n : natural) (x : lst), @eq lst (lfappend x (Cons n Nil)) (lfappend x (rotate n (Cons n Nil))).
Lemma candidate_386: forall (n : natural) (x : lst), @eq lst (lfappend x (Cons n Nil)) (lfappend x (Cons n Nil)).
Lemma candidate_387: forall (x : lst), @eq natural (len x) (len (rotate (len x) (lfappend x Nil))).
Lemma candidate_388: forall (x : lst), @eq natural (len x)   (len match lfappend x Nil with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end).
Lemma candidate_389: forall (x : lst), @eq natural (len x) (len (rotate (len x) x)).
Lemma candidate_390: forall (x : lst), @eq natural (len x)   (len match x with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end).
Lemma candidate_391: forall (x : lst), @eq natural (len x) (len (lfappend x Nil)).
Lemma candidate_392: forall (x : lst), @eq natural (len x) (len x).
Lemma candidate_393: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n Nil)))   (rotate (len x) (lfappend x (Cons n Nil))).
Lemma candidate_394: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n Nil)))   (Cons n (rotate (len x) (lfappend x Nil))).
Lemma candidate_395: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n Nil)))   (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_396: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n Nil)))   (Cons n (rotate (len x) x)).
Lemma candidate_397: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n Nil))) (Cons n (lfappend x Nil)).
Lemma candidate_398: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n Nil))) (Cons n x).
Lemma candidate_399: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n (rotate n Nil))).
Lemma candidate_400: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n (rotate n Nil))).
Lemma candidate_401: forall (n : natural), @eq lst (Cons n Nil) (rotate n (rotate n (Cons n Nil))).
Lemma candidate_402: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n Nil)).
Lemma candidate_403: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n Nil)).
Lemma candidate_404: forall (n : natural), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_405: @eq lst Nil (Nil).
Lemma candidate_406: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (rotate (len x) (Cons n Nil)))) (Cons n x).
Lemma candidate_407: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n (rotate n Nil)))) (Cons n x).
Lemma candidate_408: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (rotate n (Cons n Nil)))) (Cons n x).
Lemma candidate_409: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (rotate lf5 (Cons n Nil)))) (Cons n x).
Lemma candidate_410: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n (rotate lf5 Nil)))) (Cons n x).
Lemma candidate_411: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil))) (Cons n x).
Lemma candidate_412: forall (n : natural) (x : lst) (lf5 : natural) (lf6 : lst), @eq lst (rotate lf5 (lfappend x (Cons n lf6))) (Cons n (lfappend lf6 x)).
Lemma candidate_413: forall (n : natural) (x : lst) (lf5 : natural) (lf6 : lst), @eq lst (rotate lf5 (lfappend x (Cons n lf6))) (lfappend lf6 (Cons n x)).
Lemma candidate_414: forall (n : natural) (x : lst) (lf5 : natural) (lf6 : lst), @eq lst (rotate lf5 (lfappend x (Cons n lf6))) (Cons n (rotate lf5 x)).
Lemma candidate_415: forall (n : natural) (x : lst) (lf5 : natural) (lf6 : lst), @eq lst (rotate lf5 (lfappend x (Cons n lf6))) (Cons n (lfappend x lf6)).
Lemma candidate_416: forall (n : natural) (x : lst) (lf5 : natural) (lf6 : lst), @eq lst (rotate lf5 (lfappend x (Cons n lf6))) (Cons n (lfappend x Nil)).
Lemma candidate_417: forall (n : natural) (x : lst) (lf5 : natural) (lf6 : lst), @eq lst (rotate lf5 (lfappend x (Cons n lf6))) (Cons n x).
Lemma candidate_418: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n Nil))) (Cons n x).
Lemma candidate_419: forall (n : natural) (x : lst), @eq lst (Cons n (rotate (len x) (lfappend x Nil))) (Cons n x).
Lemma candidate_420: forall (n : natural) (x : lst), @eq lst (Cons n (lfappend x (rotate n Nil))) (Cons n x).
Lemma candidate_421: forall (n : natural) (x : lst), @eq lst (Cons n (rotate (len x) x)) (Cons n x).
Lemma candidate_422: forall (n : natural) (x : lst), @eq lst (Cons n (lfappend x Nil)) (Cons n x).
Lemma candidate_423: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_424: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (rotate (len x) (Cons n Nil)))) (Cons n x).
Lemma candidate_425: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n (rotate n Nil)))) (Cons n x).
Lemma candidate_426: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (rotate n (Cons n Nil)))) (Cons n x).
Lemma candidate_427: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (rotate lf5 (Cons n Nil)))) (Cons n x).
Lemma candidate_428: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n (rotate lf5 Nil)))) (Cons n x).
Lemma candidate_429: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil))) (Cons n x).
Lemma candidate_430: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (Cons n (lfappend lf6 Nil)).
Lemma candidate_431: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (Cons n (rotate n Nil)).
Lemma candidate_432: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (lfappend lf6 (Cons n Nil)).
Lemma candidate_433: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (rotate n (Cons n Nil)).
Lemma candidate_434: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (Cons n lf6).
Lemma candidate_435: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (Cons n Nil).
Lemma candidate_436: forall (n : natural) (x : lst), @eq lst (Cons n x) (rotate (len x) (lfappend x (Cons n Nil))).
Lemma candidate_437: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) (lfappend x Nil))).
Lemma candidate_438: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_439: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) x)).
Lemma candidate_440: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_441: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_442: forall (n : natural) (x : lst) (lf5 : natural) (lf6 : lst), @eq lst (rotate lf5 (lfappend x (Cons n lf6))) (Cons n (lfappend lf6 x)).
Lemma candidate_443: forall (n : natural) (x : lst) (lf5 : natural) (lf6 : lst), @eq lst (rotate lf5 (lfappend x (Cons n lf6))) (lfappend lf6 (Cons n x)).
Lemma candidate_444: forall (n : natural) (x : lst) (lf5 : natural) (lf6 : lst), @eq lst (rotate lf5 (lfappend x (Cons n lf6))) (Cons n (rotate lf5 x)).
Lemma candidate_445: forall (n : natural) (x : lst) (lf5 : natural) (lf6 : lst), @eq lst (rotate lf5 (lfappend x (Cons n lf6))) (Cons n (lfappend x lf6)).
Lemma candidate_446: forall (n : natural) (x : lst) (lf5 : natural) (lf6 : lst), @eq lst (rotate lf5 (lfappend x (Cons n lf6))) (Cons n (lfappend x Nil)).
Lemma candidate_447: forall (n : natural) (x : lst) (lf5 : natural) (lf6 : lst), @eq lst (rotate lf5 (lfappend x (Cons n lf6))) (Cons n x).
Lemma candidate_448: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend x (Cons n lf6)) (lfappend x (Cons n (rotate n Nil))).
Lemma candidate_449: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend x (Cons n lf6)) (lfappend lf6 (lfappend x (Cons n Nil))).
Lemma candidate_450: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend x (Cons n lf6)) (lfappend x (lfappend lf6 (Cons n Nil))).
Lemma candidate_451: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend x (Cons n lf6)) (lfappend x (rotate n (Cons n Nil))).
Lemma candidate_452: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend x (Cons n lf6)) (lfappend x (Cons n lf6)).
Lemma candidate_453: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend x (Cons n lf6)) (lfappend x (Cons n Nil)).
Lemma candidate_454: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (rotate (len x) (Cons n Nil)))) (Cons n x).
Lemma candidate_455: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n (rotate n Nil)))) (Cons n x).
Lemma candidate_456: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (rotate n (Cons n Nil)))) (Cons n x).
Lemma candidate_457: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (rotate lf5 (Cons n Nil)))) (Cons n x).
Lemma candidate_458: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n (rotate lf5 Nil)))) (Cons n x).
Lemma candidate_459: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil))) (Cons n x).
Lemma candidate_460: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil)))   (Cons n (lfappend x (rotate lf5 Nil))).
Lemma candidate_461: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil))) (Cons n (rotate (len x) x)).
Lemma candidate_462: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil)))   (rotate lf5 (lfappend x (Cons n Nil))).
Lemma candidate_463: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil))) (Cons n (rotate lf5 x)).
Lemma candidate_464: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil))) (Cons n (lfappend x Nil)).
Lemma candidate_465: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil))) (Cons n x).
Lemma candidate_466: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (rotate (len x) (Cons n Nil)))) (Cons n x).
Lemma candidate_467: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n (rotate n Nil)))) (Cons n x).
Lemma candidate_468: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (rotate n (Cons n Nil)))) (Cons n x).
Lemma candidate_469: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (rotate lf5 (Cons n Nil)))) (Cons n x).
Lemma candidate_470: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n (rotate lf5 Nil)))) (Cons n x).
Lemma candidate_471: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil))) (Cons n x).
Lemma candidate_472: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n (rotate n (rotate lf5 Nil)))))   (Cons n x).
Lemma candidate_473: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n (rotate lf5 (rotate lf5 Nil)))))   (Cons n x).
Lemma candidate_474: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n (rotate (len x) Nil)))) (Cons n x).
Lemma candidate_475: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n (rotate n Nil)))) (Cons n x).
Lemma candidate_476: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n (rotate lf5 Nil)))) (Cons n x).
Lemma candidate_477: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n (Nil)))) (Cons n x).
Lemma candidate_478: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n Nil))) (Cons n x).
Lemma candidate_479: forall (n : natural) (x : lst), @eq lst (Cons n (rotate (len x) (lfappend x Nil))) (Cons n x).
Lemma candidate_480: forall (n : natural) (x : lst), @eq lst (Cons n (lfappend x (rotate n Nil))) (Cons n x).
Lemma candidate_481: forall (n : natural) (x : lst), @eq lst (Cons n (rotate (len x) x)) (Cons n x).
Lemma candidate_482: forall (n : natural) (x : lst), @eq lst (Cons n (lfappend x Nil)) (Cons n x).
Lemma candidate_483: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_484: forall (n : natural) (x : lst), @eq lst (lfappend x (Cons n Nil))   (lfappend (lfappend x Nil) (rotate n (Cons n Nil))).
Lemma candidate_485: forall (n : natural) (x : lst), @eq lst (lfappend x (Cons n Nil)) (lfappend (lfappend x Nil) (Cons n Nil)).
Lemma candidate_486: forall (n : natural) (x : lst), @eq lst (lfappend x (Cons n Nil)) (lfappend x (rotate (len x) (Cons n Nil))).
Lemma candidate_487: forall (n : natural) (x : lst), @eq lst (lfappend x (Cons n Nil)) (lfappend x (Cons n (rotate n Nil))).
Lemma candidate_488: forall (n : natural) (x : lst), @eq lst (lfappend x (Cons n Nil)) (lfappend x (rotate n (Cons n Nil))).
Lemma candidate_489: forall (n : natural) (x : lst), @eq lst (lfappend x (Cons n Nil)) (lfappend x (Cons n Nil)).
Lemma candidate_490: forall (n : natural) (x : lst), @eq lst (Cons n x) (rotate (len x) (lfappend x (Cons n Nil))).
Lemma candidate_491: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) (lfappend x Nil))).
Lemma candidate_492: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_493: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) x)).
Lemma candidate_494: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_495: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_496: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n (rotate n Nil))).
Lemma candidate_497: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n (rotate n Nil))).
Lemma candidate_498: forall (n : natural), @eq lst (Cons n Nil) (rotate n (rotate n (Cons n Nil))).
Lemma candidate_499: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n Nil)).
Lemma candidate_500: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n Nil)).
Lemma candidate_501: forall (n : natural), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_502: @eq lst Nil (Nil).
Lemma candidate_503: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil)))   (Cons n (lfappend x (rotate lf5 Nil))).
Lemma candidate_504: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil))) (Cons n (rotate (len x) x)).
Lemma candidate_505: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil)))   (rotate lf5 (lfappend x (Cons n Nil))).
Lemma candidate_506: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil))) (Cons n (rotate lf5 x)).
Lemma candidate_507: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil))) (Cons n (lfappend x Nil)).
Lemma candidate_508: forall (n : natural) (x : lst) (lf5 : natural), @eq lst (rotate lf5 (lfappend x (Cons n Nil))) (Cons n x).
Lemma candidate_509: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (rotate n (rotate n (Cons n Nil)))))   (Cons n x).
Lemma candidate_510: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n (rotate (len x) Nil))))   (Cons n x).
Lemma candidate_511: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (rotate (len x) (Cons n Nil))))   (Cons n x).
Lemma candidate_512: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n (rotate n Nil)))) (Cons n x).
Lemma candidate_513: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (rotate n (Cons n Nil)))) (Cons n x).
Lemma candidate_514: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n Nil))) (Cons n x).
Lemma candidate_515: forall (n : natural) (x : lst) (lf6 : lst), @eq lst   (rotate      (len match x with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end)      (lfappend x (Cons n lf6))) (Cons n x).
Lemma candidate_516: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (rotate (len (lfappend lf6 x)) (lfappend x (Cons n lf6))) (Cons n x).
Lemma candidate_517: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (rotate (len (rotate n x)) (lfappend x (Cons n lf6))) (Cons n x).
Lemma candidate_518: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (rotate (len (lfappend x lf6)) (lfappend x (Cons n lf6))) (Cons n x).
Lemma candidate_519: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (rotate (len (lfappend x Nil)) (lfappend x (Cons n lf6))) (Cons n x).
Lemma candidate_520: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend x (Cons n lf6))) (Cons n x).
Lemma candidate_521: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend x (Cons n lf6)))   (rotate (len lf6) (Cons n x)).
Lemma candidate_522: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend x (Cons n lf6))) (Cons n (lfappend lf6 x)).
Lemma candidate_523: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend x (Cons n lf6))) (lfappend lf6 (Cons n x)).
Lemma candidate_524: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend x (Cons n lf6))) (Cons n (lfappend x lf6)).
Lemma candidate_525: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend x (Cons n lf6))) (Cons n (lfappend x Nil)).
Lemma candidate_526: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend x (Cons n lf6))) (Cons n x).
Lemma candidate_527: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x Nil) (rotate n (Cons n Nil))))   (Cons n x).
Lemma candidate_528: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x Nil) (Cons n Nil))) (Cons n x).
Lemma candidate_529: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (rotate (len x) (Cons n Nil))))   (Cons n x).
Lemma candidate_530: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n (rotate n Nil)))) (Cons n x).
Lemma candidate_531: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (rotate n (Cons n Nil)))) (Cons n x).
Lemma candidate_532: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n Nil))) (Cons n x).
Lemma candidate_533: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n Nil))) (Cons n x).
Lemma candidate_534: forall (n : natural) (x : lst), @eq lst (Cons n (rotate (len x) (lfappend x Nil))) (Cons n x).
Lemma candidate_535: forall (n : natural) (x : lst), @eq lst (Cons n (lfappend x (rotate n Nil))) (Cons n x).
Lemma candidate_536: forall (n : natural) (x : lst), @eq lst (Cons n (rotate (len x) x)) (Cons n x).
Lemma candidate_537: forall (n : natural) (x : lst), @eq lst (Cons n (lfappend x Nil)) (Cons n x).
Lemma candidate_538: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_539: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (Cons n (lfappend lf6 Nil)).
Lemma candidate_540: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (Cons n (rotate n Nil)).
Lemma candidate_541: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (lfappend lf6 (Cons n Nil)).
Lemma candidate_542: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (rotate n (Cons n Nil)).
Lemma candidate_543: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (Cons n lf6).
Lemma candidate_544: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (Cons n Nil).
Lemma candidate_545: forall (x : lst), @eq natural (len x) (len (rotate (len x) (lfappend x Nil))).
Lemma candidate_546: forall (x : lst), @eq natural (len x)   (len match lfappend x Nil with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end).
Lemma candidate_547: forall (x : lst), @eq natural (len x) (len (rotate (len x) x)).
Lemma candidate_548: forall (x : lst), @eq natural (len x)   (len match x with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end).
Lemma candidate_549: forall (x : lst), @eq natural (len x) (len (lfappend x Nil)).
Lemma candidate_550: forall (x : lst), @eq natural (len x) (len x).
Lemma candidate_551: forall (n : natural) (x : lst), @eq lst (Cons n x) (rotate (len x) (lfappend x (Cons n Nil))).
Lemma candidate_552: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) (lfappend x Nil))).
Lemma candidate_553: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_554: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) x)).
Lemma candidate_555: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_556: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_557: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend x (Cons n lf6)) (lfappend x (Cons n (rotate n Nil))).
Lemma candidate_558: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend x (Cons n lf6)) (lfappend lf6 (lfappend x (Cons n Nil))).
Lemma candidate_559: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend x (Cons n lf6)) (lfappend x (lfappend lf6 (Cons n Nil))).
Lemma candidate_560: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend x (Cons n lf6)) (lfappend x (rotate n (Cons n Nil))).
Lemma candidate_561: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend x (Cons n lf6)) (lfappend x (Cons n lf6)).
Lemma candidate_562: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend x (Cons n lf6)) (lfappend x (Cons n Nil)).
Lemma candidate_563: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend x (Cons n lf6)))   (rotate (len lf6) (Cons n x)).
Lemma candidate_564: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend x (Cons n lf6))) (Cons n (lfappend lf6 x)).
Lemma candidate_565: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend x (Cons n lf6))) (lfappend lf6 (Cons n x)).
Lemma candidate_566: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend x (Cons n lf6))) (Cons n (lfappend x lf6)).
Lemma candidate_567: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend x (Cons n lf6))) (Cons n (lfappend x Nil)).
Lemma candidate_568: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend x (Cons n lf6))) (Cons n x).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 2307 seconds
Duplicates removed: 387
Filtered by Quickchick: 100
Filtered by script: 22
Remaining: 59

Lemmas: 
Lemma candidate_18: forall (lf4 : lst), @eq lst (lfappend lf4 Nil) lf4.
Lemma candidate_6: forall (lf1 : lst), @eq lst lf1 (lfappend lf1 Nil).
Lemma candidate_60: forall (x : lst), @eq natural (len x) (len (lfappend x Nil)).
Lemma candidate_306: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n Nil)).
Lemma candidate_305: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n Nil)).
Lemma candidate_108: forall (n : natural) (x : lst), @eq lst (Cons n (lfappend x Nil)) (Cons n x).
Lemma candidate_12: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_15: forall (lf4 : lst), @eq lst (lfappend (lfappend lf4 Nil) Nil) lf4.
Lemma candidate_3: forall (lf1 : lst), @eq lst lf1 (lfappend (lfappend lf1 Nil) Nil).
Lemma candidate_260: forall (n : natural) (lf6 : lst), @eq lst (Cons n lf6) (Cons n (lfappend lf6 Nil)).
Lemma candidate_16: forall (lf4 : lst), @eq lst (rotate (len lf4) (lfappend lf4 Nil)) lf4.
Lemma candidate_14: forall (lf4 : lst), @eq lst (lfappend lf4 (rotate (len lf4) Nil)) lf4.
Lemma candidate_4: forall (lf1 : lst), @eq lst lf1 (rotate (len lf1) (lfappend lf1 Nil)).
Lemma candidate_2: forall (lf1 : lst), @eq lst lf1 (lfappend lf1 (rotate (len lf1) Nil)).
Lemma candidate_304: forall (n : natural), @eq lst (Cons n Nil) (rotate n (rotate n (Cons n Nil))).
Lemma candidate_303: forall (n : natural), @eq lst (Cons n Nil) (rotate n (Cons n (rotate n Nil))).
Lemma candidate_302: forall (n : natural), @eq lst (Cons n Nil) (Cons n (rotate n (rotate n Nil))).
Lemma candidate_106: forall (n : natural) (x : lst), @eq lst (Cons n (lfappend x (rotate n Nil))) (Cons n x).
Lemma candidate_10: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_42: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend x (lfappend lf3 Nil)).
Lemma candidate_39: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend (lfappend x lf3) Nil).
Lemma candidate_38: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend (lfappend x Nil) lf3).
Lemma candidate_24: forall (lf5 : natural) (lf2 : lst), @eq lst (rotate lf5 lf2) (rotate lf5 (lfappend lf2 Nil)).
Lemma candidate_21: forall (lf5 : natural) (lf2 : lst), @eq lst (rotate lf5 lf2) (lfappend (rotate lf5 lf2) Nil).
Lemma candidate_103: forall (lf3 : lst) (x : lst), @eq lst (rotate (len x) (lfappend x lf3)) (lfappend lf3 x).
Lemma candidate_56: forall (x : lst), @eq natural (len x) (len (rotate (len x) (lfappend x Nil))).
Lemma candidate_40: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (rotate (len lf3) (lfappend lf3 x)).
Lemma candidate_22: forall (lf5 : natural) (lf2 : lst), @eq lst (rotate lf5 lf2) (rotate (len lf2) (rotate lf5 lf2)).
Lemma candidate_105: forall (n : natural) (x : lst), @eq lst (Cons n (rotate (len x) (lfappend x Nil))) (Cons n x).
Lemma candidate_9: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rotate (len x) (lfappend x Nil))).
Lemma candidate_8: forall (n : natural) (x : lst), @eq lst (Cons n x) (rotate (len x) (lfappend x (Cons n Nil))).
Lemma candidate_66: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len x) (lfappend lf2 Nil)).
Lemma candidate_64: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2) (rotate (len lf2) (rotate (len x) lf2)).
Lemma candidate_300: forall (n : natural) (x : lst), @eq lst (lfappend x (Cons n Nil)) (lfappend x (rotate n (Cons n Nil))).
Lemma candidate_299: forall (n : natural) (x : lst), @eq lst (lfappend x (Cons n Nil)) (lfappend x (Cons n (rotate n Nil))).
Lemma candidate_216: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (rotate n (Cons n Nil)))) (Cons n x).
Lemma candidate_215: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n (rotate n Nil)))) (Cons n x).
Lemma candidate_102: forall (lf3 : lst) (x : lst), @eq lst (rotate (len x) (lfappend x lf3)) (lfappend lf3 (lfappend x Nil)).
Lemma candidate_100: forall (lf3 : lst) (x : lst), @eq lst (rotate (len x) (lfappend x lf3)) (lfappend (lfappend lf3 x) Nil).
Lemma candidate_99: forall (lf3 : lst) (x : lst), @eq lst (rotate (len x) (lfappend x lf3)) (lfappend (lfappend lf3 Nil) x).
Lemma candidate_297: forall (n : natural) (x : lst), @eq lst (lfappend x (Cons n Nil)) (lfappend (lfappend x Nil) (Cons n Nil)).
Lemma candidate_98: forall (lf3 : lst) (x : lst), @eq lst (rotate (len x) (lfappend x lf3)) (lfappend lf3 (rotate (len x) x)).
Lemma candidate_397: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n Nil))) (Cons n (lfappend x Nil)).
Lemma candidate_352: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (rotate (len x) (lfappend x (Cons n lf6))) (Cons n (lfappend lf6 x)).
Lemma candidate_298: forall (n : natural) (x : lst), @eq lst (lfappend x (Cons n Nil)) (lfappend x (rotate (len x) (Cons n Nil))).
Lemma candidate_213: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x Nil) (Cons n Nil))) (Cons n x).
Lemma candidate_510: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n (rotate (len x) Nil))))   (Cons n x).
Lemma candidate_396: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n Nil)))   (Cons n (rotate (len x) x)).
Lemma candidate_214: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (rotate (len x) (Cons n Nil))))   (Cons n x).
Lemma candidate_509: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (rotate n (rotate n (Cons n Nil)))))   (Cons n x).
Lemma candidate_63: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2)   (rotate (len x) (rotate (len lf2) (lfappend lf2 Nil))).
Lemma candidate_62: forall (x : lst) (lf2 : lst), @eq lst (rotate (len x) lf2)   (rotate (len lf2) (rotate (len x) (lfappend lf2 Nil))).
Lemma candidate_296: forall (n : natural) (x : lst), @eq lst (lfappend x (Cons n Nil))   (lfappend (lfappend x Nil) (rotate n (Cons n Nil))).
Lemma candidate_395: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n Nil)))   (Cons n (lfappend x (rotate n Nil))).
Lemma candidate_212: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend (lfappend x Nil) (rotate n (Cons n Nil))))   (Cons n x).
Lemma candidate_394: forall (n : natural) (x : lst), @eq lst (rotate (len x) (lfappend x (Cons n Nil)))   (Cons n (rotate (len x) (lfappend x Nil))).
Lemma candidate_59: forall (x : lst), @eq natural (len x)   (len match x with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end).
Lemma candidate_57: forall (x : lst), @eq natural (len x)   (len match lfappend x Nil with | Nil => Nil | Cons y x => lfappend x (Cons y Nil) end).
Lemma candidate_29: forall (lf4 : lst) (lf5 : natural), @eq lst   (rotate lf5      (match lf4 with | Nil => Nil | Cons y x => match lfappend x (Cons y Nil) with | Nil => Nil | Cons y0 x0 => rotate lf5 (lfappend x0 (Cons y0 Nil)) end end))   lf4.