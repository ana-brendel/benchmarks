File Information
- File name: goal38
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal38_theorem0_54_goal36
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal38_theorem0_54_goal36
- Namespace: adtind
- Proof name: theorem0
- Theorem: Theorem theorem0: forall (x0 : natural) (y0 z0 : lst)
  (_ : or (@eq bool (lfmem y0 x0) true) (@eq bool (lfmem z0 x0) true)),
@eq bool (lfmem (lfappend y0 z0) x0) true.
- Declarations: 
From lfind Require Import LFind.
Require Import Arith.

Proof Context
* Goal State: @eq bool (lfmem (lfappend y z) x) true

* Hypothesis:
x : natural
H : @eq bool (lfmem y x) true
y : lst
z : lst

* Types:
Set
natural
Prop
lst
bool

* Polymorphic Types:


* Variables:
x : natural
y : lst
z : lst

* Terms:
@eq bool (lfmem y x) true : Prop
bool : Set
x : natural
@eq bool (lfmem (lfappend y z) x) true : Prop
lst : Set
y : lst
lfmem y x : bool
z : lst
true : bool
natural : Set
lfappend y z : lst
lfmem (lfappend y z) x : bool

* Functions:
lfmem  : forall (_ : lst) (_ : natural), bool
lfappend  : forall (_ : lst) (_ : lst), lst
@eq  : forall (A : Type) (_ : A) (_ : A), Prop

<---GENERALIZATION--->
Time elapsed: 2 seconds
Generalized Variables:
lf3 : bool = true
lf1 : bool = lfmem (lfappend y z) x
lf2 : lst = lfappend y z

Generalizations:
Lemma conj1: forall (lf1 : bool) (lf3 : bool), @eq bool lf1 lf3.
Lemma conj3: forall (lf2 : lst) (x : natural) (lf3 : bool), @eq bool (lfmem lf2 x) lf3.
Lemma conj4: forall (x : natural) (y : lst) (z : lst) (lf3 : bool), @eq bool (lfmem (lfappend y z) x) lf3.
Lemma conj5: forall (lf1 : bool), @eq bool lf1 true.
Lemma conj7: forall (lf2 : lst) (x : natural), @eq bool (lfmem lf2 x) true.
Lemma conj8: forall (x : natural) (y : lst) (z : lst), @eq bool (lfmem (lfappend y z) x) true.


<---VALIDITY CHECKS--->
Time elapsed: 11 seconds
Valid:

Invalid:
Lemma conj8: forall (x : natural) (y : lst) (z : lst), @eq bool (lfmem (lfappend y z) x) true.
Lemma conj7: forall (lf2 : lst) (x : natural), @eq bool (lfmem lf2 x) true.
Lemma conj5: forall (lf1 : bool), @eq bool lf1 true.
Lemma conj4: forall (x : natural) (y : lst) (z : lst) (lf3 : bool), @eq bool (lfmem (lfappend y z) x) lf3.
Lemma conj3: forall (lf2 : lst) (x : natural) (lf3 : bool), @eq bool (lfmem lf2 x) lf3.
Lemma conj1: forall (lf1 : bool) (lf3 : bool), @eq bool lf1 lf3.

<---ADD IMPLICATIONS--->
Time elapsed: 19 seconds
Generalizations:
Lemma conj8: forall (x : natural) (y : lst) (z : lst), @eq bool (lfmem (lfappend y z) x) true.
Lemma conj8_imp: forall (x : natural) (y : lst) (z : lst), forall _ : @eq bool (lfmem y x) true, @eq bool (lfmem (lfappend y z) x) true.
Lemma conj7: forall (lf2 : lst) (x : natural), @eq bool (lfmem lf2 x) true.
Lemma conj5: forall (lf1 : bool), @eq bool lf1 true.
Lemma conj4: forall (x : natural) (y : lst) (z : lst) (lf3 : bool), @eq bool (lfmem (lfappend y z) x) lf3.
Lemma conj4_imp: forall (x : natural) (y : lst) (z : lst) (lf3 : bool), forall _ : @eq bool (lfmem y x) lf3, @eq bool (lfmem (lfappend y z) x) lf3.
Lemma conj3: forall (lf2 : lst) (x : natural) (lf3 : bool), @eq bool (lfmem lf2 x) lf3.
Lemma conj1: forall (lf1 : bool) (lf3 : bool), @eq bool lf1 lf3.


<---VALIDITY CHECKS--->
Time elapsed: 30 seconds
Valid:
Lemma conj8_imp: forall (x : natural) (y : lst) (z : lst), forall _ : @eq bool (lfmem y x) true, @eq bool (lfmem (lfappend y z) x) true.

Invalid:
Lemma conj1: forall (lf1 : bool) (lf3 : bool), @eq bool lf1 lf3.
Lemma conj3: forall (lf2 : lst) (x : natural) (lf3 : bool), @eq bool (lfmem lf2 x) lf3.
Lemma conj4_imp: forall (x : natural) (y : lst) (z : lst) (lf3 : bool), forall _ : @eq bool (lfmem y x) lf3, @eq bool (lfmem (lfappend y z) x) lf3.
Lemma conj4: forall (x : natural) (y : lst) (z : lst) (lf3 : bool), @eq bool (lfmem (lfappend y z) x) lf3.
Lemma conj5: forall (lf1 : bool), @eq bool lf1 true.
Lemma conj7: forall (lf2 : lst) (x : natural), @eq bool (lfmem lf2 x) true.
Lemma conj8: forall (x : natural) (y : lst) (z : lst), @eq bool (lfmem (lfappend y z) x) true.


<---CREATE SKETCHES--->
Time elapsed: 30 seconds
Sketches:
Sketch conj3_sketch0 : @eq bool (##hole##) lf3
Sketch conj3_term_sketch0 : @eq bool (lfmem lf2 x) (##hole##)
Sketch conj4_imp_sketch0 : forall _ : @eq bool (##hole##) lf3, @eq bool (lfmem (lfappend y z) x) lf3
Sketch conj4_imp_sketch1 : forall _ : @eq bool (lfmem y x) lf3, @eq bool (lfmem (##hole##) x) lf3
Sketch conj4_imp_sketch2 : forall _ : @eq bool (lfmem y x) lf3, @eq bool (##hole##) lf3
Sketch conj4_imp_term_sketch0 : @eq bool (lfmem y x) (##hole##)
Sketch conj4_imp_term_sketch1 : @eq lst (lfappend y z) (##hole##)
Sketch conj4_imp_term_sketch2 : @eq bool (lfmem (lfappend y z) x) (##hole##)
Sketch conj4_sketch0 : @eq bool (lfmem (##hole##) x) lf3
Sketch conj4_sketch1 : @eq bool (##hole##) lf3
Sketch conj4_term_sketch0 : @eq lst (lfappend y z) (##hole##)
Sketch conj4_term_sketch1 : @eq bool (lfmem (lfappend y z) x) (##hole##)
Sketch conj5_sketch0 : @eq bool lf1 (##hole##)
Sketch conj5_term_sketch0 : @eq bool true (##hole##)
Sketch conj7_sketch0 : @eq bool (##hole##) true
Sketch conj7_sketch1 : @eq bool (lfmem lf2 x) (##hole##)
Sketch conj7_term_sketch0 : @eq bool (lfmem lf2 x) (##hole##)
Sketch conj7_term_sketch1 : @eq bool true (##hole##)
Sketch conj8_sketch0 : @eq bool (lfmem (lfappend y z) x) (##hole##)
Sketch conj8_sketch1 : @eq bool (lfmem (##hole##) x) true
Sketch conj8_sketch2 : @eq bool (##hole##) true
Sketch conj8_term_sketch0 : @eq bool true (##hole##)
Sketch conj8_term_sketch1 : @eq lst (lfappend y z) (##hole##)
Sketch conj8_term_sketch2 : @eq bool (lfmem (lfappend y z) x) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 35 seconds
Problems per Sketch:
Sketch conj4_imp_sketch2 --> Problem  synth_5
Sketch conj7_sketch1 --> Problem  synth_13
Sketch conj5_sketch0 --> Problem  synth_10
Sketch conj3_term_sketch0 --> Problem  synth_2
Sketch conj4_imp_term_sketch2 --> Problem  synth_8
Sketch conj7_term_sketch0 --> Problem  synth_2
Sketch conj4_imp_term_sketch0 --> Problem  synth_6
Sketch conj8_sketch1 --> Problem  synth_15
Sketch conj7_sketch0 --> Problem  synth_12
Sketch conj4_sketch0 --> Problem  synth_9
Sketch conj4_sketch1 --> Problem  synth_1
Sketch conj4_term_sketch1 --> Problem  synth_8
Sketch conj4_imp_sketch1 --> Problem  synth_4
Sketch conj8_term_sketch0 --> Problem  synth_11
Sketch conj4_imp_term_sketch1 --> Problem  synth_7
Sketch conj3_sketch0 --> Problem  synth_1
Sketch conj8_sketch2 --> Problem  synth_12
Sketch conj8_sketch0 --> Problem  synth_14
Sketch conj7_term_sketch1 --> Problem  synth_11
Sketch conj8_term_sketch1 --> Problem  synth_7
Sketch conj4_term_sketch0 --> Problem  synth_7
Sketch conj8_term_sketch2 --> Problem  synth_8
Sketch conj5_term_sketch0 --> Problem  synth_11
Sketch conj4_imp_sketch0 --> Problem  synth_3


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 129 seconds

Problem: synth_15
 Nil

Problem: synth_14
 orb match x with | Succ _ => false | Zero => true end (lfmem y Zero)
 orb match x with | Succ _ => false | Zero => true end false
 Neqb x x
 match x with | Succ _ => false | Zero => true end
 Neqb x Zero
 true

Problem: synth_10
 true

Problem: synth_8
 Neqb x (Succ Zero)
 lfmem z x
 lfmem y x
 lfmem z Zero
 lfmem y Zero
 false

Problem: synth_3
 Neqb x (Succ Zero)
 lfmem z x
 lfmem y x
 lfmem z Zero
 lfmem y Zero
 false

Problem: synth_9
 Nil

Problem: synth_13
 orb match x with | Succ _ => false | Zero => true end (lfmem lf2 Zero)
 orb match x with | Succ _ => false | Zero => true end false
 Neqb x x
 match x with | Succ _ => false | Zero => true end
 Neqb x Zero
 true

Problem: synth_12
 false

Problem: synth_6
 Neqb x (Succ x)
 lfmem y (Succ Zero)
 Neqb x (Succ Zero)
 lfmem y x
 lfmem y Zero
 false

Problem: synth_11
 true

Problem: synth_7
 lfappend y y
 lfappend z Nil
 lfappend y Nil
 z
 y
 Nil

Problem: synth_5
 Neqb x (Succ x)
 lfmem y (Succ Zero)
 Neqb x (Succ Zero)
 lfmem y x
 lfmem y Zero
 false

Problem: synth_4
 lfappend y (lfappend y y)
 lfappend y (lfappend y Nil)
 lfappend y y
 lfappend y Nil
 y
 Nil

Problem: synth_1
 false

Problem: synth_2
 Neqb x (Succ x)
 lfmem lf2 (Succ Zero)
 Neqb x (Succ Zero)
 lfmem lf2 x
 lfmem lf2 Zero
 false

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 129 seconds
Lemmas:
Lemma candidate_1: forall (z : lst) (y : lst) (x : natural), forall _ : @eq bool (lfmem y x) true, @eq bool (lfmem (lfappend y z) x) true.
Lemma candidate_2: forall (lf3 : bool), @eq bool (false) lf3.
Lemma candidate_3: forall (x : natural) (lf2 : lst), @eq bool (lfmem lf2 x) (Neqb x (Succ x)).
Lemma candidate_4: forall (x : natural) (lf2 : lst), @eq bool (lfmem lf2 x) (lfmem lf2 (Succ Zero)).
Lemma candidate_5: forall (x : natural) (lf2 : lst), @eq bool (lfmem lf2 x) (Neqb x (Succ Zero)).
Lemma candidate_6: forall (x : natural) (lf2 : lst), @eq bool (lfmem lf2 x) (lfmem lf2 x).
Lemma candidate_7: forall (x : natural) (lf2 : lst), @eq bool (lfmem lf2 x) (lfmem lf2 Zero).
Lemma candidate_8: forall (x : natural) (lf2 : lst), @eq bool (lfmem lf2 x) (false).
Lemma candidate_9: forall (lf3 : bool) (z : lst) (y : lst) (x : natural), forall _ : @eq bool (Neqb x (Succ Zero)) lf3, @eq bool (lfmem (lfappend y z) x) lf3.
Lemma candidate_10: forall (lf3 : bool) (z : lst) (y : lst) (x : natural), forall _ : @eq bool (lfmem z x) lf3, @eq bool (lfmem (lfappend y z) x) lf3.
Lemma candidate_11: forall (lf3 : bool) (z : lst) (y : lst) (x : natural), forall _ : @eq bool (lfmem y x) lf3, @eq bool (lfmem (lfappend y z) x) lf3.
Lemma candidate_12: forall (lf3 : bool) (z : lst) (y : lst) (x : natural), forall _ : @eq bool (lfmem z Zero) lf3, @eq bool (lfmem (lfappend y z) x) lf3.
Lemma candidate_13: forall (lf3 : bool) (z : lst) (y : lst) (x : natural), forall _ : @eq bool (lfmem y Zero) lf3, @eq bool (lfmem (lfappend y z) x) lf3.
Lemma candidate_14: forall (lf3 : bool) (z : lst) (y : lst) (x : natural), forall _ : @eq bool (false) lf3, @eq bool (lfmem (lfappend y z) x) lf3.
Lemma candidate_15: forall (lf3 : bool) (y : lst) (x : natural), forall _ : @eq bool (lfmem y x) lf3, @eq bool (lfmem (lfappend y (lfappend y y)) x) lf3.
Lemma candidate_16: forall (lf3 : bool) (y : lst) (x : natural), forall _ : @eq bool (lfmem y x) lf3, @eq bool (lfmem (lfappend y (lfappend y Nil)) x) lf3.
Lemma candidate_17: forall (lf3 : bool) (y : lst) (x : natural), forall _ : @eq bool (lfmem y x) lf3, @eq bool (lfmem (lfappend y y) x) lf3.
Lemma candidate_18: forall (lf3 : bool) (y : lst) (x : natural), forall _ : @eq bool (lfmem y x) lf3, @eq bool (lfmem (lfappend y Nil) x) lf3.
Lemma candidate_19: forall (lf3 : bool) (y : lst) (x : natural), forall _ : @eq bool (lfmem y x) lf3, @eq bool (lfmem (y) x) lf3.
Lemma candidate_20: forall (lf3 : bool) (y : lst) (x : natural), forall _ : @eq bool (lfmem y x) lf3, @eq bool (lfmem (Nil) x) lf3.
Lemma candidate_21: forall (lf3 : bool) (y : lst) (x : natural), forall _ : @eq bool (lfmem y x) lf3, @eq bool (Neqb x (Succ x)) lf3.
Lemma candidate_22: forall (lf3 : bool) (y : lst) (x : natural), forall _ : @eq bool (lfmem y x) lf3, @eq bool (lfmem y (Succ Zero)) lf3.
Lemma candidate_23: forall (lf3 : bool) (y : lst) (x : natural), forall _ : @eq bool (lfmem y x) lf3, @eq bool (Neqb x (Succ Zero)) lf3.
Lemma candidate_24: forall (lf3 : bool) (y : lst) (x : natural), forall _ : @eq bool (lfmem y x) lf3, @eq bool (lfmem y x) lf3.
Lemma candidate_25: forall (lf3 : bool) (y : lst) (x : natural), forall _ : @eq bool (lfmem y x) lf3, @eq bool (lfmem y Zero) lf3.
Lemma candidate_26: forall (lf3 : bool) (y : lst) (x : natural), forall _ : @eq bool (lfmem y x) lf3, @eq bool (false) lf3.
Lemma candidate_27: forall (y : lst) (x : natural), @eq bool (lfmem y x) (Neqb x (Succ x)).
Lemma candidate_28: forall (y : lst) (x : natural), @eq bool (lfmem y x) (lfmem y (Succ Zero)).
Lemma candidate_29: forall (y : lst) (x : natural), @eq bool (lfmem y x) (Neqb x (Succ Zero)).
Lemma candidate_30: forall (y : lst) (x : natural), @eq bool (lfmem y x) (lfmem y x).
Lemma candidate_31: forall (y : lst) (x : natural), @eq bool (lfmem y x) (lfmem y Zero).
Lemma candidate_32: forall (y : lst) (x : natural), @eq bool (lfmem y x) (false).
Lemma candidate_33: forall (z : lst) (y : lst), @eq lst (lfappend y z) (lfappend y y).
Lemma candidate_34: forall (z : lst) (y : lst), @eq lst (lfappend y z) (lfappend z Nil).
Lemma candidate_35: forall (z : lst) (y : lst), @eq lst (lfappend y z) (lfappend y Nil).
Lemma candidate_36: forall (z : lst) (y : lst), @eq lst (lfappend y z) (z).
Lemma candidate_37: forall (z : lst) (y : lst), @eq lst (lfappend y z) (y).
Lemma candidate_38: forall (z : lst) (y : lst), @eq lst (lfappend y z) (Nil).
Lemma candidate_39: forall (z : lst) (y : lst) (x : natural), @eq bool (lfmem (lfappend y z) x) (Neqb x (Succ Zero)).
Lemma candidate_40: forall (z : lst) (y : lst) (x : natural), @eq bool (lfmem (lfappend y z) x) (lfmem z x).
Lemma candidate_41: forall (z : lst) (y : lst) (x : natural), @eq bool (lfmem (lfappend y z) x) (lfmem y x).
Lemma candidate_42: forall (z : lst) (y : lst) (x : natural), @eq bool (lfmem (lfappend y z) x) (lfmem z Zero).
Lemma candidate_43: forall (z : lst) (y : lst) (x : natural), @eq bool (lfmem (lfappend y z) x) (lfmem y Zero).
Lemma candidate_44: forall (z : lst) (y : lst) (x : natural), @eq bool (lfmem (lfappend y z) x) (false).
Lemma candidate_45: forall (lf3 : bool) (x : natural), @eq bool (lfmem (Nil) x) lf3.
Lemma candidate_46: forall (lf3 : bool), @eq bool (false) lf3.
Lemma candidate_47: forall (z : lst) (y : lst), @eq lst (lfappend y z) (lfappend y y).
Lemma candidate_48: forall (z : lst) (y : lst), @eq lst (lfappend y z) (lfappend z Nil).
Lemma candidate_49: forall (z : lst) (y : lst), @eq lst (lfappend y z) (lfappend y Nil).
Lemma candidate_50: forall (z : lst) (y : lst), @eq lst (lfappend y z) (z).
Lemma candidate_51: forall (z : lst) (y : lst), @eq lst (lfappend y z) (y).
Lemma candidate_52: forall (z : lst) (y : lst), @eq lst (lfappend y z) (Nil).
Lemma candidate_53: forall (z : lst) (y : lst) (x : natural), @eq bool (lfmem (lfappend y z) x) (Neqb x (Succ Zero)).
Lemma candidate_54: forall (z : lst) (y : lst) (x : natural), @eq bool (lfmem (lfappend y z) x) (lfmem z x).
Lemma candidate_55: forall (z : lst) (y : lst) (x : natural), @eq bool (lfmem (lfappend y z) x) (lfmem y x).
Lemma candidate_56: forall (z : lst) (y : lst) (x : natural), @eq bool (lfmem (lfappend y z) x) (lfmem z Zero).
Lemma candidate_57: forall (z : lst) (y : lst) (x : natural), @eq bool (lfmem (lfappend y z) x) (lfmem y Zero).
Lemma candidate_58: forall (z : lst) (y : lst) (x : natural), @eq bool (lfmem (lfappend y z) x) (false).
Lemma candidate_59: forall (lf1 : bool), @eq bool lf1 (true).
Lemma candidate_60: @eq bool true (true).
Lemma candidate_61: @eq bool (false) true.
Lemma candidate_62: forall (x : natural) (lf2 : lst), @eq bool (lfmem lf2 x)   (orb match x with | Succ _ => false | Zero => true end (lfmem lf2 Zero)).
Lemma candidate_63: forall (x : natural) (lf2 : lst), @eq bool (lfmem lf2 x)   (orb match x with | Succ _ => false | Zero => true end false).
Lemma candidate_64: forall (x : natural) (lf2 : lst), @eq bool (lfmem lf2 x) (Neqb x x).
Lemma candidate_65: forall (x : natural) (lf2 : lst), @eq bool (lfmem lf2 x) (match x with | Succ _ => false | Zero => true end).
Lemma candidate_66: forall (x : natural) (lf2 : lst), @eq bool (lfmem lf2 x) (Neqb x Zero).
Lemma candidate_67: forall (x : natural) (lf2 : lst), @eq bool (lfmem lf2 x) (true).
Lemma candidate_68: forall (x : natural) (lf2 : lst), @eq bool (lfmem lf2 x) (Neqb x (Succ x)).
Lemma candidate_69: forall (x : natural) (lf2 : lst), @eq bool (lfmem lf2 x) (lfmem lf2 (Succ Zero)).
Lemma candidate_70: forall (x : natural) (lf2 : lst), @eq bool (lfmem lf2 x) (Neqb x (Succ Zero)).
Lemma candidate_71: forall (x : natural) (lf2 : lst), @eq bool (lfmem lf2 x) (lfmem lf2 x).
Lemma candidate_72: forall (x : natural) (lf2 : lst), @eq bool (lfmem lf2 x) (lfmem lf2 Zero).
Lemma candidate_73: forall (x : natural) (lf2 : lst), @eq bool (lfmem lf2 x) (false).
Lemma candidate_74: @eq bool true (true).
Lemma candidate_75: forall (z : lst) (y : lst) (x : natural), @eq bool (lfmem (lfappend y z) x)   (orb match x with | Succ _ => false | Zero => true end (lfmem y Zero)).
Lemma candidate_76: forall (z : lst) (y : lst) (x : natural), @eq bool (lfmem (lfappend y z) x)   (orb match x with | Succ _ => false | Zero => true end false).
Lemma candidate_77: forall (z : lst) (y : lst) (x : natural), @eq bool (lfmem (lfappend y z) x) (Neqb x x).
Lemma candidate_78: forall (z : lst) (y : lst) (x : natural), @eq bool (lfmem (lfappend y z) x)   (match x with | Succ _ => false | Zero => true end).
Lemma candidate_79: forall (z : lst) (y : lst) (x : natural), @eq bool (lfmem (lfappend y z) x) (Neqb x Zero).
Lemma candidate_80: forall (z : lst) (y : lst) (x : natural), @eq bool (lfmem (lfappend y z) x) (true).
Lemma candidate_81: forall (x : natural), @eq bool (lfmem (Nil) x) true.
Lemma candidate_82: @eq bool (false) true.
Lemma candidate_83: @eq bool true (true).
Lemma candidate_84: forall (z : lst) (y : lst), @eq lst (lfappend y z) (lfappend y y).
Lemma candidate_85: forall (z : lst) (y : lst), @eq lst (lfappend y z) (lfappend z Nil).
Lemma candidate_86: forall (z : lst) (y : lst), @eq lst (lfappend y z) (lfappend y Nil).
Lemma candidate_87: forall (z : lst) (y : lst), @eq lst (lfappend y z) (z).
Lemma candidate_88: forall (z : lst) (y : lst), @eq lst (lfappend y z) (y).
Lemma candidate_89: forall (z : lst) (y : lst), @eq lst (lfappend y z) (Nil).
Lemma candidate_90: forall (z : lst) (y : lst) (x : natural), @eq bool (lfmem (lfappend y z) x) (Neqb x (Succ Zero)).
Lemma candidate_91: forall (z : lst) (y : lst) (x : natural), @eq bool (lfmem (lfappend y z) x) (lfmem z x).
Lemma candidate_92: forall (z : lst) (y : lst) (x : natural), @eq bool (lfmem (lfappend y z) x) (lfmem y x).
Lemma candidate_93: forall (z : lst) (y : lst) (x : natural), @eq bool (lfmem (lfappend y z) x) (lfmem z Zero).
Lemma candidate_94: forall (z : lst) (y : lst) (x : natural), @eq bool (lfmem (lfappend y z) x) (lfmem y Zero).
Lemma candidate_95: forall (z : lst) (y : lst) (x : natural), @eq bool (lfmem (lfappend y z) x) (false).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 224 seconds
Duplicates removed: 34
Filtered by Quickchick: 51
Filtered by script: 5
Remaining: 5

Lemmas: 
Lemma candidate_17: forall (lf3 : bool) (y : lst) (x : natural), forall _ : @eq bool (lfmem y x) lf3, @eq bool (lfmem (lfappend y y) x) lf3.
Lemma candidate_18: forall (lf3 : bool) (y : lst) (x : natural), forall _ : @eq bool (lfmem y x) lf3, @eq bool (lfmem (lfappend y Nil) x) lf3.
Lemma candidate_1: forall (z : lst) (y : lst) (x : natural), forall _ : @eq bool (lfmem y x) true, @eq bool (lfmem (lfappend y z) x) true.
Lemma candidate_15: forall (lf3 : bool) (y : lst) (x : natural), forall _ : @eq bool (lfmem y x) lf3, @eq bool (lfmem (lfappend y (lfappend y y)) x) lf3.
Lemma candidate_16: forall (lf3 : bool) (y : lst) (x : natural), forall _ : @eq bool (lfmem y x) lf3, @eq bool (lfmem (lfappend y (lfappend y Nil)) x) lf3.