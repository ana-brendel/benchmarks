File Information
- File name: goal23
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal23_theorem0_52_lem
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal23_theorem0_52_lem
- Namespace: adtind
- Proof name: theorem0
- Theorem: Theorem theorem0: forall x0 y0 : lst,
@eq natural (half (len (lfappend x0 y0))) (half (len (lfappend y0 x0))).
- Declarations: 
From lfind Require Import LFind.

Proof Context
* Goal State: @eq natural (len (lfappend x y)) (len (lfappend y x))

* Hypothesis:
x : lst
y : lst

* Types:
Set
natural
Prop
lst

* Polymorphic Types:


* Variables:
x : lst
y : lst

* Terms:
len (lfappend y x) : natural
len (lfappend x y) : natural
x : lst
lfappend y x : lst
lst : Set
y : lst
@eq natural (len (lfappend x y)) (len (lfappend y x)) : Prop
lfappend x y : lst
natural : Set

* Functions:
len  : forall _ : lst, natural
lfappend  : forall (_ : lst) (_ : lst), lst
@eq  : forall (A : Type) (_ : A) (_ : A), Prop

<---GENERALIZATION--->
Time elapsed: 2 seconds
Generalized Variables:
lf3 : lst = lfappend y x
lf1 : natural = len (lfappend y x)
lf4 : lst = lfappend x y
lf2 : natural = len (lfappend x y)

Generalizations:
Lemma conj1: forall (lf2 : natural) (lf1 : natural), @eq natural lf2 lf1.
Lemma conj2: forall (lf4 : lst) (lf1 : natural), @eq natural (len lf4) lf1.
Lemma conj4: forall (x : lst) (lf1 : natural) (y : lst), @eq natural (len (lfappend x y)) lf1.
Lemma conj5: forall (lf2 : natural) (lf3 : lst), @eq natural lf2 (len lf3).
Lemma conj6: forall (lf4 : lst) (lf3 : lst), @eq natural (len lf4) (len lf3).
Lemma conj8: forall (x : lst) (y : lst) (lf3 : lst), @eq natural (len (lfappend x y)) (len lf3).
Lemma conj13: forall (lf2 : natural) (x : lst) (y : lst), @eq natural lf2 (len (lfappend y x)).
Lemma conj14: forall (x : lst) (lf4 : lst) (y : lst), @eq natural (len lf4) (len (lfappend y x)).
Lemma conj16: forall (x : lst) (y : lst), @eq natural (len (lfappend x y)) (len (lfappend y x)).


<---VALIDITY CHECKS--->
Time elapsed: 22 seconds
Valid:
Lemma conj16: forall (x : lst) (y : lst), @eq natural (len (lfappend x y)) (len (lfappend y x)).

Invalid:
Lemma conj14: forall (x : lst) (lf4 : lst) (y : lst), @eq natural (len lf4) (len (lfappend y x)).
Lemma conj13: forall (lf2 : natural) (x : lst) (y : lst), @eq natural lf2 (len (lfappend y x)).
Lemma conj8: forall (x : lst) (y : lst) (lf3 : lst), @eq natural (len (lfappend x y)) (len lf3).
Lemma conj6: forall (lf4 : lst) (lf3 : lst), @eq natural (len lf4) (len lf3).
Lemma conj5: forall (lf2 : natural) (lf3 : lst), @eq natural lf2 (len lf3).
Lemma conj4: forall (x : lst) (lf1 : natural) (y : lst), @eq natural (len (lfappend x y)) lf1.
Lemma conj2: forall (lf4 : lst) (lf1 : natural), @eq natural (len lf4) lf1.
Lemma conj1: forall (lf2 : natural) (lf1 : natural), @eq natural lf2 lf1.

<---ADD IMPLICATIONS--->
Time elapsed: 22 seconds
Generalizations:
Lemma conj14: forall (x : lst) (lf4 : lst) (y : lst), @eq natural (len lf4) (len (lfappend y x)).
Lemma conj13: forall (lf2 : natural) (x : lst) (y : lst), @eq natural lf2 (len (lfappend y x)).
Lemma conj8: forall (x : lst) (y : lst) (lf3 : lst), @eq natural (len (lfappend x y)) (len lf3).
Lemma conj6: forall (lf4 : lst) (lf3 : lst), @eq natural (len lf4) (len lf3).
Lemma conj5: forall (lf2 : natural) (lf3 : lst), @eq natural lf2 (len lf3).
Lemma conj4: forall (x : lst) (lf1 : natural) (y : lst), @eq natural (len (lfappend x y)) lf1.
Lemma conj2: forall (lf4 : lst) (lf1 : natural), @eq natural (len lf4) lf1.
Lemma conj1: forall (lf2 : natural) (lf1 : natural), @eq natural lf2 lf1.


<---VALIDITY CHECKS--->
Time elapsed: 35 seconds
Valid:

Invalid:
Lemma conj1: forall (lf2 : natural) (lf1 : natural), @eq natural lf2 lf1.
Lemma conj2: forall (lf4 : lst) (lf1 : natural), @eq natural (len lf4) lf1.
Lemma conj4: forall (x : lst) (lf1 : natural) (y : lst), @eq natural (len (lfappend x y)) lf1.
Lemma conj5: forall (lf2 : natural) (lf3 : lst), @eq natural lf2 (len lf3).
Lemma conj6: forall (lf4 : lst) (lf3 : lst), @eq natural (len lf4) (len lf3).
Lemma conj8: forall (x : lst) (y : lst) (lf3 : lst), @eq natural (len (lfappend x y)) (len lf3).
Lemma conj13: forall (lf2 : natural) (x : lst) (y : lst), @eq natural lf2 (len (lfappend y x)).
Lemma conj14: forall (x : lst) (lf4 : lst) (y : lst), @eq natural (len lf4) (len (lfappend y x)).


<---CREATE SKETCHES--->
Time elapsed: 35 seconds
Sketches:
Sketch conj2_sketch0 : @eq natural (##hole##) lf1
Sketch conj2_term_sketch0 : @eq natural (len lf4) (##hole##)
Sketch conj4_sketch0 : @eq natural (##hole##) lf1
Sketch conj4_sketch1 : @eq natural (len (##hole##)) lf1
Sketch conj4_term_sketch0 : @eq natural (len (lfappend x y)) (##hole##)
Sketch conj4_term_sketch1 : @eq lst (lfappend x y) (##hole##)
Sketch conj5_sketch0 : @eq natural lf2 (##hole##)
Sketch conj5_term_sketch0 : @eq natural (len lf3) (##hole##)
Sketch conj6_sketch0 : @eq natural (len lf4) (##hole##)
Sketch conj6_sketch1 : @eq natural (##hole##) (len lf3)
Sketch conj6_term_sketch0 : @eq natural (len lf3) (##hole##)
Sketch conj6_term_sketch1 : @eq natural (len lf4) (##hole##)
Sketch conj8_sketch0 : @eq natural (len (lfappend x y)) (##hole##)
Sketch conj8_sketch1 : @eq natural (##hole##) (len lf3)
Sketch conj8_sketch2 : @eq natural (len (##hole##)) (len lf3)
Sketch conj8_term_sketch0 : @eq natural (len lf3) (##hole##)
Sketch conj8_term_sketch1 : @eq natural (len (lfappend x y)) (##hole##)
Sketch conj8_term_sketch2 : @eq lst (lfappend x y) (##hole##)
Sketch conj13_sketch0 : @eq natural lf2 (##hole##)
Sketch conj13_sketch1 : @eq natural lf2 (len (##hole##))
Sketch conj13_term_sketch0 : @eq natural (len (lfappend y x)) (##hole##)
Sketch conj13_term_sketch1 : @eq lst (lfappend y x) (##hole##)
Sketch conj14_sketch0 : @eq natural (len lf4) (##hole##)
Sketch conj14_sketch1 : @eq natural (len lf4) (len (##hole##))
Sketch conj14_sketch2 : @eq natural (##hole##) (len (lfappend y x))
Sketch conj14_term_sketch0 : @eq natural (len (lfappend y x)) (##hole##)
Sketch conj14_term_sketch1 : @eq lst (lfappend y x) (##hole##)
Sketch conj14_term_sketch2 : @eq natural (len lf4) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 76 seconds
Problems per Sketch:
Sketch conj6_sketch1 --> Problem  synth_7
Sketch conj5_sketch0 --> Problem  synth_6
Sketch conj14_sketch2 --> Problem  synth_4
Sketch conj13_term_sketch0 --> Problem  synth_4
Sketch conj14_term_sketch2 --> Problem  synth_2
Sketch conj6_term_sketch1 --> Problem  synth_2
Sketch conj8_sketch1 --> Problem  synth_7
Sketch conj4_sketch0 --> Problem  synth_1
Sketch conj6_term_sketch0 --> Problem  synth_7
Sketch conj4_sketch1 --> Problem  synth_3
Sketch conj13_sketch1 --> Problem  synth_9
Sketch conj4_term_sketch1 --> Problem  synth_5
Sketch conj2_term_sketch0 --> Problem  synth_2
Sketch conj14_sketch0 --> Problem  synth_2
Sketch conj13_term_sketch1 --> Problem  synth_10
Sketch conj8_term_sketch0 --> Problem  synth_7
Sketch conj14_term_sketch0 --> Problem  synth_4
Sketch conj13_sketch0 --> Problem  synth_6
Sketch conj8_sketch2 --> Problem  synth_8
Sketch conj8_sketch0 --> Problem  synth_4
Sketch conj14_term_sketch1 --> Problem  synth_10
Sketch conj8_term_sketch1 --> Problem  synth_4
Sketch conj4_term_sketch0 --> Problem  synth_4
Sketch conj8_term_sketch2 --> Problem  synth_5
Sketch conj5_term_sketch0 --> Problem  synth_7
Sketch conj6_sketch0 --> Problem  synth_2
Sketch conj14_sketch1 --> Problem  synth_11
Sketch conj2_sketch0 --> Problem  synth_1


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 167 seconds

Problem: synth_10
 lfappend (lfappend y (lfappend x Nil)) Nil
 lfappend (lfappend y Nil) (lfappend x Nil)
 lfappend (lfappend y Nil) x
 lfappend (lfappend y x) Nil
 lfappend y (lfappend x Nil)
 lfappend y x

Problem: synth_8

Problem: synth_3

Problem: synth_9

Problem: synth_6
 lf2

Problem: synth_11

Problem: synth_7
 half (len (lfappend lf3 (Cons Zero lf3)))
 half (len (lfappend lf3 (lfappend lf3 Nil)))
 match len (lfappend lf3 lf3) with | Succ n => Succ (half n) | Zero => Zero end
 half (len (lfappend lf3 lf3))
 len (lfappend lf3 Nil)
 len lf3

Problem: synth_5
 lfappend (lfappend x (lfappend y Nil)) Nil
 lfappend (lfappend x Nil) (lfappend y Nil)
 lfappend (lfappend x Nil) y
 lfappend (lfappend x y) Nil
 lfappend x (lfappend y Nil)
 lfappend x y

Problem: synth_4
 len (lfappend (lfappend x y) Nil)
 len (lfappend (lfappend y x) Nil)
 len (lfappend x (lfappend y Nil))
 len (lfappend y (lfappend x Nil))
 len (lfappend x y)
 len (lfappend y x)

Problem: synth_1
 lf1

Problem: synth_2
 half (len (lfappend lf4 (Cons Zero lf4)))
 half (len (lfappend lf4 (lfappend lf4 Nil)))
 match len (lfappend lf4 lf4) with | Succ n => Succ (half n) | Zero => Zero end
 half (len (lfappend lf4 lf4))
 len (lfappend lf4 Nil)
 len lf4

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 167 seconds
Lemmas:
Lemma candidate_1: forall (y : lst) (x : lst), @eq natural (len (lfappend x y)) (len (lfappend y x)).
Lemma candidate_2: forall (lf1 : natural), @eq natural (lf1) lf1.
Lemma candidate_3: forall (lf4 : lst), @eq natural (len lf4) (half (len (lfappend lf4 (Cons Zero lf4)))).
Lemma candidate_4: forall (lf4 : lst), @eq natural (len lf4) (half (len (lfappend lf4 (lfappend lf4 Nil)))).
Lemma candidate_5: forall (lf4 : lst), @eq natural (len lf4)   (match len (lfappend lf4 lf4) with | Succ n => Succ (half n) | Zero => Zero end).
Lemma candidate_6: forall (lf4 : lst), @eq natural (len lf4) (half (len (lfappend lf4 lf4))).
Lemma candidate_7: forall (lf4 : lst), @eq natural (len lf4) (len (lfappend lf4 Nil)).
Lemma candidate_8: forall (lf4 : lst), @eq natural (len lf4) (len lf4).
Lemma candidate_9: forall (lf1 : natural), @eq natural (lf1) lf1.
Lemma candidate_10: forall (y : lst) (x : lst), @eq natural (len (lfappend x y)) (len (lfappend (lfappend x y) Nil)).
Lemma candidate_11: forall (y : lst) (x : lst), @eq natural (len (lfappend x y)) (len (lfappend (lfappend y x) Nil)).
Lemma candidate_12: forall (y : lst) (x : lst), @eq natural (len (lfappend x y)) (len (lfappend x (lfappend y Nil))).
Lemma candidate_13: forall (y : lst) (x : lst), @eq natural (len (lfappend x y)) (len (lfappend y (lfappend x Nil))).
Lemma candidate_14: forall (y : lst) (x : lst), @eq natural (len (lfappend x y)) (len (lfappend x y)).
Lemma candidate_15: forall (y : lst) (x : lst), @eq natural (len (lfappend x y)) (len (lfappend y x)).
Lemma candidate_16: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x (lfappend y Nil)) Nil).
Lemma candidate_17: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) (lfappend y Nil)).
Lemma candidate_18: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) y).
Lemma candidate_19: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x y) Nil).
Lemma candidate_20: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend y Nil)).
Lemma candidate_21: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x y).
Lemma candidate_22: forall (lf2 : natural), @eq natural lf2 (lf2).
Lemma candidate_23: forall (lf3 : lst), @eq natural (len lf3) (half (len (lfappend lf3 (Cons Zero lf3)))).
Lemma candidate_24: forall (lf3 : lst), @eq natural (len lf3) (half (len (lfappend lf3 (lfappend lf3 Nil)))).
Lemma candidate_25: forall (lf3 : lst), @eq natural (len lf3)   (match len (lfappend lf3 lf3) with | Succ n => Succ (half n) | Zero => Zero end).
Lemma candidate_26: forall (lf3 : lst), @eq natural (len lf3) (half (len (lfappend lf3 lf3))).
Lemma candidate_27: forall (lf3 : lst), @eq natural (len lf3) (len (lfappend lf3 Nil)).
Lemma candidate_28: forall (lf3 : lst), @eq natural (len lf3) (len lf3).
Lemma candidate_29: forall (lf4 : lst), @eq natural (len lf4) (half (len (lfappend lf4 (Cons Zero lf4)))).
Lemma candidate_30: forall (lf4 : lst), @eq natural (len lf4) (half (len (lfappend lf4 (lfappend lf4 Nil)))).
Lemma candidate_31: forall (lf4 : lst), @eq natural (len lf4)   (match len (lfappend lf4 lf4) with | Succ n => Succ (half n) | Zero => Zero end).
Lemma candidate_32: forall (lf4 : lst), @eq natural (len lf4) (half (len (lfappend lf4 lf4))).
Lemma candidate_33: forall (lf4 : lst), @eq natural (len lf4) (len (lfappend lf4 Nil)).
Lemma candidate_34: forall (lf4 : lst), @eq natural (len lf4) (len lf4).
Lemma candidate_35: forall (lf3 : lst), @eq natural (half (len (lfappend lf3 (Cons Zero lf3)))) (len lf3).
Lemma candidate_36: forall (lf3 : lst), @eq natural (half (len (lfappend lf3 (lfappend lf3 Nil)))) (len lf3).
Lemma candidate_37: forall (lf3 : lst), @eq natural   (match len (lfappend lf3 lf3) with | Succ n => Succ (half n) | Zero => Zero end)   (len lf3).
Lemma candidate_38: forall (lf3 : lst), @eq natural (half (len (lfappend lf3 lf3))) (len lf3).
Lemma candidate_39: forall (lf3 : lst), @eq natural (len (lfappend lf3 Nil)) (len lf3).
Lemma candidate_40: forall (lf3 : lst), @eq natural (len lf3) (len lf3).
Lemma candidate_41: forall (lf3 : lst), @eq natural (len lf3) (half (len (lfappend lf3 (Cons Zero lf3)))).
Lemma candidate_42: forall (lf3 : lst), @eq natural (len lf3) (half (len (lfappend lf3 (lfappend lf3 Nil)))).
Lemma candidate_43: forall (lf3 : lst), @eq natural (len lf3)   (match len (lfappend lf3 lf3) with | Succ n => Succ (half n) | Zero => Zero end).
Lemma candidate_44: forall (lf3 : lst), @eq natural (len lf3) (half (len (lfappend lf3 lf3))).
Lemma candidate_45: forall (lf3 : lst), @eq natural (len lf3) (len (lfappend lf3 Nil)).
Lemma candidate_46: forall (lf3 : lst), @eq natural (len lf3) (len lf3).
Lemma candidate_47: forall (lf4 : lst), @eq natural (len lf4) (half (len (lfappend lf4 (Cons Zero lf4)))).
Lemma candidate_48: forall (lf4 : lst), @eq natural (len lf4) (half (len (lfappend lf4 (lfappend lf4 Nil)))).
Lemma candidate_49: forall (lf4 : lst), @eq natural (len lf4)   (match len (lfappend lf4 lf4) with | Succ n => Succ (half n) | Zero => Zero end).
Lemma candidate_50: forall (lf4 : lst), @eq natural (len lf4) (half (len (lfappend lf4 lf4))).
Lemma candidate_51: forall (lf4 : lst), @eq natural (len lf4) (len (lfappend lf4 Nil)).
Lemma candidate_52: forall (lf4 : lst), @eq natural (len lf4) (len lf4).
Lemma candidate_53: forall (y : lst) (x : lst), @eq natural (len (lfappend x y)) (len (lfappend (lfappend x y) Nil)).
Lemma candidate_54: forall (y : lst) (x : lst), @eq natural (len (lfappend x y)) (len (lfappend (lfappend y x) Nil)).
Lemma candidate_55: forall (y : lst) (x : lst), @eq natural (len (lfappend x y)) (len (lfappend x (lfappend y Nil))).
Lemma candidate_56: forall (y : lst) (x : lst), @eq natural (len (lfappend x y)) (len (lfappend y (lfappend x Nil))).
Lemma candidate_57: forall (y : lst) (x : lst), @eq natural (len (lfappend x y)) (len (lfappend x y)).
Lemma candidate_58: forall (y : lst) (x : lst), @eq natural (len (lfappend x y)) (len (lfappend y x)).
Lemma candidate_59: forall (lf3 : lst), @eq natural (half (len (lfappend lf3 (Cons Zero lf3)))) (len lf3).
Lemma candidate_60: forall (lf3 : lst), @eq natural (half (len (lfappend lf3 (lfappend lf3 Nil)))) (len lf3).
Lemma candidate_61: forall (lf3 : lst), @eq natural   (match len (lfappend lf3 lf3) with | Succ n => Succ (half n) | Zero => Zero end)   (len lf3).
Lemma candidate_62: forall (lf3 : lst), @eq natural (half (len (lfappend lf3 lf3))) (len lf3).
Lemma candidate_63: forall (lf3 : lst), @eq natural (len (lfappend lf3 Nil)) (len lf3).
Lemma candidate_64: forall (lf3 : lst), @eq natural (len lf3) (len lf3).
Lemma candidate_65: forall (lf3 : lst), @eq natural (len lf3) (half (len (lfappend lf3 (Cons Zero lf3)))).
Lemma candidate_66: forall (lf3 : lst), @eq natural (len lf3) (half (len (lfappend lf3 (lfappend lf3 Nil)))).
Lemma candidate_67: forall (lf3 : lst), @eq natural (len lf3)   (match len (lfappend lf3 lf3) with | Succ n => Succ (half n) | Zero => Zero end).
Lemma candidate_68: forall (lf3 : lst), @eq natural (len lf3) (half (len (lfappend lf3 lf3))).
Lemma candidate_69: forall (lf3 : lst), @eq natural (len lf3) (len (lfappend lf3 Nil)).
Lemma candidate_70: forall (lf3 : lst), @eq natural (len lf3) (len lf3).
Lemma candidate_71: forall (y : lst) (x : lst), @eq natural (len (lfappend x y)) (len (lfappend (lfappend x y) Nil)).
Lemma candidate_72: forall (y : lst) (x : lst), @eq natural (len (lfappend x y)) (len (lfappend (lfappend y x) Nil)).
Lemma candidate_73: forall (y : lst) (x : lst), @eq natural (len (lfappend x y)) (len (lfappend x (lfappend y Nil))).
Lemma candidate_74: forall (y : lst) (x : lst), @eq natural (len (lfappend x y)) (len (lfappend y (lfappend x Nil))).
Lemma candidate_75: forall (y : lst) (x : lst), @eq natural (len (lfappend x y)) (len (lfappend x y)).
Lemma candidate_76: forall (y : lst) (x : lst), @eq natural (len (lfappend x y)) (len (lfappend y x)).
Lemma candidate_77: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x (lfappend y Nil)) Nil).
Lemma candidate_78: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) (lfappend y Nil)).
Lemma candidate_79: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) y).
Lemma candidate_80: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x y) Nil).
Lemma candidate_81: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend y Nil)).
Lemma candidate_82: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x y).
Lemma candidate_83: forall (lf2 : natural), @eq natural lf2 (lf2).
Lemma candidate_84: forall (y : lst) (x : lst), @eq natural (len (lfappend y x)) (len (lfappend (lfappend x y) Nil)).
Lemma candidate_85: forall (y : lst) (x : lst), @eq natural (len (lfappend y x)) (len (lfappend (lfappend y x) Nil)).
Lemma candidate_86: forall (y : lst) (x : lst), @eq natural (len (lfappend y x)) (len (lfappend x (lfappend y Nil))).
Lemma candidate_87: forall (y : lst) (x : lst), @eq natural (len (lfappend y x)) (len (lfappend y (lfappend x Nil))).
Lemma candidate_88: forall (y : lst) (x : lst), @eq natural (len (lfappend y x)) (len (lfappend x y)).
Lemma candidate_89: forall (y : lst) (x : lst), @eq natural (len (lfappend y x)) (len (lfappend y x)).
Lemma candidate_90: forall (y : lst) (x : lst), @eq lst (lfappend y x) (lfappend (lfappend y (lfappend x Nil)) Nil).
Lemma candidate_91: forall (y : lst) (x : lst), @eq lst (lfappend y x) (lfappend (lfappend y Nil) (lfappend x Nil)).
Lemma candidate_92: forall (y : lst) (x : lst), @eq lst (lfappend y x) (lfappend (lfappend y Nil) x).
Lemma candidate_93: forall (y : lst) (x : lst), @eq lst (lfappend y x) (lfappend (lfappend y x) Nil).
Lemma candidate_94: forall (y : lst) (x : lst), @eq lst (lfappend y x) (lfappend y (lfappend x Nil)).
Lemma candidate_95: forall (y : lst) (x : lst), @eq lst (lfappend y x) (lfappend y x).
Lemma candidate_96: forall (lf4 : lst), @eq natural (len lf4) (half (len (lfappend lf4 (Cons Zero lf4)))).
Lemma candidate_97: forall (lf4 : lst), @eq natural (len lf4) (half (len (lfappend lf4 (lfappend lf4 Nil)))).
Lemma candidate_98: forall (lf4 : lst), @eq natural (len lf4)   (match len (lfappend lf4 lf4) with | Succ n => Succ (half n) | Zero => Zero end).
Lemma candidate_99: forall (lf4 : lst), @eq natural (len lf4) (half (len (lfappend lf4 lf4))).
Lemma candidate_100: forall (lf4 : lst), @eq natural (len lf4) (len (lfappend lf4 Nil)).
Lemma candidate_101: forall (lf4 : lst), @eq natural (len lf4) (len lf4).
Lemma candidate_102: forall (y : lst) (x : lst), @eq natural (len (lfappend (lfappend x y) Nil)) (len (lfappend y x)).
Lemma candidate_103: forall (y : lst) (x : lst), @eq natural (len (lfappend (lfappend y x) Nil)) (len (lfappend y x)).
Lemma candidate_104: forall (y : lst) (x : lst), @eq natural (len (lfappend x (lfappend y Nil))) (len (lfappend y x)).
Lemma candidate_105: forall (y : lst) (x : lst), @eq natural (len (lfappend y (lfappend x Nil))) (len (lfappend y x)).
Lemma candidate_106: forall (y : lst) (x : lst), @eq natural (len (lfappend x y)) (len (lfappend y x)).
Lemma candidate_107: forall (y : lst) (x : lst), @eq natural (len (lfappend y x)) (len (lfappend y x)).
Lemma candidate_108: forall (y : lst) (x : lst), @eq natural (len (lfappend y x)) (len (lfappend (lfappend x y) Nil)).
Lemma candidate_109: forall (y : lst) (x : lst), @eq natural (len (lfappend y x)) (len (lfappend (lfappend y x) Nil)).
Lemma candidate_110: forall (y : lst) (x : lst), @eq natural (len (lfappend y x)) (len (lfappend x (lfappend y Nil))).
Lemma candidate_111: forall (y : lst) (x : lst), @eq natural (len (lfappend y x)) (len (lfappend y (lfappend x Nil))).
Lemma candidate_112: forall (y : lst) (x : lst), @eq natural (len (lfappend y x)) (len (lfappend x y)).
Lemma candidate_113: forall (y : lst) (x : lst), @eq natural (len (lfappend y x)) (len (lfappend y x)).
Lemma candidate_114: forall (y : lst) (x : lst), @eq lst (lfappend y x) (lfappend (lfappend y (lfappend x Nil)) Nil).
Lemma candidate_115: forall (y : lst) (x : lst), @eq lst (lfappend y x) (lfappend (lfappend y Nil) (lfappend x Nil)).
Lemma candidate_116: forall (y : lst) (x : lst), @eq lst (lfappend y x) (lfappend (lfappend y Nil) x).
Lemma candidate_117: forall (y : lst) (x : lst), @eq lst (lfappend y x) (lfappend (lfappend y x) Nil).
Lemma candidate_118: forall (y : lst) (x : lst), @eq lst (lfappend y x) (lfappend y (lfappend x Nil)).
Lemma candidate_119: forall (y : lst) (x : lst), @eq lst (lfappend y x) (lfappend y x).
Lemma candidate_120: forall (lf4 : lst), @eq natural (len lf4) (half (len (lfappend lf4 (Cons Zero lf4)))).
Lemma candidate_121: forall (lf4 : lst), @eq natural (len lf4) (half (len (lfappend lf4 (lfappend lf4 Nil)))).
Lemma candidate_122: forall (lf4 : lst), @eq natural (len lf4)   (match len (lfappend lf4 lf4) with | Succ n => Succ (half n) | Zero => Zero end).
Lemma candidate_123: forall (lf4 : lst), @eq natural (len lf4) (half (len (lfappend lf4 lf4))).
Lemma candidate_124: forall (lf4 : lst), @eq natural (len lf4) (len (lfappend lf4 Nil)).
Lemma candidate_125: forall (lf4 : lst), @eq natural (len lf4) (len lf4).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 260 seconds
Duplicates removed: 79
Filtered by Quickchick: 0
Filtered by script: 8
Remaining: 38

Lemmas: 
Lemma candidate_39: forall (lf3 : lst), @eq natural (len (lfappend lf3 Nil)) (len lf3).
Lemma candidate_27: forall (lf3 : lst), @eq natural (len lf3) (len (lfappend lf3 Nil)).
Lemma candidate_7: forall (lf4 : lst), @eq natural (len lf4) (len (lfappend lf4 Nil)).
Lemma candidate_94: forall (y : lst) (x : lst), @eq lst (lfappend y x) (lfappend y (lfappend x Nil)).
Lemma candidate_93: forall (y : lst) (x : lst), @eq lst (lfappend y x) (lfappend (lfappend y x) Nil).
Lemma candidate_92: forall (y : lst) (x : lst), @eq lst (lfappend y x) (lfappend (lfappend y Nil) x).
Lemma candidate_20: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend y Nil)).
Lemma candidate_19: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x y) Nil).
Lemma candidate_18: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) y).
Lemma candidate_88: forall (y : lst) (x : lst), @eq natural (len (lfappend y x)) (len (lfappend x y)).
Lemma candidate_38: forall (lf3 : lst), @eq natural (half (len (lfappend lf3 lf3))) (len lf3).
Lemma candidate_26: forall (lf3 : lst), @eq natural (len lf3) (half (len (lfappend lf3 lf3))).
Lemma candidate_6: forall (lf4 : lst), @eq natural (len lf4) (half (len (lfappend lf4 lf4))).
Lemma candidate_35: forall (lf3 : lst), @eq natural (half (len (lfappend lf3 (Cons Zero lf3)))) (len lf3).
Lemma candidate_23: forall (lf3 : lst), @eq natural (len lf3) (half (len (lfappend lf3 (Cons Zero lf3)))).
Lemma candidate_3: forall (lf4 : lst), @eq natural (len lf4) (half (len (lfappend lf4 (Cons Zero lf4)))).
Lemma candidate_91: forall (y : lst) (x : lst), @eq lst (lfappend y x) (lfappend (lfappend y Nil) (lfappend x Nil)).
Lemma candidate_90: forall (y : lst) (x : lst), @eq lst (lfappend y x) (lfappend (lfappend y (lfappend x Nil)) Nil).
Lemma candidate_17: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) (lfappend y Nil)).
Lemma candidate_16: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x (lfappend y Nil)) Nil).
Lemma candidate_105: forall (y : lst) (x : lst), @eq natural (len (lfappend y (lfappend x Nil))) (len (lfappend y x)).
Lemma candidate_104: forall (y : lst) (x : lst), @eq natural (len (lfappend x (lfappend y Nil))) (len (lfappend y x)).
Lemma candidate_103: forall (y : lst) (x : lst), @eq natural (len (lfappend (lfappend y x) Nil)) (len (lfappend y x)).
Lemma candidate_102: forall (y : lst) (x : lst), @eq natural (len (lfappend (lfappend x y) Nil)) (len (lfappend y x)).
Lemma candidate_87: forall (y : lst) (x : lst), @eq natural (len (lfappend y x)) (len (lfappend y (lfappend x Nil))).
Lemma candidate_86: forall (y : lst) (x : lst), @eq natural (len (lfappend y x)) (len (lfappend x (lfappend y Nil))).
Lemma candidate_85: forall (y : lst) (x : lst), @eq natural (len (lfappend y x)) (len (lfappend (lfappend y x) Nil)).
Lemma candidate_84: forall (y : lst) (x : lst), @eq natural (len (lfappend y x)) (len (lfappend (lfappend x y) Nil)).
Lemma candidate_36: forall (lf3 : lst), @eq natural (half (len (lfappend lf3 (lfappend lf3 Nil)))) (len lf3).
Lemma candidate_24: forall (lf3 : lst), @eq natural (len lf3) (half (len (lfappend lf3 (lfappend lf3 Nil)))).
Lemma candidate_13: forall (y : lst) (x : lst), @eq natural (len (lfappend x y)) (len (lfappend y (lfappend x Nil))).
Lemma candidate_12: forall (y : lst) (x : lst), @eq natural (len (lfappend x y)) (len (lfappend x (lfappend y Nil))).
Lemma candidate_11: forall (y : lst) (x : lst), @eq natural (len (lfappend x y)) (len (lfappend (lfappend y x) Nil)).
Lemma candidate_10: forall (y : lst) (x : lst), @eq natural (len (lfappend x y)) (len (lfappend (lfappend x y) Nil)).
Lemma candidate_4: forall (lf4 : lst), @eq natural (len lf4) (half (len (lfappend lf4 (lfappend lf4 Nil)))).
Lemma candidate_25: forall (lf3 : lst), @eq natural (len lf3)   (match len (lfappend lf3 lf3) with | Succ n => Succ (half n) | Zero => Zero end).
Lemma candidate_5: forall (lf4 : lst), @eq natural (len lf4)   (match len (lfappend lf4 lf4) with | Succ n => Succ (half n) | Zero => Zero end).
Lemma candidate_37: forall (lf3 : lst), @eq natural   (match len (lfappend lf3 lf3) with | Succ n => Succ (half n) | Zero => Zero end)   (len lf3).