File Information
- File name: goal23
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal23_lem_47_lem3
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal23_lem_47_lem3
- Namespace: adtind
- Proof name: lem
- Theorem: Theorem lem: forall l1 l0 : lst, @eq natural (len (lfappend l1 l0)) (len (lfappend l0 l1)).
- Declarations: 
From lfind Require Import LFind.

Proof Context
* Goal State: @eq natural (len l2) (len (lfappend l2 Nil))

* Hypothesis:
l2 : lst

* Types:
Set
natural
Prop
lst

* Polymorphic Types:


* Variables:
l2 : lst

* Terms:
len l2 : natural
len (lfappend l2 Nil) : natural
lfappend l2 Nil : lst
@eq natural (len l2) (len (lfappend l2 Nil)) : Prop
lst : Set
natural : Set
Nil : lst
l2 : lst

* Functions:
len  : forall _ : lst, natural
lfappend  : forall (_ : lst) (_ : lst), lst
@eq  : forall (A : Type) (_ : A) (_ : A), Prop

<---GENERALIZATION--->
Time elapsed: 2 seconds
Generalized Variables:
lf3 : natural = len l2
lf1 : natural = len (lfappend l2 Nil)
lf4 : lst = Nil
lf2 : lst = lfappend l2 Nil

Generalizations:
Lemma conj1: forall (lf1 : natural) (lf3 : natural), @eq natural lf3 lf1.
Lemma conj5: forall (lf2 : lst) (lf3 : natural), @eq natural lf3 (len lf2).
Lemma conj6: forall (lf4 : lst) (l2 : lst) (lf3 : natural), @eq natural lf3 (len (lfappend l2 lf4)).
Lemma conj8: forall (l2 : lst) (lf3 : natural), @eq natural lf3 (len (lfappend l2 Nil)).
Lemma conj9: forall (lf1 : natural) (l2 : lst), @eq natural (len l2) lf1.
Lemma conj13: forall (lf2 : lst) (l2 : lst), @eq natural (len l2) (len lf2).
Lemma conj14: forall (lf4 : lst) (l2 : lst), @eq natural (len l2) (len (lfappend l2 lf4)).
Lemma conj16: forall (l2 : lst), @eq natural (len l2) (len (lfappend l2 Nil)).


<---VALIDITY CHECKS--->
Time elapsed: 18 seconds
Valid:
Lemma conj16: forall (l2 : lst), @eq natural (len l2) (len (lfappend l2 Nil)).

Invalid:
Lemma conj14: forall (lf4 : lst) (l2 : lst), @eq natural (len l2) (len (lfappend l2 lf4)).
Lemma conj13: forall (lf2 : lst) (l2 : lst), @eq natural (len l2) (len lf2).
Lemma conj9: forall (lf1 : natural) (l2 : lst), @eq natural (len l2) lf1.
Lemma conj8: forall (l2 : lst) (lf3 : natural), @eq natural lf3 (len (lfappend l2 Nil)).
Lemma conj6: forall (lf4 : lst) (l2 : lst) (lf3 : natural), @eq natural lf3 (len (lfappend l2 lf4)).
Lemma conj5: forall (lf2 : lst) (lf3 : natural), @eq natural lf3 (len lf2).
Lemma conj1: forall (lf1 : natural) (lf3 : natural), @eq natural lf3 lf1.

<---ADD IMPLICATIONS--->
Time elapsed: 18 seconds
Generalizations:
Lemma conj14: forall (lf4 : lst) (l2 : lst), @eq natural (len l2) (len (lfappend l2 lf4)).
Lemma conj13: forall (lf2 : lst) (l2 : lst), @eq natural (len l2) (len lf2).
Lemma conj9: forall (lf1 : natural) (l2 : lst), @eq natural (len l2) lf1.
Lemma conj8: forall (l2 : lst) (lf3 : natural), @eq natural lf3 (len (lfappend l2 Nil)).
Lemma conj6: forall (lf4 : lst) (l2 : lst) (lf3 : natural), @eq natural lf3 (len (lfappend l2 lf4)).
Lemma conj5: forall (lf2 : lst) (lf3 : natural), @eq natural lf3 (len lf2).
Lemma conj1: forall (lf1 : natural) (lf3 : natural), @eq natural lf3 lf1.


<---VALIDITY CHECKS--->
Time elapsed: 29 seconds
Valid:

Invalid:
Lemma conj1: forall (lf1 : natural) (lf3 : natural), @eq natural lf3 lf1.
Lemma conj5: forall (lf2 : lst) (lf3 : natural), @eq natural lf3 (len lf2).
Lemma conj6: forall (lf4 : lst) (l2 : lst) (lf3 : natural), @eq natural lf3 (len (lfappend l2 lf4)).
Lemma conj8: forall (l2 : lst) (lf3 : natural), @eq natural lf3 (len (lfappend l2 Nil)).
Lemma conj9: forall (lf1 : natural) (l2 : lst), @eq natural (len l2) lf1.
Lemma conj13: forall (lf2 : lst) (l2 : lst), @eq natural (len l2) (len lf2).
Lemma conj14: forall (lf4 : lst) (l2 : lst), @eq natural (len l2) (len (lfappend l2 lf4)).


<---CREATE SKETCHES--->
Time elapsed: 30 seconds
Sketches:
Sketch conj5_sketch0 : @eq natural lf3 (##hole##)
Sketch conj5_term_sketch0 : @eq natural (len lf2) (##hole##)
Sketch conj6_sketch0 : @eq natural lf3 (len (##hole##))
Sketch conj6_sketch1 : @eq natural lf3 (##hole##)
Sketch conj6_term_sketch0 : @eq lst (lfappend l2 lf4) (##hole##)
Sketch conj6_term_sketch1 : @eq natural (len (lfappend l2 lf4)) (##hole##)
Sketch conj8_sketch0 : @eq natural lf3 (##hole##)
Sketch conj8_sketch1 : @eq natural lf3 (len (##hole##))
Sketch conj8_sketch2 : @eq natural lf3 (len (lfappend l2 (##hole##)))
Sketch conj8_term_sketch0 : @eq natural (len (lfappend l2 Nil)) (##hole##)
Sketch conj8_term_sketch1 : @eq lst (lfappend l2 Nil) (##hole##)
Sketch conj8_term_sketch2 : @eq lst Nil (##hole##)
Sketch conj9_sketch0 : @eq natural (##hole##) lf1
Sketch conj9_term_sketch0 : @eq natural (len l2) (##hole##)
Sketch conj13_sketch0 : @eq natural (##hole##) (len lf2)
Sketch conj13_sketch1 : @eq natural (len l2) (##hole##)
Sketch conj13_term_sketch0 : @eq natural (len l2) (##hole##)
Sketch conj13_term_sketch1 : @eq natural (len lf2) (##hole##)
Sketch conj14_sketch0 : @eq natural (len l2) (len (##hole##))
Sketch conj14_sketch1 : @eq natural (##hole##) (len (lfappend l2 lf4))
Sketch conj14_sketch2 : @eq natural (len l2) (##hole##)
Sketch conj14_term_sketch0 : @eq lst (lfappend l2 lf4) (##hole##)
Sketch conj14_term_sketch1 : @eq natural (len l2) (##hole##)
Sketch conj14_term_sketch2 : @eq natural (len (lfappend l2 lf4)) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 49 seconds
Problems per Sketch:
Sketch conj6_sketch1 --> Problem  synth_1
Sketch conj5_sketch0 --> Problem  synth_1
Sketch conj14_sketch2 --> Problem  synth_7
Sketch conj13_term_sketch0 --> Problem  synth_7
Sketch conj14_term_sketch2 --> Problem  synth_5
Sketch conj6_term_sketch1 --> Problem  synth_5
Sketch conj8_sketch1 --> Problem  synth_3
Sketch conj6_term_sketch0 --> Problem  synth_4
Sketch conj13_sketch1 --> Problem  synth_7
Sketch conj14_sketch0 --> Problem  synth_8
Sketch conj13_term_sketch1 --> Problem  synth_2
Sketch conj8_term_sketch0 --> Problem  synth_7
Sketch conj14_term_sketch0 --> Problem  synth_4
Sketch conj13_sketch0 --> Problem  synth_2
Sketch conj9_sketch0 --> Problem  synth_10
Sketch conj8_sketch2 --> Problem  synth_6
Sketch conj8_sketch0 --> Problem  synth_1
Sketch conj14_term_sketch1 --> Problem  synth_7
Sketch conj8_term_sketch1 --> Problem  synth_8
Sketch conj8_term_sketch2 --> Problem  synth_9
Sketch conj5_term_sketch0 --> Problem  synth_2
Sketch conj6_sketch0 --> Problem  synth_3
Sketch conj14_sketch1 --> Problem  synth_5
Sketch conj9_term_sketch0 --> Problem  synth_7


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 140 seconds

Problem: synth_10
 lf1

Problem: synth_8
 lfappend (lfappend (lfappend l2 Nil) Nil) Nil
 lfappend (lfappend l2 Nil) Nil
 lfappend l2 Nil
 l2

Problem: synth_3

Problem: synth_9
 Nil

Problem: synth_6
 Nil

Problem: synth_7
 half (len (lfappend l2 (Cons Zero l2)))
 half (len (lfappend l2 (lfappend l2 Nil)))
 match len (lfappend l2 l2) with | Succ n => Succ (half n) | Zero => Zero end
 half (len (lfappend l2 l2))
 len (lfappend l2 Nil)
 len l2

Problem: synth_5
 len (lfappend l2 (lfappend lf4 Nil))
 half (len (lfappend l2 l2))
 len (lfappend lf4 l2)
 len (lfappend l2 lf4)
 len (lfappend l2 Nil)
 len l2

Problem: synth_4
 lfappend lf4 (lfappend l2 Nil)
 lfappend l2 (lfappend lf4 Nil)
 lfappend lf4 l2
 lfappend l2 lf4
 lfappend l2 Nil
 l2

Problem: synth_1
 lf3

Problem: synth_2
 half (len (lfappend lf2 (Cons Zero lf2)))
 half (len (lfappend lf2 (lfappend lf2 Nil)))
 match len (lfappend lf2 lf2) with | Succ n => Succ (half n) | Zero => Zero end
 half (len (lfappend lf2 lf2))
 len (lfappend lf2 Nil)
 len lf2

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 140 seconds
Lemmas:
Lemma candidate_1: forall (l2 : lst), @eq natural (len l2) (len (lfappend l2 Nil)).
Lemma candidate_2: forall (lf3 : natural), @eq natural lf3 (lf3).
Lemma candidate_3: forall (lf2 : lst), @eq natural (len lf2) (half (len (lfappend lf2 (Cons Zero lf2)))).
Lemma candidate_4: forall (lf2 : lst), @eq natural (len lf2) (half (len (lfappend lf2 (lfappend lf2 Nil)))).
Lemma candidate_5: forall (lf2 : lst), @eq natural (len lf2)   (match len (lfappend lf2 lf2) with | Succ n => Succ (half n) | Zero => Zero end).
Lemma candidate_6: forall (lf2 : lst), @eq natural (len lf2) (half (len (lfappend lf2 lf2))).
Lemma candidate_7: forall (lf2 : lst), @eq natural (len lf2) (len (lfappend lf2 Nil)).
Lemma candidate_8: forall (lf2 : lst), @eq natural (len lf2) (len lf2).
Lemma candidate_9: forall (lf3 : natural), @eq natural lf3 (lf3).
Lemma candidate_10: forall (l2 : lst) (lf4 : lst), @eq lst (lfappend l2 lf4) (lfappend lf4 (lfappend l2 Nil)).
Lemma candidate_11: forall (l2 : lst) (lf4 : lst), @eq lst (lfappend l2 lf4) (lfappend l2 (lfappend lf4 Nil)).
Lemma candidate_12: forall (l2 : lst) (lf4 : lst), @eq lst (lfappend l2 lf4) (lfappend lf4 l2).
Lemma candidate_13: forall (l2 : lst) (lf4 : lst), @eq lst (lfappend l2 lf4) (lfappend l2 lf4).
Lemma candidate_14: forall (l2 : lst) (lf4 : lst), @eq lst (lfappend l2 lf4) (lfappend l2 Nil).
Lemma candidate_15: forall (l2 : lst) (lf4 : lst), @eq lst (lfappend l2 lf4) (l2).
Lemma candidate_16: forall (l2 : lst) (lf4 : lst), @eq natural (len (lfappend l2 lf4)) (len (lfappend l2 (lfappend lf4 Nil))).
Lemma candidate_17: forall (l2 : lst) (lf4 : lst), @eq natural (len (lfappend l2 lf4)) (half (len (lfappend l2 l2))).
Lemma candidate_18: forall (l2 : lst) (lf4 : lst), @eq natural (len (lfappend l2 lf4)) (len (lfappend lf4 l2)).
Lemma candidate_19: forall (l2 : lst) (lf4 : lst), @eq natural (len (lfappend l2 lf4)) (len (lfappend l2 lf4)).
Lemma candidate_20: forall (l2 : lst) (lf4 : lst), @eq natural (len (lfappend l2 lf4)) (len (lfappend l2 Nil)).
Lemma candidate_21: forall (l2 : lst) (lf4 : lst), @eq natural (len (lfappend l2 lf4)) (len l2).
Lemma candidate_22: forall (lf3 : natural), @eq natural lf3 (lf3).
Lemma candidate_23: forall (lf3 : natural) (l2 : lst), @eq natural lf3 (len (lfappend l2 (Nil))).
Lemma candidate_24: forall (l2 : lst), @eq natural (len (lfappend l2 Nil)) (half (len (lfappend l2 (Cons Zero l2)))).
Lemma candidate_25: forall (l2 : lst), @eq natural (len (lfappend l2 Nil))   (half (len (lfappend l2 (lfappend l2 Nil)))).
Lemma candidate_26: forall (l2 : lst), @eq natural (len (lfappend l2 Nil))   (match len (lfappend l2 l2) with | Succ n => Succ (half n) | Zero => Zero end).
Lemma candidate_27: forall (l2 : lst), @eq natural (len (lfappend l2 Nil)) (half (len (lfappend l2 l2))).
Lemma candidate_28: forall (l2 : lst), @eq natural (len (lfappend l2 Nil)) (len (lfappend l2 Nil)).
Lemma candidate_29: forall (l2 : lst), @eq natural (len (lfappend l2 Nil)) (len l2).
Lemma candidate_30: forall (l2 : lst), @eq lst (lfappend l2 Nil) (lfappend (lfappend (lfappend l2 Nil) Nil) Nil).
Lemma candidate_31: forall (l2 : lst), @eq lst (lfappend l2 Nil) (lfappend (lfappend l2 Nil) Nil).
Lemma candidate_32: forall (l2 : lst), @eq lst (lfappend l2 Nil) (lfappend l2 Nil).
Lemma candidate_33: forall (l2 : lst), @eq lst (lfappend l2 Nil) (l2).
Lemma candidate_34: @eq lst Nil (Nil).
Lemma candidate_35: forall (lf1 : natural), @eq natural (lf1) lf1.
Lemma candidate_36: forall (l2 : lst), @eq natural (len l2) (half (len (lfappend l2 (Cons Zero l2)))).
Lemma candidate_37: forall (l2 : lst), @eq natural (len l2) (half (len (lfappend l2 (lfappend l2 Nil)))).
Lemma candidate_38: forall (l2 : lst), @eq natural (len l2)   (match len (lfappend l2 l2) with | Succ n => Succ (half n) | Zero => Zero end).
Lemma candidate_39: forall (l2 : lst), @eq natural (len l2) (half (len (lfappend l2 l2))).
Lemma candidate_40: forall (l2 : lst), @eq natural (len l2) (len (lfappend l2 Nil)).
Lemma candidate_41: forall (l2 : lst), @eq natural (len l2) (len l2).
Lemma candidate_42: forall (lf2 : lst), @eq natural (half (len (lfappend lf2 (Cons Zero lf2)))) (len lf2).
Lemma candidate_43: forall (lf2 : lst), @eq natural (half (len (lfappend lf2 (lfappend lf2 Nil)))) (len lf2).
Lemma candidate_44: forall (lf2 : lst), @eq natural   (match len (lfappend lf2 lf2) with | Succ n => Succ (half n) | Zero => Zero end)   (len lf2).
Lemma candidate_45: forall (lf2 : lst), @eq natural (half (len (lfappend lf2 lf2))) (len lf2).
Lemma candidate_46: forall (lf2 : lst), @eq natural (len (lfappend lf2 Nil)) (len lf2).
Lemma candidate_47: forall (lf2 : lst), @eq natural (len lf2) (len lf2).
Lemma candidate_48: forall (l2 : lst), @eq natural (len l2) (half (len (lfappend l2 (Cons Zero l2)))).
Lemma candidate_49: forall (l2 : lst), @eq natural (len l2) (half (len (lfappend l2 (lfappend l2 Nil)))).
Lemma candidate_50: forall (l2 : lst), @eq natural (len l2)   (match len (lfappend l2 l2) with | Succ n => Succ (half n) | Zero => Zero end).
Lemma candidate_51: forall (l2 : lst), @eq natural (len l2) (half (len (lfappend l2 l2))).
Lemma candidate_52: forall (l2 : lst), @eq natural (len l2) (len (lfappend l2 Nil)).
Lemma candidate_53: forall (l2 : lst), @eq natural (len l2) (len l2).
Lemma candidate_54: forall (l2 : lst), @eq natural (len l2) (half (len (lfappend l2 (Cons Zero l2)))).
Lemma candidate_55: forall (l2 : lst), @eq natural (len l2) (half (len (lfappend l2 (lfappend l2 Nil)))).
Lemma candidate_56: forall (l2 : lst), @eq natural (len l2)   (match len (lfappend l2 l2) with | Succ n => Succ (half n) | Zero => Zero end).
Lemma candidate_57: forall (l2 : lst), @eq natural (len l2) (half (len (lfappend l2 l2))).
Lemma candidate_58: forall (l2 : lst), @eq natural (len l2) (len (lfappend l2 Nil)).
Lemma candidate_59: forall (l2 : lst), @eq natural (len l2) (len l2).
Lemma candidate_60: forall (lf2 : lst), @eq natural (len lf2) (half (len (lfappend lf2 (Cons Zero lf2)))).
Lemma candidate_61: forall (lf2 : lst), @eq natural (len lf2) (half (len (lfappend lf2 (lfappend lf2 Nil)))).
Lemma candidate_62: forall (lf2 : lst), @eq natural (len lf2)   (match len (lfappend lf2 lf2) with | Succ n => Succ (half n) | Zero => Zero end).
Lemma candidate_63: forall (lf2 : lst), @eq natural (len lf2) (half (len (lfappend lf2 lf2))).
Lemma candidate_64: forall (lf2 : lst), @eq natural (len lf2) (len (lfappend lf2 Nil)).
Lemma candidate_65: forall (lf2 : lst), @eq natural (len lf2) (len lf2).
Lemma candidate_66: forall (l2 : lst), @eq natural (len l2) (len (lfappend (lfappend (lfappend l2 Nil) Nil) Nil)).
Lemma candidate_67: forall (l2 : lst), @eq natural (len l2) (len (lfappend (lfappend l2 Nil) Nil)).
Lemma candidate_68: forall (l2 : lst), @eq natural (len l2) (len (lfappend l2 Nil)).
Lemma candidate_69: forall (l2 : lst), @eq natural (len l2) (len (l2)).
Lemma candidate_70: forall (l2 : lst) (lf4 : lst), @eq natural (len (lfappend l2 (lfappend lf4 Nil))) (len (lfappend l2 lf4)).
Lemma candidate_71: forall (l2 : lst) (lf4 : lst), @eq natural (half (len (lfappend l2 l2))) (len (lfappend l2 lf4)).
Lemma candidate_72: forall (l2 : lst) (lf4 : lst), @eq natural (len (lfappend lf4 l2)) (len (lfappend l2 lf4)).
Lemma candidate_73: forall (l2 : lst) (lf4 : lst), @eq natural (len (lfappend l2 lf4)) (len (lfappend l2 lf4)).
Lemma candidate_74: forall (l2 : lst) (lf4 : lst), @eq natural (len (lfappend l2 Nil)) (len (lfappend l2 lf4)).
Lemma candidate_75: forall (l2 : lst) (lf4 : lst), @eq natural (len l2) (len (lfappend l2 lf4)).
Lemma candidate_76: forall (l2 : lst), @eq natural (len l2) (half (len (lfappend l2 (Cons Zero l2)))).
Lemma candidate_77: forall (l2 : lst), @eq natural (len l2) (half (len (lfappend l2 (lfappend l2 Nil)))).
Lemma candidate_78: forall (l2 : lst), @eq natural (len l2)   (match len (lfappend l2 l2) with | Succ n => Succ (half n) | Zero => Zero end).
Lemma candidate_79: forall (l2 : lst), @eq natural (len l2) (half (len (lfappend l2 l2))).
Lemma candidate_80: forall (l2 : lst), @eq natural (len l2) (len (lfappend l2 Nil)).
Lemma candidate_81: forall (l2 : lst), @eq natural (len l2) (len l2).
Lemma candidate_82: forall (l2 : lst) (lf4 : lst), @eq lst (lfappend l2 lf4) (lfappend lf4 (lfappend l2 Nil)).
Lemma candidate_83: forall (l2 : lst) (lf4 : lst), @eq lst (lfappend l2 lf4) (lfappend l2 (lfappend lf4 Nil)).
Lemma candidate_84: forall (l2 : lst) (lf4 : lst), @eq lst (lfappend l2 lf4) (lfappend lf4 l2).
Lemma candidate_85: forall (l2 : lst) (lf4 : lst), @eq lst (lfappend l2 lf4) (lfappend l2 lf4).
Lemma candidate_86: forall (l2 : lst) (lf4 : lst), @eq lst (lfappend l2 lf4) (lfappend l2 Nil).
Lemma candidate_87: forall (l2 : lst) (lf4 : lst), @eq lst (lfappend l2 lf4) (l2).
Lemma candidate_88: forall (l2 : lst), @eq natural (len l2) (half (len (lfappend l2 (Cons Zero l2)))).
Lemma candidate_89: forall (l2 : lst), @eq natural (len l2) (half (len (lfappend l2 (lfappend l2 Nil)))).
Lemma candidate_90: forall (l2 : lst), @eq natural (len l2)   (match len (lfappend l2 l2) with | Succ n => Succ (half n) | Zero => Zero end).
Lemma candidate_91: forall (l2 : lst), @eq natural (len l2) (half (len (lfappend l2 l2))).
Lemma candidate_92: forall (l2 : lst), @eq natural (len l2) (len (lfappend l2 Nil)).
Lemma candidate_93: forall (l2 : lst), @eq natural (len l2) (len l2).
Lemma candidate_94: forall (l2 : lst) (lf4 : lst), @eq natural (len (lfappend l2 lf4)) (len (lfappend l2 (lfappend lf4 Nil))).
Lemma candidate_95: forall (l2 : lst) (lf4 : lst), @eq natural (len (lfappend l2 lf4)) (half (len (lfappend l2 l2))).
Lemma candidate_96: forall (l2 : lst) (lf4 : lst), @eq natural (len (lfappend l2 lf4)) (len (lfappend lf4 l2)).
Lemma candidate_97: forall (l2 : lst) (lf4 : lst), @eq natural (len (lfappend l2 lf4)) (len (lfappend l2 lf4)).
Lemma candidate_98: forall (l2 : lst) (lf4 : lst), @eq natural (len (lfappend l2 lf4)) (len (lfappend l2 Nil)).
Lemma candidate_99: forall (l2 : lst) (lf4 : lst), @eq natural (len (lfappend l2 lf4)) (len l2).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 238 seconds
Duplicates removed: 49
Filtered by Quickchick: 11
Filtered by script: 15
Remaining: 24

Lemmas: 
Lemma candidate_33: forall (l2 : lst), @eq lst (lfappend l2 Nil) (l2).
Lemma candidate_39: forall (l2 : lst), @eq natural (len l2) (half (len (lfappend l2 l2))).
Lemma candidate_45: forall (lf2 : lst), @eq natural (half (len (lfappend lf2 lf2))) (len lf2).
Lemma candidate_6: forall (lf2 : lst), @eq natural (len lf2) (half (len (lfappend lf2 lf2))).
Lemma candidate_31: forall (l2 : lst), @eq lst (lfappend l2 Nil) (lfappend (lfappend l2 Nil) Nil).
Lemma candidate_11: forall (l2 : lst) (lf4 : lst), @eq lst (lfappend l2 lf4) (lfappend l2 (lfappend lf4 Nil)).
Lemma candidate_67: forall (l2 : lst), @eq natural (len l2) (len (lfappend (lfappend l2 Nil) Nil)).
Lemma candidate_36: forall (l2 : lst), @eq natural (len l2) (half (len (lfappend l2 (Cons Zero l2)))).
Lemma candidate_42: forall (lf2 : lst), @eq natural (half (len (lfappend lf2 (Cons Zero lf2)))) (len lf2).
Lemma candidate_37: forall (l2 : lst), @eq natural (len l2) (half (len (lfappend l2 (lfappend l2 Nil)))).
Lemma candidate_27: forall (l2 : lst), @eq natural (len (lfappend l2 Nil)) (half (len (lfappend l2 l2))).
Lemma candidate_3: forall (lf2 : lst), @eq natural (len lf2) (half (len (lfappend lf2 (Cons Zero lf2)))).
Lemma candidate_43: forall (lf2 : lst), @eq natural (half (len (lfappend lf2 (lfappend lf2 Nil)))) (len lf2).
Lemma candidate_4: forall (lf2 : lst), @eq natural (len lf2) (half (len (lfappend lf2 (lfappend lf2 Nil)))).
Lemma candidate_30: forall (l2 : lst), @eq lst (lfappend l2 Nil) (lfappend (lfappend (lfappend l2 Nil) Nil) Nil).
Lemma candidate_70: forall (l2 : lst) (lf4 : lst), @eq natural (len (lfappend l2 (lfappend lf4 Nil))) (len (lfappend l2 lf4)).
Lemma candidate_66: forall (l2 : lst), @eq natural (len l2) (len (lfappend (lfappend (lfappend l2 Nil) Nil) Nil)).
Lemma candidate_16: forall (l2 : lst) (lf4 : lst), @eq natural (len (lfappend l2 lf4)) (len (lfappend l2 (lfappend lf4 Nil))).
Lemma candidate_24: forall (l2 : lst), @eq natural (len (lfappend l2 Nil)) (half (len (lfappend l2 (Cons Zero l2)))).
Lemma candidate_25: forall (l2 : lst), @eq natural (len (lfappend l2 Nil))   (half (len (lfappend l2 (lfappend l2 Nil)))).
Lemma candidate_38: forall (l2 : lst), @eq natural (len l2)   (match len (lfappend l2 l2) with | Succ n => Succ (half n) | Zero => Zero end).
Lemma candidate_5: forall (lf2 : lst), @eq natural (len lf2)   (match len (lfappend lf2 lf2) with | Succ n => Succ (half n) | Zero => Zero end).
Lemma candidate_44: forall (lf2 : lst), @eq natural   (match len (lfappend lf2 lf2) with | Succ n => Succ (half n) | Zero => Zero end)   (len lf2).
Lemma candidate_26: forall (l2 : lst), @eq natural (len (lfappend l2 Nil))   (match len (lfappend l2 l2) with | Succ n => Succ (half n) | Zero => Zero end).