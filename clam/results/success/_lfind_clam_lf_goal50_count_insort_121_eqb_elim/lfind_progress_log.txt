File Information
- File name: goal50
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal50_count_insort_121_eqb_elim
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal50_count_insort_121_eqb_elim
- Namespace: adtind
- Proof name: count_insort
- Theorem: Theorem count_insort: forall (x0 : natural) (l0 : lst),
@eq natural (count (insort l0 x0) x0) (Succ (count l0 x0)).
- Declarations: 
From lfind Require Import LFind.
Require Import Arith.

Proof Context
* Goal State: @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x)))

* Hypothesis:
x : natural
IHl : @eq natural (count (insort l x) x) (Succ (count l x))
l : lst
n : natural
E : Bool.Is_true (lfeqb x n)

* Types:
Set
natural
Prop
lst
bool

* Polymorphic Types:


* Variables:
x : natural
l : lst
n : natural

* Terms:
Bool.Is_true (lfeqb x n) : Prop
@eq natural (count (insort l x) x) (Succ (count l x)) : Prop
count l x : natural
Cons n (insort l x) : lst
x : natural
lst : Set
lfeqb x n : bool
Succ (count l x) : natural
insort l x : lst
count (Cons n (insort l x)) x : natural
Succ (Succ (count l x)) : natural
n : natural
natural : Set
l : lst
@eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))) : Prop
count (insort l x) x : natural

* Functions:
Succ  : forall _ : natural, natural
count  : forall (_ : lst) (_ : natural), natural
lfeqb  : forall (_ : natural) (_ : natural), bool
Bool.Is_true  : forall _ : bool, Prop
insort  : forall (_ : lst) (_ : natural), lst
Cons  : forall (_ : natural) (_ : lst), lst
@eq  : forall (A : Type) (_ : A) (_ : A), Prop

<---GENERALIZATION--->
Time elapsed: 117 seconds
Generalized Variables:
lf3 : lst = Cons n (insort l x)
lf1 : natural = count (Cons n (insort l x)) x
lf4 : natural = Succ (count l x)
lf5 : lst = insort l x
lf2 : natural = Succ (Succ (count l x))
lf6 : natural = count l x

Generalizations:
Lemma conj1: forall (lf2 : natural) (lf1 : natural), @eq natural lf1 lf2.
Lemma conj3: forall (lf4 : natural) (lf1 : natural), @eq natural lf1 (Succ lf4).
Lemma conj11: forall (lf6 : natural) (lf1 : natural), @eq natural lf1 (Succ (Succ lf6)).
Lemma conj12: forall (x : natural) (lf1 : natural) (l : lst), @eq natural lf1 (Succ (Succ (count l x))).
Lemma conj17: forall (lf2 : natural) (x : natural) (lf3 : lst), @eq natural (count lf3 x) lf2.
Lemma conj19: forall (x : natural) (lf4 : natural) (lf3 : lst), @eq natural (count lf3 x) (Succ lf4).
Lemma conj27: forall (lf6 : natural) (x : natural) (lf3 : lst), @eq natural (count lf3 x) (Succ (Succ lf6)).
Lemma conj28: forall (x : natural) (l : lst) (lf3 : lst), @eq natural (count lf3 x) (Succ (Succ (count l x))).
Lemma conj49: forall (lf2 : natural) (lf5 : lst) (x : natural) (n : natural), @eq natural (count (Cons n lf5) x) lf2.
Lemma conj51: forall (lf5 : lst) (x : natural) (lf4 : natural) (n : natural), @eq natural (count (Cons n lf5) x) (Succ lf4).
Lemma conj53: forall (lf2 : natural) (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) lf2.
Lemma conj55: forall (x : natural) (lf4 : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) (Succ lf4).
Lemma conj59: forall (lf6 : natural) (lf5 : lst) (x : natural) (n : natural), @eq natural (count (Cons n lf5) x) (Succ (Succ lf6)).
Lemma conj60: forall (lf5 : lst) (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n lf5) x) (Succ (Succ (count l x))).
Lemma conj63: forall (lf6 : natural) (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ lf6)).
Lemma conj64: forall (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).


<---VALIDITY CHECKS--->
Time elapsed: 204 seconds
Valid:

Invalid:
Lemma conj64: forall (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).
Lemma conj63: forall (lf6 : natural) (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ lf6)).
Lemma conj60: forall (lf5 : lst) (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n lf5) x) (Succ (Succ (count l x))).
Lemma conj59: forall (lf6 : natural) (lf5 : lst) (x : natural) (n : natural), @eq natural (count (Cons n lf5) x) (Succ (Succ lf6)).
Lemma conj55: forall (x : natural) (lf4 : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) (Succ lf4).
Lemma conj53: forall (lf2 : natural) (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) lf2.
Lemma conj51: forall (lf5 : lst) (x : natural) (lf4 : natural) (n : natural), @eq natural (count (Cons n lf5) x) (Succ lf4).
Lemma conj49: forall (lf2 : natural) (lf5 : lst) (x : natural) (n : natural), @eq natural (count (Cons n lf5) x) lf2.
Lemma conj28: forall (x : natural) (l : lst) (lf3 : lst), @eq natural (count lf3 x) (Succ (Succ (count l x))).
Lemma conj27: forall (lf6 : natural) (x : natural) (lf3 : lst), @eq natural (count lf3 x) (Succ (Succ lf6)).
Lemma conj19: forall (x : natural) (lf4 : natural) (lf3 : lst), @eq natural (count lf3 x) (Succ lf4).
Lemma conj17: forall (lf2 : natural) (x : natural) (lf3 : lst), @eq natural (count lf3 x) lf2.
Lemma conj12: forall (x : natural) (lf1 : natural) (l : lst), @eq natural lf1 (Succ (Succ (count l x))).
Lemma conj11: forall (lf6 : natural) (lf1 : natural), @eq natural lf1 (Succ (Succ lf6)).
Lemma conj3: forall (lf4 : natural) (lf1 : natural), @eq natural lf1 (Succ lf4).
Lemma conj1: forall (lf2 : natural) (lf1 : natural), @eq natural lf1 lf2.

<---ADD IMPLICATIONS--->
Time elapsed: 241 seconds
Generalizations:
Lemma conj64: forall (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).
Lemma conj63: forall (lf6 : natural) (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ lf6)).
Lemma conj60: forall (lf5 : lst) (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n lf5) x) (Succ (Succ (count l x))).
Lemma conj60_imp: forall (lf5 : lst) (x : natural) (l : lst) (n : natural), forall _ : @eq natural (count lf5 x) (Succ (count l x)),
@eq natural (count (Cons n lf5) x) (Succ (Succ (count l x))).
Lemma conj59: forall (lf6 : natural) (lf5 : lst) (x : natural) (n : natural), @eq natural (count (Cons n lf5) x) (Succ (Succ lf6)).
Lemma conj59_imp: forall (lf6 : natural) (lf5 : lst) (x : natural) (n : natural), forall _ : @eq natural (count lf5 x) (Succ lf6),
@eq natural (count (Cons n lf5) x) (Succ (Succ lf6)).
Lemma conj55: forall (x : natural) (lf4 : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) (Succ lf4).
Lemma conj55_imp: forall (x : natural) (lf4 : natural) (l : lst) (n : natural), forall _ : @eq natural (count (insort l x) x) lf4,
@eq natural (count (Cons n (insort l x)) x) (Succ lf4).
Lemma conj53: forall (lf2 : natural) (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) lf2.
Lemma conj51: forall (lf5 : lst) (x : natural) (lf4 : natural) (n : natural), @eq natural (count (Cons n lf5) x) (Succ lf4).
Lemma conj51_imp: forall (lf5 : lst) (x : natural) (lf4 : natural) (n : natural), forall _ : @eq natural (count lf5 x) lf4,
@eq natural (count (Cons n lf5) x) (Succ lf4).
Lemma conj49: forall (lf2 : natural) (lf5 : lst) (x : natural) (n : natural), @eq natural (count (Cons n lf5) x) lf2.
Lemma conj28: forall (x : natural) (l : lst) (lf3 : lst), @eq natural (count lf3 x) (Succ (Succ (count l x))).
Lemma conj27: forall (lf6 : natural) (x : natural) (lf3 : lst), @eq natural (count lf3 x) (Succ (Succ lf6)).
Lemma conj19: forall (x : natural) (lf4 : natural) (lf3 : lst), @eq natural (count lf3 x) (Succ lf4).
Lemma conj17: forall (lf2 : natural) (x : natural) (lf3 : lst), @eq natural (count lf3 x) lf2.
Lemma conj12: forall (x : natural) (lf1 : natural) (l : lst), @eq natural lf1 (Succ (Succ (count l x))).
Lemma conj11: forall (lf6 : natural) (lf1 : natural), @eq natural lf1 (Succ (Succ lf6)).
Lemma conj3: forall (lf4 : natural) (lf1 : natural), @eq natural lf1 (Succ lf4).
Lemma conj1: forall (lf2 : natural) (lf1 : natural), @eq natural lf1 lf2.


<---VALIDITY CHECKS--->
Time elapsed: 276 seconds
Valid:

Invalid:
Lemma conj1: forall (lf2 : natural) (lf1 : natural), @eq natural lf1 lf2.
Lemma conj3: forall (lf4 : natural) (lf1 : natural), @eq natural lf1 (Succ lf4).
Lemma conj11: forall (lf6 : natural) (lf1 : natural), @eq natural lf1 (Succ (Succ lf6)).
Lemma conj12: forall (x : natural) (lf1 : natural) (l : lst), @eq natural lf1 (Succ (Succ (count l x))).
Lemma conj17: forall (lf2 : natural) (x : natural) (lf3 : lst), @eq natural (count lf3 x) lf2.
Lemma conj19: forall (x : natural) (lf4 : natural) (lf3 : lst), @eq natural (count lf3 x) (Succ lf4).
Lemma conj27: forall (lf6 : natural) (x : natural) (lf3 : lst), @eq natural (count lf3 x) (Succ (Succ lf6)).
Lemma conj28: forall (x : natural) (l : lst) (lf3 : lst), @eq natural (count lf3 x) (Succ (Succ (count l x))).
Lemma conj49: forall (lf2 : natural) (lf5 : lst) (x : natural) (n : natural), @eq natural (count (Cons n lf5) x) lf2.
Lemma conj51_imp: forall (lf5 : lst) (x : natural) (lf4 : natural) (n : natural), forall _ : @eq natural (count lf5 x) lf4,
@eq natural (count (Cons n lf5) x) (Succ lf4).
Lemma conj51: forall (lf5 : lst) (x : natural) (lf4 : natural) (n : natural), @eq natural (count (Cons n lf5) x) (Succ lf4).
Lemma conj53: forall (lf2 : natural) (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) lf2.
Lemma conj55_imp: forall (x : natural) (lf4 : natural) (l : lst) (n : natural), forall _ : @eq natural (count (insort l x) x) lf4,
@eq natural (count (Cons n (insort l x)) x) (Succ lf4).
Lemma conj55: forall (x : natural) (lf4 : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) (Succ lf4).
Lemma conj59_imp: forall (lf6 : natural) (lf5 : lst) (x : natural) (n : natural), forall _ : @eq natural (count lf5 x) (Succ lf6),
@eq natural (count (Cons n lf5) x) (Succ (Succ lf6)).
Lemma conj59: forall (lf6 : natural) (lf5 : lst) (x : natural) (n : natural), @eq natural (count (Cons n lf5) x) (Succ (Succ lf6)).
Lemma conj60_imp: forall (lf5 : lst) (x : natural) (l : lst) (n : natural), forall _ : @eq natural (count lf5 x) (Succ (count l x)),
@eq natural (count (Cons n lf5) x) (Succ (Succ (count l x))).
Lemma conj60: forall (lf5 : lst) (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n lf5) x) (Succ (Succ (count l x))).
Lemma conj63: forall (lf6 : natural) (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ lf6)).
Lemma conj64: forall (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).


<---CREATE SKETCHES--->
Time elapsed: 276 seconds
Sketches:
Sketch conj3_sketch0 : @eq natural lf1 (##hole##)
Sketch conj3_term_sketch0 : @eq natural (Succ lf4) (##hole##)
Sketch conj11_sketch0 : @eq natural lf1 (Succ (##hole##))
Sketch conj11_sketch1 : @eq natural lf1 (##hole##)
Sketch conj11_term_sketch0 : @eq natural (Succ lf6) (##hole##)
Sketch conj11_term_sketch1 : @eq natural (Succ (Succ lf6)) (##hole##)
Sketch conj12_sketch0 : @eq natural lf1 (Succ (Succ (##hole##)))
Sketch conj12_sketch1 : @eq natural lf1 (Succ (##hole##))
Sketch conj12_sketch2 : @eq natural lf1 (##hole##)
Sketch conj12_term_sketch0 : @eq natural (count l x) (##hole##)
Sketch conj12_term_sketch1 : @eq natural (Succ (count l x)) (##hole##)
Sketch conj12_term_sketch2 : @eq natural (Succ (Succ (count l x))) (##hole##)
Sketch conj17_sketch0 : @eq natural (##hole##) lf2
Sketch conj17_term_sketch0 : @eq natural (count lf3 x) (##hole##)
Sketch conj19_sketch0 : @eq natural (##hole##) (Succ lf4)
Sketch conj19_sketch1 : @eq natural (count lf3 x) (##hole##)
Sketch conj19_term_sketch0 : @eq natural (count lf3 x) (##hole##)
Sketch conj19_term_sketch1 : @eq natural (Succ lf4) (##hole##)
Sketch conj27_sketch0 : @eq natural (##hole##) (Succ (Succ lf6))
Sketch conj27_sketch1 : @eq natural (count lf3 x) (Succ (##hole##))
Sketch conj27_sketch2 : @eq natural (count lf3 x) (##hole##)
Sketch conj27_term_sketch0 : @eq natural (count lf3 x) (##hole##)
Sketch conj27_term_sketch1 : @eq natural (Succ lf6) (##hole##)
Sketch conj27_term_sketch2 : @eq natural (Succ (Succ lf6)) (##hole##)
Sketch conj28_sketch0 : @eq natural (##hole##) (Succ (Succ (count l x)))
Sketch conj28_sketch1 : @eq natural (count lf3 x) (Succ (Succ (##hole##)))
Sketch conj28_sketch2 : @eq natural (count lf3 x) (Succ (##hole##))
Sketch conj28_sketch3 : @eq natural (count lf3 x) (##hole##)
Sketch conj28_term_sketch0 : @eq natural (count lf3 x) (##hole##)
Sketch conj28_term_sketch1 : @eq natural (count l x) (##hole##)
Sketch conj28_term_sketch2 : @eq natural (Succ (count l x)) (##hole##)
Sketch conj28_term_sketch3 : @eq natural (Succ (Succ (count l x))) (##hole##)
Sketch conj49_sketch0 : @eq natural (count (##hole##) x) lf2
Sketch conj49_sketch1 : @eq natural (##hole##) lf2
Sketch conj49_term_sketch0 : @eq lst (Cons n lf5) (##hole##)
Sketch conj49_term_sketch1 : @eq natural (count (Cons n lf5) x) (##hole##)
Sketch conj51_imp_sketch0 : forall _ : @eq natural (count lf5 x) lf4,
@eq natural (count (##hole##) x) (Succ lf4)
Sketch conj51_imp_sketch1 : forall _ : @eq natural (##hole##) lf4,
@eq natural (count (Cons n lf5) x) (Succ lf4)
Sketch conj51_imp_sketch2 : forall _ : @eq natural (count lf5 x) lf4,
@eq natural (count (Cons n lf5) x) (##hole##)
Sketch conj51_imp_sketch3 : forall _ : @eq natural (count lf5 x) lf4, @eq natural (##hole##) (Succ lf4)
Sketch conj51_imp_term_sketch0 : @eq lst (Cons n lf5) (##hole##)
Sketch conj51_imp_term_sketch1 : @eq natural (count lf5 x) (##hole##)
Sketch conj51_imp_term_sketch2 : @eq natural (Succ lf4) (##hole##)
Sketch conj51_imp_term_sketch3 : @eq natural (count (Cons n lf5) x) (##hole##)
Sketch conj51_sketch0 : @eq natural (count (##hole##) x) (Succ lf4)
Sketch conj51_sketch1 : @eq natural (count (Cons n lf5) x) (##hole##)
Sketch conj51_sketch2 : @eq natural (##hole##) (Succ lf4)
Sketch conj51_term_sketch0 : @eq lst (Cons n lf5) (##hole##)
Sketch conj51_term_sketch1 : @eq natural (Succ lf4) (##hole##)
Sketch conj51_term_sketch2 : @eq natural (count (Cons n lf5) x) (##hole##)
Sketch conj53_sketch0 : @eq natural (count (##hole##) x) lf2
Sketch conj53_sketch1 : @eq natural (count (Cons n (##hole##)) x) lf2
Sketch conj53_sketch2 : @eq natural (##hole##) lf2
Sketch conj53_term_sketch0 : @eq lst (Cons n (insort l x)) (##hole##)
Sketch conj53_term_sketch1 : @eq lst (insort l x) (##hole##)
Sketch conj53_term_sketch2 : @eq natural (count (Cons n (insort l x)) x) (##hole##)
Sketch conj55_imp_sketch0 : forall _ : @eq natural (count (insort l x) x) lf4,
@eq natural (count (##hole##) x) (Succ lf4)
Sketch conj55_imp_sketch1 : forall _ : @eq natural (count (insort l x) x) lf4,
@eq natural (count (Cons n (insort l x)) x) (##hole##)
Sketch conj55_imp_sketch2 : forall _ : @eq natural (count (##hole##) x) lf4,
@eq natural (count (Cons n (##hole##)) x) (Succ lf4)
Sketch conj55_imp_sketch3 : forall _ : @eq natural (count (insort l x) x) lf4,
@eq natural (##hole##) (Succ lf4)
Sketch conj55_imp_sketch4 : forall _ : @eq natural (##hole##) lf4,
@eq natural (count (Cons n (insort l x)) x) (Succ lf4)
Sketch conj55_imp_term_sketch0 : @eq lst (Cons n (insort l x)) (##hole##)
Sketch conj55_imp_term_sketch1 : @eq natural (Succ lf4) (##hole##)
Sketch conj55_imp_term_sketch2 : @eq lst (insort l x) (##hole##)
Sketch conj55_imp_term_sketch3 : @eq natural (count (Cons n (insort l x)) x) (##hole##)
Sketch conj55_imp_term_sketch4 : @eq natural (count (insort l x) x) (##hole##)
Sketch conj55_sketch0 : @eq natural (count (##hole##) x) (Succ lf4)
Sketch conj55_sketch1 : @eq natural (count (Cons n (insort l x)) x) (##hole##)
Sketch conj55_sketch2 : @eq natural (count (Cons n (##hole##)) x) (Succ lf4)
Sketch conj55_sketch3 : @eq natural (##hole##) (Succ lf4)
Sketch conj55_term_sketch0 : @eq lst (Cons n (insort l x)) (##hole##)
Sketch conj55_term_sketch1 : @eq natural (Succ lf4) (##hole##)
Sketch conj55_term_sketch2 : @eq lst (insort l x) (##hole##)
Sketch conj55_term_sketch3 : @eq natural (count (Cons n (insort l x)) x) (##hole##)
Sketch conj59_imp_sketch0 : forall _ : @eq natural (count lf5 x) (Succ lf6),
@eq natural (count (##hole##) x) (Succ (Succ lf6))
Sketch conj59_imp_sketch1 : forall _ : @eq natural (##hole##) (Succ lf6),
@eq natural (count (Cons n lf5) x) (Succ (Succ lf6))
Sketch conj59_imp_sketch2 : forall _ : @eq natural (count lf5 x) (##hole##),
@eq natural (count (Cons n lf5) x) (Succ (##hole##))
Sketch conj59_imp_sketch3 : forall _ : @eq natural (count lf5 x) (Succ lf6),
@eq natural (count (Cons n lf5) x) (##hole##)
Sketch conj59_imp_sketch4 : forall _ : @eq natural (count lf5 x) (Succ lf6),
@eq natural (##hole##) (Succ (Succ lf6))
Sketch conj59_imp_term_sketch0 : @eq lst (Cons n lf5) (##hole##)
Sketch conj59_imp_term_sketch1 : @eq natural (count lf5 x) (##hole##)
Sketch conj59_imp_term_sketch2 : @eq natural (Succ lf6) (##hole##)
Sketch conj59_imp_term_sketch3 : @eq natural (Succ (Succ lf6)) (##hole##)
Sketch conj59_imp_term_sketch4 : @eq natural (count (Cons n lf5) x) (##hole##)
Sketch conj59_sketch0 : @eq natural (count (##hole##) x) (Succ (Succ lf6))
Sketch conj59_sketch1 : @eq natural (count (Cons n lf5) x) (Succ (##hole##))
Sketch conj59_sketch2 : @eq natural (count (Cons n lf5) x) (##hole##)
Sketch conj59_sketch3 : @eq natural (##hole##) (Succ (Succ lf6))
Sketch conj59_term_sketch0 : @eq lst (Cons n lf5) (##hole##)
Sketch conj59_term_sketch1 : @eq natural (Succ lf6) (##hole##)
Sketch conj59_term_sketch2 : @eq natural (Succ (Succ lf6)) (##hole##)
Sketch conj59_term_sketch3 : @eq natural (count (Cons n lf5) x) (##hole##)
Sketch conj60_imp_sketch0 : forall _ : @eq natural (count lf5 x) (Succ (count l x)),
@eq natural (count (##hole##) x) (Succ (Succ (count l x)))
Sketch conj60_imp_sketch1 : forall _ : @eq natural (##hole##) (Succ (count l x)),
@eq natural (count (Cons n lf5) x) (Succ (Succ (count l x)))
Sketch conj60_imp_sketch2 : forall _ : @eq natural (count lf5 x) (Succ (##hole##)),
@eq natural (count (Cons n lf5) x) (Succ (Succ (##hole##)))
Sketch conj60_imp_sketch3 : forall _ : @eq natural (count lf5 x) (##hole##),
@eq natural (count (Cons n lf5) x) (Succ (##hole##))
Sketch conj60_imp_sketch4 : forall _ : @eq natural (count lf5 x) (Succ (count l x)),
@eq natural (count (Cons n lf5) x) (##hole##)
Sketch conj60_imp_sketch5 : forall _ : @eq natural (count lf5 x) (Succ (count l x)),
@eq natural (##hole##) (Succ (Succ (count l x)))
Sketch conj60_imp_term_sketch0 : @eq lst (Cons n lf5) (##hole##)
Sketch conj60_imp_term_sketch1 : @eq natural (count lf5 x) (##hole##)
Sketch conj60_imp_term_sketch2 : @eq natural (count l x) (##hole##)
Sketch conj60_imp_term_sketch3 : @eq natural (Succ (count l x)) (##hole##)
Sketch conj60_imp_term_sketch4 : @eq natural (Succ (Succ (count l x))) (##hole##)
Sketch conj60_imp_term_sketch5 : @eq natural (count (Cons n lf5) x) (##hole##)
Sketch conj60_sketch0 : @eq natural (count (##hole##) x) (Succ (Succ (count l x)))
Sketch conj60_sketch1 : @eq natural (count (Cons n lf5) x) (Succ (Succ (##hole##)))
Sketch conj60_sketch2 : @eq natural (count (Cons n lf5) x) (Succ (##hole##))
Sketch conj60_sketch3 : @eq natural (count (Cons n lf5) x) (##hole##)
Sketch conj60_sketch4 : @eq natural (##hole##) (Succ (Succ (count l x)))
Sketch conj60_term_sketch0 : @eq lst (Cons n lf5) (##hole##)
Sketch conj60_term_sketch1 : @eq natural (count l x) (##hole##)
Sketch conj60_term_sketch2 : @eq natural (Succ (count l x)) (##hole##)
Sketch conj60_term_sketch3 : @eq natural (Succ (Succ (count l x))) (##hole##)
Sketch conj60_term_sketch4 : @eq natural (count (Cons n lf5) x) (##hole##)
Sketch conj63_sketch0 : @eq natural (count (##hole##) x) (Succ (Succ lf6))
Sketch conj63_sketch1 : @eq natural (count (Cons n (insort l x)) x) (Succ (##hole##))
Sketch conj63_sketch2 : @eq natural (count (Cons n (##hole##)) x) (Succ (Succ lf6))
Sketch conj63_sketch3 : @eq natural (##hole##) (Succ (Succ lf6))
Sketch conj63_sketch4 : @eq natural (count (Cons n (insort l x)) x) (##hole##)
Sketch conj63_term_sketch0 : @eq lst (Cons n (insort l x)) (##hole##)
Sketch conj63_term_sketch1 : @eq natural (Succ lf6) (##hole##)
Sketch conj63_term_sketch2 : @eq lst (insort l x) (##hole##)
Sketch conj63_term_sketch3 : @eq natural (count (Cons n (insort l x)) x) (##hole##)
Sketch conj63_term_sketch4 : @eq natural (Succ (Succ lf6)) (##hole##)
Sketch conj64_sketch0 : @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (##hole##)))
Sketch conj64_sketch1 : @eq natural (count (##hole##) x) (Succ (Succ (count l x)))
Sketch conj64_sketch2 : @eq natural (count (Cons n (insort l x)) x) (Succ (##hole##))
Sketch conj64_sketch3 : @eq natural (count (Cons n (##hole##)) x) (Succ (Succ (count l x)))
Sketch conj64_sketch4 : @eq natural (##hole##) (Succ (Succ (count l x)))
Sketch conj64_sketch5 : @eq natural (count (Cons n (insort l x)) x) (##hole##)
Sketch conj64_term_sketch0 : @eq natural (count l x) (##hole##)
Sketch conj64_term_sketch1 : @eq lst (Cons n (insort l x)) (##hole##)
Sketch conj64_term_sketch2 : @eq natural (Succ (count l x)) (##hole##)
Sketch conj64_term_sketch3 : @eq lst (insort l x) (##hole##)
Sketch conj64_term_sketch4 : @eq natural (count (Cons n (insort l x)) x) (##hole##)
Sketch conj64_term_sketch5 : @eq natural (Succ (Succ (count l x))) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 1639 seconds
Problems per Sketch:
Sketch conj53_sketch1 --> Problem  synth_23
Sketch conj60_term_sketch1 --> Problem  synth_7
Sketch conj59_term_sketch2 --> Problem  synth_5
Sketch conj55_imp_term_sketch1 --> Problem  synth_2
Sketch conj11_term_sketch1 --> Problem  synth_5
Sketch conj63_sketch4 --> Problem  synth_26
Sketch conj51_imp_sketch1 --> Problem  synth_18
Sketch conj59_term_sketch1 --> Problem  synth_4
Sketch conj59_imp_sketch2 --> Problem  synth_34
Sketch conj59_sketch1 --> Problem  synth_34
Sketch conj53_term_sketch2 --> Problem  synth_26
Sketch conj60_sketch0 --> Problem  synth_43
Sketch conj17_term_sketch0 --> Problem  synth_11
Sketch conj63_term_sketch0 --> Problem  synth_24
Sketch conj55_sketch3 --> Problem  synth_2
Sketch conj12_term_sketch0 --> Problem  synth_7
Sketch conj59_imp_term_sketch4 --> Problem  synth_16
Sketch conj60_term_sketch3 --> Problem  synth_9
Sketch conj64_term_sketch5 --> Problem  synth_9
Sketch conj60_sketch2 --> Problem  synth_34
Sketch conj59_sketch3 --> Problem  synth_5
Sketch conj55_imp_sketch0 --> Problem  synth_27
Sketch conj64_term_sketch1 --> Problem  synth_24
Sketch conj63_term_sketch4 --> Problem  synth_5
Sketch conj3_term_sketch0 --> Problem  synth_2
Sketch conj60_imp_sketch1 --> Problem  synth_39
Sketch conj28_sketch2 --> Problem  synth_12
Sketch conj11_term_sketch0 --> Problem  synth_4
Sketch conj55_imp_sketch3 --> Problem  synth_30
Sketch conj19_term_sketch1 --> Problem  synth_2
Sketch conj28_term_sketch2 --> Problem  synth_8
Sketch conj51_imp_term_sketch3 --> Problem  synth_16
Sketch conj27_sketch1 --> Problem  synth_12
Sketch conj60_sketch3 --> Problem  synth_16
Sketch conj55_imp_term_sketch2 --> Problem  synth_25
Sketch conj55_imp_sketch4 --> Problem  synth_31
Sketch conj51_sketch0 --> Problem  synth_22
Sketch conj51_imp_sketch3 --> Problem  synth_20
Sketch conj63_term_sketch1 --> Problem  synth_4
Sketch conj60_imp_sketch4 --> Problem  synth_41
Sketch conj51_term_sketch1 --> Problem  synth_2
Sketch conj27_term_sketch1 --> Problem  synth_4
Sketch conj60_imp_term_sketch5 --> Problem  synth_16
Sketch conj49_sketch0 --> Problem  synth_14
Sketch conj59_imp_sketch4 --> Problem  synth_36
Sketch conj55_term_sketch1 --> Problem  synth_2
Sketch conj59_imp_term_sketch0 --> Problem  synth_15
Sketch conj49_term_sketch1 --> Problem  synth_16
Sketch conj12_term_sketch1 --> Problem  synth_8
Sketch conj64_term_sketch4 --> Problem  synth_26
Sketch conj64_sketch1 --> Problem  synth_43
Sketch conj53_term_sketch1 --> Problem  synth_25
Sketch conj55_imp_term_sketch3 --> Problem  synth_26
Sketch conj55_sketch0 --> Problem  synth_22
Sketch conj63_sketch1 --> Problem  synth_44
Sketch conj53_sketch2 --> Problem  synth_10
Sketch conj27_sketch0 --> Problem  synth_5
Sketch conj64_sketch4 --> Problem  synth_9
Sketch conj55_imp_term_sketch0 --> Problem  synth_24
Sketch conj60_imp_term_sketch1 --> Problem  synth_21
Sketch conj64_sketch5 --> Problem  synth_26
Sketch conj60_sketch4 --> Problem  synth_9
Sketch conj60_imp_sketch0 --> Problem  synth_38
Sketch conj51_imp_term_sketch0 --> Problem  synth_15
Sketch conj60_imp_term_sketch0 --> Problem  synth_15
Sketch conj11_sketch0 --> Problem  synth_3
Sketch conj27_term_sketch0 --> Problem  synth_11
Sketch conj51_sketch2 --> Problem  synth_2
Sketch conj63_term_sketch2 --> Problem  synth_25
Sketch conj12_sketch0 --> Problem  synth_6
Sketch conj28_sketch0 --> Problem  synth_9
Sketch conj64_term_sketch0 --> Problem  synth_7
Sketch conj60_term_sketch4 --> Problem  synth_16
Sketch conj55_imp_sketch2 --> Problem  synth_29
Sketch conj53_term_sketch0 --> Problem  synth_24
Sketch conj11_sketch1 --> Problem  synth_1
Sketch conj28_term_sketch1 --> Problem  synth_7
Sketch conj51_imp_sketch2 --> Problem  synth_19
Sketch conj60_imp_term_sketch3 --> Problem  synth_8
Sketch conj60_term_sketch2 --> Problem  synth_8
Sketch conj60_sketch1 --> Problem  synth_40
Sketch conj55_sketch1 --> Problem  synth_26
Sketch conj28_term_sketch3 --> Problem  synth_9
Sketch conj12_sketch1 --> Problem  synth_3
Sketch conj27_term_sketch2 --> Problem  synth_5
Sketch conj12_sketch2 --> Problem  synth_1
Sketch conj59_sketch2 --> Problem  synth_16
Sketch conj60_imp_term_sketch2 --> Problem  synth_7
Sketch conj55_imp_sketch1 --> Problem  synth_28
Sketch conj51_imp_term_sketch1 --> Problem  synth_21
Sketch conj51_term_sketch2 --> Problem  synth_16
Sketch conj27_sketch2 --> Problem  synth_11
Sketch conj60_term_sketch0 --> Problem  synth_15
Sketch conj53_sketch0 --> Problem  synth_14
Sketch conj51_imp_sketch0 --> Problem  synth_17
Sketch conj59_imp_sketch1 --> Problem  synth_33
Sketch conj12_term_sketch2 --> Problem  synth_9
Sketch conj19_term_sketch0 --> Problem  synth_11
Sketch conj59_imp_term_sketch2 --> Problem  synth_4
Sketch conj59_imp_term_sketch1 --> Problem  synth_21
Sketch conj60_imp_term_sketch4 --> Problem  synth_9
Sketch conj51_term_sketch0 --> Problem  synth_15
Sketch conj55_term_sketch0 --> Problem  synth_24
Sketch conj19_sketch0 --> Problem  synth_2
Sketch conj17_sketch0 --> Problem  synth_10
Sketch conj63_sketch2 --> Problem  synth_45
Sketch conj51_imp_term_sketch2 --> Problem  synth_2
Sketch conj59_imp_term_sketch3 --> Problem  synth_5
Sketch conj3_sketch0 --> Problem  synth_1
Sketch conj59_sketch0 --> Problem  synth_37
Sketch conj63_term_sketch3 --> Problem  synth_26
Sketch conj63_sketch0 --> Problem  synth_37
Sketch conj55_term_sketch3 --> Problem  synth_26
Sketch conj63_sketch3 --> Problem  synth_5
Sketch conj59_term_sketch0 --> Problem  synth_15
Sketch conj59_imp_sketch0 --> Problem  synth_32
Sketch conj28_term_sketch0 --> Problem  synth_11
Sketch conj59_term_sketch3 --> Problem  synth_16
Sketch conj51_sketch1 --> Problem  synth_16
Sketch conj64_sketch2 --> Problem  synth_44
Sketch conj64_sketch3 --> Problem  synth_47
Sketch conj19_sketch1 --> Problem  synth_11
Sketch conj59_imp_sketch3 --> Problem  synth_35
Sketch conj28_sketch3 --> Problem  synth_11
Sketch conj64_term_sketch2 --> Problem  synth_8
Sketch conj28_sketch1 --> Problem  synth_13
Sketch conj55_imp_term_sketch4 --> Problem  synth_8
Sketch conj60_imp_sketch3 --> Problem  synth_34
Sketch conj60_imp_sketch5 --> Problem  synth_42
Sketch conj64_sketch0 --> Problem  synth_46
Sketch conj60_imp_sketch2 --> Problem  synth_40
Sketch conj55_term_sketch2 --> Problem  synth_25
Sketch conj55_sketch2 --> Problem  synth_29
Sketch conj64_term_sketch3 --> Problem  synth_25
Sketch conj49_sketch1 --> Problem  synth_10
Sketch conj49_term_sketch0 --> Problem  synth_15


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 2020 seconds

Problem: synth_28
 if lfeqb x x then Succ (count (insort l n) x) else count (insort l n) x
 if lfeqb x n then Succ (count (insort l x) x) else count (insort l x) x
 if lfeqb x x then Succ (count (insort l x) x) else count (insort l x) x
 Succ (Succ (count l n))
 Succ (Succ (count l x))
 Succ lf4

Problem: synth_17
 Cons x lf5

Problem: synth_29

Problem: synth_45

Problem: synth_26
 if lfeqb x n then Succ (count (insort l n) x) else count (insort l n) x
 if lfeqb x x then Succ (count (insort l n) x) else count (insort l n) x
 if lfeqb x n then Succ (count (insort l x) x) else count (insort l x) x
 if lfeqb x x then Succ (count (insort l x) x) else count (insort l x) x
 Succ (Succ (count l n))
 Succ (Succ (count l x))

Problem: synth_9
 Succ (if lfeqb x x then Succ (count l x) else count l x)
 Succ (count (insort l x) x)
 if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort l) x) else count (sort l) x) else if lfeqb x x then Succ (count (sort l) x) else count (sort l) x
 if lfeqb x x then Succ (if lfeqb x x then Succ (count l x) else count l x) else if lfeqb x x then Succ (count l x) else count l x
 if lfeqb x x then Succ (count (insort l x) x) else count (insort l x) x
 Succ (Succ (count l x))

Problem: synth_30
 Succ (count (insort l x) x)
 if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort l) x) else count (sort l) x) else if lfeqb x x then Succ (count (sort l) x) else count (sort l) x
 if lfeqb x x then Succ (if lfeqb x x then Succ (count l x) else count l x) else if lfeqb x x then Succ (count l x) else count l x
 if lfeqb x x then Succ (count (insort l x) x) else count (insort l x) x
 Succ (Succ (count l x))
 Succ lf4

Problem: synth_11
 count (sort (sort (sort lf3))) x
 if lfeqb x (Succ x) then Succ (count lf3 x) else count lf3 x
 count (insort lf3 (Succ x)) x
 count (sort (sort lf3)) x
 count (sort lf3) x
 count lf3 x

Problem: synth_39
 Succ (count l n)
 Succ (count l x)
 count (sort lf5) n
 count (sort lf5) x
 count lf5 n
 count lf5 x

Problem: synth_1
 lf1

Problem: synth_46
 count (insort l (Succ x)) x
 count (sort (sort l)) x
 count (sort l) n
 count (sort l) x
 count l n
 count l x

Problem: synth_15
 Cons n lf5

Problem: synth_31
 if lfeqb x x then Succ (count l x) else count l x
 count (insort l n) x
 count (insort l x) x
 Succ (count l n)
 Succ (count l x)
 lf4

Problem: synth_14

Problem: synth_8
 count (insort (sort l) x) x
 Succ (count (sort l) x)
 if lfeqb x x then Succ (count (sort l) x) else count (sort l) x
 if lfeqb x x then Succ (count l x) else count l x
 count (insort l x) x
 Succ (count l x)

Problem: synth_34
 count (insort lf5 (Succ x)) x
 count (sort (sort lf5)) x
 count (sort lf5) n
 count (sort lf5) x
 count lf5 n
 count lf5 x

Problem: synth_12

Problem: synth_5
 Succ (Succ lf6)

Problem: synth_37

Problem: synth_2
 Succ lf4

Problem: synth_22

Problem: synth_20
 Succ (count (sort lf5) x)
 if lfeqb x x then Succ (count (sort lf5) x) else count (sort lf5) x
 if lfeqb x x then Succ (count lf5 x) else count lf5 x
 count (insort lf5 x) x
 Succ (count lf5 x)
 Succ lf4

Problem: synth_18
 count (sort (sort lf5)) x
 count (sort lf5) n
 count (sort lf5) x
 count lf5 n
 count lf5 x
 lf4

Problem: synth_21
 count (sort (sort (sort lf5))) x
 if lfeqb x (Succ x) then Succ (count lf5 x) else count lf5 x
 count (insort lf5 (Succ x)) x
 count (sort (sort lf5)) x
 count (sort lf5) x
 count lf5 x

Problem: synth_41
 if lfeqb x n then Succ (count lf5 x) else count lf5 x
 if lfeqb x x then Succ (count lf5 x) else count lf5 x
 count (insort lf5 n) x
 count (insort lf5 x) x
 Succ (count lf5 n)
 Succ (count lf5 x)

Problem: synth_25
 insort l x

Problem: synth_13

Problem: synth_6
 if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero
 if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero
 if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero

Problem: synth_7
 count (sort (sort (sort l))) x
 if lfeqb x (Succ x) then Succ (count l x) else count l x
 count (insort l (Succ x)) x
 count (sort (sort l)) x
 count (sort l) x
 count l x

Problem: synth_4
 Succ (if match lf6 with | Succ Zero => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)
 Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ Zero => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ Zero => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)
 Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ Zero => true | _ => false end then Succ Zero else Zero)
 if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 (Succ Zero) then Succ (if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ (if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 (Succ Zero) then Succ (if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ (if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ Zero else Zero
 if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 lf6 then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 lf6 then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero
 Succ lf6

Problem: synth_38
 if less x x then Cons x (Cons x l) else Cons x (insort l x)
 Cons x (insort l x)
 Cons x lf5

Problem: synth_23

Problem: synth_27
 if less x x then Cons x (Cons x l) else Cons x (insort l x)
 Cons x (insort l x)

Problem: synth_42
 Succ (Succ (count l x))
 Succ (count (sort lf5) x)
 if lfeqb x x then Succ (count (sort lf5) x) else count (sort lf5) x
 if lfeqb x x then Succ (count lf5 x) else count lf5 x
 count (insort lf5 x) x
 Succ (count lf5 x)

Problem: synth_16
 if lfeqb x n then Succ (count lf5 x) else count lf5 x
 if lfeqb x x then Succ (count lf5 x) else count lf5 x
 count (insort lf5 n) x
 count (insort lf5 x) x
 Succ (count lf5 n)
 Succ (count lf5 x)

Problem: synth_19
 if lfeqb x x then Succ (count lf5 x) else count lf5 x
 count (insort lf5 n) x
 count (insort lf5 x) x
 Succ (count lf5 n)
 Succ (count lf5 x)
 Succ lf4

Problem: synth_40

Problem: synth_10
 lf2

Problem: synth_33
 count (sort (sort lf5)) x
 count (sort lf5) n
 count (sort lf5) x
 count lf5 n
 count lf5 x
 Succ lf6

Problem: synth_47
 insort l n
 insort l x

Problem: synth_24
 if less x n then Cons x (Cons n l) else Cons n (insort l x)
 if less x x then Cons x (Cons x l) else Cons x (insort l x)
 Cons n (insort l n)
 Cons x (insort l n)
 Cons n (insort l x)
 Cons x (insort l x)

Problem: synth_3
 Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero)
 Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero)
 Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero)

Problem: synth_32
 Cons x lf5

Problem: synth_44
 if lfeqb x n then Succ (count l x) else count l x
 if lfeqb x x then Succ (count l x) else count l x
 count (insort l n) x
 count (insort l x) x
 Succ (count l n)
 Succ (count l x)

Problem: synth_36
 Succ (count (sort lf5) x)
 if lfeqb x x then Succ (count (sort lf5) x) else count (sort lf5) x
 if lfeqb x x then Succ (count lf5 x) else count lf5 x
 count (insort lf5 x) x
 Succ (count lf5 x)
 Succ (Succ lf6)

Problem: synth_35
 if lfeqb x x then Succ (count lf5 x) else count lf5 x
 count (insort lf5 n) x
 count (insort lf5 x) x
 Succ (count lf5 n)
 Succ (count lf5 x)
 Succ (Succ lf6)

Problem: synth_43
 if less x x then Cons x (Cons x l) else Cons x (insort l x)
 Cons x (insort l x)

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 2020 seconds
Lemmas:
Lemma candidate_1: forall (lf1 : natural), @eq natural lf1 (lf1).
Lemma candidate_2: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_3: forall (lf1 : natural), @eq natural lf1   (Succ      (Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero))).
Lemma candidate_4: forall (lf1 : natural), @eq natural lf1   (Succ      (Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero))).
Lemma candidate_5: forall (lf1 : natural), @eq natural lf1   (Succ      (Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero))).
Lemma candidate_6: forall (lf1 : natural), @eq natural lf1 (lf1).
Lemma candidate_7: forall (lf6 : natural), @eq natural (Succ lf6)   (Succ (if match lf6 with | Succ Zero => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_8: forall (lf6 : natural), @eq natural (Succ lf6)   (Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ Zero => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ Zero => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_9: forall (lf6 : natural), @eq natural (Succ lf6)   (Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ Zero => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_10: forall (lf6 : natural), @eq natural (Succ lf6)   (if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 (Succ Zero) then Succ (if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ (if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 (Succ Zero) then Succ (if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ (if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ Zero else Zero).
Lemma candidate_11: forall (lf6 : natural), @eq natural (Succ lf6)   (if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 lf6 then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 lf6 then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_12: forall (lf6 : natural), @eq natural (Succ lf6) (Succ lf6).
Lemma candidate_13: forall (lf6 : natural), @eq natural (Succ (Succ lf6)) (Succ (Succ lf6)).
Lemma candidate_14: forall (lf1 : natural), @eq natural lf1   (Succ      (Succ         (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero))).
Lemma candidate_15: forall (lf1 : natural), @eq natural lf1   (Succ      (Succ         (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero))).
Lemma candidate_16: forall (lf1 : natural), @eq natural lf1   (Succ      (Succ         (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero))).
Lemma candidate_17: forall (lf1 : natural), @eq natural lf1   (Succ      (Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero))).
Lemma candidate_18: forall (lf1 : natural), @eq natural lf1   (Succ      (Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ Zero else Zero))).
Lemma candidate_19: forall (lf1 : natural), @eq natural lf1   (Succ      (Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ (Succ Zero))) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero))).
Lemma candidate_20: forall (lf1 : natural), @eq natural lf1 (lf1).
Lemma candidate_21: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort (sort (sort l))) x).
Lemma candidate_22: forall (l : lst) (x : natural), @eq natural (count l x)   (if lfeqb x (Succ x) then Succ (count l x) else count l x).
Lemma candidate_23: forall (l : lst) (x : natural), @eq natural (count l x) (count (insort l (Succ x)) x).
Lemma candidate_24: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort (sort l)) x).
Lemma candidate_25: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort l) x).
Lemma candidate_26: forall (l : lst) (x : natural), @eq natural (count l x) (count l x).
Lemma candidate_27: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (count (insort (sort l) x) x).
Lemma candidate_28: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count (sort l) x)).
Lemma candidate_29: forall (l : lst) (x : natural), @eq natural (Succ (count l x))   (if lfeqb x x then Succ (count (sort l) x) else count (sort l) x).
Lemma candidate_30: forall (l : lst) (x : natural), @eq natural (Succ (count l x))   (if lfeqb x x then Succ (count l x) else count l x).
Lemma candidate_31: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (count (insort l x) x).
Lemma candidate_32: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count l x)).
Lemma candidate_33: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x)))   (Succ (if lfeqb x x then Succ (count l x) else count l x)).
Lemma candidate_34: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (count (insort l x) x)).
Lemma candidate_35: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x)))   (if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort l) x) else count (sort l) x) else if lfeqb x x then Succ (count (sort l) x) else count (sort l) x).
Lemma candidate_36: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x)))   (if lfeqb x x then Succ (if lfeqb x x then Succ (count l x) else count l x) else if lfeqb x x then Succ (count l x) else count l x).
Lemma candidate_37: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x)))   (if lfeqb x x then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_38: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ (count l x))).
Lemma candidate_39: forall (lf2 : natural), @eq natural (lf2) lf2.
Lemma candidate_40: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort (sort lf3))) x).
Lemma candidate_41: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb x (Succ x) then Succ (count lf3 x) else count lf3 x).
Lemma candidate_42: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (insort lf3 (Succ x)) x).
Lemma candidate_43: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort lf3)) x).
Lemma candidate_44: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort lf3) x).
Lemma candidate_45: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count lf3 x).
Lemma candidate_46: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_47: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort (sort lf3))) x).
Lemma candidate_48: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb x (Succ x) then Succ (count lf3 x) else count lf3 x).
Lemma candidate_49: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (insort lf3 (Succ x)) x).
Lemma candidate_50: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort lf3)) x).
Lemma candidate_51: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort lf3) x).
Lemma candidate_52: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count lf3 x).
Lemma candidate_53: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort (sort lf3))) x).
Lemma candidate_54: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb x (Succ x) then Succ (count lf3 x) else count lf3 x).
Lemma candidate_55: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (insort lf3 (Succ x)) x).
Lemma candidate_56: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort lf3)) x).
Lemma candidate_57: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort lf3) x).
Lemma candidate_58: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count lf3 x).
Lemma candidate_59: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_60: forall (lf6 : natural), @eq natural (Succ (Succ lf6)) (Succ (Succ lf6)).
Lemma candidate_61: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort (sort lf3))) x).
Lemma candidate_62: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb x (Succ x) then Succ (count lf3 x) else count lf3 x).
Lemma candidate_63: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (insort lf3 (Succ x)) x).
Lemma candidate_64: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort lf3)) x).
Lemma candidate_65: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort lf3) x).
Lemma candidate_66: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count lf3 x).
Lemma candidate_67: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort (sort lf3))) x).
Lemma candidate_68: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb x (Succ x) then Succ (count lf3 x) else count lf3 x).
Lemma candidate_69: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (insort lf3 (Succ x)) x).
Lemma candidate_70: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort lf3)) x).
Lemma candidate_71: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort lf3) x).
Lemma candidate_72: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count lf3 x).
Lemma candidate_73: forall (lf6 : natural), @eq natural (Succ lf6)   (Succ (if match lf6 with | Succ Zero => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_74: forall (lf6 : natural), @eq natural (Succ lf6)   (Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ Zero => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ Zero => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_75: forall (lf6 : natural), @eq natural (Succ lf6)   (Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ Zero => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_76: forall (lf6 : natural), @eq natural (Succ lf6)   (if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 (Succ Zero) then Succ (if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ (if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 (Succ Zero) then Succ (if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ (if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ Zero else Zero).
Lemma candidate_77: forall (lf6 : natural), @eq natural (Succ lf6)   (if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 lf6 then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 lf6 then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_78: forall (lf6 : natural), @eq natural (Succ lf6) (Succ lf6).
Lemma candidate_79: forall (lf6 : natural), @eq natural (Succ (Succ lf6)) (Succ (Succ lf6)).
Lemma candidate_80: forall (l : lst) (x : natural), @eq natural (Succ (if lfeqb x x then Succ (count l x) else count l x))   (Succ (Succ (count l x))).
Lemma candidate_81: forall (l : lst) (x : natural), @eq natural (Succ (count (insort l x) x)) (Succ (Succ (count l x))).
Lemma candidate_82: forall (l : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort l) x) else count (sort l) x) else if lfeqb x x then Succ (count (sort l) x) else count (sort l) x)   (Succ (Succ (count l x))).
Lemma candidate_83: forall (l : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (if lfeqb x x then Succ (count l x) else count l x) else if lfeqb x x then Succ (count l x) else count l x)   (Succ (Succ (count l x))).
Lemma candidate_84: forall (l : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (count (insort l x) x) else count (insort l x) x)   (Succ (Succ (count l x))).
Lemma candidate_85: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ (count l x))).
Lemma candidate_86: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort (sort lf3))) x).
Lemma candidate_87: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb x (Succ x) then Succ (count lf3 x) else count lf3 x).
Lemma candidate_88: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (insort lf3 (Succ x)) x).
Lemma candidate_89: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort lf3)) x).
Lemma candidate_90: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort lf3) x).
Lemma candidate_91: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count lf3 x).
Lemma candidate_92: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort (sort lf3))) x).
Lemma candidate_93: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb x (Succ x) then Succ (count lf3 x) else count lf3 x).
Lemma candidate_94: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (insort lf3 (Succ x)) x).
Lemma candidate_95: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort lf3)) x).
Lemma candidate_96: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort lf3) x).
Lemma candidate_97: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count lf3 x).
Lemma candidate_98: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort (sort (sort l))) x).
Lemma candidate_99: forall (l : lst) (x : natural), @eq natural (count l x)   (if lfeqb x (Succ x) then Succ (count l x) else count l x).
Lemma candidate_100: forall (l : lst) (x : natural), @eq natural (count l x) (count (insort l (Succ x)) x).
Lemma candidate_101: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort (sort l)) x).
Lemma candidate_102: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort l) x).
Lemma candidate_103: forall (l : lst) (x : natural), @eq natural (count l x) (count l x).
Lemma candidate_104: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (count (insort (sort l) x) x).
Lemma candidate_105: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count (sort l) x)).
Lemma candidate_106: forall (l : lst) (x : natural), @eq natural (Succ (count l x))   (if lfeqb x x then Succ (count (sort l) x) else count (sort l) x).
Lemma candidate_107: forall (l : lst) (x : natural), @eq natural (Succ (count l x))   (if lfeqb x x then Succ (count l x) else count l x).
Lemma candidate_108: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (count (insort l x) x).
Lemma candidate_109: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count l x)).
Lemma candidate_110: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x)))   (Succ (if lfeqb x x then Succ (count l x) else count l x)).
Lemma candidate_111: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (count (insort l x) x)).
Lemma candidate_112: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x)))   (if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort l) x) else count (sort l) x) else if lfeqb x x then Succ (count (sort l) x) else count (sort l) x).
Lemma candidate_113: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x)))   (if lfeqb x x then Succ (if lfeqb x x then Succ (count l x) else count l x) else if lfeqb x x then Succ (count l x) else count l x).
Lemma candidate_114: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x)))   (if lfeqb x x then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_115: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ (count l x))).
Lemma candidate_116: forall (lf2 : natural), @eq natural (lf2) lf2.
Lemma candidate_117: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n lf5).
Lemma candidate_118: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x n then Succ (count lf5 x) else count lf5 x).
Lemma candidate_119: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x x then Succ (count lf5 x) else count lf5 x).
Lemma candidate_120: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) x).
Lemma candidate_121: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 x) x).
Lemma candidate_122: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 n)).
Lemma candidate_123: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 x)).
Lemma candidate_124: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (count (Cons x lf5) x) (Succ lf4).
Lemma candidate_125: forall (n : natural) (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count (sort (sort lf5)) x) lf4, @eq natural (count (Cons n lf5) x) (Succ lf4).
Lemma candidate_126: forall (n : natural) (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count (sort lf5) n) lf4, @eq natural (count (Cons n lf5) x) (Succ lf4).
Lemma candidate_127: forall (n : natural) (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count (sort lf5) x) lf4, @eq natural (count (Cons n lf5) x) (Succ lf4).
Lemma candidate_128: forall (n : natural) (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 n) lf4, @eq natural (count (Cons n lf5) x) (Succ lf4).
Lemma candidate_129: forall (n : natural) (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (count (Cons n lf5) x) (Succ lf4).
Lemma candidate_130: forall (n : natural) (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (lf4) lf4, @eq natural (count (Cons n lf5) x) (Succ lf4).
Lemma candidate_131: forall (n : natural) (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (count (Cons n lf5) x)   (if lfeqb x x then Succ (count lf5 x) else count lf5 x).
Lemma candidate_132: forall (n : natural) (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (count (Cons n lf5) x) (count (insort lf5 n) x).
Lemma candidate_133: forall (n : natural) (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (count (Cons n lf5) x) (count (insort lf5 x) x).
Lemma candidate_134: forall (n : natural) (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (count (Cons n lf5) x) (Succ (count lf5 n)).
Lemma candidate_135: forall (n : natural) (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (count (Cons n lf5) x) (Succ (count lf5 x)).
Lemma candidate_136: forall (n : natural) (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (count (Cons n lf5) x) (Succ lf4).
Lemma candidate_137: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (Succ (count (sort lf5) x)) (Succ lf4).
Lemma candidate_138: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural   (if lfeqb x x then Succ (count (sort lf5) x) else count (sort lf5) x)   (Succ lf4).
Lemma candidate_139: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (if lfeqb x x then Succ (count lf5 x) else count lf5 x)   (Succ lf4).
Lemma candidate_140: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (count (insort lf5 x) x) (Succ lf4).
Lemma candidate_141: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (Succ (count lf5 x)) (Succ lf4).
Lemma candidate_142: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_143: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n lf5).
Lemma candidate_144: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (sort (sort (sort lf5))) x).
Lemma candidate_145: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x)   (if lfeqb x (Succ x) then Succ (count lf5 x) else count lf5 x).
Lemma candidate_146: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (insort lf5 (Succ x)) x).
Lemma candidate_147: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (sort (sort lf5)) x).
Lemma candidate_148: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (sort lf5) x).
Lemma candidate_149: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count lf5 x).
Lemma candidate_150: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_151: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x n then Succ (count lf5 x) else count lf5 x).
Lemma candidate_152: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x x then Succ (count lf5 x) else count lf5 x).
Lemma candidate_153: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) x).
Lemma candidate_154: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 x) x).
Lemma candidate_155: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 n)).
Lemma candidate_156: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 x)).
Lemma candidate_157: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x n then Succ (count lf5 x) else count lf5 x).
Lemma candidate_158: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x x then Succ (count lf5 x) else count lf5 x).
Lemma candidate_159: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) x).
Lemma candidate_160: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 x) x).
Lemma candidate_161: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 n)).
Lemma candidate_162: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 x)).
Lemma candidate_163: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_164: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n lf5).
Lemma candidate_165: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_166: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x n then Succ (count lf5 x) else count lf5 x).
Lemma candidate_167: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x x then Succ (count lf5 x) else count lf5 x).
Lemma candidate_168: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) x).
Lemma candidate_169: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 x) x).
Lemma candidate_170: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 n)).
Lemma candidate_171: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 x)).
Lemma candidate_172: forall (lf2 : natural), @eq natural (lf2) lf2.
Lemma candidate_173: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x))   (if less x n then Cons x (Cons n l) else Cons n (insort l x)).
Lemma candidate_174: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x))   (if less x x then Cons x (Cons x l) else Cons x (insort l x)).
Lemma candidate_175: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (insort l n)).
Lemma candidate_176: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons x (insort l n)).
Lemma candidate_177: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (insort l x)).
Lemma candidate_178: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons x (insort l x)).
Lemma candidate_179: forall (l : lst) (x : natural), @eq lst (insort l x) (insort l x).
Lemma candidate_180: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (count (insort l n) x) else count (insort l n) x).
Lemma candidate_181: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (count (insort l n) x) else count (insort l n) x).
Lemma candidate_182: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_183: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_184: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l n))).
Lemma candidate_185: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).
Lemma candidate_186: forall (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural   (count (if less x x then Cons x (Cons x l) else Cons x (insort l x)) x)   (Succ lf4).
Lemma candidate_187: forall (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural (count (Cons x (insort l x)) x) (Succ lf4).
Lemma candidate_188: forall (n : natural) (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (count (insort l n) x) else count (insort l n) x).
Lemma candidate_189: forall (n : natural) (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_190: forall (n : natural) (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_191: forall (n : natural) (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l n))).
Lemma candidate_192: forall (n : natural) (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).
Lemma candidate_193: forall (n : natural) (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural (count (Cons n (insort l x)) x) (Succ lf4).
Lemma candidate_194: forall (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural (Succ (count (insort l x) x)) (Succ lf4).
Lemma candidate_195: forall (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural   (if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort l) x) else count (sort l) x) else if lfeqb x x then Succ (count (sort l) x) else count (sort l) x)   (Succ lf4).
Lemma candidate_196: forall (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural   (if lfeqb x x then Succ (if lfeqb x x then Succ (count l x) else count l x) else if lfeqb x x then Succ (count l x) else count l x)   (Succ lf4).
Lemma candidate_197: forall (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural   (if lfeqb x x then Succ (count (insort l x) x) else count (insort l x) x)   (Succ lf4).
Lemma candidate_198: forall (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural (Succ (Succ (count l x))) (Succ lf4).
Lemma candidate_199: forall (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_200: forall (l : lst) (n : natural) (lf4 : natural) (x : natural), forall   _ : @eq natural (if lfeqb x x then Succ (count l x) else count l x) lf4, @eq natural (count (Cons n (insort l x)) x) (Succ lf4).
Lemma candidate_201: forall (l : lst) (n : natural) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l n) x) lf4, @eq natural (count (Cons n (insort l x)) x) (Succ lf4).
Lemma candidate_202: forall (l : lst) (n : natural) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural (count (Cons n (insort l x)) x) (Succ lf4).
Lemma candidate_203: forall (l : lst) (n : natural) (lf4 : natural) (x : natural), forall _ : @eq natural (Succ (count l n)) lf4, @eq natural (count (Cons n (insort l x)) x) (Succ lf4).
Lemma candidate_204: forall (l : lst) (n : natural) (lf4 : natural) (x : natural), forall _ : @eq natural (Succ (count l x)) lf4, @eq natural (count (Cons n (insort l x)) x) (Succ lf4).
Lemma candidate_205: forall (l : lst) (n : natural) (lf4 : natural) (x : natural), forall _ : @eq natural (lf4) lf4, @eq natural (count (Cons n (insort l x)) x) (Succ lf4).
Lemma candidate_206: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x))   (if less x n then Cons x (Cons n l) else Cons n (insort l x)).
Lemma candidate_207: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x))   (if less x x then Cons x (Cons x l) else Cons x (insort l x)).
Lemma candidate_208: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (insort l n)).
Lemma candidate_209: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons x (insort l n)).
Lemma candidate_210: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (insort l x)).
Lemma candidate_211: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons x (insort l x)).
Lemma candidate_212: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_213: forall (l : lst) (x : natural), @eq lst (insort l x) (insort l x).
Lemma candidate_214: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (count (insort l n) x) else count (insort l n) x).
Lemma candidate_215: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (count (insort l n) x) else count (insort l n) x).
Lemma candidate_216: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_217: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_218: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l n))).
Lemma candidate_219: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).
Lemma candidate_220: forall (l : lst) (x : natural), @eq natural (count (insort l x) x) (count (insort (sort l) x) x).
Lemma candidate_221: forall (l : lst) (x : natural), @eq natural (count (insort l x) x) (Succ (count (sort l) x)).
Lemma candidate_222: forall (l : lst) (x : natural), @eq natural (count (insort l x) x)   (if lfeqb x x then Succ (count (sort l) x) else count (sort l) x).
Lemma candidate_223: forall (l : lst) (x : natural), @eq natural (count (insort l x) x)   (if lfeqb x x then Succ (count l x) else count l x).
Lemma candidate_224: forall (l : lst) (x : natural), @eq natural (count (insort l x) x) (count (insort l x) x).
Lemma candidate_225: forall (l : lst) (x : natural), @eq natural (count (insort l x) x) (Succ (count l x)).
Lemma candidate_226: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (count (insort l n) x) else count (insort l n) x).
Lemma candidate_227: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (count (insort l n) x) else count (insort l n) x).
Lemma candidate_228: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_229: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_230: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l n))).
Lemma candidate_231: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).
Lemma candidate_232: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_233: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x))   (if less x n then Cons x (Cons n l) else Cons n (insort l x)).
Lemma candidate_234: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x))   (if less x x then Cons x (Cons x l) else Cons x (insort l x)).
Lemma candidate_235: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (insort l n)).
Lemma candidate_236: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons x (insort l n)).
Lemma candidate_237: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (insort l x)).
Lemma candidate_238: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons x (insort l x)).
Lemma candidate_239: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_240: forall (l : lst) (x : natural), @eq lst (insort l x) (insort l x).
Lemma candidate_241: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (count (insort l n) x) else count (insort l n) x).
Lemma candidate_242: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (count (insort l n) x) else count (insort l n) x).
Lemma candidate_243: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_244: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_245: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l n))).
Lemma candidate_246: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).
Lemma candidate_247: forall (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (count (Cons x lf5) x) (Succ (Succ lf6)).
Lemma candidate_248: forall (n : natural) (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count (sort (sort lf5)) x) (Succ lf6), @eq natural (count (Cons n lf5) x) (Succ (Succ lf6)).
Lemma candidate_249: forall (n : natural) (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count (sort lf5) n) (Succ lf6), @eq natural (count (Cons n lf5) x) (Succ (Succ lf6)).
Lemma candidate_250: forall (n : natural) (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count (sort lf5) x) (Succ lf6), @eq natural (count (Cons n lf5) x) (Succ (Succ lf6)).
Lemma candidate_251: forall (n : natural) (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 n) (Succ lf6), @eq natural (count (Cons n lf5) x) (Succ (Succ lf6)).
Lemma candidate_252: forall (n : natural) (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (count (Cons n lf5) x) (Succ (Succ lf6)).
Lemma candidate_253: forall (n : natural) (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (Succ lf6) (Succ lf6), @eq natural (count (Cons n lf5) x) (Succ (Succ lf6)).
Lemma candidate_254: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count (insort lf5 (Succ x)) x), @eq natural (count (Cons n lf5) x) (Succ (count (insort lf5 (Succ x)) x)).
Lemma candidate_255: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count (sort (sort lf5)) x), @eq natural (count (Cons n lf5) x) (Succ (count (sort (sort lf5)) x)).
Lemma candidate_256: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count (sort lf5) n), @eq natural (count (Cons n lf5) x) (Succ (count (sort lf5) n)).
Lemma candidate_257: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count (sort lf5) x), @eq natural (count (Cons n lf5) x) (Succ (count (sort lf5) x)).
Lemma candidate_258: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count lf5 n), @eq natural (count (Cons n lf5) x) (Succ (count lf5 n)).
Lemma candidate_259: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count lf5 x), @eq natural (count (Cons n lf5) x) (Succ (count lf5 x)).
Lemma candidate_260: forall (n : natural) (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (count (Cons n lf5) x)   (if lfeqb x x then Succ (count lf5 x) else count lf5 x).
Lemma candidate_261: forall (n : natural) (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) x).
Lemma candidate_262: forall (n : natural) (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (count (Cons n lf5) x) (count (insort lf5 x) x).
Lemma candidate_263: forall (n : natural) (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (count (Cons n lf5) x) (Succ (count lf5 n)).
Lemma candidate_264: forall (n : natural) (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (count (Cons n lf5) x) (Succ (count lf5 x)).
Lemma candidate_265: forall (n : natural) (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (count (Cons n lf5) x) (Succ (Succ lf6)).
Lemma candidate_266: forall (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (Succ (count (sort lf5) x)) (Succ (Succ lf6)).
Lemma candidate_267: forall (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural   (if lfeqb x x then Succ (count (sort lf5) x) else count (sort lf5) x)   (Succ (Succ lf6)).
Lemma candidate_268: forall (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (if lfeqb x x then Succ (count lf5 x) else count lf5 x)   (Succ (Succ lf6)).
Lemma candidate_269: forall (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (count (insort lf5 x) x) (Succ (Succ lf6)).
Lemma candidate_270: forall (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (Succ (count lf5 x)) (Succ (Succ lf6)).
Lemma candidate_271: forall (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (Succ (Succ lf6)) (Succ (Succ lf6)).
Lemma candidate_272: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n lf5).
Lemma candidate_273: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (sort (sort (sort lf5))) x).
Lemma candidate_274: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x)   (if lfeqb x (Succ x) then Succ (count lf5 x) else count lf5 x).
Lemma candidate_275: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (insort lf5 (Succ x)) x).
Lemma candidate_276: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (sort (sort lf5)) x).
Lemma candidate_277: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (sort lf5) x).
Lemma candidate_278: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count lf5 x).
Lemma candidate_279: forall (lf6 : natural), @eq natural (Succ lf6)   (Succ (if match lf6 with | Succ Zero => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_280: forall (lf6 : natural), @eq natural (Succ lf6)   (Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ Zero => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ Zero => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_281: forall (lf6 : natural), @eq natural (Succ lf6)   (Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ Zero => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_282: forall (lf6 : natural), @eq natural (Succ lf6)   (if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 (Succ Zero) then Succ (if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ (if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 (Succ Zero) then Succ (if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ (if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ Zero else Zero).
Lemma candidate_283: forall (lf6 : natural), @eq natural (Succ lf6)   (if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 lf6 then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 lf6 then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_284: forall (lf6 : natural), @eq natural (Succ lf6) (Succ lf6).
Lemma candidate_285: forall (lf6 : natural), @eq natural (Succ (Succ lf6)) (Succ (Succ lf6)).
Lemma candidate_286: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x n then Succ (count lf5 x) else count lf5 x).
Lemma candidate_287: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x x then Succ (count lf5 x) else count lf5 x).
Lemma candidate_288: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) x).
Lemma candidate_289: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 x) x).
Lemma candidate_290: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 n)).
Lemma candidate_291: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 x)).
Lemma candidate_292: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count (insort lf5 (Succ x)) x)).
Lemma candidate_293: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count (sort (sort lf5)) x)).
Lemma candidate_294: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count (sort lf5) n)).
Lemma candidate_295: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count (sort lf5) x)).
Lemma candidate_296: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 n)).
Lemma candidate_297: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 x)).
Lemma candidate_298: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x n then Succ (count lf5 x) else count lf5 x).
Lemma candidate_299: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x x then Succ (count lf5 x) else count lf5 x).
Lemma candidate_300: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) x).
Lemma candidate_301: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 x) x).
Lemma candidate_302: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 n)).
Lemma candidate_303: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 x)).
Lemma candidate_304: forall (lf6 : natural), @eq natural (Succ (Succ lf6)) (Succ (Succ lf6)).
Lemma candidate_305: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n lf5).
Lemma candidate_306: forall (lf6 : natural), @eq natural (Succ lf6)   (Succ (if match lf6 with | Succ Zero => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_307: forall (lf6 : natural), @eq natural (Succ lf6)   (Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ Zero => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ Zero => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_308: forall (lf6 : natural), @eq natural (Succ lf6)   (Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ Zero => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_309: forall (lf6 : natural), @eq natural (Succ lf6)   (if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 (Succ Zero) then Succ (if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ (if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 (Succ Zero) then Succ (if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ (if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ Zero else Zero).
Lemma candidate_310: forall (lf6 : natural), @eq natural (Succ lf6)   (if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 lf6 then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 lf6 then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_311: forall (lf6 : natural), @eq natural (Succ lf6) (Succ lf6).
Lemma candidate_312: forall (lf6 : natural), @eq natural (Succ (Succ lf6)) (Succ (Succ lf6)).
Lemma candidate_313: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x n then Succ (count lf5 x) else count lf5 x).
Lemma candidate_314: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x x then Succ (count lf5 x) else count lf5 x).
Lemma candidate_315: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) x).
Lemma candidate_316: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 x) x).
Lemma candidate_317: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 n)).
Lemma candidate_318: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 x)).
Lemma candidate_319: forall (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural   (count (if less x x then Cons x (Cons x l) else Cons x (insort l x)) x)   (Succ (Succ (count l x))).
Lemma candidate_320: forall (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (count (Cons x (insort l x)) x) (Succ (Succ (count l x))).
Lemma candidate_321: forall (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (count (Cons x lf5) x) (Succ (Succ (count l x))).
Lemma candidate_322: forall (n : natural) (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (Succ (count l n)) (Succ (count l x)), @eq natural (count (Cons n lf5) x) (Succ (Succ (count l x))).
Lemma candidate_323: forall (n : natural) (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (Succ (count l x)) (Succ (count l x)), @eq natural (count (Cons n lf5) x) (Succ (Succ (count l x))).
Lemma candidate_324: forall (n : natural) (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count (sort lf5) n) (Succ (count l x)), @eq natural (count (Cons n lf5) x) (Succ (Succ (count l x))).
Lemma candidate_325: forall (n : natural) (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count (sort lf5) x) (Succ (count l x)), @eq natural (count (Cons n lf5) x) (Succ (Succ (count l x))).
Lemma candidate_326: forall (n : natural) (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 n) (Succ (count l x)), @eq natural (count (Cons n lf5) x) (Succ (Succ (count l x))).
Lemma candidate_327: forall (n : natural) (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (count (Cons n lf5) x) (Succ (Succ (count l x))).
Lemma candidate_328: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count (insort lf5 (Succ x)) x), @eq natural (count (Cons n lf5) x) (Succ (count (insort lf5 (Succ x)) x)).
Lemma candidate_329: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count (sort (sort lf5)) x), @eq natural (count (Cons n lf5) x) (Succ (count (sort (sort lf5)) x)).
Lemma candidate_330: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count (sort lf5) n), @eq natural (count (Cons n lf5) x) (Succ (count (sort lf5) n)).
Lemma candidate_331: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count (sort lf5) x), @eq natural (count (Cons n lf5) x) (Succ (count (sort lf5) x)).
Lemma candidate_332: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count lf5 n), @eq natural (count (Cons n lf5) x) (Succ (count lf5 n)).
Lemma candidate_333: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count lf5 x), @eq natural (count (Cons n lf5) x) (Succ (count lf5 x)).
Lemma candidate_334: forall (n : natural) (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (count (Cons n lf5) x)   (if lfeqb x n then Succ (count lf5 x) else count lf5 x).
Lemma candidate_335: forall (n : natural) (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (count (Cons n lf5) x)   (if lfeqb x x then Succ (count lf5 x) else count lf5 x).
Lemma candidate_336: forall (n : natural) (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) x).
Lemma candidate_337: forall (n : natural) (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (count (Cons n lf5) x) (count (insort lf5 x) x).
Lemma candidate_338: forall (n : natural) (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (count (Cons n lf5) x) (Succ (count lf5 n)).
Lemma candidate_339: forall (n : natural) (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (count (Cons n lf5) x) (Succ (count lf5 x)).
Lemma candidate_340: forall (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (Succ (Succ (count l x))) (Succ (Succ (count l x))).
Lemma candidate_341: forall (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (Succ (count (sort lf5) x)) (Succ (Succ (count l x))).
Lemma candidate_342: forall (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural   (if lfeqb x x then Succ (count (sort lf5) x) else count (sort lf5) x)   (Succ (Succ (count l x))).
Lemma candidate_343: forall (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (if lfeqb x x then Succ (count lf5 x) else count lf5 x)   (Succ (Succ (count l x))).
Lemma candidate_344: forall (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (count (insort lf5 x) x) (Succ (Succ (count l x))).
Lemma candidate_345: forall (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (Succ (count lf5 x)) (Succ (Succ (count l x))).
Lemma candidate_346: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n lf5).
Lemma candidate_347: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (sort (sort (sort lf5))) x).
Lemma candidate_348: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x)   (if lfeqb x (Succ x) then Succ (count lf5 x) else count lf5 x).
Lemma candidate_349: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (insort lf5 (Succ x)) x).
Lemma candidate_350: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (sort (sort lf5)) x).
Lemma candidate_351: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (sort lf5) x).
Lemma candidate_352: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count lf5 x).
Lemma candidate_353: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort (sort (sort l))) x).
Lemma candidate_354: forall (l : lst) (x : natural), @eq natural (count l x)   (if lfeqb x (Succ x) then Succ (count l x) else count l x).
Lemma candidate_355: forall (l : lst) (x : natural), @eq natural (count l x) (count (insort l (Succ x)) x).
Lemma candidate_356: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort (sort l)) x).
Lemma candidate_357: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort l) x).
Lemma candidate_358: forall (l : lst) (x : natural), @eq natural (count l x) (count l x).
Lemma candidate_359: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (count (insort (sort l) x) x).
Lemma candidate_360: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count (sort l) x)).
Lemma candidate_361: forall (l : lst) (x : natural), @eq natural (Succ (count l x))   (if lfeqb x x then Succ (count (sort l) x) else count (sort l) x).
Lemma candidate_362: forall (l : lst) (x : natural), @eq natural (Succ (count l x))   (if lfeqb x x then Succ (count l x) else count l x).
Lemma candidate_363: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (count (insort l x) x).
Lemma candidate_364: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count l x)).
Lemma candidate_365: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x)))   (Succ (if lfeqb x x then Succ (count l x) else count l x)).
Lemma candidate_366: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (count (insort l x) x)).
Lemma candidate_367: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x)))   (if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort l) x) else count (sort l) x) else if lfeqb x x then Succ (count (sort l) x) else count (sort l) x).
Lemma candidate_368: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x)))   (if lfeqb x x then Succ (if lfeqb x x then Succ (count l x) else count l x) else if lfeqb x x then Succ (count l x) else count l x).
Lemma candidate_369: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x)))   (if lfeqb x x then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_370: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ (count l x))).
Lemma candidate_371: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x n then Succ (count lf5 x) else count lf5 x).
Lemma candidate_372: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x x then Succ (count lf5 x) else count lf5 x).
Lemma candidate_373: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) x).
Lemma candidate_374: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 x) x).
Lemma candidate_375: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 n)).
Lemma candidate_376: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 x)).
Lemma candidate_377: forall (l : lst) (x : natural), @eq natural   (count (if less x x then Cons x (Cons x l) else Cons x (insort l x)) x)   (Succ (Succ (count l x))).
Lemma candidate_378: forall (l : lst) (x : natural), @eq natural (count (Cons x (insort l x)) x) (Succ (Succ (count l x))).
Lemma candidate_379: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count (insort lf5 (Succ x)) x)).
Lemma candidate_380: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count (sort (sort lf5)) x)).
Lemma candidate_381: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count (sort lf5) n)).
Lemma candidate_382: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count (sort lf5) x)).
Lemma candidate_383: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 n)).
Lemma candidate_384: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 x)).
Lemma candidate_385: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x n then Succ (count lf5 x) else count lf5 x).
Lemma candidate_386: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x x then Succ (count lf5 x) else count lf5 x).
Lemma candidate_387: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) x).
Lemma candidate_388: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 x) x).
Lemma candidate_389: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 n)).
Lemma candidate_390: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 x)).
Lemma candidate_391: forall (l : lst) (x : natural), @eq natural (Succ (if lfeqb x x then Succ (count l x) else count l x))   (Succ (Succ (count l x))).
Lemma candidate_392: forall (l : lst) (x : natural), @eq natural (Succ (count (insort l x) x)) (Succ (Succ (count l x))).
Lemma candidate_393: forall (l : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort l) x) else count (sort l) x) else if lfeqb x x then Succ (count (sort l) x) else count (sort l) x)   (Succ (Succ (count l x))).
Lemma candidate_394: forall (l : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (if lfeqb x x then Succ (count l x) else count l x) else if lfeqb x x then Succ (count l x) else count l x)   (Succ (Succ (count l x))).
Lemma candidate_395: forall (l : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (count (insort l x) x) else count (insort l x) x)   (Succ (Succ (count l x))).
Lemma candidate_396: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ (count l x))).
Lemma candidate_397: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n lf5).
Lemma candidate_398: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort (sort (sort l))) x).
Lemma candidate_399: forall (l : lst) (x : natural), @eq natural (count l x)   (if lfeqb x (Succ x) then Succ (count l x) else count l x).
Lemma candidate_400: forall (l : lst) (x : natural), @eq natural (count l x) (count (insort l (Succ x)) x).
Lemma candidate_401: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort (sort l)) x).
Lemma candidate_402: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort l) x).
Lemma candidate_403: forall (l : lst) (x : natural), @eq natural (count l x) (count l x).
Lemma candidate_404: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (count (insort (sort l) x) x).
Lemma candidate_405: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count (sort l) x)).
Lemma candidate_406: forall (l : lst) (x : natural), @eq natural (Succ (count l x))   (if lfeqb x x then Succ (count (sort l) x) else count (sort l) x).
Lemma candidate_407: forall (l : lst) (x : natural), @eq natural (Succ (count l x))   (if lfeqb x x then Succ (count l x) else count l x).
Lemma candidate_408: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (count (insort l x) x).
Lemma candidate_409: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count l x)).
Lemma candidate_410: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x)))   (Succ (if lfeqb x x then Succ (count l x) else count l x)).
Lemma candidate_411: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (count (insort l x) x)).
Lemma candidate_412: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x)))   (if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort l) x) else count (sort l) x) else if lfeqb x x then Succ (count (sort l) x) else count (sort l) x).
Lemma candidate_413: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x)))   (if lfeqb x x then Succ (if lfeqb x x then Succ (count l x) else count l x) else if lfeqb x x then Succ (count l x) else count l x).
Lemma candidate_414: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x)))   (if lfeqb x x then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_415: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ (count l x))).
Lemma candidate_416: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x n then Succ (count lf5 x) else count lf5 x).
Lemma candidate_417: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x x then Succ (count lf5 x) else count lf5 x).
Lemma candidate_418: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) x).
Lemma candidate_419: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 x) x).
Lemma candidate_420: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 n)).
Lemma candidate_421: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 x)).
Lemma candidate_422: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (Succ (if lfeqb x n then Succ (count l x) else count l x)).
Lemma candidate_423: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (Succ (if lfeqb x x then Succ (count l x) else count l x)).
Lemma candidate_424: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (count (insort l n) x)).
Lemma candidate_425: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (count (insort l x) x)).
Lemma candidate_426: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l n))).
Lemma candidate_427: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).
Lemma candidate_428: forall (lf6 : natural), @eq natural (Succ (Succ lf6)) (Succ (Succ lf6)).
Lemma candidate_429: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (count (insort l n) x) else count (insort l n) x).
Lemma candidate_430: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (count (insort l n) x) else count (insort l n) x).
Lemma candidate_431: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_432: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_433: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l n))).
Lemma candidate_434: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).
Lemma candidate_435: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x))   (if less x n then Cons x (Cons n l) else Cons n (insort l x)).
Lemma candidate_436: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x))   (if less x x then Cons x (Cons x l) else Cons x (insort l x)).
Lemma candidate_437: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (insort l n)).
Lemma candidate_438: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons x (insort l n)).
Lemma candidate_439: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (insort l x)).
Lemma candidate_440: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons x (insort l x)).
Lemma candidate_441: forall (lf6 : natural), @eq natural (Succ lf6)   (Succ (if match lf6 with | Succ Zero => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_442: forall (lf6 : natural), @eq natural (Succ lf6)   (Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ Zero => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ Zero => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_443: forall (lf6 : natural), @eq natural (Succ lf6)   (Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf6 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf6 with | Succ Zero => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_444: forall (lf6 : natural), @eq natural (Succ lf6)   (if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 (Succ Zero) then Succ (if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ (if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 (Succ Zero) then Succ (if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ (if lfeqb lf6 lf6 then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ Zero else Zero).
Lemma candidate_445: forall (lf6 : natural), @eq natural (Succ lf6)   (if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 lf6 then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ (Succ Zero)) then Succ (if lfeqb lf6 lf6 then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 lf6 then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_446: forall (lf6 : natural), @eq natural (Succ lf6) (Succ lf6).
Lemma candidate_447: forall (l : lst) (x : natural), @eq lst (insort l x) (insort l x).
Lemma candidate_448: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (count (insort l n) x) else count (insort l n) x).
Lemma candidate_449: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (count (insort l n) x) else count (insort l n) x).
Lemma candidate_450: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_451: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_452: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l n))).
Lemma candidate_453: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).
Lemma candidate_454: forall (lf6 : natural), @eq natural (Succ (Succ lf6)) (Succ (Succ lf6)).
Lemma candidate_455: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (Succ (Succ (count (insort l (Succ x)) x))).
Lemma candidate_456: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (Succ (Succ (count (sort (sort l)) x))).
Lemma candidate_457: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count (sort l) n))).
Lemma candidate_458: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count (sort l) x))).
Lemma candidate_459: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l n))).
Lemma candidate_460: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).
Lemma candidate_461: forall (l : lst) (x : natural), @eq natural   (count (if less x x then Cons x (Cons x l) else Cons x (insort l x)) x)   (Succ (Succ (count l x))).
Lemma candidate_462: forall (l : lst) (x : natural), @eq natural (count (Cons x (insort l x)) x) (Succ (Succ (count l x))).
Lemma candidate_463: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (Succ (if lfeqb x n then Succ (count l x) else count l x)).
Lemma candidate_464: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (Succ (if lfeqb x x then Succ (count l x) else count l x)).
Lemma candidate_465: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (count (insort l n) x)).
Lemma candidate_466: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (count (insort l x) x)).
Lemma candidate_467: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l n))).
Lemma candidate_468: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).
Lemma candidate_469: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l n)) x) (Succ (Succ (count l x))).
Lemma candidate_470: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).
Lemma candidate_471: forall (l : lst) (x : natural), @eq natural (Succ (if lfeqb x x then Succ (count l x) else count l x))   (Succ (Succ (count l x))).
Lemma candidate_472: forall (l : lst) (x : natural), @eq natural (Succ (count (insort l x) x)) (Succ (Succ (count l x))).
Lemma candidate_473: forall (l : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort l) x) else count (sort l) x) else if lfeqb x x then Succ (count (sort l) x) else count (sort l) x)   (Succ (Succ (count l x))).
Lemma candidate_474: forall (l : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (if lfeqb x x then Succ (count l x) else count l x) else if lfeqb x x then Succ (count l x) else count l x)   (Succ (Succ (count l x))).
Lemma candidate_475: forall (l : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (count (insort l x) x) else count (insort l x) x)   (Succ (Succ (count l x))).
Lemma candidate_476: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ (count l x))).
Lemma candidate_477: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (count (insort l n) x) else count (insort l n) x).
Lemma candidate_478: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (count (insort l n) x) else count (insort l n) x).
Lemma candidate_479: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_480: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_481: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l n))).
Lemma candidate_482: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).
Lemma candidate_483: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort (sort (sort l))) x).
Lemma candidate_484: forall (l : lst) (x : natural), @eq natural (count l x)   (if lfeqb x (Succ x) then Succ (count l x) else count l x).
Lemma candidate_485: forall (l : lst) (x : natural), @eq natural (count l x) (count (insort l (Succ x)) x).
Lemma candidate_486: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort (sort l)) x).
Lemma candidate_487: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort l) x).
Lemma candidate_488: forall (l : lst) (x : natural), @eq natural (count l x) (count l x).
Lemma candidate_489: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x))   (if less x n then Cons x (Cons n l) else Cons n (insort l x)).
Lemma candidate_490: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x))   (if less x x then Cons x (Cons x l) else Cons x (insort l x)).
Lemma candidate_491: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (insort l n)).
Lemma candidate_492: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons x (insort l n)).
Lemma candidate_493: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (insort l x)).
Lemma candidate_494: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons x (insort l x)).
Lemma candidate_495: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (count (insort (sort l) x) x).
Lemma candidate_496: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count (sort l) x)).
Lemma candidate_497: forall (l : lst) (x : natural), @eq natural (Succ (count l x))   (if lfeqb x x then Succ (count (sort l) x) else count (sort l) x).
Lemma candidate_498: forall (l : lst) (x : natural), @eq natural (Succ (count l x))   (if lfeqb x x then Succ (count l x) else count l x).
Lemma candidate_499: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (count (insort l x) x).
Lemma candidate_500: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count l x)).
Lemma candidate_501: forall (l : lst) (x : natural), @eq lst (insort l x) (insort l x).
Lemma candidate_502: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (count (insort l n) x) else count (insort l n) x).
Lemma candidate_503: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (count (insort l n) x) else count (insort l n) x).
Lemma candidate_504: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_505: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_506: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l n))).
Lemma candidate_507: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).
Lemma candidate_508: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x)))   (Succ (if lfeqb x x then Succ (count l x) else count l x)).
Lemma candidate_509: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (count (insort l x) x)).
Lemma candidate_510: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x)))   (if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort l) x) else count (sort l) x) else if lfeqb x x then Succ (count (sort l) x) else count (sort l) x).
Lemma candidate_511: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x)))   (if lfeqb x x then Succ (if lfeqb x x then Succ (count l x) else count l x) else if lfeqb x x then Succ (count l x) else count l x).
Lemma candidate_512: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x)))   (if lfeqb x x then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_513: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ (count l x))).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 2788 seconds
Duplicates removed: 340
Filtered by Quickchick: 77
Filtered by script: 26
Remaining: 70

Lemmas: 
Lemma candidate_25: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort l) x).
Lemma candidate_148: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (sort lf5) x).
Lemma candidate_44: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort lf3) x).
Lemma candidate_24: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort (sort l)) x).
Lemma candidate_147: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (sort (sort lf5)) x).
Lemma candidate_43: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort lf3)) x).
Lemma candidate_23: forall (l : lst) (x : natural), @eq natural (count l x) (count (insort l (Succ x)) x).
Lemma candidate_28: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count (sort l) x)).
Lemma candidate_21: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort (sort (sort l))) x).
Lemma candidate_146: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (insort lf5 (Succ x)) x).
Lemma candidate_42: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (insort lf3 (Succ x)) x).
Lemma candidate_120: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) x).
Lemma candidate_221: forall (l : lst) (x : natural), @eq natural (count (insort l x) x) (Succ (count (sort l) x)).
Lemma candidate_144: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (sort (sort (sort lf5))) x).
Lemma candidate_40: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort (sort lf3))) x).
Lemma candidate_27: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (count (insort (sort l) x) x).
Lemma candidate_220: forall (l : lst) (x : natural), @eq natural (count (insort l x) x) (count (insort (sort l) x) x).
Lemma candidate_378: forall (l : lst) (x : natural), @eq natural (count (Cons x (insort l x)) x) (Succ (Succ (count l x))).
Lemma candidate_424: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (count (insort l n) x)).
Lemma candidate_30: forall (l : lst) (x : natural), @eq natural (Succ (count l x))   (if lfeqb x x then Succ (count l x) else count l x).
Lemma candidate_22: forall (l : lst) (x : natural), @eq natural (count l x)   (if lfeqb x (Succ x) then Succ (count l x) else count l x).
Lemma candidate_141: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (Succ (count lf5 x)) (Succ lf4).
Lemma candidate_124: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (count (Cons x lf5) x) (Succ lf4).
Lemma candidate_223: forall (l : lst) (x : natural), @eq natural (count (insort l x) x)   (if lfeqb x x then Succ (count l x) else count l x).
Lemma candidate_140: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (count (insort lf5 x) x) (Succ lf4).
Lemma candidate_145: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x)   (if lfeqb x (Succ x) then Succ (count lf5 x) else count lf5 x).
Lemma candidate_41: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb x (Succ x) then Succ (count lf3 x) else count lf3 x).
Lemma candidate_137: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (Succ (count (sort lf5) x)) (Succ lf4).
Lemma candidate_80: forall (l : lst) (x : natural), @eq natural (Succ (if lfeqb x x then Succ (count l x) else count l x))   (Succ (Succ (count l x))).
Lemma candidate_33: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x)))   (Succ (if lfeqb x x then Succ (count l x) else count l x)).
Lemma candidate_29: forall (l : lst) (x : natural), @eq natural (Succ (count l x))   (if lfeqb x x then Succ (count (sort l) x) else count (sort l) x).
Lemma candidate_270: forall (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (Succ (count lf5 x)) (Succ (Succ lf6)).
Lemma candidate_198: forall (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural (Succ (Succ (count l x))) (Succ lf4).
Lemma candidate_247: forall (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (count (Cons x lf5) x) (Succ (Succ lf6)).
Lemma candidate_132: forall (n : natural) (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (count (Cons n lf5) x) (count (insort lf5 n) x).
Lemma candidate_222: forall (l : lst) (x : natural), @eq natural (count (insort l x) x)   (if lfeqb x x then Succ (count (sort l) x) else count (sort l) x).
Lemma candidate_269: forall (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (count (insort lf5 x) x) (Succ (Succ lf6)).
Lemma candidate_194: forall (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural (Succ (count (insort l x) x)) (Succ lf4).
Lemma candidate_422: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (Succ (if lfeqb x n then Succ (count l x) else count l x)).
Lemma candidate_263: forall (n : natural) (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (count (Cons n lf5) x) (Succ (count lf5 n)).
Lemma candidate_201: forall (l : lst) (n : natural) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l n) x) lf4, @eq natural (count (Cons n (insort l x)) x) (Succ lf4).
Lemma candidate_187: forall (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural (count (Cons x (insort l x)) x) (Succ lf4).
Lemma candidate_266: forall (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (Succ (count (sort lf5) x)) (Succ (Succ lf6)).
Lemma candidate_261: forall (n : natural) (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) x).
Lemma candidate_377: forall (l : lst) (x : natural), @eq natural   (count (if less x x then Cons x (Cons x l) else Cons x (insort l x)) x)   (Succ (Succ (count l x))).
Lemma candidate_37: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x)))   (if lfeqb x x then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_345: forall (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (Succ (count lf5 x)) (Succ (Succ (count l x))).
Lemma candidate_84: forall (l : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (count (insort l x) x) else count (insort l x) x)   (Succ (Succ (count l x))).
Lemma candidate_336: forall (n : natural) (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) x).
Lemma candidate_321: forall (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (count (Cons x lf5) x) (Succ (Succ (count l x))).
Lemma candidate_344: forall (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (count (insort lf5 x) x) (Succ (Succ (count l x))).
Lemma candidate_181: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (count (insort l n) x) else count (insort l n) x).
Lemma candidate_341: forall (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (Succ (count (sort lf5) x)) (Succ (Succ (count l x))).
Lemma candidate_139: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (if lfeqb x x then Succ (count lf5 x) else count lf5 x)   (Succ lf4).
Lemma candidate_320: forall (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (count (Cons x (insort l x)) x) (Succ (Succ (count l x))).
Lemma candidate_268: forall (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (if lfeqb x x then Succ (count lf5 x) else count lf5 x)   (Succ (Succ lf6)).
Lemma candidate_138: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural   (if lfeqb x x then Succ (count (sort lf5) x) else count (sort lf5) x)   (Succ lf4).
Lemma candidate_186: forall (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural   (count (if less x x then Cons x (Cons x l) else Cons x (insort l x)) x)   (Succ lf4).
Lemma candidate_197: forall (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural   (if lfeqb x x then Succ (count (insort l x) x) else count (insort l x) x)   (Succ lf4).
Lemma candidate_343: forall (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (if lfeqb x x then Succ (count lf5 x) else count lf5 x)   (Succ (Succ (count l x))).
Lemma candidate_267: forall (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural   (if lfeqb x x then Succ (count (sort lf5) x) else count (sort lf5) x)   (Succ (Succ lf6)).
Lemma candidate_342: forall (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural   (if lfeqb x x then Succ (count (sort lf5) x) else count (sort lf5) x)   (Succ (Succ (count l x))).
Lemma candidate_319: forall (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural   (count (if less x x then Cons x (Cons x l) else Cons x (insort l x)) x)   (Succ (Succ (count l x))).
Lemma candidate_188: forall (n : natural) (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (count (insort l n) x) else count (insort l n) x).
Lemma candidate_36: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x)))   (if lfeqb x x then Succ (if lfeqb x x then Succ (count l x) else count l x) else if lfeqb x x then Succ (count l x) else count l x).
Lemma candidate_83: forall (l : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (if lfeqb x x then Succ (count l x) else count l x) else if lfeqb x x then Succ (count l x) else count l x)   (Succ (Succ (count l x))).
Lemma candidate_35: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x)))   (if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort l) x) else count (sort l) x) else if lfeqb x x then Succ (count (sort l) x) else count (sort l) x).
Lemma candidate_82: forall (l : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort l) x) else count (sort l) x) else if lfeqb x x then Succ (count (sort l) x) else count (sort l) x)   (Succ (Succ (count l x))).
Lemma candidate_196: forall (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural   (if lfeqb x x then Succ (if lfeqb x x then Succ (count l x) else count l x) else if lfeqb x x then Succ (count l x) else count l x)   (Succ lf4).
Lemma candidate_195: forall (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural   (if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort l) x) else count (sort l) x) else if lfeqb x x then Succ (count (sort l) x) else count (sort l) x)   (Succ lf4).