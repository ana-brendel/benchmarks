LFind Results
LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal50_count_insort_121_eqb_elim

Number of Lemmas: 513
Number of Lemmas (after duplicates removed): 173
Number of Lemmas (after QuickChick used to filter): 96
* Number of Candidate Lemmas: 70

Time until ranking: 2790
Time to complete: 5937

Stuck state true independent of hypotheses: false

Category 1:
Count = 4

Lemma candidate_141: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (Succ (count lf5 x)) (Succ lf4).
Lemma candidate_270: forall (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (Succ (count lf5 x)) (Succ (Succ lf6)).
Lemma candidate_194: forall (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural (Succ (count (insort l x) x)) (Succ lf4).
Lemma candidate_345: forall (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (Succ (count lf5 x)) (Succ (Succ (count l x))).

Category 2:
Count = 66

Lemma candidate_25: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort l) x).
Lemma candidate_148: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (sort lf5) x).
Lemma candidate_44: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort lf3) x).
Lemma candidate_24: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort (sort l)) x).
Lemma candidate_147: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (sort (sort lf5)) x).
Lemma candidate_43: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort lf3)) x).
Lemma candidate_23: forall (l : lst) (x : natural), @eq natural (count l x) (count (insort l (Succ x)) x).
Lemma candidate_28: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count (sort l) x)).
Lemma candidate_21: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort (sort (sort l))) x).
Lemma candidate_146: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (insort lf5 (Succ x)) x).
Lemma candidate_42: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (insort lf3 (Succ x)) x).
Lemma candidate_120: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) x).
Lemma candidate_221: forall (l : lst) (x : natural), @eq natural (count (insort l x) x) (Succ (count (sort l) x)).
Lemma candidate_144: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (sort (sort (sort lf5))) x).
Lemma candidate_40: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort (sort lf3))) x).
Lemma candidate_27: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (count (insort (sort l) x) x).
Lemma candidate_220: forall (l : lst) (x : natural), @eq natural (count (insort l x) x) (count (insort (sort l) x) x).
Lemma candidate_378: forall (l : lst) (x : natural), @eq natural (count (Cons x (insort l x)) x) (Succ (Succ (count l x))).
Lemma candidate_424: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (count (insort l n) x)).
Lemma candidate_30: forall (l : lst) (x : natural), @eq natural (Succ (count l x))   (if lfeqb x x then Succ (count l x) else count l x).
Lemma candidate_22: forall (l : lst) (x : natural), @eq natural (count l x)   (if lfeqb x (Succ x) then Succ (count l x) else count l x).
Lemma candidate_124: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (count (Cons x lf5) x) (Succ lf4).
Lemma candidate_223: forall (l : lst) (x : natural), @eq natural (count (insort l x) x)   (if lfeqb x x then Succ (count l x) else count l x).
Lemma candidate_140: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (count (insort lf5 x) x) (Succ lf4).
Lemma candidate_145: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x)   (if lfeqb x (Succ x) then Succ (count lf5 x) else count lf5 x).
Lemma candidate_41: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb x (Succ x) then Succ (count lf3 x) else count lf3 x).
Lemma candidate_137: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (Succ (count (sort lf5) x)) (Succ lf4).
Lemma candidate_80: forall (l : lst) (x : natural), @eq natural (Succ (if lfeqb x x then Succ (count l x) else count l x))   (Succ (Succ (count l x))).
Lemma candidate_33: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x)))   (Succ (if lfeqb x x then Succ (count l x) else count l x)).
Lemma candidate_29: forall (l : lst) (x : natural), @eq natural (Succ (count l x))   (if lfeqb x x then Succ (count (sort l) x) else count (sort l) x).
Lemma candidate_198: forall (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural (Succ (Succ (count l x))) (Succ lf4).
Lemma candidate_247: forall (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (count (Cons x lf5) x) (Succ (Succ lf6)).
Lemma candidate_132: forall (n : natural) (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (count (Cons n lf5) x) (count (insort lf5 n) x).
Lemma candidate_222: forall (l : lst) (x : natural), @eq natural (count (insort l x) x)   (if lfeqb x x then Succ (count (sort l) x) else count (sort l) x).
Lemma candidate_269: forall (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (count (insort lf5 x) x) (Succ (Succ lf6)).
Lemma candidate_422: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (Succ (if lfeqb x n then Succ (count l x) else count l x)).
Lemma candidate_263: forall (n : natural) (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (count (Cons n lf5) x) (Succ (count lf5 n)).
Lemma candidate_201: forall (l : lst) (n : natural) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l n) x) lf4, @eq natural (count (Cons n (insort l x)) x) (Succ lf4).
Lemma candidate_187: forall (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural (count (Cons x (insort l x)) x) (Succ lf4).
Lemma candidate_266: forall (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (Succ (count (sort lf5) x)) (Succ (Succ lf6)).
Lemma candidate_261: forall (n : natural) (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) x).
Lemma candidate_377: forall (l : lst) (x : natural), @eq natural   (count (if less x x then Cons x (Cons x l) else Cons x (insort l x)) x)   (Succ (Succ (count l x))).
Lemma candidate_37: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x)))   (if lfeqb x x then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_84: forall (l : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (count (insort l x) x) else count (insort l x) x)   (Succ (Succ (count l x))).
Lemma candidate_336: forall (n : natural) (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) x).
Lemma candidate_321: forall (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (count (Cons x lf5) x) (Succ (Succ (count l x))).
Lemma candidate_344: forall (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (count (insort lf5 x) x) (Succ (Succ (count l x))).
Lemma candidate_181: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (count (insort l n) x) else count (insort l n) x).
Lemma candidate_341: forall (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (Succ (count (sort lf5) x)) (Succ (Succ (count l x))).
Lemma candidate_139: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (if lfeqb x x then Succ (count lf5 x) else count lf5 x)   (Succ lf4).
Lemma candidate_320: forall (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (count (Cons x (insort l x)) x) (Succ (Succ (count l x))).
Lemma candidate_268: forall (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (if lfeqb x x then Succ (count lf5 x) else count lf5 x)   (Succ (Succ lf6)).
Lemma candidate_138: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural   (if lfeqb x x then Succ (count (sort lf5) x) else count (sort lf5) x)   (Succ lf4).
Lemma candidate_186: forall (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural   (count (if less x x then Cons x (Cons x l) else Cons x (insort l x)) x)   (Succ lf4).
Lemma candidate_197: forall (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural   (if lfeqb x x then Succ (count (insort l x) x) else count (insort l x) x)   (Succ lf4).
Lemma candidate_343: forall (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (if lfeqb x x then Succ (count lf5 x) else count lf5 x)   (Succ (Succ (count l x))).
Lemma candidate_267: forall (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural   (if lfeqb x x then Succ (count (sort lf5) x) else count (sort lf5) x)   (Succ (Succ lf6)).
Lemma candidate_342: forall (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural   (if lfeqb x x then Succ (count (sort lf5) x) else count (sort lf5) x)   (Succ (Succ (count l x))).
Lemma candidate_319: forall (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural   (count (if less x x then Cons x (Cons x l) else Cons x (insort l x)) x)   (Succ (Succ (count l x))).
Lemma candidate_188: forall (n : natural) (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (count (insort l n) x) else count (insort l n) x).
Lemma candidate_36: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x)))   (if lfeqb x x then Succ (if lfeqb x x then Succ (count l x) else count l x) else if lfeqb x x then Succ (count l x) else count l x).
Lemma candidate_83: forall (l : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (if lfeqb x x then Succ (count l x) else count l x) else if lfeqb x x then Succ (count l x) else count l x)   (Succ (Succ (count l x))).
Lemma candidate_35: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x)))   (if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort l) x) else count (sort l) x) else if lfeqb x x then Succ (count (sort l) x) else count (sort l) x).
Lemma candidate_82: forall (l : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort l) x) else count (sort l) x) else if lfeqb x x then Succ (count (sort l) x) else count (sort l) x)   (Succ (Succ (count l x))).
Lemma candidate_196: forall (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural   (if lfeqb x x then Succ (if lfeqb x x then Succ (count l x) else count l x) else if lfeqb x x then Succ (count l x) else count l x)   (Succ lf4).
Lemma candidate_195: forall (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural   (if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort l) x) else count (sort l) x) else if lfeqb x x then Succ (count (sort l) x) else count (sort l) x)   (Succ lf4).

Category 3 (provable):
Count = 0


Category 3 (not provable):
Count = 0
