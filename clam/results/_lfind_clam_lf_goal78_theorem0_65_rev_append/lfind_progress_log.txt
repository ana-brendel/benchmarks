File Information
- File name: goal78
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal78_theorem0_65_rev_append
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal78_theorem0_65_rev_append
- Namespace: adtind
- Proof name: theorem0
- Theorem: Theorem theorem0: forall x0 y0 : lst, @eq lst (rev (qreva x0 (rev y0))) (lfappend y0 x0).
- Declarations: 
From lfind Require Import LFind.

Proof Context
* Goal State: @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))
  (lfappend y (Cons n x))

* Hypothesis:
IHx : forall y0 : lst, @eq lst (rev (qreva x (rev y0))) (lfappend y0 x)
x : lst
y : lst
n : natural

* Types:
Set
natural
Prop
lst

* Polymorphic Types:


* Variables:
x : lst
y : lst
n : natural

* Terms:
lfappend (rev (Cons n Nil)) (rev y) : lst
rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))) : lst
@eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))
  (lfappend y (Cons n x)) : Prop
x : lst
qreva x (rev _UNBOUND_REL_1) : lst
y : lst
rev y : lst
rev (Cons n Nil) : lst
lfappend _UNBOUND_REL_1 x : lst
lfappend y (Cons n x) : lst
rev (qreva x (rev _UNBOUND_REL_1)) : lst
forall y0 : lst, @eq lst (rev (qreva x (rev y0))) (lfappend y0 x) : Prop
@eq lst (rev (qreva x (rev _UNBOUND_REL_1))) (lfappend _UNBOUND_REL_1 x) : Prop
qreva x (lfappend (rev (Cons n Nil)) (rev y)) : lst
rev _UNBOUND_REL_1 : lst
Cons n x : lst
lst : Set
Cons n Nil : lst
natural : Set
n : natural
Nil : lst

* Functions:
rev  : forall _ : lst, lst
lfappend  : forall (_ : lst) (_ : lst), lst
qreva  : forall (_ : lst) (_ : lst), lst
Cons  : forall (_ : natural) (_ : lst), lst
@eq  : forall (A : Type) (_ : A) (_ : A), Prop

<---GENERALIZATION--->
Time elapsed: 3 seconds
Generalized Variables:
lf3 : lst = lfappend (rev (Cons n Nil)) (rev y)
lf7 : lst = Cons n x
lf1 : lst = rev (qreva x (lfappend (rev (Cons n Nil)) (rev y)))
lf4 : lst = lfappend y (Cons n x)
lf5 : lst = rev (Cons n Nil)
lf9 : lst = Nil
lf2 : lst = qreva x (lfappend (rev (Cons n Nil)) (rev y))
lf8 : lst = rev y
lf6 : lst = Cons n Nil

Generalizations:
Lemma conj1: forall (lf4 : lst) (lf1 : lst), @eq lst lf1 lf4.
Lemma conj33: forall (lf1 : lst) (y : lst) (lf7 : lst), @eq lst lf1 (lfappend y lf7).
Lemma conj65: forall (lf2 : lst) (lf4 : lst), @eq lst (rev lf2) lf4.
Lemma conj69: forall (x : lst) (lf4 : lst) (lf3 : lst), @eq lst (rev (qreva x lf3)) lf4.
Lemma conj97: forall (lf2 : lst) (y : lst) (lf7 : lst), @eq lst (rev lf2) (lfappend y lf7).
Lemma conj101: forall (x : lst) (y : lst) (lf7 : lst) (lf3 : lst), @eq lst (rev (qreva x lf3)) (lfappend y lf7).
Lemma conj161: forall (x : lst) (lf1 : lst) (y : lst) (n : natural), @eq lst lf1 (lfappend y (Cons n x)).
Lemma conj225: forall (lf2 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev lf2) (lfappend y (Cons n x)).
Lemma conj229: forall (x : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst (rev (qreva x lf3)) (lfappend y (Cons n x)).
Lemma conj325: forall (lf8 : lst) (lf5 : lst) (x : lst) (lf4 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) lf4.
Lemma conj327: forall (lf5 : lst) (x : lst) (lf4 : lst) (y : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) lf4.
Lemma conj341: forall (lf8 : lst) (lf6 : lst) (x : lst) (lf4 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) lf4.
Lemma conj342: forall (lf8 : lst) (lf9 : lst) (x : lst) (lf4 : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8))) lf4.
Lemma conj343: forall (lf6 : lst) (x : lst) (lf4 : lst) (y : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y)))) lf4.
Lemma conj344: forall (lf9 : lst) (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y)))) lf4.
Lemma conj350: forall (lf8 : lst) (x : lst) (lf4 : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8))) lf4.
Lemma conj352: forall (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y)))) lf4.
Lemma conj357: forall (lf8 : lst) (lf5 : lst) (x : lst) (y : lst) (lf7 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (lfappend y lf7).
Lemma conj359: forall (lf5 : lst) (x : lst) (y : lst) (lf7 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (lfappend y lf7).
Lemma conj373: forall (lf8 : lst) (lf6 : lst) (x : lst) (y : lst) (lf7 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (lfappend y lf7).
Lemma conj374: forall (lf8 : lst) (lf9 : lst) (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8))) (lfappend y lf7).
Lemma conj375: forall (lf6 : lst) (x : lst) (y : lst) (lf7 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y)))) (lfappend y lf7).
Lemma conj376: forall (lf9 : lst) (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))
  (lfappend y lf7).
Lemma conj382: forall (lf8 : lst) (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8))) (lfappend y lf7).
Lemma conj384: forall (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))
  (lfappend y lf7).
Lemma conj485: forall (lf8 : lst) (lf5 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend lf5 lf8))) (lfappend y (Cons n x)).
Lemma conj487: forall (lf5 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (lfappend y (Cons n x)).
Lemma conj501: forall (lf8 : lst) (lf6 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (lfappend y (Cons n x)).
Lemma conj502: forall (lf8 : lst) (lf9 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))
  (lfappend y (Cons n x)).
Lemma conj503: forall (lf6 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y)))) (lfappend y (Cons n x)).
Lemma conj504: forall (lf9 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))
  (lfappend y (Cons n x)).
Lemma conj510: forall (lf8 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))
  (lfappend y (Cons n x)).
Lemma conj512: forall (x : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))
  (lfappend y (Cons n x)).


<---VALIDITY CHECKS--->
Time elapsed: 214 seconds
Valid:
Lemma conj512: forall (x : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))
  (lfappend y (Cons n x)).

Invalid:
Lemma conj510: forall (lf8 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))
  (lfappend y (Cons n x)).
Lemma conj504: forall (lf9 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))
  (lfappend y (Cons n x)).
Lemma conj503: forall (lf6 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y)))) (lfappend y (Cons n x)).
Lemma conj502: forall (lf8 : lst) (lf9 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))
  (lfappend y (Cons n x)).
Lemma conj501: forall (lf8 : lst) (lf6 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (lfappend y (Cons n x)).
Lemma conj487: forall (lf5 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (lfappend y (Cons n x)).
Lemma conj485: forall (lf8 : lst) (lf5 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend lf5 lf8))) (lfappend y (Cons n x)).
Lemma conj384: forall (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))
  (lfappend y lf7).
Lemma conj382: forall (lf8 : lst) (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8))) (lfappend y lf7).
Lemma conj376: forall (lf9 : lst) (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))
  (lfappend y lf7).
Lemma conj375: forall (lf6 : lst) (x : lst) (y : lst) (lf7 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y)))) (lfappend y lf7).
Lemma conj374: forall (lf8 : lst) (lf9 : lst) (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8))) (lfappend y lf7).
Lemma conj373: forall (lf8 : lst) (lf6 : lst) (x : lst) (y : lst) (lf7 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (lfappend y lf7).
Lemma conj359: forall (lf5 : lst) (x : lst) (y : lst) (lf7 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (lfappend y lf7).
Lemma conj357: forall (lf8 : lst) (lf5 : lst) (x : lst) (y : lst) (lf7 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (lfappend y lf7).
Lemma conj352: forall (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y)))) lf4.
Lemma conj350: forall (lf8 : lst) (x : lst) (lf4 : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8))) lf4.
Lemma conj344: forall (lf9 : lst) (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y)))) lf4.
Lemma conj343: forall (lf6 : lst) (x : lst) (lf4 : lst) (y : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y)))) lf4.
Lemma conj342: forall (lf8 : lst) (lf9 : lst) (x : lst) (lf4 : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8))) lf4.
Lemma conj341: forall (lf8 : lst) (lf6 : lst) (x : lst) (lf4 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) lf4.
Lemma conj327: forall (lf5 : lst) (x : lst) (lf4 : lst) (y : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) lf4.
Lemma conj325: forall (lf8 : lst) (lf5 : lst) (x : lst) (lf4 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) lf4.
Lemma conj229: forall (x : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst (rev (qreva x lf3)) (lfappend y (Cons n x)).
Lemma conj225: forall (lf2 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev lf2) (lfappend y (Cons n x)).
Lemma conj161: forall (x : lst) (lf1 : lst) (y : lst) (n : natural), @eq lst lf1 (lfappend y (Cons n x)).
Lemma conj101: forall (x : lst) (y : lst) (lf7 : lst) (lf3 : lst), @eq lst (rev (qreva x lf3)) (lfappend y lf7).
Lemma conj97: forall (lf2 : lst) (y : lst) (lf7 : lst), @eq lst (rev lf2) (lfappend y lf7).
Lemma conj69: forall (x : lst) (lf4 : lst) (lf3 : lst), @eq lst (rev (qreva x lf3)) lf4.
Lemma conj65: forall (lf2 : lst) (lf4 : lst), @eq lst (rev lf2) lf4.
Lemma conj33: forall (lf1 : lst) (y : lst) (lf7 : lst), @eq lst lf1 (lfappend y lf7).
Lemma conj1: forall (lf4 : lst) (lf1 : lst), @eq lst lf1 lf4.

<---ADD IMPLICATIONS--->
Time elapsed: 264 seconds
Generalizations:
Lemma conj510: forall (lf8 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))
  (lfappend y (Cons n x)).
Lemma conj504: forall (lf9 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))
  (lfappend y (Cons n x)).
Lemma conj503: forall (lf6 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y)))) (lfappend y (Cons n x)).
Lemma conj502: forall (lf8 : lst) (lf9 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))
  (lfappend y (Cons n x)).
Lemma conj501: forall (lf8 : lst) (lf6 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (lfappend y (Cons n x)).
Lemma conj487: forall (lf5 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (lfappend y (Cons n x)).
Lemma conj485: forall (lf8 : lst) (lf5 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend lf5 lf8))) (lfappend y (Cons n x)).
Lemma conj384: forall (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))
  (lfappend y lf7).
Lemma conj382: forall (lf8 : lst) (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8))) (lfappend y lf7).
Lemma conj376: forall (lf9 : lst) (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))
  (lfappend y lf7).
Lemma conj375: forall (lf6 : lst) (x : lst) (y : lst) (lf7 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y)))) (lfappend y lf7).
Lemma conj374: forall (lf8 : lst) (lf9 : lst) (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8))) (lfappend y lf7).
Lemma conj373: forall (lf8 : lst) (lf6 : lst) (x : lst) (y : lst) (lf7 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (lfappend y lf7).
Lemma conj359: forall (lf5 : lst) (x : lst) (y : lst) (lf7 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (lfappend y lf7).
Lemma conj357: forall (lf8 : lst) (lf5 : lst) (x : lst) (y : lst) (lf7 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (lfappend y lf7).
Lemma conj352: forall (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y)))) lf4.
Lemma conj350: forall (lf8 : lst) (x : lst) (lf4 : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8))) lf4.
Lemma conj344: forall (lf9 : lst) (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y)))) lf4.
Lemma conj343: forall (lf6 : lst) (x : lst) (lf4 : lst) (y : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y)))) lf4.
Lemma conj342: forall (lf8 : lst) (lf9 : lst) (x : lst) (lf4 : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8))) lf4.
Lemma conj341: forall (lf8 : lst) (lf6 : lst) (x : lst) (lf4 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) lf4.
Lemma conj327: forall (lf5 : lst) (x : lst) (lf4 : lst) (y : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) lf4.
Lemma conj325: forall (lf8 : lst) (lf5 : lst) (x : lst) (lf4 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) lf4.
Lemma conj229: forall (x : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst (rev (qreva x lf3)) (lfappend y (Cons n x)).
Lemma conj225: forall (lf2 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev lf2) (lfappend y (Cons n x)).
Lemma conj161: forall (x : lst) (lf1 : lst) (y : lst) (n : natural), @eq lst lf1 (lfappend y (Cons n x)).
Lemma conj101: forall (x : lst) (y : lst) (lf7 : lst) (lf3 : lst), @eq lst (rev (qreva x lf3)) (lfappend y lf7).
Lemma conj97: forall (lf2 : lst) (y : lst) (lf7 : lst), @eq lst (rev lf2) (lfappend y lf7).
Lemma conj69: forall (x : lst) (lf4 : lst) (lf3 : lst), @eq lst (rev (qreva x lf3)) lf4.
Lemma conj65: forall (lf2 : lst) (lf4 : lst), @eq lst (rev lf2) lf4.
Lemma conj33: forall (lf1 : lst) (y : lst) (lf7 : lst), @eq lst lf1 (lfappend y lf7).
Lemma conj1: forall (lf4 : lst) (lf1 : lst), @eq lst lf1 lf4.


<---VALIDITY CHECKS--->
Time elapsed: 320 seconds
Valid:

Invalid:
Lemma conj1: forall (lf4 : lst) (lf1 : lst), @eq lst lf1 lf4.
Lemma conj33: forall (lf1 : lst) (y : lst) (lf7 : lst), @eq lst lf1 (lfappend y lf7).
Lemma conj65: forall (lf2 : lst) (lf4 : lst), @eq lst (rev lf2) lf4.
Lemma conj69: forall (x : lst) (lf4 : lst) (lf3 : lst), @eq lst (rev (qreva x lf3)) lf4.
Lemma conj97: forall (lf2 : lst) (y : lst) (lf7 : lst), @eq lst (rev lf2) (lfappend y lf7).
Lemma conj101: forall (x : lst) (y : lst) (lf7 : lst) (lf3 : lst), @eq lst (rev (qreva x lf3)) (lfappend y lf7).
Lemma conj161: forall (x : lst) (lf1 : lst) (y : lst) (n : natural), @eq lst lf1 (lfappend y (Cons n x)).
Lemma conj225: forall (lf2 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev lf2) (lfappend y (Cons n x)).
Lemma conj229: forall (x : lst) (y : lst) (n : natural) (lf3 : lst), @eq lst (rev (qreva x lf3)) (lfappend y (Cons n x)).
Lemma conj325: forall (lf8 : lst) (lf5 : lst) (x : lst) (lf4 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) lf4.
Lemma conj327: forall (lf5 : lst) (x : lst) (lf4 : lst) (y : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) lf4.
Lemma conj341: forall (lf8 : lst) (lf6 : lst) (x : lst) (lf4 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) lf4.
Lemma conj342: forall (lf8 : lst) (lf9 : lst) (x : lst) (lf4 : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8))) lf4.
Lemma conj343: forall (lf6 : lst) (x : lst) (lf4 : lst) (y : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y)))) lf4.
Lemma conj344: forall (lf9 : lst) (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y)))) lf4.
Lemma conj350: forall (lf8 : lst) (x : lst) (lf4 : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8))) lf4.
Lemma conj352: forall (x : lst) (lf4 : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y)))) lf4.
Lemma conj357: forall (lf8 : lst) (lf5 : lst) (x : lst) (y : lst) (lf7 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (lfappend y lf7).
Lemma conj359: forall (lf5 : lst) (x : lst) (y : lst) (lf7 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (lfappend y lf7).
Lemma conj373: forall (lf8 : lst) (lf6 : lst) (x : lst) (y : lst) (lf7 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (lfappend y lf7).
Lemma conj374: forall (lf8 : lst) (lf9 : lst) (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8))) (lfappend y lf7).
Lemma conj375: forall (lf6 : lst) (x : lst) (y : lst) (lf7 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y)))) (lfappend y lf7).
Lemma conj376: forall (lf9 : lst) (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))
  (lfappend y lf7).
Lemma conj382: forall (lf8 : lst) (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8))) (lfappend y lf7).
Lemma conj384: forall (x : lst) (y : lst) (lf7 : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))
  (lfappend y lf7).
Lemma conj485: forall (lf8 : lst) (lf5 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend lf5 lf8))) (lfappend y (Cons n x)).
Lemma conj487: forall (lf5 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (lfappend y (Cons n x)).
Lemma conj501: forall (lf8 : lst) (lf6 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (lfappend y (Cons n x)).
Lemma conj502: forall (lf8 : lst) (lf9 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))
  (lfappend y (Cons n x)).
Lemma conj503: forall (lf6 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y)))) (lfappend y (Cons n x)).
Lemma conj504: forall (lf9 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))
  (lfappend y (Cons n x)).
Lemma conj510: forall (lf8 : lst) (x : lst) (y : lst) (n : natural), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))
  (lfappend y (Cons n x)).


<---CREATE SKETCHES--->
Time elapsed: 320 seconds
Sketches:
Sketch conj33_sketch0 : @eq lst lf1 (##hole##)
Sketch conj33_term_sketch0 : @eq lst (lfappend y lf7) (##hole##)
Sketch conj65_sketch0 : @eq lst (##hole##) lf4
Sketch conj65_term_sketch0 : @eq lst (rev lf2) (##hole##)
Sketch conj69_sketch0 : @eq lst (rev (##hole##)) lf4
Sketch conj69_sketch1 : @eq lst (##hole##) lf4
Sketch conj69_term_sketch0 : @eq lst (qreva x lf3) (##hole##)
Sketch conj69_term_sketch1 : @eq lst (rev (qreva x lf3)) (##hole##)
Sketch conj97_sketch0 : @eq lst (rev lf2) (##hole##)
Sketch conj97_sketch1 : @eq lst (##hole##) (lfappend y lf7)
Sketch conj97_term_sketch0 : @eq lst (lfappend y lf7) (##hole##)
Sketch conj97_term_sketch1 : @eq lst (rev lf2) (##hole##)
Sketch conj101_sketch0 : @eq lst (rev (##hole##)) (lfappend y lf7)
Sketch conj101_sketch1 : @eq lst (##hole##) (lfappend y lf7)
Sketch conj101_sketch2 : @eq lst (rev (qreva x lf3)) (##hole##)
Sketch conj101_term_sketch0 : @eq lst (qreva x lf3) (##hole##)
Sketch conj101_term_sketch1 : @eq lst (rev (qreva x lf3)) (##hole##)
Sketch conj101_term_sketch2 : @eq lst (lfappend y lf7) (##hole##)
Sketch conj161_sketch0 : @eq lst lf1 (##hole##)
Sketch conj161_sketch1 : @eq lst lf1 (lfappend y (##hole##))
Sketch conj161_term_sketch0 : @eq lst (lfappend y (Cons n x)) (##hole##)
Sketch conj161_term_sketch1 : @eq lst (Cons n x) (##hole##)
Sketch conj225_sketch0 : @eq lst (rev lf2) (##hole##)
Sketch conj225_sketch1 : @eq lst (##hole##) (lfappend y (Cons n x))
Sketch conj225_sketch2 : @eq lst (rev lf2) (lfappend y (##hole##))
Sketch conj225_term_sketch0 : @eq lst (lfappend y (Cons n x)) (##hole##)
Sketch conj225_term_sketch1 : @eq lst (rev lf2) (##hole##)
Sketch conj225_term_sketch2 : @eq lst (Cons n x) (##hole##)
Sketch conj229_sketch0 : @eq lst (rev (##hole##)) (lfappend y (Cons n x))
Sketch conj229_sketch1 : @eq lst (rev (qreva x lf3)) (##hole##)
Sketch conj229_sketch2 : @eq lst (##hole##) (lfappend y (Cons n x))
Sketch conj229_sketch3 : @eq lst (rev (qreva x lf3)) (lfappend y (##hole##))
Sketch conj229_term_sketch0 : @eq lst (qreva x lf3) (##hole##)
Sketch conj229_term_sketch1 : @eq lst (lfappend y (Cons n x)) (##hole##)
Sketch conj229_term_sketch2 : @eq lst (rev (qreva x lf3)) (##hole##)
Sketch conj229_term_sketch3 : @eq lst (Cons n x) (##hole##)
Sketch conj325_sketch0 : @eq lst (rev (qreva x (##hole##))) lf4
Sketch conj325_sketch1 : @eq lst (rev (##hole##)) lf4
Sketch conj325_sketch2 : @eq lst (##hole##) lf4
Sketch conj325_term_sketch0 : @eq lst (lfappend lf5 lf8) (##hole##)
Sketch conj325_term_sketch1 : @eq lst (qreva x (lfappend lf5 lf8)) (##hole##)
Sketch conj325_term_sketch2 : @eq lst (rev (qreva x (lfappend lf5 lf8))) (##hole##)
Sketch conj327_sketch0 : @eq lst (rev (qreva x (##hole##))) lf4
Sketch conj327_sketch1 : @eq lst (##hole##) lf4
Sketch conj327_sketch2 : @eq lst (rev (qreva x (lfappend lf5 (##hole##)))) lf4
Sketch conj327_sketch3 : @eq lst (rev (##hole##)) lf4
Sketch conj327_term_sketch0 : @eq lst (lfappend lf5 (rev y)) (##hole##)
Sketch conj327_term_sketch1 : @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (##hole##)
Sketch conj327_term_sketch2 : @eq lst (rev y) (##hole##)
Sketch conj327_term_sketch3 : @eq lst (qreva x (lfappend lf5 (rev y))) (##hole##)
Sketch conj341_sketch0 : @eq lst (rev (qreva x (lfappend (##hole##) lf8))) lf4
Sketch conj341_sketch1 : @eq lst (##hole##) lf4
Sketch conj341_sketch2 : @eq lst (rev (##hole##)) lf4
Sketch conj341_sketch3 : @eq lst (rev (qreva x (##hole##))) lf4
Sketch conj341_term_sketch0 : @eq lst (rev lf6) (##hole##)
Sketch conj341_term_sketch1 : @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (##hole##)
Sketch conj341_term_sketch2 : @eq lst (qreva x (lfappend (rev lf6) lf8)) (##hole##)
Sketch conj341_term_sketch3 : @eq lst (lfappend (rev lf6) lf8) (##hole##)
Sketch conj342_sketch0 : @eq lst (rev (qreva x (lfappend (rev (##hole##)) lf8))) lf4
Sketch conj342_sketch1 : @eq lst (##hole##) lf4
Sketch conj342_sketch2 : @eq lst (rev (qreva x (##hole##))) lf4
Sketch conj342_sketch3 : @eq lst (rev (qreva x (lfappend (##hole##) lf8))) lf4
Sketch conj342_sketch4 : @eq lst (rev (##hole##)) lf4
Sketch conj342_term_sketch0 : @eq lst (Cons n lf9) (##hole##)
Sketch conj342_term_sketch1 : @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8))) (##hole##)
Sketch conj342_term_sketch2 : @eq lst (lfappend (rev (Cons n lf9)) lf8) (##hole##)
Sketch conj342_term_sketch3 : @eq lst (rev (Cons n lf9)) (##hole##)
Sketch conj342_term_sketch4 : @eq lst (qreva x (lfappend (rev (Cons n lf9)) lf8)) (##hole##)
Sketch conj343_sketch0 : @eq lst (rev (qreva x (lfappend (##hole##) (rev y)))) lf4
Sketch conj343_sketch1 : @eq lst (rev (qreva x (##hole##))) lf4
Sketch conj343_sketch2 : @eq lst (rev (##hole##)) lf4
Sketch conj343_sketch3 : @eq lst (rev (qreva x (lfappend (rev lf6) (##hole##)))) lf4
Sketch conj343_sketch4 : @eq lst (##hole##) lf4
Sketch conj343_term_sketch0 : @eq lst (rev lf6) (##hole##)
Sketch conj343_term_sketch1 : @eq lst (lfappend (rev lf6) (rev y)) (##hole##)
Sketch conj343_term_sketch2 : @eq lst (qreva x (lfappend (rev lf6) (rev y))) (##hole##)
Sketch conj343_term_sketch3 : @eq lst (rev y) (##hole##)
Sketch conj343_term_sketch4 : @eq lst (rev (qreva x (lfappend (rev lf6) (rev y)))) (##hole##)
Sketch conj344_sketch0 : @eq lst (rev (qreva x (lfappend (rev (##hole##)) (rev y)))) lf4
Sketch conj344_sketch1 : @eq lst (##hole##) lf4
Sketch conj344_sketch2 : @eq lst (rev (##hole##)) lf4
Sketch conj344_sketch3 : @eq lst (rev (qreva x (lfappend (##hole##) (rev y)))) lf4
Sketch conj344_sketch4 : @eq lst (rev (qreva x (##hole##))) lf4
Sketch conj344_sketch5 : @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (##hole##)))) lf4
Sketch conj344_term_sketch0 : @eq lst (Cons n lf9) (##hole##)
Sketch conj344_term_sketch1 : @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y)))) (##hole##)
Sketch conj344_term_sketch2 : @eq lst (qreva x (lfappend (rev (Cons n lf9)) (rev y))) (##hole##)
Sketch conj344_term_sketch3 : @eq lst (rev (Cons n lf9)) (##hole##)
Sketch conj344_term_sketch4 : @eq lst (lfappend (rev (Cons n lf9)) (rev y)) (##hole##)
Sketch conj344_term_sketch5 : @eq lst (rev y) (##hole##)
Sketch conj350_sketch0 : @eq lst (rev (qreva x (##hole##))) lf4
Sketch conj350_sketch1 : @eq lst (rev (qreva x (lfappend (##hole##) lf8))) lf4
Sketch conj350_sketch2 : @eq lst (rev (##hole##)) lf4
Sketch conj350_sketch3 : @eq lst (rev (qreva x (lfappend (rev (##hole##)) lf8))) lf4
Sketch conj350_sketch4 : @eq lst (rev (qreva x (lfappend (rev (Cons n (##hole##))) lf8))) lf4
Sketch conj350_sketch5 : @eq lst (##hole##) lf4
Sketch conj350_term_sketch0 : @eq lst (lfappend (rev (Cons n Nil)) lf8) (##hole##)
Sketch conj350_term_sketch1 : @eq lst (rev (Cons n Nil)) (##hole##)
Sketch conj350_term_sketch2 : @eq lst (qreva x (lfappend (rev (Cons n Nil)) lf8)) (##hole##)
Sketch conj350_term_sketch3 : @eq lst (Cons n Nil) (##hole##)
Sketch conj350_term_sketch4 : @eq lst Nil (##hole##)
Sketch conj350_term_sketch5 : @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8))) (##hole##)
Sketch conj352_sketch0 : @eq lst (rev (qreva x (lfappend (##hole##) (rev y)))) lf4
Sketch conj352_sketch1 : @eq lst (rev (qreva x (##hole##))) lf4
Sketch conj352_sketch2 : @eq lst (##hole##) lf4
Sketch conj352_sketch3 : @eq lst (rev (##hole##)) lf4
Sketch conj352_sketch4 : @eq lst (rev (qreva x (lfappend (rev (##hole##)) (rev y)))) lf4
Sketch conj352_sketch5 : @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (##hole##)))) lf4
Sketch conj352_sketch6 : @eq lst (rev (qreva x (lfappend (rev (Cons n (##hole##))) (rev y)))) lf4
Sketch conj352_term_sketch0 : @eq lst (rev (Cons n Nil)) (##hole##)
Sketch conj352_term_sketch1 : @eq lst (lfappend (rev (Cons n Nil)) (rev y)) (##hole##)
Sketch conj352_term_sketch2 : @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y)))) (##hole##)
Sketch conj352_term_sketch3 : @eq lst (qreva x (lfappend (rev (Cons n Nil)) (rev y))) (##hole##)
Sketch conj352_term_sketch4 : @eq lst (Cons n Nil) (##hole##)
Sketch conj352_term_sketch5 : @eq lst (rev y) (##hole##)
Sketch conj352_term_sketch6 : @eq lst Nil (##hole##)
Sketch conj357_sketch0 : @eq lst (rev (qreva x (lfappend lf5 lf8))) (##hole##)
Sketch conj357_sketch1 : @eq lst (rev (qreva x (##hole##))) (lfappend y lf7)
Sketch conj357_sketch2 : @eq lst (rev (##hole##)) (lfappend y lf7)
Sketch conj357_sketch3 : @eq lst (##hole##) (lfappend y lf7)
Sketch conj357_term_sketch0 : @eq lst (lfappend y lf7) (##hole##)
Sketch conj357_term_sketch1 : @eq lst (lfappend lf5 lf8) (##hole##)
Sketch conj357_term_sketch2 : @eq lst (qreva x (lfappend lf5 lf8)) (##hole##)
Sketch conj357_term_sketch3 : @eq lst (rev (qreva x (lfappend lf5 lf8))) (##hole##)
Sketch conj359_sketch0 : @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (##hole##)
Sketch conj359_sketch1 : @eq lst (rev (qreva x (##hole##))) (lfappend y lf7)
Sketch conj359_sketch2 : @eq lst (##hole##) (lfappend y lf7)
Sketch conj359_sketch3 : @eq lst (rev (qreva x (lfappend lf5 (##hole##)))) (lfappend y lf7)
Sketch conj359_sketch4 : @eq lst (rev (##hole##)) (lfappend y lf7)
Sketch conj359_term_sketch0 : @eq lst (lfappend y lf7) (##hole##)
Sketch conj359_term_sketch1 : @eq lst (lfappend lf5 (rev y)) (##hole##)
Sketch conj359_term_sketch2 : @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (##hole##)
Sketch conj359_term_sketch3 : @eq lst (rev y) (##hole##)
Sketch conj359_term_sketch4 : @eq lst (qreva x (lfappend lf5 (rev y))) (##hole##)
Sketch conj373_sketch0 : @eq lst (rev (qreva x (lfappend (##hole##) lf8))) (lfappend y lf7)
Sketch conj373_sketch1 : @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (##hole##)
Sketch conj373_sketch2 : @eq lst (##hole##) (lfappend y lf7)
Sketch conj373_sketch3 : @eq lst (rev (##hole##)) (lfappend y lf7)
Sketch conj373_sketch4 : @eq lst (rev (qreva x (##hole##))) (lfappend y lf7)
Sketch conj373_term_sketch0 : @eq lst (rev lf6) (##hole##)
Sketch conj373_term_sketch1 : @eq lst (lfappend y lf7) (##hole##)
Sketch conj373_term_sketch2 : @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (##hole##)
Sketch conj373_term_sketch3 : @eq lst (qreva x (lfappend (rev lf6) lf8)) (##hole##)
Sketch conj373_term_sketch4 : @eq lst (lfappend (rev lf6) lf8) (##hole##)
Sketch conj374_sketch0 : @eq lst (rev (qreva x (lfappend (rev (##hole##)) lf8))) (lfappend y lf7)
Sketch conj374_sketch1 : @eq lst (##hole##) (lfappend y lf7)
Sketch conj374_sketch2 : @eq lst (rev (qreva x (##hole##))) (lfappend y lf7)
Sketch conj374_sketch3 : @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8))) (##hole##)
Sketch conj374_sketch4 : @eq lst (rev (qreva x (lfappend (##hole##) lf8))) (lfappend y lf7)
Sketch conj374_sketch5 : @eq lst (rev (##hole##)) (lfappend y lf7)
Sketch conj374_term_sketch0 : @eq lst (Cons n lf9) (##hole##)
Sketch conj374_term_sketch1 : @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8))) (##hole##)
Sketch conj374_term_sketch2 : @eq lst (lfappend (rev (Cons n lf9)) lf8) (##hole##)
Sketch conj374_term_sketch3 : @eq lst (lfappend y lf7) (##hole##)
Sketch conj374_term_sketch4 : @eq lst (rev (Cons n lf9)) (##hole##)
Sketch conj374_term_sketch5 : @eq lst (qreva x (lfappend (rev (Cons n lf9)) lf8)) (##hole##)
Sketch conj375_sketch0 : @eq lst (rev (qreva x (lfappend (##hole##) (rev y)))) (lfappend y lf7)
Sketch conj375_sketch1 : @eq lst (rev (qreva x (lfappend (rev lf6) (rev y)))) (##hole##)
Sketch conj375_sketch2 : @eq lst (rev (qreva x (##hole##))) (lfappend y lf7)
Sketch conj375_sketch3 : @eq lst (rev (##hole##)) (lfappend y lf7)
Sketch conj375_sketch4 : @eq lst (rev (qreva x (lfappend (rev lf6) (##hole##)))) (lfappend y lf7)
Sketch conj375_sketch5 : @eq lst (##hole##) (lfappend y lf7)
Sketch conj375_term_sketch0 : @eq lst (rev lf6) (##hole##)
Sketch conj375_term_sketch1 : @eq lst (lfappend y lf7) (##hole##)
Sketch conj375_term_sketch2 : @eq lst (lfappend (rev lf6) (rev y)) (##hole##)
Sketch conj375_term_sketch3 : @eq lst (qreva x (lfappend (rev lf6) (rev y))) (##hole##)
Sketch conj375_term_sketch4 : @eq lst (rev y) (##hole##)
Sketch conj375_term_sketch5 : @eq lst (rev (qreva x (lfappend (rev lf6) (rev y)))) (##hole##)
Sketch conj376_sketch0 : @eq lst (rev (qreva x (lfappend (rev (##hole##)) (rev y)))) (lfappend y lf7)
Sketch conj376_sketch1 : @eq lst (##hole##) (lfappend y lf7)
Sketch conj376_sketch2 : @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y)))) (##hole##)
Sketch conj376_sketch3 : @eq lst (rev (##hole##)) (lfappend y lf7)
Sketch conj376_sketch4 : @eq lst (rev (qreva x (lfappend (##hole##) (rev y)))) (lfappend y lf7)
Sketch conj376_sketch5 : @eq lst (rev (qreva x (##hole##))) (lfappend y lf7)
Sketch conj376_sketch6 : @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (##hole##))))
  (lfappend y lf7)
Sketch conj376_term_sketch0 : @eq lst (Cons n lf9) (##hole##)
Sketch conj376_term_sketch1 : @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y)))) (##hole##)
Sketch conj376_term_sketch2 : @eq lst (lfappend y lf7) (##hole##)
Sketch conj376_term_sketch3 : @eq lst (qreva x (lfappend (rev (Cons n lf9)) (rev y))) (##hole##)
Sketch conj376_term_sketch4 : @eq lst (rev (Cons n lf9)) (##hole##)
Sketch conj376_term_sketch5 : @eq lst (lfappend (rev (Cons n lf9)) (rev y)) (##hole##)
Sketch conj376_term_sketch6 : @eq lst (rev y) (##hole##)
Sketch conj382_sketch0 : @eq lst (rev (qreva x (##hole##))) (lfappend y lf7)
Sketch conj382_sketch1 : @eq lst (rev (qreva x (lfappend (##hole##) lf8))) (lfappend y lf7)
Sketch conj382_sketch2 : @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8))) (##hole##)
Sketch conj382_sketch3 : @eq lst (rev (##hole##)) (lfappend y lf7)
Sketch conj382_sketch4 : @eq lst (rev (qreva x (lfappend (rev (##hole##)) lf8))) (lfappend y lf7)
Sketch conj382_sketch5 : @eq lst (rev (qreva x (lfappend (rev (Cons n (##hole##))) lf8)))
  (lfappend y lf7)
Sketch conj382_sketch6 : @eq lst (##hole##) (lfappend y lf7)
Sketch conj382_term_sketch0 : @eq lst (lfappend (rev (Cons n Nil)) lf8) (##hole##)
Sketch conj382_term_sketch1 : @eq lst (rev (Cons n Nil)) (##hole##)
Sketch conj382_term_sketch2 : @eq lst (lfappend y lf7) (##hole##)
Sketch conj382_term_sketch3 : @eq lst (qreva x (lfappend (rev (Cons n Nil)) lf8)) (##hole##)
Sketch conj382_term_sketch4 : @eq lst (Cons n Nil) (##hole##)
Sketch conj382_term_sketch5 : @eq lst Nil (##hole##)
Sketch conj382_term_sketch6 : @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8))) (##hole##)
Sketch conj384_sketch0 : @eq lst (rev (qreva x (lfappend (##hole##) (rev y)))) (lfappend y lf7)
Sketch conj384_sketch1 : @eq lst (rev (qreva x (##hole##))) (lfappend y lf7)
Sketch conj384_sketch2 : @eq lst (##hole##) (lfappend y lf7)
Sketch conj384_sketch3 : @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y)))) (##hole##)
Sketch conj384_sketch4 : @eq lst (rev (##hole##)) (lfappend y lf7)
Sketch conj384_sketch5 : @eq lst (rev (qreva x (lfappend (rev (##hole##)) (rev y)))) (lfappend y lf7)
Sketch conj384_sketch6 : @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (##hole##))))
  (lfappend y lf7)
Sketch conj384_sketch7 : @eq lst (rev (qreva x (lfappend (rev (Cons n (##hole##))) (rev y))))
  (lfappend y lf7)
Sketch conj384_term_sketch0 : @eq lst (rev (Cons n Nil)) (##hole##)
Sketch conj384_term_sketch1 : @eq lst (lfappend (rev (Cons n Nil)) (rev y)) (##hole##)
Sketch conj384_term_sketch2 : @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y)))) (##hole##)
Sketch conj384_term_sketch3 : @eq lst (lfappend y lf7) (##hole##)
Sketch conj384_term_sketch4 : @eq lst (qreva x (lfappend (rev (Cons n Nil)) (rev y))) (##hole##)
Sketch conj384_term_sketch5 : @eq lst (Cons n Nil) (##hole##)
Sketch conj384_term_sketch6 : @eq lst (rev y) (##hole##)
Sketch conj384_term_sketch7 : @eq lst Nil (##hole##)
Sketch conj485_sketch0 : @eq lst (rev (qreva x (lfappend lf5 lf8))) (##hole##)
Sketch conj485_sketch1 : @eq lst (rev (qreva x (lfappend lf5 lf8))) (lfappend y (##hole##))
Sketch conj485_sketch2 : @eq lst (rev (qreva x (##hole##))) (lfappend y (Cons n x))
Sketch conj485_sketch3 : @eq lst (rev (##hole##)) (lfappend y (Cons n x))
Sketch conj485_sketch4 : @eq lst (##hole##) (lfappend y (Cons n x))
Sketch conj485_term_sketch0 : @eq lst (lfappend y (Cons n x)) (##hole##)
Sketch conj485_term_sketch1 : @eq lst (Cons n x) (##hole##)
Sketch conj485_term_sketch2 : @eq lst (lfappend lf5 lf8) (##hole##)
Sketch conj485_term_sketch3 : @eq lst (qreva x (lfappend lf5 lf8)) (##hole##)
Sketch conj485_term_sketch4 : @eq lst (rev (qreva x (lfappend lf5 lf8))) (##hole##)
Sketch conj487_sketch0 : @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (##hole##)
Sketch conj487_sketch1 : @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (lfappend y (##hole##))
Sketch conj487_sketch2 : @eq lst (rev (qreva x (##hole##))) (lfappend y (Cons n x))
Sketch conj487_sketch3 : @eq lst (##hole##) (lfappend y (Cons n x))
Sketch conj487_sketch4 : @eq lst (rev (qreva x (lfappend lf5 (##hole##)))) (lfappend y (Cons n x))
Sketch conj487_sketch5 : @eq lst (rev (##hole##)) (lfappend y (Cons n x))
Sketch conj487_term_sketch0 : @eq lst (lfappend y (Cons n x)) (##hole##)
Sketch conj487_term_sketch1 : @eq lst (Cons n x) (##hole##)
Sketch conj487_term_sketch2 : @eq lst (lfappend lf5 (rev y)) (##hole##)
Sketch conj487_term_sketch3 : @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (##hole##)
Sketch conj487_term_sketch4 : @eq lst (rev y) (##hole##)
Sketch conj487_term_sketch5 : @eq lst (qreva x (lfappend lf5 (rev y))) (##hole##)
Sketch conj501_sketch0 : @eq lst (rev (qreva x (lfappend (##hole##) lf8))) (lfappend y (Cons n x))
Sketch conj501_sketch1 : @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (##hole##)
Sketch conj501_sketch2 : @eq lst (##hole##) (lfappend y (Cons n x))
Sketch conj501_sketch3 : @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (lfappend y (##hole##))
Sketch conj501_sketch4 : @eq lst (rev (##hole##)) (lfappend y (Cons n x))
Sketch conj501_sketch5 : @eq lst (rev (qreva x (##hole##))) (lfappend y (Cons n x))
Sketch conj501_term_sketch0 : @eq lst (rev lf6) (##hole##)
Sketch conj501_term_sketch1 : @eq lst (lfappend y (Cons n x)) (##hole##)
Sketch conj501_term_sketch2 : @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (##hole##)
Sketch conj501_term_sketch3 : @eq lst (Cons n x) (##hole##)
Sketch conj501_term_sketch4 : @eq lst (qreva x (lfappend (rev lf6) lf8)) (##hole##)
Sketch conj501_term_sketch5 : @eq lst (lfappend (rev lf6) lf8) (##hole##)
Sketch conj502_sketch0 : @eq lst (rev (qreva x (lfappend (rev (##hole##)) lf8)))
  (lfappend y (Cons n x))
Sketch conj502_sketch1 : @eq lst (##hole##) (lfappend y (Cons n x))
Sketch conj502_sketch2 : @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8))) (##hole##)
Sketch conj502_sketch3 : @eq lst (rev (qreva x (##hole##))) (lfappend y (Cons n x))
Sketch conj502_sketch4 : @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))
  (lfappend y (##hole##))
Sketch conj502_sketch5 : @eq lst (rev (qreva x (lfappend (##hole##) lf8))) (lfappend y (Cons n x))
Sketch conj502_sketch6 : @eq lst (rev (##hole##)) (lfappend y (Cons n x))
Sketch conj502_term_sketch0 : @eq lst (Cons n lf9) (##hole##)
Sketch conj502_term_sketch1 : @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8))) (##hole##)
Sketch conj502_term_sketch2 : @eq lst (lfappend y (Cons n x)) (##hole##)
Sketch conj502_term_sketch3 : @eq lst (lfappend (rev (Cons n lf9)) lf8) (##hole##)
Sketch conj502_term_sketch4 : @eq lst (Cons n x) (##hole##)
Sketch conj502_term_sketch5 : @eq lst (rev (Cons n lf9)) (##hole##)
Sketch conj502_term_sketch6 : @eq lst (qreva x (lfappend (rev (Cons n lf9)) lf8)) (##hole##)
Sketch conj503_sketch0 : @eq lst (rev (qreva x (lfappend (##hole##) (rev y)))) (lfappend y (Cons n x))
Sketch conj503_sketch1 : @eq lst (rev (qreva x (lfappend (rev lf6) (rev y)))) (##hole##)
Sketch conj503_sketch2 : @eq lst (rev (qreva x (##hole##))) (lfappend y (Cons n x))
Sketch conj503_sketch3 : @eq lst (rev (##hole##)) (lfappend y (Cons n x))
Sketch conj503_sketch4 : @eq lst (rev (qreva x (lfappend (rev lf6) (rev y)))) (lfappend y (##hole##))
Sketch conj503_sketch5 : @eq lst (rev (qreva x (lfappend (rev lf6) (##hole##))))
  (lfappend y (Cons n x))
Sketch conj503_sketch6 : @eq lst (##hole##) (lfappend y (Cons n x))
Sketch conj503_term_sketch0 : @eq lst (rev lf6) (##hole##)
Sketch conj503_term_sketch1 : @eq lst (lfappend y (Cons n x)) (##hole##)
Sketch conj503_term_sketch2 : @eq lst (lfappend (rev lf6) (rev y)) (##hole##)
Sketch conj503_term_sketch3 : @eq lst (qreva x (lfappend (rev lf6) (rev y))) (##hole##)
Sketch conj503_term_sketch4 : @eq lst (Cons n x) (##hole##)
Sketch conj503_term_sketch5 : @eq lst (rev y) (##hole##)
Sketch conj503_term_sketch6 : @eq lst (rev (qreva x (lfappend (rev lf6) (rev y)))) (##hole##)
Sketch conj504_sketch0 : @eq lst (rev (qreva x (lfappend (rev (##hole##)) (rev y))))
  (lfappend y (Cons n x))
Sketch conj504_sketch1 : @eq lst (##hole##) (lfappend y (Cons n x))
Sketch conj504_sketch2 : @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y)))) (##hole##)
Sketch conj504_sketch3 : @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))
  (lfappend y (##hole##))
Sketch conj504_sketch4 : @eq lst (rev (##hole##)) (lfappend y (Cons n x))
Sketch conj504_sketch5 : @eq lst (rev (qreva x (lfappend (##hole##) (rev y)))) (lfappend y (Cons n x))
Sketch conj504_sketch6 : @eq lst (rev (qreva x (##hole##))) (lfappend y (Cons n x))
Sketch conj504_sketch7 : @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (##hole##))))
  (lfappend y (Cons n x))
Sketch conj504_term_sketch0 : @eq lst (Cons n lf9) (##hole##)
Sketch conj504_term_sketch1 : @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y)))) (##hole##)
Sketch conj504_term_sketch2 : @eq lst (lfappend y (Cons n x)) (##hole##)
Sketch conj504_term_sketch3 : @eq lst (Cons n x) (##hole##)
Sketch conj504_term_sketch4 : @eq lst (qreva x (lfappend (rev (Cons n lf9)) (rev y))) (##hole##)
Sketch conj504_term_sketch5 : @eq lst (rev (Cons n lf9)) (##hole##)
Sketch conj504_term_sketch6 : @eq lst (lfappend (rev (Cons n lf9)) (rev y)) (##hole##)
Sketch conj504_term_sketch7 : @eq lst (rev y) (##hole##)
Sketch conj510_sketch0 : @eq lst (rev (qreva x (##hole##))) (lfappend y (Cons n x))
Sketch conj510_sketch1 : @eq lst (rev (qreva x (lfappend (##hole##) lf8))) (lfappend y (Cons n x))
Sketch conj510_sketch2 : @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8))) (##hole##)
Sketch conj510_sketch3 : @eq lst (rev (##hole##)) (lfappend y (Cons n x))
Sketch conj510_sketch4 : @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))
  (lfappend y (##hole##))
Sketch conj510_sketch5 : @eq lst (rev (qreva x (lfappend (rev (##hole##)) lf8)))
  (lfappend y (Cons n x))
Sketch conj510_sketch6 : @eq lst (rev (qreva x (lfappend (rev (Cons n (##hole##))) lf8)))
  (lfappend y (Cons n x))
Sketch conj510_sketch7 : @eq lst (##hole##) (lfappend y (Cons n x))
Sketch conj510_term_sketch0 : @eq lst (lfappend (rev (Cons n Nil)) lf8) (##hole##)
Sketch conj510_term_sketch1 : @eq lst (rev (Cons n Nil)) (##hole##)
Sketch conj510_term_sketch2 : @eq lst (lfappend y (Cons n x)) (##hole##)
Sketch conj510_term_sketch3 : @eq lst (qreva x (lfappend (rev (Cons n Nil)) lf8)) (##hole##)
Sketch conj510_term_sketch4 : @eq lst (Cons n x) (##hole##)
Sketch conj510_term_sketch5 : @eq lst (Cons n Nil) (##hole##)
Sketch conj510_term_sketch6 : @eq lst Nil (##hole##)
Sketch conj510_term_sketch7 : @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8))) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 5957 seconds
Problems per Sketch:
Sketch conj69_sketch0 --> Problem  synth_5
Sketch conj504_term_sketch4 --> Problem  synth_40
Sketch conj503_term_sketch4 --> Problem  synth_11
Sketch conj350_sketch0 --> Problem  synth_15
Sketch conj504_term_sketch3 --> Problem  synth_11
Sketch conj344_term_sketch3 --> Problem  synth_29
Sketch conj101_term_sketch2 --> Problem  synth_2
Sketch conj502_sketch3 --> Problem  synth_61
Sketch conj384_sketch4 --> Problem  synth_8
Sketch conj502_term_sketch5 --> Problem  synth_29
Sketch conj65_term_sketch0 --> Problem  synth_4
Sketch conj382_term_sketch6 --> Problem  synth_47
Sketch conj487_sketch5 --> Problem  synth_13
Sketch conj382_sketch4 --> Problem  synth_53
Sketch conj376_term_sketch5 --> Problem  synth_41
Sketch conj344_term_sketch0 --> Problem  synth_29
Sketch conj384_term_sketch1 --> Problem  synth_50
Sketch conj510_sketch5 --> Problem  synth_64
Sketch conj344_term_sketch1 --> Problem  synth_39
Sketch conj373_sketch4 --> Problem  synth_51
Sketch conj502_sketch4 --> Problem  synth_66
Sketch conj343_sketch1 --> Problem  synth_15
Sketch conj101_sketch0 --> Problem  synth_8
Sketch conj487_sketch3 --> Problem  synth_10
Sketch conj359_term_sketch0 --> Problem  synth_2
Sketch conj350_term_sketch4 --> Problem  synth_46
Sketch conj384_sketch5 --> Problem  synth_54
Sketch conj501_term_sketch4 --> Problem  synth_27
Sketch conj375_sketch5 --> Problem  synth_2
Sketch conj501_sketch5 --> Problem  synth_61
Sketch conj382_term_sketch0 --> Problem  synth_43
Sketch conj487_sketch0 --> Problem  synth_21
Sketch conj97_term_sketch1 --> Problem  synth_4
Sketch conj376_term_sketch6 --> Problem  synth_22
Sketch conj502_term_sketch6 --> Problem  synth_32
Sketch conj376_sketch3 --> Problem  synth_8
Sketch conj503_sketch1 --> Problem  synth_37
Sketch conj359_term_sketch4 --> Problem  synth_23
Sketch conj325_sketch0 --> Problem  synth_15
Sketch conj342_term_sketch3 --> Problem  synth_29
Sketch conj384_term_sketch7 --> Problem  synth_46
Sketch conj225_term_sketch2 --> Problem  synth_11
Sketch conj510_term_sketch1 --> Problem  synth_44
Sketch conj344_sketch4 --> Problem  synth_15
Sketch conj352_term_sketch4 --> Problem  synth_44
Sketch conj502_term_sketch3 --> Problem  synth_31
Sketch conj342_sketch1 --> Problem  synth_3
Sketch conj69_term_sketch0 --> Problem  synth_6
Sketch conj501_sketch2 --> Problem  synth_10
Sketch conj373_term_sketch2 --> Problem  synth_26
Sketch conj327_sketch1 --> Problem  synth_3
Sketch conj501_sketch0 --> Problem  synth_64
Sketch conj97_term_sketch0 --> Problem  synth_2
Sketch conj161_sketch1 --> Problem  synth_9
Sketch conj350_sketch1 --> Problem  synth_24
Sketch conj503_sketch0 --> Problem  synth_67
Sketch conj342_term_sketch4 --> Problem  synth_32
Sketch conj504_term_sketch5 --> Problem  synth_29
Sketch conj504_term_sketch2 --> Problem  synth_10
Sketch conj502_sketch5 --> Problem  synth_64
Sketch conj510_term_sketch0 --> Problem  synth_43
Sketch conj375_sketch2 --> Problem  synth_51
Sketch conj357_term_sketch3 --> Problem  synth_18
Sketch conj352_sketch6 --> Problem  synth_49
Sketch conj374_sketch3 --> Problem  synth_30
Sketch conj229_sketch0 --> Problem  synth_13
Sketch conj376_sketch4 --> Problem  synth_54
Sketch conj376_sketch2 --> Problem  synth_39
Sketch conj325_sketch1 --> Problem  synth_5
Sketch conj101_sketch2 --> Problem  synth_7
Sketch conj327_term_sketch2 --> Problem  synth_22
Sketch conj510_term_sketch6 --> Problem  synth_46
Sketch conj350_sketch3 --> Problem  synth_24
Sketch conj487_term_sketch2 --> Problem  synth_20
Sketch conj487_term_sketch0 --> Problem  synth_10
Sketch conj376_term_sketch4 --> Problem  synth_29
Sketch conj352_sketch3 --> Problem  synth_5
Sketch conj343_term_sketch2 --> Problem  synth_36
Sketch conj352_term_sketch5 --> Problem  synth_22
Sketch conj374_term_sketch5 --> Problem  synth_32
Sketch conj33_sketch0 --> Problem  synth_1
Sketch conj357_term_sketch0 --> Problem  synth_2
Sketch conj504_sketch1 --> Problem  synth_10
Sketch conj350_sketch2 --> Problem  synth_5
Sketch conj375_term_sketch2 --> Problem  synth_35
Sketch conj374_sketch0 --> Problem  synth_53
Sketch conj343_term_sketch0 --> Problem  synth_25
Sketch conj341_sketch2 --> Problem  synth_5
Sketch conj352_term_sketch3 --> Problem  synth_13
Sketch conj510_sketch4 --> Problem  synth_72
Sketch conj65_sketch0 --> Problem  synth_3
Sketch conj501_sketch4 --> Problem  synth_13
Sketch conj352_term_sketch6 --> Problem  synth_46
Sketch conj342_sketch3 --> Problem  synth_24
Sketch conj503_sketch5 --> Problem  synth_69
Sketch conj501_term_sketch1 --> Problem  synth_10
Sketch conj504_term_sketch1 --> Problem  synth_39
Sketch conj350_sketch4 --> Problem  synth_42
Sketch conj382_term_sketch4 --> Problem  synth_44
Sketch conj487_term_sketch1 --> Problem  synth_11
Sketch conj375_term_sketch0 --> Problem  synth_25
Sketch conj357_sketch3 --> Problem  synth_2
Sketch conj342_term_sketch2 --> Problem  synth_31
Sketch conj101_term_sketch1 --> Problem  synth_7
Sketch conj373_sketch0 --> Problem  synth_53
Sketch conj352_sketch4 --> Problem  synth_33
Sketch conj504_term_sketch7 --> Problem  synth_22
Sketch conj225_sketch1 --> Problem  synth_10
Sketch conj343_sketch3 --> Problem  synth_34
Sketch conj485_sketch2 --> Problem  synth_61
Sketch conj374_term_sketch1 --> Problem  synth_30
Sketch conj375_term_sketch1 --> Problem  synth_2
Sketch conj344_sketch1 --> Problem  synth_3
Sketch conj327_sketch2 --> Problem  synth_19
Sketch conj33_term_sketch0 --> Problem  synth_2
Sketch conj350_sketch5 --> Problem  synth_3
Sketch conj341_sketch1 --> Problem  synth_3
Sketch conj487_term_sketch3 --> Problem  synth_21
Sketch conj384_term_sketch6 --> Problem  synth_22
Sketch conj374_term_sketch0 --> Problem  synth_29
Sketch conj373_sketch1 --> Problem  synth_26
Sketch conj341_term_sketch1 --> Problem  synth_26
Sketch conj375_term_sketch3 --> Problem  synth_36
Sketch conj374_sketch2 --> Problem  synth_51
Sketch conj97_sketch0 --> Problem  synth_4
Sketch conj487_sketch2 --> Problem  synth_61
Sketch conj375_sketch0 --> Problem  synth_54
Sketch conj225_term_sketch1 --> Problem  synth_4
Sketch conj487_sketch4 --> Problem  synth_63
Sketch conj384_sketch0 --> Problem  synth_54
Sketch conj510_sketch3 --> Problem  synth_13
Sketch conj359_sketch3 --> Problem  synth_52
Sketch conj384_sketch3 --> Problem  synth_10
Sketch conj376_sketch6 --> Problem  synth_56
Sketch conj384_term_sketch4 --> Problem  synth_13
Sketch conj161_term_sketch0 --> Problem  synth_10
Sketch conj382_term_sketch3 --> Problem  synth_45
Sketch conj229_sketch1 --> Problem  synth_7
Sketch conj69_term_sketch1 --> Problem  synth_7
Sketch conj352_sketch2 --> Problem  synth_3
Sketch conj376_sketch5 --> Problem  synth_51
Sketch conj502_sketch6 --> Problem  synth_13
Sketch conj375_sketch1 --> Problem  synth_37
Sketch conj341_sketch3 --> Problem  synth_15
Sketch conj357_term_sketch2 --> Problem  synth_17
Sketch conj487_term_sketch4 --> Problem  synth_22
Sketch conj161_term_sketch1 --> Problem  synth_11
Sketch conj502_term_sketch1 --> Problem  synth_30
Sketch conj382_sketch0 --> Problem  synth_51
Sketch conj97_sketch1 --> Problem  synth_2
Sketch conj342_sketch0 --> Problem  synth_24
Sketch conj350_term_sketch5 --> Problem  synth_47
Sketch conj374_sketch5 --> Problem  synth_8
Sketch conj343_sketch0 --> Problem  synth_33
Sketch conj101_term_sketch0 --> Problem  synth_6
Sketch conj503_sketch3 --> Problem  synth_13
Sketch conj502_sketch2 --> Problem  synth_30
Sketch conj510_term_sketch4 --> Problem  synth_11
Sketch conj225_sketch2 --> Problem  synth_12
Sketch conj384_sketch7 --> Problem  synth_59
Sketch conj485_term_sketch2 --> Problem  synth_16
Sketch conj485_term_sketch0 --> Problem  synth_10
Sketch conj373_term_sketch1 --> Problem  synth_2
Sketch conj374_term_sketch3 --> Problem  synth_2
Sketch conj357_sketch0 --> Problem  synth_18
Sketch conj359_sketch4 --> Problem  synth_8
Sketch conj350_term_sketch1 --> Problem  synth_44
Sketch conj101_sketch1 --> Problem  synth_2
Sketch conj343_sketch2 --> Problem  synth_5
Sketch conj384_sketch1 --> Problem  synth_51
Sketch conj375_term_sketch5 --> Problem  synth_37
Sketch conj503_term_sketch2 --> Problem  synth_35
Sketch conj352_term_sketch2 --> Problem  synth_10
Sketch conj373_term_sketch4 --> Problem  synth_28
Sketch conj327_sketch3 --> Problem  synth_5
Sketch conj352_sketch5 --> Problem  synth_48
Sketch conj374_term_sketch2 --> Problem  synth_31
Sketch conj382_sketch2 --> Problem  synth_47
Sketch conj384_term_sketch3 --> Problem  synth_2
Sketch conj350_term_sketch0 --> Problem  synth_43
Sketch conj382_sketch1 --> Problem  synth_53
Sketch conj502_sketch0 --> Problem  synth_64
Sketch conj501_term_sketch0 --> Problem  synth_25
Sketch conj344_sketch0 --> Problem  synth_33
Sketch conj359_term_sketch1 --> Problem  synth_20
Sketch conj384_term_sketch2 --> Problem  synth_10
Sketch conj382_term_sketch2 --> Problem  synth_2
Sketch conj342_term_sketch1 --> Problem  synth_30
Sketch conj374_sketch4 --> Problem  synth_53
Sketch conj376_sketch0 --> Problem  synth_54
Sketch conj352_term_sketch1 --> Problem  synth_50
Sketch conj341_term_sketch3 --> Problem  synth_28
Sketch conj485_sketch1 --> Problem  synth_60
Sketch conj225_sketch0 --> Problem  synth_4
Sketch conj504_sketch4 --> Problem  synth_13
Sketch conj327_term_sketch0 --> Problem  synth_20
Sketch conj502_sketch1 --> Problem  synth_10
Sketch conj501_term_sketch5 --> Problem  synth_28
Sketch conj359_sketch0 --> Problem  synth_21
Sketch conj373_sketch2 --> Problem  synth_2
Sketch conj343_term_sketch1 --> Problem  synth_35
Sketch conj229_sketch2 --> Problem  synth_10
Sketch conj510_sketch6 --> Problem  synth_73
Sketch conj384_sketch6 --> Problem  synth_58
Sketch conj504_sketch5 --> Problem  synth_67
Sketch conj327_term_sketch3 --> Problem  synth_23
Sketch conj382_sketch5 --> Problem  synth_57
Sketch conj487_term_sketch5 --> Problem  synth_23
Sketch conj342_sketch4 --> Problem  synth_5
Sketch conj341_term_sketch2 --> Problem  synth_27
Sketch conj503_term_sketch1 --> Problem  synth_10
Sketch conj375_sketch4 --> Problem  synth_55
Sketch conj501_term_sketch3 --> Problem  synth_11
Sketch conj502_term_sketch2 --> Problem  synth_10
Sketch conj359_sketch1 --> Problem  synth_51
Sketch conj503_term_sketch6 --> Problem  synth_37
Sketch conj352_term_sketch0 --> Problem  synth_44
Sketch conj485_term_sketch4 --> Problem  synth_18
Sketch conj510_sketch2 --> Problem  synth_47
Sketch conj382_term_sketch1 --> Problem  synth_44
Sketch conj359_sketch2 --> Problem  synth_2
Sketch conj485_term_sketch1 --> Problem  synth_11
Sketch conj504_sketch3 --> Problem  synth_70
Sketch conj382_term_sketch5 --> Problem  synth_46
Sketch conj382_sketch6 --> Problem  synth_2
Sketch conj384_term_sketch0 --> Problem  synth_44
Sketch conj503_term_sketch0 --> Problem  synth_25
Sketch conj357_term_sketch1 --> Problem  synth_16
Sketch conj510_term_sketch5 --> Problem  synth_44
Sketch conj503_sketch4 --> Problem  synth_68
Sketch conj382_sketch3 --> Problem  synth_8
Sketch conj229_term_sketch3 --> Problem  synth_11
Sketch conj374_term_sketch4 --> Problem  synth_29
Sketch conj343_term_sketch3 --> Problem  synth_22
Sketch conj501_sketch3 --> Problem  synth_65
Sketch conj501_sketch1 --> Problem  synth_26
Sketch conj373_sketch3 --> Problem  synth_8
Sketch conj384_sketch2 --> Problem  synth_2
Sketch conj344_sketch3 --> Problem  synth_33
Sketch conj504_term_sketch6 --> Problem  synth_41
Sketch conj341_sketch0 --> Problem  synth_24
Sketch conj327_sketch0 --> Problem  synth_15
Sketch conj376_term_sketch2 --> Problem  synth_2
Sketch conj343_term_sketch4 --> Problem  synth_37
Sketch conj325_term_sketch2 --> Problem  synth_18
Sketch conj327_term_sketch1 --> Problem  synth_21
Sketch conj504_sketch6 --> Problem  synth_61
Sketch conj325_term_sketch1 --> Problem  synth_17
Sketch conj510_term_sketch2 --> Problem  synth_10
Sketch conj352_sketch1 --> Problem  synth_15
Sketch conj229_sketch3 --> Problem  synth_14
Sketch conj343_sketch4 --> Problem  synth_3
Sketch conj485_sketch0 --> Problem  synth_18
Sketch conj376_term_sketch0 --> Problem  synth_29
Sketch conj373_term_sketch0 --> Problem  synth_25
Sketch conj342_term_sketch0 --> Problem  synth_29
Sketch conj357_sketch2 --> Problem  synth_8
Sketch conj485_sketch3 --> Problem  synth_13
Sketch conj510_sketch1 --> Problem  synth_64
Sketch conj344_term_sketch4 --> Problem  synth_41
Sketch conj503_sketch2 --> Problem  synth_61
Sketch conj350_term_sketch2 --> Problem  synth_45
Sketch conj229_term_sketch0 --> Problem  synth_6
Sketch conj502_term_sketch4 --> Problem  synth_11
Sketch conj69_sketch1 --> Problem  synth_3
Sketch conj504_sketch2 --> Problem  synth_39
Sketch conj502_term_sketch0 --> Problem  synth_29
Sketch conj359_term_sketch3 --> Problem  synth_22
Sketch conj376_sketch1 --> Problem  synth_2
Sketch conj161_sketch0 --> Problem  synth_1
Sketch conj510_sketch0 --> Problem  synth_61
Sketch conj376_term_sketch3 --> Problem  synth_40
Sketch conj359_term_sketch2 --> Problem  synth_21
Sketch conj344_term_sketch5 --> Problem  synth_22
Sketch conj504_term_sketch0 --> Problem  synth_29
Sketch conj229_term_sketch2 --> Problem  synth_7
Sketch conj504_sketch7 --> Problem  synth_71
Sketch conj225_term_sketch0 --> Problem  synth_10
Sketch conj374_sketch1 --> Problem  synth_2
Sketch conj485_sketch4 --> Problem  synth_10
Sketch conj376_term_sketch1 --> Problem  synth_39
Sketch conj510_term_sketch7 --> Problem  synth_47
Sketch conj325_term_sketch0 --> Problem  synth_16
Sketch conj344_sketch2 --> Problem  synth_5
Sketch conj341_term_sketch0 --> Problem  synth_25
Sketch conj325_sketch2 --> Problem  synth_3
Sketch conj503_sketch6 --> Problem  synth_10
Sketch conj487_sketch1 --> Problem  synth_62
Sketch conj375_sketch3 --> Problem  synth_8
Sketch conj373_term_sketch3 --> Problem  synth_27
Sketch conj503_term_sketch3 --> Problem  synth_36
Sketch conj352_sketch0 --> Problem  synth_33
Sketch conj485_term_sketch3 --> Problem  synth_17
Sketch conj344_sketch5 --> Problem  synth_38
Sketch conj384_term_sketch5 --> Problem  synth_44
Sketch conj510_term_sketch3 --> Problem  synth_45
Sketch conj229_term_sketch1 --> Problem  synth_10
Sketch conj504_sketch0 --> Problem  synth_67
Sketch conj503_term_sketch5 --> Problem  synth_22
Sketch conj344_term_sketch2 --> Problem  synth_40
Sketch conj357_sketch1 --> Problem  synth_51
Sketch conj510_sketch7 --> Problem  synth_10
Sketch conj501_term_sketch2 --> Problem  synth_26
Sketch conj350_term_sketch3 --> Problem  synth_44
Sketch conj375_term_sketch4 --> Problem  synth_22
Sketch conj342_sketch2 --> Problem  synth_15


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 6353 seconds

Problem: synth_63
 lfappend (qreva y Nil) Nil
 rev (rev (rev y))
 rev (lfappend y Nil)
 lfappend (rev y) Nil
 qreva y Nil
 rev y

Problem: synth_68
 rev (qreva x (rev lf6))
 rev (qreva x lf6)
 lfappend (rev lf6) x
 qreva (rev lf6) x
 lfappend lf6 x
 qreva lf6 x

Problem: synth_67
 Cons n Nil

Problem: synth_64
 Cons n Nil

Problem: synth_11
 Cons n (qreva (rev x) Nil)
 rev (qreva x (Cons n Nil))
 rev (lfappend (rev x) (Cons n Nil))
 Cons n (rev (rev x))
 Cons n (lfappend x Nil)
 Cons n x

Problem: synth_54

Problem: synth_39
 lfappend y (Cons n (lfappend x lf9))
 lfappend y (Cons n (lfappend x Nil))
 rev (lfappend (rev x) (Cons n (rev y)))
 rev (qreva x (Cons n (rev y)))
 qreva (rev y) (Cons n x)
 lfappend y (Cons n x)

Problem: synth_46
 Nil

Problem: synth_66
 qreva lf9 (Cons n x)
 Cons n (lfappend lf9 x)
 Cons n (qreva lf9 x)
 Cons n (lfappend x lf9)
 Cons n (lfappend x Nil)
 Cons n x

Problem: synth_57
 Nil

Problem: synth_59
 Nil

Problem: synth_31
 lfappend lf9 (Cons n lf8)
 qreva lf9 (Cons n lf8)
 Cons n (lfappend lf9 lf8)
 Cons n (qreva lf9 lf8)
 Cons n (lfappend lf8 Nil)
 Cons n lf8

Problem: synth_8
 qreva (lfappend y lf7) Nil
 lfappend (rev lf7) (qreva y Nil)
 qreva lf7 (qreva y Nil)
 lfappend (rev lf7) (rev y)
 rev (lfappend y lf7)
 qreva lf7 (rev y)

Problem: synth_34

Problem: synth_5
 lfappend (qreva lf4 Nil) Nil
 rev (rev (rev lf4))
 rev (lfappend lf4 Nil)
 lfappend (rev lf4) Nil
 qreva lf4 Nil
 rev lf4

Problem: synth_37
 lfappend (lfappend y (rev lf6)) x
 lfappend (lfappend y lf6) x
 qreva (rev y) (lfappend lf6 x)
 qreva (rev y) (qreva lf6 x)
 lfappend y (lfappend lf6 x)
 lfappend y (qreva lf6 x)

Problem: synth_58
 lfappend (qreva y Nil) Nil
 rev (rev (rev y))
 rev (lfappend y Nil)
 lfappend (rev y) Nil
 qreva y Nil
 rev y

Problem: synth_53

Problem: synth_2
 qreva (rev y) (lfappend lf7 Nil)
 lfappend y (rev (rev lf7))
 lfappend y (lfappend lf7 Nil)
 rev (qreva lf7 (rev y))
 qreva (rev y) lf7
 lfappend y lf7

Problem: synth_22
 lfappend (qreva y Nil) Nil
 rev (rev (rev y))
 rev (lfappend y Nil)
 lfappend (rev y) Nil
 qreva y Nil
 rev y

Problem: synth_18
 qreva (lfappend lf5 lf8) x
 qreva (qreva lf5 lf8) x
 lfappend (rev lf8) (lfappend lf5 x)
 lfappend (rev lf8) (qreva lf5 x)
 qreva lf8 (lfappend lf5 x)
 qreva lf8 (qreva lf5 x)

Problem: synth_21
 lfappend (lfappend y (rev lf5)) x
 lfappend (lfappend y lf5) x
 qreva (rev y) (lfappend lf5 x)
 qreva (rev y) (qreva lf5 x)
 lfappend y (lfappend lf5 x)
 lfappend y (qreva lf5 x)

Problem: synth_72
 Cons n (qreva (rev x) Nil)
 rev (qreva x (Cons n Nil))
 rev (lfappend (rev x) (Cons n Nil))
 Cons n (rev (rev x))
 Cons n (lfappend x Nil)
 Cons n x

Problem: synth_56
 lfappend lf9 (rev y)
 qreva lf9 (rev y)
 qreva y (rev lf9)
 qreva y lf9
 qreva y Nil
 rev y

Problem: synth_41
 Cons n (lfappend lf9 (rev y))
 Cons n (qreva lf9 (rev y))
 Cons n (qreva y (rev lf9))
 Cons n (qreva y lf9)
 Cons n (qreva y Nil)
 Cons n (rev y)

Problem: synth_49
 Nil

Problem: synth_25
 qreva (rev lf6) Nil
 rev (rev lf6)
 lfappend lf6 Nil
 qreva lf6 Nil
 rev lf6
 lf6

Problem: synth_13
 lfappend (qreva x Nil) (Cons n (rev y))
 qreva x (Cons n (qreva y Nil))
 rev (qreva (rev y) (Cons n x))
 rev (lfappend y (Cons n x))
 lfappend (rev x) (Cons n (rev y))
 qreva x (Cons n (rev y))

Problem: synth_6
 lfappend (rev x) (lfappend lf3 Nil)
 qreva x (rev (rev lf3))
 qreva x (lfappend lf3 Nil)
 rev (qreva lf3 x)
 lfappend (rev x) lf3
 qreva x lf3

Problem: synth_4
 lfappend (qreva lf2 Nil) Nil
 rev (rev (rev lf2))
 rev (lfappend lf2 Nil)
 lfappend (rev lf2) Nil
 qreva lf2 Nil
 rev lf2

Problem: synth_38

Problem: synth_65
 rev (qreva x (rev lf6))
 rev (qreva x lf6)
 lfappend (rev lf6) x
 qreva (rev lf6) x
 lfappend lf6 x
 qreva lf6 x

Problem: synth_23
 rev (lfappend y (lfappend lf5 x))
 rev (lfappend y (qreva lf5 x))
 lfappend (rev x) (lfappend lf5 (rev y))
 lfappend (rev x) (qreva lf5 (rev y))
 qreva x (lfappend lf5 (rev y))
 qreva x (qreva lf5 (rev y))

Problem: synth_19

Problem: synth_10
 lfappend y (Cons n (rev (rev x)))
 lfappend y (Cons n (lfappend x Nil))
 rev (lfappend (rev x) (Cons n (rev y)))
 rev (qreva x (Cons n (rev y)))
 qreva (rev y) (Cons n x)
 lfappend y (Cons n x)

Problem: synth_24

Problem: synth_32
 qreva x (Cons n (qreva lf9 lf8))
 qreva x (Cons n (lfappend lf8 Nil))
 rev (lfappend (rev lf8) (Cons n x))
 rev (qreva lf8 (Cons n x))
 lfappend (rev x) (Cons n lf8)
 qreva x (Cons n lf8)

Problem: synth_48

Problem: synth_51

Problem: synth_35
 lfappend (rev lf6) (rev y)
 qreva (rev lf6) (rev y)
 rev (lfappend y (rev lf6))
 rev (lfappend y lf6)
 lfappend lf6 (rev y)
 qreva lf6 (rev y)

Problem: synth_28
 rev (qreva lf8 (rev lf6))
 rev (qreva lf8 lf6)
 lfappend (rev lf6) lf8
 qreva (rev lf6) lf8
 lfappend lf6 lf8
 qreva lf6 lf8

Problem: synth_73
 Nil

Problem: synth_17
 qreva (qreva lf5 x) lf8
 lfappend (qreva x lf5) lf8
 lfappend (rev x) (lfappend lf5 lf8)
 lfappend (rev x) (qreva lf5 lf8)
 qreva x (lfappend lf5 lf8)
 qreva x (qreva lf5 lf8)

Problem: synth_29
 Cons n (qreva lf9 Nil)
 lfappend (rev (rev lf9)) (Cons n Nil)
 lfappend (rev lf9) (Cons n Nil)
 Cons n (rev lf9)
 Cons n lf9
 Cons n Nil

Problem: synth_45
 qreva x (Cons n (rev (rev lf8)))
 qreva x (Cons n (lfappend lf8 Nil))
 rev (lfappend (rev lf8) (Cons n x))
 rev (qreva lf8 (Cons n x))
 lfappend (rev x) (Cons n lf8)
 qreva x (Cons n lf8)

Problem: synth_26
 qreva (qreva lf6 lf8) x
 lfappend (qreva lf8 lf6) x
 lfappend (rev lf8) (lfappend lf6 x)
 lfappend (rev lf8) (qreva lf6 x)
 qreva lf8 (lfappend lf6 x)
 qreva lf8 (qreva lf6 x)

Problem: synth_70
 qreva lf9 (Cons n x)
 Cons n (lfappend lf9 x)
 Cons n (qreva lf9 x)
 Cons n (lfappend x lf9)
 Cons n (lfappend x Nil)
 Cons n x

Problem: synth_9

Problem: synth_30
 qreva lf8 (Cons n (lfappend x lf9))
 qreva lf8 (Cons n (lfappend x Nil))
 rev (lfappend (rev x) (Cons n lf8))
 rev (qreva x (Cons n lf8))
 lfappend (rev lf8) (Cons n x)
 qreva lf8 (Cons n x)

Problem: synth_1
 qreva (qreva lf1 Nil) Nil
 rev (qreva lf1 Nil)
 qreva (rev lf1) Nil
 rev (rev lf1)
 lfappend lf1 Nil
 lf1

Problem: synth_69
 lfappend (qreva y Nil) Nil
 rev (rev (rev y))
 rev (lfappend y Nil)
 lfappend (rev y) Nil
 qreva y Nil
 rev y

Problem: synth_55
 lfappend (qreva y Nil) Nil
 rev (rev (rev y))
 rev (lfappend y Nil)
 lfappend (rev y) Nil
 qreva y Nil
 rev y

Problem: synth_71
 lfappend lf9 (rev y)
 qreva lf9 (rev y)
 qreva y (rev lf9)
 qreva y lf9
 qreva y Nil
 rev y

Problem: synth_15

Problem: synth_14

Problem: synth_12

Problem: synth_62
 rev (qreva x (rev lf5))
 rev (qreva x lf5)
 lfappend (rev lf5) x
 qreva (rev lf5) x
 lfappend lf5 x
 qreva lf5 x

Problem: synth_50
 rev (qreva (rev y) (Cons n Nil))
 rev (lfappend y (Cons n Nil))
 rev (lfappend (rev (rev y)) (Cons n Nil))
 Cons n (lfappend (rev y) Nil)
 Cons n (qreva y Nil)
 Cons n (rev y)

Problem: synth_20
 lfappend (rev lf5) (rev y)
 qreva (rev lf5) (rev y)
 rev (lfappend y (rev lf5))
 rev (lfappend y lf5)
 lfappend lf5 (rev y)
 qreva lf5 (rev y)

Problem: synth_7
 lfappend (rev lf3) (lfappend x Nil)
 qreva lf3 (rev (rev x))
 qreva lf3 (lfappend x Nil)
 rev (qreva x lf3)
 lfappend (rev lf3) x
 qreva lf3 x

Problem: synth_61
 rev (qreva (rev y) (Cons n Nil))
 rev (lfappend y (Cons n Nil))
 rev (lfappend (rev (rev y)) (Cons n Nil))
 Cons n (lfappend (rev y) Nil)
 Cons n (qreva y Nil)
 Cons n (rev y)

Problem: synth_27
 qreva (qreva lf6 x) lf8
 lfappend (qreva x lf6) lf8
 lfappend (rev x) (lfappend lf6 lf8)
 lfappend (rev x) (qreva lf6 lf8)
 qreva x (lfappend lf6 lf8)
 qreva x (qreva lf6 lf8)

Problem: synth_42
 Nil

Problem: synth_16
 rev (qreva lf8 (rev lf5))
 rev (qreva lf8 lf5)
 lfappend (rev lf5) lf8
 qreva (rev lf5) lf8
 lfappend lf5 lf8
 qreva lf5 lf8

Problem: synth_40
 qreva x (Cons n (qreva y lf9))
 qreva x (Cons n (qreva y Nil))
 rev (qreva (rev y) (Cons n x))
 rev (lfappend y (Cons n x))
 lfappend (rev x) (Cons n (rev y))
 qreva x (Cons n (rev y))

Problem: synth_33

Problem: synth_47
 qreva lf8 (Cons n (rev (rev x)))
 qreva lf8 (Cons n (lfappend x Nil))
 rev (lfappend (rev x) (Cons n lf8))
 rev (qreva x (Cons n lf8))
 lfappend (rev lf8) (Cons n x)
 qreva lf8 (Cons n x)

Problem: synth_3
 qreva (qreva lf4 Nil) Nil
 rev (qreva lf4 Nil)
 qreva (rev lf4) Nil
 rev (rev lf4)
 lfappend lf4 Nil
 lf4

Problem: synth_52
 lfappend (qreva y Nil) Nil
 rev (rev (rev y))
 rev (lfappend y Nil)
 lfappend (rev y) Nil
 qreva y Nil
 rev y

Problem: synth_44
 Cons n Nil

Problem: synth_60
 rev (qreva x (rev lf5))
 rev (qreva x lf5)
 lfappend (rev lf5) x
 qreva (rev lf5) x
 lfappend lf5 x
 qreva lf5 x

Problem: synth_36
 rev (lfappend y (lfappend lf6 x))
 rev (lfappend y (qreva lf6 x))
 lfappend (rev x) (lfappend lf6 (rev y))
 lfappend (rev x) (qreva lf6 (rev y))
 qreva x (lfappend lf6 (rev y))
 qreva x (qreva lf6 (rev y))

Problem: synth_43
 Cons n (qreva (rev lf8) Nil)
 rev (qreva lf8 (Cons n Nil))
 rev (lfappend (rev lf8) (Cons n Nil))
 Cons n (rev (rev lf8))
 Cons n (lfappend lf8 Nil)
 Cons n lf8

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 6354 seconds
Lemmas:
Lemma candidate_1: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))   (lfappend y (Cons n x)).
Lemma candidate_2: forall (lf1 : lst), @eq lst lf1 (qreva (qreva lf1 Nil) Nil).
Lemma candidate_3: forall (lf1 : lst), @eq lst lf1 (rev (qreva lf1 Nil)).
Lemma candidate_4: forall (lf1 : lst), @eq lst lf1 (qreva (rev lf1) Nil).
Lemma candidate_5: forall (lf1 : lst), @eq lst lf1 (rev (rev lf1)).
Lemma candidate_6: forall (lf1 : lst), @eq lst lf1 (lfappend lf1 Nil).
Lemma candidate_7: forall (lf1 : lst), @eq lst lf1 (lf1).
Lemma candidate_8: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (qreva (rev y) (lfappend lf7 Nil)).
Lemma candidate_9: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y (rev (rev lf7))).
Lemma candidate_10: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y (lfappend lf7 Nil)).
Lemma candidate_11: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (rev (qreva lf7 (rev y))).
Lemma candidate_12: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (qreva (rev y) lf7).
Lemma candidate_13: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y lf7).
Lemma candidate_14: forall (lf4 : lst), @eq lst (qreva (qreva lf4 Nil) Nil) lf4.
Lemma candidate_15: forall (lf4 : lst), @eq lst (rev (qreva lf4 Nil)) lf4.
Lemma candidate_16: forall (lf4 : lst), @eq lst (qreva (rev lf4) Nil) lf4.
Lemma candidate_17: forall (lf4 : lst), @eq lst (rev (rev lf4)) lf4.
Lemma candidate_18: forall (lf4 : lst), @eq lst (lfappend lf4 Nil) lf4.
Lemma candidate_19: forall (lf4 : lst), @eq lst (lf4) lf4.
Lemma candidate_20: forall (lf2 : lst), @eq lst (rev lf2) (lfappend (qreva lf2 Nil) Nil).
Lemma candidate_21: forall (lf2 : lst), @eq lst (rev lf2) (rev (rev (rev lf2))).
Lemma candidate_22: forall (lf2 : lst), @eq lst (rev lf2) (rev (lfappend lf2 Nil)).
Lemma candidate_23: forall (lf2 : lst), @eq lst (rev lf2) (lfappend (rev lf2) Nil).
Lemma candidate_24: forall (lf2 : lst), @eq lst (rev lf2) (qreva lf2 Nil).
Lemma candidate_25: forall (lf2 : lst), @eq lst (rev lf2) (rev lf2).
Lemma candidate_26: forall (lf4 : lst), @eq lst (rev (lfappend (qreva lf4 Nil) Nil)) lf4.
Lemma candidate_27: forall (lf4 : lst), @eq lst (rev (rev (rev (rev lf4)))) lf4.
Lemma candidate_28: forall (lf4 : lst), @eq lst (rev (rev (lfappend lf4 Nil))) lf4.
Lemma candidate_29: forall (lf4 : lst), @eq lst (rev (lfappend (rev lf4) Nil)) lf4.
Lemma candidate_30: forall (lf4 : lst), @eq lst (rev (qreva lf4 Nil)) lf4.
Lemma candidate_31: forall (lf4 : lst), @eq lst (rev (rev lf4)) lf4.
Lemma candidate_32: forall (lf4 : lst), @eq lst (qreva (qreva lf4 Nil) Nil) lf4.
Lemma candidate_33: forall (lf4 : lst), @eq lst (rev (qreva lf4 Nil)) lf4.
Lemma candidate_34: forall (lf4 : lst), @eq lst (qreva (rev lf4) Nil) lf4.
Lemma candidate_35: forall (lf4 : lst), @eq lst (rev (rev lf4)) lf4.
Lemma candidate_36: forall (lf4 : lst), @eq lst (lfappend lf4 Nil) lf4.
Lemma candidate_37: forall (lf4 : lst), @eq lst (lf4) lf4.
Lemma candidate_38: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (lfappend (rev x) (lfappend lf3 Nil)).
Lemma candidate_39: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (qreva x (rev (rev lf3))).
Lemma candidate_40: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (qreva x (lfappend lf3 Nil)).
Lemma candidate_41: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (rev (qreva lf3 x)).
Lemma candidate_42: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (lfappend (rev x) lf3).
Lemma candidate_43: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (qreva x lf3).
Lemma candidate_44: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (lfappend (rev lf3) (lfappend x Nil)).
Lemma candidate_45: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (qreva lf3 (rev (rev x))).
Lemma candidate_46: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (qreva lf3 (lfappend x Nil)).
Lemma candidate_47: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (rev (qreva x lf3)).
Lemma candidate_48: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (lfappend (rev lf3) x).
Lemma candidate_49: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (qreva lf3 x).
Lemma candidate_50: forall (lf2 : lst), @eq lst (rev lf2) (lfappend (qreva lf2 Nil) Nil).
Lemma candidate_51: forall (lf2 : lst), @eq lst (rev lf2) (rev (rev (rev lf2))).
Lemma candidate_52: forall (lf2 : lst), @eq lst (rev lf2) (rev (lfappend lf2 Nil)).
Lemma candidate_53: forall (lf2 : lst), @eq lst (rev lf2) (lfappend (rev lf2) Nil).
Lemma candidate_54: forall (lf2 : lst), @eq lst (rev lf2) (qreva lf2 Nil).
Lemma candidate_55: forall (lf2 : lst), @eq lst (rev lf2) (rev lf2).
Lemma candidate_56: forall (lf7 : lst) (y : lst), @eq lst (qreva (rev y) (lfappend lf7 Nil)) (lfappend y lf7).
Lemma candidate_57: forall (lf7 : lst) (y : lst), @eq lst (lfappend y (rev (rev lf7))) (lfappend y lf7).
Lemma candidate_58: forall (lf7 : lst) (y : lst), @eq lst (lfappend y (lfappend lf7 Nil)) (lfappend y lf7).
Lemma candidate_59: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva lf7 (rev y))) (lfappend y lf7).
Lemma candidate_60: forall (lf7 : lst) (y : lst), @eq lst (qreva (rev y) lf7) (lfappend y lf7).
Lemma candidate_61: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y lf7).
Lemma candidate_62: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (qreva (rev y) (lfappend lf7 Nil)).
Lemma candidate_63: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y (rev (rev lf7))).
Lemma candidate_64: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y (lfappend lf7 Nil)).
Lemma candidate_65: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (rev (qreva lf7 (rev y))).
Lemma candidate_66: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (qreva (rev y) lf7).
Lemma candidate_67: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y lf7).
Lemma candidate_68: forall (lf2 : lst), @eq lst (rev lf2) (lfappend (qreva lf2 Nil) Nil).
Lemma candidate_69: forall (lf2 : lst), @eq lst (rev lf2) (rev (rev (rev lf2))).
Lemma candidate_70: forall (lf2 : lst), @eq lst (rev lf2) (rev (lfappend lf2 Nil)).
Lemma candidate_71: forall (lf2 : lst), @eq lst (rev lf2) (lfappend (rev lf2) Nil).
Lemma candidate_72: forall (lf2 : lst), @eq lst (rev lf2) (qreva lf2 Nil).
Lemma candidate_73: forall (lf2 : lst), @eq lst (rev lf2) (rev lf2).
Lemma candidate_74: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva (lfappend y lf7) Nil)) (lfappend y lf7).
Lemma candidate_75: forall (lf7 : lst) (y : lst), @eq lst (rev (lfappend (rev lf7) (qreva y Nil))) (lfappend y lf7).
Lemma candidate_76: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva lf7 (qreva y Nil))) (lfappend y lf7).
Lemma candidate_77: forall (lf7 : lst) (y : lst), @eq lst (rev (lfappend (rev lf7) (rev y))) (lfappend y lf7).
Lemma candidate_78: forall (lf7 : lst) (y : lst), @eq lst (rev (rev (lfappend y lf7))) (lfappend y lf7).
Lemma candidate_79: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva lf7 (rev y))) (lfappend y lf7).
Lemma candidate_80: forall (lf7 : lst) (y : lst), @eq lst (qreva (rev y) (lfappend lf7 Nil)) (lfappend y lf7).
Lemma candidate_81: forall (lf7 : lst) (y : lst), @eq lst (lfappend y (rev (rev lf7))) (lfappend y lf7).
Lemma candidate_82: forall (lf7 : lst) (y : lst), @eq lst (lfappend y (lfappend lf7 Nil)) (lfappend y lf7).
Lemma candidate_83: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva lf7 (rev y))) (lfappend y lf7).
Lemma candidate_84: forall (lf7 : lst) (y : lst), @eq lst (qreva (rev y) lf7) (lfappend y lf7).
Lemma candidate_85: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y lf7).
Lemma candidate_86: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (lfappend (rev lf3) (lfappend x Nil)).
Lemma candidate_87: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (qreva lf3 (rev (rev x))).
Lemma candidate_88: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (qreva lf3 (lfappend x Nil)).
Lemma candidate_89: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (rev (qreva x lf3)).
Lemma candidate_90: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (lfappend (rev lf3) x).
Lemma candidate_91: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (qreva lf3 x).
Lemma candidate_92: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (lfappend (rev x) (lfappend lf3 Nil)).
Lemma candidate_93: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (qreva x (rev (rev lf3))).
Lemma candidate_94: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (qreva x (lfappend lf3 Nil)).
Lemma candidate_95: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (rev (qreva lf3 x)).
Lemma candidate_96: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (lfappend (rev x) lf3).
Lemma candidate_97: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (qreva x lf3).
Lemma candidate_98: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (lfappend (rev lf3) (lfappend x Nil)).
Lemma candidate_99: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (qreva lf3 (rev (rev x))).
Lemma candidate_100: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (qreva lf3 (lfappend x Nil)).
Lemma candidate_101: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (rev (qreva x lf3)).
Lemma candidate_102: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (lfappend (rev lf3) x).
Lemma candidate_103: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (qreva lf3 x).
Lemma candidate_104: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (qreva (rev y) (lfappend lf7 Nil)).
Lemma candidate_105: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y (rev (rev lf7))).
Lemma candidate_106: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y (lfappend lf7 Nil)).
Lemma candidate_107: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (rev (qreva lf7 (rev y))).
Lemma candidate_108: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (qreva (rev y) lf7).
Lemma candidate_109: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y lf7).
Lemma candidate_110: forall (lf1 : lst), @eq lst lf1 (qreva (qreva lf1 Nil) Nil).
Lemma candidate_111: forall (lf1 : lst), @eq lst lf1 (rev (qreva lf1 Nil)).
Lemma candidate_112: forall (lf1 : lst), @eq lst lf1 (qreva (rev lf1) Nil).
Lemma candidate_113: forall (lf1 : lst), @eq lst lf1 (rev (rev lf1)).
Lemma candidate_114: forall (lf1 : lst), @eq lst lf1 (lfappend lf1 Nil).
Lemma candidate_115: forall (lf1 : lst), @eq lst lf1 (lf1).
Lemma candidate_116: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (rev (rev x)))).
Lemma candidate_117: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_118: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (rev (lfappend (rev x) (Cons n (rev y)))).
Lemma candidate_119: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (rev (qreva x (Cons n (rev y)))).
Lemma candidate_120: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (qreva (rev y) (Cons n x)).
Lemma candidate_121: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_122: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (qreva (rev x) Nil)).
Lemma candidate_123: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (qreva x (Cons n Nil))).
Lemma candidate_124: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (lfappend (rev x) (Cons n Nil))).
Lemma candidate_125: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rev (rev x))).
Lemma candidate_126: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_127: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_128: forall (lf2 : lst), @eq lst (rev lf2) (lfappend (qreva lf2 Nil) Nil).
Lemma candidate_129: forall (lf2 : lst), @eq lst (rev lf2) (rev (rev (rev lf2))).
Lemma candidate_130: forall (lf2 : lst), @eq lst (rev lf2) (rev (lfappend lf2 Nil)).
Lemma candidate_131: forall (lf2 : lst), @eq lst (rev lf2) (lfappend (rev lf2) Nil).
Lemma candidate_132: forall (lf2 : lst), @eq lst (rev lf2) (qreva lf2 Nil).
Lemma candidate_133: forall (lf2 : lst), @eq lst (rev lf2) (rev lf2).
Lemma candidate_134: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (rev (rev x)))) (lfappend y (Cons n x)).
Lemma candidate_135: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (lfappend x Nil))) (lfappend y (Cons n x)).
Lemma candidate_136: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (rev x) (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_137: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_138: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva (rev y) (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_139: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_140: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (rev (rev x)))).
Lemma candidate_141: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_142: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (rev (lfappend (rev x) (Cons n (rev y)))).
Lemma candidate_143: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (rev (qreva x (Cons n (rev y)))).
Lemma candidate_144: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (qreva (rev y) (Cons n x)).
Lemma candidate_145: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_146: forall (lf2 : lst), @eq lst (rev lf2) (lfappend (qreva lf2 Nil) Nil).
Lemma candidate_147: forall (lf2 : lst), @eq lst (rev lf2) (rev (rev (rev lf2))).
Lemma candidate_148: forall (lf2 : lst), @eq lst (rev lf2) (rev (lfappend lf2 Nil)).
Lemma candidate_149: forall (lf2 : lst), @eq lst (rev lf2) (lfappend (rev lf2) Nil).
Lemma candidate_150: forall (lf2 : lst), @eq lst (rev lf2) (qreva lf2 Nil).
Lemma candidate_151: forall (lf2 : lst), @eq lst (rev lf2) (rev lf2).
Lemma candidate_152: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (qreva (rev x) Nil)).
Lemma candidate_153: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (qreva x (Cons n Nil))).
Lemma candidate_154: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (lfappend (rev x) (Cons n Nil))).
Lemma candidate_155: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rev (rev x))).
Lemma candidate_156: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_157: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_158: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (qreva x Nil) (Cons n (rev y))))   (lfappend y (Cons n x)).
Lemma candidate_159: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (qreva y Nil)))) (lfappend y (Cons n x)).
Lemma candidate_160: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (rev (qreva (rev y) (Cons n x)))) (lfappend y (Cons n x)).
Lemma candidate_161: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (rev (lfappend y (Cons n x)))) (lfappend y (Cons n x)).
Lemma candidate_162: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (rev x) (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_163: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_164: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (lfappend (rev lf3) (lfappend x Nil)).
Lemma candidate_165: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (qreva lf3 (rev (rev x))).
Lemma candidate_166: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (qreva lf3 (lfappend x Nil)).
Lemma candidate_167: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (rev (qreva x lf3)).
Lemma candidate_168: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (lfappend (rev lf3) x).
Lemma candidate_169: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (qreva lf3 x).
Lemma candidate_170: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (rev (rev x)))) (lfappend y (Cons n x)).
Lemma candidate_171: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (lfappend x Nil))) (lfappend y (Cons n x)).
Lemma candidate_172: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (rev x) (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_173: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_174: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva (rev y) (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_175: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_176: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (lfappend (rev x) (lfappend lf3 Nil)).
Lemma candidate_177: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (qreva x (rev (rev lf3))).
Lemma candidate_178: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (qreva x (lfappend lf3 Nil)).
Lemma candidate_179: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (rev (qreva lf3 x)).
Lemma candidate_180: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (lfappend (rev x) lf3).
Lemma candidate_181: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (qreva x lf3).
Lemma candidate_182: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (rev (rev x)))).
Lemma candidate_183: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_184: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (rev (lfappend (rev x) (Cons n (rev y)))).
Lemma candidate_185: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (rev (qreva x (Cons n (rev y)))).
Lemma candidate_186: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (qreva (rev y) (Cons n x)).
Lemma candidate_187: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_188: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (lfappend (rev lf3) (lfappend x Nil)).
Lemma candidate_189: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (qreva lf3 (rev (rev x))).
Lemma candidate_190: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (qreva lf3 (lfappend x Nil)).
Lemma candidate_191: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (rev (qreva x lf3)).
Lemma candidate_192: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (lfappend (rev lf3) x).
Lemma candidate_193: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (qreva lf3 x).
Lemma candidate_194: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (qreva (rev x) Nil)).
Lemma candidate_195: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (qreva x (Cons n Nil))).
Lemma candidate_196: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (lfappend (rev x) (Cons n Nil))).
Lemma candidate_197: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rev (rev x))).
Lemma candidate_198: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_199: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_200: forall (lf4 : lst), @eq lst (rev (lfappend (qreva lf4 Nil) Nil)) lf4.
Lemma candidate_201: forall (lf4 : lst), @eq lst (rev (rev (rev (rev lf4)))) lf4.
Lemma candidate_202: forall (lf4 : lst), @eq lst (rev (rev (lfappend lf4 Nil))) lf4.
Lemma candidate_203: forall (lf4 : lst), @eq lst (rev (lfappend (rev lf4) Nil)) lf4.
Lemma candidate_204: forall (lf4 : lst), @eq lst (rev (qreva lf4 Nil)) lf4.
Lemma candidate_205: forall (lf4 : lst), @eq lst (rev (rev lf4)) lf4.
Lemma candidate_206: forall (lf4 : lst), @eq lst (qreva (qreva lf4 Nil) Nil) lf4.
Lemma candidate_207: forall (lf4 : lst), @eq lst (rev (qreva lf4 Nil)) lf4.
Lemma candidate_208: forall (lf4 : lst), @eq lst (qreva (rev lf4) Nil) lf4.
Lemma candidate_209: forall (lf4 : lst), @eq lst (rev (rev lf4)) lf4.
Lemma candidate_210: forall (lf4 : lst), @eq lst (lfappend lf4 Nil) lf4.
Lemma candidate_211: forall (lf4 : lst), @eq lst (lf4) lf4.
Lemma candidate_212: forall (lf5 : lst) (lf8 : lst), @eq lst (lfappend lf5 lf8) (rev (qreva lf8 (rev lf5))).
Lemma candidate_213: forall (lf5 : lst) (lf8 : lst), @eq lst (lfappend lf5 lf8) (rev (qreva lf8 lf5)).
Lemma candidate_214: forall (lf5 : lst) (lf8 : lst), @eq lst (lfappend lf5 lf8) (lfappend (rev lf5) lf8).
Lemma candidate_215: forall (lf5 : lst) (lf8 : lst), @eq lst (lfappend lf5 lf8) (qreva (rev lf5) lf8).
Lemma candidate_216: forall (lf5 : lst) (lf8 : lst), @eq lst (lfappend lf5 lf8) (lfappend lf5 lf8).
Lemma candidate_217: forall (lf5 : lst) (lf8 : lst), @eq lst (lfappend lf5 lf8) (qreva lf5 lf8).
Lemma candidate_218: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (qreva x (lfappend lf5 lf8)) (qreva (qreva lf5 x) lf8).
Lemma candidate_219: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (qreva x (lfappend lf5 lf8)) (lfappend (qreva x lf5) lf8).
Lemma candidate_220: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (qreva x (lfappend lf5 lf8)) (lfappend (rev x) (lfappend lf5 lf8)).
Lemma candidate_221: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (qreva x (lfappend lf5 lf8)) (lfappend (rev x) (qreva lf5 lf8)).
Lemma candidate_222: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (qreva x (lfappend lf5 lf8)) (qreva x (lfappend lf5 lf8)).
Lemma candidate_223: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (qreva x (lfappend lf5 lf8)) (qreva x (qreva lf5 lf8)).
Lemma candidate_224: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (qreva (lfappend lf5 lf8) x).
Lemma candidate_225: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (qreva (qreva lf5 lf8) x).
Lemma candidate_226: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8)))   (lfappend (rev lf8) (lfappend lf5 x)).
Lemma candidate_227: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (lfappend (rev lf8) (qreva lf5 x)).
Lemma candidate_228: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (qreva lf8 (lfappend lf5 x)).
Lemma candidate_229: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (qreva lf8 (qreva lf5 x)).
Lemma candidate_230: forall (lf4 : lst), @eq lst (qreva (qreva lf4 Nil) Nil) lf4.
Lemma candidate_231: forall (lf4 : lst), @eq lst (rev (qreva lf4 Nil)) lf4.
Lemma candidate_232: forall (lf4 : lst), @eq lst (qreva (rev lf4) Nil) lf4.
Lemma candidate_233: forall (lf4 : lst), @eq lst (rev (rev lf4)) lf4.
Lemma candidate_234: forall (lf4 : lst), @eq lst (lfappend lf4 Nil) lf4.
Lemma candidate_235: forall (lf4 : lst), @eq lst (lf4) lf4.
Lemma candidate_236: forall (lf4 : lst), @eq lst (rev (lfappend (qreva lf4 Nil) Nil)) lf4.
Lemma candidate_237: forall (lf4 : lst), @eq lst (rev (rev (rev (rev lf4)))) lf4.
Lemma candidate_238: forall (lf4 : lst), @eq lst (rev (rev (lfappend lf4 Nil))) lf4.
Lemma candidate_239: forall (lf4 : lst), @eq lst (rev (lfappend (rev lf4) Nil)) lf4.
Lemma candidate_240: forall (lf4 : lst), @eq lst (rev (qreva lf4 Nil)) lf4.
Lemma candidate_241: forall (lf4 : lst), @eq lst (rev (rev lf4)) lf4.
Lemma candidate_242: forall (y : lst) (lf5 : lst), @eq lst (lfappend lf5 (rev y)) (lfappend (rev lf5) (rev y)).
Lemma candidate_243: forall (y : lst) (lf5 : lst), @eq lst (lfappend lf5 (rev y)) (qreva (rev lf5) (rev y)).
Lemma candidate_244: forall (y : lst) (lf5 : lst), @eq lst (lfappend lf5 (rev y)) (rev (lfappend y (rev lf5))).
Lemma candidate_245: forall (y : lst) (lf5 : lst), @eq lst (lfappend lf5 (rev y)) (rev (lfappend y lf5)).
Lemma candidate_246: forall (y : lst) (lf5 : lst), @eq lst (lfappend lf5 (rev y)) (lfappend lf5 (rev y)).
Lemma candidate_247: forall (y : lst) (lf5 : lst), @eq lst (lfappend lf5 (rev y)) (qreva lf5 (rev y)).
Lemma candidate_248: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y))))   (lfappend (lfappend y (rev lf5)) x).
Lemma candidate_249: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (lfappend (lfappend y lf5) x).
Lemma candidate_250: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y))))   (qreva (rev y) (lfappend lf5 x)).
Lemma candidate_251: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (qreva (rev y) (qreva lf5 x)).
Lemma candidate_252: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (lfappend y (lfappend lf5 x)).
Lemma candidate_253: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (lfappend y (qreva lf5 x)).
Lemma candidate_254: forall (y : lst), @eq lst (rev y) (lfappend (qreva y Nil) Nil).
Lemma candidate_255: forall (y : lst), @eq lst (rev y) (rev (rev (rev y))).
Lemma candidate_256: forall (y : lst), @eq lst (rev y) (rev (lfappend y Nil)).
Lemma candidate_257: forall (y : lst), @eq lst (rev y) (lfappend (rev y) Nil).
Lemma candidate_258: forall (y : lst), @eq lst (rev y) (qreva y Nil).
Lemma candidate_259: forall (y : lst), @eq lst (rev y) (rev y).
Lemma candidate_260: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (qreva x (lfappend lf5 (rev y))) (rev (lfappend y (lfappend lf5 x))).
Lemma candidate_261: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (qreva x (lfappend lf5 (rev y))) (rev (lfappend y (qreva lf5 x))).
Lemma candidate_262: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (qreva x (lfappend lf5 (rev y)))   (lfappend (rev x) (lfappend lf5 (rev y))).
Lemma candidate_263: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (qreva x (lfappend lf5 (rev y)))   (lfappend (rev x) (qreva lf5 (rev y))).
Lemma candidate_264: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (qreva x (lfappend lf5 (rev y))) (qreva x (lfappend lf5 (rev y))).
Lemma candidate_265: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (qreva x (lfappend lf5 (rev y))) (qreva x (qreva lf5 (rev y))).
Lemma candidate_266: forall (lf4 : lst), @eq lst (qreva (qreva lf4 Nil) Nil) lf4.
Lemma candidate_267: forall (lf4 : lst), @eq lst (rev (qreva lf4 Nil)) lf4.
Lemma candidate_268: forall (lf4 : lst), @eq lst (qreva (rev lf4) Nil) lf4.
Lemma candidate_269: forall (lf4 : lst), @eq lst (rev (rev lf4)) lf4.
Lemma candidate_270: forall (lf4 : lst), @eq lst (lfappend lf4 Nil) lf4.
Lemma candidate_271: forall (lf4 : lst), @eq lst (lf4) lf4.
Lemma candidate_272: forall (lf4 : lst), @eq lst (rev (lfappend (qreva lf4 Nil) Nil)) lf4.
Lemma candidate_273: forall (lf4 : lst), @eq lst (rev (rev (rev (rev lf4)))) lf4.
Lemma candidate_274: forall (lf4 : lst), @eq lst (rev (rev (lfappend lf4 Nil))) lf4.
Lemma candidate_275: forall (lf4 : lst), @eq lst (rev (lfappend (rev lf4) Nil)) lf4.
Lemma candidate_276: forall (lf4 : lst), @eq lst (rev (qreva lf4 Nil)) lf4.
Lemma candidate_277: forall (lf4 : lst), @eq lst (rev (rev lf4)) lf4.
Lemma candidate_278: forall (lf6 : lst), @eq lst (rev lf6) (qreva (rev lf6) Nil).
Lemma candidate_279: forall (lf6 : lst), @eq lst (rev lf6) (rev (rev lf6)).
Lemma candidate_280: forall (lf6 : lst), @eq lst (rev lf6) (lfappend lf6 Nil).
Lemma candidate_281: forall (lf6 : lst), @eq lst (rev lf6) (qreva lf6 Nil).
Lemma candidate_282: forall (lf6 : lst), @eq lst (rev lf6) (rev lf6).
Lemma candidate_283: forall (lf6 : lst), @eq lst (rev lf6) (lf6).
Lemma candidate_284: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (qreva (qreva lf6 lf8) x).
Lemma candidate_285: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (lfappend (qreva lf8 lf6) x).
Lemma candidate_286: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8)))   (lfappend (rev lf8) (lfappend lf6 x)).
Lemma candidate_287: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8)))   (lfappend (rev lf8) (qreva lf6 x)).
Lemma candidate_288: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (qreva lf8 (lfappend lf6 x)).
Lemma candidate_289: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (qreva lf8 (qreva lf6 x)).
Lemma candidate_290: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) lf8)) (qreva (qreva lf6 x) lf8).
Lemma candidate_291: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) lf8)) (lfappend (qreva x lf6) lf8).
Lemma candidate_292: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) lf8))   (lfappend (rev x) (lfappend lf6 lf8)).
Lemma candidate_293: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) lf8)) (lfappend (rev x) (qreva lf6 lf8)).
Lemma candidate_294: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) lf8)) (qreva x (lfappend lf6 lf8)).
Lemma candidate_295: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) lf8)) (qreva x (qreva lf6 lf8)).
Lemma candidate_296: forall (lf8 : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) lf8) (rev (qreva lf8 (rev lf6))).
Lemma candidate_297: forall (lf8 : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) lf8) (rev (qreva lf8 lf6)).
Lemma candidate_298: forall (lf8 : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) lf8) (lfappend (rev lf6) lf8).
Lemma candidate_299: forall (lf8 : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) lf8) (qreva (rev lf6) lf8).
Lemma candidate_300: forall (lf8 : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) lf8) (lfappend lf6 lf8).
Lemma candidate_301: forall (lf8 : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) lf8) (qreva lf6 lf8).
Lemma candidate_302: forall (lf4 : lst), @eq lst (qreva (qreva lf4 Nil) Nil) lf4.
Lemma candidate_303: forall (lf4 : lst), @eq lst (rev (qreva lf4 Nil)) lf4.
Lemma candidate_304: forall (lf4 : lst), @eq lst (qreva (rev lf4) Nil) lf4.
Lemma candidate_305: forall (lf4 : lst), @eq lst (rev (rev lf4)) lf4.
Lemma candidate_306: forall (lf4 : lst), @eq lst (lfappend lf4 Nil) lf4.
Lemma candidate_307: forall (lf4 : lst), @eq lst (lf4) lf4.
Lemma candidate_308: forall (lf4 : lst), @eq lst (rev (lfappend (qreva lf4 Nil) Nil)) lf4.
Lemma candidate_309: forall (lf4 : lst), @eq lst (rev (rev (rev (rev lf4)))) lf4.
Lemma candidate_310: forall (lf4 : lst), @eq lst (rev (rev (lfappend lf4 Nil))) lf4.
Lemma candidate_311: forall (lf4 : lst), @eq lst (rev (lfappend (rev lf4) Nil)) lf4.
Lemma candidate_312: forall (lf4 : lst), @eq lst (rev (qreva lf4 Nil)) lf4.
Lemma candidate_313: forall (lf4 : lst), @eq lst (rev (rev lf4)) lf4.
Lemma candidate_314: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (Cons n (qreva lf9 Nil)).
Lemma candidate_315: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (lfappend (rev (rev lf9)) (Cons n Nil)).
Lemma candidate_316: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (lfappend (rev lf9) (Cons n Nil)).
Lemma candidate_317: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (Cons n (rev lf9)).
Lemma candidate_318: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (Cons n lf9).
Lemma candidate_319: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (Cons n Nil).
Lemma candidate_320: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (qreva lf8 (Cons n (lfappend x lf9))).
Lemma candidate_321: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (qreva lf8 (Cons n (lfappend x Nil))).
Lemma candidate_322: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (rev (lfappend (rev x) (Cons n lf8))).
Lemma candidate_323: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (rev (qreva x (Cons n lf8))).
Lemma candidate_324: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (lfappend (rev lf8) (Cons n x)).
Lemma candidate_325: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (qreva lf8 (Cons n x)).
Lemma candidate_326: forall (n : natural) (lf9 : lst) (lf8 : lst), @eq lst (lfappend (rev (Cons n lf9)) lf8) (lfappend lf9 (Cons n lf8)).
Lemma candidate_327: forall (n : natural) (lf9 : lst) (lf8 : lst), @eq lst (lfappend (rev (Cons n lf9)) lf8) (qreva lf9 (Cons n lf8)).
Lemma candidate_328: forall (n : natural) (lf9 : lst) (lf8 : lst), @eq lst (lfappend (rev (Cons n lf9)) lf8) (Cons n (lfappend lf9 lf8)).
Lemma candidate_329: forall (n : natural) (lf9 : lst) (lf8 : lst), @eq lst (lfappend (rev (Cons n lf9)) lf8) (Cons n (qreva lf9 lf8)).
Lemma candidate_330: forall (n : natural) (lf9 : lst) (lf8 : lst), @eq lst (lfappend (rev (Cons n lf9)) lf8) (Cons n (lfappend lf8 Nil)).
Lemma candidate_331: forall (n : natural) (lf9 : lst) (lf8 : lst), @eq lst (lfappend (rev (Cons n lf9)) lf8) (Cons n lf8).
Lemma candidate_332: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (Cons n (qreva lf9 Nil)).
Lemma candidate_333: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (lfappend (rev (rev lf9)) (Cons n Nil)).
Lemma candidate_334: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (lfappend (rev lf9) (Cons n Nil)).
Lemma candidate_335: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (Cons n (rev lf9)).
Lemma candidate_336: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (Cons n lf9).
Lemma candidate_337: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (Cons n Nil).
Lemma candidate_338: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) lf8))   (qreva x (Cons n (qreva lf9 lf8))).
Lemma candidate_339: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) lf8))   (qreva x (Cons n (lfappend lf8 Nil))).
Lemma candidate_340: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) lf8))   (rev (lfappend (rev lf8) (Cons n x))).
Lemma candidate_341: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) lf8))   (rev (qreva lf8 (Cons n x))).
Lemma candidate_342: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) lf8))   (lfappend (rev x) (Cons n lf8)).
Lemma candidate_343: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) lf8)) (qreva x (Cons n lf8)).
Lemma candidate_344: forall (lf4 : lst), @eq lst (rev (lfappend (qreva lf4 Nil) Nil)) lf4.
Lemma candidate_345: forall (lf4 : lst), @eq lst (rev (rev (rev (rev lf4)))) lf4.
Lemma candidate_346: forall (lf4 : lst), @eq lst (rev (rev (lfappend lf4 Nil))) lf4.
Lemma candidate_347: forall (lf4 : lst), @eq lst (rev (lfappend (rev lf4) Nil)) lf4.
Lemma candidate_348: forall (lf4 : lst), @eq lst (rev (qreva lf4 Nil)) lf4.
Lemma candidate_349: forall (lf4 : lst), @eq lst (rev (rev lf4)) lf4.
Lemma candidate_350: forall (lf4 : lst), @eq lst (qreva (qreva lf4 Nil) Nil) lf4.
Lemma candidate_351: forall (lf4 : lst), @eq lst (rev (qreva lf4 Nil)) lf4.
Lemma candidate_352: forall (lf4 : lst), @eq lst (qreva (rev lf4) Nil) lf4.
Lemma candidate_353: forall (lf4 : lst), @eq lst (rev (rev lf4)) lf4.
Lemma candidate_354: forall (lf4 : lst), @eq lst (lfappend lf4 Nil) lf4.
Lemma candidate_355: forall (lf4 : lst), @eq lst (lf4) lf4.
Lemma candidate_356: forall (lf6 : lst), @eq lst (rev lf6) (qreva (rev lf6) Nil).
Lemma candidate_357: forall (lf6 : lst), @eq lst (rev lf6) (rev (rev lf6)).
Lemma candidate_358: forall (lf6 : lst), @eq lst (rev lf6) (lfappend lf6 Nil).
Lemma candidate_359: forall (lf6 : lst), @eq lst (rev lf6) (qreva lf6 Nil).
Lemma candidate_360: forall (lf6 : lst), @eq lst (rev lf6) (rev lf6).
Lemma candidate_361: forall (lf6 : lst), @eq lst (rev lf6) (lf6).
Lemma candidate_362: forall (y : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) (rev y)) (lfappend (rev lf6) (rev y)).
Lemma candidate_363: forall (y : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) (rev y)) (qreva (rev lf6) (rev y)).
Lemma candidate_364: forall (y : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) (rev y)) (rev (lfappend y (rev lf6))).
Lemma candidate_365: forall (y : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) (rev y)) (rev (lfappend y lf6)).
Lemma candidate_366: forall (y : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) (rev y)) (lfappend lf6 (rev y)).
Lemma candidate_367: forall (y : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) (rev y)) (qreva lf6 (rev y)).
Lemma candidate_368: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) (rev y)))   (rev (lfappend y (lfappend lf6 x))).
Lemma candidate_369: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) (rev y)))   (rev (lfappend y (qreva lf6 x))).
Lemma candidate_370: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) (rev y)))   (lfappend (rev x) (lfappend lf6 (rev y))).
Lemma candidate_371: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) (rev y)))   (lfappend (rev x) (qreva lf6 (rev y))).
Lemma candidate_372: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) (rev y)))   (qreva x (lfappend lf6 (rev y))).
Lemma candidate_373: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) (rev y))) (qreva x (qreva lf6 (rev y))).
Lemma candidate_374: forall (y : lst), @eq lst (rev y) (lfappend (qreva y Nil) Nil).
Lemma candidate_375: forall (y : lst), @eq lst (rev y) (rev (rev (rev y))).
Lemma candidate_376: forall (y : lst), @eq lst (rev y) (rev (lfappend y Nil)).
Lemma candidate_377: forall (y : lst), @eq lst (rev y) (lfappend (rev y) Nil).
Lemma candidate_378: forall (y : lst), @eq lst (rev y) (qreva y Nil).
Lemma candidate_379: forall (y : lst), @eq lst (rev y) (rev y).
Lemma candidate_380: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (lfappend (lfappend y (rev lf6)) x).
Lemma candidate_381: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (lfappend (lfappend y lf6) x).
Lemma candidate_382: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (qreva (rev y) (lfappend lf6 x)).
Lemma candidate_383: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (qreva (rev y) (qreva lf6 x)).
Lemma candidate_384: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (lfappend y (lfappend lf6 x)).
Lemma candidate_385: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (lfappend y (qreva lf6 x)).
Lemma candidate_386: forall (lf4 : lst), @eq lst (qreva (qreva lf4 Nil) Nil) lf4.
Lemma candidate_387: forall (lf4 : lst), @eq lst (rev (qreva lf4 Nil)) lf4.
Lemma candidate_388: forall (lf4 : lst), @eq lst (qreva (rev lf4) Nil) lf4.
Lemma candidate_389: forall (lf4 : lst), @eq lst (rev (rev lf4)) lf4.
Lemma candidate_390: forall (lf4 : lst), @eq lst (lfappend lf4 Nil) lf4.
Lemma candidate_391: forall (lf4 : lst), @eq lst (lf4) lf4.
Lemma candidate_392: forall (lf4 : lst), @eq lst (rev (lfappend (qreva lf4 Nil) Nil)) lf4.
Lemma candidate_393: forall (lf4 : lst), @eq lst (rev (rev (rev (rev lf4)))) lf4.
Lemma candidate_394: forall (lf4 : lst), @eq lst (rev (rev (lfappend lf4 Nil))) lf4.
Lemma candidate_395: forall (lf4 : lst), @eq lst (rev (lfappend (rev lf4) Nil)) lf4.
Lemma candidate_396: forall (lf4 : lst), @eq lst (rev (qreva lf4 Nil)) lf4.
Lemma candidate_397: forall (lf4 : lst), @eq lst (rev (rev lf4)) lf4.
Lemma candidate_398: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (Cons n (qreva lf9 Nil)).
Lemma candidate_399: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (lfappend (rev (rev lf9)) (Cons n Nil)).
Lemma candidate_400: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (lfappend (rev lf9) (Cons n Nil)).
Lemma candidate_401: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (Cons n (rev lf9)).
Lemma candidate_402: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (Cons n lf9).
Lemma candidate_403: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (Cons n Nil).
Lemma candidate_404: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (lfappend y (Cons n (lfappend x lf9))).
Lemma candidate_405: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_406: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (rev (lfappend (rev x) (Cons n (rev y)))).
Lemma candidate_407: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (rev (qreva x (Cons n (rev y)))).
Lemma candidate_408: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (qreva (rev y) (Cons n x)).
Lemma candidate_409: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (lfappend y (Cons n x)).
Lemma candidate_410: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) (rev y)))   (qreva x (Cons n (qreva y lf9))).
Lemma candidate_411: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) (rev y)))   (qreva x (Cons n (qreva y Nil))).
Lemma candidate_412: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) (rev y)))   (rev (qreva (rev y) (Cons n x))).
Lemma candidate_413: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) (rev y)))   (rev (lfappend y (Cons n x))).
Lemma candidate_414: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) (rev y)))   (lfappend (rev x) (Cons n (rev y))).
Lemma candidate_415: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) (rev y)))   (qreva x (Cons n (rev y))).
Lemma candidate_416: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (Cons n (qreva lf9 Nil)).
Lemma candidate_417: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (lfappend (rev (rev lf9)) (Cons n Nil)).
Lemma candidate_418: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (lfappend (rev lf9) (Cons n Nil)).
Lemma candidate_419: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (Cons n (rev lf9)).
Lemma candidate_420: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (Cons n lf9).
Lemma candidate_421: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (Cons n Nil).
Lemma candidate_422: forall (n : natural) (y : lst) (lf9 : lst), @eq lst (lfappend (rev (Cons n lf9)) (rev y)) (Cons n (lfappend lf9 (rev y))).
Lemma candidate_423: forall (n : natural) (y : lst) (lf9 : lst), @eq lst (lfappend (rev (Cons n lf9)) (rev y)) (Cons n (qreva lf9 (rev y))).
Lemma candidate_424: forall (n : natural) (y : lst) (lf9 : lst), @eq lst (lfappend (rev (Cons n lf9)) (rev y)) (Cons n (qreva y (rev lf9))).
Lemma candidate_425: forall (n : natural) (y : lst) (lf9 : lst), @eq lst (lfappend (rev (Cons n lf9)) (rev y)) (Cons n (qreva y lf9)).
Lemma candidate_426: forall (n : natural) (y : lst) (lf9 : lst), @eq lst (lfappend (rev (Cons n lf9)) (rev y)) (Cons n (qreva y Nil)).
Lemma candidate_427: forall (n : natural) (y : lst) (lf9 : lst), @eq lst (lfappend (rev (Cons n lf9)) (rev y)) (Cons n (rev y)).
Lemma candidate_428: forall (y : lst), @eq lst (rev y) (lfappend (qreva y Nil) Nil).
Lemma candidate_429: forall (y : lst), @eq lst (rev y) (rev (rev (rev y))).
Lemma candidate_430: forall (y : lst), @eq lst (rev y) (rev (lfappend y Nil)).
Lemma candidate_431: forall (y : lst), @eq lst (rev y) (lfappend (rev y) Nil).
Lemma candidate_432: forall (y : lst), @eq lst (rev y) (qreva y Nil).
Lemma candidate_433: forall (y : lst), @eq lst (rev y) (rev y).
Lemma candidate_434: forall (lf4 : lst), @eq lst (rev (lfappend (qreva lf4 Nil) Nil)) lf4.
Lemma candidate_435: forall (lf4 : lst), @eq lst (rev (rev (rev (rev lf4)))) lf4.
Lemma candidate_436: forall (lf4 : lst), @eq lst (rev (rev (lfappend lf4 Nil))) lf4.
Lemma candidate_437: forall (lf4 : lst), @eq lst (rev (lfappend (rev lf4) Nil)) lf4.
Lemma candidate_438: forall (lf4 : lst), @eq lst (rev (qreva lf4 Nil)) lf4.
Lemma candidate_439: forall (lf4 : lst), @eq lst (rev (rev lf4)) lf4.
Lemma candidate_440: forall (n : natural) (lf4 : lst) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n (Nil))) lf8))) lf4.
Lemma candidate_441: forall (lf4 : lst), @eq lst (qreva (qreva lf4 Nil) Nil) lf4.
Lemma candidate_442: forall (lf4 : lst), @eq lst (rev (qreva lf4 Nil)) lf4.
Lemma candidate_443: forall (lf4 : lst), @eq lst (qreva (rev lf4) Nil) lf4.
Lemma candidate_444: forall (lf4 : lst), @eq lst (rev (rev lf4)) lf4.
Lemma candidate_445: forall (lf4 : lst), @eq lst (lfappend lf4 Nil) lf4.
Lemma candidate_446: forall (lf4 : lst), @eq lst (lf4) lf4.
Lemma candidate_447: forall (n : natural) (lf8 : lst), @eq lst (lfappend (rev (Cons n Nil)) lf8) (Cons n (qreva (rev lf8) Nil)).
Lemma candidate_448: forall (n : natural) (lf8 : lst), @eq lst (lfappend (rev (Cons n Nil)) lf8) (rev (qreva lf8 (Cons n Nil))).
Lemma candidate_449: forall (n : natural) (lf8 : lst), @eq lst (lfappend (rev (Cons n Nil)) lf8)   (rev (lfappend (rev lf8) (Cons n Nil))).
Lemma candidate_450: forall (n : natural) (lf8 : lst), @eq lst (lfappend (rev (Cons n Nil)) lf8) (Cons n (rev (rev lf8))).
Lemma candidate_451: forall (n : natural) (lf8 : lst), @eq lst (lfappend (rev (Cons n Nil)) lf8) (Cons n (lfappend lf8 Nil)).
Lemma candidate_452: forall (n : natural) (lf8 : lst), @eq lst (lfappend (rev (Cons n Nil)) lf8) (Cons n lf8).
Lemma candidate_453: forall (n : natural), @eq lst (rev (Cons n Nil)) (Cons n Nil).
Lemma candidate_454: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) lf8))   (qreva x (Cons n (rev (rev lf8)))).
Lemma candidate_455: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) lf8))   (qreva x (Cons n (lfappend lf8 Nil))).
Lemma candidate_456: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) lf8))   (rev (lfappend (rev lf8) (Cons n x))).
Lemma candidate_457: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) lf8))   (rev (qreva lf8 (Cons n x))).
Lemma candidate_458: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) lf8))   (lfappend (rev x) (Cons n lf8)).
Lemma candidate_459: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) lf8)) (qreva x (Cons n lf8)).
Lemma candidate_460: forall (n : natural), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_461: @eq lst Nil (Nil).
Lemma candidate_462: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (qreva lf8 (Cons n (rev (rev x)))).
Lemma candidate_463: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (qreva lf8 (Cons n (lfappend x Nil))).
Lemma candidate_464: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (rev (lfappend (rev x) (Cons n lf8))).
Lemma candidate_465: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (rev (qreva x (Cons n lf8))).
Lemma candidate_466: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (lfappend (rev lf8) (Cons n x)).
Lemma candidate_467: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (qreva lf8 (Cons n x)).
Lemma candidate_468: forall (lf4 : lst), @eq lst (qreva (qreva lf4 Nil) Nil) lf4.
Lemma candidate_469: forall (lf4 : lst), @eq lst (rev (qreva lf4 Nil)) lf4.
Lemma candidate_470: forall (lf4 : lst), @eq lst (qreva (rev lf4) Nil) lf4.
Lemma candidate_471: forall (lf4 : lst), @eq lst (rev (rev lf4)) lf4.
Lemma candidate_472: forall (lf4 : lst), @eq lst (lfappend lf4 Nil) lf4.
Lemma candidate_473: forall (lf4 : lst), @eq lst (lf4) lf4.
Lemma candidate_474: forall (lf4 : lst), @eq lst (rev (lfappend (qreva lf4 Nil) Nil)) lf4.
Lemma candidate_475: forall (lf4 : lst), @eq lst (rev (rev (rev (rev lf4)))) lf4.
Lemma candidate_476: forall (lf4 : lst), @eq lst (rev (rev (lfappend lf4 Nil))) lf4.
Lemma candidate_477: forall (lf4 : lst), @eq lst (rev (lfappend (rev lf4) Nil)) lf4.
Lemma candidate_478: forall (lf4 : lst), @eq lst (rev (qreva lf4 Nil)) lf4.
Lemma candidate_479: forall (lf4 : lst), @eq lst (rev (rev lf4)) lf4.
Lemma candidate_480: forall (n : natural) (y : lst) (lf4 : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n (Nil))) (rev y)))) lf4.
Lemma candidate_481: forall (n : natural), @eq lst (rev (Cons n Nil)) (Cons n Nil).
Lemma candidate_482: forall (n : natural) (y : lst), @eq lst (lfappend (rev (Cons n Nil)) (rev y))   (rev (qreva (rev y) (Cons n Nil))).
Lemma candidate_483: forall (n : natural) (y : lst), @eq lst (lfappend (rev (Cons n Nil)) (rev y)) (rev (lfappend y (Cons n Nil))).
Lemma candidate_484: forall (n : natural) (y : lst), @eq lst (lfappend (rev (Cons n Nil)) (rev y))   (rev (lfappend (rev (rev y)) (Cons n Nil))).
Lemma candidate_485: forall (n : natural) (y : lst), @eq lst (lfappend (rev (Cons n Nil)) (rev y)) (Cons n (lfappend (rev y) Nil)).
Lemma candidate_486: forall (n : natural) (y : lst), @eq lst (lfappend (rev (Cons n Nil)) (rev y)) (Cons n (qreva y Nil)).
Lemma candidate_487: forall (n : natural) (y : lst), @eq lst (lfappend (rev (Cons n Nil)) (rev y)) (Cons n (rev y)).
Lemma candidate_488: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))   (lfappend y (Cons n (rev (rev x)))).
Lemma candidate_489: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_490: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))   (rev (lfappend (rev x) (Cons n (rev y)))).
Lemma candidate_491: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))   (rev (qreva x (Cons n (rev y)))).
Lemma candidate_492: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))   (qreva (rev y) (Cons n x)).
Lemma candidate_493: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))   (lfappend y (Cons n x)).
Lemma candidate_494: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) (rev y)))   (lfappend (qreva x Nil) (Cons n (rev y))).
Lemma candidate_495: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) (rev y)))   (qreva x (Cons n (qreva y Nil))).
Lemma candidate_496: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) (rev y)))   (rev (qreva (rev y) (Cons n x))).
Lemma candidate_497: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) (rev y)))   (rev (lfappend y (Cons n x))).
Lemma candidate_498: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) (rev y)))   (lfappend (rev x) (Cons n (rev y))).
Lemma candidate_499: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) (rev y)))   (qreva x (Cons n (rev y))).
Lemma candidate_500: forall (n : natural), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_501: forall (y : lst), @eq lst (rev y) (lfappend (qreva y Nil) Nil).
Lemma candidate_502: forall (y : lst), @eq lst (rev y) (rev (rev (rev y))).
Lemma candidate_503: forall (y : lst), @eq lst (rev y) (rev (lfappend y Nil)).
Lemma candidate_504: forall (y : lst), @eq lst (rev y) (lfappend (rev y) Nil).
Lemma candidate_505: forall (y : lst), @eq lst (rev y) (qreva y Nil).
Lemma candidate_506: forall (y : lst), @eq lst (rev y) (rev y).
Lemma candidate_507: @eq lst Nil (Nil).
Lemma candidate_508: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (qreva (lfappend lf5 lf8) x).
Lemma candidate_509: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (qreva (qreva lf5 lf8) x).
Lemma candidate_510: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8)))   (lfappend (rev lf8) (lfappend lf5 x)).
Lemma candidate_511: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (lfappend (rev lf8) (qreva lf5 x)).
Lemma candidate_512: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (qreva lf8 (lfappend lf5 x)).
Lemma candidate_513: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (qreva lf8 (qreva lf5 x)).
Lemma candidate_514: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva (lfappend y lf7) Nil)) (lfappend y lf7).
Lemma candidate_515: forall (lf7 : lst) (y : lst), @eq lst (rev (lfappend (rev lf7) (qreva y Nil))) (lfappend y lf7).
Lemma candidate_516: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva lf7 (qreva y Nil))) (lfappend y lf7).
Lemma candidate_517: forall (lf7 : lst) (y : lst), @eq lst (rev (lfappend (rev lf7) (rev y))) (lfappend y lf7).
Lemma candidate_518: forall (lf7 : lst) (y : lst), @eq lst (rev (rev (lfappend y lf7))) (lfappend y lf7).
Lemma candidate_519: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva lf7 (rev y))) (lfappend y lf7).
Lemma candidate_520: forall (lf7 : lst) (y : lst), @eq lst (qreva (rev y) (lfappend lf7 Nil)) (lfappend y lf7).
Lemma candidate_521: forall (lf7 : lst) (y : lst), @eq lst (lfappend y (rev (rev lf7))) (lfappend y lf7).
Lemma candidate_522: forall (lf7 : lst) (y : lst), @eq lst (lfappend y (lfappend lf7 Nil)) (lfappend y lf7).
Lemma candidate_523: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva lf7 (rev y))) (lfappend y lf7).
Lemma candidate_524: forall (lf7 : lst) (y : lst), @eq lst (qreva (rev y) lf7) (lfappend y lf7).
Lemma candidate_525: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y lf7).
Lemma candidate_526: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (qreva (rev y) (lfappend lf7 Nil)).
Lemma candidate_527: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y (rev (rev lf7))).
Lemma candidate_528: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y (lfappend lf7 Nil)).
Lemma candidate_529: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (rev (qreva lf7 (rev y))).
Lemma candidate_530: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (qreva (rev y) lf7).
Lemma candidate_531: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y lf7).
Lemma candidate_532: forall (lf5 : lst) (lf8 : lst), @eq lst (lfappend lf5 lf8) (rev (qreva lf8 (rev lf5))).
Lemma candidate_533: forall (lf5 : lst) (lf8 : lst), @eq lst (lfappend lf5 lf8) (rev (qreva lf8 lf5)).
Lemma candidate_534: forall (lf5 : lst) (lf8 : lst), @eq lst (lfappend lf5 lf8) (lfappend (rev lf5) lf8).
Lemma candidate_535: forall (lf5 : lst) (lf8 : lst), @eq lst (lfappend lf5 lf8) (qreva (rev lf5) lf8).
Lemma candidate_536: forall (lf5 : lst) (lf8 : lst), @eq lst (lfappend lf5 lf8) (lfappend lf5 lf8).
Lemma candidate_537: forall (lf5 : lst) (lf8 : lst), @eq lst (lfappend lf5 lf8) (qreva lf5 lf8).
Lemma candidate_538: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (qreva x (lfappend lf5 lf8)) (qreva (qreva lf5 x) lf8).
Lemma candidate_539: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (qreva x (lfappend lf5 lf8)) (lfappend (qreva x lf5) lf8).
Lemma candidate_540: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (qreva x (lfappend lf5 lf8)) (lfappend (rev x) (lfappend lf5 lf8)).
Lemma candidate_541: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (qreva x (lfappend lf5 lf8)) (lfappend (rev x) (qreva lf5 lf8)).
Lemma candidate_542: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (qreva x (lfappend lf5 lf8)) (qreva x (lfappend lf5 lf8)).
Lemma candidate_543: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (qreva x (lfappend lf5 lf8)) (qreva x (qreva lf5 lf8)).
Lemma candidate_544: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (qreva (lfappend lf5 lf8) x).
Lemma candidate_545: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (qreva (qreva lf5 lf8) x).
Lemma candidate_546: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8)))   (lfappend (rev lf8) (lfappend lf5 x)).
Lemma candidate_547: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (lfappend (rev lf8) (qreva lf5 x)).
Lemma candidate_548: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (qreva lf8 (lfappend lf5 x)).
Lemma candidate_549: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (qreva lf8 (qreva lf5 x)).
Lemma candidate_550: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y))))   (lfappend (lfappend y (rev lf5)) x).
Lemma candidate_551: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (lfappend (lfappend y lf5) x).
Lemma candidate_552: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y))))   (qreva (rev y) (lfappend lf5 x)).
Lemma candidate_553: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (qreva (rev y) (qreva lf5 x)).
Lemma candidate_554: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (lfappend y (lfappend lf5 x)).
Lemma candidate_555: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (lfappend y (qreva lf5 x)).
Lemma candidate_556: forall (lf7 : lst) (y : lst), @eq lst (qreva (rev y) (lfappend lf7 Nil)) (lfappend y lf7).
Lemma candidate_557: forall (lf7 : lst) (y : lst), @eq lst (lfappend y (rev (rev lf7))) (lfappend y lf7).
Lemma candidate_558: forall (lf7 : lst) (y : lst), @eq lst (lfappend y (lfappend lf7 Nil)) (lfappend y lf7).
Lemma candidate_559: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva lf7 (rev y))) (lfappend y lf7).
Lemma candidate_560: forall (lf7 : lst) (y : lst), @eq lst (qreva (rev y) lf7) (lfappend y lf7).
Lemma candidate_561: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y lf7).
Lemma candidate_562: forall (lf7 : lst) (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (lfappend (qreva y Nil) Nil))))   (lfappend y lf7).
Lemma candidate_563: forall (lf7 : lst) (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev (rev (rev y)))))) (lfappend y lf7).
Lemma candidate_564: forall (lf7 : lst) (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev (lfappend y Nil)))))   (lfappend y lf7).
Lemma candidate_565: forall (lf7 : lst) (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (lfappend (rev y) Nil))))   (lfappend y lf7).
Lemma candidate_566: forall (lf7 : lst) (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (qreva y Nil)))) (lfappend y lf7).
Lemma candidate_567: forall (lf7 : lst) (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (lfappend y lf7).
Lemma candidate_568: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva (lfappend y lf7) Nil)) (lfappend y lf7).
Lemma candidate_569: forall (lf7 : lst) (y : lst), @eq lst (rev (lfappend (rev lf7) (qreva y Nil))) (lfappend y lf7).
Lemma candidate_570: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva lf7 (qreva y Nil))) (lfappend y lf7).
Lemma candidate_571: forall (lf7 : lst) (y : lst), @eq lst (rev (lfappend (rev lf7) (rev y))) (lfappend y lf7).
Lemma candidate_572: forall (lf7 : lst) (y : lst), @eq lst (rev (rev (lfappend y lf7))) (lfappend y lf7).
Lemma candidate_573: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva lf7 (rev y))) (lfappend y lf7).
Lemma candidate_574: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (qreva (rev y) (lfappend lf7 Nil)).
Lemma candidate_575: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y (rev (rev lf7))).
Lemma candidate_576: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y (lfappend lf7 Nil)).
Lemma candidate_577: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (rev (qreva lf7 (rev y))).
Lemma candidate_578: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (qreva (rev y) lf7).
Lemma candidate_579: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y lf7).
Lemma candidate_580: forall (y : lst) (lf5 : lst), @eq lst (lfappend lf5 (rev y)) (lfappend (rev lf5) (rev y)).
Lemma candidate_581: forall (y : lst) (lf5 : lst), @eq lst (lfappend lf5 (rev y)) (qreva (rev lf5) (rev y)).
Lemma candidate_582: forall (y : lst) (lf5 : lst), @eq lst (lfappend lf5 (rev y)) (rev (lfappend y (rev lf5))).
Lemma candidate_583: forall (y : lst) (lf5 : lst), @eq lst (lfappend lf5 (rev y)) (rev (lfappend y lf5)).
Lemma candidate_584: forall (y : lst) (lf5 : lst), @eq lst (lfappend lf5 (rev y)) (lfappend lf5 (rev y)).
Lemma candidate_585: forall (y : lst) (lf5 : lst), @eq lst (lfappend lf5 (rev y)) (qreva lf5 (rev y)).
Lemma candidate_586: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y))))   (lfappend (lfappend y (rev lf5)) x).
Lemma candidate_587: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (lfappend (lfappend y lf5) x).
Lemma candidate_588: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y))))   (qreva (rev y) (lfappend lf5 x)).
Lemma candidate_589: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (qreva (rev y) (qreva lf5 x)).
Lemma candidate_590: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (lfappend y (lfappend lf5 x)).
Lemma candidate_591: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (lfappend y (qreva lf5 x)).
Lemma candidate_592: forall (y : lst), @eq lst (rev y) (lfappend (qreva y Nil) Nil).
Lemma candidate_593: forall (y : lst), @eq lst (rev y) (rev (rev (rev y))).
Lemma candidate_594: forall (y : lst), @eq lst (rev y) (rev (lfappend y Nil)).
Lemma candidate_595: forall (y : lst), @eq lst (rev y) (lfappend (rev y) Nil).
Lemma candidate_596: forall (y : lst), @eq lst (rev y) (qreva y Nil).
Lemma candidate_597: forall (y : lst), @eq lst (rev y) (rev y).
Lemma candidate_598: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (qreva x (lfappend lf5 (rev y))) (rev (lfappend y (lfappend lf5 x))).
Lemma candidate_599: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (qreva x (lfappend lf5 (rev y))) (rev (lfappend y (qreva lf5 x))).
Lemma candidate_600: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (qreva x (lfappend lf5 (rev y)))   (lfappend (rev x) (lfappend lf5 (rev y))).
Lemma candidate_601: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (qreva x (lfappend lf5 (rev y)))   (lfappend (rev x) (qreva lf5 (rev y))).
Lemma candidate_602: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (qreva x (lfappend lf5 (rev y))) (qreva x (lfappend lf5 (rev y))).
Lemma candidate_603: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (qreva x (lfappend lf5 (rev y))) (qreva x (qreva lf5 (rev y))).
Lemma candidate_604: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (qreva (qreva lf6 lf8) x).
Lemma candidate_605: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (lfappend (qreva lf8 lf6) x).
Lemma candidate_606: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8)))   (lfappend (rev lf8) (lfappend lf6 x)).
Lemma candidate_607: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8)))   (lfappend (rev lf8) (qreva lf6 x)).
Lemma candidate_608: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (qreva lf8 (lfappend lf6 x)).
Lemma candidate_609: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (qreva lf8 (qreva lf6 x)).
Lemma candidate_610: forall (lf7 : lst) (y : lst), @eq lst (qreva (rev y) (lfappend lf7 Nil)) (lfappend y lf7).
Lemma candidate_611: forall (lf7 : lst) (y : lst), @eq lst (lfappend y (rev (rev lf7))) (lfappend y lf7).
Lemma candidate_612: forall (lf7 : lst) (y : lst), @eq lst (lfappend y (lfappend lf7 Nil)) (lfappend y lf7).
Lemma candidate_613: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva lf7 (rev y))) (lfappend y lf7).
Lemma candidate_614: forall (lf7 : lst) (y : lst), @eq lst (qreva (rev y) lf7) (lfappend y lf7).
Lemma candidate_615: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y lf7).
Lemma candidate_616: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva (lfappend y lf7) Nil)) (lfappend y lf7).
Lemma candidate_617: forall (lf7 : lst) (y : lst), @eq lst (rev (lfappend (rev lf7) (qreva y Nil))) (lfappend y lf7).
Lemma candidate_618: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva lf7 (qreva y Nil))) (lfappend y lf7).
Lemma candidate_619: forall (lf7 : lst) (y : lst), @eq lst (rev (lfappend (rev lf7) (rev y))) (lfappend y lf7).
Lemma candidate_620: forall (lf7 : lst) (y : lst), @eq lst (rev (rev (lfappend y lf7))) (lfappend y lf7).
Lemma candidate_621: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva lf7 (rev y))) (lfappend y lf7).
Lemma candidate_622: forall (lf6 : lst), @eq lst (rev lf6) (qreva (rev lf6) Nil).
Lemma candidate_623: forall (lf6 : lst), @eq lst (rev lf6) (rev (rev lf6)).
Lemma candidate_624: forall (lf6 : lst), @eq lst (rev lf6) (lfappend lf6 Nil).
Lemma candidate_625: forall (lf6 : lst), @eq lst (rev lf6) (qreva lf6 Nil).
Lemma candidate_626: forall (lf6 : lst), @eq lst (rev lf6) (rev lf6).
Lemma candidate_627: forall (lf6 : lst), @eq lst (rev lf6) (lf6).
Lemma candidate_628: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (qreva (rev y) (lfappend lf7 Nil)).
Lemma candidate_629: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y (rev (rev lf7))).
Lemma candidate_630: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y (lfappend lf7 Nil)).
Lemma candidate_631: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (rev (qreva lf7 (rev y))).
Lemma candidate_632: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (qreva (rev y) lf7).
Lemma candidate_633: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y lf7).
Lemma candidate_634: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (qreva (qreva lf6 lf8) x).
Lemma candidate_635: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (lfappend (qreva lf8 lf6) x).
Lemma candidate_636: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8)))   (lfappend (rev lf8) (lfappend lf6 x)).
Lemma candidate_637: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8)))   (lfappend (rev lf8) (qreva lf6 x)).
Lemma candidate_638: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (qreva lf8 (lfappend lf6 x)).
Lemma candidate_639: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (qreva lf8 (qreva lf6 x)).
Lemma candidate_640: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) lf8)) (qreva (qreva lf6 x) lf8).
Lemma candidate_641: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) lf8)) (lfappend (qreva x lf6) lf8).
Lemma candidate_642: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) lf8))   (lfappend (rev x) (lfappend lf6 lf8)).
Lemma candidate_643: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) lf8)) (lfappend (rev x) (qreva lf6 lf8)).
Lemma candidate_644: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) lf8)) (qreva x (lfappend lf6 lf8)).
Lemma candidate_645: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) lf8)) (qreva x (qreva lf6 lf8)).
Lemma candidate_646: forall (lf8 : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) lf8) (rev (qreva lf8 (rev lf6))).
Lemma candidate_647: forall (lf8 : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) lf8) (rev (qreva lf8 lf6)).
Lemma candidate_648: forall (lf8 : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) lf8) (lfappend (rev lf6) lf8).
Lemma candidate_649: forall (lf8 : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) lf8) (qreva (rev lf6) lf8).
Lemma candidate_650: forall (lf8 : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) lf8) (lfappend lf6 lf8).
Lemma candidate_651: forall (lf8 : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) lf8) (qreva lf6 lf8).
Lemma candidate_652: forall (lf7 : lst) (y : lst), @eq lst (qreva (rev y) (lfappend lf7 Nil)) (lfappend y lf7).
Lemma candidate_653: forall (lf7 : lst) (y : lst), @eq lst (lfappend y (rev (rev lf7))) (lfappend y lf7).
Lemma candidate_654: forall (lf7 : lst) (y : lst), @eq lst (lfappend y (lfappend lf7 Nil)) (lfappend y lf7).
Lemma candidate_655: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva lf7 (rev y))) (lfappend y lf7).
Lemma candidate_656: forall (lf7 : lst) (y : lst), @eq lst (qreva (rev y) lf7) (lfappend y lf7).
Lemma candidate_657: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y lf7).
Lemma candidate_658: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (qreva lf8 (Cons n (lfappend x lf9))).
Lemma candidate_659: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (qreva lf8 (Cons n (lfappend x Nil))).
Lemma candidate_660: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (rev (lfappend (rev x) (Cons n lf8))).
Lemma candidate_661: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (rev (qreva x (Cons n lf8))).
Lemma candidate_662: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (lfappend (rev lf8) (Cons n x)).
Lemma candidate_663: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (qreva lf8 (Cons n x)).
Lemma candidate_664: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva (lfappend y lf7) Nil)) (lfappend y lf7).
Lemma candidate_665: forall (lf7 : lst) (y : lst), @eq lst (rev (lfappend (rev lf7) (qreva y Nil))) (lfappend y lf7).
Lemma candidate_666: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva lf7 (qreva y Nil))) (lfappend y lf7).
Lemma candidate_667: forall (lf7 : lst) (y : lst), @eq lst (rev (lfappend (rev lf7) (rev y))) (lfappend y lf7).
Lemma candidate_668: forall (lf7 : lst) (y : lst), @eq lst (rev (rev (lfappend y lf7))) (lfappend y lf7).
Lemma candidate_669: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva lf7 (rev y))) (lfappend y lf7).
Lemma candidate_670: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (Cons n (qreva lf9 Nil)).
Lemma candidate_671: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (lfappend (rev (rev lf9)) (Cons n Nil)).
Lemma candidate_672: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (lfappend (rev lf9) (Cons n Nil)).
Lemma candidate_673: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (Cons n (rev lf9)).
Lemma candidate_674: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (Cons n lf9).
Lemma candidate_675: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (Cons n Nil).
Lemma candidate_676: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (qreva lf8 (Cons n (lfappend x lf9))).
Lemma candidate_677: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (qreva lf8 (Cons n (lfappend x Nil))).
Lemma candidate_678: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (rev (lfappend (rev x) (Cons n lf8))).
Lemma candidate_679: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (rev (qreva x (Cons n lf8))).
Lemma candidate_680: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (lfappend (rev lf8) (Cons n x)).
Lemma candidate_681: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (qreva lf8 (Cons n x)).
Lemma candidate_682: forall (n : natural) (lf9 : lst) (lf8 : lst), @eq lst (lfappend (rev (Cons n lf9)) lf8) (lfappend lf9 (Cons n lf8)).
Lemma candidate_683: forall (n : natural) (lf9 : lst) (lf8 : lst), @eq lst (lfappend (rev (Cons n lf9)) lf8) (qreva lf9 (Cons n lf8)).
Lemma candidate_684: forall (n : natural) (lf9 : lst) (lf8 : lst), @eq lst (lfappend (rev (Cons n lf9)) lf8) (Cons n (lfappend lf9 lf8)).
Lemma candidate_685: forall (n : natural) (lf9 : lst) (lf8 : lst), @eq lst (lfappend (rev (Cons n lf9)) lf8) (Cons n (qreva lf9 lf8)).
Lemma candidate_686: forall (n : natural) (lf9 : lst) (lf8 : lst), @eq lst (lfappend (rev (Cons n lf9)) lf8) (Cons n (lfappend lf8 Nil)).
Lemma candidate_687: forall (n : natural) (lf9 : lst) (lf8 : lst), @eq lst (lfappend (rev (Cons n lf9)) lf8) (Cons n lf8).
Lemma candidate_688: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (qreva (rev y) (lfappend lf7 Nil)).
Lemma candidate_689: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y (rev (rev lf7))).
Lemma candidate_690: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y (lfappend lf7 Nil)).
Lemma candidate_691: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (rev (qreva lf7 (rev y))).
Lemma candidate_692: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (qreva (rev y) lf7).
Lemma candidate_693: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y lf7).
Lemma candidate_694: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (Cons n (qreva lf9 Nil)).
Lemma candidate_695: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (lfappend (rev (rev lf9)) (Cons n Nil)).
Lemma candidate_696: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (lfappend (rev lf9) (Cons n Nil)).
Lemma candidate_697: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (Cons n (rev lf9)).
Lemma candidate_698: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (Cons n lf9).
Lemma candidate_699: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (Cons n Nil).
Lemma candidate_700: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) lf8))   (qreva x (Cons n (qreva lf9 lf8))).
Lemma candidate_701: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) lf8))   (qreva x (Cons n (lfappend lf8 Nil))).
Lemma candidate_702: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) lf8))   (rev (lfappend (rev lf8) (Cons n x))).
Lemma candidate_703: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) lf8))   (rev (qreva lf8 (Cons n x))).
Lemma candidate_704: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) lf8))   (lfappend (rev x) (Cons n lf8)).
Lemma candidate_705: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) lf8)) (qreva x (Cons n lf8)).
Lemma candidate_706: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (lfappend (lfappend y (rev lf6)) x).
Lemma candidate_707: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (lfappend (lfappend y lf6) x).
Lemma candidate_708: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (qreva (rev y) (lfappend lf6 x)).
Lemma candidate_709: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (qreva (rev y) (qreva lf6 x)).
Lemma candidate_710: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (lfappend y (lfappend lf6 x)).
Lemma candidate_711: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (lfappend y (qreva lf6 x)).
Lemma candidate_712: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva (lfappend y lf7) Nil)) (lfappend y lf7).
Lemma candidate_713: forall (lf7 : lst) (y : lst), @eq lst (rev (lfappend (rev lf7) (qreva y Nil))) (lfappend y lf7).
Lemma candidate_714: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva lf7 (qreva y Nil))) (lfappend y lf7).
Lemma candidate_715: forall (lf7 : lst) (y : lst), @eq lst (rev (lfappend (rev lf7) (rev y))) (lfappend y lf7).
Lemma candidate_716: forall (lf7 : lst) (y : lst), @eq lst (rev (rev (lfappend y lf7))) (lfappend y lf7).
Lemma candidate_717: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva lf7 (rev y))) (lfappend y lf7).
Lemma candidate_718: forall (lf7 : lst) (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (lfappend (qreva y Nil) Nil))))   (lfappend y lf7).
Lemma candidate_719: forall (lf7 : lst) (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev (rev (rev y))))))   (lfappend y lf7).
Lemma candidate_720: forall (lf7 : lst) (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev (lfappend y Nil)))))   (lfappend y lf7).
Lemma candidate_721: forall (lf7 : lst) (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (lfappend (rev y) Nil))))   (lfappend y lf7).
Lemma candidate_722: forall (lf7 : lst) (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (qreva y Nil)))) (lfappend y lf7).
Lemma candidate_723: forall (lf7 : lst) (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y)))) (lfappend y lf7).
Lemma candidate_724: forall (lf7 : lst) (y : lst), @eq lst (qreva (rev y) (lfappend lf7 Nil)) (lfappend y lf7).
Lemma candidate_725: forall (lf7 : lst) (y : lst), @eq lst (lfappend y (rev (rev lf7))) (lfappend y lf7).
Lemma candidate_726: forall (lf7 : lst) (y : lst), @eq lst (lfappend y (lfappend lf7 Nil)) (lfappend y lf7).
Lemma candidate_727: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva lf7 (rev y))) (lfappend y lf7).
Lemma candidate_728: forall (lf7 : lst) (y : lst), @eq lst (qreva (rev y) lf7) (lfappend y lf7).
Lemma candidate_729: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y lf7).
Lemma candidate_730: forall (lf6 : lst), @eq lst (rev lf6) (qreva (rev lf6) Nil).
Lemma candidate_731: forall (lf6 : lst), @eq lst (rev lf6) (rev (rev lf6)).
Lemma candidate_732: forall (lf6 : lst), @eq lst (rev lf6) (lfappend lf6 Nil).
Lemma candidate_733: forall (lf6 : lst), @eq lst (rev lf6) (qreva lf6 Nil).
Lemma candidate_734: forall (lf6 : lst), @eq lst (rev lf6) (rev lf6).
Lemma candidate_735: forall (lf6 : lst), @eq lst (rev lf6) (lf6).
Lemma candidate_736: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (qreva (rev y) (lfappend lf7 Nil)).
Lemma candidate_737: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y (rev (rev lf7))).
Lemma candidate_738: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y (lfappend lf7 Nil)).
Lemma candidate_739: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (rev (qreva lf7 (rev y))).
Lemma candidate_740: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (qreva (rev y) lf7).
Lemma candidate_741: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y lf7).
Lemma candidate_742: forall (y : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) (rev y)) (lfappend (rev lf6) (rev y)).
Lemma candidate_743: forall (y : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) (rev y)) (qreva (rev lf6) (rev y)).
Lemma candidate_744: forall (y : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) (rev y)) (rev (lfappend y (rev lf6))).
Lemma candidate_745: forall (y : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) (rev y)) (rev (lfappend y lf6)).
Lemma candidate_746: forall (y : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) (rev y)) (lfappend lf6 (rev y)).
Lemma candidate_747: forall (y : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) (rev y)) (qreva lf6 (rev y)).
Lemma candidate_748: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) (rev y)))   (rev (lfappend y (lfappend lf6 x))).
Lemma candidate_749: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) (rev y)))   (rev (lfappend y (qreva lf6 x))).
Lemma candidate_750: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) (rev y)))   (lfappend (rev x) (lfappend lf6 (rev y))).
Lemma candidate_751: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) (rev y)))   (lfappend (rev x) (qreva lf6 (rev y))).
Lemma candidate_752: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) (rev y)))   (qreva x (lfappend lf6 (rev y))).
Lemma candidate_753: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) (rev y))) (qreva x (qreva lf6 (rev y))).
Lemma candidate_754: forall (y : lst), @eq lst (rev y) (lfappend (qreva y Nil) Nil).
Lemma candidate_755: forall (y : lst), @eq lst (rev y) (rev (rev (rev y))).
Lemma candidate_756: forall (y : lst), @eq lst (rev y) (rev (lfappend y Nil)).
Lemma candidate_757: forall (y : lst), @eq lst (rev y) (lfappend (rev y) Nil).
Lemma candidate_758: forall (y : lst), @eq lst (rev y) (qreva y Nil).
Lemma candidate_759: forall (y : lst), @eq lst (rev y) (rev y).
Lemma candidate_760: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (lfappend (lfappend y (rev lf6)) x).
Lemma candidate_761: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (lfappend (lfappend y lf6) x).
Lemma candidate_762: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (qreva (rev y) (lfappend lf6 x)).
Lemma candidate_763: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (qreva (rev y) (qreva lf6 x)).
Lemma candidate_764: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (lfappend y (lfappend lf6 x)).
Lemma candidate_765: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (lfappend y (qreva lf6 x)).
Lemma candidate_766: forall (lf7 : lst) (y : lst), @eq lst (qreva (rev y) (lfappend lf7 Nil)) (lfappend y lf7).
Lemma candidate_767: forall (lf7 : lst) (y : lst), @eq lst (lfappend y (rev (rev lf7))) (lfappend y lf7).
Lemma candidate_768: forall (lf7 : lst) (y : lst), @eq lst (lfappend y (lfappend lf7 Nil)) (lfappend y lf7).
Lemma candidate_769: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva lf7 (rev y))) (lfappend y lf7).
Lemma candidate_770: forall (lf7 : lst) (y : lst), @eq lst (qreva (rev y) lf7) (lfappend y lf7).
Lemma candidate_771: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y lf7).
Lemma candidate_772: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (lfappend y (Cons n (lfappend x lf9))).
Lemma candidate_773: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_774: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (rev (lfappend (rev x) (Cons n (rev y)))).
Lemma candidate_775: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (rev (qreva x (Cons n (rev y)))).
Lemma candidate_776: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (qreva (rev y) (Cons n x)).
Lemma candidate_777: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (lfappend y (Cons n x)).
Lemma candidate_778: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva (lfappend y lf7) Nil)) (lfappend y lf7).
Lemma candidate_779: forall (lf7 : lst) (y : lst), @eq lst (rev (lfappend (rev lf7) (qreva y Nil))) (lfappend y lf7).
Lemma candidate_780: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva lf7 (qreva y Nil))) (lfappend y lf7).
Lemma candidate_781: forall (lf7 : lst) (y : lst), @eq lst (rev (lfappend (rev lf7) (rev y))) (lfappend y lf7).
Lemma candidate_782: forall (lf7 : lst) (y : lst), @eq lst (rev (rev (lfappend y lf7))) (lfappend y lf7).
Lemma candidate_783: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva lf7 (rev y))) (lfappend y lf7).
Lemma candidate_784: forall (lf7 : lst) (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (lfappend lf9 (rev y)))))   (lfappend y lf7).
Lemma candidate_785: forall (lf7 : lst) (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (qreva lf9 (rev y)))))   (lfappend y lf7).
Lemma candidate_786: forall (lf7 : lst) (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (qreva y (rev lf9)))))   (lfappend y lf7).
Lemma candidate_787: forall (lf7 : lst) (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (qreva y lf9))))   (lfappend y lf7).
Lemma candidate_788: forall (lf7 : lst) (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (qreva y Nil))))   (lfappend y lf7).
Lemma candidate_789: forall (lf7 : lst) (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (lfappend y lf7).
Lemma candidate_790: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (Cons n (qreva lf9 Nil)).
Lemma candidate_791: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (lfappend (rev (rev lf9)) (Cons n Nil)).
Lemma candidate_792: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (lfappend (rev lf9) (Cons n Nil)).
Lemma candidate_793: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (Cons n (rev lf9)).
Lemma candidate_794: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (Cons n lf9).
Lemma candidate_795: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (Cons n Nil).
Lemma candidate_796: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (lfappend y (Cons n (lfappend x lf9))).
Lemma candidate_797: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_798: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (rev (lfappend (rev x) (Cons n (rev y)))).
Lemma candidate_799: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (rev (qreva x (Cons n (rev y)))).
Lemma candidate_800: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (qreva (rev y) (Cons n x)).
Lemma candidate_801: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (lfappend y (Cons n x)).
Lemma candidate_802: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (qreva (rev y) (lfappend lf7 Nil)).
Lemma candidate_803: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y (rev (rev lf7))).
Lemma candidate_804: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y (lfappend lf7 Nil)).
Lemma candidate_805: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (rev (qreva lf7 (rev y))).
Lemma candidate_806: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (qreva (rev y) lf7).
Lemma candidate_807: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y lf7).
Lemma candidate_808: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) (rev y)))   (qreva x (Cons n (qreva y lf9))).
Lemma candidate_809: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) (rev y)))   (qreva x (Cons n (qreva y Nil))).
Lemma candidate_810: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) (rev y)))   (rev (qreva (rev y) (Cons n x))).
Lemma candidate_811: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) (rev y)))   (rev (lfappend y (Cons n x))).
Lemma candidate_812: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) (rev y)))   (lfappend (rev x) (Cons n (rev y))).
Lemma candidate_813: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) (rev y)))   (qreva x (Cons n (rev y))).
Lemma candidate_814: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (Cons n (qreva lf9 Nil)).
Lemma candidate_815: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (lfappend (rev (rev lf9)) (Cons n Nil)).
Lemma candidate_816: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (lfappend (rev lf9) (Cons n Nil)).
Lemma candidate_817: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (Cons n (rev lf9)).
Lemma candidate_818: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (Cons n lf9).
Lemma candidate_819: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (Cons n Nil).
Lemma candidate_820: forall (n : natural) (y : lst) (lf9 : lst), @eq lst (lfappend (rev (Cons n lf9)) (rev y)) (Cons n (lfappend lf9 (rev y))).
Lemma candidate_821: forall (n : natural) (y : lst) (lf9 : lst), @eq lst (lfappend (rev (Cons n lf9)) (rev y)) (Cons n (qreva lf9 (rev y))).
Lemma candidate_822: forall (n : natural) (y : lst) (lf9 : lst), @eq lst (lfappend (rev (Cons n lf9)) (rev y)) (Cons n (qreva y (rev lf9))).
Lemma candidate_823: forall (n : natural) (y : lst) (lf9 : lst), @eq lst (lfappend (rev (Cons n lf9)) (rev y)) (Cons n (qreva y lf9)).
Lemma candidate_824: forall (n : natural) (y : lst) (lf9 : lst), @eq lst (lfappend (rev (Cons n lf9)) (rev y)) (Cons n (qreva y Nil)).
Lemma candidate_825: forall (n : natural) (y : lst) (lf9 : lst), @eq lst (lfappend (rev (Cons n lf9)) (rev y)) (Cons n (rev y)).
Lemma candidate_826: forall (y : lst), @eq lst (rev y) (lfappend (qreva y Nil) Nil).
Lemma candidate_827: forall (y : lst), @eq lst (rev y) (rev (rev (rev y))).
Lemma candidate_828: forall (y : lst), @eq lst (rev y) (rev (lfappend y Nil)).
Lemma candidate_829: forall (y : lst), @eq lst (rev y) (lfappend (rev y) Nil).
Lemma candidate_830: forall (y : lst), @eq lst (rev y) (qreva y Nil).
Lemma candidate_831: forall (y : lst), @eq lst (rev y) (rev y).
Lemma candidate_832: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (qreva lf8 (Cons n (rev (rev x)))).
Lemma candidate_833: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (qreva lf8 (Cons n (lfappend x Nil))).
Lemma candidate_834: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (rev (lfappend (rev x) (Cons n lf8))).
Lemma candidate_835: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (rev (qreva x (Cons n lf8))).
Lemma candidate_836: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (lfappend (rev lf8) (Cons n x)).
Lemma candidate_837: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (qreva lf8 (Cons n x)).
Lemma candidate_838: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva (lfappend y lf7) Nil)) (lfappend y lf7).
Lemma candidate_839: forall (lf7 : lst) (y : lst), @eq lst (rev (lfappend (rev lf7) (qreva y Nil))) (lfappend y lf7).
Lemma candidate_840: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva lf7 (qreva y Nil))) (lfappend y lf7).
Lemma candidate_841: forall (lf7 : lst) (y : lst), @eq lst (rev (lfappend (rev lf7) (rev y))) (lfappend y lf7).
Lemma candidate_842: forall (lf7 : lst) (y : lst), @eq lst (rev (rev (lfappend y lf7))) (lfappend y lf7).
Lemma candidate_843: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva lf7 (rev y))) (lfappend y lf7).
Lemma candidate_844: forall (lf7 : lst) (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n (Nil))) lf8))) (lfappend y lf7).
Lemma candidate_845: forall (lf7 : lst) (y : lst), @eq lst (qreva (rev y) (lfappend lf7 Nil)) (lfappend y lf7).
Lemma candidate_846: forall (lf7 : lst) (y : lst), @eq lst (lfappend y (rev (rev lf7))) (lfappend y lf7).
Lemma candidate_847: forall (lf7 : lst) (y : lst), @eq lst (lfappend y (lfappend lf7 Nil)) (lfappend y lf7).
Lemma candidate_848: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva lf7 (rev y))) (lfappend y lf7).
Lemma candidate_849: forall (lf7 : lst) (y : lst), @eq lst (qreva (rev y) lf7) (lfappend y lf7).
Lemma candidate_850: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y lf7).
Lemma candidate_851: forall (n : natural) (lf8 : lst), @eq lst (lfappend (rev (Cons n Nil)) lf8) (Cons n (qreva (rev lf8) Nil)).
Lemma candidate_852: forall (n : natural) (lf8 : lst), @eq lst (lfappend (rev (Cons n Nil)) lf8) (rev (qreva lf8 (Cons n Nil))).
Lemma candidate_853: forall (n : natural) (lf8 : lst), @eq lst (lfappend (rev (Cons n Nil)) lf8)   (rev (lfappend (rev lf8) (Cons n Nil))).
Lemma candidate_854: forall (n : natural) (lf8 : lst), @eq lst (lfappend (rev (Cons n Nil)) lf8) (Cons n (rev (rev lf8))).
Lemma candidate_855: forall (n : natural) (lf8 : lst), @eq lst (lfappend (rev (Cons n Nil)) lf8) (Cons n (lfappend lf8 Nil)).
Lemma candidate_856: forall (n : natural) (lf8 : lst), @eq lst (lfappend (rev (Cons n Nil)) lf8) (Cons n lf8).
Lemma candidate_857: forall (n : natural), @eq lst (rev (Cons n Nil)) (Cons n Nil).
Lemma candidate_858: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (qreva (rev y) (lfappend lf7 Nil)).
Lemma candidate_859: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y (rev (rev lf7))).
Lemma candidate_860: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y (lfappend lf7 Nil)).
Lemma candidate_861: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (rev (qreva lf7 (rev y))).
Lemma candidate_862: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (qreva (rev y) lf7).
Lemma candidate_863: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y lf7).
Lemma candidate_864: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) lf8))   (qreva x (Cons n (rev (rev lf8)))).
Lemma candidate_865: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) lf8))   (qreva x (Cons n (lfappend lf8 Nil))).
Lemma candidate_866: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) lf8))   (rev (lfappend (rev lf8) (Cons n x))).
Lemma candidate_867: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) lf8))   (rev (qreva lf8 (Cons n x))).
Lemma candidate_868: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) lf8))   (lfappend (rev x) (Cons n lf8)).
Lemma candidate_869: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) lf8)) (qreva x (Cons n lf8)).
Lemma candidate_870: forall (n : natural), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_871: @eq lst Nil (Nil).
Lemma candidate_872: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (qreva lf8 (Cons n (rev (rev x)))).
Lemma candidate_873: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (qreva lf8 (Cons n (lfappend x Nil))).
Lemma candidate_874: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (rev (lfappend (rev x) (Cons n lf8))).
Lemma candidate_875: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (rev (qreva x (Cons n lf8))).
Lemma candidate_876: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (lfappend (rev lf8) (Cons n x)).
Lemma candidate_877: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (qreva lf8 (Cons n x)).
Lemma candidate_878: forall (lf7 : lst) (y : lst), @eq lst (qreva (rev y) (lfappend lf7 Nil)) (lfappend y lf7).
Lemma candidate_879: forall (lf7 : lst) (y : lst), @eq lst (lfappend y (rev (rev lf7))) (lfappend y lf7).
Lemma candidate_880: forall (lf7 : lst) (y : lst), @eq lst (lfappend y (lfappend lf7 Nil)) (lfappend y lf7).
Lemma candidate_881: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva lf7 (rev y))) (lfappend y lf7).
Lemma candidate_882: forall (lf7 : lst) (y : lst), @eq lst (qreva (rev y) lf7) (lfappend y lf7).
Lemma candidate_883: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y lf7).
Lemma candidate_884: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))   (lfappend y (Cons n (rev (rev x)))).
Lemma candidate_885: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_886: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))   (rev (lfappend (rev x) (Cons n (rev y)))).
Lemma candidate_887: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))   (rev (qreva x (Cons n (rev y)))).
Lemma candidate_888: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))   (qreva (rev y) (Cons n x)).
Lemma candidate_889: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))   (lfappend y (Cons n x)).
Lemma candidate_890: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva (lfappend y lf7) Nil)) (lfappend y lf7).
Lemma candidate_891: forall (lf7 : lst) (y : lst), @eq lst (rev (lfappend (rev lf7) (qreva y Nil))) (lfappend y lf7).
Lemma candidate_892: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva lf7 (qreva y Nil))) (lfappend y lf7).
Lemma candidate_893: forall (lf7 : lst) (y : lst), @eq lst (rev (lfappend (rev lf7) (rev y))) (lfappend y lf7).
Lemma candidate_894: forall (lf7 : lst) (y : lst), @eq lst (rev (rev (lfappend y lf7))) (lfappend y lf7).
Lemma candidate_895: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva lf7 (rev y))) (lfappend y lf7).
Lemma candidate_896: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst   (rev (qreva x (lfappend (rev (Cons n Nil)) (lfappend (qreva y Nil) Nil))))   (lfappend y lf7).
Lemma candidate_897: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev (rev (rev y))))))   (lfappend y lf7).
Lemma candidate_898: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev (lfappend y Nil)))))   (lfappend y lf7).
Lemma candidate_899: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (lfappend (rev y) Nil))))   (lfappend y lf7).
Lemma candidate_900: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (qreva y Nil))))   (lfappend y lf7).
Lemma candidate_901: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))   (lfappend y lf7).
Lemma candidate_902: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n (Nil))) (rev y))))   (lfappend y lf7).
Lemma candidate_903: forall (n : natural), @eq lst (rev (Cons n Nil)) (Cons n Nil).
Lemma candidate_904: forall (n : natural) (y : lst), @eq lst (lfappend (rev (Cons n Nil)) (rev y))   (rev (qreva (rev y) (Cons n Nil))).
Lemma candidate_905: forall (n : natural) (y : lst), @eq lst (lfappend (rev (Cons n Nil)) (rev y)) (rev (lfappend y (Cons n Nil))).
Lemma candidate_906: forall (n : natural) (y : lst), @eq lst (lfappend (rev (Cons n Nil)) (rev y))   (rev (lfappend (rev (rev y)) (Cons n Nil))).
Lemma candidate_907: forall (n : natural) (y : lst), @eq lst (lfappend (rev (Cons n Nil)) (rev y)) (Cons n (lfappend (rev y) Nil)).
Lemma candidate_908: forall (n : natural) (y : lst), @eq lst (lfappend (rev (Cons n Nil)) (rev y)) (Cons n (qreva y Nil)).
Lemma candidate_909: forall (n : natural) (y : lst), @eq lst (lfappend (rev (Cons n Nil)) (rev y)) (Cons n (rev y)).
Lemma candidate_910: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))   (lfappend y (Cons n (rev (rev x)))).
Lemma candidate_911: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_912: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))   (rev (lfappend (rev x) (Cons n (rev y)))).
Lemma candidate_913: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))   (rev (qreva x (Cons n (rev y)))).
Lemma candidate_914: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))   (qreva (rev y) (Cons n x)).
Lemma candidate_915: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))   (lfappend y (Cons n x)).
Lemma candidate_916: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (qreva (rev y) (lfappend lf7 Nil)).
Lemma candidate_917: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y (rev (rev lf7))).
Lemma candidate_918: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y (lfappend lf7 Nil)).
Lemma candidate_919: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (rev (qreva lf7 (rev y))).
Lemma candidate_920: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (qreva (rev y) lf7).
Lemma candidate_921: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y lf7).
Lemma candidate_922: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) (rev y)))   (lfappend (qreva x Nil) (Cons n (rev y))).
Lemma candidate_923: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) (rev y)))   (qreva x (Cons n (qreva y Nil))).
Lemma candidate_924: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) (rev y)))   (rev (qreva (rev y) (Cons n x))).
Lemma candidate_925: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) (rev y)))   (rev (lfappend y (Cons n x))).
Lemma candidate_926: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) (rev y)))   (lfappend (rev x) (Cons n (rev y))).
Lemma candidate_927: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) (rev y)))   (qreva x (Cons n (rev y))).
Lemma candidate_928: forall (n : natural), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_929: forall (y : lst), @eq lst (rev y) (lfappend (qreva y Nil) Nil).
Lemma candidate_930: forall (y : lst), @eq lst (rev y) (rev (rev (rev y))).
Lemma candidate_931: forall (y : lst), @eq lst (rev y) (rev (lfappend y Nil)).
Lemma candidate_932: forall (y : lst), @eq lst (rev y) (lfappend (rev y) Nil).
Lemma candidate_933: forall (y : lst), @eq lst (rev y) (qreva y Nil).
Lemma candidate_934: forall (y : lst), @eq lst (rev y) (rev y).
Lemma candidate_935: @eq lst Nil (Nil).
Lemma candidate_936: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (qreva (lfappend lf5 lf8) x).
Lemma candidate_937: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (qreva (qreva lf5 lf8) x).
Lemma candidate_938: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8)))   (lfappend (rev lf8) (lfappend lf5 x)).
Lemma candidate_939: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (lfappend (rev lf8) (qreva lf5 x)).
Lemma candidate_940: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (qreva lf8 (lfappend lf5 x)).
Lemma candidate_941: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (qreva lf8 (qreva lf5 x)).
Lemma candidate_942: forall (y : lst) (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8)))   (lfappend y (rev (qreva x (rev lf5)))).
Lemma candidate_943: forall (y : lst) (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (lfappend y (rev (qreva x lf5))).
Lemma candidate_944: forall (y : lst) (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8)))   (lfappend y (lfappend (rev lf5) x)).
Lemma candidate_945: forall (y : lst) (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (lfappend y (qreva (rev lf5) x)).
Lemma candidate_946: forall (y : lst) (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (lfappend y (lfappend lf5 x)).
Lemma candidate_947: forall (y : lst) (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (lfappend y (qreva lf5 x)).
Lemma candidate_948: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (rev (qreva (rev y) (Cons n Nil)))))   (lfappend y (Cons n x)).
Lemma candidate_949: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (rev (lfappend y (Cons n Nil)))))   (lfappend y (Cons n x)).
Lemma candidate_950: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (rev (lfappend (rev (rev y)) (Cons n Nil)))))   (lfappend y (Cons n x)).
Lemma candidate_951: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (lfappend (rev y) Nil))))   (lfappend y (Cons n x)).
Lemma candidate_952: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (qreva y Nil)))) (lfappend y (Cons n x)).
Lemma candidate_953: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_954: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (qreva x Nil) (Cons n (rev y))))   (lfappend y (Cons n x)).
Lemma candidate_955: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (qreva y Nil)))) (lfappend y (Cons n x)).
Lemma candidate_956: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (rev (qreva (rev y) (Cons n x)))) (lfappend y (Cons n x)).
Lemma candidate_957: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (rev (lfappend y (Cons n x)))) (lfappend y (Cons n x)).
Lemma candidate_958: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (rev x) (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_959: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_960: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (rev (rev x)))) (lfappend y (Cons n x)).
Lemma candidate_961: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (lfappend x Nil))) (lfappend y (Cons n x)).
Lemma candidate_962: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (rev x) (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_963: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_964: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva (rev y) (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_965: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_966: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (rev (rev x)))).
Lemma candidate_967: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_968: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (rev (lfappend (rev x) (Cons n (rev y)))).
Lemma candidate_969: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (rev (qreva x (Cons n (rev y)))).
Lemma candidate_970: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (qreva (rev y) (Cons n x)).
Lemma candidate_971: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_972: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (qreva (rev x) Nil)).
Lemma candidate_973: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (qreva x (Cons n Nil))).
Lemma candidate_974: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (lfappend (rev x) (Cons n Nil))).
Lemma candidate_975: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rev (rev x))).
Lemma candidate_976: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_977: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_978: forall (lf5 : lst) (lf8 : lst), @eq lst (lfappend lf5 lf8) (rev (qreva lf8 (rev lf5))).
Lemma candidate_979: forall (lf5 : lst) (lf8 : lst), @eq lst (lfappend lf5 lf8) (rev (qreva lf8 lf5)).
Lemma candidate_980: forall (lf5 : lst) (lf8 : lst), @eq lst (lfappend lf5 lf8) (lfappend (rev lf5) lf8).
Lemma candidate_981: forall (lf5 : lst) (lf8 : lst), @eq lst (lfappend lf5 lf8) (qreva (rev lf5) lf8).
Lemma candidate_982: forall (lf5 : lst) (lf8 : lst), @eq lst (lfappend lf5 lf8) (lfappend lf5 lf8).
Lemma candidate_983: forall (lf5 : lst) (lf8 : lst), @eq lst (lfappend lf5 lf8) (qreva lf5 lf8).
Lemma candidate_984: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (qreva x (lfappend lf5 lf8)) (qreva (qreva lf5 x) lf8).
Lemma candidate_985: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (qreva x (lfappend lf5 lf8)) (lfappend (qreva x lf5) lf8).
Lemma candidate_986: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (qreva x (lfappend lf5 lf8)) (lfappend (rev x) (lfappend lf5 lf8)).
Lemma candidate_987: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (qreva x (lfappend lf5 lf8)) (lfappend (rev x) (qreva lf5 lf8)).
Lemma candidate_988: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (qreva x (lfappend lf5 lf8)) (qreva x (lfappend lf5 lf8)).
Lemma candidate_989: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (qreva x (lfappend lf5 lf8)) (qreva x (qreva lf5 lf8)).
Lemma candidate_990: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (qreva (lfappend lf5 lf8) x).
Lemma candidate_991: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (qreva (qreva lf5 lf8) x).
Lemma candidate_992: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8)))   (lfappend (rev lf8) (lfappend lf5 x)).
Lemma candidate_993: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (lfappend (rev lf8) (qreva lf5 x)).
Lemma candidate_994: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (qreva lf8 (lfappend lf5 x)).
Lemma candidate_995: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (qreva lf8 (qreva lf5 x)).
Lemma candidate_996: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y))))   (lfappend (lfappend y (rev lf5)) x).
Lemma candidate_997: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (lfappend (lfappend y lf5) x).
Lemma candidate_998: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y))))   (qreva (rev y) (lfappend lf5 x)).
Lemma candidate_999: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (qreva (rev y) (qreva lf5 x)).
Lemma candidate_1000: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (lfappend y (lfappend lf5 x)).
Lemma candidate_1001: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (lfappend y (qreva lf5 x)).
Lemma candidate_1002: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y))))   (lfappend y (rev (qreva x (rev lf5)))).
Lemma candidate_1003: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y))))   (lfappend y (rev (qreva x lf5))).
Lemma candidate_1004: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y))))   (lfappend y (lfappend (rev lf5) x)).
Lemma candidate_1005: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y))))   (lfappend y (qreva (rev lf5) x)).
Lemma candidate_1006: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (lfappend y (lfappend lf5 x)).
Lemma candidate_1007: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (lfappend y (qreva lf5 x)).
Lemma candidate_1008: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (rev (qreva (rev y) (Cons n Nil)))))   (lfappend y (Cons n x)).
Lemma candidate_1009: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (rev (lfappend y (Cons n Nil)))))   (lfappend y (Cons n x)).
Lemma candidate_1010: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (rev (lfappend (rev (rev y)) (Cons n Nil)))))   (lfappend y (Cons n x)).
Lemma candidate_1011: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (lfappend (rev y) Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1012: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (qreva y Nil)))) (lfappend y (Cons n x)).
Lemma candidate_1013: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1014: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (rev (rev x)))) (lfappend y (Cons n x)).
Lemma candidate_1015: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (lfappend x Nil))) (lfappend y (Cons n x)).
Lemma candidate_1016: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (rev x) (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1017: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1018: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva (rev y) (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1019: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1020: forall (n : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (lfappend (qreva y Nil) Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1021: forall (n : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev (rev (rev y))))))   (lfappend y (Cons n x)).
Lemma candidate_1022: forall (n : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev (lfappend y Nil)))))   (lfappend y (Cons n x)).
Lemma candidate_1023: forall (n : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (lfappend (rev y) Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1024: forall (n : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (qreva y Nil)))) (lfappend y (Cons n x)).
Lemma candidate_1025: forall (n : natural) (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1026: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (qreva x Nil) (Cons n (rev y))))   (lfappend y (Cons n x)).
Lemma candidate_1027: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (qreva y Nil)))) (lfappend y (Cons n x)).
Lemma candidate_1028: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (rev (qreva (rev y) (Cons n x)))) (lfappend y (Cons n x)).
Lemma candidate_1029: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (rev (lfappend y (Cons n x)))) (lfappend y (Cons n x)).
Lemma candidate_1030: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (rev x) (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1031: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1032: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (rev (rev x)))).
Lemma candidate_1033: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1034: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (rev (lfappend (rev x) (Cons n (rev y)))).
Lemma candidate_1035: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (rev (qreva x (Cons n (rev y)))).
Lemma candidate_1036: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (qreva (rev y) (Cons n x)).
Lemma candidate_1037: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1038: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (qreva (rev x) Nil)).
Lemma candidate_1039: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (qreva x (Cons n Nil))).
Lemma candidate_1040: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (lfappend (rev x) (Cons n Nil))).
Lemma candidate_1041: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rev (rev x))).
Lemma candidate_1042: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_1043: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_1044: forall (y : lst) (lf5 : lst), @eq lst (lfappend lf5 (rev y)) (lfappend (rev lf5) (rev y)).
Lemma candidate_1045: forall (y : lst) (lf5 : lst), @eq lst (lfappend lf5 (rev y)) (qreva (rev lf5) (rev y)).
Lemma candidate_1046: forall (y : lst) (lf5 : lst), @eq lst (lfappend lf5 (rev y)) (rev (lfappend y (rev lf5))).
Lemma candidate_1047: forall (y : lst) (lf5 : lst), @eq lst (lfappend lf5 (rev y)) (rev (lfappend y lf5)).
Lemma candidate_1048: forall (y : lst) (lf5 : lst), @eq lst (lfappend lf5 (rev y)) (lfappend lf5 (rev y)).
Lemma candidate_1049: forall (y : lst) (lf5 : lst), @eq lst (lfappend lf5 (rev y)) (qreva lf5 (rev y)).
Lemma candidate_1050: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y))))   (lfappend (lfappend y (rev lf5)) x).
Lemma candidate_1051: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (lfappend (lfappend y lf5) x).
Lemma candidate_1052: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y))))   (qreva (rev y) (lfappend lf5 x)).
Lemma candidate_1053: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (qreva (rev y) (qreva lf5 x)).
Lemma candidate_1054: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (lfappend y (lfappend lf5 x)).
Lemma candidate_1055: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (lfappend y (qreva lf5 x)).
Lemma candidate_1056: forall (y : lst), @eq lst (rev y) (lfappend (qreva y Nil) Nil).
Lemma candidate_1057: forall (y : lst), @eq lst (rev y) (rev (rev (rev y))).
Lemma candidate_1058: forall (y : lst), @eq lst (rev y) (rev (lfappend y Nil)).
Lemma candidate_1059: forall (y : lst), @eq lst (rev y) (lfappend (rev y) Nil).
Lemma candidate_1060: forall (y : lst), @eq lst (rev y) (qreva y Nil).
Lemma candidate_1061: forall (y : lst), @eq lst (rev y) (rev y).
Lemma candidate_1062: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (qreva x (lfappend lf5 (rev y))) (rev (lfappend y (lfappend lf5 x))).
Lemma candidate_1063: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (qreva x (lfappend lf5 (rev y))) (rev (lfappend y (qreva lf5 x))).
Lemma candidate_1064: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (qreva x (lfappend lf5 (rev y)))   (lfappend (rev x) (lfappend lf5 (rev y))).
Lemma candidate_1065: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (qreva x (lfappend lf5 (rev y)))   (lfappend (rev x) (qreva lf5 (rev y))).
Lemma candidate_1066: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (qreva x (lfappend lf5 (rev y))) (qreva x (lfappend lf5 (rev y))).
Lemma candidate_1067: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (qreva x (lfappend lf5 (rev y))) (qreva x (qreva lf5 (rev y))).
Lemma candidate_1068: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (Cons n Nil) lf8))) (lfappend y (Cons n x)).
Lemma candidate_1069: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (qreva (qreva lf6 lf8) x).
Lemma candidate_1070: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (lfappend (qreva lf8 lf6) x).
Lemma candidate_1071: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8)))   (lfappend (rev lf8) (lfappend lf6 x)).
Lemma candidate_1072: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8)))   (lfappend (rev lf8) (qreva lf6 x)).
Lemma candidate_1073: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (qreva lf8 (lfappend lf6 x)).
Lemma candidate_1074: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (qreva lf8 (qreva lf6 x)).
Lemma candidate_1075: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (rev (rev x)))) (lfappend y (Cons n x)).
Lemma candidate_1076: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (lfappend x Nil))) (lfappend y (Cons n x)).
Lemma candidate_1077: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (rev x) (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1078: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1079: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva (rev y) (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1080: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1081: forall (y : lst) (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8)))   (lfappend y (rev (qreva x (rev lf6)))).
Lemma candidate_1082: forall (y : lst) (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8)))   (lfappend y (rev (qreva x lf6))).
Lemma candidate_1083: forall (y : lst) (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8)))   (lfappend y (lfappend (rev lf6) x)).
Lemma candidate_1084: forall (y : lst) (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8)))   (lfappend y (qreva (rev lf6) x)).
Lemma candidate_1085: forall (y : lst) (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8)))   (lfappend y (lfappend lf6 x)).
Lemma candidate_1086: forall (y : lst) (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (lfappend y (qreva lf6 x)).
Lemma candidate_1087: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (qreva x Nil) (Cons n (rev y))))   (lfappend y (Cons n x)).
Lemma candidate_1088: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (qreva y Nil)))) (lfappend y (Cons n x)).
Lemma candidate_1089: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (rev (qreva (rev y) (Cons n x)))) (lfappend y (Cons n x)).
Lemma candidate_1090: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (rev (lfappend y (Cons n x)))) (lfappend y (Cons n x)).
Lemma candidate_1091: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (rev x) (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1092: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1093: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (rev (qreva (rev y) (Cons n Nil)))))   (lfappend y (Cons n x)).
Lemma candidate_1094: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (rev (lfappend y (Cons n Nil)))))   (lfappend y (Cons n x)).
Lemma candidate_1095: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (rev (lfappend (rev (rev y)) (Cons n Nil)))))   (lfappend y (Cons n x)).
Lemma candidate_1096: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (lfappend (rev y) Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1097: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (qreva y Nil)))) (lfappend y (Cons n x)).
Lemma candidate_1098: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1099: forall (lf6 : lst), @eq lst (rev lf6) (qreva (rev lf6) Nil).
Lemma candidate_1100: forall (lf6 : lst), @eq lst (rev lf6) (rev (rev lf6)).
Lemma candidate_1101: forall (lf6 : lst), @eq lst (rev lf6) (lfappend lf6 Nil).
Lemma candidate_1102: forall (lf6 : lst), @eq lst (rev lf6) (qreva lf6 Nil).
Lemma candidate_1103: forall (lf6 : lst), @eq lst (rev lf6) (rev lf6).
Lemma candidate_1104: forall (lf6 : lst), @eq lst (rev lf6) (lf6).
Lemma candidate_1105: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (rev (rev x)))).
Lemma candidate_1106: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1107: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (rev (lfappend (rev x) (Cons n (rev y)))).
Lemma candidate_1108: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (rev (qreva x (Cons n (rev y)))).
Lemma candidate_1109: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (qreva (rev y) (Cons n x)).
Lemma candidate_1110: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1111: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (qreva (qreva lf6 lf8) x).
Lemma candidate_1112: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (lfappend (qreva lf8 lf6) x).
Lemma candidate_1113: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8)))   (lfappend (rev lf8) (lfappend lf6 x)).
Lemma candidate_1114: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8)))   (lfappend (rev lf8) (qreva lf6 x)).
Lemma candidate_1115: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (qreva lf8 (lfappend lf6 x)).
Lemma candidate_1116: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (qreva lf8 (qreva lf6 x)).
Lemma candidate_1117: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (qreva (rev x) Nil)).
Lemma candidate_1118: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (qreva x (Cons n Nil))).
Lemma candidate_1119: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (lfappend (rev x) (Cons n Nil))).
Lemma candidate_1120: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rev (rev x))).
Lemma candidate_1121: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_1122: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_1123: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) lf8)) (qreva (qreva lf6 x) lf8).
Lemma candidate_1124: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) lf8)) (lfappend (qreva x lf6) lf8).
Lemma candidate_1125: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) lf8))   (lfappend (rev x) (lfappend lf6 lf8)).
Lemma candidate_1126: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) lf8)) (lfappend (rev x) (qreva lf6 lf8)).
Lemma candidate_1127: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) lf8)) (qreva x (lfappend lf6 lf8)).
Lemma candidate_1128: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) lf8)) (qreva x (qreva lf6 lf8)).
Lemma candidate_1129: forall (lf8 : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) lf8) (rev (qreva lf8 (rev lf6))).
Lemma candidate_1130: forall (lf8 : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) lf8) (rev (qreva lf8 lf6)).
Lemma candidate_1131: forall (lf8 : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) lf8) (lfappend (rev lf6) lf8).
Lemma candidate_1132: forall (lf8 : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) lf8) (qreva (rev lf6) lf8).
Lemma candidate_1133: forall (lf8 : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) lf8) (lfappend lf6 lf8).
Lemma candidate_1134: forall (lf8 : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) lf8) (qreva lf6 lf8).
Lemma candidate_1135: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (lfappend y (Cons n x)).
Lemma candidate_1136: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (rev (rev x)))) (lfappend y (Cons n x)).
Lemma candidate_1137: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (lfappend x Nil))) (lfappend y (Cons n x)).
Lemma candidate_1138: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (rev x) (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1139: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1140: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva (rev y) (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1141: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1142: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (qreva lf8 (Cons n (lfappend x lf9))).
Lemma candidate_1143: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (qreva lf8 (Cons n (lfappend x Nil))).
Lemma candidate_1144: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (rev (lfappend (rev x) (Cons n lf8))).
Lemma candidate_1145: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (rev (qreva x (Cons n lf8))).
Lemma candidate_1146: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (lfappend (rev lf8) (Cons n x)).
Lemma candidate_1147: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (qreva lf8 (Cons n x)).
Lemma candidate_1148: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (rev (qreva (rev y) (Cons n Nil)))))   (lfappend y (Cons n x)).
Lemma candidate_1149: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (rev (lfappend y (Cons n Nil)))))   (lfappend y (Cons n x)).
Lemma candidate_1150: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (rev (lfappend (rev (rev y)) (Cons n Nil)))))   (lfappend y (Cons n x)).
Lemma candidate_1151: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (lfappend (rev y) Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1152: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (qreva y Nil)))) (lfappend y (Cons n x)).
Lemma candidate_1153: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1154: forall (n : natural) (y : lst) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (lfappend y (qreva lf9 (Cons n x))).
Lemma candidate_1155: forall (n : natural) (y : lst) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (lfappend y (Cons n (lfappend lf9 x))).
Lemma candidate_1156: forall (n : natural) (y : lst) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (lfappend y (Cons n (qreva lf9 x))).
Lemma candidate_1157: forall (n : natural) (y : lst) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (lfappend y (Cons n (lfappend x lf9))).
Lemma candidate_1158: forall (n : natural) (y : lst) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1159: forall (n : natural) (y : lst) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (lfappend y (Cons n x)).
Lemma candidate_1160: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (Cons n Nil) lf8))) (lfappend y (Cons n x)).
Lemma candidate_1161: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (qreva x Nil) (Cons n (rev y))))   (lfappend y (Cons n x)).
Lemma candidate_1162: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (qreva y Nil)))) (lfappend y (Cons n x)).
Lemma candidate_1163: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (rev (qreva (rev y) (Cons n x)))) (lfappend y (Cons n x)).
Lemma candidate_1164: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (rev (lfappend y (Cons n x)))) (lfappend y (Cons n x)).
Lemma candidate_1165: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (rev x) (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1166: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1167: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (Cons n (qreva lf9 Nil)).
Lemma candidate_1168: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (lfappend (rev (rev lf9)) (Cons n Nil)).
Lemma candidate_1169: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (lfappend (rev lf9) (Cons n Nil)).
Lemma candidate_1170: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (Cons n (rev lf9)).
Lemma candidate_1171: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (Cons n lf9).
Lemma candidate_1172: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (Cons n Nil).
Lemma candidate_1173: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (qreva lf8 (Cons n (lfappend x lf9))).
Lemma candidate_1174: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (qreva lf8 (Cons n (lfappend x Nil))).
Lemma candidate_1175: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (rev (lfappend (rev x) (Cons n lf8))).
Lemma candidate_1176: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (rev (qreva x (Cons n lf8))).
Lemma candidate_1177: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (lfappend (rev lf8) (Cons n x)).
Lemma candidate_1178: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) lf8)))   (qreva lf8 (Cons n x)).
Lemma candidate_1179: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (rev (rev x)))).
Lemma candidate_1180: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1181: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (rev (lfappend (rev x) (Cons n (rev y)))).
Lemma candidate_1182: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (rev (qreva x (Cons n (rev y)))).
Lemma candidate_1183: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (qreva (rev y) (Cons n x)).
Lemma candidate_1184: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1185: forall (n : natural) (lf9 : lst) (lf8 : lst), @eq lst (lfappend (rev (Cons n lf9)) lf8) (lfappend lf9 (Cons n lf8)).
Lemma candidate_1186: forall (n : natural) (lf9 : lst) (lf8 : lst), @eq lst (lfappend (rev (Cons n lf9)) lf8) (qreva lf9 (Cons n lf8)).
Lemma candidate_1187: forall (n : natural) (lf9 : lst) (lf8 : lst), @eq lst (lfappend (rev (Cons n lf9)) lf8) (Cons n (lfappend lf9 lf8)).
Lemma candidate_1188: forall (n : natural) (lf9 : lst) (lf8 : lst), @eq lst (lfappend (rev (Cons n lf9)) lf8) (Cons n (qreva lf9 lf8)).
Lemma candidate_1189: forall (n : natural) (lf9 : lst) (lf8 : lst), @eq lst (lfappend (rev (Cons n lf9)) lf8) (Cons n (lfappend lf8 Nil)).
Lemma candidate_1190: forall (n : natural) (lf9 : lst) (lf8 : lst), @eq lst (lfappend (rev (Cons n lf9)) lf8) (Cons n lf8).
Lemma candidate_1191: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (qreva (rev x) Nil)).
Lemma candidate_1192: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (qreva x (Cons n Nil))).
Lemma candidate_1193: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (lfappend (rev x) (Cons n Nil))).
Lemma candidate_1194: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rev (rev x))).
Lemma candidate_1195: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_1196: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_1197: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (Cons n (qreva lf9 Nil)).
Lemma candidate_1198: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (lfappend (rev (rev lf9)) (Cons n Nil)).
Lemma candidate_1199: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (lfappend (rev lf9) (Cons n Nil)).
Lemma candidate_1200: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (Cons n (rev lf9)).
Lemma candidate_1201: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (Cons n lf9).
Lemma candidate_1202: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (Cons n Nil).
Lemma candidate_1203: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) lf8))   (qreva x (Cons n (qreva lf9 lf8))).
Lemma candidate_1204: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) lf8))   (qreva x (Cons n (lfappend lf8 Nil))).
Lemma candidate_1205: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) lf8))   (rev (lfappend (rev lf8) (Cons n x))).
Lemma candidate_1206: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) lf8))   (rev (qreva lf8 (Cons n x))).
Lemma candidate_1207: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) lf8))   (lfappend (rev x) (Cons n lf8)).
Lemma candidate_1208: forall (n : natural) (x : lst) (lf9 : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) lf8)) (qreva x (Cons n lf8)).
Lemma candidate_1209: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (Cons n Nil) (rev y))))   (lfappend y (Cons n x)).
Lemma candidate_1210: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (lfappend (lfappend y (rev lf6)) x).
Lemma candidate_1211: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (lfappend (lfappend y lf6) x).
Lemma candidate_1212: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (qreva (rev y) (lfappend lf6 x)).
Lemma candidate_1213: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (qreva (rev y) (qreva lf6 x)).
Lemma candidate_1214: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (lfappend y (lfappend lf6 x)).
Lemma candidate_1215: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (lfappend y (qreva lf6 x)).
Lemma candidate_1216: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (rev (qreva (rev y) (Cons n Nil)))))   (lfappend y (Cons n x)).
Lemma candidate_1217: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (rev (lfappend y (Cons n Nil)))))   (lfappend y (Cons n x)).
Lemma candidate_1218: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (rev (lfappend (rev (rev y)) (Cons n Nil)))))   (lfappend y (Cons n x)).
Lemma candidate_1219: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (lfappend (rev y) Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1220: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (qreva y Nil)))) (lfappend y (Cons n x)).
Lemma candidate_1221: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1222: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (qreva x Nil) (Cons n (rev y))))   (lfappend y (Cons n x)).
Lemma candidate_1223: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (qreva y Nil)))) (lfappend y (Cons n x)).
Lemma candidate_1224: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (rev (qreva (rev y) (Cons n x)))) (lfappend y (Cons n x)).
Lemma candidate_1225: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (rev (lfappend y (Cons n x)))) (lfappend y (Cons n x)).
Lemma candidate_1226: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (rev x) (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1227: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1228: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (lfappend y (rev (qreva x (rev lf6)))).
Lemma candidate_1229: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (lfappend y (rev (qreva x lf6))).
Lemma candidate_1230: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (lfappend y (lfappend (rev lf6) x)).
Lemma candidate_1231: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (lfappend y (qreva (rev lf6) x)).
Lemma candidate_1232: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (lfappend y (lfappend lf6 x)).
Lemma candidate_1233: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (lfappend y (qreva lf6 x)).
Lemma candidate_1234: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (lfappend (qreva y Nil) Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1235: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev (rev (rev y))))))   (lfappend y (Cons n x)).
Lemma candidate_1236: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev (lfappend y Nil)))))   (lfappend y (Cons n x)).
Lemma candidate_1237: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (lfappend (rev y) Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1238: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (qreva y Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1239: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1240: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (rev (rev x)))) (lfappend y (Cons n x)).
Lemma candidate_1241: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (lfappend x Nil))) (lfappend y (Cons n x)).
Lemma candidate_1242: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (rev x) (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1243: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1244: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva (rev y) (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1245: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1246: forall (lf6 : lst), @eq lst (rev lf6) (qreva (rev lf6) Nil).
Lemma candidate_1247: forall (lf6 : lst), @eq lst (rev lf6) (rev (rev lf6)).
Lemma candidate_1248: forall (lf6 : lst), @eq lst (rev lf6) (lfappend lf6 Nil).
Lemma candidate_1249: forall (lf6 : lst), @eq lst (rev lf6) (qreva lf6 Nil).
Lemma candidate_1250: forall (lf6 : lst), @eq lst (rev lf6) (rev lf6).
Lemma candidate_1251: forall (lf6 : lst), @eq lst (rev lf6) (lf6).
Lemma candidate_1252: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (rev (rev x)))).
Lemma candidate_1253: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1254: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (rev (lfappend (rev x) (Cons n (rev y)))).
Lemma candidate_1255: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (rev (qreva x (Cons n (rev y)))).
Lemma candidate_1256: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (qreva (rev y) (Cons n x)).
Lemma candidate_1257: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1258: forall (y : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) (rev y)) (lfappend (rev lf6) (rev y)).
Lemma candidate_1259: forall (y : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) (rev y)) (qreva (rev lf6) (rev y)).
Lemma candidate_1260: forall (y : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) (rev y)) (rev (lfappend y (rev lf6))).
Lemma candidate_1261: forall (y : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) (rev y)) (rev (lfappend y lf6)).
Lemma candidate_1262: forall (y : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) (rev y)) (lfappend lf6 (rev y)).
Lemma candidate_1263: forall (y : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) (rev y)) (qreva lf6 (rev y)).
Lemma candidate_1264: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) (rev y)))   (rev (lfappend y (lfappend lf6 x))).
Lemma candidate_1265: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) (rev y)))   (rev (lfappend y (qreva lf6 x))).
Lemma candidate_1266: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) (rev y)))   (lfappend (rev x) (lfappend lf6 (rev y))).
Lemma candidate_1267: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) (rev y)))   (lfappend (rev x) (qreva lf6 (rev y))).
Lemma candidate_1268: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) (rev y)))   (qreva x (lfappend lf6 (rev y))).
Lemma candidate_1269: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) (rev y))) (qreva x (qreva lf6 (rev y))).
Lemma candidate_1270: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (qreva (rev x) Nil)).
Lemma candidate_1271: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (qreva x (Cons n Nil))).
Lemma candidate_1272: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (lfappend (rev x) (Cons n Nil))).
Lemma candidate_1273: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rev (rev x))).
Lemma candidate_1274: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_1275: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_1276: forall (y : lst), @eq lst (rev y) (lfappend (qreva y Nil) Nil).
Lemma candidate_1277: forall (y : lst), @eq lst (rev y) (rev (rev (rev y))).
Lemma candidate_1278: forall (y : lst), @eq lst (rev y) (rev (lfappend y Nil)).
Lemma candidate_1279: forall (y : lst), @eq lst (rev y) (lfappend (rev y) Nil).
Lemma candidate_1280: forall (y : lst), @eq lst (rev y) (qreva y Nil).
Lemma candidate_1281: forall (y : lst), @eq lst (rev y) (rev y).
Lemma candidate_1282: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (lfappend (lfappend y (rev lf6)) x).
Lemma candidate_1283: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (lfappend (lfappend y lf6) x).
Lemma candidate_1284: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (qreva (rev y) (lfappend lf6 x)).
Lemma candidate_1285: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (qreva (rev y) (qreva lf6 x)).
Lemma candidate_1286: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (lfappend y (lfappend lf6 x)).
Lemma candidate_1287: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (lfappend y (qreva lf6 x)).
Lemma candidate_1288: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))   (lfappend y (Cons n x)).
Lemma candidate_1289: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (rev (rev x)))) (lfappend y (Cons n x)).
Lemma candidate_1290: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (lfappend x Nil))) (lfappend y (Cons n x)).
Lemma candidate_1291: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (rev x) (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1292: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1293: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva (rev y) (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1294: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1295: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (lfappend y (Cons n (lfappend x lf9))).
Lemma candidate_1296: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1297: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (rev (lfappend (rev x) (Cons n (rev y)))).
Lemma candidate_1298: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (rev (qreva x (Cons n (rev y)))).
Lemma candidate_1299: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (qreva (rev y) (Cons n x)).
Lemma candidate_1300: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (lfappend y (Cons n x)).
Lemma candidate_1301: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (lfappend y (qreva lf9 (Cons n x))).
Lemma candidate_1302: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (lfappend y (Cons n (lfappend lf9 x))).
Lemma candidate_1303: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (lfappend y (Cons n (qreva lf9 x))).
Lemma candidate_1304: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (lfappend y (Cons n (lfappend x lf9))).
Lemma candidate_1305: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1306: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (lfappend y (Cons n x)).
Lemma candidate_1307: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (qreva x Nil) (Cons n (rev y))))   (lfappend y (Cons n x)).
Lemma candidate_1308: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (qreva y Nil)))) (lfappend y (Cons n x)).
Lemma candidate_1309: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (rev (qreva (rev y) (Cons n x)))) (lfappend y (Cons n x)).
Lemma candidate_1310: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (rev (lfappend y (Cons n x)))) (lfappend y (Cons n x)).
Lemma candidate_1311: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (rev x) (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1312: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1313: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (Cons n Nil) (rev y))))   (lfappend y (Cons n x)).
Lemma candidate_1314: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (rev (qreva (rev y) (Cons n Nil)))))   (lfappend y (Cons n x)).
Lemma candidate_1315: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (rev (lfappend y (Cons n Nil)))))   (lfappend y (Cons n x)).
Lemma candidate_1316: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (rev (lfappend (rev (rev y)) (Cons n Nil)))))   (lfappend y (Cons n x)).
Lemma candidate_1317: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (lfappend (rev y) Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1318: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (qreva y Nil)))) (lfappend y (Cons n x)).
Lemma candidate_1319: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1320: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (lfappend lf9 (rev y)))))   (lfappend y (Cons n x)).
Lemma candidate_1321: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (qreva lf9 (rev y)))))   (lfappend y (Cons n x)).
Lemma candidate_1322: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (qreva y (rev lf9)))))   (lfappend y (Cons n x)).
Lemma candidate_1323: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (qreva y lf9))))   (lfappend y (Cons n x)).
Lemma candidate_1324: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (qreva y Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1325: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (lfappend y (Cons n x)).
Lemma candidate_1326: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (Cons n (qreva lf9 Nil)).
Lemma candidate_1327: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (lfappend (rev (rev lf9)) (Cons n Nil)).
Lemma candidate_1328: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (lfappend (rev lf9) (Cons n Nil)).
Lemma candidate_1329: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (Cons n (rev lf9)).
Lemma candidate_1330: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (Cons n lf9).
Lemma candidate_1331: forall (n : natural) (lf9 : lst), @eq lst (Cons n lf9) (Cons n Nil).
Lemma candidate_1332: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (lfappend y (Cons n (lfappend x lf9))).
Lemma candidate_1333: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1334: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (rev (lfappend (rev x) (Cons n (rev y)))).
Lemma candidate_1335: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (rev (qreva x (Cons n (rev y)))).
Lemma candidate_1336: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (qreva (rev y) (Cons n x)).
Lemma candidate_1337: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (lfappend y (Cons n x)).
Lemma candidate_1338: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (rev (rev x)))).
Lemma candidate_1339: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1340: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (rev (lfappend (rev x) (Cons n (rev y)))).
Lemma candidate_1341: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (rev (qreva x (Cons n (rev y)))).
Lemma candidate_1342: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (qreva (rev y) (Cons n x)).
Lemma candidate_1343: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1344: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (qreva (rev x) Nil)).
Lemma candidate_1345: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (qreva x (Cons n Nil))).
Lemma candidate_1346: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (lfappend (rev x) (Cons n Nil))).
Lemma candidate_1347: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rev (rev x))).
Lemma candidate_1348: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_1349: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_1350: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) (rev y)))   (qreva x (Cons n (qreva y lf9))).
Lemma candidate_1351: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) (rev y)))   (qreva x (Cons n (qreva y Nil))).
Lemma candidate_1352: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) (rev y)))   (rev (qreva (rev y) (Cons n x))).
Lemma candidate_1353: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) (rev y)))   (rev (lfappend y (Cons n x))).
Lemma candidate_1354: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) (rev y)))   (lfappend (rev x) (Cons n (rev y))).
Lemma candidate_1355: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (qreva x (lfappend (rev (Cons n lf9)) (rev y)))   (qreva x (Cons n (rev y))).
Lemma candidate_1356: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (Cons n (qreva lf9 Nil)).
Lemma candidate_1357: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (lfappend (rev (rev lf9)) (Cons n Nil)).
Lemma candidate_1358: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (lfappend (rev lf9) (Cons n Nil)).
Lemma candidate_1359: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (Cons n (rev lf9)).
Lemma candidate_1360: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (Cons n lf9).
Lemma candidate_1361: forall (n : natural) (lf9 : lst), @eq lst (rev (Cons n lf9)) (Cons n Nil).
Lemma candidate_1362: forall (n : natural) (y : lst) (lf9 : lst), @eq lst (lfappend (rev (Cons n lf9)) (rev y)) (Cons n (lfappend lf9 (rev y))).
Lemma candidate_1363: forall (n : natural) (y : lst) (lf9 : lst), @eq lst (lfappend (rev (Cons n lf9)) (rev y)) (Cons n (qreva lf9 (rev y))).
Lemma candidate_1364: forall (n : natural) (y : lst) (lf9 : lst), @eq lst (lfappend (rev (Cons n lf9)) (rev y)) (Cons n (qreva y (rev lf9))).
Lemma candidate_1365: forall (n : natural) (y : lst) (lf9 : lst), @eq lst (lfappend (rev (Cons n lf9)) (rev y)) (Cons n (qreva y lf9)).
Lemma candidate_1366: forall (n : natural) (y : lst) (lf9 : lst), @eq lst (lfappend (rev (Cons n lf9)) (rev y)) (Cons n (qreva y Nil)).
Lemma candidate_1367: forall (n : natural) (y : lst) (lf9 : lst), @eq lst (lfappend (rev (Cons n lf9)) (rev y)) (Cons n (rev y)).
Lemma candidate_1368: forall (y : lst), @eq lst (rev y) (lfappend (qreva y Nil) Nil).
Lemma candidate_1369: forall (y : lst), @eq lst (rev y) (rev (rev (rev y))).
Lemma candidate_1370: forall (y : lst), @eq lst (rev y) (rev (lfappend y Nil)).
Lemma candidate_1371: forall (y : lst), @eq lst (rev y) (lfappend (rev y) Nil).
Lemma candidate_1372: forall (y : lst), @eq lst (rev y) (qreva y Nil).
Lemma candidate_1373: forall (y : lst), @eq lst (rev y) (rev y).
Lemma candidate_1374: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (rev (qreva (rev y) (Cons n Nil)))))   (lfappend y (Cons n x)).
Lemma candidate_1375: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (rev (lfappend y (Cons n Nil)))))   (lfappend y (Cons n x)).
Lemma candidate_1376: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (rev (lfappend (rev (rev y)) (Cons n Nil)))))   (lfappend y (Cons n x)).
Lemma candidate_1377: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (lfappend (rev y) Nil))))   (lfappend y (Cons n x)).
Lemma candidate_1378: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (qreva y Nil)))) (lfappend y (Cons n x)).
Lemma candidate_1379: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1380: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (Cons n Nil) lf8))) (lfappend y (Cons n x)).
Lemma candidate_1381: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (qreva lf8 (Cons n (rev (rev x)))).
Lemma candidate_1382: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (qreva lf8 (Cons n (lfappend x Nil))).
Lemma candidate_1383: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (rev (lfappend (rev x) (Cons n lf8))).
Lemma candidate_1384: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (rev (qreva x (Cons n lf8))).
Lemma candidate_1385: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (lfappend (rev lf8) (Cons n x)).
Lemma candidate_1386: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (qreva lf8 (Cons n x)).
Lemma candidate_1387: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (qreva x Nil) (Cons n (rev y))))   (lfappend y (Cons n x)).
Lemma candidate_1388: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (qreva y Nil)))) (lfappend y (Cons n x)).
Lemma candidate_1389: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (rev (qreva (rev y) (Cons n x)))) (lfappend y (Cons n x)).
Lemma candidate_1390: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (rev (lfappend y (Cons n x)))) (lfappend y (Cons n x)).
Lemma candidate_1391: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (rev x) (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1392: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1393: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (lfappend y (Cons n (qreva (rev x) Nil))).
Lemma candidate_1394: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (lfappend y (rev (qreva x (Cons n Nil)))).
Lemma candidate_1395: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (lfappend y (rev (lfappend (rev x) (Cons n Nil)))).
Lemma candidate_1396: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (lfappend y (Cons n (rev (rev x)))).
Lemma candidate_1397: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1398: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (lfappend y (Cons n x)).
Lemma candidate_1399: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (lfappend y (Cons n x)).
Lemma candidate_1400: forall (n : natural) (y : lst) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n (Nil))) lf8)))   (lfappend y (Cons n x)).
Lemma candidate_1401: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (rev (rev x)))) (lfappend y (Cons n x)).
Lemma candidate_1402: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (lfappend x Nil))) (lfappend y (Cons n x)).
Lemma candidate_1403: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (rev x) (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1404: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_1405: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva (rev y) (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1406: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1407: forall (n : natural) (lf8 : lst), @eq lst (lfappend (rev (Cons n Nil)) lf8) (Cons n (qreva (rev lf8) Nil)).
Lemma candidate_1408: forall (n : natural) (lf8 : lst), @eq lst (lfappend (rev (Cons n Nil)) lf8) (rev (qreva lf8 (Cons n Nil))).
Lemma candidate_1409: forall (n : natural) (lf8 : lst), @eq lst (lfappend (rev (Cons n Nil)) lf8)   (rev (lfappend (rev lf8) (Cons n Nil))).
Lemma candidate_1410: forall (n : natural) (lf8 : lst), @eq lst (lfappend (rev (Cons n Nil)) lf8) (Cons n (rev (rev lf8))).
Lemma candidate_1411: forall (n : natural) (lf8 : lst), @eq lst (lfappend (rev (Cons n Nil)) lf8) (Cons n (lfappend lf8 Nil)).
Lemma candidate_1412: forall (n : natural) (lf8 : lst), @eq lst (lfappend (rev (Cons n Nil)) lf8) (Cons n lf8).
Lemma candidate_1413: forall (n : natural), @eq lst (rev (Cons n Nil)) (Cons n Nil).
Lemma candidate_1414: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (rev (rev x)))).
Lemma candidate_1415: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_1416: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (rev (lfappend (rev x) (Cons n (rev y)))).
Lemma candidate_1417: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (rev (qreva x (Cons n (rev y)))).
Lemma candidate_1418: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (qreva (rev y) (Cons n x)).
Lemma candidate_1419: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_1420: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) lf8))   (qreva x (Cons n (rev (rev lf8)))).
Lemma candidate_1421: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) lf8))   (qreva x (Cons n (lfappend lf8 Nil))).
Lemma candidate_1422: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) lf8))   (rev (lfappend (rev lf8) (Cons n x))).
Lemma candidate_1423: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) lf8))   (rev (qreva lf8 (Cons n x))).
Lemma candidate_1424: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) lf8))   (lfappend (rev x) (Cons n lf8)).
Lemma candidate_1425: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) lf8)) (qreva x (Cons n lf8)).
Lemma candidate_1426: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (qreva (rev x) Nil)).
Lemma candidate_1427: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (qreva x (Cons n Nil))).
Lemma candidate_1428: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (lfappend (rev x) (Cons n Nil))).
Lemma candidate_1429: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rev (rev x))).
Lemma candidate_1430: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_1431: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n x).
Lemma candidate_1432: forall (n : natural), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_1433: @eq lst Nil (Nil).
Lemma candidate_1434: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (qreva lf8 (Cons n (rev (rev x)))).
Lemma candidate_1435: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (qreva lf8 (Cons n (lfappend x Nil))).
Lemma candidate_1436: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (rev (lfappend (rev x) (Cons n lf8))).
Lemma candidate_1437: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (rev (qreva x (Cons n lf8))).
Lemma candidate_1438: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (lfappend (rev lf8) (Cons n x)).
Lemma candidate_1439: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (qreva lf8 (Cons n x)).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 7955 seconds
Duplicates removed: 1111
Filtered by Quickchick: 161
Filtered by script: 34
Remaining: 133

Lemmas: 
Lemma candidate_17: forall (lf4 : lst), @eq lst (rev (rev lf4)) lf4.
Lemma candidate_5: forall (lf1 : lst), @eq lst lf1 (rev (rev lf1)).
Lemma candidate_258: forall (y : lst), @eq lst (rev y) (qreva y Nil).
Lemma candidate_18: forall (lf4 : lst), @eq lst (lfappend lf4 Nil) lf4.
Lemma candidate_6: forall (lf1 : lst), @eq lst lf1 (lfappend lf1 Nil).
Lemma candidate_281: forall (lf6 : lst), @eq lst (rev lf6) (qreva lf6 Nil).
Lemma candidate_24: forall (lf2 : lst), @eq lst (rev lf2) (qreva lf2 Nil).
Lemma candidate_16: forall (lf4 : lst), @eq lst (qreva (rev lf4) Nil) lf4.
Lemma candidate_15: forall (lf4 : lst), @eq lst (rev (qreva lf4 Nil)) lf4.
Lemma candidate_4: forall (lf1 : lst), @eq lst lf1 (qreva (rev lf1) Nil).
Lemma candidate_3: forall (lf1 : lst), @eq lst lf1 (rev (qreva lf1 Nil)).
Lemma candidate_255: forall (y : lst), @eq lst (rev y) (rev (rev (rev y))).
Lemma candidate_257: forall (y : lst), @eq lst (rev y) (lfappend (rev y) Nil).
Lemma candidate_256: forall (y : lst), @eq lst (rev y) (rev (lfappend y Nil)).
Lemma candidate_27: forall (lf4 : lst), @eq lst (rev (rev (rev (rev lf4)))) lf4.
Lemma candidate_21: forall (lf2 : lst), @eq lst (rev lf2) (rev (rev (rev lf2))).
Lemma candidate_14: forall (lf4 : lst), @eq lst (qreva (qreva lf4 Nil) Nil) lf4.
Lemma candidate_2: forall (lf1 : lst), @eq lst lf1 (qreva (qreva lf1 Nil) Nil).
Lemma candidate_125: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rev (rev x))).
Lemma candidate_49: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (qreva lf3 x).
Lemma candidate_41: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (rev (qreva lf3 x)).
Lemma candidate_29: forall (lf4 : lst), @eq lst (rev (lfappend (rev lf4) Nil)) lf4.
Lemma candidate_28: forall (lf4 : lst), @eq lst (rev (rev (lfappend lf4 Nil))) lf4.
Lemma candidate_23: forall (lf2 : lst), @eq lst (rev lf2) (lfappend (rev lf2) Nil).
Lemma candidate_22: forall (lf2 : lst), @eq lst (rev lf2) (rev (lfappend lf2 Nil)).
Lemma candidate_254: forall (y : lst), @eq lst (rev y) (lfappend (qreva y Nil) Nil).
Lemma candidate_126: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_60: forall (lf7 : lst) (y : lst), @eq lst (qreva (rev y) lf7) (lfappend y lf7).
Lemma candidate_42: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (lfappend (rev x) lf3).
Lemma candidate_12: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (qreva (rev y) lf7).
Lemma candidate_123: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (qreva x (Cons n Nil))).
Lemma candidate_122: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (qreva (rev x) Nil)).
Lemma candidate_39: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (qreva x (rev (rev lf3))).
Lemma candidate_301: forall (lf8 : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) lf8) (qreva lf6 lf8).
Lemma candidate_215: forall (lf5 : lst) (lf8 : lst), @eq lst (lfappend lf5 lf8) (qreva (rev lf5) lf8).
Lemma candidate_26: forall (lf4 : lst), @eq lst (rev (lfappend (qreva lf4 Nil) Nil)) lf4.
Lemma candidate_20: forall (lf2 : lst), @eq lst (rev lf2) (lfappend (qreva lf2 Nil) Nil).
Lemma candidate_48: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (lfappend (rev lf3) x).
Lemma candidate_40: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (qreva x (lfappend lf3 Nil)).
Lemma candidate_78: forall (lf7 : lst) (y : lst), @eq lst (rev (rev (lfappend y lf7))) (lfappend y lf7).
Lemma candidate_57: forall (lf7 : lst) (y : lst), @eq lst (lfappend y (rev (rev lf7))) (lfappend y lf7).
Lemma candidate_45: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (qreva lf3 (rev (rev x))).
Lemma candidate_9: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y (rev (rev lf7))).
Lemma candidate_297: forall (lf8 : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) lf8) (rev (qreva lf8 lf6)).
Lemma candidate_367: forall (y : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) (rev y)) (qreva lf6 (rev y)).
Lemma candidate_243: forall (y : lst) (lf5 : lst), @eq lst (lfappend lf5 (rev y)) (qreva (rev lf5) (rev y)).
Lemma candidate_124: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (lfappend (rev x) (Cons n Nil))).
Lemma candidate_76: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva lf7 (qreva y Nil))) (lfappend y lf7).
Lemma candidate_58: forall (lf7 : lst) (y : lst), @eq lst (lfappend y (lfappend lf7 Nil)) (lfappend y lf7).
Lemma candidate_46: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (qreva lf3 (lfappend x Nil)).
Lemma candidate_10: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (lfappend y (lfappend lf7 Nil)).
Lemma candidate_138: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva (rev y) (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_120: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (qreva (rev y) (Cons n x)).
Lemma candidate_365: forall (y : lst) (lf6 : lst), @eq lst (lfappend (rev lf6) (rev y)) (rev (lfappend y lf6)).
Lemma candidate_244: forall (y : lst) (lf5 : lst), @eq lst (lfappend lf5 (rev y)) (rev (lfappend y (rev lf5))).
Lemma candidate_77: forall (lf7 : lst) (y : lst), @eq lst (rev (lfappend (rev lf7) (rev y))) (lfappend y lf7).
Lemma candidate_74: forall (lf7 : lst) (y : lst), @eq lst (rev (qreva (lfappend y lf7) Nil)) (lfappend y lf7).
Lemma candidate_56: forall (lf7 : lst) (y : lst), @eq lst (qreva (rev y) (lfappend lf7 Nil)) (lfappend y lf7).
Lemma candidate_38: forall (lf3 : lst) (x : lst), @eq lst (qreva x lf3) (lfappend (rev x) (lfappend lf3 Nil)).
Lemma candidate_8: forall (lf7 : lst) (y : lst), @eq lst (lfappend y lf7) (qreva (rev y) (lfappend lf7 Nil)).
Lemma candidate_218: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (qreva x (lfappend lf5 lf8)) (qreva (qreva lf5 x) lf8).
Lemma candidate_219: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (qreva x (lfappend lf5 lf8)) (lfappend (qreva x lf5) lf8).
Lemma candidate_75: forall (lf7 : lst) (y : lst), @eq lst (rev (lfappend (rev lf7) (qreva y Nil))) (lfappend y lf7).
Lemma candidate_44: forall (lf3 : lst) (x : lst), @eq lst (rev (qreva x lf3)) (lfappend (rev lf3) (lfappend x Nil)).
Lemma candidate_450: forall (n : natural) (lf8 : lst), @eq lst (lfappend (rev (Cons n Nil)) lf8) (Cons n (rev (rev lf8))).
Lemma candidate_327: forall (n : natural) (lf9 : lst) (lf8 : lst), @eq lst (lfappend (rev (Cons n lf9)) lf8) (qreva lf9 (Cons n lf8)).
Lemma candidate_161: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (rev (lfappend y (Cons n x)))) (lfappend y (Cons n x)).
Lemma candidate_134: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (rev (rev x)))) (lfappend y (Cons n x)).
Lemma candidate_116: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (rev (rev x)))).
Lemma candidate_486: forall (n : natural) (y : lst), @eq lst (lfappend (rev (Cons n Nil)) (rev y)) (Cons n (qreva y Nil)).
Lemma candidate_295: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) lf8)) (qreva x (qreva lf6 lf8)).
Lemma candidate_229: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (qreva lf8 (qreva lf5 x)).
Lemma candidate_451: forall (n : natural) (lf8 : lst), @eq lst (lfappend (rev (Cons n Nil)) lf8) (Cons n (lfappend lf8 Nil)).
Lemma candidate_160: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (rev (qreva (rev y) (Cons n x)))) (lfappend y (Cons n x)).
Lemma candidate_159: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (qreva y Nil)))) (lfappend y (Cons n x)).
Lemma candidate_135: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (lfappend x Nil))) (lfappend y (Cons n x)).
Lemma candidate_117: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_224: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (qreva (lfappend lf5 lf8) x).
Lemma candidate_447: forall (n : natural) (lf8 : lst), @eq lst (lfappend (rev (Cons n Nil)) lf8) (Cons n (qreva (rev lf8) Nil)).
Lemma candidate_261: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (qreva x (lfappend lf5 (rev y))) (rev (lfappend y (qreva lf5 x))).
Lemma candidate_253: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (lfappend y (qreva lf5 x)).
Lemma candidate_136: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (rev x) (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_118: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (rev (lfappend (rev x) (Cons n (rev y)))).
Lemma candidate_284: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (qreva (qreva lf6 lf8) x).
Lemma candidate_220: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (qreva x (lfappend lf5 lf8)) (lfappend (rev x) (lfappend lf5 lf8)).
Lemma candidate_373: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) (rev y))) (qreva x (qreva lf6 (rev y))).
Lemma candidate_251: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y)))) (qreva (rev y) (qreva lf5 x)).
Lemma candidate_485: forall (n : natural) (y : lst), @eq lst (lfappend (rev (Cons n Nil)) (rev y)) (Cons n (lfappend (rev y) Nil)).
Lemma candidate_483: forall (n : natural) (y : lst), @eq lst (lfappend (rev (Cons n Nil)) (rev y)) (rev (lfappend y (Cons n Nil))).
Lemma candidate_293: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) lf8)) (lfappend (rev x) (qreva lf6 lf8)).
Lemma candidate_288: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (qreva lf8 (lfappend lf6 x)).
Lemma candidate_285: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8))) (lfappend (qreva lf8 lf6) x).
Lemma candidate_227: forall (x : lst) (lf5 : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend lf5 lf8))) (lfappend (rev lf8) (qreva lf5 x)).
Lemma candidate_1209: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (Cons n Nil) (rev y))))   (lfappend y (Cons n x)).
Lemma candidate_1003: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y))))   (lfappend y (rev (qreva x lf5))).
Lemma candidate_951: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (Cons n (lfappend (rev y) Nil))))   (lfappend y (Cons n x)).
Lemma candidate_949: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (rev (lfappend y (Cons n Nil)))))   (lfappend y (Cons n x)).
Lemma candidate_158: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (qreva x Nil) (Cons n (rev y))))   (lfappend y (Cons n x)).
Lemma candidate_467: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (qreva lf8 (Cons n x)).
Lemma candidate_457: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) lf8))   (rev (qreva lf8 (Cons n x))).
Lemma candidate_449: forall (n : natural) (lf8 : lst), @eq lst (lfappend (rev (Cons n Nil)) lf8)   (rev (lfappend (rev lf8) (Cons n Nil))).
Lemma candidate_1004: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y))))   (lfappend y (lfappend (rev lf5) x)).
Lemma candidate_948: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (rev (qreva (rev y) (Cons n Nil)))))   (lfappend y (Cons n x)).
Lemma candidate_384: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (lfappend y (lfappend lf6 x)).
Lemma candidate_381: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (lfappend (lfappend y lf6) x).
Lemma candidate_368: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) (rev y)))   (rev (lfappend y (lfappend lf6 x))).
Lemma candidate_262: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (qreva x (lfappend lf5 (rev y)))   (lfappend (rev x) (lfappend lf5 (rev y))).
Lemma candidate_248: forall (y : lst) (x : lst) (lf5 : lst), @eq lst (rev (qreva x (lfappend lf5 (rev y))))   (lfappend (lfappend y (rev lf5)) x).
Lemma candidate_458: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) lf8))   (lfappend (rev x) (Cons n lf8)).
Lemma candidate_1231: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (lfappend y (qreva (rev lf6) x)).
Lemma candidate_497: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) (rev y)))   (rev (lfappend y (Cons n x))).
Lemma candidate_382: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (qreva (rev y) (lfappend lf6 x)).
Lemma candidate_371: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (qreva x (lfappend (rev lf6) (rev y)))   (lfappend (rev x) (qreva lf6 (rev y))).
Lemma candidate_454: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) lf8))   (qreva x (Cons n (rev (rev lf8)))).
Lemma candidate_286: forall (x : lst) (lf8 : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) lf8)))   (lfappend (rev lf8) (lfappend lf6 x)).
Lemma candidate_496: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) (rev y)))   (rev (qreva (rev y) (Cons n x))).
Lemma candidate_495: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) (rev y)))   (qreva x (Cons n (qreva y Nil))).
Lemma candidate_492: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))   (qreva (rev y) (Cons n x)).
Lemma candidate_484: forall (n : natural) (y : lst), @eq lst (lfappend (rev (Cons n Nil)) (rev y))   (rev (lfappend (rev (rev y)) (Cons n Nil))).
Lemma candidate_466: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (lfappend (rev lf8) (Cons n x)).
Lemma candidate_456: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) lf8))   (rev (lfappend (rev lf8) (Cons n x))).
Lemma candidate_455: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) lf8))   (qreva x (Cons n (lfappend lf8 Nil))).
Lemma candidate_1228: forall (y : lst) (x : lst) (lf6 : lst), @eq lst (rev (qreva x (lfappend (rev lf6) (rev y))))   (lfappend y (rev (qreva x (rev lf6)))).
Lemma candidate_950: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (rev (lfappend (rev (rev y)) (Cons n Nil)))))   (lfappend y (Cons n x)).
Lemma candidate_498: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) (rev y)))   (lfappend (rev x) (Cons n (rev y))).
Lemma candidate_462: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (qreva lf8 (Cons n (rev (rev x)))).
Lemma candidate_464: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (rev (lfappend (rev x) (Cons n lf8))).
Lemma candidate_463: forall (n : natural) (x : lst) (lf8 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) lf8)))   (qreva lf8 (Cons n (lfappend x Nil))).
Lemma candidate_494: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva x (lfappend (rev (Cons n Nil)) (rev y)))   (lfappend (qreva x Nil) (Cons n (rev y))).
Lemma candidate_488: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))   (lfappend y (Cons n (rev (rev x)))).
Lemma candidate_1302: forall (n : natural) (y : lst) (x : lst) (lf9 : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n lf9)) (rev y))))   (lfappend y (Cons n (lfappend lf9 x))).
Lemma candidate_489: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_490: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (qreva x (lfappend (rev (Cons n Nil)) (rev y))))   (rev (lfappend (rev x) (Cons n (rev y)))).