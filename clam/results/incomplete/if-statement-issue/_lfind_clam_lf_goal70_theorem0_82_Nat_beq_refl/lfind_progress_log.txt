File Information
- File name: goal70
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal70_theorem0_82_Nat_beq_refl
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal70_theorem0_82_Nat_beq_refl
- Namespace: adtind
- Proof name: theorem0
- Theorem: Theorem theorem0: forall (x0 : natural) (y0 : lst),
@eq natural (count (insort y0 x0) x0) (Succ (count y0 x0)).
- Declarations: 
From lfind Require Import LFind.

Proof Context
* Goal State: @eq natural
  (if lfeqb x x
   then Succ (if lfeqb x n then Succ (count y x) else count y x)
   else if lfeqb x n then Succ (count y x) else count y x) 
  (Succ (count y x))

* Hypothesis:
Heqb : @eq bool (lfeqb x n) false
x : natural
Heqb0 : @eq bool (less x n) true
y : lst
n : natural
IHy : @eq natural (count (insort y x) x) (Succ (count y x))

* Types:
Set
natural
Prop
lst
forall _ : bool, Set
bool

* Polymorphic Types:


* Variables:
x : natural
y : lst
n : natural

* Terms:
if lfeqb x n then Succ (count y x) else count y x : natural
less x n : bool
x : natural
fun _ : bool => natural : forall _ : bool, Set
@eq natural (count (insort y x) x) (Succ (count y x)) : Prop
y : lst
insort y x : lst
@eq bool (lfeqb x n) false : Prop
true : bool
if lfeqb x x
then Succ (if lfeqb x n then Succ (count y x) else count y x)
else if lfeqb x n then Succ (count y x) else count y x : natural
Succ (count y x) : natural
false : bool
bool : Set
lfeqb x x : bool
count y x : natural
@eq bool (less x n) true : Prop
Succ (if lfeqb x n then Succ (count y x) else count y x) : natural
lst : Set
@eq natural
  (if lfeqb x x
   then Succ (if lfeqb x n then Succ (count y x) else count y x)
   else if lfeqb x n then Succ (count y x) else count y x) 
  (Succ (count y x)) : Prop
count (insort y x) x : natural
lfeqb x n : bool
natural : Set
n : natural

* Functions:
Succ  : forall _ : natural, natural
count  : forall (_ : lst) (_ : natural), natural
lfeqb  : forall (_ : natural) (_ : natural), bool
less  : forall (_ : natural) (_ : natural), bool
@eq  : forall (A : Type) (_ : A) (_ : A), Prop
insort  : forall (_ : lst) (_ : natural), lst

<---GENERALIZATION--->
Time elapsed: 2 seconds
Generalized Variables:
lf3 : natural = if lfeqb x n then Succ (count y x) else count y x
lf7 : natural = count y x
lf1 : natural = if lfeqb x x
then Succ (if lfeqb x n then Succ (count y x) else count y x)
else if lfeqb x n then Succ (count y x) else count y x
lf4 : forall _ : bool, Set = fun _ : bool => natural
lf5 : natural = Succ (count y x)
lf2 : natural = Succ (if lfeqb x n then Succ (count y x) else count y x)
lf8 : bool = lfeqb x n
lf6 : bool = lfeqb x x

Generalizations:
Lemma conj1: forall (lf5 : natural), @eq natural (if lf6 then lf2 else lf3) lf5.
Lemma conj2: forall (lf5 : natural), @eq natural (if lfeqb x x then lf2 else lf3) lf5.
Lemma conj5: forall (lf5 : natural), @eq natural (if lf6 then Succ lf3 else lf3) lf5.
Lemma conj6: forall (lf5 : natural), @eq natural (if lfeqb x x then Succ lf3 else lf3) lf5.
Lemma conj9: forall (lf7 : natural), @eq natural (if lf6 then lf2 else lf3) (Succ lf7).
Lemma conj10: forall (lf7 : natural), @eq natural (if lfeqb x x then lf2 else lf3) (Succ lf7).
Lemma conj13: forall (lf7 : natural), @eq natural (if lf6 then Succ lf3 else lf3) (Succ lf7).
Lemma conj14: forall (lf7 : natural), @eq natural (if lfeqb x x then Succ lf3 else lf3) (Succ lf7).
Lemma conj73: forall (x : natural) (y : lst), @eq natural (if lf6 then lf2 else lf3) (Succ (count y x)).
Lemma conj74: forall (x : natural) (y : lst), @eq natural (if lfeqb x x then lf2 else lf3) (Succ (count y x)).
Lemma conj77: forall (x : natural) (y : lst), @eq natural (if lf6 then Succ lf3 else lf3) (Succ (count y x)).
Lemma conj78: forall (x : natural) (y : lst), @eq natural (if lfeqb x x then Succ lf3 else lf3) (Succ (count y x)).
Lemma conj129: forall (lf5 : natural), @eq natural (if lf6 then lf2 else if lf8 then lf5 else lf7) lf5.
Lemma conj130: forall (lf5 : natural), @eq natural (if lfeqb x x then lf2 else if lf8 then lf5 else lf7) lf5.
Lemma conj131: forall (lf5 : natural), @eq natural (if lf6 then lf2 else if lfeqb x n then lf5 else lf7) lf5.
Lemma conj132: forall (lf5 : natural), @eq natural (if lfeqb x x then lf2 else if lfeqb x n then lf5 else lf7) lf5.
Lemma conj133: forall (lf5 : natural), @eq natural
  (if lf6 then Succ (if lf8 then lf5 else lf7) else if lf8 then lf5 else lf7)
  lf5.
Lemma conj134: forall (lf5 : natural), @eq natural
  (if lfeqb x x
   then Succ (if lf8 then lf5 else lf7)
   else if lf8 then lf5 else lf7) lf5.
Lemma conj135: forall (lf5 : natural), @eq natural
  (if lf6
   then Succ (if lfeqb x n then lf5 else lf7)
   else if lfeqb x n then lf5 else lf7) lf5.
Lemma conj136: forall (lf5 : natural), @eq natural
  (if lfeqb x x
   then Succ (if lfeqb x n then lf5 else lf7)
   else if lfeqb x n then lf5 else lf7) lf5.
Lemma conj137: forall (lf7 : natural), @eq natural (if lf6 then lf2 else if lf8 then Succ lf7 else lf7) (Succ lf7).
Lemma conj138: forall (lf7 : natural), @eq natural (if lfeqb x x then lf2 else if lf8 then Succ lf7 else lf7)
  (Succ lf7).
Lemma conj139: forall (lf7 : natural), @eq natural (if lf6 then lf2 else if lfeqb x n then Succ lf7 else lf7)
  (Succ lf7).
Lemma conj140: forall (lf7 : natural), @eq natural (if lfeqb x x then lf2 else if lfeqb x n then Succ lf7 else lf7)
  (Succ lf7).
Lemma conj141: forall (lf7 : natural), @eq natural
  (if lf6
   then Succ (if lf8 then Succ lf7 else lf7)
   else if lf8 then Succ lf7 else lf7) (Succ lf7).
Lemma conj142: forall (lf7 : natural), @eq natural
  (if lfeqb x x
   then Succ (if lf8 then Succ lf7 else lf7)
   else if lf8 then Succ lf7 else lf7) (Succ lf7).
Lemma conj143: forall (lf7 : natural), @eq natural
  (if lf6
   then Succ (if lfeqb x n then Succ lf7 else lf7)
   else if lfeqb x n then Succ lf7 else lf7) (Succ lf7).
Lemma conj144: forall (lf7 : natural), @eq natural
  (if lfeqb x x
   then Succ (if lfeqb x n then Succ lf7 else lf7)
   else if lfeqb x n then Succ lf7 else lf7) (Succ lf7).
Lemma conj193: forall (lf5 : natural), @eq natural (if lf6 then lf2 else if lf8 then lf5 else count y x) lf5.
Lemma conj194: forall (lf5 : natural), @eq natural (if lfeqb x x then lf2 else if lf8 then lf5 else count y x) lf5.
Lemma conj195: forall (lf5 : natural), @eq natural (if lf6 then lf2 else if lfeqb x n then lf5 else count y x) lf5.
Lemma conj196: forall (lf5 : natural), @eq natural (if lfeqb x x then lf2 else if lfeqb x n then lf5 else count y x)
  lf5.
Lemma conj197: forall (lf5 : natural), @eq natural
  (if lf6
   then Succ (if lf8 then lf5 else count y x)
   else if lf8 then lf5 else count y x) lf5.
Lemma conj198: forall (lf5 : natural), @eq natural
  (if lfeqb x x
   then Succ (if lf8 then lf5 else count y x)
   else if lf8 then lf5 else count y x) lf5.
Lemma conj199: forall (lf5 : natural), @eq natural
  (if lf6
   then Succ (if lfeqb x n then lf5 else count y x)
   else if lfeqb x n then lf5 else count y x) lf5.
Lemma conj200: forall (lf5 : natural), @eq natural
  (if lfeqb x x
   then Succ (if lfeqb x n then lf5 else count y x)
   else if lfeqb x n then lf5 else count y x) lf5.
Lemma conj201: forall (x : natural) (y : lst), @eq natural
  (if lf6 then lf2 else if lf8 then Succ (count y x) else count y x)
  (Succ (count y x)).
Lemma conj202: forall (x : natural) (y : lst), @eq natural
  (if lfeqb x x then lf2 else if lf8 then Succ (count y x) else count y x)
  (Succ (count y x)).
Lemma conj203: forall (x : natural) (y : lst), @eq natural
  (if lf6 then lf2 else if lfeqb x n then Succ (count y x) else count y x)
  (Succ (count y x)).
Lemma conj204: forall (x : natural) (y : lst), @eq natural
  (if lfeqb x x
   then lf2
   else if lfeqb x n then Succ (count y x) else count y x) 
  (Succ (count y x)).
Lemma conj205: forall (x : natural) (y : lst), @eq natural
  (if lf6
   then Succ (if lf8 then Succ (count y x) else count y x)
   else if lf8 then Succ (count y x) else count y x) 
  (Succ (count y x)).
Lemma conj206: forall (x : natural) (y : lst), @eq natural
  (if lfeqb x x
   then Succ (if lf8 then Succ (count y x) else count y x)
   else if lf8 then Succ (count y x) else count y x) 
  (Succ (count y x)).
Lemma conj207: forall (x : natural) (y : lst), @eq natural
  (if lf6
   then Succ (if lfeqb x n then Succ (count y x) else count y x)
   else if lfeqb x n then Succ (count y x) else count y x) 
  (Succ (count y x)).
Lemma conj208: forall (x : natural) (y : lst), @eq natural
  (if lfeqb x x
   then Succ (if lfeqb x n then Succ (count y x) else count y x)
   else if lfeqb x n then Succ (count y x) else count y x) 
  (Succ (count y x)).