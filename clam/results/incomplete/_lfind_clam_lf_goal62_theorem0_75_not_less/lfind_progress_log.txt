File Information
- File name: goal62
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal62_theorem0_75_not_less
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal62_theorem0_75_not_less
- Namespace: adtind
- Proof name: theorem0
- Theorem: Theorem theorem0: forall (x0 : lst) (y0 : natural) (_ : @eq bool (sorted x0) true),
@eq bool (sorted (insort y0 x0)) true.
- Declarations: 
From lfind Require Import LFind.
Require Import Arith.

Proof Context
* Goal State: @eq bool
  match (if less y n0 then Cons y (Cons n0 x) else Cons n0 (insort y x)) with
  | Cons z _ =>
      andb
        (sorted
           (if less y n0 then Cons y (Cons n0 x) else Cons n0 (insort y x)))
        (leq n z)
  | Nil => true
  end true

* Hypothesis:
IHx : forall _ : @eq bool (sorted (Cons n0 x)) true,
@eq bool (sorted (insort y (Cons n0 x))) true
Heqb : @eq bool (less y n) false
x : lst
H : @eq bool (sorted (Cons n (Cons n0 x))) true
y : natural
n : natural
n0 : natural

* Types:
Set
natural
Prop
forall _ : lst, Set
lst
forall _ : lst, bool
forall _ : bool, Set
bool
forall (_ : natural) (_ : lst), bool

* Polymorphic Types:


* Variables:
x : lst
y : natural
n : natural
n0 : natural

* Terms:
sorted (if less y n0 then Cons y (Cons n0 x) else Cons n0 (insort y x)) : bool
x : lst
y : natural
@eq bool
  match (if less y n0 then Cons y (Cons n0 x) else Cons n0 (insort y x)) with
  | Cons z _ =>
      andb
        (sorted
           (if less y n0 then Cons y (Cons n0 x) else Cons n0 (insort y x)))
        (leq n z)
  | Nil => true
  end true : Prop
true : bool
sorted (Cons n0 x) : bool
sorted (Cons n (Cons n0 x)) : bool
@eq bool (less y n) false : Prop
fun _ : lst =>
andb
  (sorted (if less y n0 then Cons y (Cons n0 x) else Cons n0 (insort y x)))
  (leq n _UNBOUND_REL_2) : forall _ : lst, bool
Cons n (Cons n0 x) : lst
lst : Set
n : natural
if less y n0 then Cons y (Cons n0 x) else Cons n0 (insort y x) : lst
leq n _UNBOUND_REL_2 : bool
fun _ : bool => lst : forall _ : bool, Set
match (if less y n0 then Cons y (Cons n0 x) else Cons n0 (insort y x)) with
| Cons z _ =>
    andb
      (sorted
         (if less y n0 then Cons y (Cons n0 x) else Cons n0 (insort y x)))
      (leq n z)
| Nil => true
end : bool
andb
  (sorted (if less y n0 then Cons y (Cons n0 x) else Cons n0 (insort y x)))
  (leq n _UNBOUND_REL_2) : bool
insort y (Cons n0 x) : lst
Cons n0 (insort y x) : lst
Cons y (Cons n0 x) : lst
insort y x : lst
Cons n0 x : lst
@eq bool (sorted (insort y (Cons n0 x))) true : Prop
@eq bool (sorted (Cons n0 x)) true : Prop
fun (z : natural) (_ : lst) =>
andb
  (sorted (if less y n0 then Cons y (Cons n0 x) else Cons n0 (insort y x)))
  (leq n z) : forall (_ : natural) (_ : lst), bool
less y n0 : bool
false : bool
bool : Set
fun _ : lst => bool : forall _ : lst, Set
less y n : bool
@eq bool (sorted (Cons n (Cons n0 x))) true : Prop
forall _ : @eq bool (sorted (Cons n0 x)) true,
@eq bool (sorted (insort y (Cons n0 x))) true : Prop
natural : Set
sorted (insort y (Cons n0 x)) : bool
n0 : natural

* Functions:
sorted  : forall _ : lst, bool
andb  : forall (_ : bool) (_ : bool), bool
leq  : forall (_ : natural) (_ : natural), bool
less  : forall (_ : natural) (_ : natural), bool
insort  : forall (_ : natural) (_ : lst), lst
Cons  : forall (_ : natural) (_ : lst), lst
@eq  : forall (A : Type) (_ : A) (_ : A), Prop