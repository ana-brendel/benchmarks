File Information
- File name: goal9
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal9_drop_Cons_assoc_37_drop_Nil
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal9_drop_Cons_assoc_37_drop_Nil
- Namespace: adtind
- Proof name: drop_Cons_assoc
- Theorem: Theorem drop_Cons_assoc: forall (x0 x4 x5 : natural) (l : lst),
@eq lst (drop x0 (drop x4 (Cons x5 l))) (drop x4 (drop x0 (Cons x5 l))).
- Declarations: 
From lfind Require Import LFind.

Proof Context
* Goal State: @eq lst match drop x2 Nil with
        | Cons _ z => drop x1 z
        | Nil => Nil
        end match drop x1 Nil with
            | Cons _ z => drop x2 z
            | Nil => Nil
            end

* Hypothesis:
IHx2 : forall (x0 : natural) (l : lst),
@eq lst (drop (Succ x1) (drop x2 (Cons x0 l)))
  (drop x2 (drop (Succ x1) (Cons x0 l)))
x3 : natural
x1 : natural
x2 : natural
IHx1 : forall (x0 x4 : natural) (l : lst),
@eq lst (drop x1 (drop x0 (Cons x4 l))) (drop x0 (drop x1 (Cons x4 l)))

* Types:
Set
natural
Prop
forall _ : lst, Set
forall (_ : natural) (_ : lst), lst
forall _ : lst, lst
lst

* Polymorphic Types:


* Variables:
x1 : natural
x2 : natural

* Terms:
fun (_ : natural) (z : lst) => drop x2 z : forall (_ : natural) (_ : lst), lst
drop x1 (drop _UNBOUND_REL_3 (Cons _UNBOUND_REL_2 _UNBOUND_REL_1)) : lst
drop x1 (Cons _UNBOUND_REL_2 _UNBOUND_REL_1) : lst
@eq lst (drop x1 (drop _UNBOUND_REL_3 (Cons _UNBOUND_REL_2 _UNBOUND_REL_1)))
  (drop _UNBOUND_REL_3 (drop x1 (Cons _UNBOUND_REL_2 _UNBOUND_REL_1))) : Prop
@eq lst match drop x2 Nil with
        | Cons _ z => drop x1 z
        | Nil => Nil
        end match drop x1 Nil with
            | Cons _ z => drop x2 z
            | Nil => Nil
            end : Prop
fun _ : lst => lst : forall _ : lst, Set
x1 : natural
drop x2 (drop (Succ x1) (Cons _UNBOUND_REL_2 _UNBOUND_REL_1)) : lst
lst : Set
forall (x0 x4 : natural) (l : lst),
@eq lst (drop x1 (drop x0 (Cons x4 l))) (drop x0 (drop x1 (Cons x4 l))) : Prop
x2 : natural
forall l : lst,
@eq lst (drop x1 (drop _UNBOUND_REL_3 (Cons _UNBOUND_REL_2 l)))
  (drop _UNBOUND_REL_3 (drop x1 (Cons _UNBOUND_REL_2 l))) : Prop
match drop x1 Nil with
| Cons _ z => drop x2 z
| Nil => Nil
end : lst
drop x2 (Cons _UNBOUND_REL_2 _UNBOUND_REL_1) : lst
match drop x2 Nil with
| Cons _ z => drop x1 z
| Nil => Nil
end : lst
@eq lst (drop (Succ x1) (drop x2 (Cons _UNBOUND_REL_2 _UNBOUND_REL_1)))
  (drop x2 (drop (Succ x1) (Cons _UNBOUND_REL_2 _UNBOUND_REL_1))) : Prop
forall (x0 : natural) (l : lst),
@eq lst (drop (Succ x1) (drop x2 (Cons x0 l)))
  (drop x2 (drop (Succ x1) (Cons x0 l))) : Prop
forall l : lst,
@eq lst (drop (Succ x1) (drop x2 (Cons _UNBOUND_REL_2 l)))
  (drop x2 (drop (Succ x1) (Cons _UNBOUND_REL_2 l))) : Prop
fun z : lst => drop x1 z : forall _ : lst, lst
drop x1 _UNBOUND_REL_1 : lst
drop x2 Nil : lst
drop (Succ x1) (drop x2 (Cons _UNBOUND_REL_2 _UNBOUND_REL_1)) : lst
fun z : lst => drop x2 z : forall _ : lst, lst
drop _UNBOUND_REL_3 (Cons _UNBOUND_REL_2 _UNBOUND_REL_1) : lst
drop x1 Nil : lst
fun (_ : natural) (z : lst) => drop x1 z : forall (_ : natural) (_ : lst), lst
forall (x0 : natural) (l : lst),
@eq lst (drop x1 (drop _UNBOUND_REL_3 (Cons x0 l)))
  (drop _UNBOUND_REL_3 (drop x1 (Cons x0 l))) : Prop
Cons _UNBOUND_REL_2 _UNBOUND_REL_1 : lst
drop _UNBOUND_REL_3 (drop x1 (Cons _UNBOUND_REL_2 _UNBOUND_REL_1)) : lst
drop (Succ x1) (Cons _UNBOUND_REL_2 _UNBOUND_REL_1) : lst
natural : Set
Succ x1 : natural
drop x2 _UNBOUND_REL_1 : lst
Nil : lst

* Functions:
Succ  : forall _ : natural, natural
drop  : forall (_ : natural) (_ : lst), lst
@eq  : forall (A : Type) (_ : A) (_ : A), Prop
Cons  : forall (_ : natural) (_ : lst), lst