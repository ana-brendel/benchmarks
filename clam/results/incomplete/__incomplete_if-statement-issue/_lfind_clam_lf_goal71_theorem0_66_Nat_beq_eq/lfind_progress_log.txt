File Information
- File name: goal71
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal71_theorem0_66_Nat_beq_eq
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal71_theorem0_66_Nat_beq_eq
- Namespace: adtind
- Proof name: theorem0
- Theorem: Theorem theorem0: forall (x0 y0 : natural) (z0 : lst) (_ : not (@eq natural x0 y0)),
@eq natural (count x0 (insort y0 z0)) (count x0 z0).
- Declarations: 
From lfind Require Import LFind.

Proof Context
* Goal State: @eq natural (Succ (if eqb x n then Succ (count x z) else count x z))
  (Succ (count x z))

* Hypothesis:
IHz : @eq natural (count x (insort y z)) (count x z)
Heqb : @eq bool (eqb x n) true
x : natural
H : not (@eq natural x y)
Heqb0 : @eq bool (less y n) true
y : natural
Heqb1 : @eq bool (eqb x y) true
z : lst
n : natural

* Types:
Set
natural
Prop
lst
forall _ : bool, Set
bool

* Polymorphic Types:


* Variables:
x : natural
y : natural
z : lst
n : natural

* Terms:
count x z : natural
if eqb x n then Succ (count x z) else count x z : natural
@eq natural x y : Prop
not (@eq natural x y) : Prop
Succ (count x z) : natural
x : natural
@eq natural (Succ (if eqb x n then Succ (count x z) else count x z))
  (Succ (count x z)) : Prop
insort y z : lst
count x (insort y z) : natural
fun _ : bool => natural : forall _ : bool, Set
Succ (if eqb x n then Succ (count x z) else count x z) : natural
y : natural
true : bool
eqb x n : bool
@eq bool (eqb x y) true : Prop
eqb x y : bool
bool : Set
less y n : bool
lst : Set
@eq bool (less y n) true : Prop
z : lst
natural : Set
n : natural
@eq bool (eqb x n) true : Prop
@eq natural (count x (insort y z)) (count x z) : Prop

* Functions:
eqb  : forall (_ : natural) (_ : natural), bool
Succ  : forall _ : natural, natural
count  : forall (_ : natural) (_ : lst), natural
less  : forall (_ : natural) (_ : natural), bool
not  : forall _ : Prop, Prop
@eq  : forall (A : Type) (_ : A) (_ : A), Prop
insort  : forall (_ : natural) (_ : lst), lst

<---GENERALIZATION--->
Time elapsed: 2 seconds
Generalized Variables:
lf3 : forall _ : bool, Set = fun _ : bool => natural
lf1 : natural = Succ (if eqb x n then Succ (count x z) else count x z)
lf4 : natural = Succ (count x z)
lf5 : natural = count x z
lf2 : natural = if eqb x n then Succ (count x z) else count x z
lf6 : bool = eqb x n

Generalizations:
Lemma conj1: forall (lf4 : natural) (lf1 : natural), @eq natural lf1 lf4.
Lemma conj9: forall (lf5 : natural) (lf1 : natural), @eq natural lf1 (Succ lf5).
Lemma conj13: forall (x : natural) (lf1 : natural) (z : lst), @eq natural lf1 (Succ (count x z)).
Lemma conj17: forall (lf2 : natural) (lf4 : natural), @eq natural (Succ lf2) lf4.
Lemma conj19: forall (lf4 : natural), @eq natural (Succ (if lf6 then lf4 else lf5)) lf4.
Lemma conj20: forall (lf4 : natural), @eq natural (Succ (if eqb x n then lf4 else lf5)) lf4.
Lemma conj23: forall (lf4 : natural), @eq natural (Succ (if lf6 then lf4 else count x z)) lf4.
Lemma conj24: forall (lf4 : natural), @eq natural (Succ (if eqb x n then lf4 else count x z)) lf4.
Lemma conj25: forall (lf2 : natural) (lf5 : natural), @eq natural (Succ lf2) (Succ lf5).
Lemma conj27: forall (lf5 : natural), @eq natural (Succ (if lf6 then Succ lf5 else lf5)) (Succ lf5).
Lemma conj28: forall (lf5 : natural), @eq natural (Succ (if eqb x n then Succ lf5 else lf5)) (Succ lf5).
Lemma conj29: forall (lf2 : natural) (x : natural) (z : lst), @eq natural (Succ lf2) (Succ (count x z)).
Lemma conj31: forall (x : natural) (z : lst), @eq natural (Succ (if lf6 then Succ (count x z) else count x z))
  (Succ (count x z)).
Lemma conj32: forall (x : natural) (z : lst), @eq natural (Succ (if eqb x n then Succ (count x z) else count x z))
  (Succ (count x z)).