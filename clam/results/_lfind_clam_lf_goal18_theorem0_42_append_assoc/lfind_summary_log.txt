LFind Results
LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal18_theorem0_42_append_assoc

Number of Lemmas: 784
Number of Lemmas (after duplicates removed): 175
Number of Lemmas (after QuickChick used to filter): 128
* Number of Candidate Lemmas: 98

Time until ranking: 3641
Time to complete: 8659

Stuck state true independent of hypotheses: true

Category 1:
Count = 2

Lemma candidate_32: forall (lf4 : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 lf4) x) (lfappend lf6 (lfappend lf4 x)).
Lemma candidate_44: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend (rev y) lf4) x)   (lfappend (rev y) (lfappend lf4 x)).

Category 2:
Count = 6

Lemma candidate_391: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (rev x) (Cons n y))) (lfappend (rev y) (Cons n x)).
Lemma candidate_2: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n Nil)) x) (lfappend lf6 (Cons n x)).
Lemma candidate_361: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (rev (lfappend (rev x) (Cons n (rev lf6)))) (lfappend lf6 (Cons n x)).
Lemma candidate_213: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev y) (Cons n x))   (lfappend (lfappend (rev y) (Cons n Nil)) x).
Lemma candidate_75: forall (lf7 : lst) (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n lf7)) x)   (lfappend lf6 (Cons n (lfappend lf7 x))).
Lemma candidate_660: forall (lf7 : lst) (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev y) (Cons n lf7)) x)   (lfappend (rev y) (Cons n (lfappend lf7 x))).

Category 3 (provable):
Count = 10

Lemma candidate_163: forall (lf1 : lst), @eq lst lf1 (lfappend lf1 Nil).
Lemma candidate_7: forall (lf3 : lst), @eq lst (lfappend lf3 Nil) lf3.
Lemma candidate_54: forall (y : lst), @eq lst (rev y) (rev (lfappend y Nil)).
Lemma candidate_161: forall (lf1 : lst), @eq lst lf1 (lfappend (lfappend lf1 Nil) Nil).
Lemma candidate_5: forall (lf3 : lst), @eq lst (lfappend (lfappend lf3 Nil) Nil) lf3.
Lemma candidate_10: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend (lfappend lf2 Nil) x).
Lemma candidate_238: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 Nil) lf5) (lfappend lf6 lf5).
Lemma candidate_166: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend (lfappend lf6 Nil) lf5).
Lemma candidate_121: forall (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n Nil))   (lfappend (lfappend lf6 Nil) (Cons n Nil)).
Lemma candidate_119: forall (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n Nil))   (lfappend (lfappend lf6 (Cons n Nil)) Nil).

Category 3 (not provable):
Count = 80

Lemma candidate_162: forall (lf1 : lst), @eq lst lf1 (rev (rev lf1)).
Lemma candidate_6: forall (lf3 : lst), @eq lst (rev (rev lf3)) lf3.
Lemma candidate_53: forall (y : lst), @eq lst (rev y) (rev (rev (rev y))).
Lemma candidate_204: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rev (rev x))).
Lemma candidate_160: forall (lf1 : lst), @eq lst lf1 (lfappend (rev (rev lf1)) Nil).
Lemma candidate_4: forall (lf3 : lst), @eq lst (lfappend (rev (rev lf3)) Nil) lf3.
Lemma candidate_205: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_52: forall (y : lst), @eq lst (rev y) (lfappend (lfappend (rev y) Nil) Nil).
Lemma candidate_51: forall (y : lst), @eq lst (rev y) (lfappend (rev (lfappend y Nil)) Nil).
Lemma candidate_12: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend lf2 (rev (rev x))).
Lemma candidate_9: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend (rev (rev lf2)) x).
Lemma candidate_201: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend (rev (rev x)) Nil)).
Lemma candidate_13: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend lf2 (lfappend x Nil)).
Lemma candidate_11: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend (lfappend lf2 x) Nil).
Lemma candidate_240: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 (rev (rev lf5))) (lfappend lf6 lf5).
Lemma candidate_237: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend (rev (rev lf6)) lf5) (lfappend lf6 lf5).
Lemma candidate_168: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 (rev (rev lf5))).
Lemma candidate_165: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend (rev (rev lf6)) lf5).
Lemma candidate_22: forall (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf4) (lfappend lf6 (rev (rev lf4))).
Lemma candidate_202: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend (lfappend x Nil) Nil)).
Lemma candidate_241: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 (lfappend lf5 Nil)) (lfappend lf6 lf5).
Lemma candidate_239: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 lf5) Nil) (lfappend lf6 lf5).
Lemma candidate_169: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend lf6 (lfappend lf5 Nil)).
Lemma candidate_167: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf5) (lfappend (lfappend lf6 lf5) Nil).
Lemma candidate_23: forall (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf4) (lfappend lf6 (lfappend lf4 Nil)).
Lemma candidate_21: forall (lf4 : lst) (lf6 : lst), @eq lst (lfappend lf6 lf4) (lfappend (lfappend lf6 lf4) Nil).
Lemma candidate_264: forall (y : lst) (lf5 : lst), @eq lst (lfappend (rev y) (rev (rev lf5))) (lfappend (rev y) lf5).
Lemma candidate_180: forall (y : lst) (lf5 : lst), @eq lst (lfappend (rev y) lf5) (lfappend (rev y) (rev (rev lf5))).
Lemma candidate_46: forall (y : lst) (lf4 : lst), @eq lst (lfappend (rev y) lf4) (lfappend (rev y) (rev (rev lf4))).
Lemma candidate_265: forall (y : lst) (lf5 : lst), @eq lst (lfappend (rev y) (lfappend lf5 Nil)) (lfappend (rev y) lf5).
Lemma candidate_181: forall (y : lst) (lf5 : lst), @eq lst (lfappend (rev y) lf5) (lfappend (rev y) (lfappend lf5 Nil)).
Lemma candidate_47: forall (y : lst) (lf4 : lst), @eq lst (lfappend (rev y) lf4) (lfappend (rev y) (lfappend lf4 Nil)).
Lemma candidate_359: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n (rev (rev x)))) (lfappend lf6 (Cons n x)).
Lemma candidate_357: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend (rev (rev lf6)) (Cons n x)) (lfappend lf6 (Cons n x)).
Lemma candidate_261: forall (y : lst) (lf5 : lst), @eq lst (rev (lfappend (rev lf5) (rev (rev y)))) (lfappend (rev y) lf5).
Lemma candidate_197: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n x)) (lfappend lf6 (Cons n (rev (rev x)))).
Lemma candidate_195: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n x)) (lfappend (rev (rev lf6)) (Cons n x)).
Lemma candidate_177: forall (y : lst) (lf5 : lst), @eq lst (lfappend (rev y) lf5) (rev (lfappend (rev lf5) (rev (rev y)))).
Lemma candidate_217: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev y) (Cons n x)) (rev (lfappend (rev x) (Cons n y))).
Lemma candidate_360: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n (lfappend x Nil))) (lfappend lf6 (Cons n x)).
Lemma candidate_358: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 Nil) (Cons n x)) (lfappend lf6 (Cons n x)).
Lemma candidate_262: forall (y : lst) (lf5 : lst), @eq lst (rev (lfappend (rev lf5) (lfappend y Nil))) (lfappend (rev y) lf5).
Lemma candidate_198: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n x)) (lfappend lf6 (Cons n (lfappend x Nil))).
Lemma candidate_196: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n x)) (lfappend (lfappend lf6 Nil) (Cons n x)).
Lemma candidate_178: forall (y : lst) (lf5 : lst), @eq lst (lfappend (rev y) lf5) (rev (lfappend (rev lf5) (lfappend y Nil))).
Lemma candidate_123: forall (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n Nil)) (lfappend (rev (rev lf6)) (Cons n Nil)).
Lemma candidate_199: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend lf6 (Cons n x)) (rev (lfappend (rev x) (Cons n (rev lf6)))).
Lemma candidate_389: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev y) (Cons n (rev (rev x))))   (lfappend (rev y) (Cons n x)).
Lemma candidate_215: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev y) (Cons n x))   (lfappend (rev y) (Cons n (rev (rev x)))).
Lemma candidate_390: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev y) (Cons n (lfappend x Nil)))   (lfappend (rev y) (Cons n x)).
Lemma candidate_388: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev y) (Cons n x)) Nil)   (lfappend (rev y) (Cons n x)).
Lemma candidate_216: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev y) (Cons n x))   (lfappend (rev y) (Cons n (lfappend x Nil))).
Lemma candidate_214: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev y) (Cons n x))   (lfappend (lfappend (rev y) (Cons n x)) Nil).
Lemma candidate_431: forall (lf4 : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 lf4) x)   (lfappend lf6 (lfappend lf4 (rev (rev x)))).
Lemma candidate_142: forall (n : natural) (y : lst), @eq lst (lfappend (rev y) (Cons n Nil))   (lfappend (rev (rev (rev y))) (Cons n Nil)).
Lemma candidate_422: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend (rev (rev lf6)) (Cons n Nil)) x)   (lfappend lf6 (Cons n x)).
Lemma candidate_143: forall (n : natural) (y : lst), @eq lst (lfappend (rev y) (Cons n Nil))   (lfappend (rev (lfappend y Nil)) (Cons n Nil)).
Lemma candidate_141: forall (n : natural) (y : lst), @eq lst (lfappend (rev y) (Cons n Nil))   (lfappend (lfappend (rev y) (Cons n Nil)) Nil).
Lemma candidate_139: forall (n : natural) (y : lst), @eq lst (lfappend (rev y) (Cons n Nil))   (lfappend (lfappend (rev y) Nil) (Cons n Nil)).
Lemma candidate_127: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n Nil)) x)   (lfappend lf6 (Cons n (rev (rev x)))).
Lemma candidate_125: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n Nil)) x)   (lfappend (rev (rev lf6)) (Cons n x)).
Lemma candidate_27: forall (lf4 : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 lf4) x)   (lfappend lf6 (lfappend lf4 (lfappend x Nil))).
Lemma candidate_420: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend (lfappend lf6 Nil) (Cons n Nil)) x)   (lfappend lf6 (Cons n x)).
Lemma candidate_418: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend (lfappend lf6 (Cons n Nil)) Nil) x)   (lfappend lf6 (Cons n x)).
Lemma candidate_128: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n Nil)) x)   (lfappend lf6 (Cons n (lfappend x Nil))).
Lemma candidate_126: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n Nil)) x)   (lfappend (lfappend lf6 Nil) (Cons n x)).
Lemma candidate_120: forall (n : natural) (lf6 : lst), @eq lst (lfappend lf6 (Cons n Nil))   (lfappend (lfappend (rev (rev lf6)) (Cons n Nil)) Nil).
Lemma candidate_40: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend (rev y) lf4) x)   (lfappend (rev y) (lfappend lf4 (rev (rev x)))).
Lemma candidate_129: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend lf6 (Cons n Nil)) x)   (rev (lfappend (rev x) (Cons n (rev lf6)))).
Lemma candidate_486: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev (rev (rev y))) (Cons n Nil)) x)   (lfappend (rev y) (Cons n x)).
Lemma candidate_484: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (rev (rev (lfappend (rev y) (Cons n Nil)))) x)   (lfappend (rev y) (Cons n x)).
Lemma candidate_148: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev y) (Cons n Nil)) x)   (lfappend (rev y) (Cons n (rev (rev x)))).
Lemma candidate_41: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend (rev y) lf4) x)   (lfappend (rev y) (lfappend lf4 (lfappend x Nil))).
Lemma candidate_487: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev (lfappend y Nil)) (Cons n Nil)) x)   (lfappend (rev y) (Cons n x)).
Lemma candidate_485: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (lfappend (rev y) (Cons n Nil)) Nil) x)   (lfappend (rev y) (Cons n x)).
Lemma candidate_483: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (lfappend (rev y) Nil) (Cons n Nil)) x)   (lfappend (rev y) (Cons n x)).
Lemma candidate_149: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev y) (Cons n Nil)) x)   (lfappend (rev y) (Cons n (lfappend x Nil))).
Lemma candidate_147: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev y) (Cons n Nil)) x)   (lfappend (lfappend (rev y) (Cons n x)) Nil).
Lemma candidate_419: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend (lfappend (rev (rev lf6)) (Cons n Nil)) Nil) x)   (lfappend lf6 (Cons n x)).
Lemma candidate_417: forall (n : natural) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend (rev (lfappend (rev lf6) Nil)) (Cons n Nil)) x)   (lfappend lf6 (Cons n x)).