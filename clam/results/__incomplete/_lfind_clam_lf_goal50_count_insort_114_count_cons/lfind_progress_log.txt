File Information
- File name: goal50
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal50_count_insort_114_count_cons
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal50_count_insort_114_count_cons
- Namespace: adtind
- Proof name: count_insort
- Theorem: Theorem count_insort: forall (x0 : natural) (l0 : lst),
@eq natural (count (insort l0 x0) x0) (Succ (count l0 x0)).
- Declarations: 
From lfind Require Import LFind.
Require Import Arith.

Proof Context
* Goal State: @eq natural (count (Cons x (Cons n l)) x)
  (Succ (if lfeqb x n then Succ (count l x) else count l x))

* Hypothesis:
x : natural
IHl : @eq natural (count (insort l x) x) (Succ (count l x))
l : lst
n : natural

* Types:
Set
natural
Prop
lst
forall _ : bool, Set
bool

* Polymorphic Types:


* Variables:
x : natural
l : lst
n : natural

* Terms:
@eq natural (count (insort l x) x) (Succ (count l x)) : Prop
count l x : natural
x : natural
fun _ : bool => natural : forall _ : bool, Set
insort l x : lst
l : lst
count (insort l x) x : natural
count (Cons x (Cons n l)) x : natural
bool : Set
@eq natural (count (Cons x (Cons n l)) x)
  (Succ (if lfeqb x n then Succ (count l x) else count l x)) : Prop
Cons x (Cons n l) : lst
Succ (if lfeqb x n then Succ (count l x) else count l x) : natural
if lfeqb x n then Succ (count l x) else count l x : natural
lst : Set
Cons n l : lst
Succ (count l x) : natural
lfeqb x n : bool
natural : Set
n : natural

* Functions:
Succ  : forall _ : natural, natural
count  : forall (_ : lst) (_ : natural), natural
lfeqb  : forall (_ : natural) (_ : natural), bool
Cons  : forall (_ : natural) (_ : lst), lst
@eq  : forall (A : Type) (_ : A) (_ : A), Prop
insort  : forall (_ : lst) (_ : natural), lst

<---GENERALIZATION--->
Time elapsed: 3 seconds
Generalized Variables:
lf3 : natural = count (Cons x (Cons n l)) x
lf7 : natural = count l x
lf1 : natural = Succ (if lfeqb x n then Succ (count l x) else count l x)
lf4 : forall _ : bool, Set = fun _ : bool => natural
lf5 : lst = Cons x (Cons n l)
lf9 : lst = Cons n l
lf2 : natural = if lfeqb x n then Succ (count l x) else count l x
lf8 : bool = lfeqb x n
lf6 : natural = Succ (count l x)

Generalizations:
Lemma conj1: forall (lf1 : natural) (lf3 : natural), @eq natural lf3 lf1.
Lemma conj65: forall (lf2 : natural) (lf3 : natural), @eq natural lf3 (Succ lf2).
Lemma conj69: forall (lf3 : natural), @eq natural lf3 (Succ (if lf8 then lf6 else lf7)).
Lemma conj70: forall (lf3 : natural), @eq natural lf3 (Succ (if lf8 then Succ lf7 else lf7)).
Lemma conj71: forall (lf3 : natural), @eq natural lf3 (Succ (if lfeqb x n then lf6 else lf7)).
Lemma conj72: forall (lf3 : natural), @eq natural lf3 (Succ (if lfeqb x n then Succ lf7 else lf7)).
Lemma conj197: forall (lf3 : natural), @eq natural lf3 (Succ (if lf8 then lf6 else count l x)).
Lemma conj198: forall (lf3 : natural), @eq natural lf3 (Succ (if lf8 then Succ (count l x) else count l x)).
Lemma conj199: forall (lf3 : natural), @eq natural lf3 (Succ (if lfeqb x n then lf6 else count l x)).
Lemma conj200: forall (lf3 : natural), @eq natural lf3 (Succ (if lfeqb x n then Succ (count l x) else count l x)).
Lemma conj257: forall (lf5 : lst) (x : natural) (lf1 : natural), @eq natural (count lf5 x) lf1.
Lemma conj273: forall (lf9 : lst) (x : natural) (lf1 : natural), @eq natural (count (Cons x lf9) x) lf1.
Lemma conj281: forall (x : natural) (lf1 : natural) (l : lst) (n : natural), @eq natural (count (Cons x (Cons n l)) x) lf1.
Lemma conj321: forall (lf2 : natural) (lf5 : lst) (x : natural), @eq natural (count lf5 x) (Succ lf2).
Lemma conj325: forall (lf5 : lst) (x : natural), @eq natural (count lf5 x) (Succ (if lf8 then lf6 else lf7)).
Lemma conj326: forall (lf5 : lst) (x : natural), @eq natural (count lf5 x) (Succ (if lf8 then Succ lf7 else lf7)).
Lemma conj327: forall (lf5 : lst) (x : natural), @eq natural (count lf5 x) (Succ (if lfeqb x n then lf6 else lf7)).
Lemma conj328: forall (lf5 : lst) (x : natural), @eq natural (count lf5 x) (Succ (if lfeqb x n then Succ lf7 else lf7)).
Lemma conj337: forall (lf2 : natural) (lf9 : lst) (x : natural), @eq natural (count (Cons x lf9) x) (Succ lf2).
Lemma conj341: forall (lf9 : lst) (x : natural), @eq natural (count (Cons x lf9) x) (Succ (if lf8 then lf6 else lf7)).
Lemma conj342: forall (lf9 : lst) (x : natural), @eq natural (count (Cons x lf9) x) (Succ (if lf8 then Succ lf7 else lf7)).
Lemma conj343: forall (lf9 : lst) (x : natural), @eq natural (count (Cons x lf9) x) (Succ (if lfeqb x n then lf6 else lf7)).
Lemma conj344: forall (lf9 : lst) (x : natural), @eq natural (count (Cons x lf9) x)
  (Succ (if lfeqb x n then Succ lf7 else lf7)).
Lemma conj345: forall (lf2 : natural) (x : natural) (l : lst) (n : natural), @eq natural (count (Cons x (Cons n l)) x) (Succ lf2).
Lemma conj349: forall (x : natural) (l : lst) (n : natural), @eq natural (count (Cons x (Cons n l)) x) (Succ (if lf8 then lf6 else lf7)).
Lemma conj350: forall (x : natural) (l : lst) (n : natural), @eq natural (count (Cons x (Cons n l)) x)
  (Succ (if lf8 then Succ lf7 else lf7)).
Lemma conj351: forall (x : natural) (l : lst) (n : natural), @eq natural (count (Cons x (Cons n l)) x)
  (Succ (if lfeqb x n then lf6 else lf7)).
Lemma conj352: forall (x : natural) (l : lst) (n : natural), @eq natural (count (Cons x (Cons n l)) x)
  (Succ (if lfeqb x n then Succ lf7 else lf7)).
Lemma conj453: forall (lf5 : lst) (x : natural), @eq natural (count lf5 x) (Succ (if lf8 then lf6 else count l x)).
Lemma conj454: forall (lf5 : lst) (x : natural), @eq natural (count lf5 x)
  (Succ (if lf8 then Succ (count l x) else count l x)).
Lemma conj455: forall (lf5 : lst) (x : natural), @eq natural (count lf5 x) (Succ (if lfeqb x n then lf6 else count l x)).
Lemma conj456: forall (lf5 : lst) (x : natural), @eq natural (count lf5 x)
  (Succ (if lfeqb x n then Succ (count l x) else count l x)).
Lemma conj469: forall (lf9 : lst) (x : natural), @eq natural (count (Cons x lf9) x) (Succ (if lf8 then lf6 else count l x)).
Lemma conj470: forall (lf9 : lst) (x : natural), @eq natural (count (Cons x lf9) x)
  (Succ (if lf8 then Succ (count l x) else count l x)).
Lemma conj471: forall (lf9 : lst) (x : natural), @eq natural (count (Cons x lf9) x)
  (Succ (if lfeqb x n then lf6 else count l x)).
Lemma conj472: forall (lf9 : lst) (x : natural), @eq natural (count (Cons x lf9) x)
  (Succ (if lfeqb x n then Succ (count l x) else count l x)).
Lemma conj477: forall (x : natural) (l : lst) (n : natural), @eq natural (count (Cons x (Cons n l)) x)
  (Succ (if lf8 then lf6 else count l x)).
Lemma conj478: forall (x : natural) (l : lst) (n : natural), @eq natural (count (Cons x (Cons n l)) x)
  (Succ (if lf8 then Succ (count l x) else count l x)).
Lemma conj479: forall (x : natural) (l : lst) (n : natural), @eq natural (count (Cons x (Cons n l)) x)
  (Succ (if lfeqb x n then lf6 else count l x)).
Lemma conj480: forall (x : natural) (l : lst) (n : natural), @eq natural (count (Cons x (Cons n l)) x)
  (Succ (if lfeqb x n then Succ (count l x) else count l x)).