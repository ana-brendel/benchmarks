File Information
- File name: goal50
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal50_count_cons_diff_144_eqb_diff
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal50_count_cons_diff_144_eqb_diff
- Namespace: adtind
- Proof name: count_cons_diff
- Theorem: Theorem count_cons_diff: forall (x0 y0 : natural) (l0 : lst) (_ : not (@eq natural x0 y0)),
@eq natural (count (Cons y0 l0) x0) (count l0 x0).
- Declarations: 
From lfind Require Import LFind.
Require Import Arith.

Proof Context
* Goal State: @eq natural (if lfeqb x y then Succ (count l x) else count l x) (count l x)

* Hypothesis:
x : natural
H : not (@eq natural x y)
y : natural
l : lst

* Types:
Set
natural
Prop
lst
forall _ : bool, Set
bool

* Polymorphic Types:


* Variables:
x : natural
y : natural
l : lst

* Terms:
lfeqb x y : bool
@eq natural x y : Prop
if lfeqb x y then Succ (count l x) else count l x : natural
not (@eq natural x y) : Prop
count l x : natural
bool : Set
x : natural
@eq natural (if lfeqb x y then Succ (count l x) else count l x) (count l x) : Prop
fun _ : bool => natural : forall _ : bool, Set
lst : Set
y : natural
Succ (count l x) : natural
natural : Set
l : lst

* Functions:
Succ  : forall _ : natural, natural
count  : forall (_ : lst) (_ : natural), natural
lfeqb  : forall (_ : natural) (_ : natural), bool
not  : forall _ : Prop, Prop
@eq  : forall (A : Type) (_ : A) (_ : A), Prop

<---GENERALIZATION--->
Time elapsed: 3 seconds
Generalized Variables:
lf3 : natural = Succ (count l x)
lf1 : natural = if lfeqb x y then Succ (count l x) else count l x
lf4 : bool = lfeqb x y
lf5 : natural = count l x
lf2 : forall _ : bool, Set = fun _ : bool => natural

Generalizations:
Lemma conj1: forall (lf5 : natural) (lf1 : natural), @eq natural lf1 lf5.
Lemma conj3: forall (x : natural) (lf1 : natural) (l : lst), @eq natural lf1 (count l x).
Lemma conj9: forall (lf5 : natural), @eq natural (if lf4 then lf3 else lf5) lf5.
Lemma conj11: forall (x : natural) (l : lst), @eq natural (if lf4 then lf3 else count l x) (count l x).
Lemma conj13: forall (lf5 : natural), @eq natural (if lfeqb x y then lf3 else lf5) lf5.
Lemma conj15: forall (x : natural) (l : lst), @eq natural (if lfeqb x y then lf3 else count l x) (count l x).
Lemma conj25: forall (lf5 : natural), @eq natural (if lf4 then Succ lf5 else lf5) lf5.
Lemma conj27: forall (x : natural) (l : lst), @eq natural (if lf4 then Succ (count l x) else count l x) (count l x).
Lemma conj29: forall (lf5 : natural), @eq natural (if lfeqb x y then Succ lf5 else lf5) lf5.
Lemma conj31: forall (x : natural) (l : lst), @eq natural (if lfeqb x y then Succ (count l x) else count l x) (count l x).