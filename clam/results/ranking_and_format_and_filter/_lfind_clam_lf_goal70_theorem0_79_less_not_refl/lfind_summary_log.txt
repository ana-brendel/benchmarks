LFind Results
LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal70_theorem0_79_less_not_refl

Number of Lemmas: 545
Number of Lemmas (after duplicates removed): 195
Number of Lemmas (after QuickChick used to filter): 88
* Number of Candidate Lemmas: 64

Time until ranking: 1392
Time to complete: 5446

Stuck state true independent of hypotheses: false

Category 1:
Count = 0


Category 2:
Count = 10

Lemma candidate_124: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count lf6 x)).
Lemma candidate_369: forall (y : lst) (x : natural), @eq natural (count (Cons x (Cons x y)) x) (Succ (Succ (count y x))).
Lemma candidate_346: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x) (Succ (count (insort y n) x)).
Lemma candidate_1: forall (n : natural) (y : lst) (x : natural) (lf2 : natural), forall _ : @eq bool (less n n) true, @eq natural (count (Cons x (Cons n y)) x) lf2.
Lemma candidate_37: forall (y : lst) (x : natural), @eq natural (Succ (count y x))   (if lfeqb x x then Succ (count y x) else count y x).
Lemma candidate_445: forall (n : natural) (y : lst) (x : natural), forall _ : forall _ : @eq natural x n, @eq bool (less n n) true, @eq natural (count (Cons x (Cons n y)) x) (Succ (count (insort y n) x)).
Lemma candidate_31: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x)))   (if lfeqb x x then Succ (if lfeqb x x then Succ (count y x) else count y x) else if lfeqb x x then Succ (count y x) else count y x).
Lemma candidate_84: forall (y : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (if lfeqb x x then Succ (count y x) else count y x) else if lfeqb x x then Succ (count y x) else count y x)   (Succ (Succ (count y x))).
Lemma candidate_287: forall (n : natural) (y : lst) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) (Succ (count y x)),       @eq bool (less n n) true, @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y x))).
Lemma candidate_286: forall (n : natural) (y : lst) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) (Succ (count y n)),       @eq bool (less n n) true, @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ (count y n))).

Category 3 (provable):
Count = 5

Lemma candidate_195: forall (n : natural), @eq bool (less n n) (false).
Lemma candidate_194: forall (n : natural), @eq bool (less n n) (less n Zero).
Lemma candidate_192: forall (n : natural), @eq bool (less n n) (lfeqb n (Succ n)).
Lemma candidate_190: forall (n : natural), @eq bool (less n n) (match n with | Succ y => less n y | Zero => false end).
Lemma candidate_191: forall (n : natural), @eq bool (less n n)   (match n with | Succ m' => lfeqb n m' | Zero => false end).

Category 3 (not provable):
Count = 49

Lemma candidate_26: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort y) x).
Lemma candidate_45: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort lf3) x).
Lemma candidate_25: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort (sort y)) x).
Lemma candidate_44: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort lf3)) x).
Lemma candidate_24: forall (y : lst) (x : natural), @eq natural (count y x) (count (insort y (Succ x)) x).
Lemma candidate_35: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count (sort y) x)).
Lemma candidate_22: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort (sort (sort y))) x).
Lemma candidate_43: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (insort lf3 (Succ x)) x).
Lemma candidate_123: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (count (insort lf6 x) x).
Lemma candidate_204: forall (y : lst) (x : natural), @eq natural (count (insort y x) x) (Succ (count (sort y) x)).
Lemma candidate_41: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort (sort lf3))) x).
Lemma candidate_34: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (count (insort (sort y) x) x).
Lemma candidate_120: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count (sort lf6) x)).
Lemma candidate_203: forall (y : lst) (x : natural), @eq natural (count (insort y x) x) (count (insort (sort y) x) x).
Lemma candidate_119: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (count (insort (sort lf6) x) x).
Lemma candidate_245: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count (sort (sort lf6)) x)).
Lemma candidate_244: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count (insort lf6 (Succ x)) x)).
Lemma candidate_242: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x) (Succ (count (sort (sort (sort lf6))) x)).
Lemma candidate_23: forall (y : lst) (x : natural), @eq natural (count y x)   (if lfeqb x (Succ x) then Succ (count y x) else count y x).
Lemma candidate_206: forall (y : lst) (x : natural), @eq natural (count (insort y x) x)   (if lfeqb x x then Succ (count y x) else count y x).
Lemma candidate_42: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb x (Succ x) then Succ (count lf3 x) else count lf3 x).
Lemma candidate_81: forall (y : lst) (x : natural), @eq natural (Succ (if lfeqb x x then Succ (count y x) else count y x))   (Succ (Succ (count y x))).
Lemma candidate_36: forall (y : lst) (x : natural), @eq natural (Succ (count y x))   (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x).
Lemma candidate_28: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x)))   (Succ (if lfeqb x x then Succ (count y x) else count y x)).
Lemma candidate_344: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (Succ (if lfeqb x n then Succ (count y x) else count y x)).
Lemma candidate_205: forall (y : lst) (x : natural), @eq natural (count (insort y x) x)   (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x).
Lemma candidate_243: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x)   (Succ (if lfeqb x (Succ x) then Succ (count lf6 x) else count lf6 x)).
Lemma candidate_121: forall (x : natural) (lf6 : lst), @eq natural (count (Cons x lf6) x)   (if lfeqb x x then Succ (count (sort lf6) x) else count (sort lf6) x).
Lemma candidate_32: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x)))   (if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_85: forall (y : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x)   (Succ (Succ (count y x))).
Lemma candidate_133: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x n then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_132: forall (n : natural) (y : lst) (x : natural), @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y n) x) else count (insort y n) x).
Lemma candidate_177: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall _ : forall _ : @eq natural (lf4) lf4, @eq bool (less n n) true, @eq natural (count (Cons x (Cons n y)) x) (Succ lf4).
Lemma candidate_428: forall (n : natural) (y : lst) (x : natural), forall _ : forall _ : @eq natural x n, @eq bool (less n n) true, @eq natural (count (Cons x (Cons x y)) x) (Succ (Succ (count y x))).
Lemma candidate_293: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall   _ : forall _ : @eq natural (Succ lf5) (Succ lf5), @eq bool (less n n) true, @eq natural (count (Cons x (Cons n y)) x) (Succ (Succ lf5)).
Lemma candidate_443: forall (n : natural) (y : lst) (x : natural), forall _ : forall _ : @eq natural x n, @eq bool (less n n) true, @eq natural (count (Cons x (Cons n y)) x)   (Succ (if lfeqb x n then Succ (count y x) else count y x)).
Lemma candidate_452: forall (n : natural) (y : lst) (x : natural), forall _ : forall _ : @eq natural x n, @eq bool (less n n) true, @eq natural   (if lfeqb x x then Succ (count (insort y x) x) else count (insort y x) x)   (Succ (Succ (count y x))).
Lemma candidate_431: forall (n : natural) (y : lst) (x : natural), forall _ : forall _ : @eq natural x n, @eq bool (less n n) true, @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x n then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_430: forall (n : natural) (y : lst) (x : natural), forall _ : forall _ : @eq natural x n, @eq bool (less n n) true, @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y n) x) else count (insort y n) x).
Lemma candidate_285: forall (n : natural) (y : lst) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) (count (insort y x) x),       @eq bool (less n n) true, @eq natural (count (Cons x (Cons n y)) x) (Succ (count (insort y x) x)).
Lemma candidate_284: forall (n : natural) (y : lst) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) (count (insort y n) x),       @eq bool (less n n) true, @eq natural (count (Cons x (Cons n y)) x) (Succ (count (insort y n) x)).
Lemma candidate_30: forall (y : lst) (x : natural), @eq natural (Succ (Succ (count y x)))   (if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x) else if lfeqb x x then Succ (count (sort y) x) else count (sort y) x).
Lemma candidate_83: forall (y : lst) (x : natural), @eq natural   (if lfeqb x x then Succ (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x) else if lfeqb x x then Succ (count (sort y) x) else count (sort y) x)   (Succ (Succ (count y x))).
Lemma candidate_167: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less n n) true, @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x n then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_166: forall (n : natural) (y : lst) (lf4 : natural) (x : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) lf4,       @eq bool (less n n) true, @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y n) x) else count (insort y n) x).
Lemma candidate_269: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),       @eq bool (less n n) true, @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x n then Succ (count (insort y x) x) else count (insort y x) x).
Lemma candidate_268: forall (n : natural) (y : lst) (x : natural) (lf5 : natural), forall   _ : forall _ : @eq natural (count (insort y x) x) (Succ lf5),       @eq bool (less n n) true, @eq natural (count (Cons x (Cons n y)) x)   (if lfeqb x x then Succ (count (insort y n) x) else count (insort y n) x).
Lemma candidate_283: forall (n : natural) (y : lst) (x : natural), forall   _ : forall         _ : @eq natural (count (insort y x) x)               (if lfeqb x x then Succ (count y x) else count y x),       @eq bool (less n n) true, @eq natural (count (Cons x (Cons n y)) x)   (Succ (if lfeqb x x then Succ (count y x) else count y x)).
Lemma candidate_282: forall (n : natural) (y : lst) (x : natural), forall   _ : forall         _ : @eq natural (count (insort y x) x)               (if lfeqb x n then Succ (count y x) else count y x),       @eq bool (less n n) true, @eq natural (count (Cons x (Cons n y)) x)   (Succ (if lfeqb x n then Succ (count y x) else count y x)).