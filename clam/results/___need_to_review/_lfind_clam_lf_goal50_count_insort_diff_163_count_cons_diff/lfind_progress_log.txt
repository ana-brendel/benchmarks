File Information
- File name: goal50
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal50_count_insort_diff_163_count_cons_diff
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal50_count_insort_diff_163_count_cons_diff
- Namespace: adtind
- Proof name: count_insort_diff
- Theorem: Theorem count_insort_diff: forall (x0 y0 : natural) (l0 : lst) (_ : not (@eq natural x0 y0)),
@eq natural (count (insort l0 y0) x0) (count l0 x0).
- Declarations: 
From lfind Require Import LFind.
Require Import Arith.

Proof Context
* Goal State: @eq natural (count (Cons y (Cons n l)) x) (count l x)

* Hypothesis:
Ee : @eq bool (lfeqb x n) false
x : natural
El : @eq bool (less y n) true
H : not (@eq natural x y)
IHl : @eq natural (count (insort l y) x) (count l x)
y : natural
l : lst
n : natural

* Types:
Set
natural
Prop
lst
bool

* Polymorphic Types:


* Variables:
x : natural
y : natural
l : lst
n : natural

* Terms:
@eq natural x y : Prop
count (Cons y (Cons n l)) x : natural
count l x : natural
not (@eq natural x y) : Prop
x : natural
insort l y : lst
y : natural
@eq bool (lfeqb x n) false : Prop
count (insort l y) x : natural
l : lst
true : bool
Cons y (Cons n l) : lst
false : bool
bool : Set
@eq natural (count (insort l y) x) (count l x) : Prop
less y n : bool
lst : Set
@eq bool (less y n) true : Prop
Cons n l : lst
lfeqb x n : bool
@eq natural (count (Cons y (Cons n l)) x) (count l x) : Prop
natural : Set
n : natural

* Functions:
count  : forall (_ : lst) (_ : natural), natural
lfeqb  : forall (_ : natural) (_ : natural), bool
less  : forall (_ : natural) (_ : natural), bool
not  : forall _ : Prop, Prop
Cons  : forall (_ : natural) (_ : lst), lst
@eq  : forall (A : Type) (_ : A) (_ : A), Prop
insort  : forall (_ : lst) (_ : natural), lst

<---GENERALIZATION--->
Time elapsed: 2 seconds
Generalized Variables:
lf3 : natural = count l x
lf1 : natural = count (Cons y (Cons n l)) x
lf4 : lst = Cons n l
lf2 : lst = Cons y (Cons n l)

Generalizations:
Lemma conj1: forall (lf1 : natural) (lf3 : natural), @eq natural lf1 lf3.
Lemma conj5: forall (lf2 : lst) (x : natural) (lf3 : natural), @eq natural (count lf2 x) lf3.
Lemma conj6: forall (x : natural) (lf4 : lst) (y : natural) (lf3 : natural), @eq natural (count (Cons y lf4) x) lf3.
Lemma conj8: forall (x : natural) (y : natural) (l : lst) (n : natural) (lf3 : natural), @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma conj9: forall (x : natural) (lf1 : natural) (l : lst), @eq natural lf1 (count l x).
Lemma conj13: forall (lf2 : lst) (x : natural) (l : lst), @eq natural (count lf2 x) (count l x).
Lemma conj14: forall (x : natural) (lf4 : lst) (y : natural) (l : lst), @eq natural (count (Cons y lf4) x) (count l x).
Lemma conj16: forall (x : natural) (y : natural) (l : lst) (n : natural), @eq natural (count (Cons y (Cons n l)) x) (count l x).


<---VALIDITY CHECKS--->
Time elapsed: 18 seconds
Valid:

Invalid:
Lemma conj16: forall (x : natural) (y : natural) (l : lst) (n : natural), @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma conj14: forall (x : natural) (lf4 : lst) (y : natural) (l : lst), @eq natural (count (Cons y lf4) x) (count l x).
Lemma conj13: forall (lf2 : lst) (x : natural) (l : lst), @eq natural (count lf2 x) (count l x).
Lemma conj9: forall (x : natural) (lf1 : natural) (l : lst), @eq natural lf1 (count l x).
Lemma conj8: forall (x : natural) (y : natural) (l : lst) (n : natural) (lf3 : natural), @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma conj6: forall (x : natural) (lf4 : lst) (y : natural) (lf3 : natural), @eq natural (count (Cons y lf4) x) lf3.
Lemma conj5: forall (lf2 : lst) (x : natural) (lf3 : natural), @eq natural (count lf2 x) lf3.
Lemma conj1: forall (lf1 : natural) (lf3 : natural), @eq natural lf1 lf3.

<---ADD IMPLICATIONS--->
Time elapsed: 46 seconds
Generalizations:
Lemma conj16_imp: forall (x : natural) (y : natural) (l : lst) (n : natural), forall
  _ : and (@eq bool (lfeqb x n) false)
        (and (@eq bool (less y n) true)
           (and (@eq natural (count (insort l y) x) (count l x))
              (not (@eq natural x y)))),
@eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma conj16: forall (x : natural) (y : natural) (l : lst) (n : natural), @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma conj14_imp: forall (x : natural) (lf4 : lst) (y : natural) (l : lst), forall
  _ : and (@eq natural (count (insort l y) x) (count l x))
        (not (@eq natural x y)),
@eq natural (count (Cons y lf4) x) (count l x).
Lemma conj14: forall (x : natural) (lf4 : lst) (y : natural) (l : lst), @eq natural (count (Cons y lf4) x) (count l x).
Lemma conj13: forall (lf2 : lst) (x : natural) (l : lst), @eq natural (count lf2 x) (count l x).
Lemma conj9: forall (x : natural) (lf1 : natural) (l : lst), @eq natural lf1 (count l x).
Lemma conj8_imp: forall (x : natural) (y : natural) (l : lst) (n : natural) (lf3 : natural), forall
  _ : and (@eq bool (lfeqb x n) false)
        (and (@eq bool (less y n) true)
           (and (@eq natural (count (insort l y) x) lf3)
              (not (@eq natural x y)))),
@eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma conj8: forall (x : natural) (y : natural) (l : lst) (n : natural) (lf3 : natural), @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma conj6_imp: forall (x : natural) (lf4 : lst) (y : natural) (lf3 : natural), forall _ : not (@eq natural x y), @eq natural (count (Cons y lf4) x) lf3.
Lemma conj6: forall (x : natural) (lf4 : lst) (y : natural) (lf3 : natural), @eq natural (count (Cons y lf4) x) lf3.
Lemma conj5: forall (lf2 : lst) (x : natural) (lf3 : natural), @eq natural (count lf2 x) lf3.
Lemma conj1: forall (lf1 : natural) (lf3 : natural), @eq natural lf1 lf3.


<---VALIDITY CHECKS--->
Time elapsed: 65 seconds
Valid:
Lemma conj8_imp: forall (x : natural) (y : natural) (l : lst) (n : natural) (lf3 : natural), forall
  _ : and (@eq bool (lfeqb x n) false)
        (and (@eq bool (less y n) true)
           (and (@eq natural (count (insort l y) x) lf3)
              (not (@eq natural x y)))),
@eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma conj16_imp: forall (x : natural) (y : natural) (l : lst) (n : natural), forall
  _ : and (@eq bool (lfeqb x n) false)
        (and (@eq bool (less y n) true)
           (and (@eq natural (count (insort l y) x) (count l x))
              (not (@eq natural x y)))),
@eq natural (count (Cons y (Cons n l)) x) (count l x).

Invalid:
Lemma conj1: forall (lf1 : natural) (lf3 : natural), @eq natural lf1 lf3.
Lemma conj5: forall (lf2 : lst) (x : natural) (lf3 : natural), @eq natural (count lf2 x) lf3.
Lemma conj6: forall (x : natural) (lf4 : lst) (y : natural) (lf3 : natural), @eq natural (count (Cons y lf4) x) lf3.
Lemma conj6_imp: forall (x : natural) (lf4 : lst) (y : natural) (lf3 : natural), forall _ : not (@eq natural x y), @eq natural (count (Cons y lf4) x) lf3.
Lemma conj8: forall (x : natural) (y : natural) (l : lst) (n : natural) (lf3 : natural), @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma conj9: forall (x : natural) (lf1 : natural) (l : lst), @eq natural lf1 (count l x).
Lemma conj13: forall (lf2 : lst) (x : natural) (l : lst), @eq natural (count lf2 x) (count l x).
Lemma conj14: forall (x : natural) (lf4 : lst) (y : natural) (l : lst), @eq natural (count (Cons y lf4) x) (count l x).
Lemma conj14_imp: forall (x : natural) (lf4 : lst) (y : natural) (l : lst), forall
  _ : and (@eq natural (count (insort l y) x) (count l x))
        (not (@eq natural x y)),
@eq natural (count (Cons y lf4) x) (count l x).
Lemma conj16: forall (x : natural) (y : natural) (l : lst) (n : natural), @eq natural (count (Cons y (Cons n l)) x) (count l x).


<---CREATE SKETCHES--->
Time elapsed: 66 seconds
Sketches:
Sketch conj5_sketch0 : @eq natural (##hole##) lf3
Sketch conj5_term_sketch0 : @eq natural (count lf2 x) (##hole##)
Sketch conj6_sketch0 : @eq natural (##hole##) lf3
Sketch conj6_sketch1 : @eq natural (count (##hole##) x) lf3
Sketch conj6_term_sketch0 : @eq natural (count (Cons y lf4) x) (##hole##)
Sketch conj6_term_sketch1 : @eq lst (Cons y lf4) (##hole##)
Sketch conj6_imp_sketch0 : forall _ : not (@eq natural x y), @eq natural (##hole##) lf3
Sketch conj6_imp_sketch1 : forall _ : not (@eq natural x y), @eq natural (count (##hole##) x) lf3
Sketch conj6_imp_term_sketch0 : @eq natural (count (Cons y lf4) x) (##hole##)
Sketch conj6_imp_term_sketch1 : @eq lst (Cons y lf4) (##hole##)
Sketch conj8_sketch0 : @eq natural (##hole##) lf3
Sketch conj8_sketch1 : @eq natural (count (Cons y (##hole##)) x) lf3
Sketch conj8_sketch2 : @eq natural (count (##hole##) x) lf3
Sketch conj8_term_sketch0 : @eq natural (count (Cons y (Cons n l)) x) (##hole##)
Sketch conj8_term_sketch1 : @eq lst (Cons n l) (##hole##)
Sketch conj8_term_sketch2 : @eq lst (Cons y (Cons n l)) (##hole##)
Sketch conj9_sketch0 : @eq natural lf1 (##hole##)
Sketch conj9_term_sketch0 : @eq natural (count l x) (##hole##)
Sketch conj13_sketch0 : @eq natural (count lf2 x) (##hole##)
Sketch conj13_sketch1 : @eq natural (##hole##) (count l x)
Sketch conj13_term_sketch0 : @eq natural (count l x) (##hole##)
Sketch conj13_term_sketch1 : @eq natural (count lf2 x) (##hole##)
Sketch conj14_sketch0 : @eq natural (##hole##) (count l x)
Sketch conj14_sketch1 : @eq natural (count (##hole##) x) (count l x)
Sketch conj14_sketch2 : @eq natural (count (Cons y lf4) x) (##hole##)
Sketch conj14_term_sketch0 : @eq natural (count (Cons y lf4) x) (##hole##)
Sketch conj14_term_sketch1 : @eq lst (Cons y lf4) (##hole##)
Sketch conj14_term_sketch2 : @eq natural (count l x) (##hole##)
Sketch conj14_imp_sketch0 : forall
  _ : and (@eq natural (count (insort l y) x) (count l x))
        (not (@eq natural x y)), @eq natural (##hole##) (count l x)
Sketch conj14_imp_sketch1 : forall
  _ : and (@eq natural (count (insort l y) x) (count l x))
        (not (@eq natural x y)), @eq natural (count (##hole##) x) (count l x)
Sketch conj14_imp_sketch2 : forall
  _ : and (@eq natural (count (insort l y) x) (##hole##))
        (not (@eq natural x y)),
@eq natural (count (Cons y lf4) x) (##hole##)
Sketch conj14_imp_sketch3 : forall
  _ : and (@eq natural (count (##hole##) x) (count l x))
        (not (@eq natural x y)),
@eq natural (count (Cons y lf4) x) (count l x)
Sketch conj14_imp_sketch4 : forall _ : and (@eq natural (##hole##) (count l x)) (not (@eq natural x y)),
@eq natural (count (Cons y lf4) x) (count l x)
Sketch conj14_imp_term_sketch0 : @eq natural (count (Cons y lf4) x) (##hole##)
Sketch conj14_imp_term_sketch1 : @eq lst (Cons y lf4) (##hole##)
Sketch conj14_imp_term_sketch2 : @eq natural (count l x) (##hole##)
Sketch conj14_imp_term_sketch3 : @eq lst (insort l y) (##hole##)
Sketch conj14_imp_term_sketch4 : @eq natural (count (insort l y) x) (##hole##)
Sketch conj16_sketch0 : @eq natural (##hole##) (count l x)
Sketch conj16_sketch1 : @eq natural (count (Cons y (Cons n l)) x) (##hole##)
Sketch conj16_sketch2 : @eq natural (count (Cons y (##hole##)) x) (count l x)
Sketch conj16_sketch3 : @eq natural (count (##hole##) x) (count l x)
Sketch conj16_term_sketch0 : @eq natural (count (Cons y (Cons n l)) x) (##hole##)
Sketch conj16_term_sketch1 : @eq natural (count l x) (##hole##)
Sketch conj16_term_sketch2 : @eq lst (Cons n l) (##hole##)
Sketch conj16_term_sketch3 : @eq lst (Cons y (Cons n l)) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 91 seconds
Problems per Sketch:
Sketch conj5_sketch0 --> Problem  synth_1
Sketch conj16_sketch3 --> Problem  synth_16
Sketch conj14_sketch2 --> Problem  synth_17
Sketch conj14_imp_term_sketch4 --> Problem  synth_24
Sketch conj16_sketch2 --> Problem  synth_26
Sketch conj14_imp_term_sketch1 --> Problem  synth_5
Sketch conj16_term_sketch1 --> Problem  synth_13
Sketch conj14_term_sketch2 --> Problem  synth_13
Sketch conj6_imp_term_sketch1 --> Problem  synth_5
Sketch conj14_imp_sketch2 --> Problem  synth_20
Sketch conj8_sketch1 --> Problem  synth_8
Sketch conj6_imp_sketch1 --> Problem  synth_7
Sketch conj6_term_sketch0 --> Problem  synth_4
Sketch conj6_imp_sketch0 --> Problem  synth_6
Sketch conj13_term_sketch1 --> Problem  synth_2
Sketch conj8_term_sketch0 --> Problem  synth_9
Sketch conj14_imp_term_sketch2 --> Problem  synth_13
Sketch conj9_sketch0 --> Problem  synth_12
Sketch conj8_sketch2 --> Problem  synth_3
Sketch conj6_imp_term_sketch0 --> Problem  synth_4
Sketch conj14_term_sketch1 --> Problem  synth_5
Sketch conj8_term_sketch1 --> Problem  synth_10
Sketch conj14_imp_sketch0 --> Problem  synth_18
Sketch conj14_imp_sketch1 --> Problem  synth_19
Sketch conj5_term_sketch0 --> Problem  synth_2
Sketch conj6_sketch0 --> Problem  synth_1
Sketch conj14_imp_sketch4 --> Problem  synth_22
Sketch conj9_term_sketch0 --> Problem  synth_13
Sketch conj16_sketch1 --> Problem  synth_25
Sketch conj14_imp_term_sketch0 --> Problem  synth_4
Sketch conj6_sketch1 --> Problem  synth_3
Sketch conj16_term_sketch2 --> Problem  synth_10
Sketch conj13_term_sketch0 --> Problem  synth_13
Sketch conj6_term_sketch1 --> Problem  synth_5
Sketch conj16_sketch0 --> Problem  synth_15
Sketch conj13_sketch1 --> Problem  synth_15
Sketch conj14_imp_sketch3 --> Problem  synth_21
Sketch conj14_sketch0 --> Problem  synth_15
Sketch conj14_term_sketch0 --> Problem  synth_4
Sketch conj16_term_sketch0 --> Problem  synth_9
Sketch conj13_sketch0 --> Problem  synth_14
Sketch conj8_sketch0 --> Problem  synth_1
Sketch conj16_term_sketch3 --> Problem  synth_11
Sketch conj14_imp_term_sketch3 --> Problem  synth_23
Sketch conj8_term_sketch2 --> Problem  synth_11
Sketch conj14_sketch1 --> Problem  synth_16


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 114 seconds

Problem: synth_22
 count lf4 y
 count lf4 x
 count lf4 Zero
 Succ y
 Succ x
 Succ Zero

Problem: synth_20
 count l y
 count l x
 count l Zero
 y
 x
 Zero

Problem: synth_18
 Succ (Succ (count l y))
 Succ (Succ (count l x))
 Succ (Succ (count l Zero))
 Succ (Succ y)
 Succ (Succ x)
 Succ (Succ Zero)

Problem: synth_17
 count lf4 (Succ y)
 count lf4 (Succ x)
 count lf4 (Succ Zero)
 y
 x
 Zero

Problem: synth_21
 insort l x
 Cons x Nil
 insort l Zero
 Cons Zero Nil
 sort lf4
 lf4

Problem: synth_26
 insort l y
 Cons y Nil
 insort l x
 Cons x Nil
 insort l Zero
 Cons Zero Nil

Problem: synth_9
 Succ (Succ (count l x))
 Succ (Succ (count l Zero))
 Succ (Succ n)
 Succ (Succ y)
 Succ (Succ x)
 Succ (Succ Zero)

Problem: synth_25
 count l x
 count l Zero
 n
 y
 x
 Zero

Problem: synth_13
 count l (Succ x)
 count l (Succ Zero)
 count l x
 count l Zero
 x
 Zero

Problem: synth_6
 if match y with | Succ _ => false | Zero => true end then Succ (Succ Zero) else Succ Zero
 if match x with | Succ _ => false | Zero => true end then Succ (Succ Zero) else Succ Zero
 Succ (Succ lf3)
 Succ (Succ y)
 Succ (Succ x)
 Succ (Succ Zero)

Problem: synth_11
 Cons n (insort l Zero)
 Cons y (insort l Zero)
 Cons Zero (insort l Zero)
 Cons n (Cons Zero Nil)
 Cons y (Cons Zero Nil)
 Cons Zero (Cons Zero Nil)

Problem: synth_7
 Cons x (Cons x Nil)
 Cons Zero (Cons x Nil)
 Cons lf3 (Cons Zero Nil)
 Cons y (Cons Zero Nil)
 Cons x (Cons Zero Nil)
 Cons Zero (Cons Zero Nil)

Problem: synth_4
 Succ (count lf4 y)
 Succ (count lf4 x)
 Succ (count lf4 Zero)
 Succ (Succ y)
 Succ (Succ x)
 Succ (Succ Zero)

Problem: synth_1
 if lfeqb lf3 Zero then Succ (if lfeqb lf3 Zero then Succ Zero else Zero) else if lfeqb lf3 Zero then Succ Zero else Zero
 if match lf3 with | Succ _ => false | Zero => true end then Succ (if match lf3 with | Succ _ => false | Zero => true end then Succ Zero else Zero) else if match lf3 with | Succ _ => false | Zero => true end then Succ Zero else Zero
 Succ (if match lf3 with | Succ _ => false | Zero => true end then Succ Zero else Zero)
 if match lf3 with | Succ _ => false | Zero => true end then Succ (Succ Zero) else Succ Zero
 Succ (Succ lf3)
 Succ (Succ Zero)

Problem: synth_23
 Cons y l
 Cons Zero l
 insort l y
 Cons y Nil
 insort l Zero
 Cons Zero Nil

Problem: synth_16
 Cons x (Cons x Nil)
 Cons Zero (Cons x Nil)
 Cons x (insort l Zero)
 Cons Zero (insort l Zero)
 Cons x (Cons Zero Nil)
 Cons Zero (Cons Zero Nil)

Problem: synth_19
 Cons y (insort l Zero)
 Cons x (insort l Zero)
 Cons Zero (insort l Zero)
 Cons y (Cons Zero Nil)
 Cons x (Cons Zero Nil)
 Cons Zero (Cons Zero Nil)

Problem: synth_15
 Succ (Succ (count l (Succ x)))
 Succ (Succ (count l (Succ Zero)))
 Succ (Succ (count l x))
 Succ (Succ (count l Zero))
 Succ (Succ x)
 Succ (Succ Zero)

Problem: synth_14
 count (sort lf2) (Succ x)
 count (sort lf2) (Succ Zero)
 count lf2 (Succ x)
 count lf2 (Succ Zero)
 x
 Zero

Problem: synth_10
 Cons n l
 Cons Zero l
 insort l n
 Cons n Nil
 insort l Zero
 Cons Zero Nil

Problem: synth_8
 Cons (if lfeqb x (Succ x) then Succ Zero else Zero) Nil
 Cons (if lfeqb x (Succ Zero) then Succ Zero else Zero) Nil
 Cons lf3 Nil
 Cons y Nil
 Cons x Nil
 Cons Zero Nil

Problem: synth_24
 Succ (count l y)
 Succ (count l x)
 Succ (count l Zero)
 Succ y
 Succ x
 Succ Zero

Problem: synth_3
 Cons lf3 (Cons x Nil)
 Cons x (Cons x Nil)
 Cons Zero (Cons x Nil)
 Cons lf3 (Cons Zero Nil)
 Cons x (Cons Zero Nil)
 Cons Zero (Cons Zero Nil)

Problem: synth_12
 if match lf1 with | Succ Zero => true | _ => false end then Succ Zero else Zero
 if lfeqb lf1 (Succ lf1) then Succ Zero else Zero
 if lfeqb lf1 (Succ Zero) then Succ Zero else Zero
 if lfeqb lf1 Zero then Succ Zero else Zero
 if match lf1 with | Succ _ => false | Zero => true end then Succ Zero else Zero
 Zero

Problem: synth_5
 Cons y (sort lf4)
 Cons Zero (sort lf4)
 Cons y lf4
 Cons Zero lf4
 insort lf4 y
 insort lf4 Zero

Problem: synth_2
 count (sort lf2) x
 count (sort lf2) Zero
 Succ (Succ x)
 Succ (Succ Zero)
 count lf2 x
 count lf2 Zero

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 115 seconds
Lemmas:
Lemma candidate_1: forall (lf3 : natural) (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : and (@eq bool (lfeqb x n) false)         (and (@eq bool (less y n) true)            (and (@eq natural (count (insort l y) x) lf3)               (not (@eq natural x y)))), @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma candidate_2: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : and (@eq bool (lfeqb x n) false)         (and (@eq bool (less y n) true)            (and (@eq natural (count (insort l y) x) (count l x))               (not (@eq natural x y)))), @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_3: forall (lf3 : natural), @eq natural   (if lfeqb lf3 Zero then Succ (if lfeqb lf3 Zero then Succ Zero else Zero) else if lfeqb lf3 Zero then Succ Zero else Zero)   lf3.
Lemma candidate_4: forall (lf3 : natural), @eq natural   (if match lf3 with | Succ _ => false | Zero => true end then Succ (if match lf3 with | Succ _ => false | Zero => true end then Succ Zero else Zero) else if match lf3 with | Succ _ => false | Zero => true end then Succ Zero else Zero)   lf3.
Lemma candidate_5: forall (lf3 : natural), @eq natural   (Succ (if match lf3 with | Succ _ => false | Zero => true end then Succ Zero else Zero))   lf3.
Lemma candidate_6: forall (lf3 : natural), @eq natural   (if match lf3 with | Succ _ => false | Zero => true end then Succ (Succ Zero) else Succ Zero)   lf3.
Lemma candidate_7: forall (lf3 : natural), @eq natural (Succ (Succ lf3)) lf3.
Lemma candidate_8: forall (lf3 : natural), @eq natural (Succ (Succ Zero)) lf3.
Lemma candidate_9: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort lf2) x).
Lemma candidate_10: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort lf2) Zero).
Lemma candidate_11: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (Succ (Succ x)).
Lemma candidate_12: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (Succ (Succ Zero)).
Lemma candidate_13: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count lf2 x).
Lemma candidate_14: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count lf2 Zero).
Lemma candidate_15: forall (lf3 : natural), @eq natural   (if lfeqb lf3 Zero then Succ (if lfeqb lf3 Zero then Succ Zero else Zero) else if lfeqb lf3 Zero then Succ Zero else Zero)   lf3.
Lemma candidate_16: forall (lf3 : natural), @eq natural   (if match lf3 with | Succ _ => false | Zero => true end then Succ (if match lf3 with | Succ _ => false | Zero => true end then Succ Zero else Zero) else if match lf3 with | Succ _ => false | Zero => true end then Succ Zero else Zero)   lf3.
Lemma candidate_17: forall (lf3 : natural), @eq natural   (Succ (if match lf3 with | Succ _ => false | Zero => true end then Succ Zero else Zero))   lf3.
Lemma candidate_18: forall (lf3 : natural), @eq natural   (if match lf3 with | Succ _ => false | Zero => true end then Succ (Succ Zero) else Succ Zero)   lf3.
Lemma candidate_19: forall (lf3 : natural), @eq natural (Succ (Succ lf3)) lf3.
Lemma candidate_20: forall (lf3 : natural), @eq natural (Succ (Succ Zero)) lf3.
Lemma candidate_21: forall (lf3 : natural) (x : natural), @eq natural (count (Cons lf3 (Cons x Nil)) x) lf3.
Lemma candidate_22: forall (lf3 : natural) (x : natural), @eq natural (count (Cons x (Cons x Nil)) x) lf3.
Lemma candidate_23: forall (lf3 : natural) (x : natural), @eq natural (count (Cons Zero (Cons x Nil)) x) lf3.
Lemma candidate_24: forall (lf3 : natural) (x : natural), @eq natural (count (Cons lf3 (Cons Zero Nil)) x) lf3.
Lemma candidate_25: forall (lf3 : natural) (x : natural), @eq natural (count (Cons x (Cons Zero Nil)) x) lf3.
Lemma candidate_26: forall (lf3 : natural) (x : natural), @eq natural (count (Cons Zero (Cons Zero Nil)) x) lf3.
Lemma candidate_27: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (Succ (count lf4 y)).
Lemma candidate_28: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (Succ (count lf4 x)).
Lemma candidate_29: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (Succ (count lf4 Zero)).
Lemma candidate_30: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (Succ (Succ y)).
Lemma candidate_31: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (Succ (Succ x)).
Lemma candidate_32: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (Succ (Succ Zero)).
Lemma candidate_33: forall (y : natural) (lf4 : lst), @eq lst (Cons y lf4) (Cons y (sort lf4)).
Lemma candidate_34: forall (y : natural) (lf4 : lst), @eq lst (Cons y lf4) (Cons Zero (sort lf4)).
Lemma candidate_35: forall (y : natural) (lf4 : lst), @eq lst (Cons y lf4) (Cons y lf4).
Lemma candidate_36: forall (y : natural) (lf4 : lst), @eq lst (Cons y lf4) (Cons Zero lf4).
Lemma candidate_37: forall (y : natural) (lf4 : lst), @eq lst (Cons y lf4) (insort lf4 y).
Lemma candidate_38: forall (y : natural) (lf4 : lst), @eq lst (Cons y lf4) (insort lf4 Zero).
Lemma candidate_39: forall (lf3 : natural) (y : natural) (x : natural), forall _ : not (@eq natural x y), @eq natural   (if match y with | Succ _ => false | Zero => true end then Succ (Succ Zero) else Succ Zero)   lf3.
Lemma candidate_40: forall (lf3 : natural) (y : natural) (x : natural), forall _ : not (@eq natural x y), @eq natural   (if match x with | Succ _ => false | Zero => true end then Succ (Succ Zero) else Succ Zero)   lf3.
Lemma candidate_41: forall (lf3 : natural) (y : natural) (x : natural), forall _ : not (@eq natural x y), @eq natural (Succ (Succ lf3)) lf3.
Lemma candidate_42: forall (lf3 : natural) (y : natural) (x : natural), forall _ : not (@eq natural x y), @eq natural (Succ (Succ y)) lf3.
Lemma candidate_43: forall (lf3 : natural) (y : natural) (x : natural), forall _ : not (@eq natural x y), @eq natural (Succ (Succ x)) lf3.
Lemma candidate_44: forall (lf3 : natural) (y : natural) (x : natural), forall _ : not (@eq natural x y), @eq natural (Succ (Succ Zero)) lf3.
Lemma candidate_45: forall (lf3 : natural) (y : natural) (x : natural), forall _ : not (@eq natural x y), @eq natural (count (Cons x (Cons x Nil)) x) lf3.
Lemma candidate_46: forall (lf3 : natural) (y : natural) (x : natural), forall _ : not (@eq natural x y), @eq natural (count (Cons Zero (Cons x Nil)) x) lf3.
Lemma candidate_47: forall (lf3 : natural) (y : natural) (x : natural), forall _ : not (@eq natural x y), @eq natural (count (Cons lf3 (Cons Zero Nil)) x) lf3.
Lemma candidate_48: forall (lf3 : natural) (y : natural) (x : natural), forall _ : not (@eq natural x y), @eq natural (count (Cons y (Cons Zero Nil)) x) lf3.
Lemma candidate_49: forall (lf3 : natural) (y : natural) (x : natural), forall _ : not (@eq natural x y), @eq natural (count (Cons x (Cons Zero Nil)) x) lf3.
Lemma candidate_50: forall (lf3 : natural) (y : natural) (x : natural), forall _ : not (@eq natural x y), @eq natural (count (Cons Zero (Cons Zero Nil)) x) lf3.
Lemma candidate_51: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (Succ (count lf4 y)).
Lemma candidate_52: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (Succ (count lf4 x)).
Lemma candidate_53: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (Succ (count lf4 Zero)).
Lemma candidate_54: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (Succ (Succ y)).
Lemma candidate_55: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (Succ (Succ x)).
Lemma candidate_56: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (Succ (Succ Zero)).
Lemma candidate_57: forall (y : natural) (lf4 : lst), @eq lst (Cons y lf4) (Cons y (sort lf4)).
Lemma candidate_58: forall (y : natural) (lf4 : lst), @eq lst (Cons y lf4) (Cons Zero (sort lf4)).
Lemma candidate_59: forall (y : natural) (lf4 : lst), @eq lst (Cons y lf4) (Cons y lf4).
Lemma candidate_60: forall (y : natural) (lf4 : lst), @eq lst (Cons y lf4) (Cons Zero lf4).
Lemma candidate_61: forall (y : natural) (lf4 : lst), @eq lst (Cons y lf4) (insort lf4 y).
Lemma candidate_62: forall (y : natural) (lf4 : lst), @eq lst (Cons y lf4) (insort lf4 Zero).
Lemma candidate_63: forall (lf3 : natural), @eq natural   (if lfeqb lf3 Zero then Succ (if lfeqb lf3 Zero then Succ Zero else Zero) else if lfeqb lf3 Zero then Succ Zero else Zero)   lf3.
Lemma candidate_64: forall (lf3 : natural), @eq natural   (if match lf3 with | Succ _ => false | Zero => true end then Succ (if match lf3 with | Succ _ => false | Zero => true end then Succ Zero else Zero) else if match lf3 with | Succ _ => false | Zero => true end then Succ Zero else Zero)   lf3.
Lemma candidate_65: forall (lf3 : natural), @eq natural   (Succ (if match lf3 with | Succ _ => false | Zero => true end then Succ Zero else Zero))   lf3.
Lemma candidate_66: forall (lf3 : natural), @eq natural   (if match lf3 with | Succ _ => false | Zero => true end then Succ (Succ Zero) else Succ Zero)   lf3.
Lemma candidate_67: forall (lf3 : natural), @eq natural (Succ (Succ lf3)) lf3.
Lemma candidate_68: forall (lf3 : natural), @eq natural (Succ (Succ Zero)) lf3.
Lemma candidate_69: forall (lf3 : natural) (y : natural) (x : natural), @eq natural   (count (Cons y (Cons (if lfeqb x (Succ x) then Succ Zero else Zero) Nil)) x)   lf3.
Lemma candidate_70: forall (lf3 : natural) (y : natural) (x : natural), @eq natural   (count      (Cons y (Cons (if lfeqb x (Succ Zero) then Succ Zero else Zero) Nil)) x)   lf3.
Lemma candidate_71: forall (lf3 : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons lf3 Nil)) x) lf3.
Lemma candidate_72: forall (lf3 : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons y Nil)) x) lf3.
Lemma candidate_73: forall (lf3 : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons x Nil)) x) lf3.
Lemma candidate_74: forall (lf3 : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons Zero Nil)) x) lf3.
Lemma candidate_75: forall (lf3 : natural) (x : natural), @eq natural (count (Cons lf3 (Cons x Nil)) x) lf3.
Lemma candidate_76: forall (lf3 : natural) (x : natural), @eq natural (count (Cons x (Cons x Nil)) x) lf3.
Lemma candidate_77: forall (lf3 : natural) (x : natural), @eq natural (count (Cons Zero (Cons x Nil)) x) lf3.
Lemma candidate_78: forall (lf3 : natural) (x : natural), @eq natural (count (Cons lf3 (Cons Zero Nil)) x) lf3.
Lemma candidate_79: forall (lf3 : natural) (x : natural), @eq natural (count (Cons x (Cons Zero Nil)) x) lf3.
Lemma candidate_80: forall (lf3 : natural) (x : natural), @eq natural (count (Cons Zero (Cons Zero Nil)) x) lf3.
Lemma candidate_81: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (Succ (Succ (count l x))).
Lemma candidate_82: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (Succ (Succ (count l Zero))).
Lemma candidate_83: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (Succ (Succ n)).
Lemma candidate_84: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (Succ (Succ y)).
Lemma candidate_85: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (Succ (Succ x)).
Lemma candidate_86: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (Succ (Succ Zero)).
Lemma candidate_87: forall (l : lst) (n : natural), @eq lst (Cons n l) (Cons n l).
Lemma candidate_88: forall (l : lst) (n : natural), @eq lst (Cons n l) (Cons Zero l).
Lemma candidate_89: forall (l : lst) (n : natural), @eq lst (Cons n l) (insort l n).
Lemma candidate_90: forall (l : lst) (n : natural), @eq lst (Cons n l) (Cons n Nil).
Lemma candidate_91: forall (l : lst) (n : natural), @eq lst (Cons n l) (insort l Zero).
Lemma candidate_92: forall (l : lst) (n : natural), @eq lst (Cons n l) (Cons Zero Nil).
Lemma candidate_93: forall (l : lst) (n : natural) (y : natural), @eq lst (Cons y (Cons n l)) (Cons n (insort l Zero)).
Lemma candidate_94: forall (l : lst) (n : natural) (y : natural), @eq lst (Cons y (Cons n l)) (Cons y (insort l Zero)).
Lemma candidate_95: forall (l : lst) (n : natural) (y : natural), @eq lst (Cons y (Cons n l)) (Cons Zero (insort l Zero)).
Lemma candidate_96: forall (l : lst) (n : natural) (y : natural), @eq lst (Cons y (Cons n l)) (Cons n (Cons Zero Nil)).
Lemma candidate_97: forall (l : lst) (n : natural) (y : natural), @eq lst (Cons y (Cons n l)) (Cons y (Cons Zero Nil)).
Lemma candidate_98: forall (l : lst) (n : natural) (y : natural), @eq lst (Cons y (Cons n l)) (Cons Zero (Cons Zero Nil)).
Lemma candidate_99: forall (lf1 : natural), @eq natural lf1   (if match lf1 with | Succ Zero => true | _ => false end then Succ Zero else Zero).
Lemma candidate_100: forall (lf1 : natural), @eq natural lf1 (if lfeqb lf1 (Succ lf1) then Succ Zero else Zero).
Lemma candidate_101: forall (lf1 : natural), @eq natural lf1 (if lfeqb lf1 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_102: forall (lf1 : natural), @eq natural lf1 (if lfeqb lf1 Zero then Succ Zero else Zero).
Lemma candidate_103: forall (lf1 : natural), @eq natural lf1   (if match lf1 with | Succ _ => false | Zero => true end then Succ Zero else Zero).
Lemma candidate_104: forall (lf1 : natural), @eq natural lf1 (Zero).
Lemma candidate_105: forall (l : lst) (x : natural), @eq natural (count l x) (count l (Succ x)).
Lemma candidate_106: forall (l : lst) (x : natural), @eq natural (count l x) (count l (Succ Zero)).
Lemma candidate_107: forall (l : lst) (x : natural), @eq natural (count l x) (count l x).
Lemma candidate_108: forall (l : lst) (x : natural), @eq natural (count l x) (count l Zero).
Lemma candidate_109: forall (l : lst) (x : natural), @eq natural (count l x) (x).
Lemma candidate_110: forall (l : lst) (x : natural), @eq natural (count l x) (Zero).
Lemma candidate_111: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort lf2) (Succ x)).
Lemma candidate_112: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort lf2) (Succ Zero)).
Lemma candidate_113: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count lf2 (Succ x)).
Lemma candidate_114: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count lf2 (Succ Zero)).
Lemma candidate_115: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (x).
Lemma candidate_116: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (Zero).
Lemma candidate_117: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l (Succ x)))) (count l x).
Lemma candidate_118: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l (Succ Zero)))) (count l x).
Lemma candidate_119: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (count l x).
Lemma candidate_120: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l Zero))) (count l x).
Lemma candidate_121: forall (l : lst) (x : natural), @eq natural (Succ (Succ x)) (count l x).
Lemma candidate_122: forall (l : lst) (x : natural), @eq natural (Succ (Succ Zero)) (count l x).
Lemma candidate_123: forall (l : lst) (x : natural), @eq natural (count l x) (count l (Succ x)).
Lemma candidate_124: forall (l : lst) (x : natural), @eq natural (count l x) (count l (Succ Zero)).
Lemma candidate_125: forall (l : lst) (x : natural), @eq natural (count l x) (count l x).
Lemma candidate_126: forall (l : lst) (x : natural), @eq natural (count l x) (count l Zero).
Lemma candidate_127: forall (l : lst) (x : natural), @eq natural (count l x) (x).
Lemma candidate_128: forall (l : lst) (x : natural), @eq natural (count l x) (Zero).
Lemma candidate_129: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort lf2) x).
Lemma candidate_130: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort lf2) Zero).
Lemma candidate_131: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (Succ (Succ x)).
Lemma candidate_132: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (Succ (Succ Zero)).
Lemma candidate_133: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count lf2 x).
Lemma candidate_134: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count lf2 Zero).
Lemma candidate_135: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l (Succ x)))) (count l x).
Lemma candidate_136: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l (Succ Zero)))) (count l x).
Lemma candidate_137: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (count l x).
Lemma candidate_138: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l Zero))) (count l x).
Lemma candidate_139: forall (l : lst) (x : natural), @eq natural (Succ (Succ x)) (count l x).
Lemma candidate_140: forall (l : lst) (x : natural), @eq natural (Succ (Succ Zero)) (count l x).
Lemma candidate_141: forall (l : lst) (x : natural), @eq natural (count (Cons x (Cons x Nil)) x) (count l x).
Lemma candidate_142: forall (l : lst) (x : natural), @eq natural (count (Cons Zero (Cons x Nil)) x) (count l x).
Lemma candidate_143: forall (l : lst) (x : natural), @eq natural (count (Cons x (insort l Zero)) x) (count l x).
Lemma candidate_144: forall (l : lst) (x : natural), @eq natural (count (Cons Zero (insort l Zero)) x) (count l x).
Lemma candidate_145: forall (l : lst) (x : natural), @eq natural (count (Cons x (Cons Zero Nil)) x) (count l x).
Lemma candidate_146: forall (l : lst) (x : natural), @eq natural (count (Cons Zero (Cons Zero Nil)) x) (count l x).
Lemma candidate_147: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (count lf4 (Succ y)).
Lemma candidate_148: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (count lf4 (Succ x)).
Lemma candidate_149: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (count lf4 (Succ Zero)).
Lemma candidate_150: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (y).
Lemma candidate_151: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (x).
Lemma candidate_152: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (Zero).
Lemma candidate_153: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (Succ (count lf4 y)).
Lemma candidate_154: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (Succ (count lf4 x)).
Lemma candidate_155: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (Succ (count lf4 Zero)).
Lemma candidate_156: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (Succ (Succ y)).
Lemma candidate_157: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (Succ (Succ x)).
Lemma candidate_158: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (Succ (Succ Zero)).
Lemma candidate_159: forall (y : natural) (lf4 : lst), @eq lst (Cons y lf4) (Cons y (sort lf4)).
Lemma candidate_160: forall (y : natural) (lf4 : lst), @eq lst (Cons y lf4) (Cons Zero (sort lf4)).
Lemma candidate_161: forall (y : natural) (lf4 : lst), @eq lst (Cons y lf4) (Cons y lf4).
Lemma candidate_162: forall (y : natural) (lf4 : lst), @eq lst (Cons y lf4) (Cons Zero lf4).
Lemma candidate_163: forall (y : natural) (lf4 : lst), @eq lst (Cons y lf4) (insort lf4 y).
Lemma candidate_164: forall (y : natural) (lf4 : lst), @eq lst (Cons y lf4) (insort lf4 Zero).
Lemma candidate_165: forall (l : lst) (x : natural), @eq natural (count l x) (count l (Succ x)).
Lemma candidate_166: forall (l : lst) (x : natural), @eq natural (count l x) (count l (Succ Zero)).
Lemma candidate_167: forall (l : lst) (x : natural), @eq natural (count l x) (count l x).
Lemma candidate_168: forall (l : lst) (x : natural), @eq natural (count l x) (count l Zero).
Lemma candidate_169: forall (l : lst) (x : natural), @eq natural (count l x) (x).
Lemma candidate_170: forall (l : lst) (x : natural), @eq natural (count l x) (Zero).
Lemma candidate_171: forall (l : lst) (y : natural) (x : natural), forall   _ : and (@eq natural (count (insort l y) x) (count l x))         (not (@eq natural x y)), @eq natural (Succ (Succ (count l y))) (count l x).
Lemma candidate_172: forall (l : lst) (y : natural) (x : natural), forall   _ : and (@eq natural (count (insort l y) x) (count l x))         (not (@eq natural x y)), @eq natural (Succ (Succ (count l x))) (count l x).
Lemma candidate_173: forall (l : lst) (y : natural) (x : natural), forall   _ : and (@eq natural (count (insort l y) x) (count l x))         (not (@eq natural x y)), @eq natural (Succ (Succ (count l Zero))) (count l x).
Lemma candidate_174: forall (l : lst) (y : natural) (x : natural), forall   _ : and (@eq natural (count (insort l y) x) (count l x))         (not (@eq natural x y)), @eq natural (Succ (Succ y)) (count l x).
Lemma candidate_175: forall (l : lst) (y : natural) (x : natural), forall   _ : and (@eq natural (count (insort l y) x) (count l x))         (not (@eq natural x y)), @eq natural (Succ (Succ x)) (count l x).
Lemma candidate_176: forall (l : lst) (y : natural) (x : natural), forall   _ : and (@eq natural (count (insort l y) x) (count l x))         (not (@eq natural x y)), @eq natural (Succ (Succ Zero)) (count l x).
Lemma candidate_177: forall (l : lst) (y : natural) (x : natural), forall   _ : and (@eq natural (count (insort l y) x) (count l x))         (not (@eq natural x y)), @eq natural (count (Cons y (insort l Zero)) x) (count l x).
Lemma candidate_178: forall (l : lst) (y : natural) (x : natural), forall   _ : and (@eq natural (count (insort l y) x) (count l x))         (not (@eq natural x y)), @eq natural (count (Cons x (insort l Zero)) x) (count l x).
Lemma candidate_179: forall (l : lst) (y : natural) (x : natural), forall   _ : and (@eq natural (count (insort l y) x) (count l x))         (not (@eq natural x y)), @eq natural (count (Cons Zero (insort l Zero)) x) (count l x).
Lemma candidate_180: forall (l : lst) (y : natural) (x : natural), forall   _ : and (@eq natural (count (insort l y) x) (count l x))         (not (@eq natural x y)), @eq natural (count (Cons y (Cons Zero Nil)) x) (count l x).
Lemma candidate_181: forall (l : lst) (y : natural) (x : natural), forall   _ : and (@eq natural (count (insort l y) x) (count l x))         (not (@eq natural x y)), @eq natural (count (Cons x (Cons Zero Nil)) x) (count l x).
Lemma candidate_182: forall (l : lst) (y : natural) (x : natural), forall   _ : and (@eq natural (count (insort l y) x) (count l x))         (not (@eq natural x y)), @eq natural (count (Cons Zero (Cons Zero Nil)) x) (count l x).
Lemma candidate_183: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : and (@eq natural (count (insort l y) x) (count l y))         (not (@eq natural x y)), @eq natural (count (Cons y lf4) x) (count l y).
Lemma candidate_184: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : and (@eq natural (count (insort l y) x) (count l x))         (not (@eq natural x y)), @eq natural (count (Cons y lf4) x) (count l x).
Lemma candidate_185: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : and (@eq natural (count (insort l y) x) (count l Zero))         (not (@eq natural x y)), @eq natural (count (Cons y lf4) x) (count l Zero).
Lemma candidate_186: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : and (@eq natural (count (insort l y) x) (y)) (not (@eq natural x y)), @eq natural (count (Cons y lf4) x) (y).
Lemma candidate_187: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : and (@eq natural (count (insort l y) x) (x)) (not (@eq natural x y)), @eq natural (count (Cons y lf4) x) (x).
Lemma candidate_188: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : and (@eq natural (count (insort l y) x) (Zero)) (not (@eq natural x y)), @eq natural (count (Cons y lf4) x) (Zero).
Lemma candidate_189: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : and (@eq natural (count (insort l x) x) (count l x))         (not (@eq natural x y)), @eq natural (count (Cons y lf4) x) (count l x).
Lemma candidate_190: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : and (@eq natural (count (Cons x Nil) x) (count l x))         (not (@eq natural x y)), @eq natural (count (Cons y lf4) x) (count l x).
Lemma candidate_191: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : and (@eq natural (count (insort l Zero) x) (count l x))         (not (@eq natural x y)), @eq natural (count (Cons y lf4) x) (count l x).
Lemma candidate_192: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : and (@eq natural (count (Cons Zero Nil) x) (count l x))         (not (@eq natural x y)), @eq natural (count (Cons y lf4) x) (count l x).
Lemma candidate_193: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : and (@eq natural (count (sort lf4) x) (count l x))         (not (@eq natural x y)), @eq natural (count (Cons y lf4) x) (count l x).
Lemma candidate_194: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : and (@eq natural (count (lf4) x) (count l x)) (not (@eq natural x y)), @eq natural (count (Cons y lf4) x) (count l x).
Lemma candidate_195: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : and (@eq natural (count lf4 y) (count l x)) (not (@eq natural x y)), @eq natural (count (Cons y lf4) x) (count l x).
Lemma candidate_196: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : and (@eq natural (count lf4 x) (count l x)) (not (@eq natural x y)), @eq natural (count (Cons y lf4) x) (count l x).
Lemma candidate_197: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : and (@eq natural (count lf4 Zero) (count l x)) (not (@eq natural x y)), @eq natural (count (Cons y lf4) x) (count l x).
Lemma candidate_198: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall _ : and (@eq natural (Succ y) (count l x)) (not (@eq natural x y)), @eq natural (count (Cons y lf4) x) (count l x).
Lemma candidate_199: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall _ : and (@eq natural (Succ x) (count l x)) (not (@eq natural x y)), @eq natural (count (Cons y lf4) x) (count l x).
Lemma candidate_200: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall _ : and (@eq natural (Succ Zero) (count l x)) (not (@eq natural x y)), @eq natural (count (Cons y lf4) x) (count l x).
Lemma candidate_201: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (Succ (count lf4 y)).
Lemma candidate_202: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (Succ (count lf4 x)).
Lemma candidate_203: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (Succ (count lf4 Zero)).
Lemma candidate_204: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (Succ (Succ y)).
Lemma candidate_205: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (Succ (Succ x)).
Lemma candidate_206: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (Succ (Succ Zero)).
Lemma candidate_207: forall (y : natural) (lf4 : lst), @eq lst (Cons y lf4) (Cons y (sort lf4)).
Lemma candidate_208: forall (y : natural) (lf4 : lst), @eq lst (Cons y lf4) (Cons Zero (sort lf4)).
Lemma candidate_209: forall (y : natural) (lf4 : lst), @eq lst (Cons y lf4) (Cons y lf4).
Lemma candidate_210: forall (y : natural) (lf4 : lst), @eq lst (Cons y lf4) (Cons Zero lf4).
Lemma candidate_211: forall (y : natural) (lf4 : lst), @eq lst (Cons y lf4) (insort lf4 y).
Lemma candidate_212: forall (y : natural) (lf4 : lst), @eq lst (Cons y lf4) (insort lf4 Zero).
Lemma candidate_213: forall (l : lst) (x : natural), @eq natural (count l x) (count l (Succ x)).
Lemma candidate_214: forall (l : lst) (x : natural), @eq natural (count l x) (count l (Succ Zero)).
Lemma candidate_215: forall (l : lst) (x : natural), @eq natural (count l x) (count l x).
Lemma candidate_216: forall (l : lst) (x : natural), @eq natural (count l x) (count l Zero).
Lemma candidate_217: forall (l : lst) (x : natural), @eq natural (count l x) (x).
Lemma candidate_218: forall (l : lst) (x : natural), @eq natural (count l x) (Zero).
Lemma candidate_219: forall (l : lst) (y : natural), @eq lst (insort l y) (Cons y l).
Lemma candidate_220: forall (l : lst) (y : natural), @eq lst (insort l y) (Cons Zero l).
Lemma candidate_221: forall (l : lst) (y : natural), @eq lst (insort l y) (insort l y).
Lemma candidate_222: forall (l : lst) (y : natural), @eq lst (insort l y) (Cons y Nil).
Lemma candidate_223: forall (l : lst) (y : natural), @eq lst (insort l y) (insort l Zero).
Lemma candidate_224: forall (l : lst) (y : natural), @eq lst (insort l y) (Cons Zero Nil).
Lemma candidate_225: forall (l : lst) (y : natural) (x : natural), @eq natural (count (insort l y) x) (Succ (count l y)).
Lemma candidate_226: forall (l : lst) (y : natural) (x : natural), @eq natural (count (insort l y) x) (Succ (count l x)).
Lemma candidate_227: forall (l : lst) (y : natural) (x : natural), @eq natural (count (insort l y) x) (Succ (count l Zero)).
Lemma candidate_228: forall (l : lst) (y : natural) (x : natural), @eq natural (count (insort l y) x) (Succ y).
Lemma candidate_229: forall (l : lst) (y : natural) (x : natural), @eq natural (count (insort l y) x) (Succ x).
Lemma candidate_230: forall (l : lst) (y : natural) (x : natural), @eq natural (count (insort l y) x) (Succ Zero).
Lemma candidate_231: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l (Succ x)))) (count l x).
Lemma candidate_232: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l (Succ Zero)))) (count l x).
Lemma candidate_233: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (count l x).
Lemma candidate_234: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l Zero))) (count l x).
Lemma candidate_235: forall (l : lst) (x : natural), @eq natural (Succ (Succ x)) (count l x).
Lemma candidate_236: forall (l : lst) (x : natural), @eq natural (Succ (Succ Zero)) (count l x).
Lemma candidate_237: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_238: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (count l Zero).
Lemma candidate_239: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (n).
Lemma candidate_240: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (y).
Lemma candidate_241: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (x).
Lemma candidate_242: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (Zero).
Lemma candidate_243: forall (l : lst) (y : natural) (x : natural), @eq natural (count (Cons y (insort l y)) x) (count l x).
Lemma candidate_244: forall (l : lst) (y : natural) (x : natural), @eq natural (count (Cons y (Cons y Nil)) x) (count l x).
Lemma candidate_245: forall (l : lst) (y : natural) (x : natural), @eq natural (count (Cons y (insort l x)) x) (count l x).
Lemma candidate_246: forall (l : lst) (y : natural) (x : natural), @eq natural (count (Cons y (Cons x Nil)) x) (count l x).
Lemma candidate_247: forall (l : lst) (y : natural) (x : natural), @eq natural (count (Cons y (insort l Zero)) x) (count l x).
Lemma candidate_248: forall (l : lst) (y : natural) (x : natural), @eq natural (count (Cons y (Cons Zero Nil)) x) (count l x).
Lemma candidate_249: forall (l : lst) (x : natural), @eq natural (count (Cons x (Cons x Nil)) x) (count l x).
Lemma candidate_250: forall (l : lst) (x : natural), @eq natural (count (Cons Zero (Cons x Nil)) x) (count l x).
Lemma candidate_251: forall (l : lst) (x : natural), @eq natural (count (Cons x (insort l Zero)) x) (count l x).
Lemma candidate_252: forall (l : lst) (x : natural), @eq natural (count (Cons Zero (insort l Zero)) x) (count l x).
Lemma candidate_253: forall (l : lst) (x : natural), @eq natural (count (Cons x (Cons Zero Nil)) x) (count l x).
Lemma candidate_254: forall (l : lst) (x : natural), @eq natural (count (Cons Zero (Cons Zero Nil)) x) (count l x).
Lemma candidate_255: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (Succ (Succ (count l x))).
Lemma candidate_256: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (Succ (Succ (count l Zero))).
Lemma candidate_257: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (Succ (Succ n)).
Lemma candidate_258: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (Succ (Succ y)).
Lemma candidate_259: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (Succ (Succ x)).
Lemma candidate_260: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (Succ (Succ Zero)).
Lemma candidate_261: forall (l : lst) (x : natural), @eq natural (count l x) (count l (Succ x)).
Lemma candidate_262: forall (l : lst) (x : natural), @eq natural (count l x) (count l (Succ Zero)).
Lemma candidate_263: forall (l : lst) (x : natural), @eq natural (count l x) (count l x).
Lemma candidate_264: forall (l : lst) (x : natural), @eq natural (count l x) (count l Zero).
Lemma candidate_265: forall (l : lst) (x : natural), @eq natural (count l x) (x).
Lemma candidate_266: forall (l : lst) (x : natural), @eq natural (count l x) (Zero).
Lemma candidate_267: forall (l : lst) (n : natural), @eq lst (Cons n l) (Cons n l).
Lemma candidate_268: forall (l : lst) (n : natural), @eq lst (Cons n l) (Cons Zero l).
Lemma candidate_269: forall (l : lst) (n : natural), @eq lst (Cons n l) (insort l n).
Lemma candidate_270: forall (l : lst) (n : natural), @eq lst (Cons n l) (Cons n Nil).
Lemma candidate_271: forall (l : lst) (n : natural), @eq lst (Cons n l) (insort l Zero).
Lemma candidate_272: forall (l : lst) (n : natural), @eq lst (Cons n l) (Cons Zero Nil).
Lemma candidate_273: forall (l : lst) (n : natural) (y : natural), @eq lst (Cons y (Cons n l)) (Cons n (insort l Zero)).
Lemma candidate_274: forall (l : lst) (n : natural) (y : natural), @eq lst (Cons y (Cons n l)) (Cons y (insort l Zero)).
Lemma candidate_275: forall (l : lst) (n : natural) (y : natural), @eq lst (Cons y (Cons n l)) (Cons Zero (insort l Zero)).
Lemma candidate_276: forall (l : lst) (n : natural) (y : natural), @eq lst (Cons y (Cons n l)) (Cons n (Cons Zero Nil)).
Lemma candidate_277: forall (l : lst) (n : natural) (y : natural), @eq lst (Cons y (Cons n l)) (Cons y (Cons Zero Nil)).
Lemma candidate_278: forall (l : lst) (n : natural) (y : natural), @eq lst (Cons y (Cons n l)) (Cons Zero (Cons Zero Nil)).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 420 seconds
Duplicates removed: 121
Filtered by Quickchick: 145
Filtered by script: 5
Remaining: 7

Lemmas: 
Lemma candidate_9: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort lf2) x).
Lemma candidate_196: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : and (@eq natural (count lf4 x) (count l x)) (not (@eq natural x y)), @eq natural (count (Cons y lf4) x) (count l x).
Lemma candidate_194: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : and (@eq natural (count (lf4) x) (count l x)) (not (@eq natural x y)), @eq natural (count (Cons y lf4) x) (count l x).
Lemma candidate_193: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : and (@eq natural (count (sort lf4) x) (count l x))         (not (@eq natural x y)), @eq natural (count (Cons y lf4) x) (count l x).
Lemma candidate_189: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : and (@eq natural (count (insort l x) x) (count l x))         (not (@eq natural x y)), @eq natural (count (Cons y lf4) x) (count l x).
Lemma candidate_1: forall (lf3 : natural) (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : and (@eq bool (lfeqb x n) false)         (and (@eq bool (less y n) true)            (and (@eq natural (count (insort l y) x) lf3)               (not (@eq natural x y)))), @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma candidate_2: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : and (@eq bool (lfeqb x n) false)         (and (@eq bool (less y n) true)            (and (@eq natural (count (insort l y) x) (count l x))               (not (@eq natural x y)))), @eq natural (count (Cons y (Cons n l)) x) (count l x).