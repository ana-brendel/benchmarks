File Information
- File name: goal50
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal50_theorem0_199_count_insort_diff
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal50_theorem0_199_count_insort_diff
- Namespace: adtind
- Proof name: theorem0
- Theorem: Theorem theorem0: forall (x0 : natural) (y0 : lst),
@eq natural (count (sort y0) x0) (count y0 x0).
- Declarations: 
From lfind Require Import LFind.
Require Import Arith.

Proof Context
* Goal State: @eq natural (count (insort (sort y) n) x) (count y x)

* Hypothesis:
x : natural
y : lst
n : natural
E : @eq bool (lfeqb x n) false
IHy : @eq natural (count (sort y) x) (count y x)

* Types:
Set
natural
Prop
lst
bool

* Polymorphic Types:


* Variables:
x : natural
y : lst
n : natural

* Terms:
@eq natural (count (sort y) x) (count y x) : Prop
count (insort (sort y) n) x : natural
false : bool
bool : Set
x : natural
sort y : lst
count (sort y) x : natural
insort (sort y) n : lst
count y x : natural
@eq natural (count (insort (sort y) n) x) (count y x) : Prop
y : lst
lst : Set
lfeqb x n : bool
@eq bool (lfeqb x n) false : Prop
natural : Set
n : natural

* Functions:
sort  : forall _ : lst, lst
count  : forall (_ : lst) (_ : natural), natural
lfeqb  : forall (_ : natural) (_ : natural), bool
insort  : forall (_ : lst) (_ : natural), lst
@eq  : forall (A : Type) (_ : A) (_ : A), Prop

<---GENERALIZATION--->
Time elapsed: 2 seconds
Generalized Variables:
lf3 : natural = count y x
lf1 : natural = count (insort (sort y) n) x
lf4 : lst = sort y
lf2 : lst = insort (sort y) n

Generalizations:
Lemma conj1: forall (lf1 : natural) (lf3 : natural), @eq natural lf1 lf3.
Lemma conj5: forall (lf2 : lst) (x : natural) (lf3 : natural), @eq natural (count lf2 x) lf3.
Lemma conj6: forall (x : natural) (lf4 : lst) (n : natural) (lf3 : natural), @eq natural (count (insort lf4 n) x) lf3.
Lemma conj8: forall (x : natural) (y : lst) (n : natural) (lf3 : natural), @eq natural (count (insort (sort y) n) x) lf3.
Lemma conj9: forall (x : natural) (lf1 : natural) (y : lst), @eq natural lf1 (count y x).
Lemma conj13: forall (lf2 : lst) (x : natural) (y : lst), @eq natural (count lf2 x) (count y x).
Lemma conj14: forall (x : natural) (lf4 : lst) (y : lst) (n : natural), @eq natural (count (insort lf4 n) x) (count y x).
Lemma conj16: forall (x : natural) (y : lst) (n : natural), @eq natural (count (insort (sort y) n) x) (count y x).


<---VALIDITY CHECKS--->
Time elapsed: 17 seconds
Valid:

Invalid:
Lemma conj16: forall (x : natural) (y : lst) (n : natural), @eq natural (count (insort (sort y) n) x) (count y x).
Lemma conj14: forall (x : natural) (lf4 : lst) (y : lst) (n : natural), @eq natural (count (insort lf4 n) x) (count y x).
Lemma conj13: forall (lf2 : lst) (x : natural) (y : lst), @eq natural (count lf2 x) (count y x).
Lemma conj9: forall (x : natural) (lf1 : natural) (y : lst), @eq natural lf1 (count y x).
Lemma conj8: forall (x : natural) (y : lst) (n : natural) (lf3 : natural), @eq natural (count (insort (sort y) n) x) lf3.
Lemma conj6: forall (x : natural) (lf4 : lst) (n : natural) (lf3 : natural), @eq natural (count (insort lf4 n) x) lf3.
Lemma conj5: forall (lf2 : lst) (x : natural) (lf3 : natural), @eq natural (count lf2 x) lf3.
Lemma conj1: forall (lf1 : natural) (lf3 : natural), @eq natural lf1 lf3.

<---ADD IMPLICATIONS--->
Time elapsed: 34 seconds
Generalizations:
Lemma conj16_imp: forall (x : natural) (y : lst) (n : natural), forall _ : @eq bool (lfeqb x n) false,
@eq natural (count (insort (sort y) n) x) (count y x).
Lemma conj16: forall (x : natural) (y : lst) (n : natural), @eq natural (count (insort (sort y) n) x) (count y x).
Lemma conj14_imp: forall (x : natural) (lf4 : lst) (y : lst) (n : natural), forall _ : @eq bool (lfeqb x n) false,
@eq natural (count (insort lf4 n) x) (count y x).
Lemma conj14: forall (x : natural) (lf4 : lst) (y : lst) (n : natural), @eq natural (count (insort lf4 n) x) (count y x).
Lemma conj13: forall (lf2 : lst) (x : natural) (y : lst), @eq natural (count lf2 x) (count y x).
Lemma conj9: forall (x : natural) (lf1 : natural) (y : lst), @eq natural lf1 (count y x).
Lemma conj8_imp: forall (x : natural) (y : lst) (n : natural) (lf3 : natural), forall _ : @eq bool (lfeqb x n) false,
@eq natural (count (insort (sort y) n) x) lf3.
Lemma conj8: forall (x : natural) (y : lst) (n : natural) (lf3 : natural), @eq natural (count (insort (sort y) n) x) lf3.
Lemma conj6_imp: forall (x : natural) (lf4 : lst) (n : natural) (lf3 : natural), forall _ : @eq bool (lfeqb x n) false,
@eq natural (count (insort lf4 n) x) lf3.
Lemma conj6: forall (x : natural) (lf4 : lst) (n : natural) (lf3 : natural), @eq natural (count (insort lf4 n) x) lf3.
Lemma conj5: forall (lf2 : lst) (x : natural) (lf3 : natural), @eq natural (count lf2 x) lf3.
Lemma conj1: forall (lf1 : natural) (lf3 : natural), @eq natural lf1 lf3.


<---VALIDITY CHECKS--->
Time elapsed: 54 seconds
Valid:
Lemma conj16_imp: forall (x : natural) (y : lst) (n : natural), forall _ : @eq bool (lfeqb x n) false,
@eq natural (count (insort (sort y) n) x) (count y x).

Invalid:
Lemma conj1: forall (lf1 : natural) (lf3 : natural), @eq natural lf1 lf3.
Lemma conj5: forall (lf2 : lst) (x : natural) (lf3 : natural), @eq natural (count lf2 x) lf3.
Lemma conj6: forall (x : natural) (lf4 : lst) (n : natural) (lf3 : natural), @eq natural (count (insort lf4 n) x) lf3.
Lemma conj6_imp: forall (x : natural) (lf4 : lst) (n : natural) (lf3 : natural), forall _ : @eq bool (lfeqb x n) false,
@eq natural (count (insort lf4 n) x) lf3.
Lemma conj8: forall (x : natural) (y : lst) (n : natural) (lf3 : natural), @eq natural (count (insort (sort y) n) x) lf3.
Lemma conj8_imp: forall (x : natural) (y : lst) (n : natural) (lf3 : natural), forall _ : @eq bool (lfeqb x n) false,
@eq natural (count (insort (sort y) n) x) lf3.
Lemma conj9: forall (x : natural) (lf1 : natural) (y : lst), @eq natural lf1 (count y x).
Lemma conj13: forall (lf2 : lst) (x : natural) (y : lst), @eq natural (count lf2 x) (count y x).
Lemma conj14: forall (x : natural) (lf4 : lst) (y : lst) (n : natural), @eq natural (count (insort lf4 n) x) (count y x).
Lemma conj14_imp: forall (x : natural) (lf4 : lst) (y : lst) (n : natural), forall _ : @eq bool (lfeqb x n) false,
@eq natural (count (insort lf4 n) x) (count y x).
Lemma conj16: forall (x : natural) (y : lst) (n : natural), @eq natural (count (insort (sort y) n) x) (count y x).


<---CREATE SKETCHES--->
Time elapsed: 54 seconds
Sketches:
Sketch conj5_sketch0 : @eq natural (##hole##) lf3
Sketch conj5_term_sketch0 : @eq natural (count lf2 x) (##hole##)
Sketch conj6_sketch0 : @eq natural (##hole##) lf3
Sketch conj6_sketch1 : @eq natural (count (##hole##) x) lf3
Sketch conj6_term_sketch0 : @eq natural (count (insort lf4 n) x) (##hole##)
Sketch conj6_term_sketch1 : @eq lst (insort lf4 n) (##hole##)
Sketch conj6_imp_sketch0 : forall _ : @eq bool (lfeqb x n) (##hole##),
@eq natural (count (insort lf4 n) x) lf3
Sketch conj6_imp_sketch1 : forall _ : @eq bool (lfeqb x n) false, @eq natural (##hole##) lf3
Sketch conj6_imp_sketch2 : forall _ : @eq bool (lfeqb x n) false, @eq natural (count (##hole##) x) lf3
Sketch conj6_imp_sketch3 : forall _ : @eq bool (##hole##) false,
@eq natural (count (insort lf4 n) x) lf3
Sketch conj6_imp_term_sketch0 : @eq bool false (##hole##)
Sketch conj6_imp_term_sketch1 : @eq natural (count (insort lf4 n) x) (##hole##)
Sketch conj6_imp_term_sketch2 : @eq lst (insort lf4 n) (##hole##)
Sketch conj6_imp_term_sketch3 : @eq bool (lfeqb x n) (##hole##)
Sketch conj8_sketch0 : @eq natural (##hole##) lf3
Sketch conj8_sketch1 : @eq natural (count (insort (##hole##) n) x) lf3
Sketch conj8_sketch2 : @eq natural (count (##hole##) x) lf3
Sketch conj8_term_sketch0 : @eq natural (count (insort (sort y) n) x) (##hole##)
Sketch conj8_term_sketch1 : @eq lst (sort y) (##hole##)
Sketch conj8_term_sketch2 : @eq lst (insort (sort y) n) (##hole##)
Sketch conj8_imp_sketch0 : forall _ : @eq bool (lfeqb x n) false, @eq natural (##hole##) lf3
Sketch conj8_imp_sketch1 : forall _ : @eq bool (lfeqb x n) (##hole##),
@eq natural (count (insort (sort y) n) x) lf3
Sketch conj8_imp_sketch2 : forall _ : @eq bool (lfeqb x n) false,
@eq natural (count (insort (##hole##) n) x) lf3
Sketch conj8_imp_sketch3 : forall _ : @eq bool (lfeqb x n) false, @eq natural (count (##hole##) x) lf3
Sketch conj8_imp_sketch4 : forall _ : @eq bool (##hole##) false,
@eq natural (count (insort (sort y) n) x) lf3
Sketch conj8_imp_term_sketch0 : @eq natural (count (insort (sort y) n) x) (##hole##)
Sketch conj8_imp_term_sketch1 : @eq bool false (##hole##)
Sketch conj8_imp_term_sketch2 : @eq lst (sort y) (##hole##)
Sketch conj8_imp_term_sketch3 : @eq lst (insort (sort y) n) (##hole##)
Sketch conj8_imp_term_sketch4 : @eq bool (lfeqb x n) (##hole##)
Sketch conj9_sketch0 : @eq natural lf1 (##hole##)
Sketch conj9_term_sketch0 : @eq natural (count y x) (##hole##)
Sketch conj13_sketch0 : @eq natural (count lf2 x) (##hole##)
Sketch conj13_sketch1 : @eq natural (##hole##) (count y x)
Sketch conj13_term_sketch0 : @eq natural (count y x) (##hole##)
Sketch conj13_term_sketch1 : @eq natural (count lf2 x) (##hole##)
Sketch conj14_sketch0 : @eq natural (##hole##) (count y x)
Sketch conj14_sketch1 : @eq natural (count (insort lf4 n) x) (##hole##)
Sketch conj14_sketch2 : @eq natural (count (##hole##) x) (count y x)
Sketch conj14_term_sketch0 : @eq natural (count (insort lf4 n) x) (##hole##)
Sketch conj14_term_sketch1 : @eq natural (count y x) (##hole##)
Sketch conj14_term_sketch2 : @eq lst (insort lf4 n) (##hole##)
Sketch conj14_imp_sketch0 : forall _ : @eq bool (lfeqb x n) (##hole##),
@eq natural (count (insort lf4 n) x) (count y x)
Sketch conj14_imp_sketch1 : forall _ : @eq bool (lfeqb x n) false, @eq natural (##hole##) (count y x)
Sketch conj14_imp_sketch2 : forall _ : @eq bool (lfeqb x n) false,
@eq natural (count (insort lf4 n) x) (##hole##)
Sketch conj14_imp_sketch3 : forall _ : @eq bool (lfeqb x n) false,
@eq natural (count (##hole##) x) (count y x)
Sketch conj14_imp_sketch4 : forall _ : @eq bool (##hole##) false,
@eq natural (count (insort lf4 n) x) (count y x)
Sketch conj14_imp_term_sketch0 : @eq bool false (##hole##)
Sketch conj14_imp_term_sketch1 : @eq natural (count (insort lf4 n) x) (##hole##)
Sketch conj14_imp_term_sketch2 : @eq natural (count y x) (##hole##)
Sketch conj14_imp_term_sketch3 : @eq lst (insort lf4 n) (##hole##)
Sketch conj14_imp_term_sketch4 : @eq bool (lfeqb x n) (##hole##)
Sketch conj16_sketch0 : @eq natural (##hole##) (count y x)
Sketch conj16_sketch1 : @eq natural (count (insort (##hole##) n) x) (count y x)
Sketch conj16_sketch2 : @eq natural (count (##hole##) x) (count y x)
Sketch conj16_sketch3 : @eq natural (count (insort (sort y) n) x) (##hole##)
Sketch conj16_term_sketch0 : @eq natural (count (insort (sort y) n) x) (##hole##)
Sketch conj16_term_sketch1 : @eq lst (sort y) (##hole##)
Sketch conj16_term_sketch2 : @eq lst (insort (sort y) n) (##hole##)
Sketch conj16_term_sketch3 : @eq natural (count y x) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 86 seconds
Problems per Sketch:
Sketch conj6_imp_sketch3 --> Problem  synth_9
Sketch conj5_sketch0 --> Problem  synth_1
Sketch conj16_sketch3 --> Problem  synth_28
Sketch conj14_sketch2 --> Problem  synth_23
Sketch conj14_imp_term_sketch4 --> Problem  synth_11
Sketch conj6_imp_term_sketch3 --> Problem  synth_11
Sketch conj16_sketch2 --> Problem  synth_23
Sketch conj14_imp_term_sketch1 --> Problem  synth_4
Sketch conj16_term_sketch1 --> Problem  synth_14
Sketch conj6_imp_sketch2 --> Problem  synth_8
Sketch conj14_term_sketch2 --> Problem  synth_5
Sketch conj8_imp_term_sketch4 --> Problem  synth_11
Sketch conj6_imp_term_sketch1 --> Problem  synth_4
Sketch conj14_imp_sketch2 --> Problem  synth_22
Sketch conj8_sketch1 --> Problem  synth_12
Sketch conj6_imp_sketch1 --> Problem  synth_7
Sketch conj6_term_sketch0 --> Problem  synth_4
Sketch conj8_imp_sketch0 --> Problem  synth_7
Sketch conj6_imp_sketch0 --> Problem  synth_6
Sketch conj13_term_sketch1 --> Problem  synth_2
Sketch conj8_term_sketch0 --> Problem  synth_13
Sketch conj14_imp_term_sketch2 --> Problem  synth_19
Sketch conj9_sketch0 --> Problem  synth_18
Sketch conj8_sketch2 --> Problem  synth_3
Sketch conj6_imp_term_sketch0 --> Problem  synth_10
Sketch conj14_term_sketch1 --> Problem  synth_19
Sketch conj8_imp_term_sketch2 --> Problem  synth_14
Sketch conj8_term_sketch1 --> Problem  synth_14
Sketch conj6_imp_term_sketch2 --> Problem  synth_5
Sketch conj8_imp_term_sketch3 --> Problem  synth_15
Sketch conj14_imp_sketch0 --> Problem  synth_24
Sketch conj8_imp_sketch1 --> Problem  synth_16
Sketch conj14_imp_sketch1 --> Problem  synth_13
Sketch conj5_term_sketch0 --> Problem  synth_2
Sketch conj8_imp_term_sketch1 --> Problem  synth_10
Sketch conj6_sketch0 --> Problem  synth_1
Sketch conj14_imp_sketch4 --> Problem  synth_26
Sketch conj9_term_sketch0 --> Problem  synth_19
Sketch conj16_sketch1 --> Problem  synth_27
Sketch conj14_imp_term_sketch0 --> Problem  synth_10
Sketch conj6_sketch1 --> Problem  synth_3
Sketch conj8_imp_sketch3 --> Problem  synth_8
Sketch conj16_term_sketch2 --> Problem  synth_15
Sketch conj13_term_sketch0 --> Problem  synth_19
Sketch conj6_term_sketch1 --> Problem  synth_5
Sketch conj8_imp_term_sketch0 --> Problem  synth_13
Sketch conj16_sketch0 --> Problem  synth_21
Sketch conj13_sketch1 --> Problem  synth_21
Sketch conj14_imp_sketch3 --> Problem  synth_25
Sketch conj14_sketch0 --> Problem  synth_21
Sketch conj14_term_sketch0 --> Problem  synth_4
Sketch conj16_term_sketch0 --> Problem  synth_13
Sketch conj13_sketch0 --> Problem  synth_20
Sketch conj8_imp_sketch2 --> Problem  synth_12
Sketch conj8_sketch0 --> Problem  synth_1
Sketch conj16_term_sketch3 --> Problem  synth_19
Sketch conj14_imp_term_sketch3 --> Problem  synth_5
Sketch conj8_term_sketch2 --> Problem  synth_15
Sketch conj14_sketch1 --> Problem  synth_22
Sketch conj8_imp_sketch4 --> Problem  synth_17


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 140 seconds

Problem: synth_28
 count y n
 count y x
 count y Zero
 n
 x
 Zero

Problem: synth_22
 count lf4 n
 count lf4 x
 count lf4 Zero
 n
 x
 Zero

Problem: synth_20
 count (sort lf2) (Succ x)
 count (sort lf2) (Succ Zero)
 count lf2 (Succ x)
 count lf2 (Succ Zero)
 x
 Zero

Problem: synth_18
 if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero
 if match lf1 with | Succ m' => lfeqb lf1 m' | Zero => false end then Succ Zero else Zero
 if lfeqb lf1 (Succ lf1) then Succ Zero else Zero
 if lfeqb lf1 Zero then Succ Zero else Zero
 if match lf1 with | Succ _ => false | Zero => true end then Succ Zero else Zero
 Zero

Problem: synth_17
 lfeqb x x
 match x with | Succ _ => false | Zero => true end
 lfeqb lf3 Zero
 lfeqb n Zero
 lfeqb x Zero
 true

Problem: synth_21
 Succ (count y (Succ x))
 Succ (count y (Succ Zero))
 Succ (count y x)
 Succ (count y Zero)
 Succ x
 Succ Zero

Problem: synth_26
 lfeqb n x
 lfeqb x x
 match x with | Succ _ => false | Zero => true end
 lfeqb n Zero
 lfeqb x Zero
 true

Problem: synth_9
 lfeqb x x
 match x with | Succ _ => false | Zero => true end
 lfeqb lf3 Zero
 lfeqb n Zero
 lfeqb x Zero
 true

Problem: synth_25
 insort y n
 Cons n Nil
 insort y x
 Cons x Nil
 insort y Zero
 Cons Zero Nil

Problem: synth_13
 Succ (count y n)
 Succ (count y x)
 Succ (count y Zero)
 Succ n
 Succ x
 Succ Zero

Problem: synth_6
 less x x
 match x with | Succ _ => true | Zero => false end
 less lf3 Zero
 less n Zero
 less x Zero
 false

Problem: synth_11
 lfeqb n x
 lfeqb x x
 match x with | Succ _ => false | Zero => true end
 lfeqb n Zero
 lfeqb x Zero
 true

Problem: synth_7
 if match n with | Succ _ => false | Zero => true end then Succ Zero else Zero
 if match x with | Succ _ => false | Zero => true end then Succ Zero else Zero
 Succ lf3
 Succ n
 Succ x
 Succ Zero

Problem: synth_4
 Succ (count lf4 n)
 Succ (count lf4 x)
 Succ (count lf4 Zero)
 Succ n
 Succ x
 Succ Zero

Problem: synth_1
 if lfeqb lf3 Zero then Succ (if lfeqb lf3 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf3 (Succ Zero) then Succ Zero else Zero
 if lfeqb lf3 lf3 then Succ Zero else Zero
 if lfeqb lf3 Zero then Succ Zero else Zero
 if match lf3 with | Succ _ => false | Zero => true end then Succ Zero else Zero
 Succ lf3
 Succ Zero

Problem: synth_23
 Cons x y
 Cons Zero y
 insort y x
 Cons x Nil
 insort y Zero
 Cons Zero Nil

Problem: synth_27
 sort (sort (sort (sort y)))
 sort (sort (sort y))
 sort (sort y)
 sort y
 y
 Nil

Problem: synth_16
 less x x
 match x with | Succ _ => true | Zero => false end
 less lf3 Zero
 less n Zero
 less x Zero
 false

Problem: synth_19
 count y (Succ x)
 count y (Succ Zero)
 count y x
 count y Zero
 x
 Zero

Problem: synth_15
 Cons n y
 Cons Zero y
 insort y n
 Cons n Nil
 insort y Zero
 Cons Zero Nil

Problem: synth_14
 sort (sort (sort (sort y)))
 sort (sort (sort y))
 sort (sort y)
 sort y
 y
 Nil

Problem: synth_10
 false

Problem: synth_8
 Cons (if lfeqb x (Succ x) then Succ Zero else Zero) Nil
 Cons (if lfeqb x (Succ Zero) then Succ Zero else Zero) Nil
 Cons lf3 Nil
 Cons n Nil
 Cons x Nil
 Cons Zero Nil

Problem: synth_24
 less n x
 less x x
 match x with | Succ _ => true | Zero => false end
 less n Zero
 less x Zero
 false

Problem: synth_3
 Cons (if lfeqb x (Succ lf3) then Succ Zero else Zero) Nil
 Cons (if lfeqb x (Succ x) then Succ Zero else Zero) Nil
 Cons (if lfeqb x (Succ Zero) then Succ Zero else Zero) Nil
 Cons lf3 Nil
 Cons x Nil
 Cons Zero Nil

Problem: synth_12
 Nil

Problem: synth_5
 Cons n lf4
 Cons Zero lf4
 insort lf4 n
 Cons n Nil
 insort lf4 Zero
 Cons Zero Nil

Problem: synth_2
 count (sort lf2) x
 count (sort lf2) Zero
 count lf2 x
 count lf2 Zero
 Succ x
 Succ Zero

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 141 seconds
Lemmas:
Lemma candidate_1: forall (n : natural) (y : lst) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (count (insort (sort y) n) x) (count y x).
Lemma candidate_2: forall (lf3 : natural), @eq natural   (if lfeqb lf3 Zero then Succ (if lfeqb lf3 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf3 (Succ Zero) then Succ Zero else Zero)   lf3.
Lemma candidate_3: forall (lf3 : natural), @eq natural (if lfeqb lf3 lf3 then Succ Zero else Zero) lf3.
Lemma candidate_4: forall (lf3 : natural), @eq natural (if lfeqb lf3 Zero then Succ Zero else Zero) lf3.
Lemma candidate_5: forall (lf3 : natural), @eq natural   (if match lf3 with | Succ _ => false | Zero => true end then Succ Zero else Zero)   lf3.
Lemma candidate_6: forall (lf3 : natural), @eq natural (Succ lf3) lf3.
Lemma candidate_7: forall (lf3 : natural), @eq natural (Succ Zero) lf3.
Lemma candidate_8: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort lf2) x).
Lemma candidate_9: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort lf2) Zero).
Lemma candidate_10: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count lf2 x).
Lemma candidate_11: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count lf2 Zero).
Lemma candidate_12: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (Succ x).
Lemma candidate_13: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (Succ Zero).
Lemma candidate_14: forall (lf3 : natural), @eq natural   (if lfeqb lf3 Zero then Succ (if lfeqb lf3 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf3 (Succ Zero) then Succ Zero else Zero)   lf3.
Lemma candidate_15: forall (lf3 : natural), @eq natural (if lfeqb lf3 lf3 then Succ Zero else Zero) lf3.
Lemma candidate_16: forall (lf3 : natural), @eq natural (if lfeqb lf3 Zero then Succ Zero else Zero) lf3.
Lemma candidate_17: forall (lf3 : natural), @eq natural   (if match lf3 with | Succ _ => false | Zero => true end then Succ Zero else Zero)   lf3.
Lemma candidate_18: forall (lf3 : natural), @eq natural (Succ lf3) lf3.
Lemma candidate_19: forall (lf3 : natural), @eq natural (Succ Zero) lf3.
Lemma candidate_20: forall (lf3 : natural) (x : natural), @eq natural   (count (Cons (if lfeqb x (Succ lf3) then Succ Zero else Zero) Nil) x) lf3.
Lemma candidate_21: forall (lf3 : natural) (x : natural), @eq natural   (count (Cons (if lfeqb x (Succ x) then Succ Zero else Zero) Nil) x) lf3.
Lemma candidate_22: forall (lf3 : natural) (x : natural), @eq natural   (count (Cons (if lfeqb x (Succ Zero) then Succ Zero else Zero) Nil) x) lf3.
Lemma candidate_23: forall (lf3 : natural) (x : natural), @eq natural (count (Cons lf3 Nil) x) lf3.
Lemma candidate_24: forall (lf3 : natural) (x : natural), @eq natural (count (Cons x Nil) x) lf3.
Lemma candidate_25: forall (lf3 : natural) (x : natural), @eq natural (count (Cons Zero Nil) x) lf3.
Lemma candidate_26: forall (n : natural) (lf4 : lst) (x : natural), @eq natural (count (insort lf4 n) x) (Succ (count lf4 n)).
Lemma candidate_27: forall (n : natural) (lf4 : lst) (x : natural), @eq natural (count (insort lf4 n) x) (Succ (count lf4 x)).
Lemma candidate_28: forall (n : natural) (lf4 : lst) (x : natural), @eq natural (count (insort lf4 n) x) (Succ (count lf4 Zero)).
Lemma candidate_29: forall (n : natural) (lf4 : lst) (x : natural), @eq natural (count (insort lf4 n) x) (Succ n).
Lemma candidate_30: forall (n : natural) (lf4 : lst) (x : natural), @eq natural (count (insort lf4 n) x) (Succ x).
Lemma candidate_31: forall (n : natural) (lf4 : lst) (x : natural), @eq natural (count (insort lf4 n) x) (Succ Zero).
Lemma candidate_32: forall (n : natural) (lf4 : lst), @eq lst (insort lf4 n) (Cons n lf4).
Lemma candidate_33: forall (n : natural) (lf4 : lst), @eq lst (insort lf4 n) (Cons Zero lf4).
Lemma candidate_34: forall (n : natural) (lf4 : lst), @eq lst (insort lf4 n) (insort lf4 n).
Lemma candidate_35: forall (n : natural) (lf4 : lst), @eq lst (insort lf4 n) (Cons n Nil).
Lemma candidate_36: forall (n : natural) (lf4 : lst), @eq lst (insort lf4 n) (insort lf4 Zero).
Lemma candidate_37: forall (n : natural) (lf4 : lst), @eq lst (insort lf4 n) (Cons Zero Nil).
Lemma candidate_38: forall (lf3 : natural) (n : natural) (lf4 : lst) (x : natural), forall _ : @eq bool (lfeqb x n) (less x x), @eq natural (count (insort lf4 n) x) lf3.
Lemma candidate_39: forall (lf3 : natural) (n : natural) (lf4 : lst) (x : natural), forall   _ : @eq bool (lfeqb x n)         (match x with | Succ _ => true | Zero => false end), @eq natural (count (insort lf4 n) x) lf3.
Lemma candidate_40: forall (lf3 : natural) (n : natural) (lf4 : lst) (x : natural), forall _ : @eq bool (lfeqb x n) (less lf3 Zero), @eq natural (count (insort lf4 n) x) lf3.
Lemma candidate_41: forall (lf3 : natural) (n : natural) (lf4 : lst) (x : natural), forall _ : @eq bool (lfeqb x n) (less n Zero), @eq natural (count (insort lf4 n) x) lf3.
Lemma candidate_42: forall (lf3 : natural) (n : natural) (lf4 : lst) (x : natural), forall _ : @eq bool (lfeqb x n) (less x Zero), @eq natural (count (insort lf4 n) x) lf3.
Lemma candidate_43: forall (lf3 : natural) (n : natural) (lf4 : lst) (x : natural), forall _ : @eq bool (lfeqb x n) (false), @eq natural (count (insort lf4 n) x) lf3.
Lemma candidate_44: forall (lf3 : natural) (n : natural) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural   (if match n with | Succ _ => false | Zero => true end then Succ Zero else Zero)   lf3.
Lemma candidate_45: forall (lf3 : natural) (n : natural) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural   (if match x with | Succ _ => false | Zero => true end then Succ Zero else Zero)   lf3.
Lemma candidate_46: forall (lf3 : natural) (n : natural) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (Succ lf3) lf3.
Lemma candidate_47: forall (lf3 : natural) (n : natural) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (Succ n) lf3.
Lemma candidate_48: forall (lf3 : natural) (n : natural) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (Succ x) lf3.
Lemma candidate_49: forall (lf3 : natural) (n : natural) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (Succ Zero) lf3.
Lemma candidate_50: forall (lf3 : natural) (n : natural) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural   (count (Cons (if lfeqb x (Succ x) then Succ Zero else Zero) Nil) x) lf3.
Lemma candidate_51: forall (lf3 : natural) (n : natural) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural   (count (Cons (if lfeqb x (Succ Zero) then Succ Zero else Zero) Nil) x) lf3.
Lemma candidate_52: forall (lf3 : natural) (n : natural) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (count (Cons lf3 Nil) x) lf3.
Lemma candidate_53: forall (lf3 : natural) (n : natural) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (count (Cons n Nil) x) lf3.
Lemma candidate_54: forall (lf3 : natural) (n : natural) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (count (Cons x Nil) x) lf3.
Lemma candidate_55: forall (lf3 : natural) (n : natural) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (count (Cons Zero Nil) x) lf3.
Lemma candidate_56: forall (lf3 : natural) (n : natural) (lf4 : lst) (x : natural), forall _ : @eq bool (lfeqb x x) false, @eq natural (count (insort lf4 n) x) lf3.
Lemma candidate_57: forall (lf3 : natural) (n : natural) (lf4 : lst) (x : natural), forall _ : @eq bool (match x with | Succ _ => false | Zero => true end) false, @eq natural (count (insort lf4 n) x) lf3.
Lemma candidate_58: forall (lf3 : natural) (n : natural) (lf4 : lst) (x : natural), forall _ : @eq bool (lfeqb lf3 Zero) false, @eq natural (count (insort lf4 n) x) lf3.
Lemma candidate_59: forall (lf3 : natural) (n : natural) (lf4 : lst) (x : natural), forall _ : @eq bool (lfeqb n Zero) false, @eq natural (count (insort lf4 n) x) lf3.
Lemma candidate_60: forall (lf3 : natural) (n : natural) (lf4 : lst) (x : natural), forall _ : @eq bool (lfeqb x Zero) false, @eq natural (count (insort lf4 n) x) lf3.
Lemma candidate_61: forall (lf3 : natural) (n : natural) (lf4 : lst) (x : natural), forall _ : @eq bool (true) false, @eq natural (count (insort lf4 n) x) lf3.
Lemma candidate_62: @eq bool false (false).
Lemma candidate_63: forall (n : natural) (lf4 : lst) (x : natural), @eq natural (count (insort lf4 n) x) (Succ (count lf4 n)).
Lemma candidate_64: forall (n : natural) (lf4 : lst) (x : natural), @eq natural (count (insort lf4 n) x) (Succ (count lf4 x)).
Lemma candidate_65: forall (n : natural) (lf4 : lst) (x : natural), @eq natural (count (insort lf4 n) x) (Succ (count lf4 Zero)).
Lemma candidate_66: forall (n : natural) (lf4 : lst) (x : natural), @eq natural (count (insort lf4 n) x) (Succ n).
Lemma candidate_67: forall (n : natural) (lf4 : lst) (x : natural), @eq natural (count (insort lf4 n) x) (Succ x).
Lemma candidate_68: forall (n : natural) (lf4 : lst) (x : natural), @eq natural (count (insort lf4 n) x) (Succ Zero).
Lemma candidate_69: forall (n : natural) (lf4 : lst), @eq lst (insort lf4 n) (Cons n lf4).
Lemma candidate_70: forall (n : natural) (lf4 : lst), @eq lst (insort lf4 n) (Cons Zero lf4).
Lemma candidate_71: forall (n : natural) (lf4 : lst), @eq lst (insort lf4 n) (insort lf4 n).
Lemma candidate_72: forall (n : natural) (lf4 : lst), @eq lst (insort lf4 n) (Cons n Nil).
Lemma candidate_73: forall (n : natural) (lf4 : lst), @eq lst (insort lf4 n) (insort lf4 Zero).
Lemma candidate_74: forall (n : natural) (lf4 : lst), @eq lst (insort lf4 n) (Cons Zero Nil).
Lemma candidate_75: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb n x).
Lemma candidate_76: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb x x).
Lemma candidate_77: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (match x with | Succ _ => false | Zero => true end).
Lemma candidate_78: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb n Zero).
Lemma candidate_79: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb x Zero).
Lemma candidate_80: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (true).
Lemma candidate_81: forall (lf3 : natural), @eq natural   (if lfeqb lf3 Zero then Succ (if lfeqb lf3 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf3 (Succ Zero) then Succ Zero else Zero)   lf3.
Lemma candidate_82: forall (lf3 : natural), @eq natural (if lfeqb lf3 lf3 then Succ Zero else Zero) lf3.
Lemma candidate_83: forall (lf3 : natural), @eq natural (if lfeqb lf3 Zero then Succ Zero else Zero) lf3.
Lemma candidate_84: forall (lf3 : natural), @eq natural   (if match lf3 with | Succ _ => false | Zero => true end then Succ Zero else Zero)   lf3.
Lemma candidate_85: forall (lf3 : natural), @eq natural (Succ lf3) lf3.
Lemma candidate_86: forall (lf3 : natural), @eq natural (Succ Zero) lf3.
Lemma candidate_87: forall (lf3 : natural) (n : natural) (x : natural), @eq natural (count (insort (Nil) n) x) lf3.
Lemma candidate_88: forall (lf3 : natural) (x : natural), @eq natural   (count (Cons (if lfeqb x (Succ lf3) then Succ Zero else Zero) Nil) x) lf3.
Lemma candidate_89: forall (lf3 : natural) (x : natural), @eq natural   (count (Cons (if lfeqb x (Succ x) then Succ Zero else Zero) Nil) x) lf3.
Lemma candidate_90: forall (lf3 : natural) (x : natural), @eq natural   (count (Cons (if lfeqb x (Succ Zero) then Succ Zero else Zero) Nil) x) lf3.
Lemma candidate_91: forall (lf3 : natural) (x : natural), @eq natural (count (Cons lf3 Nil) x) lf3.
Lemma candidate_92: forall (lf3 : natural) (x : natural), @eq natural (count (Cons x Nil) x) lf3.
Lemma candidate_93: forall (lf3 : natural) (x : natural), @eq natural (count (Cons Zero Nil) x) lf3.
Lemma candidate_94: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y n)).
Lemma candidate_95: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y x)).
Lemma candidate_96: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y Zero)).
Lemma candidate_97: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ n).
Lemma candidate_98: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ x).
Lemma candidate_99: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ Zero).
Lemma candidate_100: forall (y : lst), @eq lst (sort y) (sort (sort (sort (sort y)))).
Lemma candidate_101: forall (y : lst), @eq lst (sort y) (sort (sort (sort y))).
Lemma candidate_102: forall (y : lst), @eq lst (sort y) (sort (sort y)).
Lemma candidate_103: forall (y : lst), @eq lst (sort y) (sort y).
Lemma candidate_104: forall (y : lst), @eq lst (sort y) (y).
Lemma candidate_105: forall (y : lst), @eq lst (sort y) (Nil).
Lemma candidate_106: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (Cons n y).
Lemma candidate_107: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (Cons Zero y).
Lemma candidate_108: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (insort y n).
Lemma candidate_109: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (Cons n Nil).
Lemma candidate_110: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (insort y Zero).
Lemma candidate_111: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (Cons Zero Nil).
Lemma candidate_112: forall (lf3 : natural) (n : natural) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural   (if match n with | Succ _ => false | Zero => true end then Succ Zero else Zero)   lf3.
Lemma candidate_113: forall (lf3 : natural) (n : natural) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural   (if match x with | Succ _ => false | Zero => true end then Succ Zero else Zero)   lf3.
Lemma candidate_114: forall (lf3 : natural) (n : natural) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (Succ lf3) lf3.
Lemma candidate_115: forall (lf3 : natural) (n : natural) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (Succ n) lf3.
Lemma candidate_116: forall (lf3 : natural) (n : natural) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (Succ x) lf3.
Lemma candidate_117: forall (lf3 : natural) (n : natural) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (Succ Zero) lf3.
Lemma candidate_118: forall (lf3 : natural) (n : natural) (y : lst) (x : natural), forall _ : @eq bool (lfeqb x n) (less x x), @eq natural (count (insort (sort y) n) x) lf3.
Lemma candidate_119: forall (lf3 : natural) (n : natural) (y : lst) (x : natural), forall   _ : @eq bool (lfeqb x n)         (match x with | Succ _ => true | Zero => false end), @eq natural (count (insort (sort y) n) x) lf3.
Lemma candidate_120: forall (lf3 : natural) (n : natural) (y : lst) (x : natural), forall _ : @eq bool (lfeqb x n) (less lf3 Zero), @eq natural (count (insort (sort y) n) x) lf3.
Lemma candidate_121: forall (lf3 : natural) (n : natural) (y : lst) (x : natural), forall _ : @eq bool (lfeqb x n) (less n Zero), @eq natural (count (insort (sort y) n) x) lf3.
Lemma candidate_122: forall (lf3 : natural) (n : natural) (y : lst) (x : natural), forall _ : @eq bool (lfeqb x n) (less x Zero), @eq natural (count (insort (sort y) n) x) lf3.
Lemma candidate_123: forall (lf3 : natural) (n : natural) (y : lst) (x : natural), forall _ : @eq bool (lfeqb x n) (false), @eq natural (count (insort (sort y) n) x) lf3.
Lemma candidate_124: forall (lf3 : natural) (n : natural) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (count (insort (Nil) n) x) lf3.
Lemma candidate_125: forall (lf3 : natural) (n : natural) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural   (count (Cons (if lfeqb x (Succ x) then Succ Zero else Zero) Nil) x) lf3.
Lemma candidate_126: forall (lf3 : natural) (n : natural) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural   (count (Cons (if lfeqb x (Succ Zero) then Succ Zero else Zero) Nil) x) lf3.
Lemma candidate_127: forall (lf3 : natural) (n : natural) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (count (Cons lf3 Nil) x) lf3.
Lemma candidate_128: forall (lf3 : natural) (n : natural) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (count (Cons n Nil) x) lf3.
Lemma candidate_129: forall (lf3 : natural) (n : natural) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (count (Cons x Nil) x) lf3.
Lemma candidate_130: forall (lf3 : natural) (n : natural) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (count (Cons Zero Nil) x) lf3.
Lemma candidate_131: forall (lf3 : natural) (n : natural) (y : lst) (x : natural), forall _ : @eq bool (lfeqb x x) false, @eq natural (count (insort (sort y) n) x) lf3.
Lemma candidate_132: forall (lf3 : natural) (n : natural) (y : lst) (x : natural), forall _ : @eq bool (match x with | Succ _ => false | Zero => true end) false, @eq natural (count (insort (sort y) n) x) lf3.
Lemma candidate_133: forall (lf3 : natural) (n : natural) (y : lst) (x : natural), forall _ : @eq bool (lfeqb lf3 Zero) false, @eq natural (count (insort (sort y) n) x) lf3.
Lemma candidate_134: forall (lf3 : natural) (n : natural) (y : lst) (x : natural), forall _ : @eq bool (lfeqb n Zero) false, @eq natural (count (insort (sort y) n) x) lf3.
Lemma candidate_135: forall (lf3 : natural) (n : natural) (y : lst) (x : natural), forall _ : @eq bool (lfeqb x Zero) false, @eq natural (count (insort (sort y) n) x) lf3.
Lemma candidate_136: forall (lf3 : natural) (n : natural) (y : lst) (x : natural), forall _ : @eq bool (true) false, @eq natural (count (insort (sort y) n) x) lf3.
Lemma candidate_137: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y n)).
Lemma candidate_138: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y x)).
Lemma candidate_139: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y Zero)).
Lemma candidate_140: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ n).
Lemma candidate_141: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ x).
Lemma candidate_142: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ Zero).
Lemma candidate_143: @eq bool false (false).
Lemma candidate_144: forall (y : lst), @eq lst (sort y) (sort (sort (sort (sort y)))).
Lemma candidate_145: forall (y : lst), @eq lst (sort y) (sort (sort (sort y))).
Lemma candidate_146: forall (y : lst), @eq lst (sort y) (sort (sort y)).
Lemma candidate_147: forall (y : lst), @eq lst (sort y) (sort y).
Lemma candidate_148: forall (y : lst), @eq lst (sort y) (y).
Lemma candidate_149: forall (y : lst), @eq lst (sort y) (Nil).
Lemma candidate_150: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (Cons n y).
Lemma candidate_151: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (Cons Zero y).
Lemma candidate_152: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (insort y n).
Lemma candidate_153: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (Cons n Nil).
Lemma candidate_154: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (insort y Zero).
Lemma candidate_155: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (Cons Zero Nil).
Lemma candidate_156: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb n x).
Lemma candidate_157: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb x x).
Lemma candidate_158: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (match x with | Succ _ => false | Zero => true end).
Lemma candidate_159: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb n Zero).
Lemma candidate_160: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb x Zero).
Lemma candidate_161: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (true).
Lemma candidate_162: forall (lf1 : natural), @eq natural lf1   (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero).
Lemma candidate_163: forall (lf1 : natural), @eq natural lf1   (if match lf1 with | Succ m' => lfeqb lf1 m' | Zero => false end then Succ Zero else Zero).
Lemma candidate_164: forall (lf1 : natural), @eq natural lf1 (if lfeqb lf1 (Succ lf1) then Succ Zero else Zero).
Lemma candidate_165: forall (lf1 : natural), @eq natural lf1 (if lfeqb lf1 Zero then Succ Zero else Zero).
Lemma candidate_166: forall (lf1 : natural), @eq natural lf1   (if match lf1 with | Succ _ => false | Zero => true end then Succ Zero else Zero).
Lemma candidate_167: forall (lf1 : natural), @eq natural lf1 (Zero).
Lemma candidate_168: forall (y : lst) (x : natural), @eq natural (count y x) (count y (Succ x)).
Lemma candidate_169: forall (y : lst) (x : natural), @eq natural (count y x) (count y (Succ Zero)).
Lemma candidate_170: forall (y : lst) (x : natural), @eq natural (count y x) (count y x).
Lemma candidate_171: forall (y : lst) (x : natural), @eq natural (count y x) (count y Zero).
Lemma candidate_172: forall (y : lst) (x : natural), @eq natural (count y x) (x).
Lemma candidate_173: forall (y : lst) (x : natural), @eq natural (count y x) (Zero).
Lemma candidate_174: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort lf2) (Succ x)).
Lemma candidate_175: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort lf2) (Succ Zero)).
Lemma candidate_176: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count lf2 (Succ x)).
Lemma candidate_177: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count lf2 (Succ Zero)).
Lemma candidate_178: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (x).
Lemma candidate_179: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (Zero).
Lemma candidate_180: forall (y : lst) (x : natural), @eq natural (Succ (count y (Succ x))) (count y x).
Lemma candidate_181: forall (y : lst) (x : natural), @eq natural (Succ (count y (Succ Zero))) (count y x).
Lemma candidate_182: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (count y x).
Lemma candidate_183: forall (y : lst) (x : natural), @eq natural (Succ (count y Zero)) (count y x).
Lemma candidate_184: forall (y : lst) (x : natural), @eq natural (Succ x) (count y x).
Lemma candidate_185: forall (y : lst) (x : natural), @eq natural (Succ Zero) (count y x).
Lemma candidate_186: forall (y : lst) (x : natural), @eq natural (count y x) (count y (Succ x)).
Lemma candidate_187: forall (y : lst) (x : natural), @eq natural (count y x) (count y (Succ Zero)).
Lemma candidate_188: forall (y : lst) (x : natural), @eq natural (count y x) (count y x).
Lemma candidate_189: forall (y : lst) (x : natural), @eq natural (count y x) (count y Zero).
Lemma candidate_190: forall (y : lst) (x : natural), @eq natural (count y x) (x).
Lemma candidate_191: forall (y : lst) (x : natural), @eq natural (count y x) (Zero).
Lemma candidate_192: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort lf2) x).
Lemma candidate_193: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort lf2) Zero).
Lemma candidate_194: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count lf2 x).
Lemma candidate_195: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count lf2 Zero).
Lemma candidate_196: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (Succ x).
Lemma candidate_197: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (Succ Zero).
Lemma candidate_198: forall (y : lst) (x : natural), @eq natural (Succ (count y (Succ x))) (count y x).
Lemma candidate_199: forall (y : lst) (x : natural), @eq natural (Succ (count y (Succ Zero))) (count y x).
Lemma candidate_200: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (count y x).
Lemma candidate_201: forall (y : lst) (x : natural), @eq natural (Succ (count y Zero)) (count y x).
Lemma candidate_202: forall (y : lst) (x : natural), @eq natural (Succ x) (count y x).
Lemma candidate_203: forall (y : lst) (x : natural), @eq natural (Succ Zero) (count y x).
Lemma candidate_204: forall (n : natural) (lf4 : lst) (x : natural), @eq natural (count (insort lf4 n) x) (count lf4 n).
Lemma candidate_205: forall (n : natural) (lf4 : lst) (x : natural), @eq natural (count (insort lf4 n) x) (count lf4 x).
Lemma candidate_206: forall (n : natural) (lf4 : lst) (x : natural), @eq natural (count (insort lf4 n) x) (count lf4 Zero).
Lemma candidate_207: forall (n : natural) (lf4 : lst) (x : natural), @eq natural (count (insort lf4 n) x) (n).
Lemma candidate_208: forall (n : natural) (lf4 : lst) (x : natural), @eq natural (count (insort lf4 n) x) (x).
Lemma candidate_209: forall (n : natural) (lf4 : lst) (x : natural), @eq natural (count (insort lf4 n) x) (Zero).
Lemma candidate_210: forall (y : lst) (x : natural), @eq natural (count (Cons x y) x) (count y x).
Lemma candidate_211: forall (y : lst) (x : natural), @eq natural (count (Cons Zero y) x) (count y x).
Lemma candidate_212: forall (y : lst) (x : natural), @eq natural (count (insort y x) x) (count y x).
Lemma candidate_213: forall (y : lst) (x : natural), @eq natural (count (Cons x Nil) x) (count y x).
Lemma candidate_214: forall (y : lst) (x : natural), @eq natural (count (insort y Zero) x) (count y x).
Lemma candidate_215: forall (y : lst) (x : natural), @eq natural (count (Cons Zero Nil) x) (count y x).
Lemma candidate_216: forall (n : natural) (lf4 : lst) (x : natural), @eq natural (count (insort lf4 n) x) (Succ (count lf4 n)).
Lemma candidate_217: forall (n : natural) (lf4 : lst) (x : natural), @eq natural (count (insort lf4 n) x) (Succ (count lf4 x)).
Lemma candidate_218: forall (n : natural) (lf4 : lst) (x : natural), @eq natural (count (insort lf4 n) x) (Succ (count lf4 Zero)).
Lemma candidate_219: forall (n : natural) (lf4 : lst) (x : natural), @eq natural (count (insort lf4 n) x) (Succ n).
Lemma candidate_220: forall (n : natural) (lf4 : lst) (x : natural), @eq natural (count (insort lf4 n) x) (Succ x).
Lemma candidate_221: forall (n : natural) (lf4 : lst) (x : natural), @eq natural (count (insort lf4 n) x) (Succ Zero).
Lemma candidate_222: forall (y : lst) (x : natural), @eq natural (count y x) (count y (Succ x)).
Lemma candidate_223: forall (y : lst) (x : natural), @eq natural (count y x) (count y (Succ Zero)).
Lemma candidate_224: forall (y : lst) (x : natural), @eq natural (count y x) (count y x).
Lemma candidate_225: forall (y : lst) (x : natural), @eq natural (count y x) (count y Zero).
Lemma candidate_226: forall (y : lst) (x : natural), @eq natural (count y x) (x).
Lemma candidate_227: forall (y : lst) (x : natural), @eq natural (count y x) (Zero).
Lemma candidate_228: forall (n : natural) (lf4 : lst), @eq lst (insort lf4 n) (Cons n lf4).
Lemma candidate_229: forall (n : natural) (lf4 : lst), @eq lst (insort lf4 n) (Cons Zero lf4).
Lemma candidate_230: forall (n : natural) (lf4 : lst), @eq lst (insort lf4 n) (insort lf4 n).
Lemma candidate_231: forall (n : natural) (lf4 : lst), @eq lst (insort lf4 n) (Cons n Nil).
Lemma candidate_232: forall (n : natural) (lf4 : lst), @eq lst (insort lf4 n) (insort lf4 Zero).
Lemma candidate_233: forall (n : natural) (lf4 : lst), @eq lst (insort lf4 n) (Cons Zero Nil).
Lemma candidate_234: forall (n : natural) (y : lst) (lf4 : lst) (x : natural), forall _ : @eq bool (lfeqb x n) (less n x), @eq natural (count (insort lf4 n) x) (count y x).
Lemma candidate_235: forall (n : natural) (y : lst) (lf4 : lst) (x : natural), forall _ : @eq bool (lfeqb x n) (less x x), @eq natural (count (insort lf4 n) x) (count y x).
Lemma candidate_236: forall (n : natural) (y : lst) (lf4 : lst) (x : natural), forall   _ : @eq bool (lfeqb x n)         (match x with | Succ _ => true | Zero => false end), @eq natural (count (insort lf4 n) x) (count y x).
Lemma candidate_237: forall (n : natural) (y : lst) (lf4 : lst) (x : natural), forall _ : @eq bool (lfeqb x n) (less n Zero), @eq natural (count (insort lf4 n) x) (count y x).
Lemma candidate_238: forall (n : natural) (y : lst) (lf4 : lst) (x : natural), forall _ : @eq bool (lfeqb x n) (less x Zero), @eq natural (count (insort lf4 n) x) (count y x).
Lemma candidate_239: forall (n : natural) (y : lst) (lf4 : lst) (x : natural), forall _ : @eq bool (lfeqb x n) (false), @eq natural (count (insort lf4 n) x) (count y x).
Lemma candidate_240: forall (n : natural) (y : lst) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (Succ (count y n)) (count y x).
Lemma candidate_241: forall (n : natural) (y : lst) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (Succ (count y x)) (count y x).
Lemma candidate_242: forall (n : natural) (y : lst) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (Succ (count y Zero)) (count y x).
Lemma candidate_243: forall (n : natural) (y : lst) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (Succ n) (count y x).
Lemma candidate_244: forall (n : natural) (y : lst) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (Succ x) (count y x).
Lemma candidate_245: forall (n : natural) (y : lst) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (Succ Zero) (count y x).
Lemma candidate_246: forall (n : natural) (lf4 : lst) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (count (insort lf4 n) x) (count lf4 n).
Lemma candidate_247: forall (n : natural) (lf4 : lst) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (count (insort lf4 n) x) (count lf4 x).
Lemma candidate_248: forall (n : natural) (lf4 : lst) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (count (insort lf4 n) x) (count lf4 Zero).
Lemma candidate_249: forall (n : natural) (lf4 : lst) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (count (insort lf4 n) x) (n).
Lemma candidate_250: forall (n : natural) (lf4 : lst) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (count (insort lf4 n) x) (x).
Lemma candidate_251: forall (n : natural) (lf4 : lst) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (count (insort lf4 n) x) (Zero).
Lemma candidate_252: forall (n : natural) (y : lst) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (count (insort y n) x) (count y x).
Lemma candidate_253: forall (n : natural) (y : lst) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (count (Cons n Nil) x) (count y x).
Lemma candidate_254: forall (n : natural) (y : lst) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (count (insort y x) x) (count y x).
Lemma candidate_255: forall (n : natural) (y : lst) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (count (Cons x Nil) x) (count y x).
Lemma candidate_256: forall (n : natural) (y : lst) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (count (insort y Zero) x) (count y x).
Lemma candidate_257: forall (n : natural) (y : lst) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (count (Cons Zero Nil) x) (count y x).
Lemma candidate_258: forall (n : natural) (y : lst) (lf4 : lst) (x : natural), forall _ : @eq bool (lfeqb n x) false, @eq natural (count (insort lf4 n) x) (count y x).
Lemma candidate_259: forall (n : natural) (y : lst) (lf4 : lst) (x : natural), forall _ : @eq bool (lfeqb x x) false, @eq natural (count (insort lf4 n) x) (count y x).
Lemma candidate_260: forall (n : natural) (y : lst) (lf4 : lst) (x : natural), forall _ : @eq bool (match x with | Succ _ => false | Zero => true end) false, @eq natural (count (insort lf4 n) x) (count y x).
Lemma candidate_261: forall (n : natural) (y : lst) (lf4 : lst) (x : natural), forall _ : @eq bool (lfeqb n Zero) false, @eq natural (count (insort lf4 n) x) (count y x).
Lemma candidate_262: forall (n : natural) (y : lst) (lf4 : lst) (x : natural), forall _ : @eq bool (lfeqb x Zero) false, @eq natural (count (insort lf4 n) x) (count y x).
Lemma candidate_263: forall (n : natural) (y : lst) (lf4 : lst) (x : natural), forall _ : @eq bool (true) false, @eq natural (count (insort lf4 n) x) (count y x).
Lemma candidate_264: @eq bool false (false).
Lemma candidate_265: forall (n : natural) (lf4 : lst) (x : natural), @eq natural (count (insort lf4 n) x) (Succ (count lf4 n)).
Lemma candidate_266: forall (n : natural) (lf4 : lst) (x : natural), @eq natural (count (insort lf4 n) x) (Succ (count lf4 x)).
Lemma candidate_267: forall (n : natural) (lf4 : lst) (x : natural), @eq natural (count (insort lf4 n) x) (Succ (count lf4 Zero)).
Lemma candidate_268: forall (n : natural) (lf4 : lst) (x : natural), @eq natural (count (insort lf4 n) x) (Succ n).
Lemma candidate_269: forall (n : natural) (lf4 : lst) (x : natural), @eq natural (count (insort lf4 n) x) (Succ x).
Lemma candidate_270: forall (n : natural) (lf4 : lst) (x : natural), @eq natural (count (insort lf4 n) x) (Succ Zero).
Lemma candidate_271: forall (y : lst) (x : natural), @eq natural (count y x) (count y (Succ x)).
Lemma candidate_272: forall (y : lst) (x : natural), @eq natural (count y x) (count y (Succ Zero)).
Lemma candidate_273: forall (y : lst) (x : natural), @eq natural (count y x) (count y x).
Lemma candidate_274: forall (y : lst) (x : natural), @eq natural (count y x) (count y Zero).
Lemma candidate_275: forall (y : lst) (x : natural), @eq natural (count y x) (x).
Lemma candidate_276: forall (y : lst) (x : natural), @eq natural (count y x) (Zero).
Lemma candidate_277: forall (n : natural) (lf4 : lst), @eq lst (insort lf4 n) (Cons n lf4).
Lemma candidate_278: forall (n : natural) (lf4 : lst), @eq lst (insort lf4 n) (Cons Zero lf4).
Lemma candidate_279: forall (n : natural) (lf4 : lst), @eq lst (insort lf4 n) (insort lf4 n).
Lemma candidate_280: forall (n : natural) (lf4 : lst), @eq lst (insort lf4 n) (Cons n Nil).
Lemma candidate_281: forall (n : natural) (lf4 : lst), @eq lst (insort lf4 n) (insort lf4 Zero).
Lemma candidate_282: forall (n : natural) (lf4 : lst), @eq lst (insort lf4 n) (Cons Zero Nil).
Lemma candidate_283: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb n x).
Lemma candidate_284: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb x x).
Lemma candidate_285: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (match x with | Succ _ => false | Zero => true end).
Lemma candidate_286: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb n Zero).
Lemma candidate_287: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb x Zero).
Lemma candidate_288: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (true).
Lemma candidate_289: forall (y : lst) (x : natural), @eq natural (Succ (count y (Succ x))) (count y x).
Lemma candidate_290: forall (y : lst) (x : natural), @eq natural (Succ (count y (Succ Zero))) (count y x).
Lemma candidate_291: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (count y x).
Lemma candidate_292: forall (y : lst) (x : natural), @eq natural (Succ (count y Zero)) (count y x).
Lemma candidate_293: forall (y : lst) (x : natural), @eq natural (Succ x) (count y x).
Lemma candidate_294: forall (y : lst) (x : natural), @eq natural (Succ Zero) (count y x).
Lemma candidate_295: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort (sort (sort (sort y)))) n) x) (count y x).
Lemma candidate_296: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort (sort (sort y))) n) x) (count y x).
Lemma candidate_297: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort (sort y)) n) x) (count y x).
Lemma candidate_298: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (count y x).
Lemma candidate_299: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (y) n) x) (count y x).
Lemma candidate_300: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (Nil) n) x) (count y x).
Lemma candidate_301: forall (y : lst) (x : natural), @eq natural (count (Cons x y) x) (count y x).
Lemma candidate_302: forall (y : lst) (x : natural), @eq natural (count (Cons Zero y) x) (count y x).
Lemma candidate_303: forall (y : lst) (x : natural), @eq natural (count (insort y x) x) (count y x).
Lemma candidate_304: forall (y : lst) (x : natural), @eq natural (count (Cons x Nil) x) (count y x).
Lemma candidate_305: forall (y : lst) (x : natural), @eq natural (count (insort y Zero) x) (count y x).
Lemma candidate_306: forall (y : lst) (x : natural), @eq natural (count (Cons Zero Nil) x) (count y x).
Lemma candidate_307: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (count y n).
Lemma candidate_308: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (count y x).
Lemma candidate_309: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (count y Zero).
Lemma candidate_310: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (n).
Lemma candidate_311: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (x).
Lemma candidate_312: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Zero).
Lemma candidate_313: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y n)).
Lemma candidate_314: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y x)).
Lemma candidate_315: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y Zero)).
Lemma candidate_316: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ n).
Lemma candidate_317: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ x).
Lemma candidate_318: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ Zero).
Lemma candidate_319: forall (y : lst), @eq lst (sort y) (sort (sort (sort (sort y)))).
Lemma candidate_320: forall (y : lst), @eq lst (sort y) (sort (sort (sort y))).
Lemma candidate_321: forall (y : lst), @eq lst (sort y) (sort (sort y)).
Lemma candidate_322: forall (y : lst), @eq lst (sort y) (sort y).
Lemma candidate_323: forall (y : lst), @eq lst (sort y) (y).
Lemma candidate_324: forall (y : lst), @eq lst (sort y) (Nil).
Lemma candidate_325: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (Cons n y).
Lemma candidate_326: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (Cons Zero y).
Lemma candidate_327: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (insort y n).
Lemma candidate_328: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (Cons n Nil).
Lemma candidate_329: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (insort y Zero).
Lemma candidate_330: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (Cons Zero Nil).
Lemma candidate_331: forall (y : lst) (x : natural), @eq natural (count y x) (count y (Succ x)).
Lemma candidate_332: forall (y : lst) (x : natural), @eq natural (count y x) (count y (Succ Zero)).
Lemma candidate_333: forall (y : lst) (x : natural), @eq natural (count y x) (count y x).
Lemma candidate_334: forall (y : lst) (x : natural), @eq natural (count y x) (count y Zero).
Lemma candidate_335: forall (y : lst) (x : natural), @eq natural (count y x) (x).
Lemma candidate_336: forall (y : lst) (x : natural), @eq natural (count y x) (Zero).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 478 seconds
Duplicates removed: 166
Filtered by Quickchick: 151
Filtered by script: 6
Remaining: 13

Lemmas: 
Lemma candidate_102: forall (y : lst), @eq lst (sort y) (sort (sort y)).
Lemma candidate_75: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb n x).
Lemma candidate_101: forall (y : lst), @eq lst (sort y) (sort (sort (sort y))).
Lemma candidate_100: forall (y : lst), @eq lst (sort y) (sort (sort (sort (sort y)))).
Lemma candidate_61: forall (lf3 : natural) (n : natural) (lf4 : lst) (x : natural), forall _ : @eq bool (true) false, @eq natural (count (insort lf4 n) x) lf3.
Lemma candidate_136: forall (lf3 : natural) (n : natural) (y : lst) (x : natural), forall _ : @eq bool (true) false, @eq natural (count (insort (sort y) n) x) lf3.
Lemma candidate_56: forall (lf3 : natural) (n : natural) (lf4 : lst) (x : natural), forall _ : @eq bool (lfeqb x x) false, @eq natural (count (insort lf4 n) x) lf3.
Lemma candidate_263: forall (n : natural) (y : lst) (lf4 : lst) (x : natural), forall _ : @eq bool (true) false, @eq natural (count (insort lf4 n) x) (count y x).
Lemma candidate_131: forall (lf3 : natural) (n : natural) (y : lst) (x : natural), forall _ : @eq bool (lfeqb x x) false, @eq natural (count (insort (sort y) n) x) lf3.
Lemma candidate_252: forall (n : natural) (y : lst) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (count (insort y n) x) (count y x).
Lemma candidate_259: forall (n : natural) (y : lst) (lf4 : lst) (x : natural), forall _ : @eq bool (lfeqb x x) false, @eq natural (count (insort lf4 n) x) (count y x).
Lemma candidate_247: forall (n : natural) (lf4 : lst) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (count (insort lf4 n) x) (count lf4 x).
Lemma candidate_1: forall (n : natural) (y : lst) (x : natural), forall _ : @eq bool (lfeqb x n) false, @eq natural (count (insort (sort y) n) x) (count y x).