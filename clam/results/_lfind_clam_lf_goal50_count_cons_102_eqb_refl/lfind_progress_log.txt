File Information
- File name: goal50
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal50_count_cons_102_eqb_refl
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal50_count_cons_102_eqb_refl
- Namespace: adtind
- Proof name: count_cons
- Theorem: Theorem count_cons: forall (x0 : natural) (l0 : lst),
@eq natural (count (Cons x0 l0) x0) (Succ (count l0 x0)).
- Declarations: 
From lfind Require Import LFind.
Require Import Arith.

Proof Context
* Goal State: @eq natural (if lfeqb x x then Succ (count l x) else count l x)
  (Succ (count l x))

* Hypothesis:
x : natural
l : lst

* Types:
Set
natural
Prop
lst
forall _ : bool, Set
bool

* Polymorphic Types:


* Variables:
x : natural
l : lst

* Terms:
count l x : natural
lfeqb x x : bool
bool : Set
x : natural
@eq natural (if lfeqb x x then Succ (count l x) else count l x)
  (Succ (count l x)) : Prop
fun _ : bool => natural : forall _ : bool, Set
lst : Set
if lfeqb x x then Succ (count l x) else count l x : natural
Succ (count l x) : natural
natural : Set
l : lst

* Functions:
Succ  : forall _ : natural, natural
count  : forall (_ : lst) (_ : natural), natural
lfeqb  : forall (_ : natural) (_ : natural), bool
@eq  : forall (A : Type) (_ : A) (_ : A), Prop

<---GENERALIZATION--->
Time elapsed: 2 seconds
Generalized Variables:
lf3 : natural = Succ (count l x)
lf1 : natural = if lfeqb x x then Succ (count l x) else count l x
lf4 : natural = count l x
lf5 : bool = lfeqb x x
lf2 : forall _ : bool, Set = fun _ : bool => natural

Generalizations:
Lemma conj1: forall (lf1 : natural) (lf3 : natural), @eq natural lf1 lf3.
Lemma conj9: forall (lf3 : natural), @eq natural (if lf5 then lf3 else lf4) lf3.
Lemma conj11: forall (lf3 : natural), @eq natural (if lfeqb x x then lf3 else lf4) lf3.
Lemma conj13: forall (lf3 : natural), @eq natural (if lf5 then lf3 else count l x) lf3.
Lemma conj15: forall (lf3 : natural), @eq natural (if lfeqb x x then lf3 else count l x) lf3.
Lemma conj17: forall (lf4 : natural) (lf1 : natural), @eq natural lf1 (Succ lf4).
Lemma conj21: forall (x : natural) (lf1 : natural) (l : lst), @eq natural lf1 (Succ (count l x)).
Lemma conj25: forall (lf4 : natural), @eq natural (if lf5 then Succ lf4 else lf4) (Succ lf4).
Lemma conj27: forall (lf4 : natural), @eq natural (if lfeqb x x then Succ lf4 else lf4) (Succ lf4).
Lemma conj29: forall (x : natural) (l : lst), @eq natural (if lf5 then Succ (count l x) else count l x) (Succ (count l x)).
Lemma conj31: forall (x : natural) (l : lst), @eq natural (if lfeqb x x then Succ (count l x) else count l x)
  (Succ (count l x)).