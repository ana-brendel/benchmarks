File Information
- File name: goal41
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal41_subset_append_general_85_mem_append
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal41_subset_append_general_85_mem_append
- Namespace: adtind
- Proof name: subset_lfappend_general
- Theorem: Theorem subset_lfappend_general: forall (x0 y0 z0 : lst) (_ : @eq bool (lst_subset x0 y0) true),
@eq bool (lst_subset x0 (lfappend z0 y0)) true.
- Declarations: 
From lfind Require Import LFind.
Require Import Arith.

Proof Context
* Goal State: @eq bool (lst_mem n (lfappend z y)) true

* Hypothesis:
IHx : forall _ : @eq bool (lst_subset x y) true,
@eq bool (lst_subset x (lfappend z y)) true
H0 : @eq bool (lst_mem n y) true
x : lst
H : @eq bool (lst_subset x (lfappend z y)) true
y : lst
z : lst
n : natural

* Types:
Set
natural
Prop
lst
bool

* Polymorphic Types:


* Variables:
x : lst
y : lst
z : lst
n : natural

* Terms:
@eq bool (lst_mem n (lfappend z y)) true : Prop
@eq bool (lst_subset x (lfappend z y)) true : Prop
x : lst
y : lst
true : bool
@eq bool (lst_mem n y) true : Prop
forall _ : @eq bool (lst_subset x y) true,
@eq bool (lst_subset x (lfappend z y)) true : Prop
lfappend z y : lst
lst_subset x (lfappend z y) : bool
@eq bool (lst_subset x y) true : Prop
lst_mem n (lfappend z y) : bool
bool : Set
lst : Set
lst_mem n y : bool
z : lst
lst_subset x y : bool
natural : Set
n : natural

* Functions:
lfappend  : forall (_ : lst) (_ : lst), lst
lst_subset  : forall (_ : lst) (_ : lst), bool
@eq  : forall (A : Type) (_ : A) (_ : A), Prop
lst_mem  : forall (_ : natural) (_ : lst), bool

<---GENERALIZATION--->
Time elapsed: 2 seconds
Generalized Variables:
lf3 : bool = true
lf1 : bool = lst_mem n (lfappend z y)
lf2 : lst = lfappend z y

Generalizations:
Lemma conj1: forall (lf1 : bool) (lf3 : bool), @eq bool lf1 lf3.
Lemma conj3: forall (lf2 : lst) (n : natural) (lf3 : bool), @eq bool (lst_mem n lf2) lf3.
Lemma conj4: forall (y : lst) (z : lst) (n : natural) (lf3 : bool), @eq bool (lst_mem n (lfappend z y)) lf3.
Lemma conj5: forall (lf1 : bool), @eq bool lf1 true.
Lemma conj7: forall (lf2 : lst) (n : natural), @eq bool (lst_mem n lf2) true.
Lemma conj8: forall (y : lst) (z : lst) (n : natural), @eq bool (lst_mem n (lfappend z y)) true.


<---VALIDITY CHECKS--->
Time elapsed: 17 seconds
Valid:

Invalid:
Lemma conj8: forall (y : lst) (z : lst) (n : natural), @eq bool (lst_mem n (lfappend z y)) true.
Lemma conj7: forall (lf2 : lst) (n : natural), @eq bool (lst_mem n lf2) true.
Lemma conj5: forall (lf1 : bool), @eq bool lf1 true.
Lemma conj4: forall (y : lst) (z : lst) (n : natural) (lf3 : bool), @eq bool (lst_mem n (lfappend z y)) lf3.
Lemma conj3: forall (lf2 : lst) (n : natural) (lf3 : bool), @eq bool (lst_mem n lf2) lf3.
Lemma conj1: forall (lf1 : bool) (lf3 : bool), @eq bool lf1 lf3.

<---ADD IMPLICATIONS--->
Time elapsed: 38 seconds
Generalizations:
Lemma conj8_imp: forall (y : lst) (z : lst) (n : natural), forall _ : @eq bool (lst_mem n y) true,
@eq bool (lst_mem n (lfappend z y)) true.
Lemma conj8: forall (y : lst) (z : lst) (n : natural), @eq bool (lst_mem n (lfappend z y)) true.
Lemma conj7: forall (lf2 : lst) (n : natural), @eq bool (lst_mem n lf2) true.
Lemma conj5: forall (lf1 : bool), @eq bool lf1 true.
Lemma conj4_imp: forall (y : lst) (z : lst) (n : natural) (lf3 : bool), forall _ : @eq bool (lst_mem n y) lf3,
@eq bool (lst_mem n (lfappend z y)) lf3.
Lemma conj4: forall (y : lst) (z : lst) (n : natural) (lf3 : bool), @eq bool (lst_mem n (lfappend z y)) lf3.
Lemma conj3: forall (lf2 : lst) (n : natural) (lf3 : bool), @eq bool (lst_mem n lf2) lf3.
Lemma conj1: forall (lf1 : bool) (lf3 : bool), @eq bool lf1 lf3.


<---VALIDITY CHECKS--->
Time elapsed: 59 seconds
Valid:
Lemma conj8_imp: forall (y : lst) (z : lst) (n : natural), forall _ : @eq bool (lst_mem n y) true,
@eq bool (lst_mem n (lfappend z y)) true.

Invalid:
Lemma conj1: forall (lf1 : bool) (lf3 : bool), @eq bool lf1 lf3.
Lemma conj3: forall (lf2 : lst) (n : natural) (lf3 : bool), @eq bool (lst_mem n lf2) lf3.
Lemma conj4: forall (y : lst) (z : lst) (n : natural) (lf3 : bool), @eq bool (lst_mem n (lfappend z y)) lf3.
Lemma conj4_imp: forall (y : lst) (z : lst) (n : natural) (lf3 : bool), forall _ : @eq bool (lst_mem n y) lf3,
@eq bool (lst_mem n (lfappend z y)) lf3.
Lemma conj5: forall (lf1 : bool), @eq bool lf1 true.
Lemma conj7: forall (lf2 : lst) (n : natural), @eq bool (lst_mem n lf2) true.
Lemma conj8: forall (y : lst) (z : lst) (n : natural), @eq bool (lst_mem n (lfappend z y)) true.


<---CREATE SKETCHES--->
Time elapsed: 60 seconds
Sketches:
Sketch conj3_sketch0 : @eq bool (##hole##) lf3
Sketch conj3_term_sketch0 : @eq bool (lst_mem n lf2) (##hole##)
Sketch conj4_sketch0 : @eq bool (lst_mem n (##hole##)) lf3
Sketch conj4_sketch1 : @eq bool (##hole##) lf3
Sketch conj4_term_sketch0 : @eq lst (lfappend z y) (##hole##)
Sketch conj4_term_sketch1 : @eq bool (lst_mem n (lfappend z y)) (##hole##)
Sketch conj4_imp_sketch0 : forall _ : @eq bool (lst_mem n y) lf3, @eq bool (lst_mem n (##hole##)) lf3
Sketch conj4_imp_sketch1 : forall _ : @eq bool (lst_mem n y) lf3, @eq bool (##hole##) lf3
Sketch conj4_imp_sketch2 : forall _ : @eq bool (##hole##) lf3, @eq bool (lst_mem n (lfappend z y)) lf3
Sketch conj4_imp_term_sketch0 : @eq lst (lfappend z y) (##hole##)
Sketch conj4_imp_term_sketch1 : @eq bool (lst_mem n (lfappend z y)) (##hole##)
Sketch conj4_imp_term_sketch2 : @eq bool (lst_mem n y) (##hole##)
Sketch conj5_sketch0 : @eq bool lf1 (##hole##)
Sketch conj5_term_sketch0 : @eq bool true (##hole##)
Sketch conj7_sketch0 : @eq bool (##hole##) true
Sketch conj7_sketch1 : @eq bool (lst_mem n lf2) (##hole##)
Sketch conj7_term_sketch0 : @eq bool (lst_mem n lf2) (##hole##)
Sketch conj7_term_sketch1 : @eq bool true (##hole##)
Sketch conj8_sketch0 : @eq bool (lst_mem n (##hole##)) true
Sketch conj8_sketch1 : @eq bool (##hole##) true
Sketch conj8_sketch2 : @eq bool (lst_mem n (lfappend z y)) (##hole##)
Sketch conj8_term_sketch0 : @eq lst (lfappend z y) (##hole##)
Sketch conj8_term_sketch1 : @eq bool (lst_mem n (lfappend z y)) (##hole##)
Sketch conj8_term_sketch2 : @eq bool true (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 60 seconds
Problems per Sketch:
Sketch conj4_imp_sketch2 --> Problem  synth_8
Sketch conj7_sketch1 --> Problem  synth_2
Sketch conj5_sketch0 --> Problem  synth_10
Sketch conj3_term_sketch0 --> Problem  synth_2
Sketch conj4_imp_term_sketch2 --> Problem  synth_9
Sketch conj7_term_sketch0 --> Problem  synth_2
Sketch conj4_imp_term_sketch0 --> Problem  synth_4
Sketch conj8_sketch1 --> Problem  synth_11
Sketch conj7_sketch0 --> Problem  synth_11
Sketch conj4_sketch0 --> Problem  synth_3
Sketch conj4_sketch1 --> Problem  synth_1
Sketch conj4_imp_sketch1 --> Problem  synth_7
Sketch conj4_term_sketch1 --> Problem  synth_5
Sketch conj8_term_sketch0 --> Problem  synth_4
Sketch conj4_imp_term_sketch1 --> Problem  synth_5
Sketch conj3_sketch0 --> Problem  synth_1
Sketch conj8_sketch2 --> Problem  synth_5
Sketch conj8_sketch0 --> Problem  synth_12
Sketch conj7_term_sketch1 --> Problem  synth_11
Sketch conj8_term_sketch1 --> Problem  synth_5
Sketch conj4_term_sketch0 --> Problem  synth_4
Sketch conj8_term_sketch2 --> Problem  synth_11
Sketch conj5_term_sketch0 --> Problem  synth_11
Sketch conj4_imp_sketch0 --> Problem  synth_6


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 115 seconds

Problem: synth_10
 lf1
 true
 false

Problem: synth_8
 mem z Zero
 mem y Zero
 lfeqb n Zero
 lf3
 true
 false

Problem: synth_3
 Cons Zero (Cons Zero Nil)
 Cons (Succ n) Nil
 Cons (Succ Zero) Nil
 Cons n Nil
 Cons Zero Nil
 Nil

Problem: synth_9
 lfeqb n n
 match n with | Succ _ => false | Zero => true end
 mem y Zero
 lfeqb n Zero
 true
 false

Problem: synth_12
 Cons Zero (Cons Zero Nil)
 Cons (Succ n) Nil
 Cons (Succ Zero) Nil
 Cons n Nil
 Cons Zero Nil
 Nil

Problem: synth_6
 lfappend y Nil
 lst_intersection y Nil
 Cons n Nil
 Cons Zero Nil
 y
 Nil

Problem: synth_11
 true
 false

Problem: synth_7
 match n with | Succ _ => false | Zero => true end
 mem y Zero
 lfeqb n Zero
 lf3
 true
 false

Problem: synth_5
 match n with | Succ _ => false | Zero => true end
 mem z Zero
 mem y Zero
 lfeqb n Zero
 true
 false

Problem: synth_4
 lfappend y Nil
 lst_intersection y Nil
 Cons Zero Nil
 z
 y
 Nil

Problem: synth_1
 lf3
 true
 false

Problem: synth_2
 lfeqb n n
 match n with | Succ _ => false | Zero => true end
 mem lf2 Zero
 lfeqb n Zero
 true
 false

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 115 seconds
Lemmas:
Lemma candidate_1: forall (n : natural) (z : lst) (y : lst), forall _ : @eq bool (lst_mem n y) true, @eq bool (lst_mem n (lfappend z y)) true.
Lemma candidate_2: forall (lf3 : bool), @eq bool (lf3) lf3.
Lemma candidate_3: forall (lf3 : bool), @eq bool (true) lf3.
Lemma candidate_4: forall (lf3 : bool), @eq bool (false) lf3.
Lemma candidate_5: forall (n : natural) (lf2 : lst), @eq bool (lst_mem n lf2) (lfeqb n n).
Lemma candidate_6: forall (n : natural) (lf2 : lst), @eq bool (lst_mem n lf2) (match n with | Succ _ => false | Zero => true end).
Lemma candidate_7: forall (n : natural) (lf2 : lst), @eq bool (lst_mem n lf2) (mem lf2 Zero).
Lemma candidate_8: forall (n : natural) (lf2 : lst), @eq bool (lst_mem n lf2) (lfeqb n Zero).
Lemma candidate_9: forall (n : natural) (lf2 : lst), @eq bool (lst_mem n lf2) (true).
Lemma candidate_10: forall (n : natural) (lf2 : lst), @eq bool (lst_mem n lf2) (false).
Lemma candidate_11: forall (lf3 : bool) (n : natural), @eq bool (lst_mem n (Cons Zero (Cons Zero Nil))) lf3.
Lemma candidate_12: forall (lf3 : bool) (n : natural), @eq bool (lst_mem n (Cons (Succ n) Nil)) lf3.
Lemma candidate_13: forall (lf3 : bool) (n : natural), @eq bool (lst_mem n (Cons (Succ Zero) Nil)) lf3.
Lemma candidate_14: forall (lf3 : bool) (n : natural), @eq bool (lst_mem n (Cons n Nil)) lf3.
Lemma candidate_15: forall (lf3 : bool) (n : natural), @eq bool (lst_mem n (Cons Zero Nil)) lf3.
Lemma candidate_16: forall (lf3 : bool) (n : natural), @eq bool (lst_mem n (Nil)) lf3.
Lemma candidate_17: forall (lf3 : bool), @eq bool (lf3) lf3.
Lemma candidate_18: forall (lf3 : bool), @eq bool (true) lf3.
Lemma candidate_19: forall (lf3 : bool), @eq bool (false) lf3.
Lemma candidate_20: forall (z : lst) (y : lst), @eq lst (lfappend z y) (lfappend y Nil).
Lemma candidate_21: forall (z : lst) (y : lst), @eq lst (lfappend z y) (lst_intersection y Nil).
Lemma candidate_22: forall (z : lst) (y : lst), @eq lst (lfappend z y) (Cons Zero Nil).
Lemma candidate_23: forall (z : lst) (y : lst), @eq lst (lfappend z y) (z).
Lemma candidate_24: forall (z : lst) (y : lst), @eq lst (lfappend z y) (y).
Lemma candidate_25: forall (z : lst) (y : lst), @eq lst (lfappend z y) (Nil).
Lemma candidate_26: forall (n : natural) (z : lst) (y : lst), @eq bool (lst_mem n (lfappend z y))   (match n with | Succ _ => false | Zero => true end).
Lemma candidate_27: forall (n : natural) (z : lst) (y : lst), @eq bool (lst_mem n (lfappend z y)) (mem z Zero).
Lemma candidate_28: forall (n : natural) (z : lst) (y : lst), @eq bool (lst_mem n (lfappend z y)) (mem y Zero).
Lemma candidate_29: forall (n : natural) (z : lst) (y : lst), @eq bool (lst_mem n (lfappend z y)) (lfeqb n Zero).
Lemma candidate_30: forall (n : natural) (z : lst) (y : lst), @eq bool (lst_mem n (lfappend z y)) (true).
Lemma candidate_31: forall (n : natural) (z : lst) (y : lst), @eq bool (lst_mem n (lfappend z y)) (false).
Lemma candidate_32: forall (lf3 : bool) (n : natural) (y : lst), forall _ : @eq bool (lst_mem n y) lf3, @eq bool (lst_mem n (lfappend y Nil)) lf3.
Lemma candidate_33: forall (lf3 : bool) (n : natural) (y : lst), forall _ : @eq bool (lst_mem n y) lf3, @eq bool (lst_mem n (lst_intersection y Nil)) lf3.
Lemma candidate_34: forall (lf3 : bool) (n : natural) (y : lst), forall _ : @eq bool (lst_mem n y) lf3, @eq bool (lst_mem n (Cons n Nil)) lf3.
Lemma candidate_35: forall (lf3 : bool) (n : natural) (y : lst), forall _ : @eq bool (lst_mem n y) lf3, @eq bool (lst_mem n (Cons Zero Nil)) lf3.
Lemma candidate_36: forall (lf3 : bool) (n : natural) (y : lst), forall _ : @eq bool (lst_mem n y) lf3, @eq bool (lst_mem n (y)) lf3.
Lemma candidate_37: forall (lf3 : bool) (n : natural) (y : lst), forall _ : @eq bool (lst_mem n y) lf3, @eq bool (lst_mem n (Nil)) lf3.
Lemma candidate_38: forall (lf3 : bool) (n : natural) (y : lst), forall _ : @eq bool (lst_mem n y) lf3, @eq bool (match n with | Succ _ => false | Zero => true end) lf3.
Lemma candidate_39: forall (lf3 : bool) (n : natural) (y : lst), forall _ : @eq bool (lst_mem n y) lf3, @eq bool (mem y Zero) lf3.
Lemma candidate_40: forall (lf3 : bool) (n : natural) (y : lst), forall _ : @eq bool (lst_mem n y) lf3, @eq bool (lfeqb n Zero) lf3.
Lemma candidate_41: forall (lf3 : bool) (n : natural) (y : lst), forall _ : @eq bool (lst_mem n y) lf3, @eq bool (lf3) lf3.
Lemma candidate_42: forall (lf3 : bool) (n : natural) (y : lst), forall _ : @eq bool (lst_mem n y) lf3, @eq bool (true) lf3.
Lemma candidate_43: forall (lf3 : bool) (n : natural) (y : lst), forall _ : @eq bool (lst_mem n y) lf3, @eq bool (false) lf3.
Lemma candidate_44: forall (lf3 : bool) (n : natural) (z : lst) (y : lst), forall _ : @eq bool (mem z Zero) lf3, @eq bool (lst_mem n (lfappend z y)) lf3.
Lemma candidate_45: forall (lf3 : bool) (n : natural) (z : lst) (y : lst), forall _ : @eq bool (mem y Zero) lf3, @eq bool (lst_mem n (lfappend z y)) lf3.
Lemma candidate_46: forall (lf3 : bool) (n : natural) (z : lst) (y : lst), forall _ : @eq bool (lfeqb n Zero) lf3, @eq bool (lst_mem n (lfappend z y)) lf3.
Lemma candidate_47: forall (lf3 : bool) (n : natural) (z : lst) (y : lst), forall _ : @eq bool (lf3) lf3, @eq bool (lst_mem n (lfappend z y)) lf3.
Lemma candidate_48: forall (lf3 : bool) (n : natural) (z : lst) (y : lst), forall _ : @eq bool (true) lf3, @eq bool (lst_mem n (lfappend z y)) lf3.
Lemma candidate_49: forall (lf3 : bool) (n : natural) (z : lst) (y : lst), forall _ : @eq bool (false) lf3, @eq bool (lst_mem n (lfappend z y)) lf3.
Lemma candidate_50: forall (z : lst) (y : lst), @eq lst (lfappend z y) (lfappend y Nil).
Lemma candidate_51: forall (z : lst) (y : lst), @eq lst (lfappend z y) (lst_intersection y Nil).
Lemma candidate_52: forall (z : lst) (y : lst), @eq lst (lfappend z y) (Cons Zero Nil).
Lemma candidate_53: forall (z : lst) (y : lst), @eq lst (lfappend z y) (z).
Lemma candidate_54: forall (z : lst) (y : lst), @eq lst (lfappend z y) (y).
Lemma candidate_55: forall (z : lst) (y : lst), @eq lst (lfappend z y) (Nil).
Lemma candidate_56: forall (n : natural) (z : lst) (y : lst), @eq bool (lst_mem n (lfappend z y))   (match n with | Succ _ => false | Zero => true end).
Lemma candidate_57: forall (n : natural) (z : lst) (y : lst), @eq bool (lst_mem n (lfappend z y)) (mem z Zero).
Lemma candidate_58: forall (n : natural) (z : lst) (y : lst), @eq bool (lst_mem n (lfappend z y)) (mem y Zero).
Lemma candidate_59: forall (n : natural) (z : lst) (y : lst), @eq bool (lst_mem n (lfappend z y)) (lfeqb n Zero).
Lemma candidate_60: forall (n : natural) (z : lst) (y : lst), @eq bool (lst_mem n (lfappend z y)) (true).
Lemma candidate_61: forall (n : natural) (z : lst) (y : lst), @eq bool (lst_mem n (lfappend z y)) (false).
Lemma candidate_62: forall (n : natural) (y : lst), @eq bool (lst_mem n y) (lfeqb n n).
Lemma candidate_63: forall (n : natural) (y : lst), @eq bool (lst_mem n y) (match n with | Succ _ => false | Zero => true end).
Lemma candidate_64: forall (n : natural) (y : lst), @eq bool (lst_mem n y) (mem y Zero).
Lemma candidate_65: forall (n : natural) (y : lst), @eq bool (lst_mem n y) (lfeqb n Zero).
Lemma candidate_66: forall (n : natural) (y : lst), @eq bool (lst_mem n y) (true).
Lemma candidate_67: forall (n : natural) (y : lst), @eq bool (lst_mem n y) (false).
Lemma candidate_68: forall (lf1 : bool), @eq bool lf1 (lf1).
Lemma candidate_69: forall (lf1 : bool), @eq bool lf1 (true).
Lemma candidate_70: forall (lf1 : bool), @eq bool lf1 (false).
Lemma candidate_71: @eq bool true (true).
Lemma candidate_72: @eq bool true (false).
Lemma candidate_73: @eq bool (true) true.
Lemma candidate_74: @eq bool (false) true.
Lemma candidate_75: forall (n : natural) (lf2 : lst), @eq bool (lst_mem n lf2) (lfeqb n n).
Lemma candidate_76: forall (n : natural) (lf2 : lst), @eq bool (lst_mem n lf2) (match n with | Succ _ => false | Zero => true end).
Lemma candidate_77: forall (n : natural) (lf2 : lst), @eq bool (lst_mem n lf2) (mem lf2 Zero).
Lemma candidate_78: forall (n : natural) (lf2 : lst), @eq bool (lst_mem n lf2) (lfeqb n Zero).
Lemma candidate_79: forall (n : natural) (lf2 : lst), @eq bool (lst_mem n lf2) (true).
Lemma candidate_80: forall (n : natural) (lf2 : lst), @eq bool (lst_mem n lf2) (false).
Lemma candidate_81: forall (n : natural) (lf2 : lst), @eq bool (lst_mem n lf2) (lfeqb n n).
Lemma candidate_82: forall (n : natural) (lf2 : lst), @eq bool (lst_mem n lf2) (match n with | Succ _ => false | Zero => true end).
Lemma candidate_83: forall (n : natural) (lf2 : lst), @eq bool (lst_mem n lf2) (mem lf2 Zero).
Lemma candidate_84: forall (n : natural) (lf2 : lst), @eq bool (lst_mem n lf2) (lfeqb n Zero).
Lemma candidate_85: forall (n : natural) (lf2 : lst), @eq bool (lst_mem n lf2) (true).
Lemma candidate_86: forall (n : natural) (lf2 : lst), @eq bool (lst_mem n lf2) (false).
Lemma candidate_87: @eq bool true (true).
Lemma candidate_88: @eq bool true (false).
Lemma candidate_89: forall (n : natural), @eq bool (lst_mem n (Cons Zero (Cons Zero Nil))) true.
Lemma candidate_90: forall (n : natural), @eq bool (lst_mem n (Cons (Succ n) Nil)) true.
Lemma candidate_91: forall (n : natural), @eq bool (lst_mem n (Cons (Succ Zero) Nil)) true.
Lemma candidate_92: forall (n : natural), @eq bool (lst_mem n (Cons n Nil)) true.
Lemma candidate_93: forall (n : natural), @eq bool (lst_mem n (Cons Zero Nil)) true.
Lemma candidate_94: forall (n : natural), @eq bool (lst_mem n (Nil)) true.
Lemma candidate_95: @eq bool (true) true.
Lemma candidate_96: @eq bool (false) true.
Lemma candidate_97: forall (n : natural) (z : lst) (y : lst), @eq bool (lst_mem n (lfappend z y))   (match n with | Succ _ => false | Zero => true end).
Lemma candidate_98: forall (n : natural) (z : lst) (y : lst), @eq bool (lst_mem n (lfappend z y)) (mem z Zero).
Lemma candidate_99: forall (n : natural) (z : lst) (y : lst), @eq bool (lst_mem n (lfappend z y)) (mem y Zero).
Lemma candidate_100: forall (n : natural) (z : lst) (y : lst), @eq bool (lst_mem n (lfappend z y)) (lfeqb n Zero).
Lemma candidate_101: forall (n : natural) (z : lst) (y : lst), @eq bool (lst_mem n (lfappend z y)) (true).
Lemma candidate_102: forall (n : natural) (z : lst) (y : lst), @eq bool (lst_mem n (lfappend z y)) (false).
Lemma candidate_103: forall (z : lst) (y : lst), @eq lst (lfappend z y) (lfappend y Nil).
Lemma candidate_104: forall (z : lst) (y : lst), @eq lst (lfappend z y) (lst_intersection y Nil).
Lemma candidate_105: forall (z : lst) (y : lst), @eq lst (lfappend z y) (Cons Zero Nil).
Lemma candidate_106: forall (z : lst) (y : lst), @eq lst (lfappend z y) (z).
Lemma candidate_107: forall (z : lst) (y : lst), @eq lst (lfappend z y) (y).
Lemma candidate_108: forall (z : lst) (y : lst), @eq lst (lfappend z y) (Nil).
Lemma candidate_109: forall (n : natural) (z : lst) (y : lst), @eq bool (lst_mem n (lfappend z y))   (match n with | Succ _ => false | Zero => true end).
Lemma candidate_110: forall (n : natural) (z : lst) (y : lst), @eq bool (lst_mem n (lfappend z y)) (mem z Zero).
Lemma candidate_111: forall (n : natural) (z : lst) (y : lst), @eq bool (lst_mem n (lfappend z y)) (mem y Zero).
Lemma candidate_112: forall (n : natural) (z : lst) (y : lst), @eq bool (lst_mem n (lfappend z y)) (lfeqb n Zero).
Lemma candidate_113: forall (n : natural) (z : lst) (y : lst), @eq bool (lst_mem n (lfappend z y)) (true).
Lemma candidate_114: forall (n : natural) (z : lst) (y : lst), @eq bool (lst_mem n (lfappend z y)) (false).
Lemma candidate_115: @eq bool true (true).
Lemma candidate_116: @eq bool true (false).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 286 seconds
Duplicates removed: 51
Filtered by Quickchick: 56
Filtered by script: 6
Remaining: 3

Lemmas: 
Lemma candidate_92: forall (n : natural), @eq bool (lst_mem n (Cons n Nil)) true.
Lemma candidate_32: forall (lf3 : bool) (n : natural) (y : lst), forall _ : @eq bool (lst_mem n y) lf3, @eq bool (lst_mem n (lfappend y Nil)) lf3.
Lemma candidate_1: forall (n : natural) (z : lst) (y : lst), forall _ : @eq bool (lst_mem n y) true, @eq bool (lst_mem n (lfappend z y)) true.