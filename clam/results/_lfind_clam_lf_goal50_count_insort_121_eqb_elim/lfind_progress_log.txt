File Information
- File name: goal50
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal50_count_insort_121_eqb_elim
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal50_count_insort_121_eqb_elim
- Namespace: adtind
- Proof name: count_insort
- Theorem: Theorem count_insort: forall (x0 : natural) (l0 : lst),
@eq natural (count (insort l0 x0) x0) (Succ (count l0 x0)).
- Declarations: 
From lfind Require Import LFind.
Require Import Arith.

Proof Context
* Goal State: @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x)))

* Hypothesis:
x : natural
IHl : @eq natural (count (insort l x) x) (Succ (count l x))
l : lst
n : natural
E : Bool.Is_true (lfeqb x n)

* Types:
Set
natural
Prop
lst
bool

* Polymorphic Types:


* Variables:
x : natural
l : lst
n : natural

* Terms:
Bool.Is_true (lfeqb x n) : Prop
@eq natural (count (insort l x) x) (Succ (count l x)) : Prop
count l x : natural
Cons n (insort l x) : lst
x : natural
lst : Set
lfeqb x n : bool
Succ (count l x) : natural
insort l x : lst
count (Cons n (insort l x)) x : natural
Succ (Succ (count l x)) : natural
n : natural
natural : Set
l : lst
@eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))) : Prop
count (insort l x) x : natural

* Functions:
Succ  : forall _ : natural, natural
count  : forall (_ : lst) (_ : natural), natural
lfeqb  : forall (_ : natural) (_ : natural), bool
Bool.Is_true  : forall _ : bool, Prop
insort  : forall (_ : lst) (_ : natural), lst
Cons  : forall (_ : natural) (_ : lst), lst
@eq  : forall (A : Type) (_ : A) (_ : A), Prop

<---GENERALIZATION--->
Time elapsed: 2 seconds
Generalized Variables:
lf3 : lst = Cons n (insort l x)
lf1 : natural = count (Cons n (insort l x)) x
lf4 : natural = Succ (count l x)
lf5 : lst = insort l x
lf2 : natural = Succ (Succ (count l x))
lf6 : natural = count l x

Generalizations:
Lemma conj1: forall (lf2 : natural) (lf1 : natural), @eq natural lf1 lf2.
Lemma conj3: forall (lf4 : natural) (lf1 : natural), @eq natural lf1 (Succ lf4).
Lemma conj11: forall (lf6 : natural) (lf1 : natural), @eq natural lf1 (Succ (Succ lf6)).
Lemma conj12: forall (x : natural) (lf1 : natural) (l : lst), @eq natural lf1 (Succ (Succ (count l x))).
Lemma conj17: forall (lf2 : natural) (x : natural) (lf3 : lst), @eq natural (count lf3 x) lf2.
Lemma conj19: forall (x : natural) (lf4 : natural) (lf3 : lst), @eq natural (count lf3 x) (Succ lf4).
Lemma conj27: forall (lf6 : natural) (x : natural) (lf3 : lst), @eq natural (count lf3 x) (Succ (Succ lf6)).
Lemma conj28: forall (x : natural) (l : lst) (lf3 : lst), @eq natural (count lf3 x) (Succ (Succ (count l x))).
Lemma conj49: forall (lf2 : natural) (lf5 : lst) (x : natural) (n : natural), @eq natural (count (Cons n lf5) x) lf2.
Lemma conj51: forall (lf5 : lst) (x : natural) (lf4 : natural) (n : natural), @eq natural (count (Cons n lf5) x) (Succ lf4).
Lemma conj53: forall (lf2 : natural) (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) lf2.
Lemma conj55: forall (x : natural) (lf4 : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) (Succ lf4).
Lemma conj59: forall (lf6 : natural) (lf5 : lst) (x : natural) (n : natural), @eq natural (count (Cons n lf5) x) (Succ (Succ lf6)).
Lemma conj60: forall (lf5 : lst) (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n lf5) x) (Succ (Succ (count l x))).
Lemma conj63: forall (lf6 : natural) (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ lf6)).
Lemma conj64: forall (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).


<---VALIDITY CHECKS--->
Time elapsed: 58 seconds
Valid:

Invalid:
Lemma conj64: forall (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).
Lemma conj63: forall (lf6 : natural) (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ lf6)).
Lemma conj60: forall (lf5 : lst) (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n lf5) x) (Succ (Succ (count l x))).
Lemma conj59: forall (lf6 : natural) (lf5 : lst) (x : natural) (n : natural), @eq natural (count (Cons n lf5) x) (Succ (Succ lf6)).
Lemma conj55: forall (x : natural) (lf4 : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) (Succ lf4).
Lemma conj53: forall (lf2 : natural) (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) lf2.
Lemma conj51: forall (lf5 : lst) (x : natural) (lf4 : natural) (n : natural), @eq natural (count (Cons n lf5) x) (Succ lf4).
Lemma conj49: forall (lf2 : natural) (lf5 : lst) (x : natural) (n : natural), @eq natural (count (Cons n lf5) x) lf2.
Lemma conj28: forall (x : natural) (l : lst) (lf3 : lst), @eq natural (count lf3 x) (Succ (Succ (count l x))).
Lemma conj27: forall (lf6 : natural) (x : natural) (lf3 : lst), @eq natural (count lf3 x) (Succ (Succ lf6)).
Lemma conj19: forall (x : natural) (lf4 : natural) (lf3 : lst), @eq natural (count lf3 x) (Succ lf4).
Lemma conj17: forall (lf2 : natural) (x : natural) (lf3 : lst), @eq natural (count lf3 x) lf2.
Lemma conj12: forall (x : natural) (lf1 : natural) (l : lst), @eq natural lf1 (Succ (Succ (count l x))).
Lemma conj11: forall (lf6 : natural) (lf1 : natural), @eq natural lf1 (Succ (Succ lf6)).
Lemma conj3: forall (lf4 : natural) (lf1 : natural), @eq natural lf1 (Succ lf4).
Lemma conj1: forall (lf2 : natural) (lf1 : natural), @eq natural lf1 lf2.

<---ADD IMPLICATIONS--->
Time elapsed: 85 seconds
Generalizations:
Lemma conj64: forall (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).
Lemma conj63_imp: forall (lf6 : natural) (x : natural) (l : lst) (n : natural), forall _ : @eq natural (count (insort l x) x) (Succ lf6),
@eq natural (count (Cons n (insort l x)) x) (Succ (Succ lf6)).
Lemma conj63: forall (lf6 : natural) (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ lf6)).
Lemma conj60_imp: forall (lf5 : lst) (x : natural) (l : lst) (n : natural), forall _ : @eq natural (count lf5 x) (Succ (count l x)),
@eq natural (count (Cons n lf5) x) (Succ (Succ (count l x))).
Lemma conj60: forall (lf5 : lst) (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n lf5) x) (Succ (Succ (count l x))).
Lemma conj59_imp: forall (lf6 : natural) (lf5 : lst) (x : natural) (n : natural), forall _ : @eq natural (count lf5 x) (Succ lf6),
@eq natural (count (Cons n lf5) x) (Succ (Succ lf6)).
Lemma conj59: forall (lf6 : natural) (lf5 : lst) (x : natural) (n : natural), @eq natural (count (Cons n lf5) x) (Succ (Succ lf6)).
Lemma conj55_imp: forall (x : natural) (lf4 : natural) (l : lst) (n : natural), forall _ : @eq natural (count (insort l x) x) lf4,
@eq natural (count (Cons n (insort l x)) x) (Succ lf4).
Lemma conj55: forall (x : natural) (lf4 : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) (Succ lf4).
Lemma conj53: forall (lf2 : natural) (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) lf2.
Lemma conj51: forall (lf5 : lst) (x : natural) (lf4 : natural) (n : natural), @eq natural (count (Cons n lf5) x) (Succ lf4).
Lemma conj49: forall (lf2 : natural) (lf5 : lst) (x : natural) (n : natural), @eq natural (count (Cons n lf5) x) lf2.
Lemma conj28: forall (x : natural) (l : lst) (lf3 : lst), @eq natural (count lf3 x) (Succ (Succ (count l x))).
Lemma conj27: forall (lf6 : natural) (x : natural) (lf3 : lst), @eq natural (count lf3 x) (Succ (Succ lf6)).
Lemma conj19: forall (x : natural) (lf4 : natural) (lf3 : lst), @eq natural (count lf3 x) (Succ lf4).
Lemma conj17: forall (lf2 : natural) (x : natural) (lf3 : lst), @eq natural (count lf3 x) lf2.
Lemma conj12: forall (x : natural) (lf1 : natural) (l : lst), @eq natural lf1 (Succ (Succ (count l x))).
Lemma conj11: forall (lf6 : natural) (lf1 : natural), @eq natural lf1 (Succ (Succ lf6)).
Lemma conj3: forall (lf4 : natural) (lf1 : natural), @eq natural lf1 (Succ lf4).
Lemma conj1: forall (lf2 : natural) (lf1 : natural), @eq natural lf1 lf2.


<---VALIDITY CHECKS--->
Time elapsed: 119 seconds
Valid:

Invalid:
Lemma conj1: forall (lf2 : natural) (lf1 : natural), @eq natural lf1 lf2.
Lemma conj3: forall (lf4 : natural) (lf1 : natural), @eq natural lf1 (Succ lf4).
Lemma conj11: forall (lf6 : natural) (lf1 : natural), @eq natural lf1 (Succ (Succ lf6)).
Lemma conj12: forall (x : natural) (lf1 : natural) (l : lst), @eq natural lf1 (Succ (Succ (count l x))).
Lemma conj17: forall (lf2 : natural) (x : natural) (lf3 : lst), @eq natural (count lf3 x) lf2.
Lemma conj19: forall (x : natural) (lf4 : natural) (lf3 : lst), @eq natural (count lf3 x) (Succ lf4).
Lemma conj27: forall (lf6 : natural) (x : natural) (lf3 : lst), @eq natural (count lf3 x) (Succ (Succ lf6)).
Lemma conj28: forall (x : natural) (l : lst) (lf3 : lst), @eq natural (count lf3 x) (Succ (Succ (count l x))).
Lemma conj49: forall (lf2 : natural) (lf5 : lst) (x : natural) (n : natural), @eq natural (count (Cons n lf5) x) lf2.
Lemma conj51: forall (lf5 : lst) (x : natural) (lf4 : natural) (n : natural), @eq natural (count (Cons n lf5) x) (Succ lf4).
Lemma conj53: forall (lf2 : natural) (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) lf2.
Lemma conj55: forall (x : natural) (lf4 : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) (Succ lf4).
Lemma conj55_imp: forall (x : natural) (lf4 : natural) (l : lst) (n : natural), forall _ : @eq natural (count (insort l x) x) lf4,
@eq natural (count (Cons n (insort l x)) x) (Succ lf4).
Lemma conj59: forall (lf6 : natural) (lf5 : lst) (x : natural) (n : natural), @eq natural (count (Cons n lf5) x) (Succ (Succ lf6)).
Lemma conj59_imp: forall (lf6 : natural) (lf5 : lst) (x : natural) (n : natural), forall _ : @eq natural (count lf5 x) (Succ lf6),
@eq natural (count (Cons n lf5) x) (Succ (Succ lf6)).
Lemma conj60: forall (lf5 : lst) (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n lf5) x) (Succ (Succ (count l x))).
Lemma conj60_imp: forall (lf5 : lst) (x : natural) (l : lst) (n : natural), forall _ : @eq natural (count lf5 x) (Succ (count l x)),
@eq natural (count (Cons n lf5) x) (Succ (Succ (count l x))).
Lemma conj63: forall (lf6 : natural) (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ lf6)).
Lemma conj63_imp: forall (lf6 : natural) (x : natural) (l : lst) (n : natural), forall _ : @eq natural (count (insort l x) x) (Succ lf6),
@eq natural (count (Cons n (insort l x)) x) (Succ (Succ lf6)).
Lemma conj64: forall (x : natural) (l : lst) (n : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).


<---CREATE SKETCHES--->
Time elapsed: 120 seconds
Sketches:
Sketch conj3_sketch0 : @eq natural lf1 (##hole##)
Sketch conj3_term_sketch0 : @eq natural (Succ lf4) (##hole##)
Sketch conj11_sketch0 : @eq natural lf1 (Succ (##hole##))
Sketch conj11_sketch1 : @eq natural lf1 (##hole##)
Sketch conj11_term_sketch0 : @eq natural (Succ lf6) (##hole##)
Sketch conj11_term_sketch1 : @eq natural (Succ (Succ lf6)) (##hole##)
Sketch conj12_sketch0 : @eq natural lf1 (Succ (Succ (##hole##)))
Sketch conj12_sketch1 : @eq natural lf1 (Succ (##hole##))
Sketch conj12_sketch2 : @eq natural lf1 (##hole##)
Sketch conj12_term_sketch0 : @eq natural (count l x) (##hole##)
Sketch conj12_term_sketch1 : @eq natural (Succ (count l x)) (##hole##)
Sketch conj12_term_sketch2 : @eq natural (Succ (Succ (count l x))) (##hole##)
Sketch conj17_sketch0 : @eq natural (##hole##) lf2
Sketch conj17_term_sketch0 : @eq natural (count lf3 x) (##hole##)
Sketch conj19_sketch0 : @eq natural (##hole##) (Succ lf4)
Sketch conj19_sketch1 : @eq natural (count lf3 x) (##hole##)
Sketch conj19_term_sketch0 : @eq natural (count lf3 x) (##hole##)
Sketch conj19_term_sketch1 : @eq natural (Succ lf4) (##hole##)
Sketch conj27_sketch0 : @eq natural (##hole##) (Succ (Succ lf6))
Sketch conj27_sketch1 : @eq natural (count lf3 x) (Succ (##hole##))
Sketch conj27_sketch2 : @eq natural (count lf3 x) (##hole##)
Sketch conj27_term_sketch0 : @eq natural (count lf3 x) (##hole##)
Sketch conj27_term_sketch1 : @eq natural (Succ lf6) (##hole##)
Sketch conj27_term_sketch2 : @eq natural (Succ (Succ lf6)) (##hole##)
Sketch conj28_sketch0 : @eq natural (##hole##) (Succ (Succ (count l x)))
Sketch conj28_sketch1 : @eq natural (count lf3 x) (Succ (Succ (##hole##)))
Sketch conj28_sketch2 : @eq natural (count lf3 x) (Succ (##hole##))
Sketch conj28_sketch3 : @eq natural (count lf3 x) (##hole##)
Sketch conj28_term_sketch0 : @eq natural (count lf3 x) (##hole##)
Sketch conj28_term_sketch1 : @eq natural (count l x) (##hole##)
Sketch conj28_term_sketch2 : @eq natural (Succ (count l x)) (##hole##)
Sketch conj28_term_sketch3 : @eq natural (Succ (Succ (count l x))) (##hole##)
Sketch conj49_sketch0 : @eq natural (count (##hole##) x) lf2
Sketch conj49_sketch1 : @eq natural (##hole##) lf2
Sketch conj49_term_sketch0 : @eq lst (Cons n lf5) (##hole##)
Sketch conj49_term_sketch1 : @eq natural (count (Cons n lf5) x) (##hole##)
Sketch conj51_sketch0 : @eq natural (count (##hole##) x) (Succ lf4)
Sketch conj51_sketch1 : @eq natural (count (Cons n lf5) x) (##hole##)
Sketch conj51_sketch2 : @eq natural (##hole##) (Succ lf4)
Sketch conj51_term_sketch0 : @eq lst (Cons n lf5) (##hole##)
Sketch conj51_term_sketch1 : @eq natural (Succ lf4) (##hole##)
Sketch conj51_term_sketch2 : @eq natural (count (Cons n lf5) x) (##hole##)
Sketch conj53_sketch0 : @eq natural (count (##hole##) x) lf2
Sketch conj53_sketch1 : @eq natural (count (Cons n (##hole##)) x) lf2
Sketch conj53_sketch2 : @eq natural (##hole##) lf2
Sketch conj53_term_sketch0 : @eq lst (Cons n (insort l x)) (##hole##)
Sketch conj53_term_sketch1 : @eq lst (insort l x) (##hole##)
Sketch conj53_term_sketch2 : @eq natural (count (Cons n (insort l x)) x) (##hole##)
Sketch conj55_sketch0 : @eq natural (count (##hole##) x) (Succ lf4)
Sketch conj55_sketch1 : @eq natural (count (Cons n (insort l x)) x) (##hole##)
Sketch conj55_sketch2 : @eq natural (count (Cons n (##hole##)) x) (Succ lf4)
Sketch conj55_sketch3 : @eq natural (##hole##) (Succ lf4)
Sketch conj55_term_sketch0 : @eq lst (Cons n (insort l x)) (##hole##)
Sketch conj55_term_sketch1 : @eq natural (Succ lf4) (##hole##)
Sketch conj55_term_sketch2 : @eq lst (insort l x) (##hole##)
Sketch conj55_term_sketch3 : @eq natural (count (Cons n (insort l x)) x) (##hole##)
Sketch conj55_imp_sketch0 : forall _ : @eq natural (count (insort l x) x) lf4,
@eq natural (count (##hole##) x) (Succ lf4)
Sketch conj55_imp_sketch1 : forall _ : @eq natural (count (insort l x) x) lf4,
@eq natural (count (Cons n (insort l x)) x) (##hole##)
Sketch conj55_imp_sketch2 : forall _ : @eq natural (count (##hole##) x) lf4,
@eq natural (count (Cons n (##hole##)) x) (Succ lf4)
Sketch conj55_imp_sketch3 : forall _ : @eq natural (count (insort l x) x) lf4,
@eq natural (##hole##) (Succ lf4)
Sketch conj55_imp_sketch4 : forall _ : @eq natural (##hole##) lf4,
@eq natural (count (Cons n (insort l x)) x) (Succ lf4)
Sketch conj55_imp_term_sketch0 : @eq lst (Cons n (insort l x)) (##hole##)
Sketch conj55_imp_term_sketch1 : @eq natural (Succ lf4) (##hole##)
Sketch conj55_imp_term_sketch2 : @eq lst (insort l x) (##hole##)
Sketch conj55_imp_term_sketch3 : @eq natural (count (Cons n (insort l x)) x) (##hole##)
Sketch conj55_imp_term_sketch4 : @eq natural (count (insort l x) x) (##hole##)
Sketch conj59_sketch0 : @eq natural (count (##hole##) x) (Succ (Succ lf6))
Sketch conj59_sketch1 : @eq natural (count (Cons n lf5) x) (Succ (##hole##))
Sketch conj59_sketch2 : @eq natural (count (Cons n lf5) x) (##hole##)
Sketch conj59_sketch3 : @eq natural (##hole##) (Succ (Succ lf6))
Sketch conj59_term_sketch0 : @eq lst (Cons n lf5) (##hole##)
Sketch conj59_term_sketch1 : @eq natural (Succ lf6) (##hole##)
Sketch conj59_term_sketch2 : @eq natural (Succ (Succ lf6)) (##hole##)
Sketch conj59_term_sketch3 : @eq natural (count (Cons n lf5) x) (##hole##)
Sketch conj59_imp_sketch0 : forall _ : @eq natural (count lf5 x) (Succ lf6),
@eq natural (count (##hole##) x) (Succ (Succ lf6))
Sketch conj59_imp_sketch1 : forall _ : @eq natural (##hole##) (Succ lf6),
@eq natural (count (Cons n lf5) x) (Succ (Succ lf6))
Sketch conj59_imp_sketch2 : forall _ : @eq natural (count lf5 x) (##hole##),
@eq natural (count (Cons n lf5) x) (Succ (##hole##))
Sketch conj59_imp_sketch3 : forall _ : @eq natural (count lf5 x) (Succ lf6),
@eq natural (count (Cons n lf5) x) (##hole##)
Sketch conj59_imp_sketch4 : forall _ : @eq natural (count lf5 x) (Succ lf6),
@eq natural (##hole##) (Succ (Succ lf6))
Sketch conj59_imp_term_sketch0 : @eq lst (Cons n lf5) (##hole##)
Sketch conj59_imp_term_sketch1 : @eq natural (count lf5 x) (##hole##)
Sketch conj59_imp_term_sketch2 : @eq natural (Succ lf6) (##hole##)
Sketch conj59_imp_term_sketch3 : @eq natural (Succ (Succ lf6)) (##hole##)
Sketch conj59_imp_term_sketch4 : @eq natural (count (Cons n lf5) x) (##hole##)
Sketch conj60_sketch0 : @eq natural (count (##hole##) x) (Succ (Succ (count l x)))
Sketch conj60_sketch1 : @eq natural (count (Cons n lf5) x) (Succ (Succ (##hole##)))
Sketch conj60_sketch2 : @eq natural (count (Cons n lf5) x) (Succ (##hole##))
Sketch conj60_sketch3 : @eq natural (count (Cons n lf5) x) (##hole##)
Sketch conj60_sketch4 : @eq natural (##hole##) (Succ (Succ (count l x)))
Sketch conj60_term_sketch0 : @eq lst (Cons n lf5) (##hole##)
Sketch conj60_term_sketch1 : @eq natural (count l x) (##hole##)
Sketch conj60_term_sketch2 : @eq natural (Succ (count l x)) (##hole##)
Sketch conj60_term_sketch3 : @eq natural (Succ (Succ (count l x))) (##hole##)
Sketch conj60_term_sketch4 : @eq natural (count (Cons n lf5) x) (##hole##)
Sketch conj60_imp_sketch0 : forall _ : @eq natural (count lf5 x) (Succ (count l x)),
@eq natural (count (##hole##) x) (Succ (Succ (count l x)))
Sketch conj60_imp_sketch1 : forall _ : @eq natural (##hole##) (Succ (count l x)),
@eq natural (count (Cons n lf5) x) (Succ (Succ (count l x)))
Sketch conj60_imp_sketch2 : forall _ : @eq natural (count lf5 x) (Succ (##hole##)),
@eq natural (count (Cons n lf5) x) (Succ (Succ (##hole##)))
Sketch conj60_imp_sketch3 : forall _ : @eq natural (count lf5 x) (##hole##),
@eq natural (count (Cons n lf5) x) (Succ (##hole##))
Sketch conj60_imp_sketch4 : forall _ : @eq natural (count lf5 x) (Succ (count l x)),
@eq natural (count (Cons n lf5) x) (##hole##)
Sketch conj60_imp_sketch5 : forall _ : @eq natural (count lf5 x) (Succ (count l x)),
@eq natural (##hole##) (Succ (Succ (count l x)))
Sketch conj60_imp_term_sketch0 : @eq lst (Cons n lf5) (##hole##)
Sketch conj60_imp_term_sketch1 : @eq natural (count lf5 x) (##hole##)
Sketch conj60_imp_term_sketch2 : @eq natural (count l x) (##hole##)
Sketch conj60_imp_term_sketch3 : @eq natural (Succ (count l x)) (##hole##)
Sketch conj60_imp_term_sketch4 : @eq natural (Succ (Succ (count l x))) (##hole##)
Sketch conj60_imp_term_sketch5 : @eq natural (count (Cons n lf5) x) (##hole##)
Sketch conj63_sketch0 : @eq natural (count (##hole##) x) (Succ (Succ lf6))
Sketch conj63_sketch1 : @eq natural (count (Cons n (insort l x)) x) (Succ (##hole##))
Sketch conj63_sketch2 : @eq natural (count (Cons n (##hole##)) x) (Succ (Succ lf6))
Sketch conj63_sketch3 : @eq natural (##hole##) (Succ (Succ lf6))
Sketch conj63_sketch4 : @eq natural (count (Cons n (insort l x)) x) (##hole##)
Sketch conj63_term_sketch0 : @eq lst (Cons n (insort l x)) (##hole##)
Sketch conj63_term_sketch1 : @eq natural (Succ lf6) (##hole##)
Sketch conj63_term_sketch2 : @eq lst (insort l x) (##hole##)
Sketch conj63_term_sketch3 : @eq natural (count (Cons n (insort l x)) x) (##hole##)
Sketch conj63_term_sketch4 : @eq natural (Succ (Succ lf6)) (##hole##)
Sketch conj63_imp_sketch0 : forall _ : @eq natural (count (insort l x) x) (Succ lf6),
@eq natural (count (##hole##) x) (Succ (Succ lf6))
Sketch conj63_imp_sketch1 : forall _ : @eq natural (count (insort l x) x) (##hole##),
@eq natural (count (Cons n (insort l x)) x) (Succ (##hole##))
Sketch conj63_imp_sketch2 : forall _ : @eq natural (count (##hole##) x) (Succ lf6),
@eq natural (count (Cons n (##hole##)) x) (Succ (Succ lf6))
Sketch conj63_imp_sketch3 : forall _ : @eq natural (count (insort l x) x) (Succ lf6),
@eq natural (##hole##) (Succ (Succ lf6))
Sketch conj63_imp_sketch4 : forall _ : @eq natural (count (insort l x) x) (Succ lf6),
@eq natural (count (Cons n (insort l x)) x) (##hole##)
Sketch conj63_imp_sketch5 : forall _ : @eq natural (##hole##) (Succ lf6),
@eq natural (count (Cons n (insort l x)) x) (Succ (Succ lf6))
Sketch conj63_imp_term_sketch0 : @eq lst (Cons n (insort l x)) (##hole##)
Sketch conj63_imp_term_sketch1 : @eq natural (Succ lf6) (##hole##)
Sketch conj63_imp_term_sketch2 : @eq lst (insort l x) (##hole##)
Sketch conj63_imp_term_sketch3 : @eq natural (count (Cons n (insort l x)) x) (##hole##)
Sketch conj63_imp_term_sketch4 : @eq natural (Succ (Succ lf6)) (##hole##)
Sketch conj63_imp_term_sketch5 : @eq natural (count (insort l x) x) (##hole##)
Sketch conj64_sketch0 : @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (##hole##)))
Sketch conj64_sketch1 : @eq natural (count (##hole##) x) (Succ (Succ (count l x)))
Sketch conj64_sketch2 : @eq natural (count (Cons n (insort l x)) x) (Succ (##hole##))
Sketch conj64_sketch3 : @eq natural (count (Cons n (##hole##)) x) (Succ (Succ (count l x)))
Sketch conj64_sketch4 : @eq natural (##hole##) (Succ (Succ (count l x)))
Sketch conj64_sketch5 : @eq natural (count (Cons n (insort l x)) x) (##hole##)
Sketch conj64_term_sketch0 : @eq natural (count l x) (##hole##)
Sketch conj64_term_sketch1 : @eq lst (Cons n (insort l x)) (##hole##)
Sketch conj64_term_sketch2 : @eq natural (Succ (count l x)) (##hole##)
Sketch conj64_term_sketch3 : @eq lst (insort l x) (##hole##)
Sketch conj64_term_sketch4 : @eq natural (count (Cons n (insort l x)) x) (##hole##)
Sketch conj64_term_sketch5 : @eq natural (Succ (Succ (count l x))) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 805 seconds
Problems per Sketch:
Sketch conj63_imp_term_sketch2 --> Problem  synth_25
Sketch conj53_sketch1 --> Problem  synth_23
Sketch conj60_term_sketch1 --> Problem  synth_7
Sketch conj59_term_sketch2 --> Problem  synth_5
Sketch conj55_imp_term_sketch1 --> Problem  synth_2
Sketch conj11_term_sketch1 --> Problem  synth_5
Sketch conj63_sketch4 --> Problem  synth_27
Sketch conj59_term_sketch1 --> Problem  synth_4
Sketch conj63_imp_sketch2 --> Problem  synth_47
Sketch conj59_imp_sketch2 --> Problem  synth_34
Sketch conj59_sketch1 --> Problem  synth_34
Sketch conj53_term_sketch2 --> Problem  synth_26
Sketch conj63_imp_term_sketch5 --> Problem  synth_8
Sketch conj60_sketch0 --> Problem  synth_40
Sketch conj17_term_sketch0 --> Problem  synth_11
Sketch conj63_term_sketch0 --> Problem  synth_24
Sketch conj55_sketch3 --> Problem  synth_12
Sketch conj63_imp_sketch0 --> Problem  synth_48
Sketch conj12_term_sketch0 --> Problem  synth_7
Sketch conj59_imp_term_sketch4 --> Problem  synth_20
Sketch conj60_term_sketch3 --> Problem  synth_9
Sketch conj64_term_sketch5 --> Problem  synth_9
Sketch conj60_sketch2 --> Problem  synth_34
Sketch conj59_sketch3 --> Problem  synth_14
Sketch conj55_imp_sketch0 --> Problem  synth_29
Sketch conj64_term_sketch1 --> Problem  synth_24
Sketch conj63_term_sketch4 --> Problem  synth_5
Sketch conj3_term_sketch0 --> Problem  synth_2
Sketch conj60_imp_sketch1 --> Problem  synth_43
Sketch conj28_sketch2 --> Problem  synth_15
Sketch conj11_term_sketch0 --> Problem  synth_4
Sketch conj55_imp_sketch3 --> Problem  synth_31
Sketch conj63_imp_sketch3 --> Problem  synth_50
Sketch conj19_term_sketch1 --> Problem  synth_2
Sketch conj28_term_sketch2 --> Problem  synth_8
Sketch conj63_imp_sketch5 --> Problem  synth_52
Sketch conj27_sketch1 --> Problem  synth_15
Sketch conj60_sketch3 --> Problem  synth_22
Sketch conj55_imp_term_sketch2 --> Problem  synth_25
Sketch conj55_imp_sketch4 --> Problem  synth_32
Sketch conj51_sketch0 --> Problem  synth_21
Sketch conj63_term_sketch1 --> Problem  synth_4
Sketch conj60_imp_sketch4 --> Problem  synth_44
Sketch conj51_term_sketch1 --> Problem  synth_2
Sketch conj63_imp_term_sketch1 --> Problem  synth_4
Sketch conj27_term_sketch1 --> Problem  synth_4
Sketch conj60_imp_term_sketch5 --> Problem  synth_20
Sketch conj49_sketch0 --> Problem  synth_18
Sketch conj59_imp_sketch4 --> Problem  synth_38
Sketch conj63_imp_sketch1 --> Problem  synth_49
Sketch conj55_term_sketch1 --> Problem  synth_2
Sketch conj59_imp_term_sketch0 --> Problem  synth_19
Sketch conj49_term_sketch1 --> Problem  synth_20
Sketch conj12_term_sketch1 --> Problem  synth_8
Sketch conj64_term_sketch4 --> Problem  synth_26
Sketch conj64_sketch1 --> Problem  synth_40
Sketch conj53_term_sketch1 --> Problem  synth_25
Sketch conj55_imp_term_sketch3 --> Problem  synth_26
Sketch conj55_sketch0 --> Problem  synth_21
Sketch conj63_sketch1 --> Problem  synth_46
Sketch conj53_sketch2 --> Problem  synth_10
Sketch conj27_sketch0 --> Problem  synth_14
Sketch conj63_imp_term_sketch0 --> Problem  synth_24
Sketch conj64_sketch4 --> Problem  synth_16
Sketch conj55_imp_term_sketch0 --> Problem  synth_24
Sketch conj60_imp_term_sketch1 --> Problem  synth_39
Sketch conj64_sketch5 --> Problem  synth_27
Sketch conj60_sketch4 --> Problem  synth_16
Sketch conj60_imp_sketch0 --> Problem  synth_42
Sketch conj60_imp_term_sketch0 --> Problem  synth_19
Sketch conj11_sketch0 --> Problem  synth_3
Sketch conj27_term_sketch0 --> Problem  synth_11
Sketch conj51_sketch2 --> Problem  synth_12
Sketch conj63_term_sketch2 --> Problem  synth_25
Sketch conj12_sketch0 --> Problem  synth_6
Sketch conj28_sketch0 --> Problem  synth_16
Sketch conj64_term_sketch0 --> Problem  synth_7
Sketch conj63_imp_term_sketch4 --> Problem  synth_5
Sketch conj60_term_sketch4 --> Problem  synth_20
Sketch conj55_imp_sketch2 --> Problem  synth_28
Sketch conj53_term_sketch0 --> Problem  synth_24
Sketch conj11_sketch1 --> Problem  synth_1
Sketch conj28_term_sketch1 --> Problem  synth_7
Sketch conj63_imp_term_sketch3 --> Problem  synth_26
Sketch conj60_imp_term_sketch3 --> Problem  synth_8
Sketch conj60_term_sketch2 --> Problem  synth_8
Sketch conj60_sketch1 --> Problem  synth_41
Sketch conj55_sketch1 --> Problem  synth_27
Sketch conj28_term_sketch3 --> Problem  synth_9
Sketch conj12_sketch1 --> Problem  synth_3
Sketch conj27_term_sketch2 --> Problem  synth_5
Sketch conj12_sketch2 --> Problem  synth_1
Sketch conj59_sketch2 --> Problem  synth_22
Sketch conj60_imp_term_sketch2 --> Problem  synth_7
Sketch conj55_imp_sketch1 --> Problem  synth_30
Sketch conj51_term_sketch2 --> Problem  synth_20
Sketch conj27_sketch2 --> Problem  synth_13
Sketch conj60_term_sketch0 --> Problem  synth_19
Sketch conj53_sketch0 --> Problem  synth_18
Sketch conj59_imp_sketch1 --> Problem  synth_36
Sketch conj12_term_sketch2 --> Problem  synth_9
Sketch conj19_term_sketch0 --> Problem  synth_11
Sketch conj59_imp_term_sketch2 --> Problem  synth_4
Sketch conj59_imp_term_sketch1 --> Problem  synth_39
Sketch conj60_imp_term_sketch4 --> Problem  synth_9
Sketch conj51_term_sketch0 --> Problem  synth_19
Sketch conj55_term_sketch0 --> Problem  synth_24
Sketch conj19_sketch0 --> Problem  synth_12
Sketch conj17_sketch0 --> Problem  synth_10
Sketch conj63_sketch2 --> Problem  synth_47
Sketch conj59_imp_term_sketch3 --> Problem  synth_5
Sketch conj3_sketch0 --> Problem  synth_1
Sketch conj59_sketch0 --> Problem  synth_33
Sketch conj63_term_sketch3 --> Problem  synth_26
Sketch conj63_sketch0 --> Problem  synth_33
Sketch conj55_term_sketch3 --> Problem  synth_26
Sketch conj63_sketch3 --> Problem  synth_14
Sketch conj59_imp_sketch0 --> Problem  synth_35
Sketch conj59_term_sketch0 --> Problem  synth_19
Sketch conj28_term_sketch0 --> Problem  synth_11
Sketch conj59_term_sketch3 --> Problem  synth_20
Sketch conj51_sketch1 --> Problem  synth_22
Sketch conj63_imp_sketch4 --> Problem  synth_51
Sketch conj64_sketch2 --> Problem  synth_46
Sketch conj64_sketch3 --> Problem  synth_54
Sketch conj19_sketch1 --> Problem  synth_13
Sketch conj59_imp_sketch3 --> Problem  synth_37
Sketch conj28_sketch3 --> Problem  synth_13
Sketch conj64_term_sketch2 --> Problem  synth_8
Sketch conj28_sketch1 --> Problem  synth_17
Sketch conj55_imp_term_sketch4 --> Problem  synth_8
Sketch conj60_imp_sketch3 --> Problem  synth_34
Sketch conj60_imp_sketch5 --> Problem  synth_45
Sketch conj64_sketch0 --> Problem  synth_53
Sketch conj60_imp_sketch2 --> Problem  synth_41
Sketch conj55_term_sketch2 --> Problem  synth_25
Sketch conj55_sketch2 --> Problem  synth_28
Sketch conj64_term_sketch3 --> Problem  synth_25
Sketch conj49_sketch1 --> Problem  synth_10
Sketch conj49_term_sketch0 --> Problem  synth_19


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 1132 seconds

Problem: synth_28

Problem: synth_17
 if match x with | Succ (Succ m'0) => lfeqb x m'0 | _ => false end then Succ Zero else Zero
 if lfeqb (count lf3 x) Zero then Succ Zero else Zero
 count lf3 (Succ (Succ (Succ x)))
 if match x with | Succ m' => lfeqb x m' | Zero => false end then Succ Zero else Zero
 if lfeqb x (Succ x) then Succ Zero else Zero
 Zero

Problem: synth_29

Problem: synth_45

Problem: synth_26
 if lfeqb x x then Succ (if lfeqb x n then Succ (count l x) else count l x) else if lfeqb x n then Succ (count l x) else count l x
 if lfeqb x n then Succ (if lfeqb x x then Succ (count l x) else count l x) else if lfeqb x x then Succ (count l x) else count l x
 if lfeqb x x then Succ (count (insort l n) x) else count (insort l n) x
 if lfeqb x x then Succ (if lfeqb x n then Succ Zero else Zero) else if lfeqb x n then Succ Zero else Zero
 if lfeqb x n then Succ (count (insort l x) x) else count (insort l x) x
 if lfeqb x n then Succ (if lfeqb x x then Succ Zero else Zero) else if lfeqb x x then Succ Zero else Zero

Problem: synth_9
 Succ (Succ (count (sort l) Zero))
 Succ (count (insort l Zero) Zero)
 Succ (Succ (count l (Succ Zero)))
 Succ (Succ (count l x))
 Succ (Succ (count l Zero))
 Succ (Succ Zero)

Problem: synth_30
 Succ (Succ (count l n))
 Succ (Succ (count l lf4))
 Succ (Succ (count l x))
 Succ (Succ (count l Zero))
 Succ (Succ Zero)
 Succ lf4

Problem: synth_11
 count (sort (sort (sort lf3))) x
 if lfeqb x (Succ x) then Succ (count lf3 x) else count lf3 x
 count (insort lf3 (Succ x)) x
 count (sort (sort lf3)) x
 count (sort lf3) x
 count lf3 x

Problem: synth_54
 sort (sort (insort l x))
 sort (insort (sort l) x)
 insort (sort (sort l)) x
 sort (insort l x)
 insort (sort l) x
 insort l x

Problem: synth_39
 count (insort lf5 (Succ x)) x
 count (sort (sort lf5)) x
 if lfeqb x x then Succ Zero else Zero
 count (sort lf5) x
 count lf5 x
 Succ Zero

Problem: synth_1
 if lfeqb (if lfeqb lf1 lf1 then Succ Zero else Zero) (Succ Zero) then Succ (if lfeqb (if lfeqb lf1 lf1 then Succ Zero else Zero) (Succ Zero) then Succ Zero else Zero) else if lfeqb (if lfeqb lf1 lf1 then Succ Zero else Zero) (Succ Zero) then Succ Zero else Zero
 if lfeqb (if lfeqb lf1 Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb lf1 Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb lf1 Zero then Succ Zero else Zero) Zero then Succ Zero else Zero
 if lfeqb (if match lf1 with | Succ _ => false | Zero => true end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ _ => false | Zero => true end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ _ => false | Zero => true end then Succ Zero else Zero) Zero then Succ Zero else Zero
 Succ (if lfeqb lf1 lf1 then Succ Zero else Zero)
 if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero
 Succ (Succ Zero)

Problem: synth_46
 count (insort l Zero) Zero
 Succ (count l (Succ Zero))
 Succ (count l n)
 Succ (count l x)
 Succ (count l Zero)
 Succ Zero

Problem: synth_15
 Succ (if match x with | Succ m' => lfeqb x m' | Zero => false end then Succ Zero else Zero)
 Succ (if lfeqb x (Succ x) then Succ Zero else Zero)
 if lfeqb x (Succ x) then Succ (if lfeqb x x then Succ Zero else Zero) else if lfeqb x x then Succ Zero else Zero
 if lfeqb x x then Succ (if lfeqb x (Succ x) then Succ Zero else Zero) else if lfeqb x (Succ x) then Succ Zero else Zero
 if lfeqb x x then Succ Zero else Zero
 Succ Zero

Problem: synth_31

Problem: synth_14

Problem: synth_8
 Succ (count (sort l) Zero)
 count (insort l Zero) Zero
 Succ (count l (Succ Zero))
 Succ (count l x)
 Succ (count l Zero)
 Succ Zero

Problem: synth_34
 count (insort lf5 (Succ x)) x
 count (sort (sort lf5)) x
 if lfeqb x x then Succ Zero else Zero
 count (sort lf5) x
 count lf5 x
 Succ Zero

Problem: synth_12

Problem: synth_5
 if lfeqb lf6 Zero then Succ (if lfeqb lf6 Zero then Succ Zero else Zero) else if lfeqb lf6 Zero then Succ Zero else Zero
 if match lf6 with | Succ _ => false | Zero => true end then Succ (if match lf6 with | Succ _ => false | Zero => true end then Succ Zero else Zero) else if match lf6 with | Succ _ => false | Zero => true end then Succ Zero else Zero
 Succ (if match lf6 with | Succ _ => false | Zero => true end then Succ Zero else Zero)
 if match lf6 with | Succ _ => false | Zero => true end then Succ (Succ Zero) else Succ Zero
 Succ (Succ lf6)
 Succ (Succ Zero)

Problem: synth_37
 if lfeqb x x then Succ (count (sort lf5) x) else count (sort lf5) x
 if lfeqb x x then Succ (count lf5 x) else count lf5 x
 count (insort lf5 x) x
 Succ (count lf5 x)
 Succ (Succ lf6)
 Succ (Succ Zero)

Problem: synth_53
 count (sort l) Zero
 count l (Succ Zero)
 count l n
 count l x
 count l Zero
 Zero

Problem: synth_50

Problem: synth_2
 if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero
 if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero
 if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero
 if lfeqb lf4 lf4 then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero
 Succ (Succ Zero)
 Succ lf4

Problem: synth_22
 Succ (count (sort lf5) x)
 if lfeqb x x then Succ (count (sort lf5) x) else count (sort lf5) x
 if lfeqb x x then Succ (count lf5 x) else count lf5 x
 count (insort lf5 x) x
 Succ (count lf5 x)
 Succ (Succ Zero)

Problem: synth_20
 if lfeqb n n then Succ (count lf5 n) else count lf5 n
 count (insort lf5 n) n
 if lfeqb x n then Succ (count (sort lf5) x) else count (sort lf5) x
 if lfeqb x n then Succ (count lf5 x) else count lf5 x
 count (insort lf5 n) x
 Succ (count lf5 n)

Problem: synth_18

Problem: synth_21

Problem: synth_41
 if match x with | Succ m' => lfeqb x m' | Zero => false end then Succ Zero else Zero
 if lfeqb n (Succ n) then Succ Zero else Zero
 if lfeqb x (Succ x) then Succ Zero else Zero
 count (sort lf5) (count lf5 Zero)
 count lf5 (count lf5 Zero)
 Zero

Problem: synth_49
 count (insort l Zero) Zero
 Succ (count l (Succ Zero))
 Succ (count l n)
 Succ (count l x)
 Succ (count l Zero)
 Succ Zero

Problem: synth_25
 sort (sort (insort l x))
 sort (insort (sort l) x)
 insort (sort (sort l)) x
 sort (insort l x)
 insort (sort l) x
 insort l x

Problem: synth_13
 if lfeqb (if match x with | Succ m' => lfeqb x m' | Zero => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match x with | Succ m' => lfeqb x m' | Zero => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match x with | Succ m' => lfeqb x m' | Zero => false end then Succ Zero else Zero) Zero then Succ Zero else Zero
 if lfeqb (if lfeqb x (Succ x) then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb x (Succ x) then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb x (Succ x) then Succ Zero else Zero) Zero then Succ Zero else Zero
 if lfeqb (if lfeqb x x then Succ Zero else Zero) (Succ Zero) then Succ (if lfeqb (if lfeqb x x then Succ Zero else Zero) (Succ Zero) then Succ Zero else Zero) else if lfeqb (if lfeqb x x then Succ Zero else Zero) (Succ Zero) then Succ Zero else Zero
 Succ (if lfeqb x x then Succ Zero else Zero)
 if lfeqb x x then Succ (if lfeqb x x then Succ Zero else Zero) else if lfeqb x x then Succ Zero else Zero
 Succ (Succ Zero)

Problem: synth_6
 if match lf1 with | Succ (Succ m'0) => lfeqb lf1 m'0 | _ => false end then Succ Zero else Zero
 if match lf1 with | Succ m' => lfeqb lf1 m' | Zero => false end then Succ Zero else Zero
 if lfeqb lf1 (Succ lf1) then Succ Zero else Zero
 if lfeqb lf1 Zero then Succ Zero else Zero
 if match lf1 with | Succ _ => false | Zero => true end then Succ Zero else Zero
 Zero

Problem: synth_7
 count (sort l) x
 count (sort l) Zero
 count l (Succ Zero)
 count l x
 count l Zero
 Zero

Problem: synth_4
 if lfeqb lf6 Zero then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero
 if lfeqb lf6 lf6 then Succ Zero else Zero
 if lfeqb lf6 Zero then Succ Zero else Zero
 if match lf6 with | Succ _ => false | Zero => true end then Succ Zero else Zero
 Succ lf6
 Succ Zero

Problem: synth_38

Problem: synth_23

Problem: synth_27
 Succ (count (insort l Zero) Zero)
 Succ (Succ (count l (Succ Zero)))
 Succ (Succ (count l n))
 Succ (Succ (count l x))
 Succ (Succ (count l Zero))
 Succ (Succ Zero)

Problem: synth_42

Problem: synth_16

Problem: synth_19
 Cons (if lfeqb n (Succ Zero) then Succ Zero else Zero) lf5
 Cons n (sort (sort (sort (sort lf5))))
 Cons n (sort (sort (sort lf5)))
 Cons n (sort (sort lf5))
 Cons n (sort lf5)
 Cons n lf5

Problem: synth_40

Problem: synth_10

Problem: synth_33

Problem: synth_47

Problem: synth_24
 Cons n (sort (sort (insort l x)))
 Cons n (sort (insort (sort l) x))
 Cons n (insort (sort (sort l)) x)
 Cons n (sort (insort l x))
 Cons n (insort (sort l) x)
 Cons n (insort l x)

Problem: synth_3
 if lfeqb lf1 Zero then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero
 if lfeqb lf1 lf1 then Succ (if lfeqb lf1 Zero then Succ Zero else Zero) else if lfeqb lf1 Zero then Succ Zero else Zero
 Succ (if match lf1 with | Succ _ => false | Zero => true end then Succ Zero else Zero)
 if match lf1 with | Succ _ => false | Zero => true end then Succ (Succ Zero) else Succ Zero
 if lfeqb lf1 lf1 then Succ Zero else Zero
 Succ Zero

Problem: synth_52
 Succ (count l n)
 Succ (count l x)
 Succ (count l lf6)
 Succ (count l Zero)
 Succ lf6
 Succ Zero

Problem: synth_32
 Succ (count l n)
 Succ (count l lf4)
 Succ (count l x)
 Succ (count l Zero)
 Succ Zero
 lf4

Problem: synth_48

Problem: synth_44
 Succ (count (sort lf5) x)
 if lfeqb x x then Succ (count (sort lf5) x) else count (sort lf5) x
 if lfeqb x x then Succ (count lf5 x) else count lf5 x
 count (insort lf5 x) x
 Succ (count lf5 x)
 Succ (Succ Zero)

Problem: synth_36
 if lfeqb lf6 Zero then Succ Zero else Zero
 if match lf6 with | Succ _ => false | Zero => true end then Succ Zero else Zero
 count (sort lf5) x
 count lf5 x
 Succ lf6
 Succ Zero

Problem: synth_51
 Succ (Succ (count l n))
 Succ (Succ (count l x))
 Succ (Succ (count l lf6))
 Succ (Succ (count l Zero))
 Succ (Succ lf6)
 Succ (Succ Zero)

Problem: synth_35

Problem: synth_43
 Succ (count l n)
 Succ (count l x)
 Succ (count l Zero)
 count (sort lf5) x
 count lf5 x
 Succ Zero

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 1132 seconds
Lemmas:
Lemma candidate_1: forall (lf1 : natural), @eq natural lf1   (if lfeqb (if lfeqb lf1 lf1 then Succ Zero else Zero) (Succ Zero) then Succ (if lfeqb (if lfeqb lf1 lf1 then Succ Zero else Zero) (Succ Zero) then Succ Zero else Zero) else if lfeqb (if lfeqb lf1 lf1 then Succ Zero else Zero) (Succ Zero) then Succ Zero else Zero).
Lemma candidate_2: forall (lf1 : natural), @eq natural lf1   (if lfeqb (if lfeqb lf1 Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb lf1 Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb lf1 Zero then Succ Zero else Zero) Zero then Succ Zero else Zero).
Lemma candidate_3: forall (lf1 : natural), @eq natural lf1   (if lfeqb (if match lf1 with | Succ _ => false | Zero => true end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ _ => false | Zero => true end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ _ => false | Zero => true end then Succ Zero else Zero) Zero then Succ Zero else Zero).
Lemma candidate_4: forall (lf1 : natural), @eq natural lf1 (Succ (if lfeqb lf1 lf1 then Succ Zero else Zero)).
Lemma candidate_5: forall (lf1 : natural), @eq natural lf1   (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero).
Lemma candidate_6: forall (lf1 : natural), @eq natural lf1 (Succ (Succ Zero)).
Lemma candidate_7: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_8: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero).
Lemma candidate_9: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_10: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero).
Lemma candidate_11: forall (lf4 : natural), @eq natural (Succ lf4) (Succ (Succ Zero)).
Lemma candidate_12: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_13: forall (lf1 : natural), @eq natural lf1   (Succ      (if lfeqb lf1 Zero then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero)).
Lemma candidate_14: forall (lf1 : natural), @eq natural lf1   (Succ      (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 Zero then Succ Zero else Zero) else if lfeqb lf1 Zero then Succ Zero else Zero)).
Lemma candidate_15: forall (lf1 : natural), @eq natural lf1   (Succ      (Succ (if match lf1 with | Succ _ => false | Zero => true end then Succ Zero else Zero))).
Lemma candidate_16: forall (lf1 : natural), @eq natural lf1   (Succ      (if match lf1 with | Succ _ => false | Zero => true end then Succ (Succ Zero) else Succ Zero)).
Lemma candidate_17: forall (lf1 : natural), @eq natural lf1 (Succ (if lfeqb lf1 lf1 then Succ Zero else Zero)).
Lemma candidate_18: forall (lf1 : natural), @eq natural lf1 (Succ (Succ Zero)).
Lemma candidate_19: forall (lf1 : natural), @eq natural lf1   (if lfeqb (if lfeqb lf1 lf1 then Succ Zero else Zero) (Succ Zero) then Succ (if lfeqb (if lfeqb lf1 lf1 then Succ Zero else Zero) (Succ Zero) then Succ Zero else Zero) else if lfeqb (if lfeqb lf1 lf1 then Succ Zero else Zero) (Succ Zero) then Succ Zero else Zero).
Lemma candidate_20: forall (lf1 : natural), @eq natural lf1   (if lfeqb (if lfeqb lf1 Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb lf1 Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb lf1 Zero then Succ Zero else Zero) Zero then Succ Zero else Zero).
Lemma candidate_21: forall (lf1 : natural), @eq natural lf1   (if lfeqb (if match lf1 with | Succ _ => false | Zero => true end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ _ => false | Zero => true end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ _ => false | Zero => true end then Succ Zero else Zero) Zero then Succ Zero else Zero).
Lemma candidate_22: forall (lf1 : natural), @eq natural lf1 (Succ (if lfeqb lf1 lf1 then Succ Zero else Zero)).
Lemma candidate_23: forall (lf1 : natural), @eq natural lf1   (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero).
Lemma candidate_24: forall (lf1 : natural), @eq natural lf1 (Succ (Succ Zero)).
Lemma candidate_25: forall (lf6 : natural), @eq natural (Succ lf6)   (if lfeqb lf6 Zero then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_26: forall (lf6 : natural), @eq natural (Succ lf6) (if lfeqb lf6 lf6 then Succ Zero else Zero).
Lemma candidate_27: forall (lf6 : natural), @eq natural (Succ lf6) (if lfeqb lf6 Zero then Succ Zero else Zero).
Lemma candidate_28: forall (lf6 : natural), @eq natural (Succ lf6)   (if match lf6 with | Succ _ => false | Zero => true end then Succ Zero else Zero).
Lemma candidate_29: forall (lf6 : natural), @eq natural (Succ lf6) (Succ lf6).
Lemma candidate_30: forall (lf6 : natural), @eq natural (Succ lf6) (Succ Zero).
Lemma candidate_31: forall (lf6 : natural), @eq natural (Succ (Succ lf6))   (if lfeqb lf6 Zero then Succ (if lfeqb lf6 Zero then Succ Zero else Zero) else if lfeqb lf6 Zero then Succ Zero else Zero).
Lemma candidate_32: forall (lf6 : natural), @eq natural (Succ (Succ lf6))   (if match lf6 with | Succ _ => false | Zero => true end then Succ (if match lf6 with | Succ _ => false | Zero => true end then Succ Zero else Zero) else if match lf6 with | Succ _ => false | Zero => true end then Succ Zero else Zero).
Lemma candidate_33: forall (lf6 : natural), @eq natural (Succ (Succ lf6))   (Succ (if match lf6 with | Succ _ => false | Zero => true end then Succ Zero else Zero)).
Lemma candidate_34: forall (lf6 : natural), @eq natural (Succ (Succ lf6))   (if match lf6 with | Succ _ => false | Zero => true end then Succ (Succ Zero) else Succ Zero).
Lemma candidate_35: forall (lf6 : natural), @eq natural (Succ (Succ lf6)) (Succ (Succ lf6)).
Lemma candidate_36: forall (lf6 : natural), @eq natural (Succ (Succ lf6)) (Succ (Succ Zero)).
Lemma candidate_37: forall (lf1 : natural), @eq natural lf1   (Succ      (Succ         (if match lf1 with | Succ (Succ m'0) => lfeqb lf1 m'0 | _ => false end then Succ Zero else Zero))).
Lemma candidate_38: forall (lf1 : natural), @eq natural lf1   (Succ      (Succ         (if match lf1 with | Succ m' => lfeqb lf1 m' | Zero => false end then Succ Zero else Zero))).
Lemma candidate_39: forall (lf1 : natural), @eq natural lf1   (Succ (Succ (if lfeqb lf1 (Succ lf1) then Succ Zero else Zero))).
Lemma candidate_40: forall (lf1 : natural), @eq natural lf1 (Succ (Succ (if lfeqb lf1 Zero then Succ Zero else Zero))).
Lemma candidate_41: forall (lf1 : natural), @eq natural lf1   (Succ      (Succ         (if match lf1 with | Succ _ => false | Zero => true end then Succ Zero else Zero))).
Lemma candidate_42: forall (lf1 : natural), @eq natural lf1 (Succ (Succ (Zero))).
Lemma candidate_43: forall (lf1 : natural), @eq natural lf1   (Succ      (if lfeqb lf1 Zero then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero)).
Lemma candidate_44: forall (lf1 : natural), @eq natural lf1   (Succ      (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 Zero then Succ Zero else Zero) else if lfeqb lf1 Zero then Succ Zero else Zero)).
Lemma candidate_45: forall (lf1 : natural), @eq natural lf1   (Succ      (Succ (if match lf1 with | Succ _ => false | Zero => true end then Succ Zero else Zero))).
Lemma candidate_46: forall (lf1 : natural), @eq natural lf1   (Succ      (if match lf1 with | Succ _ => false | Zero => true end then Succ (Succ Zero) else Succ Zero)).
Lemma candidate_47: forall (lf1 : natural), @eq natural lf1 (Succ (if lfeqb lf1 lf1 then Succ Zero else Zero)).
Lemma candidate_48: forall (lf1 : natural), @eq natural lf1 (Succ (Succ Zero)).
Lemma candidate_49: forall (lf1 : natural), @eq natural lf1   (if lfeqb (if lfeqb lf1 lf1 then Succ Zero else Zero) (Succ Zero) then Succ (if lfeqb (if lfeqb lf1 lf1 then Succ Zero else Zero) (Succ Zero) then Succ Zero else Zero) else if lfeqb (if lfeqb lf1 lf1 then Succ Zero else Zero) (Succ Zero) then Succ Zero else Zero).
Lemma candidate_50: forall (lf1 : natural), @eq natural lf1   (if lfeqb (if lfeqb lf1 Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb lf1 Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb lf1 Zero then Succ Zero else Zero) Zero then Succ Zero else Zero).
Lemma candidate_51: forall (lf1 : natural), @eq natural lf1   (if lfeqb (if match lf1 with | Succ _ => false | Zero => true end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ _ => false | Zero => true end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ _ => false | Zero => true end then Succ Zero else Zero) Zero then Succ Zero else Zero).
Lemma candidate_52: forall (lf1 : natural), @eq natural lf1 (Succ (if lfeqb lf1 lf1 then Succ Zero else Zero)).
Lemma candidate_53: forall (lf1 : natural), @eq natural lf1   (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero).
Lemma candidate_54: forall (lf1 : natural), @eq natural lf1 (Succ (Succ Zero)).
Lemma candidate_55: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort l) x).
Lemma candidate_56: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort l) Zero).
Lemma candidate_57: forall (l : lst) (x : natural), @eq natural (count l x) (count l (Succ Zero)).
Lemma candidate_58: forall (l : lst) (x : natural), @eq natural (count l x) (count l x).
Lemma candidate_59: forall (l : lst) (x : natural), @eq natural (count l x) (count l Zero).
Lemma candidate_60: forall (l : lst) (x : natural), @eq natural (count l x) (Zero).
Lemma candidate_61: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count (sort l) Zero)).
Lemma candidate_62: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (count (insort l Zero) Zero).
Lemma candidate_63: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count l (Succ Zero))).
Lemma candidate_64: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count l x)).
Lemma candidate_65: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count l Zero)).
Lemma candidate_66: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ Zero).
Lemma candidate_67: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ (count (sort l) Zero))).
Lemma candidate_68: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (count (insort l Zero) Zero)).
Lemma candidate_69: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ (count l (Succ Zero)))).
Lemma candidate_70: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ (count l x))).
Lemma candidate_71: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ (count l Zero))).
Lemma candidate_72: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ Zero)).
Lemma candidate_73: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort (sort lf3))) x).
Lemma candidate_74: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb x (Succ x) then Succ (count lf3 x) else count lf3 x).
Lemma candidate_75: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (insort lf3 (Succ x)) x).
Lemma candidate_76: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort lf3)) x).
Lemma candidate_77: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort lf3) x).
Lemma candidate_78: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count lf3 x).
Lemma candidate_79: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb (if match x with | Succ m' => lfeqb x m' | Zero => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match x with | Succ m' => lfeqb x m' | Zero => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match x with | Succ m' => lfeqb x m' | Zero => false end then Succ Zero else Zero) Zero then Succ Zero else Zero).
Lemma candidate_80: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb (if lfeqb x (Succ x) then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb x (Succ x) then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb x (Succ x) then Succ Zero else Zero) Zero then Succ Zero else Zero).
Lemma candidate_81: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb (if lfeqb x x then Succ Zero else Zero) (Succ Zero) then Succ (if lfeqb (if lfeqb x x then Succ Zero else Zero) (Succ Zero) then Succ Zero else Zero) else if lfeqb (if lfeqb x x then Succ Zero else Zero) (Succ Zero) then Succ Zero else Zero).
Lemma candidate_82: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (Succ (if lfeqb x x then Succ Zero else Zero)).
Lemma candidate_83: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb x x then Succ (if lfeqb x x then Succ Zero else Zero) else if lfeqb x x then Succ Zero else Zero).
Lemma candidate_84: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (Succ (Succ Zero)).
Lemma candidate_85: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort (sort lf3))) x).
Lemma candidate_86: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb x (Succ x) then Succ (count lf3 x) else count lf3 x).
Lemma candidate_87: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (insort lf3 (Succ x)) x).
Lemma candidate_88: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort lf3)) x).
Lemma candidate_89: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort lf3) x).
Lemma candidate_90: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count lf3 x).
Lemma candidate_91: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_92: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero).
Lemma candidate_93: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_94: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero).
Lemma candidate_95: forall (lf4 : natural), @eq natural (Succ lf4) (Succ (Succ Zero)).
Lemma candidate_96: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_97: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (Succ      (Succ (if match x with | Succ m' => lfeqb x m' | Zero => false end then Succ Zero else Zero))).
Lemma candidate_98: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (Succ (Succ (if lfeqb x (Succ x) then Succ Zero else Zero))).
Lemma candidate_99: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (Succ      (if lfeqb x (Succ x) then Succ (if lfeqb x x then Succ Zero else Zero) else if lfeqb x x then Succ Zero else Zero)).
Lemma candidate_100: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (Succ      (if lfeqb x x then Succ (if lfeqb x (Succ x) then Succ Zero else Zero) else if lfeqb x (Succ x) then Succ Zero else Zero)).
Lemma candidate_101: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (Succ (if lfeqb x x then Succ Zero else Zero)).
Lemma candidate_102: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (Succ (Succ Zero)).
Lemma candidate_103: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb (if match x with | Succ m' => lfeqb x m' | Zero => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match x with | Succ m' => lfeqb x m' | Zero => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match x with | Succ m' => lfeqb x m' | Zero => false end then Succ Zero else Zero) Zero then Succ Zero else Zero).
Lemma candidate_104: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb (if lfeqb x (Succ x) then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb x (Succ x) then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb x (Succ x) then Succ Zero else Zero) Zero then Succ Zero else Zero).
Lemma candidate_105: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb (if lfeqb x x then Succ Zero else Zero) (Succ Zero) then Succ (if lfeqb (if lfeqb x x then Succ Zero else Zero) (Succ Zero) then Succ Zero else Zero) else if lfeqb (if lfeqb x x then Succ Zero else Zero) (Succ Zero) then Succ Zero else Zero).
Lemma candidate_106: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (Succ (if lfeqb x x then Succ Zero else Zero)).
Lemma candidate_107: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb x x then Succ (if lfeqb x x then Succ Zero else Zero) else if lfeqb x x then Succ Zero else Zero).
Lemma candidate_108: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (Succ (Succ Zero)).
Lemma candidate_109: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort (sort lf3))) x).
Lemma candidate_110: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb x (Succ x) then Succ (count lf3 x) else count lf3 x).
Lemma candidate_111: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (insort lf3 (Succ x)) x).
Lemma candidate_112: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort lf3)) x).
Lemma candidate_113: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort lf3) x).
Lemma candidate_114: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count lf3 x).
Lemma candidate_115: forall (lf6 : natural), @eq natural (Succ lf6)   (if lfeqb lf6 Zero then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_116: forall (lf6 : natural), @eq natural (Succ lf6) (if lfeqb lf6 lf6 then Succ Zero else Zero).
Lemma candidate_117: forall (lf6 : natural), @eq natural (Succ lf6) (if lfeqb lf6 Zero then Succ Zero else Zero).
Lemma candidate_118: forall (lf6 : natural), @eq natural (Succ lf6)   (if match lf6 with | Succ _ => false | Zero => true end then Succ Zero else Zero).
Lemma candidate_119: forall (lf6 : natural), @eq natural (Succ lf6) (Succ lf6).
Lemma candidate_120: forall (lf6 : natural), @eq natural (Succ lf6) (Succ Zero).
Lemma candidate_121: forall (lf6 : natural), @eq natural (Succ (Succ lf6))   (if lfeqb lf6 Zero then Succ (if lfeqb lf6 Zero then Succ Zero else Zero) else if lfeqb lf6 Zero then Succ Zero else Zero).
Lemma candidate_122: forall (lf6 : natural), @eq natural (Succ (Succ lf6))   (if match lf6 with | Succ _ => false | Zero => true end then Succ (if match lf6 with | Succ _ => false | Zero => true end then Succ Zero else Zero) else if match lf6 with | Succ _ => false | Zero => true end then Succ Zero else Zero).
Lemma candidate_123: forall (lf6 : natural), @eq natural (Succ (Succ lf6))   (Succ (if match lf6 with | Succ _ => false | Zero => true end then Succ Zero else Zero)).
Lemma candidate_124: forall (lf6 : natural), @eq natural (Succ (Succ lf6))   (if match lf6 with | Succ _ => false | Zero => true end then Succ (Succ Zero) else Succ Zero).
Lemma candidate_125: forall (lf6 : natural), @eq natural (Succ (Succ lf6)) (Succ (Succ lf6)).
Lemma candidate_126: forall (lf6 : natural), @eq natural (Succ (Succ lf6)) (Succ (Succ Zero)).
Lemma candidate_127: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (Succ      (Succ         (if match x with | Succ (Succ m'0) => lfeqb x m'0 | _ => false end then Succ Zero else Zero))).
Lemma candidate_128: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (Succ (Succ (if lfeqb (count lf3 x) Zero then Succ Zero else Zero))).
Lemma candidate_129: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (Succ (Succ (count lf3 (Succ (Succ (Succ x)))))).
Lemma candidate_130: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (Succ      (Succ         (if match x with | Succ m' => lfeqb x m' | Zero => false end then Succ Zero else Zero))).
Lemma candidate_131: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (Succ (Succ (if lfeqb x (Succ x) then Succ Zero else Zero))).
Lemma candidate_132: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (Succ (Succ (Zero))).
Lemma candidate_133: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (Succ      (Succ (if match x with | Succ m' => lfeqb x m' | Zero => false end then Succ Zero else Zero))).
Lemma candidate_134: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (Succ (Succ (if lfeqb x (Succ x) then Succ Zero else Zero))).
Lemma candidate_135: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (Succ      (if lfeqb x (Succ x) then Succ (if lfeqb x x then Succ Zero else Zero) else if lfeqb x x then Succ Zero else Zero)).
Lemma candidate_136: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (Succ      (if lfeqb x x then Succ (if lfeqb x (Succ x) then Succ Zero else Zero) else if lfeqb x (Succ x) then Succ Zero else Zero)).
Lemma candidate_137: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (Succ (if lfeqb x x then Succ Zero else Zero)).
Lemma candidate_138: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (Succ (Succ Zero)).
Lemma candidate_139: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb (if match x with | Succ m' => lfeqb x m' | Zero => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match x with | Succ m' => lfeqb x m' | Zero => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match x with | Succ m' => lfeqb x m' | Zero => false end then Succ Zero else Zero) Zero then Succ Zero else Zero).
Lemma candidate_140: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb (if lfeqb x (Succ x) then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb x (Succ x) then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb x (Succ x) then Succ Zero else Zero) Zero then Succ Zero else Zero).
Lemma candidate_141: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb (if lfeqb x x then Succ Zero else Zero) (Succ Zero) then Succ (if lfeqb (if lfeqb x x then Succ Zero else Zero) (Succ Zero) then Succ Zero else Zero) else if lfeqb (if lfeqb x x then Succ Zero else Zero) (Succ Zero) then Succ Zero else Zero).
Lemma candidate_142: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (Succ (if lfeqb x x then Succ Zero else Zero)).
Lemma candidate_143: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb x x then Succ (if lfeqb x x then Succ Zero else Zero) else if lfeqb x x then Succ Zero else Zero).
Lemma candidate_144: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (Succ (Succ Zero)).
Lemma candidate_145: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort (sort lf3))) x).
Lemma candidate_146: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb x (Succ x) then Succ (count lf3 x) else count lf3 x).
Lemma candidate_147: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (insort lf3 (Succ x)) x).
Lemma candidate_148: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort lf3)) x).
Lemma candidate_149: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort lf3) x).
Lemma candidate_150: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count lf3 x).
Lemma candidate_151: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort l) x).
Lemma candidate_152: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort l) Zero).
Lemma candidate_153: forall (l : lst) (x : natural), @eq natural (count l x) (count l (Succ Zero)).
Lemma candidate_154: forall (l : lst) (x : natural), @eq natural (count l x) (count l x).
Lemma candidate_155: forall (l : lst) (x : natural), @eq natural (count l x) (count l Zero).
Lemma candidate_156: forall (l : lst) (x : natural), @eq natural (count l x) (Zero).
Lemma candidate_157: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count (sort l) Zero)).
Lemma candidate_158: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (count (insort l Zero) Zero).
Lemma candidate_159: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count l (Succ Zero))).
Lemma candidate_160: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count l x)).
Lemma candidate_161: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count l Zero)).
Lemma candidate_162: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ Zero).
Lemma candidate_163: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ (count (sort l) Zero))).
Lemma candidate_164: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (count (insort l Zero) Zero)).
Lemma candidate_165: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ (count l (Succ Zero)))).
Lemma candidate_166: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ (count l x))).
Lemma candidate_167: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ (count l Zero))).
Lemma candidate_168: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ Zero)).
Lemma candidate_169: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5)   (Cons (if lfeqb n (Succ Zero) then Succ Zero else Zero) lf5).
Lemma candidate_170: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (sort (sort (sort (sort lf5))))).
Lemma candidate_171: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (sort (sort (sort lf5)))).
Lemma candidate_172: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (sort (sort lf5))).
Lemma candidate_173: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (sort lf5)).
Lemma candidate_174: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n lf5).
Lemma candidate_175: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb n n then Succ (count lf5 n) else count lf5 n).
Lemma candidate_176: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) n).
Lemma candidate_177: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x n then Succ (count (sort lf5) x) else count (sort lf5) x).
Lemma candidate_178: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x n then Succ (count lf5 x) else count lf5 x).
Lemma candidate_179: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) x).
Lemma candidate_180: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 n)).
Lemma candidate_181: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count (sort lf5) x)).
Lemma candidate_182: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x x then Succ (count (sort lf5) x) else count (sort lf5) x).
Lemma candidate_183: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x x then Succ (count lf5 x) else count lf5 x).
Lemma candidate_184: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 x) x).
Lemma candidate_185: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 x)).
Lemma candidate_186: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (Succ Zero)).
Lemma candidate_187: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5)   (Cons (if lfeqb n (Succ Zero) then Succ Zero else Zero) lf5).
Lemma candidate_188: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (sort (sort (sort (sort lf5))))).
Lemma candidate_189: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (sort (sort (sort lf5)))).
Lemma candidate_190: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (sort (sort lf5))).
Lemma candidate_191: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (sort lf5)).
Lemma candidate_192: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n lf5).
Lemma candidate_193: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_194: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero).
Lemma candidate_195: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_196: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero).
Lemma candidate_197: forall (lf4 : natural), @eq natural (Succ lf4) (Succ (Succ Zero)).
Lemma candidate_198: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_199: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb n n then Succ (count lf5 n) else count lf5 n).
Lemma candidate_200: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) n).
Lemma candidate_201: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x n then Succ (count (sort lf5) x) else count (sort lf5) x).
Lemma candidate_202: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x n then Succ (count lf5 x) else count lf5 x).
Lemma candidate_203: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) x).
Lemma candidate_204: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 n)).
Lemma candidate_205: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (sort (sort (insort l x)))).
Lemma candidate_206: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (sort (insort (sort l) x))).
Lemma candidate_207: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (insort (sort (sort l)) x)).
Lemma candidate_208: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (sort (insort l x))).
Lemma candidate_209: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (insort (sort l) x)).
Lemma candidate_210: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (insort l x)).
Lemma candidate_211: forall (l : lst) (x : natural), @eq lst (insort l x) (sort (sort (insort l x))).
Lemma candidate_212: forall (l : lst) (x : natural), @eq lst (insort l x) (sort (insort (sort l) x)).
Lemma candidate_213: forall (l : lst) (x : natural), @eq lst (insort l x) (insort (sort (sort l)) x).
Lemma candidate_214: forall (l : lst) (x : natural), @eq lst (insort l x) (sort (insort l x)).
Lemma candidate_215: forall (l : lst) (x : natural), @eq lst (insort l x) (insort (sort l) x).
Lemma candidate_216: forall (l : lst) (x : natural), @eq lst (insort l x) (insort l x).
Lemma candidate_217: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (if lfeqb x n then Succ (count l x) else count l x) else if lfeqb x n then Succ (count l x) else count l x).
Lemma candidate_218: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (if lfeqb x x then Succ (count l x) else count l x) else if lfeqb x x then Succ (count l x) else count l x).
Lemma candidate_219: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (count (insort l n) x) else count (insort l n) x).
Lemma candidate_220: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (if lfeqb x n then Succ Zero else Zero) else if lfeqb x n then Succ Zero else Zero).
Lemma candidate_221: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_222: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (if lfeqb x x then Succ Zero else Zero) else if lfeqb x x then Succ Zero else Zero).
Lemma candidate_223: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (Succ (count (insort l Zero) Zero)).
Lemma candidate_224: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (Succ (Succ (count l (Succ Zero)))).
Lemma candidate_225: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l n))).
Lemma candidate_226: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).
Lemma candidate_227: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l Zero))).
Lemma candidate_228: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ Zero)).
Lemma candidate_229: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (sort (sort (insort l x)))).
Lemma candidate_230: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (sort (insort (sort l) x))).
Lemma candidate_231: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (insort (sort (sort l)) x)).
Lemma candidate_232: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (sort (insort l x))).
Lemma candidate_233: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (insort (sort l) x)).
Lemma candidate_234: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (insort l x)).
Lemma candidate_235: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_236: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero).
Lemma candidate_237: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_238: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero).
Lemma candidate_239: forall (lf4 : natural), @eq natural (Succ lf4) (Succ (Succ Zero)).
Lemma candidate_240: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_241: forall (l : lst) (x : natural), @eq lst (insort l x) (sort (sort (insort l x))).
Lemma candidate_242: forall (l : lst) (x : natural), @eq lst (insort l x) (sort (insort (sort l) x)).
Lemma candidate_243: forall (l : lst) (x : natural), @eq lst (insort l x) (insort (sort (sort l)) x).
Lemma candidate_244: forall (l : lst) (x : natural), @eq lst (insort l x) (sort (insort l x)).
Lemma candidate_245: forall (l : lst) (x : natural), @eq lst (insort l x) (insort (sort l) x).
Lemma candidate_246: forall (l : lst) (x : natural), @eq lst (insort l x) (insort l x).
Lemma candidate_247: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (if lfeqb x n then Succ (count l x) else count l x) else if lfeqb x n then Succ (count l x) else count l x).
Lemma candidate_248: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (if lfeqb x x then Succ (count l x) else count l x) else if lfeqb x x then Succ (count l x) else count l x).
Lemma candidate_249: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (count (insort l n) x) else count (insort l n) x).
Lemma candidate_250: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (if lfeqb x n then Succ Zero else Zero) else if lfeqb x n then Succ Zero else Zero).
Lemma candidate_251: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_252: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (if lfeqb x x then Succ Zero else Zero) else if lfeqb x x then Succ Zero else Zero).
Lemma candidate_253: forall (n : natural) (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l n))).
Lemma candidate_254: forall (n : natural) (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l lf4))).
Lemma candidate_255: forall (n : natural) (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).
Lemma candidate_256: forall (n : natural) (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l Zero))).
Lemma candidate_257: forall (n : natural) (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural (count (Cons n (insort l x)) x) (Succ (Succ Zero)).
Lemma candidate_258: forall (n : natural) (l : lst) (lf4 : natural) (x : natural), forall _ : @eq natural (count (insort l x) x) lf4, @eq natural (count (Cons n (insort l x)) x) (Succ lf4).
Lemma candidate_259: forall (l : lst) (n : natural) (lf4 : natural) (x : natural), forall _ : @eq natural (Succ (count l n)) lf4, @eq natural (count (Cons n (insort l x)) x) (Succ lf4).
Lemma candidate_260: forall (l : lst) (n : natural) (lf4 : natural) (x : natural), forall _ : @eq natural (Succ (count l lf4)) lf4, @eq natural (count (Cons n (insort l x)) x) (Succ lf4).
Lemma candidate_261: forall (l : lst) (n : natural) (lf4 : natural) (x : natural), forall _ : @eq natural (Succ (count l x)) lf4, @eq natural (count (Cons n (insort l x)) x) (Succ lf4).
Lemma candidate_262: forall (l : lst) (n : natural) (lf4 : natural) (x : natural), forall _ : @eq natural (Succ (count l Zero)) lf4, @eq natural (count (Cons n (insort l x)) x) (Succ lf4).
Lemma candidate_263: forall (l : lst) (n : natural) (lf4 : natural) (x : natural), forall _ : @eq natural (Succ Zero) lf4, @eq natural (count (Cons n (insort l x)) x) (Succ lf4).
Lemma candidate_264: forall (l : lst) (n : natural) (lf4 : natural) (x : natural), forall _ : @eq natural (lf4) lf4, @eq natural (count (Cons n (insort l x)) x) (Succ lf4).
Lemma candidate_265: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (sort (sort (insort l x)))).
Lemma candidate_266: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (sort (insort (sort l) x))).
Lemma candidate_267: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (insort (sort (sort l)) x)).
Lemma candidate_268: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (sort (insort l x))).
Lemma candidate_269: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (insort (sort l) x)).
Lemma candidate_270: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (insort l x)).
Lemma candidate_271: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_272: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero).
Lemma candidate_273: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_274: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero).
Lemma candidate_275: forall (lf4 : natural), @eq natural (Succ lf4) (Succ (Succ Zero)).
Lemma candidate_276: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_277: forall (l : lst) (x : natural), @eq lst (insort l x) (sort (sort (insort l x))).
Lemma candidate_278: forall (l : lst) (x : natural), @eq lst (insort l x) (sort (insort (sort l) x)).
Lemma candidate_279: forall (l : lst) (x : natural), @eq lst (insort l x) (insort (sort (sort l)) x).
Lemma candidate_280: forall (l : lst) (x : natural), @eq lst (insort l x) (sort (insort l x)).
Lemma candidate_281: forall (l : lst) (x : natural), @eq lst (insort l x) (insort (sort l) x).
Lemma candidate_282: forall (l : lst) (x : natural), @eq lst (insort l x) (insort l x).
Lemma candidate_283: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (if lfeqb x n then Succ (count l x) else count l x) else if lfeqb x n then Succ (count l x) else count l x).
Lemma candidate_284: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (if lfeqb x x then Succ (count l x) else count l x) else if lfeqb x x then Succ (count l x) else count l x).
Lemma candidate_285: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (count (insort l n) x) else count (insort l n) x).
Lemma candidate_286: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (if lfeqb x n then Succ Zero else Zero) else if lfeqb x n then Succ Zero else Zero).
Lemma candidate_287: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_288: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (if lfeqb x x then Succ Zero else Zero) else if lfeqb x x then Succ Zero else Zero).
Lemma candidate_289: forall (l : lst) (x : natural), @eq natural (count (insort l x) x) (Succ (count (sort l) Zero)).
Lemma candidate_290: forall (l : lst) (x : natural), @eq natural (count (insort l x) x) (count (insort l Zero) Zero).
Lemma candidate_291: forall (l : lst) (x : natural), @eq natural (count (insort l x) x) (Succ (count l (Succ Zero))).
Lemma candidate_292: forall (l : lst) (x : natural), @eq natural (count (insort l x) x) (Succ (count l x)).
Lemma candidate_293: forall (l : lst) (x : natural), @eq natural (count (insort l x) x) (Succ (count l Zero)).
Lemma candidate_294: forall (l : lst) (x : natural), @eq natural (count (insort l x) x) (Succ Zero).
Lemma candidate_295: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count (insort lf5 (Succ x)) x)).
Lemma candidate_296: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count (sort (sort lf5)) x)).
Lemma candidate_297: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (Succ (if lfeqb x x then Succ Zero else Zero)).
Lemma candidate_298: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count (sort lf5) x)).
Lemma candidate_299: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 x)).
Lemma candidate_300: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (Succ Zero)).
Lemma candidate_301: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count (sort lf5) x)).
Lemma candidate_302: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x x then Succ (count (sort lf5) x) else count (sort lf5) x).
Lemma candidate_303: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x x then Succ (count lf5 x) else count lf5 x).
Lemma candidate_304: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 x) x).
Lemma candidate_305: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 x)).
Lemma candidate_306: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (Succ Zero)).
Lemma candidate_307: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5)   (Cons (if lfeqb n (Succ Zero) then Succ Zero else Zero) lf5).
Lemma candidate_308: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (sort (sort (sort (sort lf5))))).
Lemma candidate_309: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (sort (sort (sort lf5)))).
Lemma candidate_310: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (sort (sort lf5))).
Lemma candidate_311: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (sort lf5)).
Lemma candidate_312: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n lf5).
Lemma candidate_313: forall (lf6 : natural), @eq natural (Succ lf6)   (if lfeqb lf6 Zero then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_314: forall (lf6 : natural), @eq natural (Succ lf6) (if lfeqb lf6 lf6 then Succ Zero else Zero).
Lemma candidate_315: forall (lf6 : natural), @eq natural (Succ lf6) (if lfeqb lf6 Zero then Succ Zero else Zero).
Lemma candidate_316: forall (lf6 : natural), @eq natural (Succ lf6)   (if match lf6 with | Succ _ => false | Zero => true end then Succ Zero else Zero).
Lemma candidate_317: forall (lf6 : natural), @eq natural (Succ lf6) (Succ lf6).
Lemma candidate_318: forall (lf6 : natural), @eq natural (Succ lf6) (Succ Zero).
Lemma candidate_319: forall (lf6 : natural), @eq natural (Succ (Succ lf6))   (if lfeqb lf6 Zero then Succ (if lfeqb lf6 Zero then Succ Zero else Zero) else if lfeqb lf6 Zero then Succ Zero else Zero).
Lemma candidate_320: forall (lf6 : natural), @eq natural (Succ (Succ lf6))   (if match lf6 with | Succ _ => false | Zero => true end then Succ (if match lf6 with | Succ _ => false | Zero => true end then Succ Zero else Zero) else if match lf6 with | Succ _ => false | Zero => true end then Succ Zero else Zero).
Lemma candidate_321: forall (lf6 : natural), @eq natural (Succ (Succ lf6))   (Succ (if match lf6 with | Succ _ => false | Zero => true end then Succ Zero else Zero)).
Lemma candidate_322: forall (lf6 : natural), @eq natural (Succ (Succ lf6))   (if match lf6 with | Succ _ => false | Zero => true end then Succ (Succ Zero) else Succ Zero).
Lemma candidate_323: forall (lf6 : natural), @eq natural (Succ (Succ lf6)) (Succ (Succ lf6)).
Lemma candidate_324: forall (lf6 : natural), @eq natural (Succ (Succ lf6)) (Succ (Succ Zero)).
Lemma candidate_325: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb n n then Succ (count lf5 n) else count lf5 n).
Lemma candidate_326: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) n).
Lemma candidate_327: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x n then Succ (count (sort lf5) x) else count (sort lf5) x).
Lemma candidate_328: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x n then Succ (count lf5 x) else count lf5 x).
Lemma candidate_329: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) x).
Lemma candidate_330: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 n)).
Lemma candidate_331: forall (n : natural) (x : natural) (lf5 : lst) (lf6 : natural), forall   _ : @eq natural (if lfeqb lf6 Zero then Succ Zero else Zero) (Succ lf6), @eq natural (count (Cons n lf5) x) (Succ (Succ lf6)).
Lemma candidate_332: forall (n : natural) (x : natural) (lf5 : lst) (lf6 : natural), forall   _ : @eq natural         (if match lf6 with | Succ _ => false | Zero => true end then Succ Zero else Zero)         (Succ lf6), @eq natural (count (Cons n lf5) x) (Succ (Succ lf6)).
Lemma candidate_333: forall (n : natural) (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count (sort lf5) x) (Succ lf6), @eq natural (count (Cons n lf5) x) (Succ (Succ lf6)).
Lemma candidate_334: forall (n : natural) (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (count (Cons n lf5) x) (Succ (Succ lf6)).
Lemma candidate_335: forall (n : natural) (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (Succ lf6) (Succ lf6), @eq natural (count (Cons n lf5) x) (Succ (Succ lf6)).
Lemma candidate_336: forall (n : natural) (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (Succ Zero) (Succ lf6), @eq natural (count (Cons n lf5) x) (Succ (Succ lf6)).
Lemma candidate_337: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count (insort lf5 (Succ x)) x), @eq natural (count (Cons n lf5) x) (Succ (count (insort lf5 (Succ x)) x)).
Lemma candidate_338: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count (sort (sort lf5)) x), @eq natural (count (Cons n lf5) x) (Succ (count (sort (sort lf5)) x)).
Lemma candidate_339: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (if lfeqb x x then Succ Zero else Zero), @eq natural (count (Cons n lf5) x)   (Succ (if lfeqb x x then Succ Zero else Zero)).
Lemma candidate_340: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count (sort lf5) x), @eq natural (count (Cons n lf5) x) (Succ (count (sort lf5) x)).
Lemma candidate_341: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count lf5 x), @eq natural (count (Cons n lf5) x) (Succ (count lf5 x)).
Lemma candidate_342: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ Zero), @eq natural (count (Cons n lf5) x) (Succ (Succ Zero)).
Lemma candidate_343: forall (n : natural) (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (count (Cons n lf5) x)   (if lfeqb x x then Succ (count (sort lf5) x) else count (sort lf5) x).
Lemma candidate_344: forall (n : natural) (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (count (Cons n lf5) x)   (if lfeqb x x then Succ (count lf5 x) else count lf5 x).
Lemma candidate_345: forall (n : natural) (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (count (Cons n lf5) x) (count (insort lf5 x) x).
Lemma candidate_346: forall (n : natural) (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (count (Cons n lf5) x) (Succ (count lf5 x)).
Lemma candidate_347: forall (n : natural) (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (count (Cons n lf5) x) (Succ (Succ lf6)).
Lemma candidate_348: forall (n : natural) (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (count (Cons n lf5) x) (Succ (Succ Zero)).
Lemma candidate_349: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5)   (Cons (if lfeqb n (Succ Zero) then Succ Zero else Zero) lf5).
Lemma candidate_350: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (sort (sort (sort (sort lf5))))).
Lemma candidate_351: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (sort (sort (sort lf5)))).
Lemma candidate_352: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (sort (sort lf5))).
Lemma candidate_353: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (sort lf5)).
Lemma candidate_354: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n lf5).
Lemma candidate_355: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (insort lf5 (Succ x)) x).
Lemma candidate_356: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (sort (sort lf5)) x).
Lemma candidate_357: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (if lfeqb x x then Succ Zero else Zero).
Lemma candidate_358: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (sort lf5) x).
Lemma candidate_359: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count lf5 x).
Lemma candidate_360: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (Succ Zero).
Lemma candidate_361: forall (lf6 : natural), @eq natural (Succ lf6)   (if lfeqb lf6 Zero then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_362: forall (lf6 : natural), @eq natural (Succ lf6) (if lfeqb lf6 lf6 then Succ Zero else Zero).
Lemma candidate_363: forall (lf6 : natural), @eq natural (Succ lf6) (if lfeqb lf6 Zero then Succ Zero else Zero).
Lemma candidate_364: forall (lf6 : natural), @eq natural (Succ lf6)   (if match lf6 with | Succ _ => false | Zero => true end then Succ Zero else Zero).
Lemma candidate_365: forall (lf6 : natural), @eq natural (Succ lf6) (Succ lf6).
Lemma candidate_366: forall (lf6 : natural), @eq natural (Succ lf6) (Succ Zero).
Lemma candidate_367: forall (lf6 : natural), @eq natural (Succ (Succ lf6))   (if lfeqb lf6 Zero then Succ (if lfeqb lf6 Zero then Succ Zero else Zero) else if lfeqb lf6 Zero then Succ Zero else Zero).
Lemma candidate_368: forall (lf6 : natural), @eq natural (Succ (Succ lf6))   (if match lf6 with | Succ _ => false | Zero => true end then Succ (if match lf6 with | Succ _ => false | Zero => true end then Succ Zero else Zero) else if match lf6 with | Succ _ => false | Zero => true end then Succ Zero else Zero).
Lemma candidate_369: forall (lf6 : natural), @eq natural (Succ (Succ lf6))   (Succ (if match lf6 with | Succ _ => false | Zero => true end then Succ Zero else Zero)).
Lemma candidate_370: forall (lf6 : natural), @eq natural (Succ (Succ lf6))   (if match lf6 with | Succ _ => false | Zero => true end then Succ (Succ Zero) else Succ Zero).
Lemma candidate_371: forall (lf6 : natural), @eq natural (Succ (Succ lf6)) (Succ (Succ lf6)).
Lemma candidate_372: forall (lf6 : natural), @eq natural (Succ (Succ lf6)) (Succ (Succ Zero)).
Lemma candidate_373: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb n n then Succ (count lf5 n) else count lf5 n).
Lemma candidate_374: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) n).
Lemma candidate_375: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x n then Succ (count (sort lf5) x) else count (sort lf5) x).
Lemma candidate_376: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x n then Succ (count lf5 x) else count lf5 x).
Lemma candidate_377: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) x).
Lemma candidate_378: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 n)).
Lemma candidate_379: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (Succ      (Succ         (if match x with | Succ m' => lfeqb x m' | Zero => false end then Succ Zero else Zero))).
Lemma candidate_380: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (Succ (Succ (if lfeqb n (Succ n) then Succ Zero else Zero))).
Lemma candidate_381: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (Succ (Succ (if lfeqb x (Succ x) then Succ Zero else Zero))).
Lemma candidate_382: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (Succ (Succ (count (sort lf5) (count lf5 Zero)))).
Lemma candidate_383: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (Succ (count lf5 (count lf5 Zero)))).
Lemma candidate_384: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (Succ (Zero))).
Lemma candidate_385: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count (insort lf5 (Succ x)) x)).
Lemma candidate_386: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count (sort (sort lf5)) x)).
Lemma candidate_387: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (Succ (if lfeqb x x then Succ Zero else Zero)).
Lemma candidate_388: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count (sort lf5) x)).
Lemma candidate_389: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 x)).
Lemma candidate_390: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (Succ Zero)).
Lemma candidate_391: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count (sort lf5) x)).
Lemma candidate_392: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x x then Succ (count (sort lf5) x) else count (sort lf5) x).
Lemma candidate_393: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x x then Succ (count lf5 x) else count lf5 x).
Lemma candidate_394: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 x) x).
Lemma candidate_395: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 x)).
Lemma candidate_396: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (Succ Zero)).
Lemma candidate_397: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5)   (Cons (if lfeqb n (Succ Zero) then Succ Zero else Zero) lf5).
Lemma candidate_398: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (sort (sort (sort (sort lf5))))).
Lemma candidate_399: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (sort (sort (sort lf5)))).
Lemma candidate_400: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (sort (sort lf5))).
Lemma candidate_401: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (sort lf5)).
Lemma candidate_402: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n lf5).
Lemma candidate_403: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort l) x).
Lemma candidate_404: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort l) Zero).
Lemma candidate_405: forall (l : lst) (x : natural), @eq natural (count l x) (count l (Succ Zero)).
Lemma candidate_406: forall (l : lst) (x : natural), @eq natural (count l x) (count l x).
Lemma candidate_407: forall (l : lst) (x : natural), @eq natural (count l x) (count l Zero).
Lemma candidate_408: forall (l : lst) (x : natural), @eq natural (count l x) (Zero).
Lemma candidate_409: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count (sort l) Zero)).
Lemma candidate_410: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (count (insort l Zero) Zero).
Lemma candidate_411: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count l (Succ Zero))).
Lemma candidate_412: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count l x)).
Lemma candidate_413: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count l Zero)).
Lemma candidate_414: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ Zero).
Lemma candidate_415: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ (count (sort l) Zero))).
Lemma candidate_416: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (count (insort l Zero) Zero)).
Lemma candidate_417: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ (count l (Succ Zero)))).
Lemma candidate_418: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ (count l x))).
Lemma candidate_419: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ (count l Zero))).
Lemma candidate_420: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ Zero)).
Lemma candidate_421: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb n n then Succ (count lf5 n) else count lf5 n).
Lemma candidate_422: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) n).
Lemma candidate_423: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x n then Succ (count (sort lf5) x) else count (sort lf5) x).
Lemma candidate_424: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x n then Succ (count lf5 x) else count lf5 x).
Lemma candidate_425: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) x).
Lemma candidate_426: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 n)).
Lemma candidate_427: forall (n : natural) (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (Succ (count l n)) (Succ (count l x)), @eq natural (count (Cons n lf5) x) (Succ (Succ (count l x))).
Lemma candidate_428: forall (n : natural) (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (Succ (count l x)) (Succ (count l x)), @eq natural (count (Cons n lf5) x) (Succ (Succ (count l x))).
Lemma candidate_429: forall (n : natural) (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (Succ (count l Zero)) (Succ (count l x)), @eq natural (count (Cons n lf5) x) (Succ (Succ (count l x))).
Lemma candidate_430: forall (n : natural) (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count (sort lf5) x) (Succ (count l x)), @eq natural (count (Cons n lf5) x) (Succ (Succ (count l x))).
Lemma candidate_431: forall (n : natural) (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (count (Cons n lf5) x) (Succ (Succ (count l x))).
Lemma candidate_432: forall (n : natural) (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (Succ Zero) (Succ (count l x)), @eq natural (count (Cons n lf5) x) (Succ (Succ (count l x))).
Lemma candidate_433: forall (n : natural) (x : natural) (lf5 : lst), forall   _ : @eq natural (count lf5 x)         (Succ            (if match x with | Succ m' => lfeqb x m' | Zero => false end then Succ Zero else Zero)), @eq natural (count (Cons n lf5) x)   (Succ      (Succ         (if match x with | Succ m' => lfeqb x m' | Zero => false end then Succ Zero else Zero))).
Lemma candidate_434: forall (n : natural) (x : natural) (lf5 : lst), forall   _ : @eq natural (count lf5 x)         (Succ (if lfeqb n (Succ n) then Succ Zero else Zero)), @eq natural (count (Cons n lf5) x)   (Succ (Succ (if lfeqb n (Succ n) then Succ Zero else Zero))).
Lemma candidate_435: forall (n : natural) (x : natural) (lf5 : lst), forall   _ : @eq natural (count lf5 x)         (Succ (if lfeqb x (Succ x) then Succ Zero else Zero)), @eq natural (count (Cons n lf5) x)   (Succ (Succ (if lfeqb x (Succ x) then Succ Zero else Zero))).
Lemma candidate_436: forall (n : natural) (x : natural) (lf5 : lst), forall   _ : @eq natural (count lf5 x) (Succ (count (sort lf5) (count lf5 Zero))), @eq natural (count (Cons n lf5) x)   (Succ (Succ (count (sort lf5) (count lf5 Zero)))).
Lemma candidate_437: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count lf5 (count lf5 Zero))), @eq natural (count (Cons n lf5) x) (Succ (Succ (count lf5 (count lf5 Zero)))).
Lemma candidate_438: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (Zero)), @eq natural (count (Cons n lf5) x) (Succ (Succ (Zero))).
Lemma candidate_439: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count (insort lf5 (Succ x)) x), @eq natural (count (Cons n lf5) x) (Succ (count (insort lf5 (Succ x)) x)).
Lemma candidate_440: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count (sort (sort lf5)) x), @eq natural (count (Cons n lf5) x) (Succ (count (sort (sort lf5)) x)).
Lemma candidate_441: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (if lfeqb x x then Succ Zero else Zero), @eq natural (count (Cons n lf5) x)   (Succ (if lfeqb x x then Succ Zero else Zero)).
Lemma candidate_442: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count (sort lf5) x), @eq natural (count (Cons n lf5) x) (Succ (count (sort lf5) x)).
Lemma candidate_443: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count lf5 x), @eq natural (count (Cons n lf5) x) (Succ (count lf5 x)).
Lemma candidate_444: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ Zero), @eq natural (count (Cons n lf5) x) (Succ (Succ Zero)).
Lemma candidate_445: forall (n : natural) (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (count (Cons n lf5) x) (Succ (count (sort lf5) x)).
Lemma candidate_446: forall (n : natural) (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (count (Cons n lf5) x)   (if lfeqb x x then Succ (count (sort lf5) x) else count (sort lf5) x).
Lemma candidate_447: forall (n : natural) (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (count (Cons n lf5) x)   (if lfeqb x x then Succ (count lf5 x) else count lf5 x).
Lemma candidate_448: forall (n : natural) (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (count (Cons n lf5) x) (count (insort lf5 x) x).
Lemma candidate_449: forall (n : natural) (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (count (Cons n lf5) x) (Succ (count lf5 x)).
Lemma candidate_450: forall (n : natural) (l : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (Succ (count l x)), @eq natural (count (Cons n lf5) x) (Succ (Succ Zero)).
Lemma candidate_451: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5)   (Cons (if lfeqb n (Succ Zero) then Succ Zero else Zero) lf5).
Lemma candidate_452: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (sort (sort (sort (sort lf5))))).
Lemma candidate_453: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (sort (sort (sort lf5)))).
Lemma candidate_454: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (sort (sort lf5))).
Lemma candidate_455: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (sort lf5)).
Lemma candidate_456: forall (n : natural) (lf5 : lst), @eq lst (Cons n lf5) (Cons n lf5).
Lemma candidate_457: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (insort lf5 (Succ x)) x).
Lemma candidate_458: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (sort (sort lf5)) x).
Lemma candidate_459: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (if lfeqb x x then Succ Zero else Zero).
Lemma candidate_460: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (sort lf5) x).
Lemma candidate_461: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count lf5 x).
Lemma candidate_462: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (Succ Zero).
Lemma candidate_463: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort l) x).
Lemma candidate_464: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort l) Zero).
Lemma candidate_465: forall (l : lst) (x : natural), @eq natural (count l x) (count l (Succ Zero)).
Lemma candidate_466: forall (l : lst) (x : natural), @eq natural (count l x) (count l x).
Lemma candidate_467: forall (l : lst) (x : natural), @eq natural (count l x) (count l Zero).
Lemma candidate_468: forall (l : lst) (x : natural), @eq natural (count l x) (Zero).
Lemma candidate_469: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count (sort l) Zero)).
Lemma candidate_470: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (count (insort l Zero) Zero).
Lemma candidate_471: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count l (Succ Zero))).
Lemma candidate_472: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count l x)).
Lemma candidate_473: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count l Zero)).
Lemma candidate_474: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ Zero).
Lemma candidate_475: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ (count (sort l) Zero))).
Lemma candidate_476: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (count (insort l Zero) Zero)).
Lemma candidate_477: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ (count l (Succ Zero)))).
Lemma candidate_478: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ (count l x))).
Lemma candidate_479: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ (count l Zero))).
Lemma candidate_480: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ Zero)).
Lemma candidate_481: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb n n then Succ (count lf5 n) else count lf5 n).
Lemma candidate_482: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) n).
Lemma candidate_483: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x n then Succ (count (sort lf5) x) else count (sort lf5) x).
Lemma candidate_484: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x n then Succ (count lf5 x) else count lf5 x).
Lemma candidate_485: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) x).
Lemma candidate_486: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (Succ (count lf5 n)).
Lemma candidate_487: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (Succ (count (insort l Zero) Zero)).
Lemma candidate_488: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (Succ (Succ (count l (Succ Zero)))).
Lemma candidate_489: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l n))).
Lemma candidate_490: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).
Lemma candidate_491: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l Zero))).
Lemma candidate_492: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ Zero)).
Lemma candidate_493: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (Succ (count (insort l Zero) Zero)).
Lemma candidate_494: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (Succ (Succ (count l (Succ Zero)))).
Lemma candidate_495: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l n))).
Lemma candidate_496: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).
Lemma candidate_497: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l Zero))).
Lemma candidate_498: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ Zero)).
Lemma candidate_499: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (sort (sort (insort l x)))).
Lemma candidate_500: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (sort (insort (sort l) x))).
Lemma candidate_501: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (insort (sort (sort l)) x)).
Lemma candidate_502: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (sort (insort l x))).
Lemma candidate_503: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (insort (sort l) x)).
Lemma candidate_504: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (insort l x)).
Lemma candidate_505: forall (lf6 : natural), @eq natural (Succ lf6)   (if lfeqb lf6 Zero then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_506: forall (lf6 : natural), @eq natural (Succ lf6) (if lfeqb lf6 lf6 then Succ Zero else Zero).
Lemma candidate_507: forall (lf6 : natural), @eq natural (Succ lf6) (if lfeqb lf6 Zero then Succ Zero else Zero).
Lemma candidate_508: forall (lf6 : natural), @eq natural (Succ lf6)   (if match lf6 with | Succ _ => false | Zero => true end then Succ Zero else Zero).
Lemma candidate_509: forall (lf6 : natural), @eq natural (Succ lf6) (Succ lf6).
Lemma candidate_510: forall (lf6 : natural), @eq natural (Succ lf6) (Succ Zero).
Lemma candidate_511: forall (l : lst) (x : natural), @eq lst (insort l x) (sort (sort (insort l x))).
Lemma candidate_512: forall (l : lst) (x : natural), @eq lst (insort l x) (sort (insort (sort l) x)).
Lemma candidate_513: forall (l : lst) (x : natural), @eq lst (insort l x) (insort (sort (sort l)) x).
Lemma candidate_514: forall (l : lst) (x : natural), @eq lst (insort l x) (sort (insort l x)).
Lemma candidate_515: forall (l : lst) (x : natural), @eq lst (insort l x) (insort (sort l) x).
Lemma candidate_516: forall (l : lst) (x : natural), @eq lst (insort l x) (insort l x).
Lemma candidate_517: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (if lfeqb x n then Succ (count l x) else count l x) else if lfeqb x n then Succ (count l x) else count l x).
Lemma candidate_518: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (if lfeqb x x then Succ (count l x) else count l x) else if lfeqb x x then Succ (count l x) else count l x).
Lemma candidate_519: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (count (insort l n) x) else count (insort l n) x).
Lemma candidate_520: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (if lfeqb x n then Succ Zero else Zero) else if lfeqb x n then Succ Zero else Zero).
Lemma candidate_521: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_522: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (if lfeqb x x then Succ Zero else Zero) else if lfeqb x x then Succ Zero else Zero).
Lemma candidate_523: forall (lf6 : natural), @eq natural (Succ (Succ lf6))   (if lfeqb lf6 Zero then Succ (if lfeqb lf6 Zero then Succ Zero else Zero) else if lfeqb lf6 Zero then Succ Zero else Zero).
Lemma candidate_524: forall (lf6 : natural), @eq natural (Succ (Succ lf6))   (if match lf6 with | Succ _ => false | Zero => true end then Succ (if match lf6 with | Succ _ => false | Zero => true end then Succ Zero else Zero) else if match lf6 with | Succ _ => false | Zero => true end then Succ Zero else Zero).
Lemma candidate_525: forall (lf6 : natural), @eq natural (Succ (Succ lf6))   (Succ (if match lf6 with | Succ _ => false | Zero => true end then Succ Zero else Zero)).
Lemma candidate_526: forall (lf6 : natural), @eq natural (Succ (Succ lf6))   (if match lf6 with | Succ _ => false | Zero => true end then Succ (Succ Zero) else Succ Zero).
Lemma candidate_527: forall (lf6 : natural), @eq natural (Succ (Succ lf6)) (Succ (Succ lf6)).
Lemma candidate_528: forall (lf6 : natural), @eq natural (Succ (Succ lf6)) (Succ (Succ Zero)).
Lemma candidate_529: forall (n : natural) (l : lst) (x : natural), forall _ : @eq natural (count (insort l x) x) (count (insort l Zero) Zero), @eq natural (count (Cons n (insort l x)) x)   (Succ (count (insort l Zero) Zero)).
Lemma candidate_530: forall (n : natural) (l : lst) (x : natural), forall _ : @eq natural (count (insort l x) x) (Succ (count l (Succ Zero))), @eq natural (count (Cons n (insort l x)) x)   (Succ (Succ (count l (Succ Zero)))).
Lemma candidate_531: forall (n : natural) (l : lst) (x : natural), forall _ : @eq natural (count (insort l x) x) (Succ (count l n)), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l n))).
Lemma candidate_532: forall (n : natural) (l : lst) (x : natural), forall _ : @eq natural (count (insort l x) x) (Succ (count l x)), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).
Lemma candidate_533: forall (n : natural) (l : lst) (x : natural), forall _ : @eq natural (count (insort l x) x) (Succ (count l Zero)), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l Zero))).
Lemma candidate_534: forall (n : natural) (l : lst) (x : natural), forall _ : @eq natural (count (insort l x) x) (Succ Zero), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ Zero)).
Lemma candidate_535: forall (n : natural) (l : lst) (x : natural) (lf6 : natural), forall _ : @eq natural (count (insort l x) x) (Succ lf6), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l n))).
Lemma candidate_536: forall (n : natural) (l : lst) (x : natural) (lf6 : natural), forall _ : @eq natural (count (insort l x) x) (Succ lf6), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).
Lemma candidate_537: forall (n : natural) (l : lst) (x : natural) (lf6 : natural), forall _ : @eq natural (count (insort l x) x) (Succ lf6), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l lf6))).
Lemma candidate_538: forall (n : natural) (l : lst) (x : natural) (lf6 : natural), forall _ : @eq natural (count (insort l x) x) (Succ lf6), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l Zero))).
Lemma candidate_539: forall (n : natural) (l : lst) (x : natural) (lf6 : natural), forall _ : @eq natural (count (insort l x) x) (Succ lf6), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ lf6)).
Lemma candidate_540: forall (n : natural) (l : lst) (x : natural) (lf6 : natural), forall _ : @eq natural (count (insort l x) x) (Succ lf6), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ Zero)).
Lemma candidate_541: forall (l : lst) (n : natural) (x : natural) (lf6 : natural), forall _ : @eq natural (Succ (count l n)) (Succ lf6), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ lf6)).
Lemma candidate_542: forall (l : lst) (n : natural) (x : natural) (lf6 : natural), forall _ : @eq natural (Succ (count l x)) (Succ lf6), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ lf6)).
Lemma candidate_543: forall (l : lst) (n : natural) (x : natural) (lf6 : natural), forall _ : @eq natural (Succ (count l lf6)) (Succ lf6), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ lf6)).
Lemma candidate_544: forall (l : lst) (n : natural) (x : natural) (lf6 : natural), forall _ : @eq natural (Succ (count l Zero)) (Succ lf6), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ lf6)).
Lemma candidate_545: forall (l : lst) (n : natural) (x : natural) (lf6 : natural), forall _ : @eq natural (Succ lf6) (Succ lf6), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ lf6)).
Lemma candidate_546: forall (l : lst) (n : natural) (x : natural) (lf6 : natural), forall _ : @eq natural (Succ Zero) (Succ lf6), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ lf6)).
Lemma candidate_547: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (sort (sort (insort l x)))).
Lemma candidate_548: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (sort (insort (sort l) x))).
Lemma candidate_549: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (insort (sort (sort l)) x)).
Lemma candidate_550: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (sort (insort l x))).
Lemma candidate_551: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (insort (sort l) x)).
Lemma candidate_552: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (insort l x)).
Lemma candidate_553: forall (lf6 : natural), @eq natural (Succ lf6)   (if lfeqb lf6 Zero then Succ (if lfeqb lf6 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf6 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_554: forall (lf6 : natural), @eq natural (Succ lf6) (if lfeqb lf6 lf6 then Succ Zero else Zero).
Lemma candidate_555: forall (lf6 : natural), @eq natural (Succ lf6) (if lfeqb lf6 Zero then Succ Zero else Zero).
Lemma candidate_556: forall (lf6 : natural), @eq natural (Succ lf6)   (if match lf6 with | Succ _ => false | Zero => true end then Succ Zero else Zero).
Lemma candidate_557: forall (lf6 : natural), @eq natural (Succ lf6) (Succ lf6).
Lemma candidate_558: forall (lf6 : natural), @eq natural (Succ lf6) (Succ Zero).
Lemma candidate_559: forall (l : lst) (x : natural), @eq lst (insort l x) (sort (sort (insort l x))).
Lemma candidate_560: forall (l : lst) (x : natural), @eq lst (insort l x) (sort (insort (sort l) x)).
Lemma candidate_561: forall (l : lst) (x : natural), @eq lst (insort l x) (insort (sort (sort l)) x).
Lemma candidate_562: forall (l : lst) (x : natural), @eq lst (insort l x) (sort (insort l x)).
Lemma candidate_563: forall (l : lst) (x : natural), @eq lst (insort l x) (insort (sort l) x).
Lemma candidate_564: forall (l : lst) (x : natural), @eq lst (insort l x) (insort l x).
Lemma candidate_565: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (if lfeqb x n then Succ (count l x) else count l x) else if lfeqb x n then Succ (count l x) else count l x).
Lemma candidate_566: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (if lfeqb x x then Succ (count l x) else count l x) else if lfeqb x x then Succ (count l x) else count l x).
Lemma candidate_567: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (count (insort l n) x) else count (insort l n) x).
Lemma candidate_568: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (if lfeqb x n then Succ Zero else Zero) else if lfeqb x n then Succ Zero else Zero).
Lemma candidate_569: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_570: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (if lfeqb x x then Succ Zero else Zero) else if lfeqb x x then Succ Zero else Zero).
Lemma candidate_571: forall (lf6 : natural), @eq natural (Succ (Succ lf6))   (if lfeqb lf6 Zero then Succ (if lfeqb lf6 Zero then Succ Zero else Zero) else if lfeqb lf6 Zero then Succ Zero else Zero).
Lemma candidate_572: forall (lf6 : natural), @eq natural (Succ (Succ lf6))   (if match lf6 with | Succ _ => false | Zero => true end then Succ (if match lf6 with | Succ _ => false | Zero => true end then Succ Zero else Zero) else if match lf6 with | Succ _ => false | Zero => true end then Succ Zero else Zero).
Lemma candidate_573: forall (lf6 : natural), @eq natural (Succ (Succ lf6))   (Succ (if match lf6 with | Succ _ => false | Zero => true end then Succ Zero else Zero)).
Lemma candidate_574: forall (lf6 : natural), @eq natural (Succ (Succ lf6))   (if match lf6 with | Succ _ => false | Zero => true end then Succ (Succ Zero) else Succ Zero).
Lemma candidate_575: forall (lf6 : natural), @eq natural (Succ (Succ lf6)) (Succ (Succ lf6)).
Lemma candidate_576: forall (lf6 : natural), @eq natural (Succ (Succ lf6)) (Succ (Succ Zero)).
Lemma candidate_577: forall (l : lst) (x : natural), @eq natural (count (insort l x) x) (Succ (count (sort l) Zero)).
Lemma candidate_578: forall (l : lst) (x : natural), @eq natural (count (insort l x) x) (count (insort l Zero) Zero).
Lemma candidate_579: forall (l : lst) (x : natural), @eq natural (count (insort l x) x) (Succ (count l (Succ Zero))).
Lemma candidate_580: forall (l : lst) (x : natural), @eq natural (count (insort l x) x) (Succ (count l x)).
Lemma candidate_581: forall (l : lst) (x : natural), @eq natural (count (insort l x) x) (Succ (count l Zero)).
Lemma candidate_582: forall (l : lst) (x : natural), @eq natural (count (insort l x) x) (Succ Zero).
Lemma candidate_583: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (Succ (Succ (count (sort l) Zero))).
Lemma candidate_584: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (Succ (Succ (count l (Succ Zero)))).
Lemma candidate_585: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l n))).
Lemma candidate_586: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).
Lemma candidate_587: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l Zero))).
Lemma candidate_588: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (Zero))).
Lemma candidate_589: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (Succ (count (insort l Zero) Zero)).
Lemma candidate_590: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (Succ (Succ (count l (Succ Zero)))).
Lemma candidate_591: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l n))).
Lemma candidate_592: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).
Lemma candidate_593: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l Zero))).
Lemma candidate_594: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ Zero)).
Lemma candidate_595: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (sort (sort (insort l x)))) x)   (Succ (Succ (count l x))).
Lemma candidate_596: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (sort (insort (sort l) x))) x)   (Succ (Succ (count l x))).
Lemma candidate_597: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort (sort (sort l)) x)) x)   (Succ (Succ (count l x))).
Lemma candidate_598: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (sort (insort l x))) x) (Succ (Succ (count l x))).
Lemma candidate_599: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort (sort l) x)) x) (Succ (Succ (count l x))).
Lemma candidate_600: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).
Lemma candidate_601: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (Succ (count (insort l Zero) Zero)).
Lemma candidate_602: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (Succ (Succ (count l (Succ Zero)))).
Lemma candidate_603: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l n))).
Lemma candidate_604: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l x))).
Lemma candidate_605: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ (count l Zero))).
Lemma candidate_606: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x) (Succ (Succ Zero)).
Lemma candidate_607: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort l) x).
Lemma candidate_608: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort l) Zero).
Lemma candidate_609: forall (l : lst) (x : natural), @eq natural (count l x) (count l (Succ Zero)).
Lemma candidate_610: forall (l : lst) (x : natural), @eq natural (count l x) (count l x).
Lemma candidate_611: forall (l : lst) (x : natural), @eq natural (count l x) (count l Zero).
Lemma candidate_612: forall (l : lst) (x : natural), @eq natural (count l x) (Zero).
Lemma candidate_613: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (sort (sort (insort l x)))).
Lemma candidate_614: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (sort (insort (sort l) x))).
Lemma candidate_615: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (insort (sort (sort l)) x)).
Lemma candidate_616: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (sort (insort l x))).
Lemma candidate_617: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (insort (sort l) x)).
Lemma candidate_618: forall (l : lst) (n : natural) (x : natural), @eq lst (Cons n (insort l x)) (Cons n (insort l x)).
Lemma candidate_619: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count (sort l) Zero)).
Lemma candidate_620: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (count (insort l Zero) Zero).
Lemma candidate_621: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count l (Succ Zero))).
Lemma candidate_622: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count l x)).
Lemma candidate_623: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ (count l Zero)).
Lemma candidate_624: forall (l : lst) (x : natural), @eq natural (Succ (count l x)) (Succ Zero).
Lemma candidate_625: forall (l : lst) (x : natural), @eq lst (insort l x) (sort (sort (insort l x))).
Lemma candidate_626: forall (l : lst) (x : natural), @eq lst (insort l x) (sort (insort (sort l) x)).
Lemma candidate_627: forall (l : lst) (x : natural), @eq lst (insort l x) (insort (sort (sort l)) x).
Lemma candidate_628: forall (l : lst) (x : natural), @eq lst (insort l x) (sort (insort l x)).
Lemma candidate_629: forall (l : lst) (x : natural), @eq lst (insort l x) (insort (sort l) x).
Lemma candidate_630: forall (l : lst) (x : natural), @eq lst (insort l x) (insort l x).
Lemma candidate_631: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (if lfeqb x n then Succ (count l x) else count l x) else if lfeqb x n then Succ (count l x) else count l x).
Lemma candidate_632: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (if lfeqb x x then Succ (count l x) else count l x) else if lfeqb x x then Succ (count l x) else count l x).
Lemma candidate_633: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (count (insort l n) x) else count (insort l n) x).
Lemma candidate_634: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (if lfeqb x n then Succ Zero else Zero) else if lfeqb x n then Succ Zero else Zero).
Lemma candidate_635: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (count (insort l x) x) else count (insort l x) x).
Lemma candidate_636: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (if lfeqb x x then Succ Zero else Zero) else if lfeqb x x then Succ Zero else Zero).
Lemma candidate_637: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ (count (sort l) Zero))).
Lemma candidate_638: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (count (insort l Zero) Zero)).
Lemma candidate_639: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ (count l (Succ Zero)))).
Lemma candidate_640: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ (count l x))).
Lemma candidate_641: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ (count l Zero))).
Lemma candidate_642: forall (l : lst) (x : natural), @eq natural (Succ (Succ (count l x))) (Succ (Succ Zero)).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 1653 seconds
Duplicates removed: 435
Filtered by Quickchick: 178
Filtered by script: 14
Remaining: 15

Lemmas: 
Lemma candidate_55: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort l) x).
Lemma candidate_358: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (sort lf5) x).
Lemma candidate_77: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort lf3) x).
Lemma candidate_356: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (sort (sort lf5)) x).
Lemma candidate_76: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort lf3)) x).
Lemma candidate_355: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (insort lf5 (Succ x)) x).
Lemma candidate_75: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (insort lf3 (Succ x)) x).
Lemma candidate_179: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x) (count (insort lf5 n) x).
Lemma candidate_73: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x) (count (sort (sort (sort lf3))) x).
Lemma candidate_74: forall (lf3 : lst) (x : natural), @eq natural (count lf3 x)   (if lfeqb x (Succ x) then Succ (count lf3 x) else count lf3 x).
Lemma candidate_348: forall (n : natural) (x : natural) (lf5 : lst) (lf6 : natural), forall _ : @eq natural (count lf5 x) (Succ lf6), @eq natural (count (Cons n lf5) x) (Succ (Succ Zero)).
Lemma candidate_177: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (Cons n lf5) x)   (if lfeqb x n then Succ (count (sort lf5) x) else count (sort lf5) x).
Lemma candidate_219: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (count (insort l n) x) else count (insort l n) x).
Lemma candidate_218: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x n then Succ (if lfeqb x x then Succ (count l x) else count l x) else if lfeqb x x then Succ (count l x) else count l x).
Lemma candidate_217: forall (l : lst) (n : natural) (x : natural), @eq natural (count (Cons n (insort l x)) x)   (if lfeqb x x then Succ (if lfeqb x n then Succ (count l x) else count l x) else if lfeqb x n then Succ (count l x) else count l x).