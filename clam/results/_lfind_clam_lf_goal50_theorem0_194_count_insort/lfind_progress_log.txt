File Information
- File name: goal50
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal50_theorem0_194_count_insort
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal50_theorem0_194_count_insort
- Namespace: adtind
- Proof name: theorem0
- Theorem: Theorem theorem0: forall (x : natural) (y0 : lst), @eq natural (count (sort y0) x) (count y0 x).
- Declarations: 
From lfind Require Import LFind.
Require Import Arith.

Proof Context
* Goal State: @eq natural (count (insort (sort y) n) n) (Succ (count y n))

* Hypothesis:
y : lst
n : natural
IHy : @eq natural (count (sort y) n) (count y n)

* Types:
Set
natural
Prop
lst

* Polymorphic Types:


* Variables:
y : lst
n : natural

* Terms:
count y n : natural
Succ (count y n) : natural
count (insort (sort y) n) n : natural
@eq natural (count (sort y) n) (count y n) : Prop
@eq natural (count (insort (sort y) n) n) (Succ (count y n)) : Prop
sort y : lst
insort (sort y) n : lst
y : lst
lst : Set
count (sort y) n : natural
n : natural
natural : Set

* Functions:
sort  : forall _ : lst, lst
Succ  : forall _ : natural, natural
count  : forall (_ : lst) (_ : natural), natural
insort  : forall (_ : lst) (_ : natural), lst
@eq  : forall (A : Type) (_ : A) (_ : A), Prop

<---GENERALIZATION--->
Time elapsed: 2 seconds
Generalized Variables:
lf3 : natural = Succ (count y n)
lf1 : natural = count (insort (sort y) n) n
lf4 : natural = count y n
lf5 : lst = sort y
lf2 : lst = insort (sort y) n

Generalizations:
Lemma conj1: forall (lf1 : natural) (lf3 : natural), @eq natural lf1 lf3.
Lemma conj9: forall (lf2 : lst) (n : natural) (lf3 : natural), @eq natural (count lf2 n) lf3.
Lemma conj10: forall (lf5 : lst) (n : natural) (lf3 : natural), @eq natural (count (insort lf5 n) n) lf3.
Lemma conj12: forall (y : lst) (n : natural) (lf3 : natural), @eq natural (count (insort (sort y) n) n) lf3.
Lemma conj17: forall (lf4 : natural) (lf1 : natural), @eq natural lf1 (Succ lf4).
Lemma conj21: forall (lf1 : natural) (y : lst) (n : natural), @eq natural lf1 (Succ (count y n)).
Lemma conj25: forall (lf2 : lst) (lf4 : natural) (n : natural), @eq natural (count lf2 n) (Succ lf4).
Lemma conj26: forall (lf5 : lst) (lf4 : natural) (n : natural), @eq natural (count (insort lf5 n) n) (Succ lf4).
Lemma conj28: forall (lf4 : natural) (y : lst) (n : natural), @eq natural (count (insort (sort y) n) n) (Succ lf4).
Lemma conj29: forall (lf2 : lst) (y : lst) (n : natural), @eq natural (count lf2 n) (Succ (count y n)).
Lemma conj30: forall (lf5 : lst) (y : lst) (n : natural), @eq natural (count (insort lf5 n) n) (Succ (count y n)).
Lemma conj32: forall (y : lst) (n : natural), @eq natural (count (insort (sort y) n) n) (Succ (count y n)).


<---VALIDITY CHECKS--->
Time elapsed: 63 seconds
Valid:
Lemma conj32: forall (y : lst) (n : natural), @eq natural (count (insort (sort y) n) n) (Succ (count y n)).

Invalid:
Lemma conj30: forall (lf5 : lst) (y : lst) (n : natural), @eq natural (count (insort lf5 n) n) (Succ (count y n)).
Lemma conj29: forall (lf2 : lst) (y : lst) (n : natural), @eq natural (count lf2 n) (Succ (count y n)).
Lemma conj28: forall (lf4 : natural) (y : lst) (n : natural), @eq natural (count (insort (sort y) n) n) (Succ lf4).
Lemma conj26: forall (lf5 : lst) (lf4 : natural) (n : natural), @eq natural (count (insort lf5 n) n) (Succ lf4).
Lemma conj25: forall (lf2 : lst) (lf4 : natural) (n : natural), @eq natural (count lf2 n) (Succ lf4).
Lemma conj21: forall (lf1 : natural) (y : lst) (n : natural), @eq natural lf1 (Succ (count y n)).
Lemma conj17: forall (lf4 : natural) (lf1 : natural), @eq natural lf1 (Succ lf4).
Lemma conj12: forall (y : lst) (n : natural) (lf3 : natural), @eq natural (count (insort (sort y) n) n) lf3.
Lemma conj10: forall (lf5 : lst) (n : natural) (lf3 : natural), @eq natural (count (insort lf5 n) n) lf3.
Lemma conj9: forall (lf2 : lst) (n : natural) (lf3 : natural), @eq natural (count lf2 n) lf3.
Lemma conj1: forall (lf1 : natural) (lf3 : natural), @eq natural lf1 lf3.

<---ADD IMPLICATIONS--->
Time elapsed: 74 seconds
Generalizations:
Lemma conj30_imp: forall (lf5 : lst) (y : lst) (n : natural), forall _ : @eq natural (count lf5 n) (count y n),
@eq natural (count (insort lf5 n) n) (Succ (count y n)).
Lemma conj30: forall (lf5 : lst) (y : lst) (n : natural), @eq natural (count (insort lf5 n) n) (Succ (count y n)).
Lemma conj29: forall (lf2 : lst) (y : lst) (n : natural), @eq natural (count lf2 n) (Succ (count y n)).
Lemma conj28_imp: forall (lf4 : natural) (y : lst) (n : natural), forall _ : @eq natural (count (sort y) n) lf4,
@eq natural (count (insort (sort y) n) n) (Succ lf4).
Lemma conj28: forall (lf4 : natural) (y : lst) (n : natural), @eq natural (count (insort (sort y) n) n) (Succ lf4).
Lemma conj26_imp: forall (lf5 : lst) (lf4 : natural) (n : natural), forall _ : @eq natural (count lf5 n) lf4,
@eq natural (count (insort lf5 n) n) (Succ lf4).
Lemma conj26: forall (lf5 : lst) (lf4 : natural) (n : natural), @eq natural (count (insort lf5 n) n) (Succ lf4).
Lemma conj25: forall (lf2 : lst) (lf4 : natural) (n : natural), @eq natural (count lf2 n) (Succ lf4).
Lemma conj21: forall (lf1 : natural) (y : lst) (n : natural), @eq natural lf1 (Succ (count y n)).
Lemma conj17: forall (lf4 : natural) (lf1 : natural), @eq natural lf1 (Succ lf4).
Lemma conj12: forall (y : lst) (n : natural) (lf3 : natural), @eq natural (count (insort (sort y) n) n) lf3.
Lemma conj10: forall (lf5 : lst) (n : natural) (lf3 : natural), @eq natural (count (insort lf5 n) n) lf3.
Lemma conj9: forall (lf2 : lst) (n : natural) (lf3 : natural), @eq natural (count lf2 n) lf3.
Lemma conj1: forall (lf1 : natural) (lf3 : natural), @eq natural lf1 lf3.


<---VALIDITY CHECKS--->
Time elapsed: 94 seconds
Valid:
Lemma conj26_imp: forall (lf5 : lst) (lf4 : natural) (n : natural), forall _ : @eq natural (count lf5 n) lf4,
@eq natural (count (insort lf5 n) n) (Succ lf4).
Lemma conj28_imp: forall (lf4 : natural) (y : lst) (n : natural), forall _ : @eq natural (count (sort y) n) lf4,
@eq natural (count (insort (sort y) n) n) (Succ lf4).
Lemma conj30_imp: forall (lf5 : lst) (y : lst) (n : natural), forall _ : @eq natural (count lf5 n) (count y n),
@eq natural (count (insort lf5 n) n) (Succ (count y n)).

Invalid:
Lemma conj1: forall (lf1 : natural) (lf3 : natural), @eq natural lf1 lf3.
Lemma conj9: forall (lf2 : lst) (n : natural) (lf3 : natural), @eq natural (count lf2 n) lf3.
Lemma conj10: forall (lf5 : lst) (n : natural) (lf3 : natural), @eq natural (count (insort lf5 n) n) lf3.
Lemma conj12: forall (y : lst) (n : natural) (lf3 : natural), @eq natural (count (insort (sort y) n) n) lf3.
Lemma conj17: forall (lf4 : natural) (lf1 : natural), @eq natural lf1 (Succ lf4).
Lemma conj21: forall (lf1 : natural) (y : lst) (n : natural), @eq natural lf1 (Succ (count y n)).
Lemma conj25: forall (lf2 : lst) (lf4 : natural) (n : natural), @eq natural (count lf2 n) (Succ lf4).
Lemma conj26: forall (lf5 : lst) (lf4 : natural) (n : natural), @eq natural (count (insort lf5 n) n) (Succ lf4).
Lemma conj28: forall (lf4 : natural) (y : lst) (n : natural), @eq natural (count (insort (sort y) n) n) (Succ lf4).
Lemma conj29: forall (lf2 : lst) (y : lst) (n : natural), @eq natural (count lf2 n) (Succ (count y n)).
Lemma conj30: forall (lf5 : lst) (y : lst) (n : natural), @eq natural (count (insort lf5 n) n) (Succ (count y n)).


<---CREATE SKETCHES--->
Time elapsed: 95 seconds
Sketches:
Sketch conj9_sketch0 : @eq natural (##hole##) lf3
Sketch conj9_term_sketch0 : @eq natural (count lf2 n) (##hole##)
Sketch conj10_sketch0 : @eq natural (count (##hole##) n) lf3
Sketch conj10_sketch1 : @eq natural (##hole##) lf3
Sketch conj10_term_sketch0 : @eq lst (insort lf5 n) (##hole##)
Sketch conj10_term_sketch1 : @eq natural (count (insort lf5 n) n) (##hole##)
Sketch conj12_sketch0 : @eq natural (##hole##) lf3
Sketch conj12_sketch1 : @eq natural (count (insort (##hole##) n) n) lf3
Sketch conj12_sketch2 : @eq natural (count (##hole##) n) lf3
Sketch conj12_term_sketch0 : @eq natural (count (insort (sort y) n) n) (##hole##)
Sketch conj12_term_sketch1 : @eq lst (sort y) (##hole##)
Sketch conj12_term_sketch2 : @eq lst (insort (sort y) n) (##hole##)
Sketch conj17_sketch0 : @eq natural lf1 (##hole##)
Sketch conj17_term_sketch0 : @eq natural (Succ lf4) (##hole##)
Sketch conj21_sketch0 : @eq natural lf1 (Succ (##hole##))
Sketch conj21_sketch1 : @eq natural lf1 (##hole##)
Sketch conj21_term_sketch0 : @eq natural (count y n) (##hole##)
Sketch conj21_term_sketch1 : @eq natural (Succ (count y n)) (##hole##)
Sketch conj25_sketch0 : @eq natural (##hole##) (Succ lf4)
Sketch conj25_sketch1 : @eq natural (count lf2 n) (##hole##)
Sketch conj25_term_sketch0 : @eq natural (count lf2 n) (##hole##)
Sketch conj25_term_sketch1 : @eq natural (Succ lf4) (##hole##)
Sketch conj26_sketch0 : @eq natural (count (##hole##) n) (Succ lf4)
Sketch conj26_sketch1 : @eq natural (##hole##) (Succ lf4)
Sketch conj26_sketch2 : @eq natural (count (insort lf5 n) n) (##hole##)
Sketch conj26_term_sketch0 : @eq lst (insort lf5 n) (##hole##)
Sketch conj26_term_sketch1 : @eq natural (count (insort lf5 n) n) (##hole##)
Sketch conj26_term_sketch2 : @eq natural (Succ lf4) (##hole##)
Sketch conj28_sketch0 : @eq natural (##hole##) (Succ lf4)
Sketch conj28_sketch1 : @eq natural (count (insort (##hole##) n) n) (Succ lf4)
Sketch conj28_sketch2 : @eq natural (count (##hole##) n) (Succ lf4)
Sketch conj28_sketch3 : @eq natural (count (insort (sort y) n) n) (##hole##)
Sketch conj28_term_sketch0 : @eq natural (count (insort (sort y) n) n) (##hole##)
Sketch conj28_term_sketch1 : @eq lst (sort y) (##hole##)
Sketch conj28_term_sketch2 : @eq lst (insort (sort y) n) (##hole##)
Sketch conj28_term_sketch3 : @eq natural (Succ lf4) (##hole##)
Sketch conj29_sketch0 : @eq natural (count lf2 n) (Succ (##hole##))
Sketch conj29_sketch1 : @eq natural (##hole##) (Succ (count y n))
Sketch conj29_sketch2 : @eq natural (count lf2 n) (##hole##)
Sketch conj29_term_sketch0 : @eq natural (count y n) (##hole##)
Sketch conj29_term_sketch1 : @eq natural (count lf2 n) (##hole##)
Sketch conj29_term_sketch2 : @eq natural (Succ (count y n)) (##hole##)
Sketch conj30_sketch0 : @eq natural (count (insort lf5 n) n) (Succ (##hole##))
Sketch conj30_sketch1 : @eq natural (count (insort lf5 n) n) (##hole##)
Sketch conj30_sketch2 : @eq natural (count (##hole##) n) (Succ (count y n))
Sketch conj30_sketch3 : @eq natural (##hole##) (Succ (count y n))
Sketch conj30_term_sketch0 : @eq natural (count y n) (##hole##)
Sketch conj30_term_sketch1 : @eq natural (Succ (count y n)) (##hole##)
Sketch conj30_term_sketch2 : @eq lst (insort lf5 n) (##hole##)
Sketch conj30_term_sketch3 : @eq natural (count (insort lf5 n) n) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 532 seconds
Problems per Sketch:
Sketch conj30_sketch0 --> Problem  synth_17
Sketch conj12_sketch0 --> Problem  synth_1
Sketch conj28_sketch0 --> Problem  synth_11
Sketch conj26_term_sketch1 --> Problem  synth_5
Sketch conj26_sketch2 --> Problem  synth_5
Sketch conj25_sketch1 --> Problem  synth_2
Sketch conj17_sketch0 --> Problem  synth_10
Sketch conj10_term_sketch1 --> Problem  synth_5
Sketch conj30_sketch3 --> Problem  synth_7
Sketch conj29_term_sketch2 --> Problem  synth_7
Sketch conj25_term_sketch1 --> Problem  synth_11
Sketch conj30_sketch1 --> Problem  synth_5
Sketch conj26_sketch0 --> Problem  synth_14
Sketch conj30_term_sketch3 --> Problem  synth_5
Sketch conj17_term_sketch0 --> Problem  synth_11
Sketch conj28_term_sketch1 --> Problem  synth_8
Sketch conj21_term_sketch1 --> Problem  synth_7
Sketch conj12_term_sketch1 --> Problem  synth_8
Sketch conj9_sketch0 --> Problem  synth_1
Sketch conj26_term_sketch2 --> Problem  synth_11
Sketch conj12_term_sketch0 --> Problem  synth_7
Sketch conj26_sketch1 --> Problem  synth_11
Sketch conj30_sketch2 --> Problem  synth_9
Sketch conj29_term_sketch0 --> Problem  synth_13
Sketch conj28_term_sketch0 --> Problem  synth_7
Sketch conj10_sketch1 --> Problem  synth_1
Sketch conj9_term_sketch0 --> Problem  synth_2
Sketch conj28_term_sketch3 --> Problem  synth_11
Sketch conj12_sketch1 --> Problem  synth_6
Sketch conj21_term_sketch0 --> Problem  synth_13
Sketch conj30_term_sketch2 --> Problem  synth_4
Sketch conj12_sketch2 --> Problem  synth_3
Sketch conj10_term_sketch0 --> Problem  synth_4
Sketch conj29_sketch0 --> Problem  synth_16
Sketch conj28_sketch2 --> Problem  synth_14
Sketch conj28_sketch3 --> Problem  synth_7
Sketch conj25_sketch0 --> Problem  synth_11
Sketch conj21_sketch0 --> Problem  synth_12
Sketch conj26_term_sketch0 --> Problem  synth_4
Sketch conj30_term_sketch1 --> Problem  synth_7
Sketch conj28_sketch1 --> Problem  synth_15
Sketch conj21_sketch1 --> Problem  synth_10
Sketch conj28_term_sketch2 --> Problem  synth_9
Sketch conj30_term_sketch0 --> Problem  synth_13
Sketch conj29_term_sketch1 --> Problem  synth_2
Sketch conj12_term_sketch2 --> Problem  synth_9
Sketch conj29_sketch2 --> Problem  synth_2
Sketch conj25_term_sketch0 --> Problem  synth_2
Sketch conj10_sketch0 --> Problem  synth_3
Sketch conj29_sketch1 --> Problem  synth_7


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 647 seconds

Problem: synth_17
 count (sort (sort (sort lf5))) n
 if lfeqb n (Succ n) then Succ (count lf5 n) else count lf5 n
 count (insort lf5 (Succ n)) n
 count (sort (sort lf5)) n
 count (sort lf5) n
 count lf5 n

Problem: synth_9
 sort (insort (sort (sort y)) n)
 sort (sort (insort y n))
 sort (insort (sort y) n)
 insort (sort (sort y)) n
 sort (insort y n)
 insort (sort y) n

Problem: synth_13
 count (sort (sort (sort y))) n
 if lfeqb n (Succ n) then Succ (count y n) else count y n
 count (insort y (Succ n)) n
 count (sort (sort y)) n
 count (sort y) n
 count y n

Problem: synth_6

Problem: synth_11
 Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)
 Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)
 Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero)
 if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero
 if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero
 Succ lf4

Problem: synth_7
 count (insort (sort y) n) n
 Succ (count (sort y) n)
 if lfeqb n n then Succ (count (sort y) n) else count (sort y) n
 if lfeqb n n then Succ (count y n) else count y n
 count (insort y n) n
 Succ (count y n)

Problem: synth_4
 sort (sort (insort lf5 n))
 sort (insort (sort lf5) n)
 insort (sort (sort lf5)) n
 sort (insort lf5 n)
 insort (sort lf5) n
 insort lf5 n

Problem: synth_1
 Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero)
 Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero)
 Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero)
 Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero)
 Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)
 lf3

Problem: synth_16

Problem: synth_15

Problem: synth_14

Problem: synth_10
 Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero)
 Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero)
 Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero)
 Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero)
 Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)
 lf1

Problem: synth_8
 sort (sort (sort (sort (sort (sort y)))))
 sort (sort (sort (sort (sort y))))
 sort (sort (sort (sort y)))
 sort (sort (sort y))
 sort (sort y)
 sort y

Problem: synth_3

Problem: synth_12
 if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ Zero else Zero
 if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero
 if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero
 if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero
 if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero
 if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero

Problem: synth_5
 count (insort (sort lf5) n) n
 Succ (count (sort lf5) n)
 if lfeqb n n then Succ (count (sort lf5) n) else count (sort lf5) n
 if lfeqb n n then Succ (count lf5 n) else count lf5 n
 count (insort lf5 n) n
 Succ (count lf5 n)

Problem: synth_2
 count (sort (sort (sort lf2))) n
 if lfeqb n (Succ n) then Succ (count lf2 n) else count lf2 n
 count (insort lf2 (Succ n)) n
 count (sort (sort lf2)) n
 count (sort lf2) n
 count lf2 n

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 648 seconds
Lemmas:
Lemma candidate_1: forall (n : natural) (y : lst), @eq natural (count (insort (sort y) n) n) (Succ (count y n)).
Lemma candidate_2: forall (n : natural) (lf4 : natural) (lf5 : lst), forall _ : @eq natural (count lf5 n) lf4, @eq natural (count (insort lf5 n) n) (Succ lf4).
Lemma candidate_3: forall (n : natural) (y : lst) (lf4 : natural), forall _ : @eq natural (count (sort y) n) lf4, @eq natural (count (insort (sort y) n) n) (Succ lf4).
Lemma candidate_4: forall (n : natural) (y : lst) (lf5 : lst), forall _ : @eq natural (count lf5 n) (count y n), @eq natural (count (insort lf5 n) n) (Succ (count y n)).
Lemma candidate_5: forall (lf3 : natural), @eq natural   (Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero))   lf3.
Lemma candidate_6: forall (lf3 : natural), @eq natural   (Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero))   lf3.
Lemma candidate_7: forall (lf3 : natural), @eq natural   (Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero))   lf3.
Lemma candidate_8: forall (lf3 : natural), @eq natural   (Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero))   lf3.
Lemma candidate_9: forall (lf3 : natural), @eq natural   (Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero))   lf3.
Lemma candidate_10: forall (lf3 : natural), @eq natural (lf3) lf3.
Lemma candidate_11: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n) (count (sort (sort (sort lf2))) n).
Lemma candidate_12: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n)   (if lfeqb n (Succ n) then Succ (count lf2 n) else count lf2 n).
Lemma candidate_13: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n) (count (insort lf2 (Succ n)) n).
Lemma candidate_14: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n) (count (sort (sort lf2)) n).
Lemma candidate_15: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n) (count (sort lf2) n).
Lemma candidate_16: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n) (count lf2 n).
Lemma candidate_17: forall (lf3 : natural), @eq natural   (Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero))   lf3.
Lemma candidate_18: forall (lf3 : natural), @eq natural   (Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero))   lf3.
Lemma candidate_19: forall (lf3 : natural), @eq natural   (Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero))   lf3.
Lemma candidate_20: forall (lf3 : natural), @eq natural   (Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero))   lf3.
Lemma candidate_21: forall (lf3 : natural), @eq natural   (Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero))   lf3.
Lemma candidate_22: forall (lf3 : natural), @eq natural (lf3) lf3.
Lemma candidate_23: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (sort (sort (insort lf5 n))).
Lemma candidate_24: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (sort (insort (sort lf5) n)).
Lemma candidate_25: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (insort (sort (sort lf5)) n).
Lemma candidate_26: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (sort (insort lf5 n)).
Lemma candidate_27: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (insort (sort lf5) n).
Lemma candidate_28: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (insort lf5 n).
Lemma candidate_29: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n) (count (insort (sort lf5) n) n).
Lemma candidate_30: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n) (Succ (count (sort lf5) n)).
Lemma candidate_31: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n)   (if lfeqb n n then Succ (count (sort lf5) n) else count (sort lf5) n).
Lemma candidate_32: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n)   (if lfeqb n n then Succ (count lf5 n) else count lf5 n).
Lemma candidate_33: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n) (count (insort lf5 n) n).
Lemma candidate_34: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n) (Succ (count lf5 n)).
Lemma candidate_35: forall (lf3 : natural), @eq natural   (Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero))   lf3.
Lemma candidate_36: forall (lf3 : natural), @eq natural   (Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero))   lf3.
Lemma candidate_37: forall (lf3 : natural), @eq natural   (Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero))   lf3.
Lemma candidate_38: forall (lf3 : natural), @eq natural   (Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero))   lf3.
Lemma candidate_39: forall (lf3 : natural), @eq natural   (Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero))   lf3.
Lemma candidate_40: forall (lf3 : natural), @eq natural (lf3) lf3.
Lemma candidate_41: forall (n : natural) (y : lst), @eq natural (count (insort (sort y) n) n) (count (insort (sort y) n) n).
Lemma candidate_42: forall (n : natural) (y : lst), @eq natural (count (insort (sort y) n) n) (Succ (count (sort y) n)).
Lemma candidate_43: forall (n : natural) (y : lst), @eq natural (count (insort (sort y) n) n)   (if lfeqb n n then Succ (count (sort y) n) else count (sort y) n).
Lemma candidate_44: forall (n : natural) (y : lst), @eq natural (count (insort (sort y) n) n)   (if lfeqb n n then Succ (count y n) else count y n).
Lemma candidate_45: forall (n : natural) (y : lst), @eq natural (count (insort (sort y) n) n) (count (insort y n) n).
Lemma candidate_46: forall (n : natural) (y : lst), @eq natural (count (insort (sort y) n) n) (Succ (count y n)).
Lemma candidate_47: forall (y : lst), @eq lst (sort y) (sort (sort (sort (sort (sort (sort y)))))).
Lemma candidate_48: forall (y : lst), @eq lst (sort y) (sort (sort (sort (sort (sort y))))).
Lemma candidate_49: forall (y : lst), @eq lst (sort y) (sort (sort (sort (sort y)))).
Lemma candidate_50: forall (y : lst), @eq lst (sort y) (sort (sort (sort y))).
Lemma candidate_51: forall (y : lst), @eq lst (sort y) (sort (sort y)).
Lemma candidate_52: forall (y : lst), @eq lst (sort y) (sort y).
Lemma candidate_53: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (sort (insort (sort (sort y)) n)).
Lemma candidate_54: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (sort (sort (insort y n))).
Lemma candidate_55: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (sort (insort (sort y) n)).
Lemma candidate_56: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (insort (sort (sort y)) n).
Lemma candidate_57: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (sort (insort y n)).
Lemma candidate_58: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (insort (sort y) n).
Lemma candidate_59: forall (lf1 : natural), @eq natural lf1   (Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero)).
Lemma candidate_60: forall (lf1 : natural), @eq natural lf1   (Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero)).
Lemma candidate_61: forall (lf1 : natural), @eq natural lf1   (Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_62: forall (lf1 : natural), @eq natural lf1   (Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_63: forall (lf1 : natural), @eq natural lf1   (Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_64: forall (lf1 : natural), @eq natural lf1 (lf1).
Lemma candidate_65: forall (lf4 : natural), @eq natural (Succ lf4)   (Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_66: forall (lf4 : natural), @eq natural (Succ lf4)   (Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_67: forall (lf4 : natural), @eq natural (Succ lf4)   (Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_68: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero).
Lemma candidate_69: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_70: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_71: forall (lf1 : natural), @eq natural lf1   (Succ      (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ Zero else Zero)).
Lemma candidate_72: forall (lf1 : natural), @eq natural lf1   (Succ      (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero)).
Lemma candidate_73: forall (lf1 : natural), @eq natural lf1   (Succ      (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero)).
Lemma candidate_74: forall (lf1 : natural), @eq natural lf1   (Succ      (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_75: forall (lf1 : natural), @eq natural lf1   (Succ      (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_76: forall (lf1 : natural), @eq natural lf1   (Succ      (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_77: forall (lf1 : natural), @eq natural lf1   (Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero)).
Lemma candidate_78: forall (lf1 : natural), @eq natural lf1   (Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero)).
Lemma candidate_79: forall (lf1 : natural), @eq natural lf1   (Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_80: forall (lf1 : natural), @eq natural lf1   (Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_81: forall (lf1 : natural), @eq natural lf1   (Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_82: forall (lf1 : natural), @eq natural lf1 (lf1).
Lemma candidate_83: forall (n : natural) (y : lst), @eq natural (count y n) (count (sort (sort (sort y))) n).
Lemma candidate_84: forall (n : natural) (y : lst), @eq natural (count y n)   (if lfeqb n (Succ n) then Succ (count y n) else count y n).
Lemma candidate_85: forall (n : natural) (y : lst), @eq natural (count y n) (count (insort y (Succ n)) n).
Lemma candidate_86: forall (n : natural) (y : lst), @eq natural (count y n) (count (sort (sort y)) n).
Lemma candidate_87: forall (n : natural) (y : lst), @eq natural (count y n) (count (sort y) n).
Lemma candidate_88: forall (n : natural) (y : lst), @eq natural (count y n) (count y n).
Lemma candidate_89: forall (n : natural) (y : lst), @eq natural (Succ (count y n)) (count (insort (sort y) n) n).
Lemma candidate_90: forall (n : natural) (y : lst), @eq natural (Succ (count y n)) (Succ (count (sort y) n)).
Lemma candidate_91: forall (n : natural) (y : lst), @eq natural (Succ (count y n))   (if lfeqb n n then Succ (count (sort y) n) else count (sort y) n).
Lemma candidate_92: forall (n : natural) (y : lst), @eq natural (Succ (count y n))   (if lfeqb n n then Succ (count y n) else count y n).
Lemma candidate_93: forall (n : natural) (y : lst), @eq natural (Succ (count y n)) (count (insort y n) n).
Lemma candidate_94: forall (n : natural) (y : lst), @eq natural (Succ (count y n)) (Succ (count y n)).
Lemma candidate_95: forall (lf4 : natural), @eq natural   (Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero))   (Succ lf4).
Lemma candidate_96: forall (lf4 : natural), @eq natural   (Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero))   (Succ lf4).
Lemma candidate_97: forall (lf4 : natural), @eq natural   (Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero))   (Succ lf4).
Lemma candidate_98: forall (lf4 : natural), @eq natural   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero)   (Succ lf4).
Lemma candidate_99: forall (lf4 : natural), @eq natural   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero)   (Succ lf4).
Lemma candidate_100: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_101: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n) (count (sort (sort (sort lf2))) n).
Lemma candidate_102: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n)   (if lfeqb n (Succ n) then Succ (count lf2 n) else count lf2 n).
Lemma candidate_103: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n) (count (insort lf2 (Succ n)) n).
Lemma candidate_104: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n) (count (sort (sort lf2)) n).
Lemma candidate_105: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n) (count (sort lf2) n).
Lemma candidate_106: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n) (count lf2 n).
Lemma candidate_107: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n) (count (sort (sort (sort lf2))) n).
Lemma candidate_108: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n)   (if lfeqb n (Succ n) then Succ (count lf2 n) else count lf2 n).
Lemma candidate_109: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n) (count (insort lf2 (Succ n)) n).
Lemma candidate_110: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n) (count (sort (sort lf2)) n).
Lemma candidate_111: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n) (count (sort lf2) n).
Lemma candidate_112: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n) (count lf2 n).
Lemma candidate_113: forall (lf4 : natural), @eq natural (Succ lf4)   (Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_114: forall (lf4 : natural), @eq natural (Succ lf4)   (Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_115: forall (lf4 : natural), @eq natural (Succ lf4)   (Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_116: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero).
Lemma candidate_117: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_118: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_119: forall (lf4 : natural), @eq natural   (Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero))   (Succ lf4).
Lemma candidate_120: forall (lf4 : natural), @eq natural   (Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero))   (Succ lf4).
Lemma candidate_121: forall (lf4 : natural), @eq natural   (Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero))   (Succ lf4).
Lemma candidate_122: forall (lf4 : natural), @eq natural   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero)   (Succ lf4).
Lemma candidate_123: forall (lf4 : natural), @eq natural   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero)   (Succ lf4).
Lemma candidate_124: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_125: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n) (count (insort (sort lf5) n) n).
Lemma candidate_126: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n) (Succ (count (sort lf5) n)).
Lemma candidate_127: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n)   (if lfeqb n n then Succ (count (sort lf5) n) else count (sort lf5) n).
Lemma candidate_128: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n)   (if lfeqb n n then Succ (count lf5 n) else count lf5 n).
Lemma candidate_129: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n) (count (insort lf5 n) n).
Lemma candidate_130: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n) (Succ (count lf5 n)).
Lemma candidate_131: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (sort (sort (insort lf5 n))).
Lemma candidate_132: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (sort (insort (sort lf5) n)).
Lemma candidate_133: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (insort (sort (sort lf5)) n).
Lemma candidate_134: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (sort (insort lf5 n)).
Lemma candidate_135: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (insort (sort lf5) n).
Lemma candidate_136: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (insort lf5 n).
Lemma candidate_137: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n) (count (insort (sort lf5) n) n).
Lemma candidate_138: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n) (Succ (count (sort lf5) n)).
Lemma candidate_139: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n)   (if lfeqb n n then Succ (count (sort lf5) n) else count (sort lf5) n).
Lemma candidate_140: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n)   (if lfeqb n n then Succ (count lf5 n) else count lf5 n).
Lemma candidate_141: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n) (count (insort lf5 n) n).
Lemma candidate_142: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n) (Succ (count lf5 n)).
Lemma candidate_143: forall (lf4 : natural), @eq natural (Succ lf4)   (Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_144: forall (lf4 : natural), @eq natural (Succ lf4)   (Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_145: forall (lf4 : natural), @eq natural (Succ lf4)   (Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_146: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero).
Lemma candidate_147: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_148: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_149: forall (lf4 : natural), @eq natural   (Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero))   (Succ lf4).
Lemma candidate_150: forall (lf4 : natural), @eq natural   (Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero))   (Succ lf4).
Lemma candidate_151: forall (lf4 : natural), @eq natural   (Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero))   (Succ lf4).
Lemma candidate_152: forall (lf4 : natural), @eq natural   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero)   (Succ lf4).
Lemma candidate_153: forall (lf4 : natural), @eq natural   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero)   (Succ lf4).
Lemma candidate_154: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_155: forall (n : natural) (y : lst), @eq natural (count (insort (sort y) n) n) (count (insort (sort y) n) n).
Lemma candidate_156: forall (n : natural) (y : lst), @eq natural (count (insort (sort y) n) n) (Succ (count (sort y) n)).
Lemma candidate_157: forall (n : natural) (y : lst), @eq natural (count (insort (sort y) n) n)   (if lfeqb n n then Succ (count (sort y) n) else count (sort y) n).
Lemma candidate_158: forall (n : natural) (y : lst), @eq natural (count (insort (sort y) n) n)   (if lfeqb n n then Succ (count y n) else count y n).
Lemma candidate_159: forall (n : natural) (y : lst), @eq natural (count (insort (sort y) n) n) (count (insort y n) n).
Lemma candidate_160: forall (n : natural) (y : lst), @eq natural (count (insort (sort y) n) n) (Succ (count y n)).
Lemma candidate_161: forall (n : natural) (y : lst), @eq natural (count (insort (sort y) n) n) (count (insort (sort y) n) n).
Lemma candidate_162: forall (n : natural) (y : lst), @eq natural (count (insort (sort y) n) n) (Succ (count (sort y) n)).
Lemma candidate_163: forall (n : natural) (y : lst), @eq natural (count (insort (sort y) n) n)   (if lfeqb n n then Succ (count (sort y) n) else count (sort y) n).
Lemma candidate_164: forall (n : natural) (y : lst), @eq natural (count (insort (sort y) n) n)   (if lfeqb n n then Succ (count y n) else count y n).
Lemma candidate_165: forall (n : natural) (y : lst), @eq natural (count (insort (sort y) n) n) (count (insort y n) n).
Lemma candidate_166: forall (n : natural) (y : lst), @eq natural (count (insort (sort y) n) n) (Succ (count y n)).
Lemma candidate_167: forall (y : lst), @eq lst (sort y) (sort (sort (sort (sort (sort (sort y)))))).
Lemma candidate_168: forall (y : lst), @eq lst (sort y) (sort (sort (sort (sort (sort y))))).
Lemma candidate_169: forall (y : lst), @eq lst (sort y) (sort (sort (sort (sort y)))).
Lemma candidate_170: forall (y : lst), @eq lst (sort y) (sort (sort (sort y))).
Lemma candidate_171: forall (y : lst), @eq lst (sort y) (sort (sort y)).
Lemma candidate_172: forall (y : lst), @eq lst (sort y) (sort y).
Lemma candidate_173: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (sort (insort (sort (sort y)) n)).
Lemma candidate_174: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (sort (sort (insort y n))).
Lemma candidate_175: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (sort (insort (sort y) n)).
Lemma candidate_176: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (insort (sort (sort y)) n).
Lemma candidate_177: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (sort (insort y n)).
Lemma candidate_178: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (insort (sort y) n).
Lemma candidate_179: forall (lf4 : natural), @eq natural (Succ lf4)   (Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_180: forall (lf4 : natural), @eq natural (Succ lf4)   (Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_181: forall (lf4 : natural), @eq natural (Succ lf4)   (Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_182: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero).
Lemma candidate_183: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_184: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_185: forall (n : natural) (y : lst), @eq natural (count (insort (sort y) n) n) (Succ (count y n)).
Lemma candidate_186: forall (n : natural) (y : lst), @eq natural (Succ (count (sort y) n)) (Succ (count y n)).
Lemma candidate_187: forall (n : natural) (y : lst), @eq natural (if lfeqb n n then Succ (count (sort y) n) else count (sort y) n)   (Succ (count y n)).
Lemma candidate_188: forall (n : natural) (y : lst), @eq natural (if lfeqb n n then Succ (count y n) else count y n)   (Succ (count y n)).
Lemma candidate_189: forall (n : natural) (y : lst), @eq natural (count (insort y n) n) (Succ (count y n)).
Lemma candidate_190: forall (n : natural) (y : lst), @eq natural (Succ (count y n)) (Succ (count y n)).
Lemma candidate_191: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n) (count (sort (sort (sort lf2))) n).
Lemma candidate_192: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n)   (if lfeqb n (Succ n) then Succ (count lf2 n) else count lf2 n).
Lemma candidate_193: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n) (count (insort lf2 (Succ n)) n).
Lemma candidate_194: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n) (count (sort (sort lf2)) n).
Lemma candidate_195: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n) (count (sort lf2) n).
Lemma candidate_196: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n) (count lf2 n).
Lemma candidate_197: forall (n : natural) (y : lst), @eq natural (count y n) (count (sort (sort (sort y))) n).
Lemma candidate_198: forall (n : natural) (y : lst), @eq natural (count y n)   (if lfeqb n (Succ n) then Succ (count y n) else count y n).
Lemma candidate_199: forall (n : natural) (y : lst), @eq natural (count y n) (count (insort y (Succ n)) n).
Lemma candidate_200: forall (n : natural) (y : lst), @eq natural (count y n) (count (sort (sort y)) n).
Lemma candidate_201: forall (n : natural) (y : lst), @eq natural (count y n) (count (sort y) n).
Lemma candidate_202: forall (n : natural) (y : lst), @eq natural (count y n) (count y n).
Lemma candidate_203: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n) (count (sort (sort (sort lf2))) n).
Lemma candidate_204: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n)   (if lfeqb n (Succ n) then Succ (count lf2 n) else count lf2 n).
Lemma candidate_205: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n) (count (insort lf2 (Succ n)) n).
Lemma candidate_206: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n) (count (sort (sort lf2)) n).
Lemma candidate_207: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n) (count (sort lf2) n).
Lemma candidate_208: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n) (count lf2 n).
Lemma candidate_209: forall (n : natural) (y : lst), @eq natural (Succ (count y n)) (count (insort (sort y) n) n).
Lemma candidate_210: forall (n : natural) (y : lst), @eq natural (Succ (count y n)) (Succ (count (sort y) n)).
Lemma candidate_211: forall (n : natural) (y : lst), @eq natural (Succ (count y n))   (if lfeqb n n then Succ (count (sort y) n) else count (sort y) n).
Lemma candidate_212: forall (n : natural) (y : lst), @eq natural (Succ (count y n))   (if lfeqb n n then Succ (count y n) else count y n).
Lemma candidate_213: forall (n : natural) (y : lst), @eq natural (Succ (count y n)) (count (insort y n) n).
Lemma candidate_214: forall (n : natural) (y : lst), @eq natural (Succ (count y n)) (Succ (count y n)).
Lemma candidate_215: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n)   (Succ (count (sort (sort (sort lf5))) n)).
Lemma candidate_216: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n)   (Succ (if lfeqb n (Succ n) then Succ (count lf5 n) else count lf5 n)).
Lemma candidate_217: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n) (Succ (count (insort lf5 (Succ n)) n)).
Lemma candidate_218: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n) (Succ (count (sort (sort lf5)) n)).
Lemma candidate_219: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n) (Succ (count (sort lf5) n)).
Lemma candidate_220: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n) (Succ (count lf5 n)).
Lemma candidate_221: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n) (count (insort (sort lf5) n) n).
Lemma candidate_222: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n) (Succ (count (sort lf5) n)).
Lemma candidate_223: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n)   (if lfeqb n n then Succ (count (sort lf5) n) else count (sort lf5) n).
Lemma candidate_224: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n)   (if lfeqb n n then Succ (count lf5 n) else count lf5 n).
Lemma candidate_225: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n) (count (insort lf5 n) n).
Lemma candidate_226: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n) (Succ (count lf5 n)).
Lemma candidate_227: forall (n : natural) (y : lst), @eq natural (count (sort (insort (sort (sort y)) n)) n) (Succ (count y n)).
Lemma candidate_228: forall (n : natural) (y : lst), @eq natural (count (sort (sort (insort y n))) n) (Succ (count y n)).
Lemma candidate_229: forall (n : natural) (y : lst), @eq natural (count (sort (insort (sort y) n)) n) (Succ (count y n)).
Lemma candidate_230: forall (n : natural) (y : lst), @eq natural (count (insort (sort (sort y)) n) n) (Succ (count y n)).
Lemma candidate_231: forall (n : natural) (y : lst), @eq natural (count (sort (insort y n)) n) (Succ (count y n)).
Lemma candidate_232: forall (n : natural) (y : lst), @eq natural (count (insort (sort y) n) n) (Succ (count y n)).
Lemma candidate_233: forall (n : natural) (y : lst), @eq natural (count (insort (sort y) n) n) (Succ (count y n)).
Lemma candidate_234: forall (n : natural) (y : lst), @eq natural (Succ (count (sort y) n)) (Succ (count y n)).
Lemma candidate_235: forall (n : natural) (y : lst), @eq natural (if lfeqb n n then Succ (count (sort y) n) else count (sort y) n)   (Succ (count y n)).
Lemma candidate_236: forall (n : natural) (y : lst), @eq natural (if lfeqb n n then Succ (count y n) else count y n)   (Succ (count y n)).
Lemma candidate_237: forall (n : natural) (y : lst), @eq natural (count (insort y n) n) (Succ (count y n)).
Lemma candidate_238: forall (n : natural) (y : lst), @eq natural (Succ (count y n)) (Succ (count y n)).
Lemma candidate_239: forall (n : natural) (y : lst), @eq natural (count y n) (count (sort (sort (sort y))) n).
Lemma candidate_240: forall (n : natural) (y : lst), @eq natural (count y n)   (if lfeqb n (Succ n) then Succ (count y n) else count y n).
Lemma candidate_241: forall (n : natural) (y : lst), @eq natural (count y n) (count (insort y (Succ n)) n).
Lemma candidate_242: forall (n : natural) (y : lst), @eq natural (count y n) (count (sort (sort y)) n).
Lemma candidate_243: forall (n : natural) (y : lst), @eq natural (count y n) (count (sort y) n).
Lemma candidate_244: forall (n : natural) (y : lst), @eq natural (count y n) (count y n).
Lemma candidate_245: forall (n : natural) (y : lst), @eq natural (Succ (count y n)) (count (insort (sort y) n) n).
Lemma candidate_246: forall (n : natural) (y : lst), @eq natural (Succ (count y n)) (Succ (count (sort y) n)).
Lemma candidate_247: forall (n : natural) (y : lst), @eq natural (Succ (count y n))   (if lfeqb n n then Succ (count (sort y) n) else count (sort y) n).
Lemma candidate_248: forall (n : natural) (y : lst), @eq natural (Succ (count y n))   (if lfeqb n n then Succ (count y n) else count y n).
Lemma candidate_249: forall (n : natural) (y : lst), @eq natural (Succ (count y n)) (count (insort y n) n).
Lemma candidate_250: forall (n : natural) (y : lst), @eq natural (Succ (count y n)) (Succ (count y n)).
Lemma candidate_251: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (sort (sort (insort lf5 n))).
Lemma candidate_252: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (sort (insort (sort lf5) n)).
Lemma candidate_253: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (insort (sort (sort lf5)) n).
Lemma candidate_254: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (sort (insort lf5 n)).
Lemma candidate_255: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (insort (sort lf5) n).
Lemma candidate_256: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (insort lf5 n).
Lemma candidate_257: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n) (count (insort (sort lf5) n) n).
Lemma candidate_258: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n) (Succ (count (sort lf5) n)).
Lemma candidate_259: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n)   (if lfeqb n n then Succ (count (sort lf5) n) else count (sort lf5) n).
Lemma candidate_260: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n)   (if lfeqb n n then Succ (count lf5 n) else count lf5 n).
Lemma candidate_261: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n) (count (insort lf5 n) n).
Lemma candidate_262: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n) (Succ (count lf5 n)).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 927 seconds
Duplicates removed: 170
Filtered by Quickchick: 30
Filtered by script: 15
Remaining: 47

Lemmas: 
Lemma candidate_51: forall (y : lst), @eq lst (sort y) (sort (sort y)).
Lemma candidate_50: forall (y : lst), @eq lst (sort y) (sort (sort (sort y))).
Lemma candidate_49: forall (y : lst), @eq lst (sort y) (sort (sort (sort (sort y)))).
Lemma candidate_57: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (sort (insort y n)).
Lemma candidate_86: forall (n : natural) (y : lst), @eq natural (count y n) (count (sort (sort y)) n).
Lemma candidate_189: forall (n : natural) (y : lst), @eq natural (count (insort y n) n) (Succ (count y n)).
Lemma candidate_93: forall (n : natural) (y : lst), @eq natural (Succ (count y n)) (count (insort y n) n).
Lemma candidate_85: forall (n : natural) (y : lst), @eq natural (count y n) (count (insort y (Succ n)) n).
Lemma candidate_48: forall (y : lst), @eq lst (sort y) (sort (sort (sort (sort (sort y))))).
Lemma candidate_14: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n) (count (sort (sort lf2)) n).
Lemma candidate_56: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (insort (sort (sort y)) n).
Lemma candidate_55: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (sort (insort (sort y) n)).
Lemma candidate_54: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (sort (sort (insort y n))).
Lemma candidate_83: forall (n : natural) (y : lst), @eq natural (count y n) (count (sort (sort (sort y))) n).
Lemma candidate_34: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n) (Succ (count lf5 n)).
Lemma candidate_13: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n) (count (insort lf2 (Succ n)) n).
Lemma candidate_231: forall (n : natural) (y : lst), @eq natural (count (sort (insort y n)) n) (Succ (count y n)).
Lemma candidate_89: forall (n : natural) (y : lst), @eq natural (Succ (count y n)) (count (insort (sort y) n) n).
Lemma candidate_47: forall (y : lst), @eq lst (sort y) (sort (sort (sort (sort (sort (sort y)))))).
Lemma candidate_11: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n) (count (sort (sort (sort lf2))) n).
Lemma candidate_53: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (sort (insort (sort (sort y)) n)).
Lemma candidate_45: forall (n : natural) (y : lst), @eq natural (count (insort (sort y) n) n) (count (insort y n) n).
Lemma candidate_30: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n) (Succ (count (sort lf5) n)).
Lemma candidate_230: forall (n : natural) (y : lst), @eq natural (count (insort (sort (sort y)) n) n) (Succ (count y n)).
Lemma candidate_229: forall (n : natural) (y : lst), @eq natural (count (sort (insort (sort y) n)) n) (Succ (count y n)).
Lemma candidate_228: forall (n : natural) (y : lst), @eq natural (count (sort (sort (insort y n))) n) (Succ (count y n)).
Lemma candidate_42: forall (n : natural) (y : lst), @eq natural (count (insort (sort y) n) n) (Succ (count (sort y) n)).
Lemma candidate_29: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n) (count (insort (sort lf5) n) n).
Lemma candidate_218: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n) (Succ (count (sort (sort lf5)) n)).
Lemma candidate_227: forall (n : natural) (y : lst), @eq natural (count (sort (insort (sort (sort y)) n)) n) (Succ (count y n)).
Lemma candidate_217: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n) (Succ (count (insort lf5 (Succ n)) n)).
Lemma candidate_215: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n)   (Succ (count (sort (sort (sort lf5))) n)).
Lemma candidate_188: forall (n : natural) (y : lst), @eq natural (if lfeqb n n then Succ (count y n) else count y n)   (Succ (count y n)).
Lemma candidate_92: forall (n : natural) (y : lst), @eq natural (Succ (count y n))   (if lfeqb n n then Succ (count y n) else count y n).
Lemma candidate_84: forall (n : natural) (y : lst), @eq natural (count y n)   (if lfeqb n (Succ n) then Succ (count y n) else count y n).
Lemma candidate_2: forall (n : natural) (lf4 : natural) (lf5 : lst), forall _ : @eq natural (count lf5 n) lf4, @eq natural (count (insort lf5 n) n) (Succ lf4).
Lemma candidate_12: forall (n : natural) (lf2 : lst), @eq natural (count lf2 n)   (if lfeqb n (Succ n) then Succ (count lf2 n) else count lf2 n).
Lemma candidate_32: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n)   (if lfeqb n n then Succ (count lf5 n) else count lf5 n).
Lemma candidate_44: forall (n : natural) (y : lst), @eq natural (count (insort (sort y) n) n)   (if lfeqb n n then Succ (count y n) else count y n).
Lemma candidate_187: forall (n : natural) (y : lst), @eq natural (if lfeqb n n then Succ (count (sort y) n) else count (sort y) n)   (Succ (count y n)).
Lemma candidate_91: forall (n : natural) (y : lst), @eq natural (Succ (count y n))   (if lfeqb n n then Succ (count (sort y) n) else count (sort y) n).
Lemma candidate_3: forall (n : natural) (y : lst) (lf4 : natural), forall _ : @eq natural (count (sort y) n) lf4, @eq natural (count (insort (sort y) n) n) (Succ lf4).
Lemma candidate_4: forall (n : natural) (y : lst) (lf5 : lst), forall _ : @eq natural (count lf5 n) (count y n), @eq natural (count (insort lf5 n) n) (Succ (count y n)).
Lemma candidate_216: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n)   (Succ (if lfeqb n (Succ n) then Succ (count lf5 n) else count lf5 n)).
Lemma candidate_31: forall (n : natural) (lf5 : lst), @eq natural (count (insort lf5 n) n)   (if lfeqb n n then Succ (count (sort lf5) n) else count (sort lf5) n).
Lemma candidate_43: forall (n : natural) (y : lst), @eq natural (count (insort (sort y) n) n)   (if lfeqb n n then Succ (count (sort y) n) else count (sort y) n).
Lemma candidate_69: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero).