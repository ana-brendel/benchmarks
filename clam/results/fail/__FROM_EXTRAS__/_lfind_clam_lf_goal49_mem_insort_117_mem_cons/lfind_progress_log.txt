File Information
- File name: goal49
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal49_mem_insort_117_mem_cons
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal49_mem_insort_117_mem_cons
- Namespace: adtind
- Proof name: mem_insort
- Theorem: Theorem mem_insort: forall (x0 n1 : natural) (l0 : lst)
  (_ : @eq bool (mem x0 (insort n1 l0)) true),
or (@eq natural x0 n1) (@eq bool (mem x0 l0) true).
- Declarations: 
From lfind Require Import LFind.
Require Import Arith.

Proof Context
* Goal State: or (@eq natural x n) (@eq bool (mem x (Cons n0 l)) true)

* Hypothesis:
x : natural
H : @eq bool (mem x (Cons n0 (insort n l))) true
IHl : forall _ : @eq bool (mem x (insort n l)) true,
or (@eq natural x n) (@eq bool (mem x l) true)
l : lst
n : natural
n0 : natural

* Types:
Set
natural
Prop
lst
bool

* Polymorphic Types:


* Variables:
x : natural
l : lst
n : natural
n0 : natural

* Terms:
@eq bool (mem x (Cons n0 (insort n l))) true : Prop
@eq bool (mem x (insort n l)) true : Prop
x : natural
@eq bool (mem x l) true : Prop
@eq bool (mem x (Cons n0 l)) true : Prop
or (@eq natural x n) (@eq bool (mem x (Cons n0 l)) true) : Prop
@eq natural x n : Prop
mem x l : bool
true : bool
l : lst
mem x (insort n l) : bool
mem x (Cons n0 (insort n l)) : bool
bool : Set
Cons n0 (insort n l) : lst
Cons n0 l : lst
lst : Set
natural : Set
n : natural
or (@eq natural x n) (@eq bool (mem x l) true) : Prop
forall _ : @eq bool (mem x (insort n l)) true,
or (@eq natural x n) (@eq bool (mem x l) true) : Prop
n0 : natural
insort n l : lst
mem x (Cons n0 l) : bool

* Functions:
mem  : forall (_ : natural) (_ : lst), bool
Cons  : forall (_ : natural) (_ : lst), lst
@eq  : forall (A : Type) (_ : A) (_ : A), Prop
insort  : forall (_ : natural) (_ : lst), lst
or  : forall (_ : Prop) (_ : Prop), Prop

<---GENERALIZATION--->
Time elapsed: 132 seconds
Generalized Variables:
lf3 : bool = true
lf1 : bool = mem x (Cons n0 l)
lf2 : lst = Cons n0 l

Generalizations:
Lemma conj1: forall (x : natural) (lf1 : bool) (n : natural) (lf3 : bool), or (@eq natural x n) (@eq bool lf1 lf3).
Lemma conj3: forall (lf2 : lst) (x : natural) (n : natural) (lf3 : bool), or (@eq natural x n) (@eq bool (mem x lf2) lf3).
Lemma conj4: forall (x : natural) (l : lst) (n : natural) (n0 : natural) (lf3 : bool), or (@eq natural x n) (@eq bool (mem x (Cons n0 l)) lf3).
Lemma conj5: forall (x : natural) (lf1 : bool) (n : natural), or (@eq natural x n) (@eq bool lf1 true).
Lemma conj7: forall (lf2 : lst) (x : natural) (n : natural), or (@eq natural x n) (@eq bool (mem x lf2) true).
Lemma conj8: forall (x : natural) (l : lst) (n : natural) (n0 : natural), or (@eq natural x n) (@eq bool (mem x (Cons n0 l)) true).


<---VALIDITY CHECKS--->
Time elapsed: 174 seconds
Valid:

Invalid:
Lemma conj8: forall (x : natural) (l : lst) (n : natural) (n0 : natural), or (@eq natural x n) (@eq bool (mem x (Cons n0 l)) true).
Lemma conj7: forall (lf2 : lst) (x : natural) (n : natural), or (@eq natural x n) (@eq bool (mem x lf2) true).
Lemma conj5: forall (x : natural) (lf1 : bool) (n : natural), or (@eq natural x n) (@eq bool lf1 true).
Lemma conj4: forall (x : natural) (l : lst) (n : natural) (n0 : natural) (lf3 : bool), or (@eq natural x n) (@eq bool (mem x (Cons n0 l)) lf3).
Lemma conj3: forall (lf2 : lst) (x : natural) (n : natural) (lf3 : bool), or (@eq natural x n) (@eq bool (mem x lf2) lf3).
Lemma conj1: forall (x : natural) (lf1 : bool) (n : natural) (lf3 : bool), or (@eq natural x n) (@eq bool lf1 lf3).

<---ADD IMPLICATIONS--->
Time elapsed: 187 seconds
Generalizations:
Lemma conj8: forall (x : natural) (l : lst) (n : natural) (n0 : natural), or (@eq natural x n) (@eq bool (mem x (Cons n0 l)) true).
Lemma conj8_imp: forall (x : natural) (l : lst) (n : natural) (n0 : natural), forall _ : @eq bool (mem x (Cons n0 (insort n l))) true,
or (@eq natural x n) (@eq bool (mem x (Cons n0 l)) true).
Lemma conj7: forall (lf2 : lst) (x : natural) (n : natural), or (@eq natural x n) (@eq bool (mem x lf2) true).
Lemma conj5: forall (x : natural) (lf1 : bool) (n : natural), or (@eq natural x n) (@eq bool lf1 true).
Lemma conj4: forall (x : natural) (l : lst) (n : natural) (n0 : natural) (lf3 : bool), or (@eq natural x n) (@eq bool (mem x (Cons n0 l)) lf3).
Lemma conj4_imp: forall (x : natural) (l : lst) (n : natural) (n0 : natural) (lf3 : bool), forall _ : @eq bool (mem x (Cons n0 (insort n l))) lf3,
or (@eq natural x n) (@eq bool (mem x (Cons n0 l)) lf3).
Lemma conj3: forall (lf2 : lst) (x : natural) (n : natural) (lf3 : bool), or (@eq natural x n) (@eq bool (mem x lf2) lf3).
Lemma conj1: forall (x : natural) (lf1 : bool) (n : natural) (lf3 : bool), or (@eq natural x n) (@eq bool lf1 lf3).


<---VALIDITY CHECKS--->
Time elapsed: 199 seconds
Valid:
Lemma conj4_imp: forall (x : natural) (l : lst) (n : natural) (n0 : natural) (lf3 : bool), forall _ : @eq bool (mem x (Cons n0 (insort n l))) lf3,
or (@eq natural x n) (@eq bool (mem x (Cons n0 l)) lf3).
Lemma conj8_imp: forall (x : natural) (l : lst) (n : natural) (n0 : natural), forall _ : @eq bool (mem x (Cons n0 (insort n l))) true,
or (@eq natural x n) (@eq bool (mem x (Cons n0 l)) true).

Invalid:
Lemma conj1: forall (x : natural) (lf1 : bool) (n : natural) (lf3 : bool), or (@eq natural x n) (@eq bool lf1 lf3).
Lemma conj3: forall (lf2 : lst) (x : natural) (n : natural) (lf3 : bool), or (@eq natural x n) (@eq bool (mem x lf2) lf3).
Lemma conj4: forall (x : natural) (l : lst) (n : natural) (n0 : natural) (lf3 : bool), or (@eq natural x n) (@eq bool (mem x (Cons n0 l)) lf3).
Lemma conj5: forall (x : natural) (lf1 : bool) (n : natural), or (@eq natural x n) (@eq bool lf1 true).
Lemma conj7: forall (lf2 : lst) (x : natural) (n : natural), or (@eq natural x n) (@eq bool (mem x lf2) true).
Lemma conj8: forall (x : natural) (l : lst) (n : natural) (n0 : natural), or (@eq natural x n) (@eq bool (mem x (Cons n0 l)) true).


<---CREATE SKETCHES--->
Time elapsed: 199 seconds
Sketches:
Sketch conj3_sketch0 : or (@eq natural x n) (@eq bool (##hole##) lf3)
Sketch conj3_term_sketch0 : @eq bool (mem x lf2) (##hole##)
Sketch conj4_sketch0 : or (@eq natural x n) (@eq bool (mem x (##hole##)) lf3)
Sketch conj4_sketch1 : or (@eq natural x n) (@eq bool (##hole##) lf3)
Sketch conj4_term_sketch0 : @eq lst (Cons n0 l) (##hole##)
Sketch conj4_term_sketch1 : @eq bool (mem x (Cons n0 l)) (##hole##)
Sketch conj5_sketch0 : or (@eq natural x n) (@eq bool lf1 (##hole##))
Sketch conj5_term_sketch0 : @eq bool true (##hole##)
Sketch conj7_sketch0 : or (@eq natural x n) (@eq bool (mem x lf2) (##hole##))
Sketch conj7_sketch1 : or (@eq natural x n) (@eq bool (##hole##) true)
Sketch conj7_term_sketch0 : @eq bool true (##hole##)
Sketch conj7_term_sketch1 : @eq bool (mem x lf2) (##hole##)
Sketch conj8_sketch0 : or (@eq natural x n) (@eq bool (mem x (##hole##)) true)
Sketch conj8_sketch1 : or (@eq natural x n) (@eq bool (mem x (Cons n0 l)) (##hole##))
Sketch conj8_sketch2 : or (@eq natural x n) (@eq bool (##hole##) true)
Sketch conj8_term_sketch0 : @eq lst (Cons n0 l) (##hole##)
Sketch conj8_term_sketch1 : @eq bool true (##hole##)
Sketch conj8_term_sketch2 : @eq bool (mem x (Cons n0 l)) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 396 seconds
Problems per Sketch:
Sketch conj7_sketch1 --> Problem  synth_9
Sketch conj5_sketch0 --> Problem  synth_6
Sketch conj3_term_sketch0 --> Problem  synth_2
Sketch conj7_term_sketch0 --> Problem  synth_7
Sketch conj8_sketch1 --> Problem  synth_11
Sketch conj7_sketch0 --> Problem  synth_8
Sketch conj4_sketch0 --> Problem  synth_3
Sketch conj4_sketch1 --> Problem  synth_1
Sketch conj4_term_sketch1 --> Problem  synth_5
Sketch conj8_term_sketch0 --> Problem  synth_4
Sketch conj3_sketch0 --> Problem  synth_1
Sketch conj8_sketch2 --> Problem  synth_9
Sketch conj8_sketch0 --> Problem  synth_10
Sketch conj7_term_sketch1 --> Problem  synth_2
Sketch conj8_term_sketch1 --> Problem  synth_7
Sketch conj4_term_sketch0 --> Problem  synth_4
Sketch conj8_term_sketch2 --> Problem  synth_5
Sketch conj5_term_sketch0 --> Problem  synth_7


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 488 seconds

Problem: synth_10

Problem: synth_8
 orb (lfeqb x x) false
 less n (Succ n)
 less x (Succ x)
 lfeqb n n
 lfeqb x x
 true

Problem: synth_3

Problem: synth_9

Problem: synth_6
 orb (lfeqb x x) false
 less n (Succ n)
 less x (Succ x)
 lfeqb n n
 lfeqb x x
 true

Problem: synth_11
 less n (Succ n)
 less x (Succ x)
 lfeqb n0 n0
 lfeqb n n
 lfeqb x x
 true

Problem: synth_7
 true

Problem: synth_5
 mem x (insort n0 (sort (sort l)))
 mem x (sort (insort n0 l))
 mem x (insort n0 (sort l))
 orb (lfeqb x n0) (mem x (sort l))
 mem x (insort n0 l)
 orb (lfeqb x n0) (mem x l)

Problem: synth_4
 Cons n0 l

Problem: synth_1

Problem: synth_2
 mem x (sort (sort (sort lf2)))
 mem x (insort (Succ x) lf2)
 orb (lfeqb x (Succ x)) (mem x lf2)
 mem x (sort (sort lf2))
 mem x (sort lf2)
 mem x lf2

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 489 seconds
Lemmas:
Lemma candidate_1: forall (lf3 : bool) (n0 : natural) (n : natural) (l : lst) (x : natural), forall _ : @eq bool (mem x (Cons n0 (insort n l))) lf3, or (@eq natural x n) (@eq bool (mem x (Cons n0 l)) lf3).
Lemma candidate_2: forall (n0 : natural) (n : natural) (l : lst) (x : natural), forall _ : @eq bool (mem x (Cons n0 (insort n l))) true, or (@eq natural x n) (@eq bool (mem x (Cons n0 l)) true).
Lemma candidate_3: forall (x : natural) (lf2 : lst), @eq bool (mem x lf2) (mem x (sort (sort (sort lf2)))).
Lemma candidate_4: forall (x : natural) (lf2 : lst), @eq bool (mem x lf2) (mem x (insort (Succ x) lf2)).
Lemma candidate_5: forall (x : natural) (lf2 : lst), @eq bool (mem x lf2) (orb (lfeqb x (Succ x)) (mem x lf2)).
Lemma candidate_6: forall (x : natural) (lf2 : lst), @eq bool (mem x lf2) (mem x (sort (sort lf2))).
Lemma candidate_7: forall (x : natural) (lf2 : lst), @eq bool (mem x lf2) (mem x (sort lf2)).
Lemma candidate_8: forall (x : natural) (lf2 : lst), @eq bool (mem x lf2) (mem x lf2).
Lemma candidate_9: forall (n0 : natural) (l : lst), @eq lst (Cons n0 l) (Cons n0 l).
Lemma candidate_10: forall (n0 : natural) (l : lst) (x : natural), @eq bool (mem x (Cons n0 l)) (mem x (insort n0 (sort (sort l)))).
Lemma candidate_11: forall (n0 : natural) (l : lst) (x : natural), @eq bool (mem x (Cons n0 l)) (mem x (sort (insort n0 l))).
Lemma candidate_12: forall (n0 : natural) (l : lst) (x : natural), @eq bool (mem x (Cons n0 l)) (mem x (insort n0 (sort l))).
Lemma candidate_13: forall (n0 : natural) (l : lst) (x : natural), @eq bool (mem x (Cons n0 l)) (orb (lfeqb x n0) (mem x (sort l))).
Lemma candidate_14: forall (n0 : natural) (l : lst) (x : natural), @eq bool (mem x (Cons n0 l)) (mem x (insort n0 l)).
Lemma candidate_15: forall (n0 : natural) (l : lst) (x : natural), @eq bool (mem x (Cons n0 l)) (orb (lfeqb x n0) (mem x l)).
Lemma candidate_16: forall (n : natural) (lf1 : bool) (x : natural), or (@eq natural x n) (@eq bool lf1 (orb (lfeqb x x) false)).
Lemma candidate_17: forall (n : natural) (lf1 : bool) (x : natural), or (@eq natural x n) (@eq bool lf1 (less n (Succ n))).
Lemma candidate_18: forall (n : natural) (lf1 : bool) (x : natural), or (@eq natural x n) (@eq bool lf1 (less x (Succ x))).
Lemma candidate_19: forall (n : natural) (lf1 : bool) (x : natural), or (@eq natural x n) (@eq bool lf1 (lfeqb n n)).
Lemma candidate_20: forall (n : natural) (lf1 : bool) (x : natural), or (@eq natural x n) (@eq bool lf1 (lfeqb x x)).
Lemma candidate_21: forall (n : natural) (lf1 : bool) (x : natural), or (@eq natural x n) (@eq bool lf1 (true)).
Lemma candidate_22: @eq bool true (true).
Lemma candidate_23: forall (n : natural) (x : natural) (lf2 : lst), or (@eq natural x n) (@eq bool (mem x lf2) (orb (lfeqb x x) false)).
Lemma candidate_24: forall (n : natural) (x : natural) (lf2 : lst), or (@eq natural x n) (@eq bool (mem x lf2) (less n (Succ n))).
Lemma candidate_25: forall (n : natural) (x : natural) (lf2 : lst), or (@eq natural x n) (@eq bool (mem x lf2) (less x (Succ x))).
Lemma candidate_26: forall (n : natural) (x : natural) (lf2 : lst), or (@eq natural x n) (@eq bool (mem x lf2) (lfeqb n n)).
Lemma candidate_27: forall (n : natural) (x : natural) (lf2 : lst), or (@eq natural x n) (@eq bool (mem x lf2) (lfeqb x x)).
Lemma candidate_28: forall (n : natural) (x : natural) (lf2 : lst), or (@eq natural x n) (@eq bool (mem x lf2) (true)).
Lemma candidate_29: @eq bool true (true).
Lemma candidate_30: forall (x : natural) (lf2 : lst), @eq bool (mem x lf2) (mem x (sort (sort (sort lf2)))).
Lemma candidate_31: forall (x : natural) (lf2 : lst), @eq bool (mem x lf2) (mem x (insort (Succ x) lf2)).
Lemma candidate_32: forall (x : natural) (lf2 : lst), @eq bool (mem x lf2) (orb (lfeqb x (Succ x)) (mem x lf2)).
Lemma candidate_33: forall (x : natural) (lf2 : lst), @eq bool (mem x lf2) (mem x (sort (sort lf2))).
Lemma candidate_34: forall (x : natural) (lf2 : lst), @eq bool (mem x lf2) (mem x (sort lf2)).
Lemma candidate_35: forall (x : natural) (lf2 : lst), @eq bool (mem x lf2) (mem x lf2).
Lemma candidate_36: forall (n0 : natural) (l : lst) (n : natural) (x : natural), or (@eq natural x n) (@eq bool (mem x (Cons n0 l)) (less n (Succ n))).
Lemma candidate_37: forall (n0 : natural) (l : lst) (n : natural) (x : natural), or (@eq natural x n) (@eq bool (mem x (Cons n0 l)) (less x (Succ x))).
Lemma candidate_38: forall (n0 : natural) (l : lst) (n : natural) (x : natural), or (@eq natural x n) (@eq bool (mem x (Cons n0 l)) (lfeqb n0 n0)).
Lemma candidate_39: forall (n0 : natural) (l : lst) (n : natural) (x : natural), or (@eq natural x n) (@eq bool (mem x (Cons n0 l)) (lfeqb n n)).
Lemma candidate_40: forall (n0 : natural) (l : lst) (n : natural) (x : natural), or (@eq natural x n) (@eq bool (mem x (Cons n0 l)) (lfeqb x x)).
Lemma candidate_41: forall (n0 : natural) (l : lst) (n : natural) (x : natural), or (@eq natural x n) (@eq bool (mem x (Cons n0 l)) (true)).
Lemma candidate_42: forall (n0 : natural) (l : lst), @eq lst (Cons n0 l) (Cons n0 l).
Lemma candidate_43: @eq bool true (true).
Lemma candidate_44: forall (n0 : natural) (l : lst) (x : natural), @eq bool (mem x (Cons n0 l)) (mem x (insort n0 (sort (sort l)))).
Lemma candidate_45: forall (n0 : natural) (l : lst) (x : natural), @eq bool (mem x (Cons n0 l)) (mem x (sort (insort n0 l))).
Lemma candidate_46: forall (n0 : natural) (l : lst) (x : natural), @eq bool (mem x (Cons n0 l)) (mem x (insort n0 (sort l))).
Lemma candidate_47: forall (n0 : natural) (l : lst) (x : natural), @eq bool (mem x (Cons n0 l)) (orb (lfeqb x n0) (mem x (sort l))).
Lemma candidate_48: forall (n0 : natural) (l : lst) (x : natural), @eq bool (mem x (Cons n0 l)) (mem x (insort n0 l)).
Lemma candidate_49: forall (n0 : natural) (l : lst) (x : natural), @eq bool (mem x (Cons n0 l)) (orb (lfeqb x n0) (mem x l)).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 552 seconds
Duplicates removed: 15
Filtered by Quickchick: 18
Filtered by script: 4
Remaining: 12

Lemmas: 
Lemma candidate_7: forall (x : natural) (lf2 : lst), @eq bool (mem x lf2) (mem x (sort lf2)).
Lemma candidate_6: forall (x : natural) (lf2 : lst), @eq bool (mem x lf2) (mem x (sort (sort lf2))).
Lemma candidate_14: forall (n0 : natural) (l : lst) (x : natural), @eq bool (mem x (Cons n0 l)) (mem x (insort n0 l)).
Lemma candidate_4: forall (x : natural) (lf2 : lst), @eq bool (mem x lf2) (mem x (insort (Succ x) lf2)).
Lemma candidate_3: forall (x : natural) (lf2 : lst), @eq bool (mem x lf2) (mem x (sort (sort (sort lf2)))).
Lemma candidate_12: forall (n0 : natural) (l : lst) (x : natural), @eq bool (mem x (Cons n0 l)) (mem x (insort n0 (sort l))).
Lemma candidate_11: forall (n0 : natural) (l : lst) (x : natural), @eq bool (mem x (Cons n0 l)) (mem x (sort (insort n0 l))).
Lemma candidate_5: forall (x : natural) (lf2 : lst), @eq bool (mem x lf2) (orb (lfeqb x (Succ x)) (mem x lf2)).
Lemma candidate_13: forall (n0 : natural) (l : lst) (x : natural), @eq bool (mem x (Cons n0 l)) (orb (lfeqb x n0) (mem x (sort l))).
Lemma candidate_10: forall (n0 : natural) (l : lst) (x : natural), @eq bool (mem x (Cons n0 l)) (mem x (insort n0 (sort (sort l)))).
Lemma candidate_1: forall (lf3 : bool) (n0 : natural) (n : natural) (l : lst) (x : natural), forall _ : @eq bool (mem x (Cons n0 (insort n l))) lf3, or (@eq natural x n) (@eq bool (mem x (Cons n0 l)) lf3).
Lemma candidate_2: forall (n0 : natural) (n : natural) (l : lst) (x : natural), forall _ : @eq bool (mem x (Cons n0 (insort n l))) true, or (@eq natural x n) (@eq bool (mem x (Cons n0 l)) true).