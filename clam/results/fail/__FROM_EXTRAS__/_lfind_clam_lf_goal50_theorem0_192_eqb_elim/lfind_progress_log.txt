File Information
- File name: goal50
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal50_theorem0_192_eqb_elim
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal50_theorem0_192_eqb_elim
- Namespace: adtind
- Proof name: theorem0
- Theorem: Theorem theorem0: forall (x0 : natural) (y0 : lst),
@eq natural (count (sort y0) x0) (count y0 x0).
- Declarations: 
From lfind Require Import LFind.
Require Import Arith.

Proof Context
* Goal State: @eq natural (count (insort (sort y) n) x) (Succ (count y x))

* Hypothesis:
x : natural
y : lst
n : natural
E : Bool.Is_true (lfeqb x n)
IHy : @eq natural (count (sort y) x) (count y x)

* Types:
Set
natural
Prop
lst
bool

* Polymorphic Types:


* Variables:
x : natural
y : lst
n : natural

* Terms:
@eq natural (count (sort y) x) (count y x) : Prop
Bool.Is_true (lfeqb x n) : Prop
count (insort (sort y) n) x : natural
x : natural
sort y : lst
count (sort y) x : natural
insort (sort y) n : lst
@eq natural (count (insort (sort y) n) x) (Succ (count y x)) : Prop
count y x : natural
y : lst
lst : Set
lfeqb x n : bool
natural : Set
n : natural
Succ (count y x) : natural

* Functions:
sort  : forall _ : lst, lst
Succ  : forall _ : natural, natural
count  : forall (_ : lst) (_ : natural), natural
lfeqb  : forall (_ : natural) (_ : natural), bool
Bool.Is_true  : forall _ : bool, Prop
insort  : forall (_ : lst) (_ : natural), lst
@eq  : forall (A : Type) (_ : A) (_ : A), Prop

<---GENERALIZATION--->
Time elapsed: 121 seconds
Generalized Variables:
lf3 : natural = Succ (count y x)
lf1 : natural = count (insort (sort y) n) x
lf4 : natural = count y x
lf5 : lst = sort y
lf2 : lst = insort (sort y) n

Generalizations:
Lemma conj1: forall (lf1 : natural) (lf3 : natural), @eq natural lf1 lf3.
Lemma conj9: forall (lf2 : lst) (x : natural) (lf3 : natural), @eq natural (count lf2 x) lf3.
Lemma conj10: forall (lf5 : lst) (x : natural) (n : natural) (lf3 : natural), @eq natural (count (insort lf5 n) x) lf3.
Lemma conj12: forall (x : natural) (y : lst) (n : natural) (lf3 : natural), @eq natural (count (insort (sort y) n) x) lf3.
Lemma conj17: forall (lf4 : natural) (lf1 : natural), @eq natural lf1 (Succ lf4).
Lemma conj21: forall (x : natural) (lf1 : natural) (y : lst), @eq natural lf1 (Succ (count y x)).
Lemma conj25: forall (lf2 : lst) (x : natural) (lf4 : natural), @eq natural (count lf2 x) (Succ lf4).
Lemma conj26: forall (lf5 : lst) (x : natural) (lf4 : natural) (n : natural), @eq natural (count (insort lf5 n) x) (Succ lf4).
Lemma conj28: forall (x : natural) (lf4 : natural) (y : lst) (n : natural), @eq natural (count (insort (sort y) n) x) (Succ lf4).
Lemma conj29: forall (lf2 : lst) (x : natural) (y : lst), @eq natural (count lf2 x) (Succ (count y x)).
Lemma conj30: forall (lf5 : lst) (x : natural) (y : lst) (n : natural), @eq natural (count (insort lf5 n) x) (Succ (count y x)).
Lemma conj32: forall (x : natural) (y : lst) (n : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y x)).


<---VALIDITY CHECKS--->
Time elapsed: 184 seconds
Valid:

Invalid:
Lemma conj32: forall (x : natural) (y : lst) (n : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y x)).
Lemma conj30: forall (lf5 : lst) (x : natural) (y : lst) (n : natural), @eq natural (count (insort lf5 n) x) (Succ (count y x)).
Lemma conj29: forall (lf2 : lst) (x : natural) (y : lst), @eq natural (count lf2 x) (Succ (count y x)).
Lemma conj28: forall (x : natural) (lf4 : natural) (y : lst) (n : natural), @eq natural (count (insort (sort y) n) x) (Succ lf4).
Lemma conj26: forall (lf5 : lst) (x : natural) (lf4 : natural) (n : natural), @eq natural (count (insort lf5 n) x) (Succ lf4).
Lemma conj25: forall (lf2 : lst) (x : natural) (lf4 : natural), @eq natural (count lf2 x) (Succ lf4).
Lemma conj21: forall (x : natural) (lf1 : natural) (y : lst), @eq natural lf1 (Succ (count y x)).
Lemma conj17: forall (lf4 : natural) (lf1 : natural), @eq natural lf1 (Succ lf4).
Lemma conj12: forall (x : natural) (y : lst) (n : natural) (lf3 : natural), @eq natural (count (insort (sort y) n) x) lf3.
Lemma conj10: forall (lf5 : lst) (x : natural) (n : natural) (lf3 : natural), @eq natural (count (insort lf5 n) x) lf3.
Lemma conj9: forall (lf2 : lst) (x : natural) (lf3 : natural), @eq natural (count lf2 x) lf3.
Lemma conj1: forall (lf1 : natural) (lf3 : natural), @eq natural lf1 lf3.

<---ADD IMPLICATIONS--->
Time elapsed: 207 seconds
Generalizations:
Lemma conj32: forall (x : natural) (y : lst) (n : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y x)).
Lemma conj30: forall (lf5 : lst) (x : natural) (y : lst) (n : natural), @eq natural (count (insort lf5 n) x) (Succ (count y x)).
Lemma conj30_imp: forall (lf5 : lst) (x : natural) (y : lst) (n : natural), forall _ : @eq natural (count lf5 x) (count y x),
@eq natural (count (insort lf5 n) x) (Succ (count y x)).
Lemma conj29: forall (lf2 : lst) (x : natural) (y : lst), @eq natural (count lf2 x) (Succ (count y x)).
Lemma conj28: forall (x : natural) (lf4 : natural) (y : lst) (n : natural), @eq natural (count (insort (sort y) n) x) (Succ lf4).
Lemma conj26: forall (lf5 : lst) (x : natural) (lf4 : natural) (n : natural), @eq natural (count (insort lf5 n) x) (Succ lf4).
Lemma conj26_imp: forall (lf5 : lst) (x : natural) (lf4 : natural) (n : natural), forall _ : @eq natural (count lf5 x) lf4,
@eq natural (count (insort lf5 n) x) (Succ lf4).
Lemma conj25: forall (lf2 : lst) (x : natural) (lf4 : natural), @eq natural (count lf2 x) (Succ lf4).
Lemma conj21: forall (x : natural) (lf1 : natural) (y : lst), @eq natural lf1 (Succ (count y x)).
Lemma conj17: forall (lf4 : natural) (lf1 : natural), @eq natural lf1 (Succ lf4).
Lemma conj12: forall (x : natural) (y : lst) (n : natural) (lf3 : natural), @eq natural (count (insort (sort y) n) x) lf3.
Lemma conj10: forall (lf5 : lst) (x : natural) (n : natural) (lf3 : natural), @eq natural (count (insort lf5 n) x) lf3.
Lemma conj9: forall (lf2 : lst) (x : natural) (lf3 : natural), @eq natural (count lf2 x) lf3.
Lemma conj1: forall (lf1 : natural) (lf3 : natural), @eq natural lf1 lf3.


<---VALIDITY CHECKS--->
Time elapsed: 229 seconds
Valid:

Invalid:
Lemma conj1: forall (lf1 : natural) (lf3 : natural), @eq natural lf1 lf3.
Lemma conj9: forall (lf2 : lst) (x : natural) (lf3 : natural), @eq natural (count lf2 x) lf3.
Lemma conj10: forall (lf5 : lst) (x : natural) (n : natural) (lf3 : natural), @eq natural (count (insort lf5 n) x) lf3.
Lemma conj12: forall (x : natural) (y : lst) (n : natural) (lf3 : natural), @eq natural (count (insort (sort y) n) x) lf3.
Lemma conj17: forall (lf4 : natural) (lf1 : natural), @eq natural lf1 (Succ lf4).
Lemma conj21: forall (x : natural) (lf1 : natural) (y : lst), @eq natural lf1 (Succ (count y x)).
Lemma conj25: forall (lf2 : lst) (x : natural) (lf4 : natural), @eq natural (count lf2 x) (Succ lf4).
Lemma conj26_imp: forall (lf5 : lst) (x : natural) (lf4 : natural) (n : natural), forall _ : @eq natural (count lf5 x) lf4,
@eq natural (count (insort lf5 n) x) (Succ lf4).
Lemma conj26: forall (lf5 : lst) (x : natural) (lf4 : natural) (n : natural), @eq natural (count (insort lf5 n) x) (Succ lf4).
Lemma conj28: forall (x : natural) (lf4 : natural) (y : lst) (n : natural), @eq natural (count (insort (sort y) n) x) (Succ lf4).
Lemma conj29: forall (lf2 : lst) (x : natural) (y : lst), @eq natural (count lf2 x) (Succ (count y x)).
Lemma conj30_imp: forall (lf5 : lst) (x : natural) (y : lst) (n : natural), forall _ : @eq natural (count lf5 x) (count y x),
@eq natural (count (insort lf5 n) x) (Succ (count y x)).
Lemma conj30: forall (lf5 : lst) (x : natural) (y : lst) (n : natural), @eq natural (count (insort lf5 n) x) (Succ (count y x)).
Lemma conj32: forall (x : natural) (y : lst) (n : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y x)).


<---CREATE SKETCHES--->
Time elapsed: 229 seconds
Sketches:
Sketch conj9_sketch0 : @eq natural (##hole##) lf3
Sketch conj9_term_sketch0 : @eq natural (count lf2 x) (##hole##)
Sketch conj10_sketch0 : @eq natural (count (##hole##) x) lf3
Sketch conj10_sketch1 : @eq natural (##hole##) lf3
Sketch conj10_term_sketch0 : @eq lst (insort lf5 n) (##hole##)
Sketch conj10_term_sketch1 : @eq natural (count (insort lf5 n) x) (##hole##)
Sketch conj12_sketch0 : @eq natural (##hole##) lf3
Sketch conj12_sketch1 : @eq natural (count (insort (##hole##) n) x) lf3
Sketch conj12_sketch2 : @eq natural (count (##hole##) x) lf3
Sketch conj12_term_sketch0 : @eq natural (count (insort (sort y) n) x) (##hole##)
Sketch conj12_term_sketch1 : @eq lst (sort y) (##hole##)
Sketch conj12_term_sketch2 : @eq lst (insort (sort y) n) (##hole##)
Sketch conj17_sketch0 : @eq natural lf1 (##hole##)
Sketch conj17_term_sketch0 : @eq natural (Succ lf4) (##hole##)
Sketch conj21_sketch0 : @eq natural lf1 (Succ (##hole##))
Sketch conj21_sketch1 : @eq natural lf1 (##hole##)
Sketch conj21_term_sketch0 : @eq natural (count y x) (##hole##)
Sketch conj21_term_sketch1 : @eq natural (Succ (count y x)) (##hole##)
Sketch conj25_sketch0 : @eq natural (count lf2 x) (##hole##)
Sketch conj25_sketch1 : @eq natural (##hole##) (Succ lf4)
Sketch conj25_term_sketch0 : @eq natural (Succ lf4) (##hole##)
Sketch conj25_term_sketch1 : @eq natural (count lf2 x) (##hole##)
Sketch conj26_imp_sketch0 : forall _ : @eq natural (##hole##) lf4,
@eq natural (count (insort lf5 n) x) (Succ lf4)
Sketch conj26_imp_sketch1 : forall _ : @eq natural (count lf5 x) lf4,
@eq natural (count (##hole##) x) (Succ lf4)
Sketch conj26_imp_sketch2 : forall _ : @eq natural (count lf5 x) lf4,
@eq natural (count (insort lf5 n) x) (##hole##)
Sketch conj26_imp_sketch3 : forall _ : @eq natural (count lf5 x) lf4, @eq natural (##hole##) (Succ lf4)
Sketch conj26_imp_term_sketch0 : @eq natural (count lf5 x) (##hole##)
Sketch conj26_imp_term_sketch1 : @eq lst (insort lf5 n) (##hole##)
Sketch conj26_imp_term_sketch2 : @eq natural (Succ lf4) (##hole##)
Sketch conj26_imp_term_sketch3 : @eq natural (count (insort lf5 n) x) (##hole##)
Sketch conj26_sketch0 : @eq natural (count (##hole##) x) (Succ lf4)
Sketch conj26_sketch1 : @eq natural (count (insort lf5 n) x) (##hole##)
Sketch conj26_sketch2 : @eq natural (##hole##) (Succ lf4)
Sketch conj26_term_sketch0 : @eq lst (insort lf5 n) (##hole##)
Sketch conj26_term_sketch1 : @eq natural (Succ lf4) (##hole##)
Sketch conj26_term_sketch2 : @eq natural (count (insort lf5 n) x) (##hole##)
Sketch conj28_sketch0 : @eq natural (##hole##) (Succ lf4)
Sketch conj28_sketch1 : @eq natural (count (insort (##hole##) n) x) (Succ lf4)
Sketch conj28_sketch2 : @eq natural (count (##hole##) x) (Succ lf4)
Sketch conj28_sketch3 : @eq natural (count (insort (sort y) n) x) (##hole##)
Sketch conj28_term_sketch0 : @eq natural (count (insort (sort y) n) x) (##hole##)
Sketch conj28_term_sketch1 : @eq lst (sort y) (##hole##)
Sketch conj28_term_sketch2 : @eq lst (insort (sort y) n) (##hole##)
Sketch conj28_term_sketch3 : @eq natural (Succ lf4) (##hole##)
Sketch conj29_sketch0 : @eq natural (count lf2 x) (Succ (##hole##))
Sketch conj29_sketch1 : @eq natural (count lf2 x) (##hole##)
Sketch conj29_sketch2 : @eq natural (##hole##) (Succ (count y x))
Sketch conj29_term_sketch0 : @eq natural (count y x) (##hole##)
Sketch conj29_term_sketch1 : @eq natural (Succ (count y x)) (##hole##)
Sketch conj29_term_sketch2 : @eq natural (count lf2 x) (##hole##)
Sketch conj30_imp_sketch0 : forall _ : @eq natural (##hole##) (count y x),
@eq natural (count (insort lf5 n) x) (Succ (count y x))
Sketch conj30_imp_sketch1 : forall _ : @eq natural (count lf5 x) (##hole##),
@eq natural (count (insort lf5 n) x) (Succ (##hole##))
Sketch conj30_imp_sketch2 : forall _ : @eq natural (count lf5 x) (count y x),
@eq natural (count (##hole##) x) (Succ (count y x))
Sketch conj30_imp_sketch3 : forall _ : @eq natural (count lf5 x) (count y x),
@eq natural (count (insort lf5 n) x) (##hole##)
Sketch conj30_imp_sketch4 : forall _ : @eq natural (count lf5 x) (count y x),
@eq natural (##hole##) (Succ (count y x))
Sketch conj30_imp_term_sketch0 : @eq natural (count lf5 x) (##hole##)
Sketch conj30_imp_term_sketch1 : @eq natural (count y x) (##hole##)
Sketch conj30_imp_term_sketch2 : @eq lst (insort lf5 n) (##hole##)
Sketch conj30_imp_term_sketch3 : @eq natural (Succ (count y x)) (##hole##)
Sketch conj30_imp_term_sketch4 : @eq natural (count (insort lf5 n) x) (##hole##)
Sketch conj30_sketch0 : @eq natural (count (insort lf5 n) x) (Succ (##hole##))
Sketch conj30_sketch1 : @eq natural (count (##hole##) x) (Succ (count y x))
Sketch conj30_sketch2 : @eq natural (count (insort lf5 n) x) (##hole##)
Sketch conj30_sketch3 : @eq natural (##hole##) (Succ (count y x))
Sketch conj30_term_sketch0 : @eq natural (count y x) (##hole##)
Sketch conj30_term_sketch1 : @eq lst (insort lf5 n) (##hole##)
Sketch conj30_term_sketch2 : @eq natural (Succ (count y x)) (##hole##)
Sketch conj30_term_sketch3 : @eq natural (count (insort lf5 n) x) (##hole##)
Sketch conj32_sketch0 : @eq natural (##hole##) (Succ (count y x))
Sketch conj32_sketch1 : @eq natural (count (insort (##hole##) n) x) (Succ (count y x))
Sketch conj32_sketch2 : @eq natural (count (##hole##) x) (Succ (count y x))
Sketch conj32_sketch3 : @eq natural (count (insort (sort y) n) x) (Succ (##hole##))
Sketch conj32_sketch4 : @eq natural (count (insort (sort y) n) x) (##hole##)
Sketch conj32_term_sketch0 : @eq natural (count (insort (sort y) n) x) (##hole##)
Sketch conj32_term_sketch1 : @eq lst (sort y) (##hole##)
Sketch conj32_term_sketch2 : @eq lst (insort (sort y) n) (##hole##)
Sketch conj32_term_sketch3 : @eq natural (count y x) (##hole##)
Sketch conj32_term_sketch4 : @eq natural (Succ (count y x)) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 944 seconds
Problems per Sketch:
Sketch conj30_imp_sketch3 --> Problem  synth_26
Sketch conj32_term_sketch4 --> Problem  synth_14
Sketch conj30_sketch0 --> Problem  synth_24
Sketch conj12_sketch0 --> Problem  synth_1
Sketch conj28_sketch0 --> Problem  synth_11
Sketch conj26_sketch2 --> Problem  synth_11
Sketch conj25_sketch1 --> Problem  synth_11
Sketch conj29_term_sketch2 --> Problem  synth_2
Sketch conj30_term_sketch3 --> Problem  synth_5
Sketch conj17_term_sketch0 --> Problem  synth_11
Sketch conj28_term_sketch1 --> Problem  synth_8
Sketch conj21_term_sketch1 --> Problem  synth_14
Sketch conj26_imp_term_sketch1 --> Problem  synth_4
Sketch conj26_term_sketch2 --> Problem  synth_5
Sketch conj12_term_sketch0 --> Problem  synth_7
Sketch conj32_sketch0 --> Problem  synth_14
Sketch conj30_sketch2 --> Problem  synth_5
Sketch conj30_imp_term_sketch0 --> Problem  synth_19
Sketch conj30_imp_sketch1 --> Problem  synth_24
Sketch conj10_sketch1 --> Problem  synth_1
Sketch conj9_term_sketch0 --> Problem  synth_2
Sketch conj28_term_sketch3 --> Problem  synth_11
Sketch conj26_imp_sketch1 --> Problem  synth_16
Sketch conj12_sketch1 --> Problem  synth_6
Sketch conj30_imp_term_sketch2 --> Problem  synth_4
Sketch conj12_sketch2 --> Problem  synth_3
Sketch conj32_sketch3 --> Problem  synth_30
Sketch conj32_term_sketch3 --> Problem  synth_13
Sketch conj29_sketch0 --> Problem  synth_22
Sketch conj28_sketch2 --> Problem  synth_20
Sketch conj21_sketch0 --> Problem  synth_12
Sketch conj26_term_sketch0 --> Problem  synth_4
Sketch conj30_term_sketch1 --> Problem  synth_4
Sketch conj26_imp_sketch3 --> Problem  synth_18
Sketch conj30_imp_term_sketch3 --> Problem  synth_14
Sketch conj30_imp_term_sketch1 --> Problem  synth_13
Sketch conj28_term_sketch2 --> Problem  synth_9
Sketch conj30_term_sketch0 --> Problem  synth_13
Sketch conj32_term_sketch2 --> Problem  synth_9
Sketch conj29_term_sketch1 --> Problem  synth_14
Sketch conj12_term_sketch2 --> Problem  synth_9
Sketch conj10_sketch0 --> Problem  synth_3
Sketch conj29_sketch1 --> Problem  synth_2
Sketch conj32_sketch2 --> Problem  synth_28
Sketch conj26_imp_term_sketch3 --> Problem  synth_5
Sketch conj32_sketch1 --> Problem  synth_29
Sketch conj26_term_sketch1 --> Problem  synth_11
Sketch conj17_sketch0 --> Problem  synth_10
Sketch conj10_term_sketch1 --> Problem  synth_5
Sketch conj30_sketch3 --> Problem  synth_14
Sketch conj25_term_sketch1 --> Problem  synth_2
Sketch conj30_sketch1 --> Problem  synth_28
Sketch conj26_sketch0 --> Problem  synth_20
Sketch conj26_imp_term_sketch2 --> Problem  synth_11
Sketch conj30_imp_term_sketch4 --> Problem  synth_5
Sketch conj26_imp_sketch0 --> Problem  synth_15
Sketch conj12_term_sketch1 --> Problem  synth_8
Sketch conj9_sketch0 --> Problem  synth_1
Sketch conj26_sketch1 --> Problem  synth_5
Sketch conj29_term_sketch0 --> Problem  synth_13
Sketch conj28_term_sketch0 --> Problem  synth_7
Sketch conj32_term_sketch0 --> Problem  synth_7
Sketch conj21_term_sketch0 --> Problem  synth_13
Sketch conj30_term_sketch2 --> Problem  synth_14
Sketch conj10_term_sketch0 --> Problem  synth_4
Sketch conj26_imp_sketch2 --> Problem  synth_17
Sketch conj28_sketch3 --> Problem  synth_7
Sketch conj25_sketch0 --> Problem  synth_2
Sketch conj28_sketch1 --> Problem  synth_21
Sketch conj32_sketch4 --> Problem  synth_7
Sketch conj21_sketch1 --> Problem  synth_10
Sketch conj32_term_sketch1 --> Problem  synth_8
Sketch conj30_imp_sketch2 --> Problem  synth_25
Sketch conj30_imp_sketch0 --> Problem  synth_23
Sketch conj30_imp_sketch4 --> Problem  synth_27
Sketch conj26_imp_term_sketch0 --> Problem  synth_19
Sketch conj29_sketch2 --> Problem  synth_14
Sketch conj25_term_sketch0 --> Problem  synth_11


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 1088 seconds

Problem: synth_28
 sort (insort (sort (sort y)) x)
 sort (sort (insort y x))
 sort (insort (sort y) x)
 insort (sort (sort y)) x
 sort (insort y x)
 insort (sort y) x

Problem: synth_22

Problem: synth_20

Problem: synth_18
 Succ (count (sort lf5) x)
 if lfeqb x x then Succ (count (sort lf5) x) else count (sort lf5) x
 if lfeqb x x then Succ (count lf5 x) else count lf5 x
 count (insort lf5 x) x
 Succ (count lf5 x)
 Succ lf4

Problem: synth_17
 if lfeqb x x then Succ (count lf5 x) else count lf5 x
 count (insort lf5 n) x
 count (insort lf5 x) x
 Succ (count lf5 n)
 Succ (count lf5 x)
 Succ lf4

Problem: synth_29
 sort (sort (sort (sort (sort y))))
 sort (sort (sort (sort y)))
 sort (sort (sort y))
 sort (sort y)
 sort y

Problem: synth_21

Problem: synth_26
 count (insort y x) x
 count (insort lf5 x) x
 Succ (count y n)
 Succ (count lf5 n)
 Succ (count y x)
 Succ (count lf5 x)

Problem: synth_9
 sort (insort (sort (sort y)) n)
 sort (sort (insort y n))
 sort (insort (sort y) n)
 insort (sort (sort y)) n
 sort (insort y n)
 insort (sort y) n

Problem: synth_25
 insort (sort (sort lf5)) x
 sort (insort y x)
 sort (insort lf5 x)
 insort (sort y) x
 insort (sort lf5) x
 insort lf5 x

Problem: synth_13
 count y (count (sort y) (count y x))
 count y (count y (count y x))
 count (insort y (Succ x)) x
 count (sort (sort y)) x
 count (sort y) x
 count y x

Problem: synth_6

Problem: synth_30
 count (insort y (Succ x)) x
 count (sort (sort y)) x
 count (sort y) n
 count (sort y) x
 count y n
 count y x

Problem: synth_11
 Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)
 Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)
 Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero)
 if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero
 if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero
 Succ lf4

Problem: synth_7
 if lfeqb x n then Succ (count y x) else count y x
 if lfeqb x x then Succ (count y x) else count y x
 count (insort y n) x
 count (insort y x) x
 Succ (count y n)
 Succ (count y x)

Problem: synth_4
 sort (sort (insort lf5 n))
 sort (insort (sort lf5) n)
 insort (sort (sort lf5)) n
 sort (insort lf5 n)
 insort (sort lf5) n
 insort lf5 n

Problem: synth_1
 Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero)
 Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero)
 Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero)
 Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero)
 Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)
 lf3

Problem: synth_23
 count (sort y) x
 count (sort lf5) x
 count y n
 count lf5 n
 count y x
 count lf5 x

Problem: synth_27
 if lfeqb x x then Succ (count y x) else count y x
 if lfeqb x x then Succ (count lf5 x) else count lf5 x
 count (insort y x) x
 count (insort lf5 x) x
 Succ (count y x)
 Succ (count lf5 x)

Problem: synth_16
 sort (sort (insort lf5 x))
 sort (insort (sort lf5) x)
 insort (sort (sort lf5)) x
 sort (insort lf5 x)
 insort (sort lf5) x
 insort lf5 x

Problem: synth_19
 count lf5 (count (sort lf5) (count lf5 x))
 count lf5 (count lf5 (count lf5 x))
 count (insort lf5 (Succ x)) x
 count (sort (sort lf5)) x
 count (sort lf5) x
 count lf5 x

Problem: synth_15
 count lf5 (count lf5 lf4)
 count (sort lf5) n
 count (sort lf5) x
 count lf5 n
 count lf5 x
 lf4

Problem: synth_14
 count (insort (sort y) x) x
 Succ (count (sort y) x)
 if lfeqb x x then Succ (count (sort y) x) else count (sort y) x
 if lfeqb x x then Succ (count y x) else count y x
 count (insort y x) x
 Succ (count y x)

Problem: synth_10
 Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero)
 Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero)
 Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero)
 Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero)
 Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)
 lf1

Problem: synth_8
 sort (sort (sort (sort (sort (sort y)))))
 sort (sort (sort (sort (sort y))))
 sort (sort (sort (sort y)))
 sort (sort (sort y))
 sort (sort y)
 sort y

Problem: synth_24
 count (insort lf5 (Succ x)) x
 count (sort (sort lf5)) x
 count (sort lf5) n
 count (sort lf5) x
 count lf5 n
 count lf5 x

Problem: synth_3

Problem: synth_12
 if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ Zero else Zero
 if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero
 if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero
 if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero
 if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero
 if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero

Problem: synth_5
 if lfeqb x n then Succ (count lf5 x) else count lf5 x
 if lfeqb x x then Succ (count lf5 x) else count lf5 x
 count (insort lf5 n) x
 count (insort lf5 x) x
 Succ (count lf5 n)
 Succ (count lf5 x)

Problem: synth_2
 count (sort (sort (sort lf2))) x
 if lfeqb x (Succ x) then Succ (count lf2 x) else count lf2 x
 count (insort lf2 (Succ x)) x
 count (sort (sort lf2)) x
 count (sort lf2) x
 count lf2 x

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 1088 seconds
Lemmas:
Lemma candidate_1: forall (lf3 : natural), @eq natural   (Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero))   lf3.
Lemma candidate_2: forall (lf3 : natural), @eq natural   (Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero))   lf3.
Lemma candidate_3: forall (lf3 : natural), @eq natural   (Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero))   lf3.
Lemma candidate_4: forall (lf3 : natural), @eq natural   (Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero))   lf3.
Lemma candidate_5: forall (lf3 : natural), @eq natural   (Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero))   lf3.
Lemma candidate_6: forall (lf3 : natural), @eq natural (lf3) lf3.
Lemma candidate_7: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort (sort (sort lf2))) x).
Lemma candidate_8: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x)   (if lfeqb x (Succ x) then Succ (count lf2 x) else count lf2 x).
Lemma candidate_9: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (insort lf2 (Succ x)) x).
Lemma candidate_10: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort (sort lf2)) x).
Lemma candidate_11: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort lf2) x).
Lemma candidate_12: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count lf2 x).
Lemma candidate_13: forall (lf3 : natural), @eq natural   (Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero))   lf3.
Lemma candidate_14: forall (lf3 : natural), @eq natural   (Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero))   lf3.
Lemma candidate_15: forall (lf3 : natural), @eq natural   (Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero))   lf3.
Lemma candidate_16: forall (lf3 : natural), @eq natural   (Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero))   lf3.
Lemma candidate_17: forall (lf3 : natural), @eq natural   (Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero))   lf3.
Lemma candidate_18: forall (lf3 : natural), @eq natural (lf3) lf3.
Lemma candidate_19: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (sort (sort (insort lf5 n))).
Lemma candidate_20: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (sort (insort (sort lf5) n)).
Lemma candidate_21: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (insort (sort (sort lf5)) n).
Lemma candidate_22: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (sort (insort lf5 n)).
Lemma candidate_23: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (insort (sort lf5) n).
Lemma candidate_24: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (insort lf5 n).
Lemma candidate_25: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x)   (if lfeqb x n then Succ (count lf5 x) else count lf5 x).
Lemma candidate_26: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x)   (if lfeqb x x then Succ (count lf5 x) else count lf5 x).
Lemma candidate_27: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (count (insort lf5 n) x).
Lemma candidate_28: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (count (insort lf5 x) x).
Lemma candidate_29: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count lf5 n)).
Lemma candidate_30: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count lf5 x)).
Lemma candidate_31: forall (lf3 : natural), @eq natural   (Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero))   lf3.
Lemma candidate_32: forall (lf3 : natural), @eq natural   (Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero))   lf3.
Lemma candidate_33: forall (lf3 : natural), @eq natural   (Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero))   lf3.
Lemma candidate_34: forall (lf3 : natural), @eq natural   (Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero))   lf3.
Lemma candidate_35: forall (lf3 : natural), @eq natural   (Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero))   lf3.
Lemma candidate_36: forall (lf3 : natural), @eq natural (lf3) lf3.
Lemma candidate_37: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x)   (if lfeqb x n then Succ (count y x) else count y x).
Lemma candidate_38: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x)   (if lfeqb x x then Succ (count y x) else count y x).
Lemma candidate_39: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (count (insort y n) x).
Lemma candidate_40: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (count (insort y x) x).
Lemma candidate_41: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y n)).
Lemma candidate_42: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y x)).
Lemma candidate_43: forall (y : lst), @eq lst (sort y) (sort (sort (sort (sort (sort (sort y)))))).
Lemma candidate_44: forall (y : lst), @eq lst (sort y) (sort (sort (sort (sort (sort y))))).
Lemma candidate_45: forall (y : lst), @eq lst (sort y) (sort (sort (sort (sort y)))).
Lemma candidate_46: forall (y : lst), @eq lst (sort y) (sort (sort (sort y))).
Lemma candidate_47: forall (y : lst), @eq lst (sort y) (sort (sort y)).
Lemma candidate_48: forall (y : lst), @eq lst (sort y) (sort y).
Lemma candidate_49: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (sort (insort (sort (sort y)) n)).
Lemma candidate_50: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (sort (sort (insort y n))).
Lemma candidate_51: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (sort (insort (sort y) n)).
Lemma candidate_52: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (insort (sort (sort y)) n).
Lemma candidate_53: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (sort (insort y n)).
Lemma candidate_54: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (insort (sort y) n).
Lemma candidate_55: forall (lf1 : natural), @eq natural lf1   (Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero)).
Lemma candidate_56: forall (lf1 : natural), @eq natural lf1   (Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero)).
Lemma candidate_57: forall (lf1 : natural), @eq natural lf1   (Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_58: forall (lf1 : natural), @eq natural lf1   (Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_59: forall (lf1 : natural), @eq natural lf1   (Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_60: forall (lf1 : natural), @eq natural lf1 (lf1).
Lemma candidate_61: forall (lf4 : natural), @eq natural (Succ lf4)   (Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_62: forall (lf4 : natural), @eq natural (Succ lf4)   (Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_63: forall (lf4 : natural), @eq natural (Succ lf4)   (Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_64: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero).
Lemma candidate_65: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_66: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_67: forall (lf1 : natural), @eq natural lf1   (Succ      (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ Zero else Zero)).
Lemma candidate_68: forall (lf1 : natural), @eq natural lf1   (Succ      (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero)).
Lemma candidate_69: forall (lf1 : natural), @eq natural lf1   (Succ      (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero)).
Lemma candidate_70: forall (lf1 : natural), @eq natural lf1   (Succ      (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_71: forall (lf1 : natural), @eq natural lf1   (Succ      (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_72: forall (lf1 : natural), @eq natural lf1   (Succ      (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_73: forall (lf1 : natural), @eq natural lf1   (Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero)).
Lemma candidate_74: forall (lf1 : natural), @eq natural lf1   (Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ (if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ (if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) else if lfeqb (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) Zero then Succ Zero else Zero) Zero then Succ Zero else Zero)).
Lemma candidate_75: forall (lf1 : natural), @eq natural lf1   (Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_76: forall (lf1 : natural), @eq natural lf1   (Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_77: forall (lf1 : natural), @eq natural lf1   (Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_78: forall (lf1 : natural), @eq natural lf1 (lf1).
Lemma candidate_79: forall (y : lst) (x : natural), @eq natural (count y x) (count y (count (sort y) (count y x))).
Lemma candidate_80: forall (y : lst) (x : natural), @eq natural (count y x) (count y (count y (count y x))).
Lemma candidate_81: forall (y : lst) (x : natural), @eq natural (count y x) (count (insort y (Succ x)) x).
Lemma candidate_82: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort (sort y)) x).
Lemma candidate_83: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort y) x).
Lemma candidate_84: forall (y : lst) (x : natural), @eq natural (count y x) (count y x).
Lemma candidate_85: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (count (insort (sort y) x) x).
Lemma candidate_86: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count (sort y) x)).
Lemma candidate_87: forall (y : lst) (x : natural), @eq natural (Succ (count y x))   (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x).
Lemma candidate_88: forall (y : lst) (x : natural), @eq natural (Succ (count y x))   (if lfeqb x x then Succ (count y x) else count y x).
Lemma candidate_89: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (count (insort y x) x).
Lemma candidate_90: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count y x)).
Lemma candidate_91: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort (sort (sort lf2))) x).
Lemma candidate_92: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x)   (if lfeqb x (Succ x) then Succ (count lf2 x) else count lf2 x).
Lemma candidate_93: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (insort lf2 (Succ x)) x).
Lemma candidate_94: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort (sort lf2)) x).
Lemma candidate_95: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort lf2) x).
Lemma candidate_96: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count lf2 x).
Lemma candidate_97: forall (lf4 : natural), @eq natural   (Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero))   (Succ lf4).
Lemma candidate_98: forall (lf4 : natural), @eq natural   (Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero))   (Succ lf4).
Lemma candidate_99: forall (lf4 : natural), @eq natural   (Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero))   (Succ lf4).
Lemma candidate_100: forall (lf4 : natural), @eq natural   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero)   (Succ lf4).
Lemma candidate_101: forall (lf4 : natural), @eq natural   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero)   (Succ lf4).
Lemma candidate_102: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_103: forall (lf4 : natural), @eq natural (Succ lf4)   (Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_104: forall (lf4 : natural), @eq natural (Succ lf4)   (Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_105: forall (lf4 : natural), @eq natural (Succ lf4)   (Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_106: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero).
Lemma candidate_107: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_108: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_109: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort (sort (sort lf2))) x).
Lemma candidate_110: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x)   (if lfeqb x (Succ x) then Succ (count lf2 x) else count lf2 x).
Lemma candidate_111: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (insort lf2 (Succ x)) x).
Lemma candidate_112: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort (sort lf2)) x).
Lemma candidate_113: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort lf2) x).
Lemma candidate_114: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count lf2 x).
Lemma candidate_115: forall (n : natural) (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 (count lf5 lf4)) lf4, @eq natural (count (insort lf5 n) x) (Succ lf4).
Lemma candidate_116: forall (n : natural) (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count (sort lf5) n) lf4, @eq natural (count (insort lf5 n) x) (Succ lf4).
Lemma candidate_117: forall (n : natural) (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count (sort lf5) x) lf4, @eq natural (count (insort lf5 n) x) (Succ lf4).
Lemma candidate_118: forall (n : natural) (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 n) lf4, @eq natural (count (insort lf5 n) x) (Succ lf4).
Lemma candidate_119: forall (n : natural) (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (count (insort lf5 n) x) (Succ lf4).
Lemma candidate_120: forall (n : natural) (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (lf4) lf4, @eq natural (count (insort lf5 n) x) (Succ lf4).
Lemma candidate_121: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (count (sort (sort (insort lf5 x))) x) (Succ lf4).
Lemma candidate_122: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (count (sort (insort (sort lf5) x)) x) (Succ lf4).
Lemma candidate_123: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (count (insort (sort (sort lf5)) x) x) (Succ lf4).
Lemma candidate_124: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (count (sort (insort lf5 x)) x) (Succ lf4).
Lemma candidate_125: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (count (insort (sort lf5) x) x) (Succ lf4).
Lemma candidate_126: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (count (insort lf5 x) x) (Succ lf4).
Lemma candidate_127: forall (n : natural) (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (count (insort lf5 n) x)   (if lfeqb x x then Succ (count lf5 x) else count lf5 x).
Lemma candidate_128: forall (n : natural) (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (count (insort lf5 n) x) (count (insort lf5 n) x).
Lemma candidate_129: forall (n : natural) (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (count (insort lf5 n) x) (count (insort lf5 x) x).
Lemma candidate_130: forall (n : natural) (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (count (insort lf5 n) x) (Succ (count lf5 n)).
Lemma candidate_131: forall (n : natural) (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (count (insort lf5 n) x) (Succ (count lf5 x)).
Lemma candidate_132: forall (n : natural) (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (count (insort lf5 n) x) (Succ lf4).
Lemma candidate_133: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (Succ (count (sort lf5) x)) (Succ lf4).
Lemma candidate_134: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural   (if lfeqb x x then Succ (count (sort lf5) x) else count (sort lf5) x)   (Succ lf4).
Lemma candidate_135: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (if lfeqb x x then Succ (count lf5 x) else count lf5 x)   (Succ lf4).
Lemma candidate_136: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (count (insort lf5 x) x) (Succ lf4).
Lemma candidate_137: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (Succ (count lf5 x)) (Succ lf4).
Lemma candidate_138: forall (lf4 : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) lf4, @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_139: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count lf5 (count (sort lf5) (count lf5 x))).
Lemma candidate_140: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count lf5 (count lf5 (count lf5 x))).
Lemma candidate_141: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (insort lf5 (Succ x)) x).
Lemma candidate_142: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (sort (sort lf5)) x).
Lemma candidate_143: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (sort lf5) x).
Lemma candidate_144: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count lf5 x).
Lemma candidate_145: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (sort (sort (insort lf5 n))).
Lemma candidate_146: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (sort (insort (sort lf5) n)).
Lemma candidate_147: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (insort (sort (sort lf5)) n).
Lemma candidate_148: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (sort (insort lf5 n)).
Lemma candidate_149: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (insort (sort lf5) n).
Lemma candidate_150: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (insort lf5 n).
Lemma candidate_151: forall (lf4 : natural), @eq natural (Succ lf4)   (Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_152: forall (lf4 : natural), @eq natural (Succ lf4)   (Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_153: forall (lf4 : natural), @eq natural (Succ lf4)   (Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_154: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero).
Lemma candidate_155: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_156: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_157: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x)   (if lfeqb x n then Succ (count lf5 x) else count lf5 x).
Lemma candidate_158: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x)   (if lfeqb x x then Succ (count lf5 x) else count lf5 x).
Lemma candidate_159: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (count (insort lf5 n) x).
Lemma candidate_160: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (count (insort lf5 x) x).
Lemma candidate_161: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count lf5 n)).
Lemma candidate_162: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count lf5 x)).
Lemma candidate_163: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x)   (if lfeqb x n then Succ (count lf5 x) else count lf5 x).
Lemma candidate_164: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x)   (if lfeqb x x then Succ (count lf5 x) else count lf5 x).
Lemma candidate_165: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (count (insort lf5 n) x).
Lemma candidate_166: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (count (insort lf5 x) x).
Lemma candidate_167: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count lf5 n)).
Lemma candidate_168: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count lf5 x)).
Lemma candidate_169: forall (lf4 : natural), @eq natural   (Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero))   (Succ lf4).
Lemma candidate_170: forall (lf4 : natural), @eq natural   (Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero))   (Succ lf4).
Lemma candidate_171: forall (lf4 : natural), @eq natural   (Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero))   (Succ lf4).
Lemma candidate_172: forall (lf4 : natural), @eq natural   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero)   (Succ lf4).
Lemma candidate_173: forall (lf4 : natural), @eq natural   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero)   (Succ lf4).
Lemma candidate_174: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_175: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (sort (sort (insort lf5 n))).
Lemma candidate_176: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (sort (insort (sort lf5) n)).
Lemma candidate_177: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (insort (sort (sort lf5)) n).
Lemma candidate_178: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (sort (insort lf5 n)).
Lemma candidate_179: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (insort (sort lf5) n).
Lemma candidate_180: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (insort lf5 n).
Lemma candidate_181: forall (lf4 : natural), @eq natural (Succ lf4)   (Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_182: forall (lf4 : natural), @eq natural (Succ lf4)   (Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_183: forall (lf4 : natural), @eq natural (Succ lf4)   (Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_184: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero).
Lemma candidate_185: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_186: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_187: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x)   (if lfeqb x n then Succ (count lf5 x) else count lf5 x).
Lemma candidate_188: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x)   (if lfeqb x x then Succ (count lf5 x) else count lf5 x).
Lemma candidate_189: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (count (insort lf5 n) x).
Lemma candidate_190: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (count (insort lf5 x) x).
Lemma candidate_191: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count lf5 n)).
Lemma candidate_192: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count lf5 x)).
Lemma candidate_193: forall (lf4 : natural), @eq natural   (Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero))   (Succ lf4).
Lemma candidate_194: forall (lf4 : natural), @eq natural   (Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero))   (Succ lf4).
Lemma candidate_195: forall (lf4 : natural), @eq natural   (Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero))   (Succ lf4).
Lemma candidate_196: forall (lf4 : natural), @eq natural   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero)   (Succ lf4).
Lemma candidate_197: forall (lf4 : natural), @eq natural   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero)   (Succ lf4).
Lemma candidate_198: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_199: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x)   (if lfeqb x n then Succ (count y x) else count y x).
Lemma candidate_200: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x)   (if lfeqb x x then Succ (count y x) else count y x).
Lemma candidate_201: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (count (insort y n) x).
Lemma candidate_202: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (count (insort y x) x).
Lemma candidate_203: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y n)).
Lemma candidate_204: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y x)).
Lemma candidate_205: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x)   (if lfeqb x n then Succ (count y x) else count y x).
Lemma candidate_206: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x)   (if lfeqb x x then Succ (count y x) else count y x).
Lemma candidate_207: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (count (insort y n) x).
Lemma candidate_208: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (count (insort y x) x).
Lemma candidate_209: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y n)).
Lemma candidate_210: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y x)).
Lemma candidate_211: forall (y : lst), @eq lst (sort y) (sort (sort (sort (sort (sort (sort y)))))).
Lemma candidate_212: forall (y : lst), @eq lst (sort y) (sort (sort (sort (sort (sort y))))).
Lemma candidate_213: forall (y : lst), @eq lst (sort y) (sort (sort (sort (sort y)))).
Lemma candidate_214: forall (y : lst), @eq lst (sort y) (sort (sort (sort y))).
Lemma candidate_215: forall (y : lst), @eq lst (sort y) (sort (sort y)).
Lemma candidate_216: forall (y : lst), @eq lst (sort y) (sort y).
Lemma candidate_217: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (sort (insort (sort (sort y)) n)).
Lemma candidate_218: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (sort (sort (insort y n))).
Lemma candidate_219: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (sort (insort (sort y) n)).
Lemma candidate_220: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (insort (sort (sort y)) n).
Lemma candidate_221: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (sort (insort y n)).
Lemma candidate_222: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (insort (sort y) n).
Lemma candidate_223: forall (lf4 : natural), @eq natural (Succ lf4)   (Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_224: forall (lf4 : natural), @eq natural (Succ lf4)   (Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_225: forall (lf4 : natural), @eq natural (Succ lf4)   (Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf4 with | Succ Zero => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_226: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ (if lfeqb lf4 lf4 then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ Zero else Zero).
Lemma candidate_227: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ (Succ Zero)) then Succ (if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 lf4 then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_228: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_229: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort (sort (sort lf2))) x).
Lemma candidate_230: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x)   (if lfeqb x (Succ x) then Succ (count lf2 x) else count lf2 x).
Lemma candidate_231: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (insort lf2 (Succ x)) x).
Lemma candidate_232: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort (sort lf2)) x).
Lemma candidate_233: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort lf2) x).
Lemma candidate_234: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count lf2 x).
Lemma candidate_235: forall (y : lst) (x : natural), @eq natural (count (insort (sort y) x) x) (Succ (count y x)).
Lemma candidate_236: forall (y : lst) (x : natural), @eq natural (Succ (count (sort y) x)) (Succ (count y x)).
Lemma candidate_237: forall (y : lst) (x : natural), @eq natural (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x)   (Succ (count y x)).
Lemma candidate_238: forall (y : lst) (x : natural), @eq natural (if lfeqb x x then Succ (count y x) else count y x)   (Succ (count y x)).
Lemma candidate_239: forall (y : lst) (x : natural), @eq natural (count (insort y x) x) (Succ (count y x)).
Lemma candidate_240: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count y x)).
Lemma candidate_241: forall (y : lst) (x : natural), @eq natural (count y x) (count y (count (sort y) (count y x))).
Lemma candidate_242: forall (y : lst) (x : natural), @eq natural (count y x) (count y (count y (count y x))).
Lemma candidate_243: forall (y : lst) (x : natural), @eq natural (count y x) (count (insort y (Succ x)) x).
Lemma candidate_244: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort (sort y)) x).
Lemma candidate_245: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort y) x).
Lemma candidate_246: forall (y : lst) (x : natural), @eq natural (count y x) (count y x).
Lemma candidate_247: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (count (insort (sort y) x) x).
Lemma candidate_248: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count (sort y) x)).
Lemma candidate_249: forall (y : lst) (x : natural), @eq natural (Succ (count y x))   (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x).
Lemma candidate_250: forall (y : lst) (x : natural), @eq natural (Succ (count y x))   (if lfeqb x x then Succ (count y x) else count y x).
Lemma candidate_251: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (count (insort y x) x).
Lemma candidate_252: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count y x)).
Lemma candidate_253: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort (sort (sort lf2))) x).
Lemma candidate_254: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x)   (if lfeqb x (Succ x) then Succ (count lf2 x) else count lf2 x).
Lemma candidate_255: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (insort lf2 (Succ x)) x).
Lemma candidate_256: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort (sort lf2)) x).
Lemma candidate_257: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort lf2) x).
Lemma candidate_258: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count lf2 x).
Lemma candidate_259: forall (n : natural) (y : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count (sort y) x) (count y x), @eq natural (count (insort lf5 n) x) (Succ (count y x)).
Lemma candidate_260: forall (n : natural) (y : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count (sort lf5) x) (count y x), @eq natural (count (insort lf5 n) x) (Succ (count y x)).
Lemma candidate_261: forall (n : natural) (y : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count y n) (count y x), @eq natural (count (insort lf5 n) x) (Succ (count y x)).
Lemma candidate_262: forall (n : natural) (y : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 n) (count y x), @eq natural (count (insort lf5 n) x) (Succ (count y x)).
Lemma candidate_263: forall (n : natural) (y : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count y x) (count y x), @eq natural (count (insort lf5 n) x) (Succ (count y x)).
Lemma candidate_264: forall (n : natural) (y : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count y x), @eq natural (count (insort lf5 n) x) (Succ (count y x)).
Lemma candidate_265: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count (insort lf5 (Succ x)) x), @eq natural (count (insort lf5 n) x) (Succ (count (insort lf5 (Succ x)) x)).
Lemma candidate_266: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count (sort (sort lf5)) x), @eq natural (count (insort lf5 n) x) (Succ (count (sort (sort lf5)) x)).
Lemma candidate_267: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count (sort lf5) n), @eq natural (count (insort lf5 n) x) (Succ (count (sort lf5) n)).
Lemma candidate_268: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count (sort lf5) x), @eq natural (count (insort lf5 n) x) (Succ (count (sort lf5) x)).
Lemma candidate_269: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count lf5 n), @eq natural (count (insort lf5 n) x) (Succ (count lf5 n)).
Lemma candidate_270: forall (n : natural) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count lf5 x), @eq natural (count (insort lf5 n) x) (Succ (count lf5 x)).
Lemma candidate_271: forall (y : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count y x), @eq natural (count (insort (sort (sort lf5)) x) x) (Succ (count y x)).
Lemma candidate_272: forall (y : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count y x), @eq natural (count (sort (insort y x)) x) (Succ (count y x)).
Lemma candidate_273: forall (y : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count y x), @eq natural (count (sort (insort lf5 x)) x) (Succ (count y x)).
Lemma candidate_274: forall (y : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count y x), @eq natural (count (insort (sort y) x) x) (Succ (count y x)).
Lemma candidate_275: forall (y : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count y x), @eq natural (count (insort (sort lf5) x) x) (Succ (count y x)).
Lemma candidate_276: forall (y : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count y x), @eq natural (count (insort lf5 x) x) (Succ (count y x)).
Lemma candidate_277: forall (n : natural) (y : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count y x), @eq natural (count (insort lf5 n) x) (count (insort y x) x).
Lemma candidate_278: forall (n : natural) (y : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count y x), @eq natural (count (insort lf5 n) x) (count (insort lf5 x) x).
Lemma candidate_279: forall (n : natural) (y : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count y x), @eq natural (count (insort lf5 n) x) (Succ (count y n)).
Lemma candidate_280: forall (n : natural) (y : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count y x), @eq natural (count (insort lf5 n) x) (Succ (count lf5 n)).
Lemma candidate_281: forall (n : natural) (y : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count y x), @eq natural (count (insort lf5 n) x) (Succ (count y x)).
Lemma candidate_282: forall (n : natural) (y : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count y x), @eq natural (count (insort lf5 n) x) (Succ (count lf5 x)).
Lemma candidate_283: forall (y : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count y x), @eq natural (if lfeqb x x then Succ (count y x) else count y x)   (Succ (count y x)).
Lemma candidate_284: forall (y : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count y x), @eq natural (if lfeqb x x then Succ (count lf5 x) else count lf5 x)   (Succ (count y x)).
Lemma candidate_285: forall (y : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count y x), @eq natural (count (insort y x) x) (Succ (count y x)).
Lemma candidate_286: forall (y : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count y x), @eq natural (count (insort lf5 x) x) (Succ (count y x)).
Lemma candidate_287: forall (y : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count y x), @eq natural (Succ (count y x)) (Succ (count y x)).
Lemma candidate_288: forall (y : lst) (x : natural) (lf5 : lst), forall _ : @eq natural (count lf5 x) (count y x), @eq natural (Succ (count lf5 x)) (Succ (count y x)).
Lemma candidate_289: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count lf5 (count (sort lf5) (count lf5 x))).
Lemma candidate_290: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count lf5 (count lf5 (count lf5 x))).
Lemma candidate_291: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (insort lf5 (Succ x)) x).
Lemma candidate_292: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (sort (sort lf5)) x).
Lemma candidate_293: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count (sort lf5) x).
Lemma candidate_294: forall (x : natural) (lf5 : lst), @eq natural (count lf5 x) (count lf5 x).
Lemma candidate_295: forall (y : lst) (x : natural), @eq natural (count y x) (count y (count (sort y) (count y x))).
Lemma candidate_296: forall (y : lst) (x : natural), @eq natural (count y x) (count y (count y (count y x))).
Lemma candidate_297: forall (y : lst) (x : natural), @eq natural (count y x) (count (insort y (Succ x)) x).
Lemma candidate_298: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort (sort y)) x).
Lemma candidate_299: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort y) x).
Lemma candidate_300: forall (y : lst) (x : natural), @eq natural (count y x) (count y x).
Lemma candidate_301: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (sort (sort (insort lf5 n))).
Lemma candidate_302: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (sort (insort (sort lf5) n)).
Lemma candidate_303: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (insort (sort (sort lf5)) n).
Lemma candidate_304: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (sort (insort lf5 n)).
Lemma candidate_305: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (insort (sort lf5) n).
Lemma candidate_306: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (insort lf5 n).
Lemma candidate_307: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (count (insort (sort y) x) x).
Lemma candidate_308: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count (sort y) x)).
Lemma candidate_309: forall (y : lst) (x : natural), @eq natural (Succ (count y x))   (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x).
Lemma candidate_310: forall (y : lst) (x : natural), @eq natural (Succ (count y x))   (if lfeqb x x then Succ (count y x) else count y x).
Lemma candidate_311: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (count (insort y x) x).
Lemma candidate_312: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count y x)).
Lemma candidate_313: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x)   (if lfeqb x n then Succ (count lf5 x) else count lf5 x).
Lemma candidate_314: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x)   (if lfeqb x x then Succ (count lf5 x) else count lf5 x).
Lemma candidate_315: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (count (insort lf5 n) x).
Lemma candidate_316: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (count (insort lf5 x) x).
Lemma candidate_317: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count lf5 n)).
Lemma candidate_318: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count lf5 x)).
Lemma candidate_319: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count (insort lf5 (Succ x)) x)).
Lemma candidate_320: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count (sort (sort lf5)) x)).
Lemma candidate_321: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count (sort lf5) n)).
Lemma candidate_322: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count (sort lf5) x)).
Lemma candidate_323: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count lf5 n)).
Lemma candidate_324: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count lf5 x)).
Lemma candidate_325: forall (y : lst) (x : natural), @eq natural (count (sort (insort (sort (sort y)) x)) x) (Succ (count y x)).
Lemma candidate_326: forall (y : lst) (x : natural), @eq natural (count (sort (sort (insort y x))) x) (Succ (count y x)).
Lemma candidate_327: forall (y : lst) (x : natural), @eq natural (count (sort (insort (sort y) x)) x) (Succ (count y x)).
Lemma candidate_328: forall (y : lst) (x : natural), @eq natural (count (insort (sort (sort y)) x) x) (Succ (count y x)).
Lemma candidate_329: forall (y : lst) (x : natural), @eq natural (count (sort (insort y x)) x) (Succ (count y x)).
Lemma candidate_330: forall (y : lst) (x : natural), @eq natural (count (insort (sort y) x) x) (Succ (count y x)).
Lemma candidate_331: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x)   (if lfeqb x n then Succ (count lf5 x) else count lf5 x).
Lemma candidate_332: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x)   (if lfeqb x x then Succ (count lf5 x) else count lf5 x).
Lemma candidate_333: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (count (insort lf5 n) x).
Lemma candidate_334: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (count (insort lf5 x) x).
Lemma candidate_335: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count lf5 n)).
Lemma candidate_336: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count lf5 x)).
Lemma candidate_337: forall (y : lst) (x : natural), @eq natural (count (insort (sort y) x) x) (Succ (count y x)).
Lemma candidate_338: forall (y : lst) (x : natural), @eq natural (Succ (count (sort y) x)) (Succ (count y x)).
Lemma candidate_339: forall (y : lst) (x : natural), @eq natural (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x)   (Succ (count y x)).
Lemma candidate_340: forall (y : lst) (x : natural), @eq natural (if lfeqb x x then Succ (count y x) else count y x)   (Succ (count y x)).
Lemma candidate_341: forall (y : lst) (x : natural), @eq natural (count (insort y x) x) (Succ (count y x)).
Lemma candidate_342: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count y x)).
Lemma candidate_343: forall (y : lst) (x : natural), @eq natural (count y x) (count y (count (sort y) (count y x))).
Lemma candidate_344: forall (y : lst) (x : natural), @eq natural (count y x) (count y (count y (count y x))).
Lemma candidate_345: forall (y : lst) (x : natural), @eq natural (count y x) (count (insort y (Succ x)) x).
Lemma candidate_346: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort (sort y)) x).
Lemma candidate_347: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort y) x).
Lemma candidate_348: forall (y : lst) (x : natural), @eq natural (count y x) (count y x).
Lemma candidate_349: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (sort (sort (insort lf5 n))).
Lemma candidate_350: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (sort (insort (sort lf5) n)).
Lemma candidate_351: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (insort (sort (sort lf5)) n).
Lemma candidate_352: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (sort (insort lf5 n)).
Lemma candidate_353: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (insort (sort lf5) n).
Lemma candidate_354: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (insort lf5 n).
Lemma candidate_355: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (count (insort (sort y) x) x).
Lemma candidate_356: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count (sort y) x)).
Lemma candidate_357: forall (y : lst) (x : natural), @eq natural (Succ (count y x))   (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x).
Lemma candidate_358: forall (y : lst) (x : natural), @eq natural (Succ (count y x))   (if lfeqb x x then Succ (count y x) else count y x).
Lemma candidate_359: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (count (insort y x) x).
Lemma candidate_360: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count y x)).
Lemma candidate_361: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x)   (if lfeqb x n then Succ (count lf5 x) else count lf5 x).
Lemma candidate_362: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x)   (if lfeqb x x then Succ (count lf5 x) else count lf5 x).
Lemma candidate_363: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (count (insort lf5 n) x).
Lemma candidate_364: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (count (insort lf5 x) x).
Lemma candidate_365: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count lf5 n)).
Lemma candidate_366: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count lf5 x)).
Lemma candidate_367: forall (y : lst) (x : natural), @eq natural (count (insort (sort y) x) x) (Succ (count y x)).
Lemma candidate_368: forall (y : lst) (x : natural), @eq natural (Succ (count (sort y) x)) (Succ (count y x)).
Lemma candidate_369: forall (y : lst) (x : natural), @eq natural (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x)   (Succ (count y x)).
Lemma candidate_370: forall (y : lst) (x : natural), @eq natural (if lfeqb x x then Succ (count y x) else count y x)   (Succ (count y x)).
Lemma candidate_371: forall (y : lst) (x : natural), @eq natural (count (insort y x) x) (Succ (count y x)).
Lemma candidate_372: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count y x)).
Lemma candidate_373: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort (sort (sort (sort (sort y))))) n) x)   (Succ (count y x)).
Lemma candidate_374: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort (sort (sort (sort y)))) n) x)   (Succ (count y x)).
Lemma candidate_375: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort (sort (sort y))) n) x) (Succ (count y x)).
Lemma candidate_376: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort (sort y)) n) x) (Succ (count y x)).
Lemma candidate_377: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y x)).
Lemma candidate_378: forall (y : lst) (x : natural), @eq natural (count (sort (insort (sort (sort y)) x)) x) (Succ (count y x)).
Lemma candidate_379: forall (y : lst) (x : natural), @eq natural (count (sort (sort (insort y x))) x) (Succ (count y x)).
Lemma candidate_380: forall (y : lst) (x : natural), @eq natural (count (sort (insort (sort y) x)) x) (Succ (count y x)).
Lemma candidate_381: forall (y : lst) (x : natural), @eq natural (count (insort (sort (sort y)) x) x) (Succ (count y x)).
Lemma candidate_382: forall (y : lst) (x : natural), @eq natural (count (sort (insort y x)) x) (Succ (count y x)).
Lemma candidate_383: forall (y : lst) (x : natural), @eq natural (count (insort (sort y) x) x) (Succ (count y x)).
Lemma candidate_384: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x)   (Succ (count (insort y (Succ x)) x)).
Lemma candidate_385: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count (sort (sort y)) x)).
Lemma candidate_386: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count (sort y) n)).
Lemma candidate_387: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count (sort y) x)).
Lemma candidate_388: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y n)).
Lemma candidate_389: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y x)).
Lemma candidate_390: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x)   (if lfeqb x n then Succ (count y x) else count y x).
Lemma candidate_391: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x)   (if lfeqb x x then Succ (count y x) else count y x).
Lemma candidate_392: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (count (insort y n) x).
Lemma candidate_393: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (count (insort y x) x).
Lemma candidate_394: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y n)).
Lemma candidate_395: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y x)).
Lemma candidate_396: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x)   (if lfeqb x n then Succ (count y x) else count y x).
Lemma candidate_397: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x)   (if lfeqb x x then Succ (count y x) else count y x).
Lemma candidate_398: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (count (insort y n) x).
Lemma candidate_399: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (count (insort y x) x).
Lemma candidate_400: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y n)).
Lemma candidate_401: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y x)).
Lemma candidate_402: forall (y : lst), @eq lst (sort y) (sort (sort (sort (sort (sort (sort y)))))).
Lemma candidate_403: forall (y : lst), @eq lst (sort y) (sort (sort (sort (sort (sort y))))).
Lemma candidate_404: forall (y : lst), @eq lst (sort y) (sort (sort (sort (sort y)))).
Lemma candidate_405: forall (y : lst), @eq lst (sort y) (sort (sort (sort y))).
Lemma candidate_406: forall (y : lst), @eq lst (sort y) (sort (sort y)).
Lemma candidate_407: forall (y : lst), @eq lst (sort y) (sort y).
Lemma candidate_408: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (sort (insort (sort (sort y)) n)).
Lemma candidate_409: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (sort (sort (insort y n))).
Lemma candidate_410: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (sort (insort (sort y) n)).
Lemma candidate_411: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (insort (sort (sort y)) n).
Lemma candidate_412: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (sort (insort y n)).
Lemma candidate_413: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (insort (sort y) n).
Lemma candidate_414: forall (y : lst) (x : natural), @eq natural (count y x) (count y (count (sort y) (count y x))).
Lemma candidate_415: forall (y : lst) (x : natural), @eq natural (count y x) (count y (count y (count y x))).
Lemma candidate_416: forall (y : lst) (x : natural), @eq natural (count y x) (count (insort y (Succ x)) x).
Lemma candidate_417: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort (sort y)) x).
Lemma candidate_418: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort y) x).
Lemma candidate_419: forall (y : lst) (x : natural), @eq natural (count y x) (count y x).
Lemma candidate_420: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (count (insort (sort y) x) x).
Lemma candidate_421: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count (sort y) x)).
Lemma candidate_422: forall (y : lst) (x : natural), @eq natural (Succ (count y x))   (if lfeqb x x then Succ (count (sort y) x) else count (sort y) x).
Lemma candidate_423: forall (y : lst) (x : natural), @eq natural (Succ (count y x))   (if lfeqb x x then Succ (count y x) else count y x).
Lemma candidate_424: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (count (insort y x) x).
Lemma candidate_425: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count y x)).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 1501 seconds
Duplicates removed: 271
Filtered by Quickchick: 79
Filtered by script: 75
Remaining: 0

Lemmas: 