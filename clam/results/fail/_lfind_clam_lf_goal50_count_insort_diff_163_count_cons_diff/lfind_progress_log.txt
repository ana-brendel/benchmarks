File Information
- File name: goal50
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal50_count_insort_diff_163_count_cons_diff
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal50_count_insort_diff_163_count_cons_diff
- Namespace: adtind
- Proof name: count_insort_diff
- Theorem: Theorem count_insort_diff: forall (x0 y0 : natural) (l0 : lst) (_ : not (@eq natural x0 y0)),
@eq natural (count (insort l0 y0) x0) (count l0 x0).
- Declarations: 
From lfind Require Import LFind.
Require Import Arith.

Proof Context
* Goal State: @eq natural (count (Cons y (Cons n l)) x) (count l x)

* Hypothesis:
Ee : @eq bool (lfeqb x n) false
x : natural
El : @eq bool (less y n) true
H : not (@eq natural x y)
IHl : @eq natural (count (insort l y) x) (count l x)
y : natural
l : lst
n : natural

* Types:
Set
natural
Prop
lst
bool

* Polymorphic Types:


* Variables:
x : natural
y : natural
l : lst
n : natural

* Terms:
@eq natural x y : Prop
count (Cons y (Cons n l)) x : natural
count l x : natural
not (@eq natural x y) : Prop
x : natural
insort l y : lst
y : natural
@eq bool (lfeqb x n) false : Prop
count (insort l y) x : natural
l : lst
true : bool
Cons y (Cons n l) : lst
false : bool
bool : Set
@eq natural (count (insort l y) x) (count l x) : Prop
less y n : bool
lst : Set
@eq bool (less y n) true : Prop
Cons n l : lst
lfeqb x n : bool
@eq natural (count (Cons y (Cons n l)) x) (count l x) : Prop
natural : Set
n : natural

* Functions:
count  : forall (_ : lst) (_ : natural), natural
lfeqb  : forall (_ : natural) (_ : natural), bool
less  : forall (_ : natural) (_ : natural), bool
not  : forall _ : Prop, Prop
Cons  : forall (_ : natural) (_ : lst), lst
@eq  : forall (A : Type) (_ : A) (_ : A), Prop
insort  : forall (_ : lst) (_ : natural), lst

<---GENERALIZATION--->
Time elapsed: 159 seconds
Generalized Variables:
lf3 : natural = count l x
lf1 : natural = count (Cons y (Cons n l)) x
lf4 : lst = Cons n l
lf2 : lst = Cons y (Cons n l)

Generalizations:
Lemma conj1: forall (lf1 : natural) (lf3 : natural), @eq natural lf1 lf3.
Lemma conj5: forall (lf2 : lst) (x : natural) (lf3 : natural), @eq natural (count lf2 x) lf3.
Lemma conj6: forall (x : natural) (lf4 : lst) (y : natural) (lf3 : natural), @eq natural (count (Cons y lf4) x) lf3.
Lemma conj8: forall (x : natural) (y : natural) (l : lst) (n : natural) (lf3 : natural), @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma conj9: forall (x : natural) (lf1 : natural) (l : lst), @eq natural lf1 (count l x).
Lemma conj13: forall (lf2 : lst) (x : natural) (l : lst), @eq natural (count lf2 x) (count l x).
Lemma conj14: forall (x : natural) (lf4 : lst) (y : natural) (l : lst), @eq natural (count (Cons y lf4) x) (count l x).
Lemma conj16: forall (x : natural) (y : natural) (l : lst) (n : natural), @eq natural (count (Cons y (Cons n l)) x) (count l x).


<---VALIDITY CHECKS--->
Time elapsed: 258 seconds
Valid:

Invalid:
Lemma conj16: forall (x : natural) (y : natural) (l : lst) (n : natural), @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma conj14: forall (x : natural) (lf4 : lst) (y : natural) (l : lst), @eq natural (count (Cons y lf4) x) (count l x).
Lemma conj13: forall (lf2 : lst) (x : natural) (l : lst), @eq natural (count lf2 x) (count l x).
Lemma conj9: forall (x : natural) (lf1 : natural) (l : lst), @eq natural lf1 (count l x).
Lemma conj8: forall (x : natural) (y : natural) (l : lst) (n : natural) (lf3 : natural), @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma conj6: forall (x : natural) (lf4 : lst) (y : natural) (lf3 : natural), @eq natural (count (Cons y lf4) x) lf3.
Lemma conj5: forall (lf2 : lst) (x : natural) (lf3 : natural), @eq natural (count lf2 x) lf3.
Lemma conj1: forall (lf1 : natural) (lf3 : natural), @eq natural lf1 lf3.

<---ADD IMPLICATIONS--->
Time elapsed: 295 seconds
Generalizations:
Lemma conj16: forall (x : natural) (y : natural) (l : lst) (n : natural), @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma conj16_imp: forall (x : natural) (y : natural) (l : lst) (n : natural), forall
  _ : forall (_ : not (@eq natural x y))
        (_ : @eq natural (count (insort l y) x) (count l x))
        (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false,
@eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma conj14: forall (x : natural) (lf4 : lst) (y : natural) (l : lst), @eq natural (count (Cons y lf4) x) (count l x).
Lemma conj14_imp: forall (x : natural) (lf4 : lst) (y : natural) (l : lst), forall
  _ : forall _ : not (@eq natural x y),
      @eq natural (count (insort l y) x) (count l x),
@eq natural (count (Cons y lf4) x) (count l x).
Lemma conj13: forall (lf2 : lst) (x : natural) (l : lst), @eq natural (count lf2 x) (count l x).
Lemma conj9: forall (x : natural) (lf1 : natural) (l : lst), @eq natural lf1 (count l x).
Lemma conj8: forall (x : natural) (y : natural) (l : lst) (n : natural) (lf3 : natural), @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma conj8_imp: forall (x : natural) (y : natural) (l : lst) (n : natural) (lf3 : natural), forall
  _ : forall (_ : not (@eq natural x y))
        (_ : @eq natural (count (insort l y) x) lf3)
        (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false,
@eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma conj6: forall (x : natural) (lf4 : lst) (y : natural) (lf3 : natural), @eq natural (count (Cons y lf4) x) lf3.
Lemma conj6_imp: forall (x : natural) (lf4 : lst) (y : natural) (lf3 : natural), forall _ : not (@eq natural x y), @eq natural (count (Cons y lf4) x) lf3.
Lemma conj5: forall (lf2 : lst) (x : natural) (lf3 : natural), @eq natural (count lf2 x) lf3.
Lemma conj1: forall (lf1 : natural) (lf3 : natural), @eq natural lf1 lf3.


<---VALIDITY CHECKS--->
Time elapsed: 313 seconds
Valid:

Invalid:
Lemma conj1: forall (lf1 : natural) (lf3 : natural), @eq natural lf1 lf3.
Lemma conj5: forall (lf2 : lst) (x : natural) (lf3 : natural), @eq natural (count lf2 x) lf3.
Lemma conj6_imp: forall (x : natural) (lf4 : lst) (y : natural) (lf3 : natural), forall _ : not (@eq natural x y), @eq natural (count (Cons y lf4) x) lf3.
Lemma conj6: forall (x : natural) (lf4 : lst) (y : natural) (lf3 : natural), @eq natural (count (Cons y lf4) x) lf3.
Lemma conj8_imp: forall (x : natural) (y : natural) (l : lst) (n : natural) (lf3 : natural), forall
  _ : forall (_ : not (@eq natural x y))
        (_ : @eq natural (count (insort l y) x) lf3)
        (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false,
@eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma conj8: forall (x : natural) (y : natural) (l : lst) (n : natural) (lf3 : natural), @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma conj9: forall (x : natural) (lf1 : natural) (l : lst), @eq natural lf1 (count l x).
Lemma conj13: forall (lf2 : lst) (x : natural) (l : lst), @eq natural (count lf2 x) (count l x).
Lemma conj14_imp: forall (x : natural) (lf4 : lst) (y : natural) (l : lst), forall
  _ : forall _ : not (@eq natural x y),
      @eq natural (count (insort l y) x) (count l x),
@eq natural (count (Cons y lf4) x) (count l x).
Lemma conj14: forall (x : natural) (lf4 : lst) (y : natural) (l : lst), @eq natural (count (Cons y lf4) x) (count l x).
Lemma conj16_imp: forall (x : natural) (y : natural) (l : lst) (n : natural), forall
  _ : forall (_ : not (@eq natural x y))
        (_ : @eq natural (count (insort l y) x) (count l x))
        (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false,
@eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma conj16: forall (x : natural) (y : natural) (l : lst) (n : natural), @eq natural (count (Cons y (Cons n l)) x) (count l x).


<---CREATE SKETCHES--->
Time elapsed: 314 seconds
Sketches:
Sketch conj5_sketch0 : @eq natural (##hole##) lf3
Sketch conj5_term_sketch0 : @eq natural (count lf2 x) (##hole##)
Sketch conj6_imp_sketch0 : forall _ : not (@eq natural x y), @eq natural (##hole##) lf3
Sketch conj6_imp_sketch1 : forall _ : not (@eq natural x y), @eq natural (count (##hole##) x) lf3
Sketch conj6_imp_term_sketch0 : @eq natural (count (Cons y lf4) x) (##hole##)
Sketch conj6_imp_term_sketch1 : @eq lst (Cons y lf4) (##hole##)
Sketch conj6_sketch0 : @eq natural (##hole##) lf3
Sketch conj6_sketch1 : @eq natural (count (##hole##) x) lf3
Sketch conj6_term_sketch0 : @eq natural (count (Cons y lf4) x) (##hole##)
Sketch conj6_term_sketch1 : @eq lst (Cons y lf4) (##hole##)
Sketch conj8_imp_sketch5 : forall
  _ : forall (_ : not (@eq natural x y))
        (_ : @eq natural (count (insort l y) x) lf3)
        (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) (##hole##),
@eq natural (count (Cons y (Cons n l)) x) lf3
Sketch conj8_imp_sketch0 : forall
  _ : forall (_ : not (@eq natural x y))
        (_ : @eq natural (count (insort l y) x) lf3)
        (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false,
@eq natural (##hole##) lf3
Sketch conj8_imp_sketch1 : forall
  _ : forall (_ : not (@eq natural x y))
        (_ : @eq natural (count (##hole##) x) lf3)
        (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false,
@eq natural (count (Cons y (Cons n l)) x) lf3
Sketch conj8_imp_sketch6 : forall
  _ : forall (_ : not (@eq natural x y))
        (_ : @eq natural (count (insort l y) x) lf3)
        (_ : @eq bool (##hole##) true), @eq bool (lfeqb x n) false,
@eq natural (count (Cons y (Cons n l)) x) lf3
Sketch conj8_imp_sketch7 : forall
  _ : forall (_ : not (@eq natural x y))
        (_ : @eq natural (count (insort l y) x) lf3)
        (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false,
@eq natural (count (Cons y (##hole##)) x) lf3
Sketch conj8_imp_sketch8 : forall
  _ : forall (_ : not (@eq natural x y))
        (_ : @eq natural (count (insort l y) x) lf3)
        (_ : @eq bool (less y n) true), @eq bool (##hole##) false,
@eq natural (count (Cons y (Cons n l)) x) lf3
Sketch conj8_imp_sketch2 : forall
  _ : forall (_ : not (@eq natural x y)) (_ : @eq natural (##hole##) lf3)
        (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false,
@eq natural (count (Cons y (Cons n l)) x) lf3
Sketch conj8_imp_sketch3 : forall
  _ : forall (_ : not (@eq natural x y))
        (_ : @eq natural (count (insort l y) x) lf3)
        (_ : @eq bool (less y n) (##hole##)), @eq bool (lfeqb x n) false,
@eq natural (count (Cons y (Cons n l)) x) lf3
Sketch conj8_imp_sketch4 : forall
  _ : forall (_ : not (@eq natural x y))
        (_ : @eq natural (count (insort l y) x) lf3)
        (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false,
@eq natural (count (##hole##) x) lf3
Sketch conj8_imp_term_sketch5 : @eq bool false (##hole##)
Sketch conj8_imp_term_sketch0 : @eq natural (count (Cons y (Cons n l)) x) (##hole##)
Sketch conj8_imp_term_sketch1 : @eq lst (insort l y) (##hole##)
Sketch conj8_imp_term_sketch6 : @eq bool (less y n) (##hole##)
Sketch conj8_imp_term_sketch7 : @eq lst (Cons n l) (##hole##)
Sketch conj8_imp_term_sketch8 : @eq bool (lfeqb x n) (##hole##)
Sketch conj8_imp_term_sketch2 : @eq natural (count (insort l y) x) (##hole##)
Sketch conj8_imp_term_sketch3 : @eq bool true (##hole##)
Sketch conj8_imp_term_sketch4 : @eq lst (Cons y (Cons n l)) (##hole##)
Sketch conj8_sketch0 : @eq natural (##hole##) lf3
Sketch conj8_sketch1 : @eq natural (count (Cons y (##hole##)) x) lf3
Sketch conj8_sketch2 : @eq natural (count (##hole##) x) lf3
Sketch conj8_term_sketch0 : @eq natural (count (Cons y (Cons n l)) x) (##hole##)
Sketch conj8_term_sketch1 : @eq lst (Cons n l) (##hole##)
Sketch conj8_term_sketch2 : @eq lst (Cons y (Cons n l)) (##hole##)
Sketch conj9_sketch0 : @eq natural lf1 (##hole##)
Sketch conj9_term_sketch0 : @eq natural (count l x) (##hole##)
Sketch conj13_sketch0 : @eq natural (count lf2 x) (##hole##)
Sketch conj13_sketch1 : @eq natural (##hole##) (count l x)
Sketch conj13_term_sketch0 : @eq natural (count l x) (##hole##)
Sketch conj13_term_sketch1 : @eq natural (count lf2 x) (##hole##)
Sketch conj14_imp_sketch0 : forall
  _ : forall _ : not (@eq natural x y),
      @eq natural (count (insort l y) x) (count l x),
@eq natural (##hole##) (count l x)
Sketch conj14_imp_sketch1 : forall
  _ : forall _ : not (@eq natural x y),
      @eq natural (count (insort l y) x) (count l x),
@eq natural (count (##hole##) x) (count l x)
Sketch conj14_imp_sketch2 : forall
  _ : forall _ : not (@eq natural x y),
      @eq natural (count (insort l y) x) (##hole##),
@eq natural (count (Cons y lf4) x) (##hole##)
Sketch conj14_imp_sketch3 : forall
  _ : forall _ : not (@eq natural x y),
      @eq natural (count (##hole##) x) (count l x),
@eq natural (count (Cons y lf4) x) (count l x)
Sketch conj14_imp_sketch4 : forall
  _ : forall _ : not (@eq natural x y), @eq natural (##hole##) (count l x),
@eq natural (count (Cons y lf4) x) (count l x)
Sketch conj14_imp_term_sketch0 : @eq natural (count (Cons y lf4) x) (##hole##)
Sketch conj14_imp_term_sketch1 : @eq lst (Cons y lf4) (##hole##)
Sketch conj14_imp_term_sketch2 : @eq natural (count l x) (##hole##)
Sketch conj14_imp_term_sketch3 : @eq lst (insort l y) (##hole##)
Sketch conj14_imp_term_sketch4 : @eq natural (count (insort l y) x) (##hole##)
Sketch conj14_sketch0 : @eq natural (##hole##) (count l x)
Sketch conj14_sketch1 : @eq natural (count (##hole##) x) (count l x)
Sketch conj14_sketch2 : @eq natural (count (Cons y lf4) x) (##hole##)
Sketch conj14_term_sketch0 : @eq natural (count (Cons y lf4) x) (##hole##)
Sketch conj14_term_sketch1 : @eq lst (Cons y lf4) (##hole##)
Sketch conj14_term_sketch2 : @eq natural (count l x) (##hole##)
Sketch conj16_imp_sketch6 : forall
  _ : forall (_ : not (@eq natural x y))
        (_ : @eq natural (count (insort l y) x) (count l x))
        (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) (##hole##),
@eq natural (count (Cons y (Cons n l)) x) (count l x)
Sketch conj16_imp_sketch0 : forall
  _ : forall (_ : not (@eq natural x y))
        (_ : @eq natural (count (insort l y) x) (count l x))
        (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false,
@eq natural (##hole##) (count l x)
Sketch conj16_imp_sketch1 : forall
  _ : forall (_ : not (@eq natural x y))
        (_ : @eq natural (count (insort l y) x) (##hole##))
        (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false,
@eq natural (count (Cons y (Cons n l)) x) (##hole##)
Sketch conj16_imp_sketch2 : forall
  _ : forall (_ : not (@eq natural x y))
        (_ : @eq natural (count (##hole##) x) (count l x))
        (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false,
@eq natural (count (Cons y (Cons n l)) x) (count l x)
Sketch conj16_imp_sketch7 : forall
  _ : forall (_ : not (@eq natural x y))
        (_ : @eq natural (count (insort l y) x) (count l x))
        (_ : @eq bool (##hole##) true), @eq bool (lfeqb x n) false,
@eq natural (count (Cons y (Cons n l)) x) (count l x)
Sketch conj16_imp_sketch8 : forall
  _ : forall (_ : not (@eq natural x y))
        (_ : @eq natural (count (insort l y) x) (count l x))
        (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false,
@eq natural (count (Cons y (##hole##)) x) (count l x)
Sketch conj16_imp_sketch9 : forall
  _ : forall (_ : not (@eq natural x y))
        (_ : @eq natural (count (insort l y) x) (count l x))
        (_ : @eq bool (less y n) true), @eq bool (##hole##) false,
@eq natural (count (Cons y (Cons n l)) x) (count l x)
Sketch conj16_imp_sketch3 : forall
  _ : forall (_ : not (@eq natural x y))
        (_ : @eq natural (##hole##) (count l x))
        (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false,
@eq natural (count (Cons y (Cons n l)) x) (count l x)
Sketch conj16_imp_sketch4 : forall
  _ : forall (_ : not (@eq natural x y))
        (_ : @eq natural (count (insort l y) x) (count l x))
        (_ : @eq bool (less y n) (##hole##)), @eq bool (lfeqb x n) false,
@eq natural (count (Cons y (Cons n l)) x) (count l x)
Sketch conj16_imp_sketch5 : forall
  _ : forall (_ : not (@eq natural x y))
        (_ : @eq natural (count (insort l y) x) (count l x))
        (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false,
@eq natural (count (##hole##) x) (count l x)
Sketch conj16_imp_term_sketch6 : @eq bool false (##hole##)
Sketch conj16_imp_term_sketch0 : @eq natural (count (Cons y (Cons n l)) x) (##hole##)
Sketch conj16_imp_term_sketch1 : @eq natural (count l x) (##hole##)
Sketch conj16_imp_term_sketch2 : @eq lst (insort l y) (##hole##)
Sketch conj16_imp_term_sketch7 : @eq bool (less y n) (##hole##)
Sketch conj16_imp_term_sketch8 : @eq lst (Cons n l) (##hole##)
Sketch conj16_imp_term_sketch9 : @eq bool (lfeqb x n) (##hole##)
Sketch conj16_imp_term_sketch3 : @eq natural (count (insort l y) x) (##hole##)
Sketch conj16_imp_term_sketch4 : @eq bool true (##hole##)
Sketch conj16_imp_term_sketch5 : @eq lst (Cons y (Cons n l)) (##hole##)
Sketch conj16_sketch0 : @eq natural (##hole##) (count l x)
Sketch conj16_sketch1 : @eq natural (count (Cons y (Cons n l)) x) (##hole##)
Sketch conj16_sketch2 : @eq natural (count (Cons y (##hole##)) x) (count l x)
Sketch conj16_sketch3 : @eq natural (count (##hole##) x) (count l x)
Sketch conj16_term_sketch0 : @eq natural (count (Cons y (Cons n l)) x) (##hole##)
Sketch conj16_term_sketch1 : @eq natural (count l x) (##hole##)
Sketch conj16_term_sketch2 : @eq lst (Cons n l) (##hole##)
Sketch conj16_term_sketch3 : @eq lst (Cons y (Cons n l)) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 2171 seconds
Problems per Sketch:
Sketch conj16_imp_sketch3 --> Problem  synth_33
Sketch conj16_sketch3 --> Problem  synth_31
Sketch conj14_imp_term_sketch4 --> Problem  synth_22
Sketch conj14_imp_term_sketch1 --> Problem  synth_6
Sketch conj16_term_sketch1 --> Problem  synth_27
Sketch conj14_term_sketch2 --> Problem  synth_27
Sketch conj8_imp_sketch6 --> Problem  synth_11
Sketch conj6_imp_term_sketch1 --> Problem  synth_6
Sketch conj14_imp_sketch2 --> Problem  synth_29
Sketch conj8_sketch1 --> Problem  synth_25
Sketch conj8_imp_term_sketch6 --> Problem  synth_19
Sketch conj6_term_sketch0 --> Problem  synth_5
Sketch conj6_imp_sketch0 --> Problem  synth_3
Sketch conj13_term_sketch1 --> Problem  synth_2
Sketch conj8_term_sketch0 --> Problem  synth_17
Sketch conj14_imp_term_sketch2 --> Problem  synth_27
Sketch conj16_imp_term_sketch0 --> Problem  synth_17
Sketch conj14_term_sketch1 --> Problem  synth_6
Sketch conj8_imp_term_sketch2 --> Problem  synth_22
Sketch conj8_term_sketch1 --> Problem  synth_20
Sketch conj16_imp_term_sketch1 --> Problem  synth_27
Sketch conj8_imp_term_sketch3 --> Problem  synth_23
Sketch conj14_imp_sketch0 --> Problem  synth_22
Sketch conj8_imp_sketch1 --> Problem  synth_10
Sketch conj14_imp_sketch1 --> Problem  synth_28
Sketch conj5_term_sketch0 --> Problem  synth_2
Sketch conj8_imp_term_sketch1 --> Problem  synth_18
Sketch conj9_term_sketch0 --> Problem  synth_27
Sketch conj16_sketch1 --> Problem  synth_17
Sketch conj16_imp_sketch6 --> Problem  synth_32
Sketch conj16_imp_term_sketch4 --> Problem  synth_23
Sketch conj8_imp_sketch3 --> Problem  synth_14
Sketch conj16_term_sketch2 --> Problem  synth_20
Sketch conj16_imp_term_sketch3 --> Problem  synth_22
Sketch conj13_term_sketch0 --> Problem  synth_27
Sketch conj8_imp_term_sketch7 --> Problem  synth_20
Sketch conj16_imp_term_sketch2 --> Problem  synth_18
Sketch conj16_imp_sketch9 --> Problem  synth_32
Sketch conj8_imp_term_sketch8 --> Problem  synth_21
Sketch conj16_imp_sketch5 --> Problem  synth_38
Sketch conj8_sketch0 --> Problem  synth_1
Sketch conj14_imp_term_sketch3 --> Problem  synth_18
Sketch conj8_term_sketch2 --> Problem  synth_24
Sketch conj16_imp_sketch4 --> Problem  synth_37
Sketch conj14_sketch1 --> Problem  synth_31
Sketch conj8_imp_term_sketch5 --> Problem  synth_16
Sketch conj5_sketch0 --> Problem  synth_1
Sketch conj14_sketch2 --> Problem  synth_5
Sketch conj16_sketch2 --> Problem  synth_39
Sketch conj8_imp_term_sketch4 --> Problem  synth_24
Sketch conj6_imp_sketch1 --> Problem  synth_4
Sketch conj16_imp_sketch7 --> Problem  synth_35
Sketch conj16_imp_term_sketch5 --> Problem  synth_24
Sketch conj8_imp_sketch0 --> Problem  synth_9
Sketch conj16_imp_sketch0 --> Problem  synth_33
Sketch conj9_sketch0 --> Problem  synth_26
Sketch conj8_sketch2 --> Problem  synth_7
Sketch conj8_imp_sketch7 --> Problem  synth_12
Sketch conj6_imp_term_sketch0 --> Problem  synth_5
Sketch conj8_imp_sketch5 --> Problem  synth_8
Sketch conj6_sketch0 --> Problem  synth_1
Sketch conj16_imp_sketch1 --> Problem  synth_33
Sketch conj14_imp_sketch4 --> Problem  synth_29
Sketch conj14_imp_term_sketch0 --> Problem  synth_5
Sketch conj16_imp_term_sketch8 --> Problem  synth_20
Sketch conj6_sketch1 --> Problem  synth_7
Sketch conj16_imp_sketch2 --> Problem  synth_34
Sketch conj6_term_sketch1 --> Problem  synth_6
Sketch conj16_imp_term_sketch6 --> Problem  synth_16
Sketch conj8_imp_term_sketch0 --> Problem  synth_17
Sketch conj16_sketch0 --> Problem  synth_27
Sketch conj16_imp_sketch8 --> Problem  synth_36
Sketch conj13_sketch1 --> Problem  synth_27
Sketch conj14_sketch0 --> Problem  synth_27
Sketch conj14_imp_sketch3 --> Problem  synth_30
Sketch conj14_term_sketch0 --> Problem  synth_5
Sketch conj8_imp_sketch8 --> Problem  synth_8
Sketch conj16_term_sketch0 --> Problem  synth_17
Sketch conj13_sketch0 --> Problem  synth_2
Sketch conj8_imp_sketch2 --> Problem  synth_13
Sketch conj16_term_sketch3 --> Problem  synth_24
Sketch conj16_imp_term_sketch7 --> Problem  synth_19
Sketch conj8_imp_sketch4 --> Problem  synth_15
Sketch conj16_imp_term_sketch9 --> Problem  synth_21


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 2538 seconds

Problem: synth_28

Problem: synth_17
 if lfeqb x n then Succ (count l x) else count l x
 if lfeqb x y then Succ (count l x) else count l x
 count (insort l n) x
 count (insort l y) x
 count (sort l) x
 count l x

Problem: synth_29
 count (insort l y) x
 count (insort lf4 y) x
 count (sort l) x
 count (sort lf4) x
 count l x
 count lf4 x

Problem: synth_26
 if lfeqb (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero) (Succ lf1) then Succ (if lfeqb (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero) lf1 then Succ Zero else Zero) else if lfeqb (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero) lf1 then Succ Zero else Zero) else if lfeqb (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero) (Succ lf1) then Succ (if lfeqb (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero) lf1 then Succ Zero else Zero) else if lfeqb (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero) lf1 then Succ Zero else Zero
 if lfeqb (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero) (Succ lf1) then Succ Zero else Zero) else if lfeqb (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero) (Succ lf1) then Succ Zero else Zero) else if lfeqb (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero) (Succ lf1) then Succ Zero else Zero) else if lfeqb (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero) (Succ lf1) then Succ Zero else Zero
 if match lf1 with | Succ Zero => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero
 if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ Zero => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ Zero => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero
 if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ Zero => true | _ => false end then Succ Zero else Zero
 lf1

Problem: synth_9
 if lfeqb x y then Succ (count l x) else count l x
 count (insort l n) x
 count (insort l y) x
 count (sort l) x
 count l x
 lf3

Problem: synth_30
 insort l y

Problem: synth_11
 less y n

Problem: synth_39

Problem: synth_1
 if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) (Succ lf3) then Succ (if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ Zero else Zero) else if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ Zero else Zero) else if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) (Succ lf3) then Succ (if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ Zero else Zero) else if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ Zero else Zero
 if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) (Succ lf3) then Succ Zero else Zero) else if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) (Succ lf3) then Succ Zero else Zero) else if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) (Succ lf3) then Succ Zero else Zero) else if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) (Succ lf3) then Succ Zero else Zero
 if match lf3 with | Succ Zero => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero
 if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ Zero => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ Zero => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero
 if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ Zero => true | _ => false end then Succ Zero else Zero
 lf3

Problem: synth_15
 Cons y (Cons n l)

Problem: synth_31

Problem: synth_14
 less x (Succ x)
 lfeqb lf3 lf3
 lfeqb n n
 lfeqb y y
 lfeqb x x
 true

Problem: synth_8
 less x x
 less lf3 Zero
 less n Zero
 less y Zero
 less x Zero
 false

Problem: synth_34
 insort l y

Problem: synth_12
 Cons n l

Problem: synth_5
 count (insort lf4 (Succ x)) x
 count (sort (sort lf4)) x
 if lfeqb x y then Succ (count lf4 x) else count lf4 x
 count (insort lf4 y) x
 count (sort lf4) x
 count lf4 x

Problem: synth_37
 less y (Succ y)
 less x (Succ x)
 lfeqb n n
 lfeqb y y
 lfeqb x x
 true

Problem: synth_2
 count (sort (sort (sort lf2))) x
 if lfeqb x (Succ x) then Succ (count lf2 x) else count lf2 x
 count (insort lf2 (Succ x)) x
 count (sort (sort lf2)) x
 count (sort lf2) x
 count lf2 x

Problem: synth_22
 count (insort l (Succ x)) x
 count (sort (sort l)) x
 if lfeqb x y then Succ (count l x) else count l x
 count (insort l y) x
 count (sort l) x
 count l x

Problem: synth_20
 Cons n l

Problem: synth_18
 insort l y

Problem: synth_21
 lfeqb x n
 lfeqb n x
 less x x
 less n Zero
 less x Zero
 false

Problem: synth_25

Problem: synth_13
 if lfeqb x y then Succ (count l x) else count l x
 count (insort l n) x
 count (insort l y) x
 count (sort l) x
 count l x
 lf3

Problem: synth_6
 Cons y lf4

Problem: synth_7

Problem: synth_4

Problem: synth_38
 Cons y (Cons n l)

Problem: synth_23
 true

Problem: synth_27
 count (sort (sort (sort l))) x
 if lfeqb x (Succ x) then Succ (count l x) else count l x
 count (insort l (Succ x)) x
 count (sort (sort l)) x
 count (sort l) x
 count l x

Problem: synth_16
 false

Problem: synth_19
 less y n

Problem: synth_10
 insort l y

Problem: synth_33
 if lfeqb x n then Succ (count l x) else count l x
 if lfeqb x y then Succ (count l x) else count l x
 count (insort l n) x
 count (insort l y) x
 count (sort l) x
 count l x

Problem: synth_24
 Cons y (Cons n l)

Problem: synth_3
 if match lf3 with | Succ Zero => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero
 if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ Zero => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ Zero => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero
 if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ Zero => true | _ => false end then Succ Zero else Zero
 lf3

Problem: synth_32
 lfeqb y x
 less x x
 less n Zero
 less y Zero
 less x Zero
 false

Problem: synth_36
 Cons n l

Problem: synth_35
 less y n

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 2538 seconds
Lemmas:
Lemma candidate_1: forall (lf3 : natural), @eq natural   (if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) (Succ lf3) then Succ (if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ Zero else Zero) else if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ Zero else Zero) else if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) (Succ lf3) then Succ (if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ Zero else Zero) else if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ Zero else Zero)   lf3.
Lemma candidate_2: forall (lf3 : natural), @eq natural   (if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) (Succ lf3) then Succ Zero else Zero) else if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) (Succ lf3) then Succ Zero else Zero) else if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) (Succ lf3) then Succ Zero else Zero) else if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) (Succ lf3) then Succ Zero else Zero)   lf3.
Lemma candidate_3: forall (lf3 : natural), @eq natural   (if match lf3 with | Succ Zero => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)   lf3.
Lemma candidate_4: forall (lf3 : natural), @eq natural   (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ Zero => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ Zero => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)   lf3.
Lemma candidate_5: forall (lf3 : natural), @eq natural   (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ Zero => true | _ => false end then Succ Zero else Zero)   lf3.
Lemma candidate_6: forall (lf3 : natural), @eq natural (lf3) lf3.
Lemma candidate_7: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort (sort (sort lf2))) x).
Lemma candidate_8: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x)   (if lfeqb x (Succ x) then Succ (count lf2 x) else count lf2 x).
Lemma candidate_9: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (insort lf2 (Succ x)) x).
Lemma candidate_10: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort (sort lf2)) x).
Lemma candidate_11: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort lf2) x).
Lemma candidate_12: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count lf2 x).
Lemma candidate_13: forall (lf3 : natural) (y : natural) (x : natural), forall _ : not (@eq natural x y), @eq natural   (if match lf3 with | Succ Zero => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)   lf3.
Lemma candidate_14: forall (lf3 : natural) (y : natural) (x : natural), forall _ : not (@eq natural x y), @eq natural   (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ Zero => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ Zero => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)   lf3.
Lemma candidate_15: forall (lf3 : natural) (y : natural) (x : natural), forall _ : not (@eq natural x y), @eq natural   (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ Zero => true | _ => false end then Succ Zero else Zero)   lf3.
Lemma candidate_16: forall (lf3 : natural) (y : natural) (x : natural), forall _ : not (@eq natural x y), @eq natural (lf3) lf3.
Lemma candidate_17: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (count (insort lf4 (Succ x)) x).
Lemma candidate_18: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (count (sort (sort lf4)) x).
Lemma candidate_19: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x)   (if lfeqb x y then Succ (count lf4 x) else count lf4 x).
Lemma candidate_20: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (count (insort lf4 y) x).
Lemma candidate_21: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (count (sort lf4) x).
Lemma candidate_22: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (count lf4 x).
Lemma candidate_23: forall (y : natural) (lf4 : lst), @eq lst (Cons y lf4) (Cons y lf4).
Lemma candidate_24: forall (lf3 : natural), @eq natural   (if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) (Succ lf3) then Succ (if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ Zero else Zero) else if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ Zero else Zero) else if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) (Succ lf3) then Succ (if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ Zero else Zero) else if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ Zero else Zero)   lf3.
Lemma candidate_25: forall (lf3 : natural), @eq natural   (if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) (Succ lf3) then Succ Zero else Zero) else if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) (Succ lf3) then Succ Zero else Zero) else if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) (Succ lf3) then Succ Zero else Zero) else if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) (Succ lf3) then Succ Zero else Zero)   lf3.
Lemma candidate_26: forall (lf3 : natural), @eq natural   (if match lf3 with | Succ Zero => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)   lf3.
Lemma candidate_27: forall (lf3 : natural), @eq natural   (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ Zero => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ Zero => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)   lf3.
Lemma candidate_28: forall (lf3 : natural), @eq natural   (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ Zero => true | _ => false end then Succ Zero else Zero)   lf3.
Lemma candidate_29: forall (lf3 : natural), @eq natural (lf3) lf3.
Lemma candidate_30: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (count (insort lf4 (Succ x)) x).
Lemma candidate_31: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (count (sort (sort lf4)) x).
Lemma candidate_32: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x)   (if lfeqb x y then Succ (count lf4 x) else count lf4 x).
Lemma candidate_33: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (count (insort lf4 y) x).
Lemma candidate_34: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (count (sort lf4) x).
Lemma candidate_35: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (count lf4 x).
Lemma candidate_36: forall (y : natural) (lf4 : lst), @eq lst (Cons y lf4) (Cons y lf4).
Lemma candidate_37: forall (lf3 : natural) (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) lf3)         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) (less x x), @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma candidate_38: forall (lf3 : natural) (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) lf3)         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) (less lf3 Zero), @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma candidate_39: forall (lf3 : natural) (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) lf3)         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) (less n Zero), @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma candidate_40: forall (lf3 : natural) (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) lf3)         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) (less y Zero), @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma candidate_41: forall (lf3 : natural) (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) lf3)         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) (less x Zero), @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma candidate_42: forall (lf3 : natural) (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) lf3)         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) (false), @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma candidate_43: forall (lf3 : natural) (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) lf3)         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (if lfeqb x y then Succ (count l x) else count l x) lf3.
Lemma candidate_44: forall (lf3 : natural) (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) lf3)         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count (insort l n) x) lf3.
Lemma candidate_45: forall (lf3 : natural) (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) lf3)         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count (insort l y) x) lf3.
Lemma candidate_46: forall (lf3 : natural) (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) lf3)         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count (sort l) x) lf3.
Lemma candidate_47: forall (lf3 : natural) (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) lf3)         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count l x) lf3.
Lemma candidate_48: forall (lf3 : natural) (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) lf3)         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (lf3) lf3.
Lemma candidate_49: forall (lf3 : natural) (l : lst) (n : natural) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) lf3)         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma candidate_50: forall (lf3 : natural) (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) lf3)         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma candidate_51: forall (lf3 : natural) (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) lf3)         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma candidate_52: forall (lf3 : natural) (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) lf3)         (_ : @eq bool (less y n) true), @eq bool (less x x) false, @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma candidate_53: forall (lf3 : natural) (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) lf3)         (_ : @eq bool (less y n) true), @eq bool (less lf3 Zero) false, @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma candidate_54: forall (lf3 : natural) (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) lf3)         (_ : @eq bool (less y n) true), @eq bool (less n Zero) false, @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma candidate_55: forall (lf3 : natural) (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) lf3)         (_ : @eq bool (less y n) true), @eq bool (less y Zero) false, @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma candidate_56: forall (lf3 : natural) (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) lf3)         (_ : @eq bool (less y n) true), @eq bool (less x Zero) false, @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma candidate_57: forall (lf3 : natural) (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) lf3)         (_ : @eq bool (less y n) true), @eq bool (false) false, @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma candidate_58: forall (lf3 : natural) (l : lst) (n : natural) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (if lfeqb x y then Succ (count l x) else count l x)                lf3) (_ : @eq bool (less y n) true),       @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma candidate_59: forall (lf3 : natural) (l : lst) (n : natural) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l n) x) lf3)         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma candidate_60: forall (lf3 : natural) (l : lst) (n : natural) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) lf3)         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma candidate_61: forall (lf3 : natural) (l : lst) (n : natural) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (sort l) x) lf3)         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma candidate_62: forall (lf3 : natural) (l : lst) (n : natural) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y)) (_ : @eq natural (count l x) lf3)         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma candidate_63: forall (lf3 : natural) (l : lst) (n : natural) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y)) (_ : @eq natural (lf3) lf3)         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma candidate_64: forall (lf3 : natural) (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) lf3)         (_ : @eq bool (less y n) (less x (Succ x))),       @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma candidate_65: forall (lf3 : natural) (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) lf3)         (_ : @eq bool (less y n) (lfeqb lf3 lf3)),        @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma candidate_66: forall (lf3 : natural) (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) lf3)         (_ : @eq bool (less y n) (lfeqb n n)), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma candidate_67: forall (lf3 : natural) (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) lf3)         (_ : @eq bool (less y n) (lfeqb y y)), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma candidate_68: forall (lf3 : natural) (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) lf3)         (_ : @eq bool (less y n) (lfeqb x x)), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma candidate_69: forall (lf3 : natural) (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) lf3)         (_ : @eq bool (less y n) (true)), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma candidate_70: forall (lf3 : natural) (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) lf3)         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) lf3.
Lemma candidate_71: @eq bool false (false).
Lemma candidate_72: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x)   (if lfeqb x n then Succ (count l x) else count l x).
Lemma candidate_73: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x)   (if lfeqb x y then Succ (count l x) else count l x).
Lemma candidate_74: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (count (insort l n) x).
Lemma candidate_75: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (count (insort l y) x).
Lemma candidate_76: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (count (sort l) x).
Lemma candidate_77: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_78: forall (l : lst) (y : natural), @eq lst (insort l y) (insort l y).
Lemma candidate_79: forall (n : natural) (y : natural), @eq bool (less y n) (less y n).
Lemma candidate_80: forall (l : lst) (n : natural), @eq lst (Cons n l) (Cons n l).
Lemma candidate_81: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb x n).
Lemma candidate_82: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb n x).
Lemma candidate_83: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (less x x).
Lemma candidate_84: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (less n Zero).
Lemma candidate_85: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (less x Zero).
Lemma candidate_86: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (false).
Lemma candidate_87: forall (l : lst) (y : natural) (x : natural), @eq natural (count (insort l y) x) (count (insort l (Succ x)) x).
Lemma candidate_88: forall (l : lst) (y : natural) (x : natural), @eq natural (count (insort l y) x) (count (sort (sort l)) x).
Lemma candidate_89: forall (l : lst) (y : natural) (x : natural), @eq natural (count (insort l y) x)   (if lfeqb x y then Succ (count l x) else count l x).
Lemma candidate_90: forall (l : lst) (y : natural) (x : natural), @eq natural (count (insort l y) x) (count (insort l y) x).
Lemma candidate_91: forall (l : lst) (y : natural) (x : natural), @eq natural (count (insort l y) x) (count (sort l) x).
Lemma candidate_92: forall (l : lst) (y : natural) (x : natural), @eq natural (count (insort l y) x) (count l x).
Lemma candidate_93: @eq bool true (true).
Lemma candidate_94: forall (l : lst) (n : natural) (y : natural), @eq lst (Cons y (Cons n l)) (Cons y (Cons n l)).
Lemma candidate_95: forall (lf3 : natural), @eq natural   (if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) (Succ lf3) then Succ (if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ Zero else Zero) else if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ Zero else Zero) else if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) (Succ lf3) then Succ (if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ Zero else Zero) else if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ Zero else Zero)   lf3.
Lemma candidate_96: forall (lf3 : natural), @eq natural   (if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) (Succ lf3) then Succ Zero else Zero) else if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) (Succ lf3) then Succ Zero else Zero) else if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) lf3 then Succ (if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) (Succ lf3) then Succ Zero else Zero) else if lfeqb (if lfeqb lf3 lf3 then Succ (if lfeqb lf3 lf3 then Succ Zero else Zero) else if lfeqb lf3 lf3 then Succ Zero else Zero) (Succ lf3) then Succ Zero else Zero)   lf3.
Lemma candidate_97: forall (lf3 : natural), @eq natural   (if match lf3 with | Succ Zero => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)   lf3.
Lemma candidate_98: forall (lf3 : natural), @eq natural   (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ Zero => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ Zero => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)   lf3.
Lemma candidate_99: forall (lf3 : natural), @eq natural   (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf3 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf3 with | Succ Zero => true | _ => false end then Succ Zero else Zero)   lf3.
Lemma candidate_100: forall (lf3 : natural), @eq natural (lf3) lf3.
Lemma candidate_101: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x)   (if lfeqb x n then Succ (count l x) else count l x).
Lemma candidate_102: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x)   (if lfeqb x y then Succ (count l x) else count l x).
Lemma candidate_103: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (count (insort l n) x).
Lemma candidate_104: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (count (insort l y) x).
Lemma candidate_105: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (count (sort l) x).
Lemma candidate_106: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_107: forall (l : lst) (n : natural), @eq lst (Cons n l) (Cons n l).
Lemma candidate_108: forall (l : lst) (n : natural) (y : natural), @eq lst (Cons y (Cons n l)) (Cons y (Cons n l)).
Lemma candidate_109: forall (lf1 : natural), @eq natural lf1   (if lfeqb (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero) (Succ lf1) then Succ (if lfeqb (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero) lf1 then Succ Zero else Zero) else if lfeqb (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero) lf1 then Succ Zero else Zero) else if lfeqb (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero) (Succ lf1) then Succ (if lfeqb (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero) lf1 then Succ Zero else Zero) else if lfeqb (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero) lf1 then Succ Zero else Zero).
Lemma candidate_110: forall (lf1 : natural), @eq natural lf1   (if lfeqb (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero) (Succ lf1) then Succ Zero else Zero) else if lfeqb (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero) (Succ lf1) then Succ Zero else Zero) else if lfeqb (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero) lf1 then Succ (if lfeqb (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero) (Succ lf1) then Succ Zero else Zero) else if lfeqb (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero) (Succ lf1) then Succ Zero else Zero).
Lemma candidate_111: forall (lf1 : natural), @eq natural lf1   (if match lf1 with | Succ Zero => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero).
Lemma candidate_112: forall (lf1 : natural), @eq natural lf1   (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ Zero => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ Zero => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero).
Lemma candidate_113: forall (lf1 : natural), @eq natural lf1   (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ (if match lf1 with | Succ Zero => true | _ => false end then Succ Zero else Zero) else if match lf1 with | Succ Zero => true | _ => false end then Succ Zero else Zero).
Lemma candidate_114: forall (lf1 : natural), @eq natural lf1 (lf1).
Lemma candidate_115: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort (sort (sort l))) x).
Lemma candidate_116: forall (l : lst) (x : natural), @eq natural (count l x)   (if lfeqb x (Succ x) then Succ (count l x) else count l x).
Lemma candidate_117: forall (l : lst) (x : natural), @eq natural (count l x) (count (insort l (Succ x)) x).
Lemma candidate_118: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort (sort l)) x).
Lemma candidate_119: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort l) x).
Lemma candidate_120: forall (l : lst) (x : natural), @eq natural (count l x) (count l x).
Lemma candidate_121: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort (sort (sort lf2))) x).
Lemma candidate_122: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x)   (if lfeqb x (Succ x) then Succ (count lf2 x) else count lf2 x).
Lemma candidate_123: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (insort lf2 (Succ x)) x).
Lemma candidate_124: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort (sort lf2)) x).
Lemma candidate_125: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort lf2) x).
Lemma candidate_126: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count lf2 x).
Lemma candidate_127: forall (l : lst) (x : natural), @eq natural (count (sort (sort (sort l))) x) (count l x).
Lemma candidate_128: forall (l : lst) (x : natural), @eq natural (if lfeqb x (Succ x) then Succ (count l x) else count l x)   (count l x).
Lemma candidate_129: forall (l : lst) (x : natural), @eq natural (count (insort l (Succ x)) x) (count l x).
Lemma candidate_130: forall (l : lst) (x : natural), @eq natural (count (sort (sort l)) x) (count l x).
Lemma candidate_131: forall (l : lst) (x : natural), @eq natural (count (sort l) x) (count l x).
Lemma candidate_132: forall (l : lst) (x : natural), @eq natural (count l x) (count l x).
Lemma candidate_133: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort (sort (sort l))) x).
Lemma candidate_134: forall (l : lst) (x : natural), @eq natural (count l x)   (if lfeqb x (Succ x) then Succ (count l x) else count l x).
Lemma candidate_135: forall (l : lst) (x : natural), @eq natural (count l x) (count (insort l (Succ x)) x).
Lemma candidate_136: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort (sort l)) x).
Lemma candidate_137: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort l) x).
Lemma candidate_138: forall (l : lst) (x : natural), @eq natural (count l x) (count l x).
Lemma candidate_139: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort (sort (sort lf2))) x).
Lemma candidate_140: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x)   (if lfeqb x (Succ x) then Succ (count lf2 x) else count lf2 x).
Lemma candidate_141: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (insort lf2 (Succ x)) x).
Lemma candidate_142: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort (sort lf2)) x).
Lemma candidate_143: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort lf2) x).
Lemma candidate_144: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count lf2 x).
Lemma candidate_145: forall (l : lst) (y : natural) (x : natural), forall   _ : forall _ : not (@eq natural x y),       @eq natural (count (insort l y) x) (count l x), @eq natural (count (insort l (Succ x)) x) (count l x).
Lemma candidate_146: forall (l : lst) (y : natural) (x : natural), forall   _ : forall _ : not (@eq natural x y),       @eq natural (count (insort l y) x) (count l x), @eq natural (count (sort (sort l)) x) (count l x).
Lemma candidate_147: forall (l : lst) (y : natural) (x : natural), forall   _ : forall _ : not (@eq natural x y),       @eq natural (count (insort l y) x) (count l x), @eq natural (if lfeqb x y then Succ (count l x) else count l x) (count l x).
Lemma candidate_148: forall (l : lst) (y : natural) (x : natural), forall   _ : forall _ : not (@eq natural x y),       @eq natural (count (insort l y) x) (count l x), @eq natural (count (insort l y) x) (count l x).
Lemma candidate_149: forall (l : lst) (y : natural) (x : natural), forall   _ : forall _ : not (@eq natural x y),       @eq natural (count (insort l y) x) (count l x), @eq natural (count (sort l) x) (count l x).
Lemma candidate_150: forall (l : lst) (y : natural) (x : natural), forall   _ : forall _ : not (@eq natural x y),       @eq natural (count (insort l y) x) (count l x), @eq natural (count l x) (count l x).
Lemma candidate_151: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : forall _ : not (@eq natural x y),       @eq natural (count (insort l y) x) (count (insort l y) x), @eq natural (count (Cons y lf4) x) (count (insort l y) x).
Lemma candidate_152: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : forall _ : not (@eq natural x y),       @eq natural (count (insort l y) x) (count (insort lf4 y) x), @eq natural (count (Cons y lf4) x) (count (insort lf4 y) x).
Lemma candidate_153: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : forall _ : not (@eq natural x y),       @eq natural (count (insort l y) x) (count (sort l) x), @eq natural (count (Cons y lf4) x) (count (sort l) x).
Lemma candidate_154: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : forall _ : not (@eq natural x y),       @eq natural (count (insort l y) x) (count (sort lf4) x), @eq natural (count (Cons y lf4) x) (count (sort lf4) x).
Lemma candidate_155: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : forall _ : not (@eq natural x y),       @eq natural (count (insort l y) x) (count l x), @eq natural (count (Cons y lf4) x) (count l x).
Lemma candidate_156: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : forall _ : not (@eq natural x y),       @eq natural (count (insort l y) x) (count lf4 x), @eq natural (count (Cons y lf4) x) (count lf4 x).
Lemma candidate_157: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : forall _ : not (@eq natural x y),       @eq natural (count (insort l y) x) (count l x), @eq natural (count (Cons y lf4) x) (count l x).
Lemma candidate_158: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : forall _ : not (@eq natural x y),       @eq natural (count (insort l y) x) (count l x), @eq natural (count (Cons y lf4) x) (count l x).
Lemma candidate_159: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : forall _ : not (@eq natural x y),       @eq natural (count (insort lf4 y) x) (count l x), @eq natural (count (Cons y lf4) x) (count l x).
Lemma candidate_160: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : forall _ : not (@eq natural x y),       @eq natural (count (sort l) x) (count l x), @eq natural (count (Cons y lf4) x) (count l x).
Lemma candidate_161: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : forall _ : not (@eq natural x y),       @eq natural (count (sort lf4) x) (count l x), @eq natural (count (Cons y lf4) x) (count l x).
Lemma candidate_162: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : forall _ : not (@eq natural x y), @eq natural (count l x) (count l x), @eq natural (count (Cons y lf4) x) (count l x).
Lemma candidate_163: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : forall _ : not (@eq natural x y), @eq natural (count lf4 x) (count l x), @eq natural (count (Cons y lf4) x) (count l x).
Lemma candidate_164: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (count (insort lf4 (Succ x)) x).
Lemma candidate_165: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (count (sort (sort lf4)) x).
Lemma candidate_166: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x)   (if lfeqb x y then Succ (count lf4 x) else count lf4 x).
Lemma candidate_167: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (count (insort lf4 y) x).
Lemma candidate_168: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (count (sort lf4) x).
Lemma candidate_169: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (count lf4 x).
Lemma candidate_170: forall (y : natural) (lf4 : lst), @eq lst (Cons y lf4) (Cons y lf4).
Lemma candidate_171: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort (sort (sort l))) x).
Lemma candidate_172: forall (l : lst) (x : natural), @eq natural (count l x)   (if lfeqb x (Succ x) then Succ (count l x) else count l x).
Lemma candidate_173: forall (l : lst) (x : natural), @eq natural (count l x) (count (insort l (Succ x)) x).
Lemma candidate_174: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort (sort l)) x).
Lemma candidate_175: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort l) x).
Lemma candidate_176: forall (l : lst) (x : natural), @eq natural (count l x) (count l x).
Lemma candidate_177: forall (l : lst) (y : natural), @eq lst (insort l y) (insort l y).
Lemma candidate_178: forall (l : lst) (y : natural) (x : natural), @eq natural (count (insort l y) x) (count (insort l (Succ x)) x).
Lemma candidate_179: forall (l : lst) (y : natural) (x : natural), @eq natural (count (insort l y) x) (count (sort (sort l)) x).
Lemma candidate_180: forall (l : lst) (y : natural) (x : natural), @eq natural (count (insort l y) x)   (if lfeqb x y then Succ (count l x) else count l x).
Lemma candidate_181: forall (l : lst) (y : natural) (x : natural), @eq natural (count (insort l y) x) (count (insort l y) x).
Lemma candidate_182: forall (l : lst) (y : natural) (x : natural), @eq natural (count (insort l y) x) (count (sort l) x).
Lemma candidate_183: forall (l : lst) (y : natural) (x : natural), @eq natural (count (insort l y) x) (count l x).
Lemma candidate_184: forall (l : lst) (x : natural), @eq natural (count (sort (sort (sort l))) x) (count l x).
Lemma candidate_185: forall (l : lst) (x : natural), @eq natural (if lfeqb x (Succ x) then Succ (count l x) else count l x)   (count l x).
Lemma candidate_186: forall (l : lst) (x : natural), @eq natural (count (insort l (Succ x)) x) (count l x).
Lemma candidate_187: forall (l : lst) (x : natural), @eq natural (count (sort (sort l)) x) (count l x).
Lemma candidate_188: forall (l : lst) (x : natural), @eq natural (count (sort l) x) (count l x).
Lemma candidate_189: forall (l : lst) (x : natural), @eq natural (count l x) (count l x).
Lemma candidate_190: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (count (insort lf4 (Succ x)) x).
Lemma candidate_191: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (count (sort (sort lf4)) x).
Lemma candidate_192: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x)   (if lfeqb x y then Succ (count lf4 x) else count lf4 x).
Lemma candidate_193: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (count (insort lf4 y) x).
Lemma candidate_194: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (count (sort lf4) x).
Lemma candidate_195: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (count lf4 x).
Lemma candidate_196: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (count (insort lf4 (Succ x)) x).
Lemma candidate_197: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (count (sort (sort lf4)) x).
Lemma candidate_198: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x)   (if lfeqb x y then Succ (count lf4 x) else count lf4 x).
Lemma candidate_199: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (count (insort lf4 y) x).
Lemma candidate_200: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (count (sort lf4) x).
Lemma candidate_201: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (count lf4 x).
Lemma candidate_202: forall (y : natural) (lf4 : lst), @eq lst (Cons y lf4) (Cons y lf4).
Lemma candidate_203: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort (sort (sort l))) x).
Lemma candidate_204: forall (l : lst) (x : natural), @eq natural (count l x)   (if lfeqb x (Succ x) then Succ (count l x) else count l x).
Lemma candidate_205: forall (l : lst) (x : natural), @eq natural (count l x) (count (insort l (Succ x)) x).
Lemma candidate_206: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort (sort l)) x).
Lemma candidate_207: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort l) x).
Lemma candidate_208: forall (l : lst) (x : natural), @eq natural (count l x) (count l x).
Lemma candidate_209: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) (lfeqb y x), @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_210: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) (less x x), @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_211: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) (less n Zero), @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_212: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) (less y Zero), @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_213: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) (less x Zero), @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_214: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) (false), @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_215: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (if lfeqb x n then Succ (count l x) else count l x) (count l x).
Lemma candidate_216: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (if lfeqb x y then Succ (count l x) else count l x) (count l x).
Lemma candidate_217: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count (insort l n) x) (count l x).
Lemma candidate_218: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count (insort l y) x) (count l x).
Lemma candidate_219: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count (sort l) x) (count l x).
Lemma candidate_220: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count l x) (count l x).
Lemma candidate_221: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x)                (if lfeqb x n then Succ (count l x) else count l x))         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x)   (if lfeqb x n then Succ (count l x) else count l x).
Lemma candidate_222: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x)                (if lfeqb x y then Succ (count l x) else count l x))         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x)   (if lfeqb x y then Succ (count l x) else count l x).
Lemma candidate_223: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count (insort l n) x))         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) (count (insort l n) x).
Lemma candidate_224: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count (insort l y) x))         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) (count (insort l y) x).
Lemma candidate_225: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count (sort l) x))         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) (count (sort l) x).
Lemma candidate_226: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_227: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_228: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_229: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_230: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) true), @eq bool (lfeqb y x) false, @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_231: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) true), @eq bool (less x x) false, @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_232: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) true), @eq bool (less n Zero) false, @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_233: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) true), @eq bool (less y Zero) false, @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_234: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) true), @eq bool (less x Zero) false, @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_235: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) true), @eq bool (false) false, @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_236: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (if lfeqb x n then Succ (count l x) else count l x)                (count l x)) (_ : @eq bool (less y n) true),       @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_237: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (if lfeqb x y then Succ (count l x) else count l x)                (count l x)) (_ : @eq bool (less y n) true),       @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_238: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l n) x) (count l x))         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_239: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_240: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (sort l) x) (count l x))         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_241: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count l x) (count l x))         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_242: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) (less y (Succ y))),       @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_243: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) (less x (Succ x))),       @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_244: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) (lfeqb n n)), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_245: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) (lfeqb y y)), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_246: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) (lfeqb x x)), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_247: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) (true)), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_248: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_249: @eq bool false (false).
Lemma candidate_250: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x)   (if lfeqb x n then Succ (count l x) else count l x).
Lemma candidate_251: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x)   (if lfeqb x y then Succ (count l x) else count l x).
Lemma candidate_252: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (count (insort l n) x).
Lemma candidate_253: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (count (insort l y) x).
Lemma candidate_254: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (count (sort l) x).
Lemma candidate_255: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_256: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort (sort (sort l))) x).
Lemma candidate_257: forall (l : lst) (x : natural), @eq natural (count l x)   (if lfeqb x (Succ x) then Succ (count l x) else count l x).
Lemma candidate_258: forall (l : lst) (x : natural), @eq natural (count l x) (count (insort l (Succ x)) x).
Lemma candidate_259: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort (sort l)) x).
Lemma candidate_260: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort l) x).
Lemma candidate_261: forall (l : lst) (x : natural), @eq natural (count l x) (count l x).
Lemma candidate_262: forall (l : lst) (y : natural), @eq lst (insort l y) (insort l y).
Lemma candidate_263: forall (n : natural) (y : natural), @eq bool (less y n) (less y n).
Lemma candidate_264: forall (l : lst) (n : natural), @eq lst (Cons n l) (Cons n l).
Lemma candidate_265: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb x n).
Lemma candidate_266: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb n x).
Lemma candidate_267: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (less x x).
Lemma candidate_268: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (less n Zero).
Lemma candidate_269: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (less x Zero).
Lemma candidate_270: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (false).
Lemma candidate_271: forall (l : lst) (y : natural) (x : natural), @eq natural (count (insort l y) x) (count (insort l (Succ x)) x).
Lemma candidate_272: forall (l : lst) (y : natural) (x : natural), @eq natural (count (insort l y) x) (count (sort (sort l)) x).
Lemma candidate_273: forall (l : lst) (y : natural) (x : natural), @eq natural (count (insort l y) x)   (if lfeqb x y then Succ (count l x) else count l x).
Lemma candidate_274: forall (l : lst) (y : natural) (x : natural), @eq natural (count (insort l y) x) (count (insort l y) x).
Lemma candidate_275: forall (l : lst) (y : natural) (x : natural), @eq natural (count (insort l y) x) (count (sort l) x).
Lemma candidate_276: forall (l : lst) (y : natural) (x : natural), @eq natural (count (insort l y) x) (count l x).
Lemma candidate_277: @eq bool true (true).
Lemma candidate_278: forall (l : lst) (n : natural) (y : natural), @eq lst (Cons y (Cons n l)) (Cons y (Cons n l)).
Lemma candidate_279: forall (l : lst) (x : natural), @eq natural (count (sort (sort (sort l))) x) (count l x).
Lemma candidate_280: forall (l : lst) (x : natural), @eq natural (if lfeqb x (Succ x) then Succ (count l x) else count l x)   (count l x).
Lemma candidate_281: forall (l : lst) (x : natural), @eq natural (count (insort l (Succ x)) x) (count l x).
Lemma candidate_282: forall (l : lst) (x : natural), @eq natural (count (sort (sort l)) x) (count l x).
Lemma candidate_283: forall (l : lst) (x : natural), @eq natural (count (sort l) x) (count l x).
Lemma candidate_284: forall (l : lst) (x : natural), @eq natural (count l x) (count l x).
Lemma candidate_285: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x)   (if lfeqb x n then Succ (count l x) else count l x).
Lemma candidate_286: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x)   (if lfeqb x y then Succ (count l x) else count l x).
Lemma candidate_287: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (count (insort l n) x).
Lemma candidate_288: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (count (insort l y) x).
Lemma candidate_289: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (count (sort l) x).
Lemma candidate_290: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_291: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x)   (if lfeqb x n then Succ (count l x) else count l x).
Lemma candidate_292: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x)   (if lfeqb x y then Succ (count l x) else count l x).
Lemma candidate_293: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (count (insort l n) x).
Lemma candidate_294: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (count (insort l y) x).
Lemma candidate_295: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (count (sort l) x).
Lemma candidate_296: forall (l : lst) (n : natural) (y : natural) (x : natural), @eq natural (count (Cons y (Cons n l)) x) (count l x).
Lemma candidate_297: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort (sort (sort l))) x).
Lemma candidate_298: forall (l : lst) (x : natural), @eq natural (count l x)   (if lfeqb x (Succ x) then Succ (count l x) else count l x).
Lemma candidate_299: forall (l : lst) (x : natural), @eq natural (count l x) (count (insort l (Succ x)) x).
Lemma candidate_300: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort (sort l)) x).
Lemma candidate_301: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort l) x).
Lemma candidate_302: forall (l : lst) (x : natural), @eq natural (count l x) (count l x).
Lemma candidate_303: forall (l : lst) (n : natural), @eq lst (Cons n l) (Cons n l).
Lemma candidate_304: forall (l : lst) (n : natural) (y : natural), @eq lst (Cons y (Cons n l)) (Cons y (Cons n l)).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 3065 seconds
Duplicates removed: 159
Filtered by Quickchick: 104
Filtered by script: 18
Remaining: 23

Lemmas: 
Lemma candidate_82: forall (n : natural) (x : natural), @eq bool (lfeqb x n) (lfeqb n x).
Lemma candidate_131: forall (l : lst) (x : natural), @eq natural (count (sort l) x) (count l x).
Lemma candidate_119: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort l) x).
Lemma candidate_11: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort lf2) x).
Lemma candidate_130: forall (l : lst) (x : natural), @eq natural (count (sort (sort l)) x) (count l x).
Lemma candidate_118: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort (sort l)) x).
Lemma candidate_129: forall (l : lst) (x : natural), @eq natural (count (insort l (Succ x)) x) (count l x).
Lemma candidate_117: forall (l : lst) (x : natural), @eq natural (count l x) (count (insort l (Succ x)) x).
Lemma candidate_10: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort (sort lf2)) x).
Lemma candidate_127: forall (l : lst) (x : natural), @eq natural (count (sort (sort (sort l))) x) (count l x).
Lemma candidate_115: forall (l : lst) (x : natural), @eq natural (count l x) (count (sort (sort (sort l))) x).
Lemma candidate_9: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (insort lf2 (Succ x)) x).
Lemma candidate_20: forall (y : natural) (lf4 : lst) (x : natural), @eq natural (count (Cons y lf4) x) (count (insort lf4 y) x).
Lemma candidate_7: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort (sort (sort lf2))) x).
Lemma candidate_128: forall (l : lst) (x : natural), @eq natural (if lfeqb x (Succ x) then Succ (count l x) else count l x)   (count l x).
Lemma candidate_116: forall (l : lst) (x : natural), @eq natural (count l x)   (if lfeqb x (Succ x) then Succ (count l x) else count l x).
Lemma candidate_89: forall (l : lst) (y : natural) (x : natural), @eq natural (count (insort l y) x)   (if lfeqb x y then Succ (count l x) else count l x).
Lemma candidate_8: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x)   (if lfeqb x (Succ x) then Succ (count lf2 x) else count lf2 x).
Lemma candidate_149: forall (l : lst) (y : natural) (x : natural), forall   _ : forall _ : not (@eq natural x y),       @eq natural (count (insort l y) x) (count l x), @eq natural (count (sort l) x) (count l x).
Lemma candidate_146: forall (l : lst) (y : natural) (x : natural), forall   _ : forall _ : not (@eq natural x y),       @eq natural (count (insort l y) x) (count l x), @eq natural (count (sort (sort l)) x) (count l x).
Lemma candidate_145: forall (l : lst) (y : natural) (x : natural), forall   _ : forall _ : not (@eq natural x y),       @eq natural (count (insort l y) x) (count l x), @eq natural (count (insort l (Succ x)) x) (count l x).
Lemma candidate_152: forall (l : lst) (y : natural) (lf4 : lst) (x : natural), forall   _ : forall _ : not (@eq natural x y),       @eq natural (count (insort l y) x) (count (insort lf4 y) x), @eq natural (count (Cons y lf4) x) (count (insort lf4 y) x).
Lemma candidate_219: forall (n : natural) (l : lst) (y : natural) (x : natural), forall   _ : forall (_ : not (@eq natural x y))         (_ : @eq natural (count (insort l y) x) (count l x))         (_ : @eq bool (less y n) true), @eq bool (lfeqb x n) false, @eq natural (count (sort l) x) (count l x).