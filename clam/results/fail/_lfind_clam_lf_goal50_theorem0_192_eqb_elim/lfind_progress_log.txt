File Information
- File name: goal50
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal50_theorem0_192_eqb_elim
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal50_theorem0_192_eqb_elim
- Namespace: adtind
- Proof name: theorem0
- Theorem: Theorem theorem0: forall (x0 : natural) (y0 : lst),
@eq natural (count (sort y0) x0) (count y0 x0).
- Declarations: 
From lfind Require Import LFind.
Require Import Arith.

Proof Context
* Goal State: @eq natural (count (insort (sort y) n) x) (Succ (count y x))

* Hypothesis:
x : natural
y : lst
n : natural
E : Bool.Is_true (lfeqb x n)
IHy : @eq natural (count (sort y) x) (count y x)

* Types:
Set
natural
Prop
lst
bool

* Polymorphic Types:


* Variables:
x : natural
y : lst
n : natural

* Terms:
@eq natural (count (sort y) x) (count y x) : Prop
Bool.Is_true (lfeqb x n) : Prop
count (insort (sort y) n) x : natural
x : natural
sort y : lst
count (sort y) x : natural
insort (sort y) n : lst
@eq natural (count (insort (sort y) n) x) (Succ (count y x)) : Prop
count y x : natural
y : lst
lst : Set
lfeqb x n : bool
natural : Set
n : natural
Succ (count y x) : natural

* Functions:
sort  : forall _ : lst, lst
Succ  : forall _ : natural, natural
count  : forall (_ : lst) (_ : natural), natural
lfeqb  : forall (_ : natural) (_ : natural), bool
Bool.Is_true  : forall _ : bool, Prop
insort  : forall (_ : lst) (_ : natural), lst
@eq  : forall (A : Type) (_ : A) (_ : A), Prop

<---GENERALIZATION--->
Time elapsed: 2 seconds
Generalized Variables:
lf3 : natural = Succ (count y x)
lf1 : natural = count (insort (sort y) n) x
lf4 : natural = count y x
lf5 : lst = sort y
lf2 : lst = insort (sort y) n

Generalizations:
Lemma conj1: forall (lf1 : natural) (lf3 : natural), @eq natural lf1 lf3.
Lemma conj9: forall (lf2 : lst) (x : natural) (lf3 : natural), @eq natural (count lf2 x) lf3.
Lemma conj10: forall (lf5 : lst) (x : natural) (n : natural) (lf3 : natural), @eq natural (count (insort lf5 n) x) lf3.
Lemma conj12: forall (x : natural) (y : lst) (n : natural) (lf3 : natural), @eq natural (count (insort (sort y) n) x) lf3.
Lemma conj17: forall (lf4 : natural) (lf1 : natural), @eq natural lf1 (Succ lf4).
Lemma conj21: forall (x : natural) (lf1 : natural) (y : lst), @eq natural lf1 (Succ (count y x)).
Lemma conj25: forall (lf2 : lst) (x : natural) (lf4 : natural), @eq natural (count lf2 x) (Succ lf4).
Lemma conj26: forall (lf5 : lst) (x : natural) (lf4 : natural) (n : natural), @eq natural (count (insort lf5 n) x) (Succ lf4).
Lemma conj28: forall (x : natural) (lf4 : natural) (y : lst) (n : natural), @eq natural (count (insort (sort y) n) x) (Succ lf4).
Lemma conj29: forall (lf2 : lst) (x : natural) (y : lst), @eq natural (count lf2 x) (Succ (count y x)).
Lemma conj30: forall (lf5 : lst) (x : natural) (y : lst) (n : natural), @eq natural (count (insort lf5 n) x) (Succ (count y x)).
Lemma conj32: forall (x : natural) (y : lst) (n : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y x)).


<---VALIDITY CHECKS--->
Time elapsed: 36 seconds
Valid:

Invalid:
Lemma conj32: forall (x : natural) (y : lst) (n : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y x)).
Lemma conj30: forall (lf5 : lst) (x : natural) (y : lst) (n : natural), @eq natural (count (insort lf5 n) x) (Succ (count y x)).
Lemma conj29: forall (lf2 : lst) (x : natural) (y : lst), @eq natural (count lf2 x) (Succ (count y x)).
Lemma conj28: forall (x : natural) (lf4 : natural) (y : lst) (n : natural), @eq natural (count (insort (sort y) n) x) (Succ lf4).
Lemma conj26: forall (lf5 : lst) (x : natural) (lf4 : natural) (n : natural), @eq natural (count (insort lf5 n) x) (Succ lf4).
Lemma conj25: forall (lf2 : lst) (x : natural) (lf4 : natural), @eq natural (count lf2 x) (Succ lf4).
Lemma conj21: forall (x : natural) (lf1 : natural) (y : lst), @eq natural lf1 (Succ (count y x)).
Lemma conj17: forall (lf4 : natural) (lf1 : natural), @eq natural lf1 (Succ lf4).
Lemma conj12: forall (x : natural) (y : lst) (n : natural) (lf3 : natural), @eq natural (count (insort (sort y) n) x) lf3.
Lemma conj10: forall (lf5 : lst) (x : natural) (n : natural) (lf3 : natural), @eq natural (count (insort lf5 n) x) lf3.
Lemma conj9: forall (lf2 : lst) (x : natural) (lf3 : natural), @eq natural (count lf2 x) lf3.
Lemma conj1: forall (lf1 : natural) (lf3 : natural), @eq natural lf1 lf3.

<---ADD IMPLICATIONS--->
Time elapsed: 66 seconds
Generalizations:
Lemma conj32: forall (x : natural) (y : lst) (n : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y x)).
Lemma conj30: forall (lf5 : lst) (x : natural) (y : lst) (n : natural), @eq natural (count (insort lf5 n) x) (Succ (count y x)).
Lemma conj29: forall (lf2 : lst) (x : natural) (y : lst), @eq natural (count lf2 x) (Succ (count y x)).
Lemma conj28: forall (x : natural) (lf4 : natural) (y : lst) (n : natural), @eq natural (count (insort (sort y) n) x) (Succ lf4).
Lemma conj26: forall (lf5 : lst) (x : natural) (lf4 : natural) (n : natural), @eq natural (count (insort lf5 n) x) (Succ lf4).
Lemma conj25: forall (lf2 : lst) (x : natural) (lf4 : natural), @eq natural (count lf2 x) (Succ lf4).
Lemma conj21: forall (x : natural) (lf1 : natural) (y : lst), @eq natural lf1 (Succ (count y x)).
Lemma conj17: forall (lf4 : natural) (lf1 : natural), @eq natural lf1 (Succ lf4).
Lemma conj12: forall (x : natural) (y : lst) (n : natural) (lf3 : natural), @eq natural (count (insort (sort y) n) x) lf3.
Lemma conj10: forall (lf5 : lst) (x : natural) (n : natural) (lf3 : natural), @eq natural (count (insort lf5 n) x) lf3.
Lemma conj9: forall (lf2 : lst) (x : natural) (lf3 : natural), @eq natural (count lf2 x) lf3.
Lemma conj1: forall (lf1 : natural) (lf3 : natural), @eq natural lf1 lf3.


<---VALIDITY CHECKS--->
Time elapsed: 95 seconds
Valid:

Invalid:
Lemma conj1: forall (lf1 : natural) (lf3 : natural), @eq natural lf1 lf3.
Lemma conj9: forall (lf2 : lst) (x : natural) (lf3 : natural), @eq natural (count lf2 x) lf3.
Lemma conj10: forall (lf5 : lst) (x : natural) (n : natural) (lf3 : natural), @eq natural (count (insort lf5 n) x) lf3.
Lemma conj12: forall (x : natural) (y : lst) (n : natural) (lf3 : natural), @eq natural (count (insort (sort y) n) x) lf3.
Lemma conj17: forall (lf4 : natural) (lf1 : natural), @eq natural lf1 (Succ lf4).
Lemma conj21: forall (x : natural) (lf1 : natural) (y : lst), @eq natural lf1 (Succ (count y x)).
Lemma conj25: forall (lf2 : lst) (x : natural) (lf4 : natural), @eq natural (count lf2 x) (Succ lf4).
Lemma conj26: forall (lf5 : lst) (x : natural) (lf4 : natural) (n : natural), @eq natural (count (insort lf5 n) x) (Succ lf4).
Lemma conj28: forall (x : natural) (lf4 : natural) (y : lst) (n : natural), @eq natural (count (insort (sort y) n) x) (Succ lf4).
Lemma conj29: forall (lf2 : lst) (x : natural) (y : lst), @eq natural (count lf2 x) (Succ (count y x)).
Lemma conj30: forall (lf5 : lst) (x : natural) (y : lst) (n : natural), @eq natural (count (insort lf5 n) x) (Succ (count y x)).
Lemma conj32: forall (x : natural) (y : lst) (n : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y x)).


<---CREATE SKETCHES--->
Time elapsed: 95 seconds
Sketches:
Sketch conj9_sketch0 : @eq natural (##hole##) lf3
Sketch conj9_term_sketch0 : @eq natural (count lf2 x) (##hole##)
Sketch conj10_sketch0 : @eq natural (count (##hole##) x) lf3
Sketch conj10_sketch1 : @eq natural (##hole##) lf3
Sketch conj10_term_sketch0 : @eq lst (insort lf5 n) (##hole##)
Sketch conj10_term_sketch1 : @eq natural (count (insort lf5 n) x) (##hole##)
Sketch conj12_sketch0 : @eq natural (##hole##) lf3
Sketch conj12_sketch1 : @eq natural (count (insort (##hole##) n) x) lf3
Sketch conj12_sketch2 : @eq natural (count (##hole##) x) lf3
Sketch conj12_term_sketch0 : @eq natural (count (insort (sort y) n) x) (##hole##)
Sketch conj12_term_sketch1 : @eq lst (sort y) (##hole##)
Sketch conj12_term_sketch2 : @eq lst (insort (sort y) n) (##hole##)
Sketch conj17_sketch0 : @eq natural lf1 (##hole##)
Sketch conj17_term_sketch0 : @eq natural (Succ lf4) (##hole##)
Sketch conj21_sketch0 : @eq natural lf1 (Succ (##hole##))
Sketch conj21_sketch1 : @eq natural lf1 (##hole##)
Sketch conj21_term_sketch0 : @eq natural (count y x) (##hole##)
Sketch conj21_term_sketch1 : @eq natural (Succ (count y x)) (##hole##)
Sketch conj25_sketch0 : @eq natural (count lf2 x) (##hole##)
Sketch conj25_sketch1 : @eq natural (##hole##) (Succ lf4)
Sketch conj25_term_sketch0 : @eq natural (Succ lf4) (##hole##)
Sketch conj25_term_sketch1 : @eq natural (count lf2 x) (##hole##)
Sketch conj26_sketch0 : @eq natural (count (##hole##) x) (Succ lf4)
Sketch conj26_sketch1 : @eq natural (count (insort lf5 n) x) (##hole##)
Sketch conj26_sketch2 : @eq natural (##hole##) (Succ lf4)
Sketch conj26_term_sketch0 : @eq lst (insort lf5 n) (##hole##)
Sketch conj26_term_sketch1 : @eq natural (Succ lf4) (##hole##)
Sketch conj26_term_sketch2 : @eq natural (count (insort lf5 n) x) (##hole##)
Sketch conj28_sketch0 : @eq natural (##hole##) (Succ lf4)
Sketch conj28_sketch1 : @eq natural (count (insort (##hole##) n) x) (Succ lf4)
Sketch conj28_sketch2 : @eq natural (count (##hole##) x) (Succ lf4)
Sketch conj28_sketch3 : @eq natural (count (insort (sort y) n) x) (##hole##)
Sketch conj28_term_sketch0 : @eq natural (count (insort (sort y) n) x) (##hole##)
Sketch conj28_term_sketch1 : @eq lst (sort y) (##hole##)
Sketch conj28_term_sketch2 : @eq lst (insort (sort y) n) (##hole##)
Sketch conj28_term_sketch3 : @eq natural (Succ lf4) (##hole##)
Sketch conj29_sketch0 : @eq natural (count lf2 x) (Succ (##hole##))
Sketch conj29_sketch1 : @eq natural (count lf2 x) (##hole##)
Sketch conj29_sketch2 : @eq natural (##hole##) (Succ (count y x))
Sketch conj29_term_sketch0 : @eq natural (count y x) (##hole##)
Sketch conj29_term_sketch1 : @eq natural (Succ (count y x)) (##hole##)
Sketch conj29_term_sketch2 : @eq natural (count lf2 x) (##hole##)
Sketch conj30_sketch0 : @eq natural (count (insort lf5 n) x) (Succ (##hole##))
Sketch conj30_sketch1 : @eq natural (count (##hole##) x) (Succ (count y x))
Sketch conj30_sketch2 : @eq natural (count (insort lf5 n) x) (##hole##)
Sketch conj30_sketch3 : @eq natural (##hole##) (Succ (count y x))
Sketch conj30_term_sketch0 : @eq natural (count y x) (##hole##)
Sketch conj30_term_sketch1 : @eq lst (insort lf5 n) (##hole##)
Sketch conj30_term_sketch2 : @eq natural (Succ (count y x)) (##hole##)
Sketch conj30_term_sketch3 : @eq natural (count (insort lf5 n) x) (##hole##)
Sketch conj32_sketch0 : @eq natural (##hole##) (Succ (count y x))
Sketch conj32_sketch1 : @eq natural (count (insort (##hole##) n) x) (Succ (count y x))
Sketch conj32_sketch2 : @eq natural (count (##hole##) x) (Succ (count y x))
Sketch conj32_sketch3 : @eq natural (count (insort (sort y) n) x) (Succ (##hole##))
Sketch conj32_sketch4 : @eq natural (count (insort (sort y) n) x) (##hole##)
Sketch conj32_term_sketch0 : @eq natural (count (insort (sort y) n) x) (##hole##)
Sketch conj32_term_sketch1 : @eq lst (sort y) (##hole##)
Sketch conj32_term_sketch2 : @eq lst (insort (sort y) n) (##hole##)
Sketch conj32_term_sketch3 : @eq natural (count y x) (##hole##)
Sketch conj32_term_sketch4 : @eq natural (Succ (count y x)) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 164 seconds
Problems per Sketch:
Sketch conj32_term_sketch4 --> Problem  synth_14
Sketch conj30_sketch0 --> Problem  synth_23
Sketch conj12_sketch0 --> Problem  synth_1
Sketch conj28_sketch0 --> Problem  synth_16
Sketch conj26_term_sketch1 --> Problem  synth_11
Sketch conj26_sketch2 --> Problem  synth_16
Sketch conj25_sketch1 --> Problem  synth_16
Sketch conj17_sketch0 --> Problem  synth_10
Sketch conj10_term_sketch1 --> Problem  synth_5
Sketch conj30_sketch3 --> Problem  synth_22
Sketch conj29_term_sketch2 --> Problem  synth_2
Sketch conj25_term_sketch1 --> Problem  synth_2
Sketch conj30_sketch1 --> Problem  synth_24
Sketch conj26_sketch0 --> Problem  synth_17
Sketch conj30_term_sketch3 --> Problem  synth_5
Sketch conj17_term_sketch0 --> Problem  synth_11
Sketch conj28_term_sketch1 --> Problem  synth_8
Sketch conj21_term_sketch1 --> Problem  synth_14
Sketch conj12_term_sketch1 --> Problem  synth_8
Sketch conj9_sketch0 --> Problem  synth_1
Sketch conj26_term_sketch2 --> Problem  synth_5
Sketch conj12_term_sketch0 --> Problem  synth_7
Sketch conj26_sketch1 --> Problem  synth_18
Sketch conj32_sketch0 --> Problem  synth_22
Sketch conj30_sketch2 --> Problem  synth_18
Sketch conj29_term_sketch0 --> Problem  synth_13
Sketch conj28_term_sketch0 --> Problem  synth_7
Sketch conj10_sketch1 --> Problem  synth_1
Sketch conj9_term_sketch0 --> Problem  synth_2
Sketch conj28_term_sketch3 --> Problem  synth_11
Sketch conj32_term_sketch0 --> Problem  synth_7
Sketch conj12_sketch1 --> Problem  synth_6
Sketch conj21_term_sketch0 --> Problem  synth_13
Sketch conj30_term_sketch2 --> Problem  synth_14
Sketch conj12_sketch2 --> Problem  synth_3
Sketch conj10_term_sketch0 --> Problem  synth_4
Sketch conj32_sketch3 --> Problem  synth_26
Sketch conj32_term_sketch3 --> Problem  synth_13
Sketch conj29_sketch0 --> Problem  synth_21
Sketch conj28_sketch2 --> Problem  synth_17
Sketch conj28_sketch3 --> Problem  synth_20
Sketch conj25_sketch0 --> Problem  synth_15
Sketch conj21_sketch0 --> Problem  synth_12
Sketch conj26_term_sketch0 --> Problem  synth_4
Sketch conj30_term_sketch1 --> Problem  synth_4
Sketch conj28_sketch1 --> Problem  synth_19
Sketch conj32_sketch4 --> Problem  synth_20
Sketch conj21_sketch1 --> Problem  synth_10
Sketch conj32_term_sketch1 --> Problem  synth_8
Sketch conj28_term_sketch2 --> Problem  synth_9
Sketch conj30_term_sketch0 --> Problem  synth_13
Sketch conj32_term_sketch2 --> Problem  synth_9
Sketch conj29_term_sketch1 --> Problem  synth_14
Sketch conj12_term_sketch2 --> Problem  synth_9
Sketch conj29_sketch2 --> Problem  synth_22
Sketch conj25_term_sketch0 --> Problem  synth_11
Sketch conj10_sketch0 --> Problem  synth_3
Sketch conj29_sketch1 --> Problem  synth_15
Sketch conj32_sketch2 --> Problem  synth_24
Sketch conj32_sketch1 --> Problem  synth_25


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 246 seconds

Problem: synth_22
 count (insort y Zero) x
 if lfeqb x Zero then Succ Zero else Zero
 if match x with | Succ _ => false | Zero => true end then Succ (count (sort y) Zero) else count (sort y) Zero
 if match x with | Succ _ => false | Zero => true end then Succ (count y Zero) else count y Zero
 count (insort y x) Zero
 if match x with | Succ _ => false | Zero => true end then Succ Zero else Zero

Problem: synth_20
 Succ (count y (Succ Zero))
 Succ (count y n)
 Succ (count y x)
 Succ (count y Zero)
 Succ n
 Succ Zero

Problem: synth_18
 Succ (count lf5 (Succ Zero))
 Succ (count lf5 n)
 Succ (count lf5 x)
 Succ (count lf5 Zero)
 Succ n
 Succ Zero

Problem: synth_17
 Cons (if lfeqb lf4 (Succ lf4) then Succ Zero else Zero) Nil
 Cons (if lfeqb lf4 (Succ x) then Succ Zero else Zero) Nil
 Cons (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) Nil
 Cons (if lfeqb x (Succ x) then Succ Zero else Zero) Nil
 Cons lf4 Nil
 Cons Zero Nil

Problem: synth_21
 count lf2 (count lf2 Zero)
 count (sort lf2) (Succ x)
 count (sort lf2) (Succ Zero)
 count lf2 (Succ x)
 count lf2 (Succ Zero)
 Zero

Problem: synth_26
 count y (Succ Zero)
 count y n
 count y x
 count y Zero
 n
 Zero

Problem: synth_9
 Cons n y
 Cons Zero y
 insort y n
 Cons n Nil
 insort y Zero
 Cons Zero Nil

Problem: synth_25
 sort (sort (sort (sort y)))
 sort (sort (sort y))
 sort (sort y)
 sort y
 y
 Nil

Problem: synth_13
 count (sort y) Zero
 count y (Succ x)
 count y (Succ Zero)
 count y x
 count y Zero
 Zero

Problem: synth_6
 Nil

Problem: synth_11
 if lfeqb lf4 Zero then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero
 if lfeqb lf4 lf4 then Succ Zero else Zero
 if lfeqb lf4 Zero then Succ Zero else Zero
 if match lf4 with | Succ _ => false | Zero => true end then Succ Zero else Zero
 Succ lf4
 Succ Zero

Problem: synth_7
 count (insort y Zero) x
 if lfeqb x Zero then Succ Zero else Zero
 if match x with | Succ _ => false | Zero => true end then Succ (count (sort y) Zero) else count (sort y) Zero
 if match x with | Succ _ => false | Zero => true end then Succ (count y Zero) else count y Zero
 count (insort y x) Zero
 if match x with | Succ _ => false | Zero => true end then Succ Zero else Zero

Problem: synth_4
 Cons n lf5
 Cons Zero lf5
 insort lf5 n
 Cons n Nil
 insort lf5 Zero
 Cons Zero Nil

Problem: synth_1

Problem: synth_23
 count lf5 (Succ Zero)
 count lf5 n
 count lf5 x
 count lf5 Zero
 n
 Zero

Problem: synth_16

Problem: synth_19
 Nil

Problem: synth_15
 count lf2 (count lf2 (Succ Zero))
 Succ (count lf2 (Succ x))
 Succ (count lf2 (Succ Zero))
 count (sort lf2) Zero
 count lf2 Zero
 Succ Zero

Problem: synth_14
 count (insort y Zero) Zero
 Succ (count y (Succ x))
 Succ (count y (Succ Zero))
 Succ (count y x)
 Succ (count y Zero)
 Succ Zero

Problem: synth_10
 if lfeqb lf1 (Succ lf1) then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero
 if lfeqb lf1 (Succ Zero) then Succ (if lfeqb lf1 Zero then Succ Zero else Zero) else if lfeqb lf1 Zero then Succ Zero else Zero
 if lfeqb lf1 lf1 then Succ (if lfeqb lf1 (Succ lf1) then Succ Zero else Zero) else if lfeqb lf1 (Succ lf1) then Succ Zero else Zero
 if lfeqb lf1 Zero then Succ (if lfeqb lf1 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf1 (Succ Zero) then Succ Zero else Zero
 if lfeqb lf1 lf1 then Succ Zero else Zero
 Succ Zero

Problem: synth_8
 sort (sort (sort (sort y)))
 sort (sort (sort y))
 sort (sort y)
 sort y
 y
 Nil

Problem: synth_24
 sort (insort y Zero)
 insort (sort y) Zero
 Cons Zero (sort y)
 Cons Zero y
 insort y Zero
 Cons Zero Nil

Problem: synth_3
 Cons (if lfeqb lf3 (Succ lf3) then Succ Zero else Zero) Nil
 Cons (if lfeqb lf3 Zero then Succ Zero else Zero) Nil
 Cons (if lfeqb x (Succ lf3) then Succ Zero else Zero) Nil
 Cons (if lfeqb x (Succ x) then Succ Zero else Zero) Nil
 Cons (if match lf3 with | Succ _ => false | Zero => true end then Succ Zero else Zero) Nil
 Cons Zero Nil

Problem: synth_12
 if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero
 if match lf1 with | Succ (Succ m'0) => lfeqb lf1 m'0 | _ => false end then Succ Zero else Zero
 if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero
 if match lf1 with | Succ m' => lfeqb lf1 m' | Zero => false end then Succ Zero else Zero
 if lfeqb lf1 (Succ lf1) then Succ Zero else Zero
 Zero

Problem: synth_5
 count (insort lf5 Zero) x
 if lfeqb x Zero then Succ Zero else Zero
 if match x with | Succ _ => false | Zero => true end then Succ (count (sort lf5) Zero) else count (sort lf5) Zero
 if match x with | Succ _ => false | Zero => true end then Succ (count lf5 Zero) else count lf5 Zero
 count (insort lf5 x) Zero
 if match x with | Succ _ => false | Zero => true end then Succ Zero else Zero

Problem: synth_2
 count (insort lf2 (Succ x)) x
 count (sort (sort lf2)) x
 if lfeqb x Zero then Succ Zero else Zero
 if match x with | Succ _ => false | Zero => true end then Succ Zero else Zero
 count (sort lf2) x
 count lf2 x

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 247 seconds
Lemmas:
Lemma candidate_1: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (insort lf2 (Succ x)) x).
Lemma candidate_2: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort (sort lf2)) x).
Lemma candidate_3: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (if lfeqb x Zero then Succ Zero else Zero).
Lemma candidate_4: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x)   (if match x with | Succ _ => false | Zero => true end then Succ Zero else Zero).
Lemma candidate_5: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort lf2) x).
Lemma candidate_6: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count lf2 x).
Lemma candidate_7: forall (lf3 : natural) (x : natural), @eq natural   (count (Cons (if lfeqb lf3 (Succ lf3) then Succ Zero else Zero) Nil) x) lf3.
Lemma candidate_8: forall (lf3 : natural) (x : natural), @eq natural (count (Cons (if lfeqb lf3 Zero then Succ Zero else Zero) Nil) x)   lf3.
Lemma candidate_9: forall (lf3 : natural) (x : natural), @eq natural   (count (Cons (if lfeqb x (Succ lf3) then Succ Zero else Zero) Nil) x) lf3.
Lemma candidate_10: forall (lf3 : natural) (x : natural), @eq natural   (count (Cons (if lfeqb x (Succ x) then Succ Zero else Zero) Nil) x) lf3.
Lemma candidate_11: forall (lf3 : natural) (x : natural), @eq natural   (count      (Cons (if match lf3 with | Succ _ => false | Zero => true end then Succ Zero else Zero) Nil)      x) lf3.
Lemma candidate_12: forall (lf3 : natural) (x : natural), @eq natural (count (Cons Zero Nil) x) lf3.
Lemma candidate_13: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (Cons n lf5).
Lemma candidate_14: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (Cons Zero lf5).
Lemma candidate_15: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (insort lf5 n).
Lemma candidate_16: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (Cons n Nil).
Lemma candidate_17: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (insort lf5 Zero).
Lemma candidate_18: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (Cons Zero Nil).
Lemma candidate_19: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (count (insort lf5 Zero) x).
Lemma candidate_20: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x)   (if lfeqb x Zero then Succ Zero else Zero).
Lemma candidate_21: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x)   (if match x with | Succ _ => false | Zero => true end then Succ (count (sort lf5) Zero) else count (sort lf5) Zero).
Lemma candidate_22: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x)   (if match x with | Succ _ => false | Zero => true end then Succ (count lf5 Zero) else count lf5 Zero).
Lemma candidate_23: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (count (insort lf5 x) Zero).
Lemma candidate_24: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x)   (if match x with | Succ _ => false | Zero => true end then Succ Zero else Zero).
Lemma candidate_25: forall (lf3 : natural) (n : natural) (x : natural), @eq natural (count (insort (Nil) n) x) lf3.
Lemma candidate_26: forall (lf3 : natural) (x : natural), @eq natural   (count (Cons (if lfeqb lf3 (Succ lf3) then Succ Zero else Zero) Nil) x) lf3.
Lemma candidate_27: forall (lf3 : natural) (x : natural), @eq natural (count (Cons (if lfeqb lf3 Zero then Succ Zero else Zero) Nil) x)   lf3.
Lemma candidate_28: forall (lf3 : natural) (x : natural), @eq natural   (count (Cons (if lfeqb x (Succ lf3) then Succ Zero else Zero) Nil) x) lf3.
Lemma candidate_29: forall (lf3 : natural) (x : natural), @eq natural   (count (Cons (if lfeqb x (Succ x) then Succ Zero else Zero) Nil) x) lf3.
Lemma candidate_30: forall (lf3 : natural) (x : natural), @eq natural   (count      (Cons (if match lf3 with | Succ _ => false | Zero => true end then Succ Zero else Zero) Nil)      x) lf3.
Lemma candidate_31: forall (lf3 : natural) (x : natural), @eq natural (count (Cons Zero Nil) x) lf3.
Lemma candidate_32: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (count (insort y Zero) x).
Lemma candidate_33: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x)   (if lfeqb x Zero then Succ Zero else Zero).
Lemma candidate_34: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x)   (if match x with | Succ _ => false | Zero => true end then Succ (count (sort y) Zero) else count (sort y) Zero).
Lemma candidate_35: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x)   (if match x with | Succ _ => false | Zero => true end then Succ (count y Zero) else count y Zero).
Lemma candidate_36: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (count (insort y x) Zero).
Lemma candidate_37: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x)   (if match x with | Succ _ => false | Zero => true end then Succ Zero else Zero).
Lemma candidate_38: forall (y : lst), @eq lst (sort y) (sort (sort (sort (sort y)))).
Lemma candidate_39: forall (y : lst), @eq lst (sort y) (sort (sort (sort y))).
Lemma candidate_40: forall (y : lst), @eq lst (sort y) (sort (sort y)).
Lemma candidate_41: forall (y : lst), @eq lst (sort y) (sort y).
Lemma candidate_42: forall (y : lst), @eq lst (sort y) (y).
Lemma candidate_43: forall (y : lst), @eq lst (sort y) (Nil).
Lemma candidate_44: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (Cons n y).
Lemma candidate_45: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (Cons Zero y).
Lemma candidate_46: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (insort y n).
Lemma candidate_47: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (Cons n Nil).
Lemma candidate_48: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (insort y Zero).
Lemma candidate_49: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (Cons Zero Nil).
Lemma candidate_50: forall (lf1 : natural), @eq natural lf1   (if lfeqb lf1 (Succ lf1) then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero).
Lemma candidate_51: forall (lf1 : natural), @eq natural lf1   (if lfeqb lf1 (Succ Zero) then Succ (if lfeqb lf1 Zero then Succ Zero else Zero) else if lfeqb lf1 Zero then Succ Zero else Zero).
Lemma candidate_52: forall (lf1 : natural), @eq natural lf1   (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 (Succ lf1) then Succ Zero else Zero) else if lfeqb lf1 (Succ lf1) then Succ Zero else Zero).
Lemma candidate_53: forall (lf1 : natural), @eq natural lf1   (if lfeqb lf1 Zero then Succ (if lfeqb lf1 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf1 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_54: forall (lf1 : natural), @eq natural lf1 (if lfeqb lf1 lf1 then Succ Zero else Zero).
Lemma candidate_55: forall (lf1 : natural), @eq natural lf1 (Succ Zero).
Lemma candidate_56: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 Zero then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_57: forall (lf4 : natural), @eq natural (Succ lf4) (if lfeqb lf4 lf4 then Succ Zero else Zero).
Lemma candidate_58: forall (lf4 : natural), @eq natural (Succ lf4) (if lfeqb lf4 Zero then Succ Zero else Zero).
Lemma candidate_59: forall (lf4 : natural), @eq natural (Succ lf4)   (if match lf4 with | Succ _ => false | Zero => true end then Succ Zero else Zero).
Lemma candidate_60: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_61: forall (lf4 : natural), @eq natural (Succ lf4) (Succ Zero).
Lemma candidate_62: forall (lf1 : natural), @eq natural lf1   (Succ      (if match lf1 with | Succ (Succ (Succ Zero)) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_63: forall (lf1 : natural), @eq natural lf1   (Succ      (if match lf1 with | Succ (Succ m'0) => lfeqb lf1 m'0 | _ => false end then Succ Zero else Zero)).
Lemma candidate_64: forall (lf1 : natural), @eq natural lf1   (Succ      (if match lf1 with | Succ (Succ Zero) => true | _ => false end then Succ Zero else Zero)).
Lemma candidate_65: forall (lf1 : natural), @eq natural lf1   (Succ      (if match lf1 with | Succ m' => lfeqb lf1 m' | Zero => false end then Succ Zero else Zero)).
Lemma candidate_66: forall (lf1 : natural), @eq natural lf1 (Succ (if lfeqb lf1 (Succ lf1) then Succ Zero else Zero)).
Lemma candidate_67: forall (lf1 : natural), @eq natural lf1 (Succ (Zero)).
Lemma candidate_68: forall (lf1 : natural), @eq natural lf1   (if lfeqb lf1 (Succ lf1) then Succ (if lfeqb lf1 lf1 then Succ Zero else Zero) else if lfeqb lf1 lf1 then Succ Zero else Zero).
Lemma candidate_69: forall (lf1 : natural), @eq natural lf1   (if lfeqb lf1 (Succ Zero) then Succ (if lfeqb lf1 Zero then Succ Zero else Zero) else if lfeqb lf1 Zero then Succ Zero else Zero).
Lemma candidate_70: forall (lf1 : natural), @eq natural lf1   (if lfeqb lf1 lf1 then Succ (if lfeqb lf1 (Succ lf1) then Succ Zero else Zero) else if lfeqb lf1 (Succ lf1) then Succ Zero else Zero).
Lemma candidate_71: forall (lf1 : natural), @eq natural lf1   (if lfeqb lf1 Zero then Succ (if lfeqb lf1 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf1 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_72: forall (lf1 : natural), @eq natural lf1 (if lfeqb lf1 lf1 then Succ Zero else Zero).
Lemma candidate_73: forall (lf1 : natural), @eq natural lf1 (Succ Zero).
Lemma candidate_74: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort y) Zero).
Lemma candidate_75: forall (y : lst) (x : natural), @eq natural (count y x) (count y (Succ x)).
Lemma candidate_76: forall (y : lst) (x : natural), @eq natural (count y x) (count y (Succ Zero)).
Lemma candidate_77: forall (y : lst) (x : natural), @eq natural (count y x) (count y x).
Lemma candidate_78: forall (y : lst) (x : natural), @eq natural (count y x) (count y Zero).
Lemma candidate_79: forall (y : lst) (x : natural), @eq natural (count y x) (Zero).
Lemma candidate_80: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (count (insort y Zero) Zero).
Lemma candidate_81: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count y (Succ x))).
Lemma candidate_82: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count y (Succ Zero))).
Lemma candidate_83: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count y x)).
Lemma candidate_84: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count y Zero)).
Lemma candidate_85: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ Zero).
Lemma candidate_86: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count lf2 (count lf2 (Succ Zero))).
Lemma candidate_87: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (Succ (count lf2 (Succ x))).
Lemma candidate_88: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (Succ (count lf2 (Succ Zero))).
Lemma candidate_89: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort lf2) Zero).
Lemma candidate_90: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count lf2 Zero).
Lemma candidate_91: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (Succ Zero).
Lemma candidate_92: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 Zero then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_93: forall (lf4 : natural), @eq natural (Succ lf4) (if lfeqb lf4 lf4 then Succ Zero else Zero).
Lemma candidate_94: forall (lf4 : natural), @eq natural (Succ lf4) (if lfeqb lf4 Zero then Succ Zero else Zero).
Lemma candidate_95: forall (lf4 : natural), @eq natural (Succ lf4)   (if match lf4 with | Succ _ => false | Zero => true end then Succ Zero else Zero).
Lemma candidate_96: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_97: forall (lf4 : natural), @eq natural (Succ lf4) (Succ Zero).
Lemma candidate_98: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (insort lf2 (Succ x)) x).
Lemma candidate_99: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort (sort lf2)) x).
Lemma candidate_100: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (if lfeqb x Zero then Succ Zero else Zero).
Lemma candidate_101: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x)   (if match x with | Succ _ => false | Zero => true end then Succ Zero else Zero).
Lemma candidate_102: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort lf2) x).
Lemma candidate_103: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count lf2 x).
Lemma candidate_104: forall (lf4 : natural) (x : natural), @eq natural   (count (Cons (if lfeqb lf4 (Succ lf4) then Succ Zero else Zero) Nil) x)   (Succ lf4).
Lemma candidate_105: forall (lf4 : natural) (x : natural), @eq natural   (count (Cons (if lfeqb lf4 (Succ x) then Succ Zero else Zero) Nil) x)   (Succ lf4).
Lemma candidate_106: forall (lf4 : natural) (x : natural), @eq natural   (count (Cons (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) Nil) x)   (Succ lf4).
Lemma candidate_107: forall (lf4 : natural) (x : natural), @eq natural   (count (Cons (if lfeqb x (Succ x) then Succ Zero else Zero) Nil) x)   (Succ lf4).
Lemma candidate_108: forall (lf4 : natural) (x : natural), @eq natural (count (Cons lf4 Nil) x) (Succ lf4).
Lemma candidate_109: forall (lf4 : natural) (x : natural), @eq natural (count (Cons Zero Nil) x) (Succ lf4).
Lemma candidate_110: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count lf5 (Succ Zero))).
Lemma candidate_111: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count lf5 n)).
Lemma candidate_112: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count lf5 x)).
Lemma candidate_113: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count lf5 Zero)).
Lemma candidate_114: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ n).
Lemma candidate_115: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ Zero).
Lemma candidate_116: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (Cons n lf5).
Lemma candidate_117: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (Cons Zero lf5).
Lemma candidate_118: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (insort lf5 n).
Lemma candidate_119: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (Cons n Nil).
Lemma candidate_120: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (insort lf5 Zero).
Lemma candidate_121: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (Cons Zero Nil).
Lemma candidate_122: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 Zero then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_123: forall (lf4 : natural), @eq natural (Succ lf4) (if lfeqb lf4 lf4 then Succ Zero else Zero).
Lemma candidate_124: forall (lf4 : natural), @eq natural (Succ lf4) (if lfeqb lf4 Zero then Succ Zero else Zero).
Lemma candidate_125: forall (lf4 : natural), @eq natural (Succ lf4)   (if match lf4 with | Succ _ => false | Zero => true end then Succ Zero else Zero).
Lemma candidate_126: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_127: forall (lf4 : natural), @eq natural (Succ lf4) (Succ Zero).
Lemma candidate_128: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (count (insort lf5 Zero) x).
Lemma candidate_129: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x)   (if lfeqb x Zero then Succ Zero else Zero).
Lemma candidate_130: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x)   (if match x with | Succ _ => false | Zero => true end then Succ (count (sort lf5) Zero) else count (sort lf5) Zero).
Lemma candidate_131: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x)   (if match x with | Succ _ => false | Zero => true end then Succ (count lf5 Zero) else count lf5 Zero).
Lemma candidate_132: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (count (insort lf5 x) Zero).
Lemma candidate_133: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x)   (if match x with | Succ _ => false | Zero => true end then Succ Zero else Zero).
Lemma candidate_134: forall (n : natural) (lf4 : natural) (x : natural), @eq natural (count (insort (Nil) n) x) (Succ lf4).
Lemma candidate_135: forall (lf4 : natural) (x : natural), @eq natural   (count (Cons (if lfeqb lf4 (Succ lf4) then Succ Zero else Zero) Nil) x)   (Succ lf4).
Lemma candidate_136: forall (lf4 : natural) (x : natural), @eq natural   (count (Cons (if lfeqb lf4 (Succ x) then Succ Zero else Zero) Nil) x)   (Succ lf4).
Lemma candidate_137: forall (lf4 : natural) (x : natural), @eq natural   (count (Cons (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) Nil) x)   (Succ lf4).
Lemma candidate_138: forall (lf4 : natural) (x : natural), @eq natural   (count (Cons (if lfeqb x (Succ x) then Succ Zero else Zero) Nil) x)   (Succ lf4).
Lemma candidate_139: forall (lf4 : natural) (x : natural), @eq natural (count (Cons lf4 Nil) x) (Succ lf4).
Lemma candidate_140: forall (lf4 : natural) (x : natural), @eq natural (count (Cons Zero Nil) x) (Succ lf4).
Lemma candidate_141: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y (Succ Zero))).
Lemma candidate_142: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y n)).
Lemma candidate_143: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y x)).
Lemma candidate_144: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y Zero)).
Lemma candidate_145: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ n).
Lemma candidate_146: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ Zero).
Lemma candidate_147: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (count (insort y Zero) x).
Lemma candidate_148: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x)   (if lfeqb x Zero then Succ Zero else Zero).
Lemma candidate_149: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x)   (if match x with | Succ _ => false | Zero => true end then Succ (count (sort y) Zero) else count (sort y) Zero).
Lemma candidate_150: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x)   (if match x with | Succ _ => false | Zero => true end then Succ (count y Zero) else count y Zero).
Lemma candidate_151: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (count (insort y x) Zero).
Lemma candidate_152: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x)   (if match x with | Succ _ => false | Zero => true end then Succ Zero else Zero).
Lemma candidate_153: forall (y : lst), @eq lst (sort y) (sort (sort (sort (sort y)))).
Lemma candidate_154: forall (y : lst), @eq lst (sort y) (sort (sort (sort y))).
Lemma candidate_155: forall (y : lst), @eq lst (sort y) (sort (sort y)).
Lemma candidate_156: forall (y : lst), @eq lst (sort y) (sort y).
Lemma candidate_157: forall (y : lst), @eq lst (sort y) (y).
Lemma candidate_158: forall (y : lst), @eq lst (sort y) (Nil).
Lemma candidate_159: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (Cons n y).
Lemma candidate_160: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (Cons Zero y).
Lemma candidate_161: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (insort y n).
Lemma candidate_162: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (Cons n Nil).
Lemma candidate_163: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (insort y Zero).
Lemma candidate_164: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (Cons Zero Nil).
Lemma candidate_165: forall (lf4 : natural), @eq natural (Succ lf4)   (if lfeqb lf4 Zero then Succ (if lfeqb lf4 (Succ Zero) then Succ Zero else Zero) else if lfeqb lf4 (Succ Zero) then Succ Zero else Zero).
Lemma candidate_166: forall (lf4 : natural), @eq natural (Succ lf4) (if lfeqb lf4 lf4 then Succ Zero else Zero).
Lemma candidate_167: forall (lf4 : natural), @eq natural (Succ lf4) (if lfeqb lf4 Zero then Succ Zero else Zero).
Lemma candidate_168: forall (lf4 : natural), @eq natural (Succ lf4)   (if match lf4 with | Succ _ => false | Zero => true end then Succ Zero else Zero).
Lemma candidate_169: forall (lf4 : natural), @eq natural (Succ lf4) (Succ lf4).
Lemma candidate_170: forall (lf4 : natural), @eq natural (Succ lf4) (Succ Zero).
Lemma candidate_171: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (Succ (count lf2 (count lf2 Zero))).
Lemma candidate_172: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (Succ (count (sort lf2) (Succ x))).
Lemma candidate_173: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (Succ (count (sort lf2) (Succ Zero))).
Lemma candidate_174: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (Succ (count lf2 (Succ x))).
Lemma candidate_175: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (Succ (count lf2 (Succ Zero))).
Lemma candidate_176: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (Succ (Zero)).
Lemma candidate_177: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count lf2 (count lf2 (Succ Zero))).
Lemma candidate_178: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (Succ (count lf2 (Succ x))).
Lemma candidate_179: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (Succ (count lf2 (Succ Zero))).
Lemma candidate_180: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort lf2) Zero).
Lemma candidate_181: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count lf2 Zero).
Lemma candidate_182: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (Succ Zero).
Lemma candidate_183: forall (y : lst) (x : natural), @eq natural (count (insort y Zero) x) (Succ (count y x)).
Lemma candidate_184: forall (y : lst) (x : natural), @eq natural (if lfeqb x Zero then Succ Zero else Zero) (Succ (count y x)).
Lemma candidate_185: forall (y : lst) (x : natural), @eq natural   (if match x with | Succ _ => false | Zero => true end then Succ (count (sort y) Zero) else count (sort y) Zero)   (Succ (count y x)).
Lemma candidate_186: forall (y : lst) (x : natural), @eq natural   (if match x with | Succ _ => false | Zero => true end then Succ (count y Zero) else count y Zero)   (Succ (count y x)).
Lemma candidate_187: forall (y : lst) (x : natural), @eq natural (count (insort y x) Zero) (Succ (count y x)).
Lemma candidate_188: forall (y : lst) (x : natural), @eq natural   (if match x with | Succ _ => false | Zero => true end then Succ Zero else Zero)   (Succ (count y x)).
Lemma candidate_189: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort y) Zero).
Lemma candidate_190: forall (y : lst) (x : natural), @eq natural (count y x) (count y (Succ x)).
Lemma candidate_191: forall (y : lst) (x : natural), @eq natural (count y x) (count y (Succ Zero)).
Lemma candidate_192: forall (y : lst) (x : natural), @eq natural (count y x) (count y x).
Lemma candidate_193: forall (y : lst) (x : natural), @eq natural (count y x) (count y Zero).
Lemma candidate_194: forall (y : lst) (x : natural), @eq natural (count y x) (Zero).
Lemma candidate_195: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (count (insort y Zero) Zero).
Lemma candidate_196: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count y (Succ x))).
Lemma candidate_197: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count y (Succ Zero))).
Lemma candidate_198: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count y x)).
Lemma candidate_199: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count y Zero)).
Lemma candidate_200: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ Zero).
Lemma candidate_201: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (insort lf2 (Succ x)) x).
Lemma candidate_202: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort (sort lf2)) x).
Lemma candidate_203: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (if lfeqb x Zero then Succ Zero else Zero).
Lemma candidate_204: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x)   (if match x with | Succ _ => false | Zero => true end then Succ Zero else Zero).
Lemma candidate_205: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort lf2) x).
Lemma candidate_206: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count lf2 x).
Lemma candidate_207: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count lf5 (Succ Zero))).
Lemma candidate_208: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count lf5 n)).
Lemma candidate_209: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count lf5 x)).
Lemma candidate_210: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count lf5 Zero)).
Lemma candidate_211: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (n)).
Lemma candidate_212: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (Zero)).
Lemma candidate_213: forall (y : lst) (x : natural), @eq natural (count (sort (insort y Zero)) x) (Succ (count y x)).
Lemma candidate_214: forall (y : lst) (x : natural), @eq natural (count (insort (sort y) Zero) x) (Succ (count y x)).
Lemma candidate_215: forall (y : lst) (x : natural), @eq natural (count (Cons Zero (sort y)) x) (Succ (count y x)).
Lemma candidate_216: forall (y : lst) (x : natural), @eq natural (count (Cons Zero y) x) (Succ (count y x)).
Lemma candidate_217: forall (y : lst) (x : natural), @eq natural (count (insort y Zero) x) (Succ (count y x)).
Lemma candidate_218: forall (y : lst) (x : natural), @eq natural (count (Cons Zero Nil) x) (Succ (count y x)).
Lemma candidate_219: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count lf5 (Succ Zero))).
Lemma candidate_220: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count lf5 n)).
Lemma candidate_221: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count lf5 x)).
Lemma candidate_222: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ (count lf5 Zero)).
Lemma candidate_223: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ n).
Lemma candidate_224: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (Succ Zero).
Lemma candidate_225: forall (y : lst) (x : natural), @eq natural (count (insort y Zero) x) (Succ (count y x)).
Lemma candidate_226: forall (y : lst) (x : natural), @eq natural (if lfeqb x Zero then Succ Zero else Zero) (Succ (count y x)).
Lemma candidate_227: forall (y : lst) (x : natural), @eq natural   (if match x with | Succ _ => false | Zero => true end then Succ (count (sort y) Zero) else count (sort y) Zero)   (Succ (count y x)).
Lemma candidate_228: forall (y : lst) (x : natural), @eq natural   (if match x with | Succ _ => false | Zero => true end then Succ (count y Zero) else count y Zero)   (Succ (count y x)).
Lemma candidate_229: forall (y : lst) (x : natural), @eq natural (count (insort y x) Zero) (Succ (count y x)).
Lemma candidate_230: forall (y : lst) (x : natural), @eq natural   (if match x with | Succ _ => false | Zero => true end then Succ Zero else Zero)   (Succ (count y x)).
Lemma candidate_231: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort y) Zero).
Lemma candidate_232: forall (y : lst) (x : natural), @eq natural (count y x) (count y (Succ x)).
Lemma candidate_233: forall (y : lst) (x : natural), @eq natural (count y x) (count y (Succ Zero)).
Lemma candidate_234: forall (y : lst) (x : natural), @eq natural (count y x) (count y x).
Lemma candidate_235: forall (y : lst) (x : natural), @eq natural (count y x) (count y Zero).
Lemma candidate_236: forall (y : lst) (x : natural), @eq natural (count y x) (Zero).
Lemma candidate_237: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (Cons n lf5).
Lemma candidate_238: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (Cons Zero lf5).
Lemma candidate_239: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (insort lf5 n).
Lemma candidate_240: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (Cons n Nil).
Lemma candidate_241: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (insort lf5 Zero).
Lemma candidate_242: forall (n : natural) (lf5 : lst), @eq lst (insort lf5 n) (Cons Zero Nil).
Lemma candidate_243: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (count (insort y Zero) Zero).
Lemma candidate_244: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count y (Succ x))).
Lemma candidate_245: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count y (Succ Zero))).
Lemma candidate_246: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count y x)).
Lemma candidate_247: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count y Zero)).
Lemma candidate_248: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ Zero).
Lemma candidate_249: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (count (insort lf5 Zero) x).
Lemma candidate_250: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x)   (if lfeqb x Zero then Succ Zero else Zero).
Lemma candidate_251: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x)   (if match x with | Succ _ => false | Zero => true end then Succ (count (sort lf5) Zero) else count (sort lf5) Zero).
Lemma candidate_252: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x)   (if match x with | Succ _ => false | Zero => true end then Succ (count lf5 Zero) else count lf5 Zero).
Lemma candidate_253: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x) (count (insort lf5 x) Zero).
Lemma candidate_254: forall (n : natural) (x : natural) (lf5 : lst), @eq natural (count (insort lf5 n) x)   (if match x with | Succ _ => false | Zero => true end then Succ Zero else Zero).
Lemma candidate_255: forall (y : lst) (x : natural), @eq natural (count (insort y Zero) x) (Succ (count y x)).
Lemma candidate_256: forall (y : lst) (x : natural), @eq natural (if lfeqb x Zero then Succ Zero else Zero) (Succ (count y x)).
Lemma candidate_257: forall (y : lst) (x : natural), @eq natural   (if match x with | Succ _ => false | Zero => true end then Succ (count (sort y) Zero) else count (sort y) Zero)   (Succ (count y x)).
Lemma candidate_258: forall (y : lst) (x : natural), @eq natural   (if match x with | Succ _ => false | Zero => true end then Succ (count y Zero) else count y Zero)   (Succ (count y x)).
Lemma candidate_259: forall (y : lst) (x : natural), @eq natural (count (insort y x) Zero) (Succ (count y x)).
Lemma candidate_260: forall (y : lst) (x : natural), @eq natural   (if match x with | Succ _ => false | Zero => true end then Succ Zero else Zero)   (Succ (count y x)).
Lemma candidate_261: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort (sort (sort (sort y)))) n) x)   (Succ (count y x)).
Lemma candidate_262: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort (sort (sort y))) n) x) (Succ (count y x)).
Lemma candidate_263: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort (sort y)) n) x) (Succ (count y x)).
Lemma candidate_264: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y x)).
Lemma candidate_265: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (y) n) x) (Succ (count y x)).
Lemma candidate_266: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (Nil) n) x) (Succ (count y x)).
Lemma candidate_267: forall (y : lst) (x : natural), @eq natural (count (sort (insort y Zero)) x) (Succ (count y x)).
Lemma candidate_268: forall (y : lst) (x : natural), @eq natural (count (insort (sort y) Zero) x) (Succ (count y x)).
Lemma candidate_269: forall (y : lst) (x : natural), @eq natural (count (Cons Zero (sort y)) x) (Succ (count y x)).
Lemma candidate_270: forall (y : lst) (x : natural), @eq natural (count (Cons Zero y) x) (Succ (count y x)).
Lemma candidate_271: forall (y : lst) (x : natural), @eq natural (count (insort y Zero) x) (Succ (count y x)).
Lemma candidate_272: forall (y : lst) (x : natural), @eq natural (count (Cons Zero Nil) x) (Succ (count y x)).
Lemma candidate_273: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y (Succ Zero))).
Lemma candidate_274: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y n)).
Lemma candidate_275: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y x)).
Lemma candidate_276: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y Zero)).
Lemma candidate_277: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (n)).
Lemma candidate_278: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (Zero)).
Lemma candidate_279: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y (Succ Zero))).
Lemma candidate_280: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y n)).
Lemma candidate_281: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y x)).
Lemma candidate_282: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ (count y Zero)).
Lemma candidate_283: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ n).
Lemma candidate_284: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (Succ Zero).
Lemma candidate_285: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (count (insort y Zero) x).
Lemma candidate_286: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x)   (if lfeqb x Zero then Succ Zero else Zero).
Lemma candidate_287: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x)   (if match x with | Succ _ => false | Zero => true end then Succ (count (sort y) Zero) else count (sort y) Zero).
Lemma candidate_288: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x)   (if match x with | Succ _ => false | Zero => true end then Succ (count y Zero) else count y Zero).
Lemma candidate_289: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x) (count (insort y x) Zero).
Lemma candidate_290: forall (n : natural) (y : lst) (x : natural), @eq natural (count (insort (sort y) n) x)   (if match x with | Succ _ => false | Zero => true end then Succ Zero else Zero).
Lemma candidate_291: forall (y : lst), @eq lst (sort y) (sort (sort (sort (sort y)))).
Lemma candidate_292: forall (y : lst), @eq lst (sort y) (sort (sort (sort y))).
Lemma candidate_293: forall (y : lst), @eq lst (sort y) (sort (sort y)).
Lemma candidate_294: forall (y : lst), @eq lst (sort y) (sort y).
Lemma candidate_295: forall (y : lst), @eq lst (sort y) (y).
Lemma candidate_296: forall (y : lst), @eq lst (sort y) (Nil).
Lemma candidate_297: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (Cons n y).
Lemma candidate_298: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (Cons Zero y).
Lemma candidate_299: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (insort y n).
Lemma candidate_300: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (Cons n Nil).
Lemma candidate_301: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (insort y Zero).
Lemma candidate_302: forall (n : natural) (y : lst), @eq lst (insort (sort y) n) (Cons Zero Nil).
Lemma candidate_303: forall (y : lst) (x : natural), @eq natural (count y x) (count (sort y) Zero).
Lemma candidate_304: forall (y : lst) (x : natural), @eq natural (count y x) (count y (Succ x)).
Lemma candidate_305: forall (y : lst) (x : natural), @eq natural (count y x) (count y (Succ Zero)).
Lemma candidate_306: forall (y : lst) (x : natural), @eq natural (count y x) (count y x).
Lemma candidate_307: forall (y : lst) (x : natural), @eq natural (count y x) (count y Zero).
Lemma candidate_308: forall (y : lst) (x : natural), @eq natural (count y x) (Zero).
Lemma candidate_309: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (count (insort y Zero) Zero).
Lemma candidate_310: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count y (Succ x))).
Lemma candidate_311: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count y (Succ Zero))).
Lemma candidate_312: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count y x)).
Lemma candidate_313: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ (count y Zero)).
Lemma candidate_314: forall (y : lst) (x : natural), @eq natural (Succ (count y x)) (Succ Zero).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 571 seconds
Duplicates removed: 193
Filtered by Quickchick: 109
Filtered by script: 7
Remaining: 5

Lemmas: 
Lemma candidate_40: forall (y : lst), @eq lst (sort y) (sort (sort y)).
Lemma candidate_39: forall (y : lst), @eq lst (sort y) (sort (sort (sort y))).
Lemma candidate_38: forall (y : lst), @eq lst (sort y) (sort (sort (sort (sort y)))).
Lemma candidate_2: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (sort (sort lf2)) x).
Lemma candidate_1: forall (x : natural) (lf2 : lst), @eq natural (count lf2 x) (count (insort lf2 (Succ x)) x).