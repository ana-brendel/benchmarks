LFind Results
LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal78_theorem0_65_append_assoc

Number of Lemmas: 362
Number of Lemmas (after duplicates removed): 103
Number of Lemmas (after QuickChick used to filter): 76
* Number of Candidate Lemmas: 56

Time until ranking: 2101
Time to complete: 4745

Stuck state true independent of hypotheses: true

Category 1:
Count = 1

Lemma candidate_30: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x) (lfappend y (lfappend lf4 x)).

Category 2:
Count = 3

Lemma candidate_206: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x) (lfappend y (qreva (rev lf4) x)).
Lemma candidate_203: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x) (lfappend y (rev (qreva x (rev lf4)))).
Lemma candidate_322: forall (n : natural) (y : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (lfappend y (Cons n lf6)) x)   (lfappend y (Cons n (lfappend lf6 x))).

Category 3 (provable):
Count = 6

Lemma candidate_81: forall (lf1 : lst), @eq lst lf1 (lfappend lf1 Nil).
Lemma candidate_6: forall (lf3 : lst), @eq lst (lfappend lf3 Nil) lf3.
Lemma candidate_115: forall (y : lst) (lf5 : lst), @eq lst (lfappend y (lfappend lf5 Nil)) (lfappend y lf5).
Lemma candidate_85: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend y (lfappend lf5 Nil)).
Lemma candidate_63: forall (n : natural) (y : lst), @eq lst (lfappend y (Cons n Nil)) (lfappend (lfappend y Nil) (Cons n Nil)).
Lemma candidate_191: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (lfappend y Nil) (Cons n Nil)) x)   (lfappend y (Cons n x)).

Category 3 (not provable):
Count = 46

Lemma candidate_80: forall (lf1 : lst), @eq lst lf1 (rev (rev lf1)).
Lemma candidate_5: forall (lf3 : lst), @eq lst (rev (rev lf3)) lf3.
Lemma candidate_79: forall (lf1 : lst), @eq lst lf1 (qreva (rev lf1) Nil).
Lemma candidate_78: forall (lf1 : lst), @eq lst lf1 (rev (qreva lf1 Nil)).
Lemma candidate_4: forall (lf3 : lst), @eq lst (qreva (rev lf3) Nil) lf3.
Lemma candidate_3: forall (lf3 : lst), @eq lst (rev (qreva lf3 Nil)) lf3.
Lemma candidate_77: forall (lf1 : lst), @eq lst lf1 (qreva (qreva lf1 Nil) Nil).
Lemma candidate_2: forall (lf3 : lst), @eq lst (qreva (qreva lf3 Nil) Nil) lf3.
Lemma candidate_104: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (rev (rev x))).
Lemma candidate_117: forall (y : lst) (lf5 : lst), @eq lst (qreva (rev y) lf5) (lfappend y lf5).
Lemma candidate_105: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (lfappend x Nil)).
Lemma candidate_87: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (qreva (rev y) lf5).
Lemma candidate_23: forall (y : lst) (lf4 : lst), @eq lst (lfappend y lf4) (qreva (rev y) lf4).
Lemma candidate_12: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (qreva (rev lf2) x).
Lemma candidate_102: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (qreva x (Cons n Nil))).
Lemma candidate_101: forall (n : natural) (x : lst), @eq lst (Cons n x) (Cons n (qreva (rev x) Nil)).
Lemma candidate_114: forall (y : lst) (lf5 : lst), @eq lst (lfappend y (rev (rev lf5))) (lfappend y lf5).
Lemma candidate_84: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (lfappend y (rev (rev lf5))).
Lemma candidate_9: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend lf2 (rev (rev x))).
Lemma candidate_103: forall (n : natural) (x : lst), @eq lst (Cons n x) (rev (lfappend (rev x) (Cons n Nil))).
Lemma candidate_10: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (lfappend lf2 (lfappend x Nil)).
Lemma candidate_171: forall (n : natural) (y : lst) (x : lst), @eq lst (qreva (rev y) (Cons n x)) (lfappend y (Cons n x)).
Lemma candidate_99: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (qreva (rev y) (Cons n x)).
Lemma candidate_113: forall (y : lst) (lf5 : lst), @eq lst (qreva (rev y) (lfappend lf5 Nil)) (lfappend y lf5).
Lemma candidate_83: forall (y : lst) (lf5 : lst), @eq lst (lfappend y lf5) (qreva (rev y) (lfappend lf5 Nil)).
Lemma candidate_8: forall (x : lst) (lf2 : lst), @eq lst (lfappend lf2 x) (qreva (rev lf2) (lfappend x Nil)).
Lemma candidate_66: forall (n : natural) (y : lst), @eq lst (lfappend y (Cons n Nil)) (qreva (rev y) (Cons n Nil)).
Lemma candidate_50: forall (n : natural) (y : lst) (lf6 : lst), @eq lst (lfappend y (Cons n lf6)) (qreva (rev y) (Cons n lf6)).
Lemma candidate_167: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (rev (rev x)))) (lfappend y (Cons n x)).
Lemma candidate_95: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (rev (rev x)))).
Lemma candidate_64: forall (n : natural) (y : lst), @eq lst (lfappend y (Cons n Nil)) (qreva (qreva y Nil) (Cons n Nil)).
Lemma candidate_168: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n (lfappend x Nil))) (lfappend y (Cons n x)).
Lemma candidate_96: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_28: forall (y : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend y lf4) x) (qreva (rev y) (lfappend lf4 x)).
Lemma candidate_194: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (qreva (rev y) (Cons n Nil)) x) (lfappend y (Cons n x)).
Lemma candidate_169: forall (n : natural) (y : lst) (x : lst), @eq lst (rev (lfappend (rev x) (Cons n (rev y)))) (lfappend y (Cons n x)).
Lemma candidate_97: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend y (Cons n x)) (rev (lfappend (rev x) (Cons n (rev y)))).
Lemma candidate_75: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x) (qreva (rev y) (Cons n x)).
Lemma candidate_65: forall (n : natural) (y : lst), @eq lst (lfappend y (Cons n Nil)) (lfappend (rev (qreva y Nil)) (Cons n Nil)).
Lemma candidate_192: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (qreva (qreva y Nil) (Cons n Nil)) x)   (lfappend y (Cons n x)).
Lemma candidate_74: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x)   (rev (qreva x (Cons n (rev y)))).
Lemma candidate_196: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev (rev y)) (Cons n Nil)) x)   (lfappend y (Cons n x)).
Lemma candidate_71: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x)   (lfappend y (Cons n (rev (rev x)))).
Lemma candidate_72: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x)   (lfappend y (Cons n (lfappend x Nil))).
Lemma candidate_193: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend (rev (qreva y Nil)) (Cons n Nil)) x)   (lfappend y (Cons n x)).
Lemma candidate_73: forall (n : natural) (y : lst) (x : lst), @eq lst (lfappend (lfappend y (Cons n Nil)) x)   (rev (lfappend (rev x) (Cons n (rev y)))).