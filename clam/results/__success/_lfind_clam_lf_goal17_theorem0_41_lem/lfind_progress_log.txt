File Information
- File name: goal17
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal17_theorem0_41_lem
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal17_theorem0_41_lem
- Namespace: adtind
- Proof name: theorem0
- Theorem: Theorem theorem0: forall x0 y0 : lst,
@eq lst (rev (rev (lfappend x0 y0))) (lfappend (rev (rev x0)) (rev (rev y0))).
- Declarations: 
From lfind Require Import LFind.

Proof Context
* Goal State: @eq lst (lfappend x y) (lfappend x (rev (rev y)))

* Hypothesis:
x : lst
y : lst

* Types:
Set
Prop
lst

* Polymorphic Types:


* Variables:
x : lst
y : lst

* Terms:
lfappend x (rev (rev y)) : lst
x : lst
rev (rev y) : lst
@eq lst (lfappend x y) (lfappend x (rev (rev y))) : Prop
lst : Set
y : lst
lfappend x y : lst
rev y : lst

* Functions:
rev  : forall _ : lst, lst
lfappend  : forall (_ : lst) (_ : lst), lst
@eq  : forall (A : Type) (_ : A) (_ : A), Prop

<---GENERALIZATION--->
Time elapsed: 1 seconds
Generalized Variables:
lf3 : lst = rev (rev y)
lf1 : lst = lfappend x (rev (rev y))
lf4 : lst = rev y
lf2 : lst = lfappend x y

Generalizations:
Lemma conj1: forall (lf2 : lst) (lf1 : lst), @eq lst lf2 lf1.
Lemma conj2: forall (x : lst) (lf1 : lst) (y : lst), @eq lst (lfappend x y) lf1.
Lemma conj5: forall (lf2 : lst) (x : lst) (lf3 : lst), @eq lst lf2 (lfappend x lf3).
Lemma conj6: forall (x : lst) (y : lst) (lf3 : lst), @eq lst (lfappend x y) (lfappend x lf3).
Lemma conj13: forall (lf2 : lst) (x : lst) (lf4 : lst), @eq lst lf2 (lfappend x (rev lf4)).
Lemma conj14: forall (x : lst) (lf4 : lst) (y : lst), @eq lst (lfappend x y) (lfappend x (rev lf4)).
Lemma conj15: forall (lf2 : lst) (x : lst) (y : lst), @eq lst lf2 (lfappend x (rev (rev y))).
Lemma conj16: forall (x : lst) (y : lst), @eq lst (lfappend x y) (lfappend x (rev (rev y))).


<---VALIDITY CHECKS--->
Time elapsed: 62 seconds
Valid:
Lemma conj16: forall (x : lst) (y : lst), @eq lst (lfappend x y) (lfappend x (rev (rev y))).

Invalid:
Lemma conj15: forall (lf2 : lst) (x : lst) (y : lst), @eq lst lf2 (lfappend x (rev (rev y))).
Lemma conj14: forall (x : lst) (lf4 : lst) (y : lst), @eq lst (lfappend x y) (lfappend x (rev lf4)).
Lemma conj13: forall (lf2 : lst) (x : lst) (lf4 : lst), @eq lst lf2 (lfappend x (rev lf4)).
Lemma conj6: forall (x : lst) (y : lst) (lf3 : lst), @eq lst (lfappend x y) (lfappend x lf3).
Lemma conj5: forall (lf2 : lst) (x : lst) (lf3 : lst), @eq lst lf2 (lfappend x lf3).
Lemma conj2: forall (x : lst) (lf1 : lst) (y : lst), @eq lst (lfappend x y) lf1.
Lemma conj1: forall (lf2 : lst) (lf1 : lst), @eq lst lf2 lf1.

<---ADD IMPLICATIONS--->
Time elapsed: 62 seconds
Generalizations:
Lemma conj15: forall (lf2 : lst) (x : lst) (y : lst), @eq lst lf2 (lfappend x (rev (rev y))).
Lemma conj14: forall (x : lst) (lf4 : lst) (y : lst), @eq lst (lfappend x y) (lfappend x (rev lf4)).
Lemma conj13: forall (lf2 : lst) (x : lst) (lf4 : lst), @eq lst lf2 (lfappend x (rev lf4)).
Lemma conj6: forall (x : lst) (y : lst) (lf3 : lst), @eq lst (lfappend x y) (lfappend x lf3).
Lemma conj5: forall (lf2 : lst) (x : lst) (lf3 : lst), @eq lst lf2 (lfappend x lf3).
Lemma conj2: forall (x : lst) (lf1 : lst) (y : lst), @eq lst (lfappend x y) lf1.
Lemma conj1: forall (lf2 : lst) (lf1 : lst), @eq lst lf2 lf1.


<---VALIDITY CHECKS--->
Time elapsed: 73 seconds
Valid:

Invalid:
Lemma conj1: forall (lf2 : lst) (lf1 : lst), @eq lst lf2 lf1.
Lemma conj2: forall (x : lst) (lf1 : lst) (y : lst), @eq lst (lfappend x y) lf1.
Lemma conj5: forall (lf2 : lst) (x : lst) (lf3 : lst), @eq lst lf2 (lfappend x lf3).
Lemma conj6: forall (x : lst) (y : lst) (lf3 : lst), @eq lst (lfappend x y) (lfappend x lf3).
Lemma conj13: forall (lf2 : lst) (x : lst) (lf4 : lst), @eq lst lf2 (lfappend x (rev lf4)).
Lemma conj14: forall (x : lst) (lf4 : lst) (y : lst), @eq lst (lfappend x y) (lfappend x (rev lf4)).
Lemma conj15: forall (lf2 : lst) (x : lst) (y : lst), @eq lst lf2 (lfappend x (rev (rev y))).


<---CREATE SKETCHES--->
Time elapsed: 74 seconds
Sketches:
Sketch conj2_sketch0 : @eq lst (##hole##) lf1
Sketch conj2_term_sketch0 : @eq lst (lfappend x y) (##hole##)
Sketch conj5_sketch0 : @eq lst lf2 (##hole##)
Sketch conj5_term_sketch0 : @eq lst (lfappend x lf3) (##hole##)
Sketch conj6_sketch0 : @eq lst (lfappend x y) (##hole##)
Sketch conj6_sketch1 : @eq lst (##hole##) (lfappend x lf3)
Sketch conj6_term_sketch0 : @eq lst (lfappend x lf3) (##hole##)
Sketch conj6_term_sketch1 : @eq lst (lfappend x y) (##hole##)
Sketch conj13_sketch0 : @eq lst lf2 (##hole##)
Sketch conj13_sketch1 : @eq lst lf2 (lfappend x (##hole##))
Sketch conj13_term_sketch0 : @eq lst (lfappend x (rev lf4)) (##hole##)
Sketch conj13_term_sketch1 : @eq lst (rev lf4) (##hole##)
Sketch conj14_sketch0 : @eq lst (lfappend x y) (##hole##)
Sketch conj14_sketch1 : @eq lst (##hole##) (lfappend x (rev lf4))
Sketch conj14_sketch2 : @eq lst (lfappend x y) (lfappend x (##hole##))
Sketch conj14_term_sketch0 : @eq lst (lfappend x (rev lf4)) (##hole##)
Sketch conj14_term_sketch1 : @eq lst (lfappend x y) (##hole##)
Sketch conj14_term_sketch2 : @eq lst (rev lf4) (##hole##)
Sketch conj15_sketch0 : @eq lst lf2 (##hole##)
Sketch conj15_sketch1 : @eq lst lf2 (lfappend x (##hole##))
Sketch conj15_sketch2 : @eq lst lf2 (lfappend x (rev (##hole##)))
Sketch conj15_term_sketch0 : @eq lst (lfappend x (rev (rev y))) (##hole##)
Sketch conj15_term_sketch1 : @eq lst (rev (rev y)) (##hole##)
Sketch conj15_term_sketch2 : @eq lst (rev y) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 360 seconds
Problems per Sketch:
Sketch conj15_sketch1 --> Problem  synth_5
Sketch conj6_sketch1 --> Problem  synth_4
Sketch conj5_sketch0 --> Problem  synth_3
Sketch conj15_sketch2 --> Problem  synth_9
Sketch conj14_sketch2 --> Problem  synth_8
Sketch conj15_term_sketch1 --> Problem  synth_10
Sketch conj15_term_sketch2 --> Problem  synth_11
Sketch conj13_term_sketch0 --> Problem  synth_6
Sketch conj15_sketch0 --> Problem  synth_3
Sketch conj14_term_sketch2 --> Problem  synth_7
Sketch conj6_term_sketch1 --> Problem  synth_2
Sketch conj6_term_sketch0 --> Problem  synth_4
Sketch conj13_sketch1 --> Problem  synth_5
Sketch conj2_term_sketch0 --> Problem  synth_2
Sketch conj14_sketch0 --> Problem  synth_2
Sketch conj13_term_sketch1 --> Problem  synth_7
Sketch conj14_term_sketch0 --> Problem  synth_6
Sketch conj13_sketch0 --> Problem  synth_3
Sketch conj14_term_sketch1 --> Problem  synth_2
Sketch conj15_term_sketch0 --> Problem  synth_2
Sketch conj5_term_sketch0 --> Problem  synth_4
Sketch conj6_sketch0 --> Problem  synth_2
Sketch conj14_sketch1 --> Problem  synth_6
Sketch conj2_sketch0 --> Problem  synth_1


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 399 seconds

Problem: synth_10
 rev (lfappend (rev y) Nil)
 lfappend (rev (rev y)) Nil
 lfappend (lfappend y Nil) Nil
 rev (rev y)
 lfappend y Nil
 y

Problem: synth_8
 rev (lfappend (rev y) Nil)
 lfappend (rev (rev y)) Nil
 lfappend (lfappend y Nil) Nil
 rev (rev y)
 lfappend y Nil
 y

Problem: synth_3
 rev (lfappend (rev lf2) Nil)
 lfappend (rev (rev lf2)) Nil
 lfappend (lfappend lf2 Nil) Nil
 rev (rev lf2)
 lfappend lf2 Nil
 lf2

Problem: synth_9

Problem: synth_6
 lfappend (rev (rev x)) (rev lf4)
 lfappend (lfappend x Nil) (rev lf4)
 rev (rev (lfappend x (rev lf4)))
 lfappend (lfappend x (rev lf4)) Nil
 rev (lfappend lf4 (rev x))
 lfappend x (rev lf4)

Problem: synth_11
 lfappend (rev (lfappend y Nil)) Nil
 lfappend (lfappend (rev y) Nil) Nil
 rev (rev (rev y))
 rev (lfappend y Nil)
 lfappend (rev y) Nil
 rev y

Problem: synth_7
 lfappend (rev (lfappend lf4 Nil)) Nil
 lfappend (lfappend (rev lf4) Nil) Nil
 rev (rev (rev lf4))
 rev (lfappend lf4 Nil)
 lfappend (rev lf4) Nil
 rev lf4

Problem: synth_5

Problem: synth_4
 lfappend (rev (rev x)) lf3
 lfappend (lfappend x Nil) lf3
 lfappend (lfappend x lf3) Nil
 lfappend x (rev (rev lf3))
 lfappend x (lfappend lf3 Nil)
 lfappend x lf3

Problem: synth_1
 rev (lfappend (rev lf1) Nil)
 lfappend (rev (rev lf1)) Nil
 lfappend (lfappend lf1 Nil) Nil
 rev (rev lf1)
 lfappend lf1 Nil
 lf1

Problem: synth_2
 lfappend (rev (rev x)) y
 lfappend (lfappend x Nil) y
 lfappend (lfappend x y) Nil
 lfappend x (rev (rev y))
 lfappend x (lfappend y Nil)
 lfappend x y

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 400 seconds
Lemmas:
Lemma candidate_1: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (rev (rev y))).
Lemma candidate_2: forall (lf1 : lst), @eq lst (rev (lfappend (rev lf1) Nil)) lf1.
Lemma candidate_3: forall (lf1 : lst), @eq lst (lfappend (rev (rev lf1)) Nil) lf1.
Lemma candidate_4: forall (lf1 : lst), @eq lst (lfappend (lfappend lf1 Nil) Nil) lf1.
Lemma candidate_5: forall (lf1 : lst), @eq lst (rev (rev lf1)) lf1.
Lemma candidate_6: forall (lf1 : lst), @eq lst (lfappend lf1 Nil) lf1.
Lemma candidate_7: forall (lf1 : lst), @eq lst (lf1) lf1.
Lemma candidate_8: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (rev (rev x)) y).
Lemma candidate_9: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) y).
Lemma candidate_10: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x y) Nil).
Lemma candidate_11: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (rev (rev y))).
Lemma candidate_12: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend y Nil)).
Lemma candidate_13: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x y).
Lemma candidate_14: forall (lf2 : lst), @eq lst lf2 (rev (lfappend (rev lf2) Nil)).
Lemma candidate_15: forall (lf2 : lst), @eq lst lf2 (lfappend (rev (rev lf2)) Nil).
Lemma candidate_16: forall (lf2 : lst), @eq lst lf2 (lfappend (lfappend lf2 Nil) Nil).
Lemma candidate_17: forall (lf2 : lst), @eq lst lf2 (rev (rev lf2)).
Lemma candidate_18: forall (lf2 : lst), @eq lst lf2 (lfappend lf2 Nil).
Lemma candidate_19: forall (lf2 : lst), @eq lst lf2 (lf2).
Lemma candidate_20: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend (rev (rev x)) lf3).
Lemma candidate_21: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend (lfappend x Nil) lf3).
Lemma candidate_22: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend (lfappend x lf3) Nil).
Lemma candidate_23: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend x (rev (rev lf3))).
Lemma candidate_24: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend x (lfappend lf3 Nil)).
Lemma candidate_25: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend x lf3).
Lemma candidate_26: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (rev (rev x)) y).
Lemma candidate_27: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) y).
Lemma candidate_28: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x y) Nil).
Lemma candidate_29: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (rev (rev y))).
Lemma candidate_30: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend y Nil)).
Lemma candidate_31: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x y).
Lemma candidate_32: forall (lf3 : lst) (x : lst), @eq lst (lfappend (rev (rev x)) lf3) (lfappend x lf3).
Lemma candidate_33: forall (lf3 : lst) (x : lst), @eq lst (lfappend (lfappend x Nil) lf3) (lfappend x lf3).
Lemma candidate_34: forall (lf3 : lst) (x : lst), @eq lst (lfappend (lfappend x lf3) Nil) (lfappend x lf3).
Lemma candidate_35: forall (lf3 : lst) (x : lst), @eq lst (lfappend x (rev (rev lf3))) (lfappend x lf3).
Lemma candidate_36: forall (lf3 : lst) (x : lst), @eq lst (lfappend x (lfappend lf3 Nil)) (lfappend x lf3).
Lemma candidate_37: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend x lf3).
Lemma candidate_38: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend (rev (rev x)) lf3).
Lemma candidate_39: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend (lfappend x Nil) lf3).
Lemma candidate_40: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend (lfappend x lf3) Nil).
Lemma candidate_41: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend x (rev (rev lf3))).
Lemma candidate_42: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend x (lfappend lf3 Nil)).
Lemma candidate_43: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend x lf3).
Lemma candidate_44: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (rev (rev x)) y).
Lemma candidate_45: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) y).
Lemma candidate_46: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x y) Nil).
Lemma candidate_47: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (rev (rev y))).
Lemma candidate_48: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend y Nil)).
Lemma candidate_49: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x y).
Lemma candidate_50: forall (lf2 : lst), @eq lst lf2 (rev (lfappend (rev lf2) Nil)).
Lemma candidate_51: forall (lf2 : lst), @eq lst lf2 (lfappend (rev (rev lf2)) Nil).
Lemma candidate_52: forall (lf2 : lst), @eq lst lf2 (lfappend (lfappend lf2 Nil) Nil).
Lemma candidate_53: forall (lf2 : lst), @eq lst lf2 (rev (rev lf2)).
Lemma candidate_54: forall (lf2 : lst), @eq lst lf2 (lfappend lf2 Nil).
Lemma candidate_55: forall (lf2 : lst), @eq lst lf2 (lf2).
Lemma candidate_56: forall (lf4 : lst) (x : lst), @eq lst (lfappend x (rev lf4)) (lfappend (rev (rev x)) (rev lf4)).
Lemma candidate_57: forall (lf4 : lst) (x : lst), @eq lst (lfappend x (rev lf4)) (lfappend (lfappend x Nil) (rev lf4)).
Lemma candidate_58: forall (lf4 : lst) (x : lst), @eq lst (lfappend x (rev lf4)) (rev (rev (lfappend x (rev lf4)))).
Lemma candidate_59: forall (lf4 : lst) (x : lst), @eq lst (lfappend x (rev lf4)) (lfappend (lfappend x (rev lf4)) Nil).
Lemma candidate_60: forall (lf4 : lst) (x : lst), @eq lst (lfappend x (rev lf4)) (rev (lfappend lf4 (rev x))).
Lemma candidate_61: forall (lf4 : lst) (x : lst), @eq lst (lfappend x (rev lf4)) (lfappend x (rev lf4)).
Lemma candidate_62: forall (lf4 : lst), @eq lst (rev lf4) (lfappend (rev (lfappend lf4 Nil)) Nil).
Lemma candidate_63: forall (lf4 : lst), @eq lst (rev lf4) (lfappend (lfappend (rev lf4) Nil) Nil).
Lemma candidate_64: forall (lf4 : lst), @eq lst (rev lf4) (rev (rev (rev lf4))).
Lemma candidate_65: forall (lf4 : lst), @eq lst (rev lf4) (rev (lfappend lf4 Nil)).
Lemma candidate_66: forall (lf4 : lst), @eq lst (rev lf4) (lfappend (rev lf4) Nil).
Lemma candidate_67: forall (lf4 : lst), @eq lst (rev lf4) (rev lf4).
Lemma candidate_68: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (rev (rev x)) y).
Lemma candidate_69: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) y).
Lemma candidate_70: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x y) Nil).
Lemma candidate_71: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (rev (rev y))).
Lemma candidate_72: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend y Nil)).
Lemma candidate_73: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x y).
Lemma candidate_74: forall (lf4 : lst) (x : lst), @eq lst (lfappend (rev (rev x)) (rev lf4)) (lfappend x (rev lf4)).
Lemma candidate_75: forall (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend x Nil) (rev lf4)) (lfappend x (rev lf4)).
Lemma candidate_76: forall (lf4 : lst) (x : lst), @eq lst (rev (rev (lfappend x (rev lf4)))) (lfappend x (rev lf4)).
Lemma candidate_77: forall (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend x (rev lf4)) Nil) (lfappend x (rev lf4)).
Lemma candidate_78: forall (lf4 : lst) (x : lst), @eq lst (rev (lfappend lf4 (rev x))) (lfappend x (rev lf4)).
Lemma candidate_79: forall (lf4 : lst) (x : lst), @eq lst (lfappend x (rev lf4)) (lfappend x (rev lf4)).
Lemma candidate_80: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (rev (lfappend (rev y) Nil))).
Lemma candidate_81: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend (rev (rev y)) Nil)).
Lemma candidate_82: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend (lfappend y Nil) Nil)).
Lemma candidate_83: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (rev (rev y))).
Lemma candidate_84: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend y Nil)).
Lemma candidate_85: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (y)).
Lemma candidate_86: forall (lf4 : lst) (x : lst), @eq lst (lfappend x (rev lf4)) (lfappend (rev (rev x)) (rev lf4)).
Lemma candidate_87: forall (lf4 : lst) (x : lst), @eq lst (lfappend x (rev lf4)) (lfappend (lfappend x Nil) (rev lf4)).
Lemma candidate_88: forall (lf4 : lst) (x : lst), @eq lst (lfappend x (rev lf4)) (rev (rev (lfappend x (rev lf4)))).
Lemma candidate_89: forall (lf4 : lst) (x : lst), @eq lst (lfappend x (rev lf4)) (lfappend (lfappend x (rev lf4)) Nil).
Lemma candidate_90: forall (lf4 : lst) (x : lst), @eq lst (lfappend x (rev lf4)) (rev (lfappend lf4 (rev x))).
Lemma candidate_91: forall (lf4 : lst) (x : lst), @eq lst (lfappend x (rev lf4)) (lfappend x (rev lf4)).
Lemma candidate_92: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (rev (rev x)) y).
Lemma candidate_93: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) y).
Lemma candidate_94: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x y) Nil).
Lemma candidate_95: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (rev (rev y))).
Lemma candidate_96: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend y Nil)).
Lemma candidate_97: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x y).
Lemma candidate_98: forall (lf4 : lst), @eq lst (rev lf4) (lfappend (rev (lfappend lf4 Nil)) Nil).
Lemma candidate_99: forall (lf4 : lst), @eq lst (rev lf4) (lfappend (lfappend (rev lf4) Nil) Nil).
Lemma candidate_100: forall (lf4 : lst), @eq lst (rev lf4) (rev (rev (rev lf4))).
Lemma candidate_101: forall (lf4 : lst), @eq lst (rev lf4) (rev (lfappend lf4 Nil)).
Lemma candidate_102: forall (lf4 : lst), @eq lst (rev lf4) (lfappend (rev lf4) Nil).
Lemma candidate_103: forall (lf4 : lst), @eq lst (rev lf4) (rev lf4).
Lemma candidate_104: forall (lf2 : lst), @eq lst lf2 (rev (lfappend (rev lf2) Nil)).
Lemma candidate_105: forall (lf2 : lst), @eq lst lf2 (lfappend (rev (rev lf2)) Nil).
Lemma candidate_106: forall (lf2 : lst), @eq lst lf2 (lfappend (lfappend lf2 Nil) Nil).
Lemma candidate_107: forall (lf2 : lst), @eq lst lf2 (rev (rev lf2)).
Lemma candidate_108: forall (lf2 : lst), @eq lst lf2 (lfappend lf2 Nil).
Lemma candidate_109: forall (lf2 : lst), @eq lst lf2 (lf2).
Lemma candidate_110: forall (y : lst) (x : lst), @eq lst (lfappend x (rev (rev y))) (lfappend (rev (rev x)) y).
Lemma candidate_111: forall (y : lst) (x : lst), @eq lst (lfappend x (rev (rev y))) (lfappend (lfappend x Nil) y).
Lemma candidate_112: forall (y : lst) (x : lst), @eq lst (lfappend x (rev (rev y))) (lfappend (lfappend x y) Nil).
Lemma candidate_113: forall (y : lst) (x : lst), @eq lst (lfappend x (rev (rev y))) (lfappend x (rev (rev y))).
Lemma candidate_114: forall (y : lst) (x : lst), @eq lst (lfappend x (rev (rev y))) (lfappend x (lfappend y Nil)).
Lemma candidate_115: forall (y : lst) (x : lst), @eq lst (lfappend x (rev (rev y))) (lfappend x y).
Lemma candidate_116: forall (y : lst), @eq lst (rev (rev y)) (rev (lfappend (rev y) Nil)).
Lemma candidate_117: forall (y : lst), @eq lst (rev (rev y)) (lfappend (rev (rev y)) Nil).
Lemma candidate_118: forall (y : lst), @eq lst (rev (rev y)) (lfappend (lfappend y Nil) Nil).
Lemma candidate_119: forall (y : lst), @eq lst (rev (rev y)) (rev (rev y)).
Lemma candidate_120: forall (y : lst), @eq lst (rev (rev y)) (lfappend y Nil).
Lemma candidate_121: forall (y : lst), @eq lst (rev (rev y)) (y).
Lemma candidate_122: forall (y : lst), @eq lst (rev y) (lfappend (rev (lfappend y Nil)) Nil).
Lemma candidate_123: forall (y : lst), @eq lst (rev y) (lfappend (lfappend (rev y) Nil) Nil).
Lemma candidate_124: forall (y : lst), @eq lst (rev y) (rev (rev (rev y))).
Lemma candidate_125: forall (y : lst), @eq lst (rev y) (rev (lfappend y Nil)).
Lemma candidate_126: forall (y : lst), @eq lst (rev y) (lfappend (rev y) Nil).
Lemma candidate_127: forall (y : lst), @eq lst (rev y) (rev y).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 679 seconds
Duplicates removed: 60
Filtered by Quickchick: 0
Filtered by script: 10
Remaining: 57

Lemmas: 
Lemma candidate_121: forall (y : lst), @eq lst (rev (rev y)) (y).
Lemma candidate_17: forall (lf2 : lst), @eq lst lf2 (rev (rev lf2)).
Lemma candidate_5: forall (lf1 : lst), @eq lst (rev (rev lf1)) lf1.
Lemma candidate_18: forall (lf2 : lst), @eq lst lf2 (lfappend lf2 Nil).
Lemma candidate_6: forall (lf1 : lst), @eq lst (lfappend lf1 Nil) lf1.
Lemma candidate_124: forall (y : lst), @eq lst (rev y) (rev (rev (rev y))).
Lemma candidate_126: forall (y : lst), @eq lst (rev y) (lfappend (rev y) Nil).
Lemma candidate_125: forall (y : lst), @eq lst (rev y) (rev (lfappend y Nil)).
Lemma candidate_120: forall (y : lst), @eq lst (rev (rev y)) (lfappend y Nil).
Lemma candidate_64: forall (lf4 : lst), @eq lst (rev lf4) (rev (rev (rev lf4))).
Lemma candidate_66: forall (lf4 : lst), @eq lst (rev lf4) (lfappend (rev lf4) Nil).
Lemma candidate_65: forall (lf4 : lst), @eq lst (rev lf4) (rev (lfappend lf4 Nil)).
Lemma candidate_15: forall (lf2 : lst), @eq lst lf2 (lfappend (rev (rev lf2)) Nil).
Lemma candidate_14: forall (lf2 : lst), @eq lst lf2 (rev (lfappend (rev lf2) Nil)).
Lemma candidate_3: forall (lf1 : lst), @eq lst (lfappend (rev (rev lf1)) Nil) lf1.
Lemma candidate_2: forall (lf1 : lst), @eq lst (rev (lfappend (rev lf1) Nil)) lf1.
Lemma candidate_16: forall (lf2 : lst), @eq lst lf2 (lfappend (lfappend lf2 Nil) Nil).
Lemma candidate_4: forall (lf1 : lst), @eq lst (lfappend (lfappend lf1 Nil) Nil) lf1.
Lemma candidate_115: forall (y : lst) (x : lst), @eq lst (lfappend x (rev (rev y))) (lfappend x y).
Lemma candidate_8: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (rev (rev x)) y).
Lemma candidate_117: forall (y : lst), @eq lst (rev (rev y)) (lfappend (rev (rev y)) Nil).
Lemma candidate_116: forall (y : lst), @eq lst (rev (rev y)) (rev (lfappend (rev y) Nil)).
Lemma candidate_12: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend y Nil)).
Lemma candidate_10: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x y) Nil).
Lemma candidate_9: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend (lfappend x Nil) y).
Lemma candidate_123: forall (y : lst), @eq lst (rev y) (lfappend (lfappend (rev y) Nil) Nil).
Lemma candidate_122: forall (y : lst), @eq lst (rev y) (lfappend (rev (lfappend y Nil)) Nil).
Lemma candidate_118: forall (y : lst), @eq lst (rev (rev y)) (lfappend (lfappend y Nil) Nil).
Lemma candidate_35: forall (lf3 : lst) (x : lst), @eq lst (lfappend x (rev (rev lf3))) (lfappend x lf3).
Lemma candidate_32: forall (lf3 : lst) (x : lst), @eq lst (lfappend (rev (rev x)) lf3) (lfappend x lf3).
Lemma candidate_23: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend x (rev (rev lf3))).
Lemma candidate_20: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend (rev (rev x)) lf3).
Lemma candidate_36: forall (lf3 : lst) (x : lst), @eq lst (lfappend x (lfappend lf3 Nil)) (lfappend x lf3).
Lemma candidate_34: forall (lf3 : lst) (x : lst), @eq lst (lfappend (lfappend x lf3) Nil) (lfappend x lf3).
Lemma candidate_33: forall (lf3 : lst) (x : lst), @eq lst (lfappend (lfappend x Nil) lf3) (lfappend x lf3).
Lemma candidate_24: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend x (lfappend lf3 Nil)).
Lemma candidate_22: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend (lfappend x lf3) Nil).
Lemma candidate_21: forall (lf3 : lst) (x : lst), @eq lst (lfappend x lf3) (lfappend (lfappend x Nil) lf3).
Lemma candidate_63: forall (lf4 : lst), @eq lst (rev lf4) (lfappend (lfappend (rev lf4) Nil) Nil).
Lemma candidate_62: forall (lf4 : lst), @eq lst (rev lf4) (lfappend (rev (lfappend lf4 Nil)) Nil).
Lemma candidate_78: forall (lf4 : lst) (x : lst), @eq lst (rev (lfappend lf4 (rev x))) (lfappend x (rev lf4)).
Lemma candidate_60: forall (lf4 : lst) (x : lst), @eq lst (lfappend x (rev lf4)) (rev (lfappend lf4 (rev x))).
Lemma candidate_110: forall (y : lst) (x : lst), @eq lst (lfappend x (rev (rev y))) (lfappend (rev (rev x)) y).
Lemma candidate_114: forall (y : lst) (x : lst), @eq lst (lfappend x (rev (rev y))) (lfappend x (lfappend y Nil)).
Lemma candidate_112: forall (y : lst) (x : lst), @eq lst (lfappend x (rev (rev y))) (lfappend (lfappend x y) Nil).
Lemma candidate_111: forall (y : lst) (x : lst), @eq lst (lfappend x (rev (rev y))) (lfappend (lfappend x Nil) y).
Lemma candidate_81: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend (rev (rev y)) Nil)).
Lemma candidate_80: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (rev (lfappend (rev y) Nil))).
Lemma candidate_76: forall (lf4 : lst) (x : lst), @eq lst (rev (rev (lfappend x (rev lf4)))) (lfappend x (rev lf4)).
Lemma candidate_74: forall (lf4 : lst) (x : lst), @eq lst (lfappend (rev (rev x)) (rev lf4)) (lfappend x (rev lf4)).
Lemma candidate_58: forall (lf4 : lst) (x : lst), @eq lst (lfappend x (rev lf4)) (rev (rev (lfappend x (rev lf4)))).
Lemma candidate_56: forall (lf4 : lst) (x : lst), @eq lst (lfappend x (rev lf4)) (lfappend (rev (rev x)) (rev lf4)).
Lemma candidate_82: forall (y : lst) (x : lst), @eq lst (lfappend x y) (lfappend x (lfappend (lfappend y Nil) Nil)).
Lemma candidate_77: forall (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend x (rev lf4)) Nil) (lfappend x (rev lf4)).
Lemma candidate_75: forall (lf4 : lst) (x : lst), @eq lst (lfappend (lfappend x Nil) (rev lf4)) (lfappend x (rev lf4)).
Lemma candidate_59: forall (lf4 : lst) (x : lst), @eq lst (lfappend x (rev lf4)) (lfappend (lfappend x (rev lf4)) Nil).
Lemma candidate_57: forall (lf4 : lst) (x : lst), @eq lst (lfappend x (rev lf4)) (lfappend (lfappend x Nil) (rev lf4)).