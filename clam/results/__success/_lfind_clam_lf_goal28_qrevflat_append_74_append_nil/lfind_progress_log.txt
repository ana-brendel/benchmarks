File Information
- File name: goal28
- Original Directory: /home/anabrendel/lfind/benchmarks/clam/sources/clam_lf_goal28_qrevflat_append_74_append_nil
- LFind Directory: /home/anabrendel/lfind/benchmarks/clam/sources/_lfind_clam_lf_goal28_qrevflat_append_74_append_nil
- Namespace: adtind
- Proof name: qrevflat_lfappend
- Theorem: Theorem qrevflat_lfappend: forall (x : tree) (y : lst), @eq lst (lfappend (revflat x) y) (qrevaflat x y).
- Declarations: 
From lfind Require Import LFind.

Proof Context
* Goal State: @eq lst (revflat x2) (lfappend (revflat x2) Nil)

* Hypothesis:
IHx2 : forall y : lst, @eq lst (lfappend (revflat x2) y) (qrevaflat x2 y)
x1 : tree
x2 : tree
n : natural
IHx1 : forall y : lst, @eq lst (lfappend (revflat x1) y) (qrevaflat x1 y)

* Types:
Set
Prop
tree
lst

* Polymorphic Types:


* Variables:
x1 : tree
x2 : tree

* Terms:
lfappend (revflat x1) _UNBOUND_REL_1 : lst
forall y : lst, @eq lst (lfappend (revflat x2) y) (qrevaflat x2 y) : Prop
revflat x2 : lst
qrevaflat x2 _UNBOUND_REL_1 : lst
@eq lst (revflat x2) (lfappend (revflat x2) Nil) : Prop
qrevaflat x1 _UNBOUND_REL_1 : lst
revflat x1 : lst
@eq lst (lfappend (revflat x2) _UNBOUND_REL_1) (qrevaflat x2 _UNBOUND_REL_1) : Prop
forall y : lst, @eq lst (lfappend (revflat x1) y) (qrevaflat x1 y) : Prop
@eq lst (lfappend (revflat x1) _UNBOUND_REL_1) (qrevaflat x1 _UNBOUND_REL_1) : Prop
x1 : tree
lst : Set
tree : Set
lfappend (revflat x2) Nil : lst
natural : Set
x2 : tree
lfappend (revflat x2) _UNBOUND_REL_1 : lst
Nil : lst

* Functions:
lfappend  : forall (_ : lst) (_ : lst), lst
@eq  : forall (A : Type) (_ : A) (_ : A), Prop
revflat  : forall _ : tree, lst
qrevaflat  : forall (_ : tree) (_ : lst), lst

<---GENERALIZATION--->
Time elapsed: 2 seconds
Generalized Variables:
lf3 : lst = Nil
lf1 : lst = lfappend (revflat x2) Nil
lf2 : lst = revflat x2

Generalizations:
Lemma conj1: forall (lf2 : lst) (lf1 : lst), @eq lst lf2 lf1.
Lemma conj2: forall (lf1 : lst) (x2 : tree), @eq lst (revflat x2) lf1.
Lemma conj3: forall (lf2 : lst) (lf3 : lst), @eq lst lf2 (lfappend lf2 lf3).
Lemma conj4: forall (x2 : tree) (lf3 : lst), @eq lst (revflat x2) (lfappend (revflat x2) lf3).
Lemma conj7: forall (lf2 : lst), @eq lst lf2 (lfappend lf2 Nil).
Lemma conj8: forall (x2 : tree), @eq lst (revflat x2) (lfappend (revflat x2) Nil).


<---VALIDITY CHECKS--->
Time elapsed: 11 seconds
Valid:
Lemma conj8: forall (x2 : tree), @eq lst (revflat x2) (lfappend (revflat x2) Nil).
Lemma conj7: forall (lf2 : lst), @eq lst lf2 (lfappend lf2 Nil).

Invalid:
Lemma conj4: forall (x2 : tree) (lf3 : lst), @eq lst (revflat x2) (lfappend (revflat x2) lf3).
Lemma conj3: forall (lf2 : lst) (lf3 : lst), @eq lst lf2 (lfappend lf2 lf3).
Lemma conj2: forall (lf1 : lst) (x2 : tree), @eq lst (revflat x2) lf1.
Lemma conj1: forall (lf2 : lst) (lf1 : lst), @eq lst lf2 lf1.

<---ADD IMPLICATIONS--->
Time elapsed: 20 seconds
Generalizations:
Lemma conj4: forall (x2 : tree) (lf3 : lst), @eq lst (revflat x2) (lfappend (revflat x2) lf3).
Lemma conj3: forall (lf2 : lst) (lf3 : lst), @eq lst lf2 (lfappend lf2 lf3).
Lemma conj2: forall (lf1 : lst) (x2 : tree), @eq lst (revflat x2) lf1.
Lemma conj1: forall (lf2 : lst) (lf1 : lst), @eq lst lf2 lf1.


<---VALIDITY CHECKS--->
Time elapsed: 26 seconds
Valid:

Invalid:
Lemma conj1: forall (lf2 : lst) (lf1 : lst), @eq lst lf2 lf1.
Lemma conj2: forall (lf1 : lst) (x2 : tree), @eq lst (revflat x2) lf1.
Lemma conj3: forall (lf2 : lst) (lf3 : lst), @eq lst lf2 (lfappend lf2 lf3).
Lemma conj4: forall (x2 : tree) (lf3 : lst), @eq lst (revflat x2) (lfappend (revflat x2) lf3).


<---CREATE SKETCHES--->
Time elapsed: 27 seconds
Sketches:
Sketch conj2_sketch0 : @eq lst (##hole##) lf1
Sketch conj2_term_sketch0 : @eq lst (revflat x2) (##hole##)
Sketch conj3_sketch0 : @eq lst lf2 (##hole##)
Sketch conj3_term_sketch0 : @eq lst (lfappend lf2 lf3) (##hole##)
Sketch conj4_sketch0 : @eq lst (##hole##) (lfappend (##hole##) lf3)
Sketch conj4_sketch1 : @eq lst (revflat x2) (##hole##)
Sketch conj4_term_sketch0 : @eq lst (revflat x2) (##hole##)
Sketch conj4_term_sketch1 : @eq lst (lfappend (revflat x2) lf3) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 27 seconds
Problems per Sketch:
Sketch conj4_term_sketch1 --> Problem  synth_6
Sketch conj2_term_sketch0 --> Problem  synth_2
Sketch conj3_sketch0 --> Problem  synth_3
Sketch conj3_term_sketch0 --> Problem  synth_4
Sketch conj4_term_sketch0 --> Problem  synth_2
Sketch conj4_sketch0 --> Problem  synth_5
Sketch conj2_sketch0 --> Problem  synth_1
Sketch conj4_sketch1 --> Problem  synth_2


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 33 seconds

Problem: synth_3
 lfappend lf2 Nil
 qreva lf2 Nil
 Cons Zero Nil
 rev lf2
 lf2
 Nil

Problem: synth_6
 qreva lf3 Nil
 Cons Zero Nil
 revflat x2
 rev lf3
 lf3
 Nil

Problem: synth_5
 lfappend lf3 Nil
 qreva lf3 Nil
 Cons Zero Nil
 rev lf3
 lf3
 Nil

Problem: synth_4
 Cons Zero Nil
 rev lf3
 rev lf2
 lf3
 lf2
 Nil

Problem: synth_1
 lfappend lf1 Nil
 qreva lf1 Nil
 Cons Zero Nil
 rev lf1
 lf1
 Nil

Problem: synth_2
 Cons Zero (revflat x2)
 rev (revflat x2)
 qrevaflat x2 Nil
 Cons Zero Nil
 revflat x2
 Nil

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 33 seconds
Lemmas:
Lemma candidate_1: forall (x2 : tree), @eq lst (revflat x2) (lfappend (revflat x2) Nil).
Lemma candidate_2: forall (lf2 : lst), @eq lst lf2 (lfappend lf2 Nil).
Lemma candidate_3: forall (lf1 : lst), @eq lst (lfappend lf1 Nil) lf1.
Lemma candidate_4: forall (lf1 : lst), @eq lst (qreva lf1 Nil) lf1.
Lemma candidate_5: forall (lf1 : lst), @eq lst (Cons Zero Nil) lf1.
Lemma candidate_6: forall (lf1 : lst), @eq lst (rev lf1) lf1.
Lemma candidate_7: forall (lf1 : lst), @eq lst (lf1) lf1.
Lemma candidate_8: forall (lf1 : lst), @eq lst (Nil) lf1.
Lemma candidate_9: forall (x2 : tree), @eq lst (revflat x2) (Cons Zero (revflat x2)).
Lemma candidate_10: forall (x2 : tree), @eq lst (revflat x2) (rev (revflat x2)).
Lemma candidate_11: forall (x2 : tree), @eq lst (revflat x2) (qrevaflat x2 Nil).
Lemma candidate_12: forall (x2 : tree), @eq lst (revflat x2) (Cons Zero Nil).
Lemma candidate_13: forall (x2 : tree), @eq lst (revflat x2) (revflat x2).
Lemma candidate_14: forall (x2 : tree), @eq lst (revflat x2) (Nil).
Lemma candidate_15: forall (lf2 : lst), @eq lst lf2 (lfappend lf2 Nil).
Lemma candidate_16: forall (lf2 : lst), @eq lst lf2 (qreva lf2 Nil).
Lemma candidate_17: forall (lf2 : lst), @eq lst lf2 (Cons Zero Nil).
Lemma candidate_18: forall (lf2 : lst), @eq lst lf2 (rev lf2).
Lemma candidate_19: forall (lf2 : lst), @eq lst lf2 (lf2).
Lemma candidate_20: forall (lf2 : lst), @eq lst lf2 (Nil).
Lemma candidate_21: forall (lf3 : lst) (lf2 : lst), @eq lst (lfappend lf2 lf3) (Cons Zero Nil).
Lemma candidate_22: forall (lf3 : lst) (lf2 : lst), @eq lst (lfappend lf2 lf3) (rev lf3).
Lemma candidate_23: forall (lf3 : lst) (lf2 : lst), @eq lst (lfappend lf2 lf3) (rev lf2).
Lemma candidate_24: forall (lf3 : lst) (lf2 : lst), @eq lst (lfappend lf2 lf3) (lf3).
Lemma candidate_25: forall (lf3 : lst) (lf2 : lst), @eq lst (lfappend lf2 lf3) (lf2).
Lemma candidate_26: forall (lf3 : lst) (lf2 : lst), @eq lst (lfappend lf2 lf3) (Nil).
Lemma candidate_27: forall (lf3 : lst), @eq lst (lfappend lf3 Nil) (lfappend (lfappend lf3 Nil) lf3).
Lemma candidate_28: forall (lf3 : lst), @eq lst (qreva lf3 Nil) (lfappend (qreva lf3 Nil) lf3).
Lemma candidate_29: forall (lf3 : lst), @eq lst (Cons Zero Nil) (lfappend (Cons Zero Nil) lf3).
Lemma candidate_30: forall (lf3 : lst), @eq lst (rev lf3) (lfappend (rev lf3) lf3).
Lemma candidate_31: forall (lf3 : lst), @eq lst (lf3) (lfappend (lf3) lf3).
Lemma candidate_32: forall (lf3 : lst), @eq lst (Nil) (lfappend (Nil) lf3).
Lemma candidate_33: forall (x2 : tree), @eq lst (revflat x2) (Cons Zero (revflat x2)).
Lemma candidate_34: forall (x2 : tree), @eq lst (revflat x2) (rev (revflat x2)).
Lemma candidate_35: forall (x2 : tree), @eq lst (revflat x2) (qrevaflat x2 Nil).
Lemma candidate_36: forall (x2 : tree), @eq lst (revflat x2) (Cons Zero Nil).
Lemma candidate_37: forall (x2 : tree), @eq lst (revflat x2) (revflat x2).
Lemma candidate_38: forall (x2 : tree), @eq lst (revflat x2) (Nil).
Lemma candidate_39: forall (x2 : tree), @eq lst (revflat x2) (Cons Zero (revflat x2)).
Lemma candidate_40: forall (x2 : tree), @eq lst (revflat x2) (rev (revflat x2)).
Lemma candidate_41: forall (x2 : tree), @eq lst (revflat x2) (qrevaflat x2 Nil).
Lemma candidate_42: forall (x2 : tree), @eq lst (revflat x2) (Cons Zero Nil).
Lemma candidate_43: forall (x2 : tree), @eq lst (revflat x2) (revflat x2).
Lemma candidate_44: forall (x2 : tree), @eq lst (revflat x2) (Nil).
Lemma candidate_45: forall (lf3 : lst) (x2 : tree), @eq lst (lfappend (revflat x2) lf3) (qreva lf3 Nil).
Lemma candidate_46: forall (lf3 : lst) (x2 : tree), @eq lst (lfappend (revflat x2) lf3) (Cons Zero Nil).
Lemma candidate_47: forall (lf3 : lst) (x2 : tree), @eq lst (lfappend (revflat x2) lf3) (revflat x2).
Lemma candidate_48: forall (lf3 : lst) (x2 : tree), @eq lst (lfappend (revflat x2) lf3) (rev lf3).
Lemma candidate_49: forall (lf3 : lst) (x2 : tree), @eq lst (lfappend (revflat x2) lf3) (lf3).
Lemma candidate_50: forall (lf3 : lst) (x2 : tree), @eq lst (lfappend (revflat x2) lf3) (Nil).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 100 seconds
Duplicates removed: 14
Filtered by Quickchick: 30
Filtered by script: 3
Remaining: 3

Lemmas: 
Lemma candidate_3: forall (lf1 : lst), @eq lst (lfappend lf1 Nil) lf1.
Lemma candidate_2: forall (lf2 : lst), @eq lst lf2 (lfappend lf2 Nil).
Lemma candidate_11: forall (x2 : tree), @eq lst (revflat x2) (qrevaflat x2 Nil).