File Information
- File name: list_rev2_append
- Original Directory: /home/anabrendel/lfind/benchmarks/lia/sources/lia_lf_list_rev2_append-rev2_append-41-append_single
- LFind Directory: /home/anabrendel/lfind/benchmarks/lia/sources/_lfind_lia_lf_list_rev2_append-rev2_append-41-append_single
- Namespace: adtind
- Proof name: rev2_append
- Theorem: Theorem rev2_append: forall x0 a0 : lst, @eq lst (rev2 x0 a0) (append (rev2 x0 Nil) a0).
- Declarations: 
From lfind Require Import LFind.

Proof Context
* Goal State: @eq lst (append (rev2 x Nil) (Cons n a)) (append (rev2 x (Cons n Nil)) a)

* Hypothesis:
IHx : forall a0 : lst, @eq lst (rev2 x a0) (append (rev2 x Nil) a0)
x : lst
n : nat
a : lst

* Types:
Set
Prop
lst
nat

* Polymorphic Types:


* Variables:
x : lst
n : nat
a : lst

* Terms:
forall a0 : lst, @eq lst (rev2 x a0) (append (rev2 x Nil) a0) : Prop
rev2 x (Cons n Nil) : lst
Cons n a : lst
x : lst
rev2 x Nil : lst
rev2 x _UNBOUND_REL_1 : lst
@eq lst (append (rev2 x Nil) (Cons n a)) (append (rev2 x (Cons n Nil)) a) : Prop
append (rev2 x (Cons n Nil)) a : lst
nat : Set
append (rev2 x Nil) _UNBOUND_REL_1 : lst
lst : Set
Cons n Nil : lst
n : nat
Nil : lst
a : lst
append (rev2 x Nil) (Cons n a) : lst
@eq lst (rev2 x _UNBOUND_REL_1) (append (rev2 x Nil) _UNBOUND_REL_1) : Prop

* Functions:
append  : forall (_ : lst) (_ : lst), lst
rev2  : forall (_ : lst) (_ : lst), lst
Cons  : forall (_ : nat) (_ : lst), lst
@eq  : forall (A : Type) (_ : A) (_ : A), Prop

<---GENERALIZATION--->
Time elapsed: 3 seconds
Generalized Variables:
lf3 : lst = rev2 x (Cons n Nil)
lf7 : lst = Nil
lf1 : lst = append (rev2 x Nil) (Cons n a)
lf4 : lst = Cons n Nil
lf5 : lst = rev2 x Nil
lf2 : lst = append (rev2 x (Cons n Nil)) a
lf6 : lst = Cons n a

Generalizations:
Lemma conj1: forall (lf2 : lst) (lf1 : lst), @eq lst lf1 lf2.
Lemma conj3: forall (lf1 : lst) (a : lst) (lf3 : lst), @eq lst lf1 (append lf3 a).
Lemma conj17: forall (lf6 : lst) (lf2 : lst) (lf5 : lst), @eq lst (append lf5 lf6) lf2.
Lemma conj18: forall (lf2 : lst) (lf5 : lst) (n : nat) (a : lst), @eq lst (append lf5 (Cons n a)) lf2.
Lemma conj19: forall (lf6 : lst) (lf5 : lst) (a : lst) (lf3 : lst), @eq lst (append lf5 lf6) (append lf3 a).
Lemma conj20: forall (lf5 : lst) (n : nat) (a : lst) (lf3 : lst), @eq lst (append lf5 (Cons n a)) (append lf3 a).
Lemma conj21: forall (lf6 : lst) (lf2 : lst) (x : lst) (lf7 : lst), @eq lst (append (rev2 x lf7) lf6) lf2.
Lemma conj22: forall (lf2 : lst) (x : lst) (n : nat) (lf7 : lst) (a : lst), @eq lst (append (rev2 x lf7) (Cons n a)) lf2.
Lemma conj23: forall (lf6 : lst) (x : lst) (lf7 : lst) (a : lst) (lf3 : lst), @eq lst (append (rev2 x lf7) lf6) (append lf3 a).
Lemma conj24: forall (x : lst) (n : nat) (lf7 : lst) (a : lst) (lf3 : lst), @eq lst (append (rev2 x lf7) (Cons n a)) (append lf3 a).
Lemma conj53: forall (lf6 : lst) (lf2 : lst) (x : lst), @eq lst (append (rev2 x Nil) lf6) lf2.
Lemma conj54: forall (lf2 : lst) (x : lst) (n : nat) (a : lst), @eq lst (append (rev2 x Nil) (Cons n a)) lf2.
Lemma conj55: forall (lf6 : lst) (x : lst) (a : lst) (lf3 : lst), @eq lst (append (rev2 x Nil) lf6) (append lf3 a).
Lemma conj56: forall (x : lst) (n : nat) (a : lst) (lf3 : lst), @eq lst (append (rev2 x Nil) (Cons n a)) (append lf3 a).
Lemma conj67: forall (x : lst) (lf4 : lst) (lf1 : lst) (a : lst), @eq lst lf1 (append (rev2 x lf4) a).
Lemma conj75: forall (x : lst) (lf1 : lst) (lf7 : lst) (n : nat) (a : lst), @eq lst lf1 (append (rev2 x (Cons n lf7)) a).
Lemma conj83: forall (lf6 : lst) (lf5 : lst) (x : lst) (lf4 : lst) (a : lst), @eq lst (append lf5 lf6) (append (rev2 x lf4) a).
Lemma conj84: forall (lf5 : lst) (x : lst) (lf4 : lst) (n : nat) (a : lst), @eq lst (append lf5 (Cons n a)) (append (rev2 x lf4) a).
Lemma conj87: forall (lf6 : lst) (x : lst) (lf4 : lst) (lf7 : lst) (a : lst), @eq lst (append (rev2 x lf7) lf6) (append (rev2 x lf4) a).
Lemma conj88: forall (x : lst) (lf4 : lst) (n : nat) (lf7 : lst) (a : lst), @eq lst (append (rev2 x lf7) (Cons n a)) (append (rev2 x lf4) a).
Lemma conj91: forall (lf6 : lst) (lf5 : lst) (x : lst) (lf7 : lst) (n : nat) (a : lst), @eq lst (append lf5 lf6) (append (rev2 x (Cons n lf7)) a).
Lemma conj92: forall (lf5 : lst) (x : lst) (lf7 : lst) (n : nat) (a : lst), @eq lst (append lf5 (Cons n a)) (append (rev2 x (Cons n lf7)) a).
Lemma conj95: forall (lf6 : lst) (x : lst) (lf7 : lst) (n : nat) (a : lst), @eq lst (append (rev2 x lf7) lf6) (append (rev2 x (Cons n lf7)) a).
Lemma conj96: forall (x : lst) (lf7 : lst) (n : nat) (a : lst), @eq lst (append (rev2 x lf7) (Cons n a)) (append (rev2 x (Cons n lf7)) a).
Lemma conj107: forall (x : lst) (lf1 : lst) (n : nat) (a : lst), @eq lst lf1 (append (rev2 x (Cons n Nil)) a).
Lemma conj119: forall (lf6 : lst) (x : lst) (lf4 : lst) (a : lst), @eq lst (append (rev2 x Nil) lf6) (append (rev2 x lf4) a).
Lemma conj120: forall (x : lst) (lf4 : lst) (n : nat) (a : lst), @eq lst (append (rev2 x Nil) (Cons n a)) (append (rev2 x lf4) a).
Lemma conj123: forall (lf6 : lst) (lf5 : lst) (x : lst) (n : nat) (a : lst), @eq lst (append lf5 lf6) (append (rev2 x (Cons n Nil)) a).
Lemma conj124: forall (lf5 : lst) (x : lst) (n : nat) (a : lst), @eq lst (append lf5 (Cons n a)) (append (rev2 x (Cons n Nil)) a).
Lemma conj127: forall (lf6 : lst) (x : lst) (n : nat) (a : lst), @eq lst (append (rev2 x Nil) lf6) (append (rev2 x (Cons n Nil)) a).
Lemma conj128: forall (x : lst) (n : nat) (a : lst), @eq lst (append (rev2 x Nil) (Cons n a)) (append (rev2 x (Cons n Nil)) a).