LFind Results
LFind Directory: /home/anabrendel/lfind/benchmarks/lia/sources/_lfind_lia_lf_list_rev2_append-rev2_append-41-append_single

Number of Lemmas: 987
Number of Lemmas (after duplicates removed): 216
Number of Lemmas (after QuickChick used to filter): 103
* Number of Candidate Lemmas: 82

Time until ranking: 2681
Time to complete: 7912

Stuck state true independent of hypotheses: true

Category 1:
Count = 0


Category 2:
Count = 8

Lemma candidate_337: forall (a : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (rev2 x lf4) a) (rev2 (rev2 lf4 x) a).
Lemma candidate_338: forall (a : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (rev2 x lf4) a) (rev2 x (lfappend lf4 a)).
Lemma candidate_215: forall (x : lst) (lf6 : lst), @eq lst (lfappend (rev2 x Nil) lf6) (rev2 (rev2 lf6 x) Nil).
Lemma candidate_861: forall (a : lst) (n : nat) (x : lst), @eq lst (lfappend (rev2 x (Cons n Nil)) a) (rev2 x (Cons n a)).
Lemma candidate_44: forall (lf7 : lst) (x : lst) (lf6 : lst), @eq lst (lfappend (rev2 x lf7) lf6) (rev2 x (lfappend lf7 lf6)).
Lemma candidate_377: forall (a : lst) (n : nat) (lf5 : lst), @eq lst (lfappend lf5 (Cons n a))   (lfappend (lfappend (lfappend lf5 Nil) (Cons n Nil)) a).
Lemma candidate_794: forall (a : lst) (n : nat) (x : lst), @eq lst (lfappend (rev2 x Nil) (Cons n a))   (lfappend (lfappend (rev2 x Nil) (Cons n Nil)) a).
Lemma candidate_461: forall (a : lst) (n : nat) (lf7 : lst) (x : lst), @eq lst (lfappend (rev2 x lf7) (Cons n a))   (lfappend (rev2 x (lfappend lf7 (Cons n Nil))) a).

Category 3 (provable):
Count = 15

Lemma candidate_78: forall (lf2 : lst), @eq lst lf2 (lfappend lf2 Nil).
Lemma candidate_6: forall (lf1 : lst), @eq lst (lfappend lf1 Nil) lf1.
Lemma candidate_330: forall (lf4 : lst) (x : lst), @eq lst (rev2 x lf4) (rev2 (rev2 lf4 x) Nil).
Lemma candidate_24: forall (a : lst) (n : nat), @eq lst (Cons n a) (Cons n (lfappend a Nil)).
Lemma candidate_76: forall (lf2 : lst), @eq lst lf2 (lfappend (lfappend lf2 Nil) Nil).
Lemma candidate_4: forall (lf1 : lst), @eq lst (lfappend (lfappend lf1 Nil) Nil) lf1.
Lemma candidate_530: forall (lf7 : lst) (n : nat), @eq lst (Cons n lf7) (Cons n (lfappend lf7 Nil)).
Lemma candidate_87: forall (lf3 : lst) (a : lst), @eq lst (lfappend (lfappend lf3 Nil) a) (lfappend lf3 a).
Lemma candidate_84: forall (lf3 : lst) (a : lst), @eq lst (lfappend lf3 a) (lfappend lf3 (lfappend a Nil)).
Lemma candidate_83: forall (lf3 : lst) (a : lst), @eq lst (lfappend lf3 a) (lfappend (lfappend lf3 a) Nil).
Lemma candidate_81: forall (lf3 : lst) (a : lst), @eq lst (lfappend lf3 a) (lfappend (lfappend lf3 Nil) a).
Lemma candidate_22: forall (a : lst) (n : nat), @eq lst (Cons n a) (Cons n (lfappend (lfappend a Nil) Nil)).
Lemma candidate_12: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf5 lf6) (lfappend lf5 (lfappend lf6 Nil)).
Lemma candidate_11: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf5 lf6) (lfappend (lfappend lf5 lf6) Nil).
Lemma candidate_9: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf5 lf6) (lfappend (lfappend lf5 Nil) lf6).

Category 3 (not provable):
Count = 59

Lemma candidate_77: forall (lf2 : lst), @eq lst lf2 (rev2 (rev2 lf2 Nil) Nil).
Lemma candidate_5: forall (lf1 : lst), @eq lst (rev2 (rev2 lf1 Nil) Nil) lf1.
Lemma candidate_331: forall (lf4 : lst) (x : lst), @eq lst (rev2 x lf4) (rev2 x (lfappend lf4 Nil)).
Lemma candidate_328: forall (lf4 : lst) (x : lst), @eq lst (rev2 x lf4) (lfappend (rev2 x lf4) Nil).
Lemma candidate_222: forall (x : lst), @eq lst (rev2 x Nil) (rev2 (lfappend x Nil) Nil).
Lemma candidate_88: forall (lf3 : lst) (a : lst), @eq lst (rev2 (rev2 lf3 Nil) a) (lfappend lf3 a).
Lemma candidate_82: forall (lf3 : lst) (a : lst), @eq lst (lfappend lf3 a) (rev2 (rev2 lf3 Nil) a).
Lemma candidate_38: forall (lf7 : lst) (x : lst), @eq lst (rev2 x lf7) (rev2 x (lfappend lf7 Nil)).
Lemma candidate_23: forall (a : lst) (n : nat), @eq lst (Cons n a) (rev2 (rev2 a (Cons n Nil)) Nil).
Lemma candidate_21: forall (a : lst) (n : nat), @eq lst (Cons n a) (Cons n (rev2 (rev2 a Nil) Nil)).
Lemma candidate_75: forall (lf2 : lst), @eq lst lf2 (lfappend (rev2 (rev2 lf2 Nil) Nil) Nil).
Lemma candidate_74: forall (lf2 : lst), @eq lst lf2 (rev2 (lfappend (rev2 lf2 Nil) Nil) Nil).
Lemma candidate_10: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf5 lf6) (rev2 (rev2 lf5 Nil) lf6).
Lemma candidate_3: forall (lf1 : lst), @eq lst (lfappend (rev2 (rev2 lf1 Nil) Nil) Nil) lf1.
Lemma candidate_2: forall (lf1 : lst), @eq lst (rev2 (lfappend (rev2 lf1 Nil) Nil) Nil) lf1.
Lemma candidate_343: forall (a : lst) (lf4 : lst) (x : lst), @eq lst (rev2 (rev2 lf4 x) a) (lfappend (rev2 x lf4) a).
Lemma candidate_221: forall (x : lst), @eq lst (rev2 x Nil) (rev2 (rev2 (rev2 x Nil) Nil) Nil).
Lemma candidate_90: forall (lf3 : lst) (a : lst), @eq lst (lfappend lf3 (lfappend a Nil)) (lfappend lf3 a).
Lemma candidate_89: forall (lf3 : lst) (a : lst), @eq lst (lfappend (lfappend lf3 a) Nil) (lfappend lf3 a).
Lemma candidate_344: forall (a : lst) (lf4 : lst) (x : lst), @eq lst (rev2 x (lfappend lf4 a)) (lfappend (rev2 x lf4) a).
Lemma candidate_869: forall (a : lst) (n : nat) (x : lst), @eq lst (rev2 x (Cons n a)) (lfappend (rev2 x (Cons n Nil)) a).
Lemma candidate_220: forall (x : lst), @eq lst (rev2 x Nil) (lfappend (lfappend (rev2 x Nil) Nil) Nil).
Lemma candidate_219: forall (x : lst), @eq lst (rev2 x Nil) (lfappend (rev2 (lfappend x Nil) Nil) Nil).
Lemma candidate_217: forall (x : lst) (lf6 : lst), @eq lst (lfappend (rev2 x Nil) lf6) (rev2 x (lfappend lf6 Nil)).
Lemma candidate_216: forall (x : lst) (lf6 : lst), @eq lst (lfappend (rev2 x Nil) lf6) (lfappend (rev2 x lf6) Nil).
Lemma candidate_213: forall (x : lst) (lf6 : lst), @eq lst (lfappend (rev2 x Nil) lf6) (rev2 (lfappend x Nil) lf6).
Lemma candidate_86: forall (lf3 : lst) (a : lst), @eq lst (rev2 (rev2 lf3 Nil) (lfappend a Nil)) (lfappend lf3 a).
Lemma candidate_80: forall (lf3 : lst) (a : lst), @eq lst (lfappend lf3 a) (rev2 (rev2 lf3 Nil) (lfappend a Nil)).
Lemma candidate_853: forall (n : nat) (x : lst), @eq lst (rev2 x (Cons n Nil)) (rev2 (lfappend x Nil) (Cons n Nil)).
Lemma candidate_852: forall (n : nat) (x : lst), @eq lst (rev2 x (Cons n Nil)) (lfappend (rev2 x (Cons n Nil)) Nil).
Lemma candidate_29: forall (a : lst) (n : nat) (lf5 : lst), @eq lst (lfappend lf5 (Cons n a)) (rev2 (rev2 lf5 Nil) (Cons n a)).
Lemma candidate_20: forall (a : lst) (n : nat), @eq lst (Cons n a) (rev2 (lfappend (rev2 a Nil) (Cons n Nil)) Nil).
Lemma candidate_8: forall (lf5 : lst) (lf6 : lst), @eq lst (lfappend lf5 lf6) (rev2 (rev2 lf5 Nil) (lfappend lf6 Nil)).
Lemma candidate_790: forall (a : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (rev2 x Nil) (lfappend lf4 a)) (lfappend (rev2 x lf4) a).
Lemma candidate_379: forall (a : lst) (n : nat) (lf5 : lst), @eq lst (lfappend lf5 (Cons n a)) (lfappend (lfappend lf5 (Cons n Nil)) a).
Lemma candidate_30: forall (a : lst) (n : nat) (lf5 : lst), @eq lst (lfappend lf5 (Cons n a)) (lfappend lf5 (Cons n (lfappend a Nil))).
Lemma candidate_28: forall (a : lst) (n : nat) (lf5 : lst), @eq lst (lfappend lf5 (Cons n a)) (lfappend (lfappend lf5 Nil) (Cons n a)).
Lemma candidate_868: forall (a : lst) (n : nat) (x : lst), @eq lst (rev2 x (Cons n (lfappend a Nil))) (lfappend (rev2 x (Cons n Nil)) a).
Lemma candidate_866: forall (a : lst) (n : nat) (x : lst), @eq lst (rev2 (lfappend x Nil) (Cons n a)) (lfappend (rev2 x (Cons n Nil)) a).
Lemma candidate_860: forall (a : lst) (n : nat) (x : lst), @eq lst (lfappend (rev2 x (Cons n Nil)) a) (rev2 x (Cons n (lfappend a Nil))).
Lemma candidate_859: forall (a : lst) (n : nat) (x : lst), @eq lst (lfappend (rev2 x (Cons n Nil)) a) (lfappend (rev2 x Nil) (Cons n a)).
Lemma candidate_858: forall (a : lst) (n : nat) (x : lst), @eq lst (lfappend (rev2 x (Cons n Nil)) a) (rev2 (lfappend x Nil) (Cons n a)).
Lemma candidate_243: forall (a : lst) (n : nat) (x : lst), @eq lst (lfappend (rev2 x Nil) (Cons n a)) (rev2 x (Cons n (lfappend a Nil))).
Lemma candidate_241: forall (a : lst) (n : nat) (x : lst), @eq lst (lfappend (rev2 x Nil) (Cons n a)) (rev2 (lfappend x Nil) (Cons n a)).
Lemma candidate_851: forall (n : nat) (x : lst), @eq lst (rev2 x (Cons n Nil))   (lfappend (lfappend (rev2 x Nil) (Cons n Nil)) Nil).
Lemma candidate_850: forall (n : nat) (x : lst), @eq lst (rev2 x (Cons n Nil))   (lfappend (rev2 (lfappend x Nil) (Cons n Nil)) Nil).
Lemma candidate_378: forall (a : lst) (n : nat) (lf5 : lst), @eq lst (lfappend lf5 (Cons n a))   (lfappend (rev2 (rev2 lf5 Nil) (Cons n Nil)) a).
Lemma candidate_27: forall (a : lst) (n : nat) (lf5 : lst), @eq lst (lfappend lf5 (Cons n a))   (rev2 (rev2 lf5 Nil) (Cons n (lfappend a Nil))).
Lemma candidate_788: forall (a : lst) (lf4 : lst) (x : lst), @eq lst (lfappend (rev2 x Nil) (lfappend lf4 (lfappend a Nil)))   (lfappend (rev2 x lf4) a).
Lemma candidate_376: forall (a : lst) (n : nat) (lf5 : lst), @eq lst (lfappend lf5 (Cons n a))   (lfappend (lfappend (lfappend lf5 (Cons n Nil)) Nil) a).
Lemma candidate_26: forall (a : lst) (n : nat) (lf5 : lst), @eq lst (lfappend lf5 (Cons n a))   (lfappend (lfappend lf5 Nil) (Cons n (lfappend a Nil))).
Lemma candidate_865: forall (a : lst) (n : nat) (x : lst), @eq lst (lfappend (rev2 x Nil) (Cons n (lfappend a Nil)))   (lfappend (rev2 x (Cons n Nil)) a).
Lemma candidate_864: forall (a : lst) (n : nat) (x : lst), @eq lst (rev2 (lfappend x Nil) (Cons n (lfappend a Nil)))   (lfappend (rev2 x (Cons n Nil)) a).
Lemma candidate_857: forall (a : lst) (n : nat) (x : lst), @eq lst (lfappend (rev2 x (Cons n Nil)) a)   (lfappend (rev2 x Nil) (Cons n (lfappend a Nil))).
Lemma candidate_856: forall (a : lst) (n : nat) (x : lst), @eq lst (lfappend (rev2 x (Cons n Nil)) a)   (rev2 (lfappend x Nil) (Cons n (lfappend a Nil))).
Lemma candidate_793: forall (a : lst) (n : nat) (x : lst), @eq lst (lfappend (rev2 x Nil) (Cons n a))   (lfappend (rev2 (lfappend x Nil) (Cons n Nil)) a).
Lemma candidate_792: forall (a : lst) (n : nat) (x : lst), @eq lst (lfappend (rev2 x Nil) (Cons n a))   (lfappend (lfappend (rev2 x (Cons n Nil)) Nil) a).
Lemma candidate_240: forall (a : lst) (n : nat) (x : lst), @eq lst (lfappend (rev2 x Nil) (Cons n a))   (lfappend (rev2 x Nil) (Cons n (lfappend a Nil))).
Lemma candidate_239: forall (a : lst) (n : nat) (x : lst), @eq lst (lfappend (rev2 x Nil) (Cons n a))   (rev2 (lfappend x Nil) (Cons n (lfappend a Nil))).