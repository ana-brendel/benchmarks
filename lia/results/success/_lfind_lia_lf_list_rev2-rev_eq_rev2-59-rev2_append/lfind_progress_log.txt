File Information
- File name: list_rev2
- Original Directory: /home/anabrendel/lfind/benchmarks/lia/sources/lia_lf_list_rev2-rev_eq_rev2-59-rev2_append
- LFind Directory: /home/anabrendel/lfind/benchmarks/lia/sources/_lfind_lia_lf_list_rev2-rev_eq_rev2-59-rev2_append
- Namespace: adtind
- Proof name: rev_eq_rev2
- Theorem: Theorem rev_eq_rev2: forall x0 : lst, @eq lst (rev2 x0 Nil) (rev x0).
- Declarations: 
From lfind Require Import LFind.

Proof Context
* Goal State: @eq lst (rev2 x (Cons n Nil)) (lfappend (rev2 x Nil) (Cons n Nil))

* Hypothesis:
IHx : @eq lst (rev2 x Nil) (rev x)
x : lst
n : nat

* Types:
Set
Prop
lst
nat

* Polymorphic Types:


* Variables:
x : lst
n : nat

* Terms:
@eq lst (rev2 x Nil) (rev x) : Prop
rev2 x (Cons n Nil) : lst
@eq lst (rev2 x (Cons n Nil)) (lfappend (rev2 x Nil) (Cons n Nil)) : Prop
nat : Set
x : lst
lst : Set
rev2 x Nil : lst
Cons n Nil : lst
n : nat
rev x : lst
Nil : lst
lfappend (rev2 x Nil) (Cons n Nil) : lst

* Functions:
rev  : forall _ : lst, lst
lfappend  : forall (_ : lst) (_ : lst), lst
rev2  : forall (_ : lst) (_ : lst), lst
Cons  : forall (_ : nat) (_ : lst), lst
@eq  : forall (A : Type) (_ : A) (_ : A), Prop

<---GENERALIZATION--->
Time elapsed: 3 seconds
Generalized Variables:
lf3 : lst = Cons n Nil
lf1 : lst = lfappend (rev2 x Nil) (Cons n Nil)
lf4 : lst = rev2 x Nil
lf5 : lst = Nil
lf2 : lst = rev2 x (Cons n Nil)

Generalizations:
Lemma conj1: forall (lf2 : lst) (lf1 : lst), @eq lst lf2 lf1.
Lemma conj2: forall (x : lst) (lf1 : lst) (lf3 : lst), @eq lst (rev2 x lf3) lf1.
Lemma conj9: forall (lf2 : lst) (lf4 : lst) (lf3 : lst), @eq lst lf2 (lfappend lf4 lf3).
Lemma conj10: forall (x : lst) (lf4 : lst) (lf3 : lst), @eq lst (rev2 x lf3) (lfappend lf4 lf3).
Lemma conj13: forall (lf2 : lst) (lf5 : lst) (x : lst) (lf3 : lst), @eq lst lf2 (lfappend (rev2 x lf5) lf3).
Lemma conj14: forall (lf5 : lst) (x : lst) (lf3 : lst), @eq lst (rev2 x lf3) (lfappend (rev2 x lf5) lf3).
Lemma conj15: forall (lf2 : lst) (x : lst) (lf3 : lst), @eq lst lf2 (lfappend (rev2 x Nil) lf3).
Lemma conj16: forall (x : lst) (lf3 : lst), @eq lst (rev2 x lf3) (lfappend (rev2 x Nil) lf3).
Lemma conj18: forall (lf5 : lst) (x : lst) (lf1 : lst) (n : nat), @eq lst (rev2 x (Cons n lf5)) lf1.
Lemma conj20: forall (x : lst) (lf1 : lst) (n : nat), @eq lst (rev2 x (Cons n Nil)) lf1.
Lemma conj25: forall (lf2 : lst) (lf5 : lst) (lf4 : lst) (n : nat), @eq lst lf2 (lfappend lf4 (Cons n lf5)).
Lemma conj26: forall (lf5 : lst) (x : lst) (lf4 : lst) (n : nat), @eq lst (rev2 x (Cons n lf5)) (lfappend lf4 (Cons n lf5)).
Lemma conj27: forall (lf2 : lst) (lf4 : lst) (n : nat), @eq lst lf2 (lfappend lf4 (Cons n Nil)).
Lemma conj28: forall (x : lst) (lf4 : lst) (n : nat), @eq lst (rev2 x (Cons n Nil)) (lfappend lf4 (Cons n Nil)).
Lemma conj29: forall (lf2 : lst) (lf5 : lst) (x : lst) (n : nat), @eq lst lf2 (lfappend (rev2 x lf5) (Cons n lf5)).
Lemma conj30: forall (lf5 : lst) (x : lst) (n : nat), @eq lst (rev2 x (Cons n lf5)) (lfappend (rev2 x lf5) (Cons n lf5)).
Lemma conj31: forall (lf2 : lst) (x : lst) (n : nat), @eq lst lf2 (lfappend (rev2 x Nil) (Cons n Nil)).
Lemma conj32: forall (x : lst) (n : nat), @eq lst (rev2 x (Cons n Nil)) (lfappend (rev2 x Nil) (Cons n Nil)).


<---VALIDITY CHECKS--->
Time elapsed: 39 seconds
Valid:
Lemma conj32: forall (x : lst) (n : nat), @eq lst (rev2 x (Cons n Nil)) (lfappend (rev2 x Nil) (Cons n Nil)).
Lemma conj16: forall (x : lst) (lf3 : lst), @eq lst (rev2 x lf3) (lfappend (rev2 x Nil) lf3).

Invalid:
Lemma conj31: forall (lf2 : lst) (x : lst) (n : nat), @eq lst lf2 (lfappend (rev2 x Nil) (Cons n Nil)).
Lemma conj30: forall (lf5 : lst) (x : lst) (n : nat), @eq lst (rev2 x (Cons n lf5)) (lfappend (rev2 x lf5) (Cons n lf5)).
Lemma conj29: forall (lf2 : lst) (lf5 : lst) (x : lst) (n : nat), @eq lst lf2 (lfappend (rev2 x lf5) (Cons n lf5)).
Lemma conj28: forall (x : lst) (lf4 : lst) (n : nat), @eq lst (rev2 x (Cons n Nil)) (lfappend lf4 (Cons n Nil)).
Lemma conj27: forall (lf2 : lst) (lf4 : lst) (n : nat), @eq lst lf2 (lfappend lf4 (Cons n Nil)).
Lemma conj26: forall (lf5 : lst) (x : lst) (lf4 : lst) (n : nat), @eq lst (rev2 x (Cons n lf5)) (lfappend lf4 (Cons n lf5)).
Lemma conj25: forall (lf2 : lst) (lf5 : lst) (lf4 : lst) (n : nat), @eq lst lf2 (lfappend lf4 (Cons n lf5)).
Lemma conj20: forall (x : lst) (lf1 : lst) (n : nat), @eq lst (rev2 x (Cons n Nil)) lf1.
Lemma conj18: forall (lf5 : lst) (x : lst) (lf1 : lst) (n : nat), @eq lst (rev2 x (Cons n lf5)) lf1.
Lemma conj15: forall (lf2 : lst) (x : lst) (lf3 : lst), @eq lst lf2 (lfappend (rev2 x Nil) lf3).
Lemma conj14: forall (lf5 : lst) (x : lst) (lf3 : lst), @eq lst (rev2 x lf3) (lfappend (rev2 x lf5) lf3).
Lemma conj13: forall (lf2 : lst) (lf5 : lst) (x : lst) (lf3 : lst), @eq lst lf2 (lfappend (rev2 x lf5) lf3).
Lemma conj10: forall (x : lst) (lf4 : lst) (lf3 : lst), @eq lst (rev2 x lf3) (lfappend lf4 lf3).
Lemma conj9: forall (lf2 : lst) (lf4 : lst) (lf3 : lst), @eq lst lf2 (lfappend lf4 lf3).
Lemma conj2: forall (x : lst) (lf1 : lst) (lf3 : lst), @eq lst (rev2 x lf3) lf1.
Lemma conj1: forall (lf2 : lst) (lf1 : lst), @eq lst lf2 lf1.

<---ADD IMPLICATIONS--->
Time elapsed: 65 seconds
Generalizations:
Lemma conj31: forall (lf2 : lst) (x : lst) (n : nat), @eq lst lf2 (lfappend (rev2 x Nil) (Cons n Nil)).
Lemma conj30: forall (lf5 : lst) (x : lst) (n : nat), @eq lst (rev2 x (Cons n lf5)) (lfappend (rev2 x lf5) (Cons n lf5)).
Lemma conj30_imp: forall (lf5 : lst) (x : lst) (n : nat), forall _ : @eq lst (rev2 x lf5) (rev x),
@eq lst (rev2 x (Cons n lf5)) (lfappend (rev2 x lf5) (Cons n lf5)).
Lemma conj29: forall (lf2 : lst) (lf5 : lst) (x : lst) (n : nat), @eq lst lf2 (lfappend (rev2 x lf5) (Cons n lf5)).
Lemma conj28: forall (x : lst) (lf4 : lst) (n : nat), @eq lst (rev2 x (Cons n Nil)) (lfappend lf4 (Cons n Nil)).
Lemma conj28_imp: forall (x : lst) (lf4 : lst) (n : nat), forall _ : @eq lst lf4 (rev x),
@eq lst (rev2 x (Cons n Nil)) (lfappend lf4 (Cons n Nil)).
Lemma conj27: forall (lf2 : lst) (lf4 : lst) (n : nat), @eq lst lf2 (lfappend lf4 (Cons n Nil)).
Lemma conj26: forall (lf5 : lst) (x : lst) (lf4 : lst) (n : nat), @eq lst (rev2 x (Cons n lf5)) (lfappend lf4 (Cons n lf5)).
Lemma conj26_imp: forall (lf5 : lst) (x : lst) (lf4 : lst) (n : nat), forall _ : @eq lst lf4 (rev x),
@eq lst (rev2 x (Cons n lf5)) (lfappend lf4 (Cons n lf5)).
Lemma conj25: forall (lf2 : lst) (lf5 : lst) (lf4 : lst) (n : nat), @eq lst lf2 (lfappend lf4 (Cons n lf5)).
Lemma conj20: forall (x : lst) (lf1 : lst) (n : nat), @eq lst (rev2 x (Cons n Nil)) lf1.
Lemma conj18: forall (lf5 : lst) (x : lst) (lf1 : lst) (n : nat), @eq lst (rev2 x (Cons n lf5)) lf1.
Lemma conj15: forall (lf2 : lst) (x : lst) (lf3 : lst), @eq lst lf2 (lfappend (rev2 x Nil) lf3).
Lemma conj14: forall (lf5 : lst) (x : lst) (lf3 : lst), @eq lst (rev2 x lf3) (lfappend (rev2 x lf5) lf3).
Lemma conj14_imp: forall (lf5 : lst) (x : lst) (lf3 : lst), forall _ : @eq lst (rev2 x lf5) (rev x),
@eq lst (rev2 x lf3) (lfappend (rev2 x lf5) lf3).
Lemma conj13: forall (lf2 : lst) (lf5 : lst) (x : lst) (lf3 : lst), @eq lst lf2 (lfappend (rev2 x lf5) lf3).
Lemma conj10: forall (x : lst) (lf4 : lst) (lf3 : lst), @eq lst (rev2 x lf3) (lfappend lf4 lf3).
Lemma conj10_imp: forall (x : lst) (lf4 : lst) (lf3 : lst), forall _ : @eq lst lf4 (rev x), @eq lst (rev2 x lf3) (lfappend lf4 lf3).
Lemma conj9: forall (lf2 : lst) (lf4 : lst) (lf3 : lst), @eq lst lf2 (lfappend lf4 lf3).
Lemma conj2: forall (x : lst) (lf1 : lst) (lf3 : lst), @eq lst (rev2 x lf3) lf1.
Lemma conj1: forall (lf2 : lst) (lf1 : lst), @eq lst lf2 lf1.


<---VALIDITY CHECKS--->
Time elapsed: 96 seconds
Valid:
Lemma conj10_imp: forall (x : lst) (lf4 : lst) (lf3 : lst), forall _ : @eq lst lf4 (rev x), @eq lst (rev2 x lf3) (lfappend lf4 lf3).
Lemma conj14_imp: forall (lf5 : lst) (x : lst) (lf3 : lst), forall _ : @eq lst (rev2 x lf5) (rev x),
@eq lst (rev2 x lf3) (lfappend (rev2 x lf5) lf3).
Lemma conj26_imp: forall (lf5 : lst) (x : lst) (lf4 : lst) (n : nat), forall _ : @eq lst lf4 (rev x),
@eq lst (rev2 x (Cons n lf5)) (lfappend lf4 (Cons n lf5)).
Lemma conj28_imp: forall (x : lst) (lf4 : lst) (n : nat), forall _ : @eq lst lf4 (rev x),
@eq lst (rev2 x (Cons n Nil)) (lfappend lf4 (Cons n Nil)).
Lemma conj30_imp: forall (lf5 : lst) (x : lst) (n : nat), forall _ : @eq lst (rev2 x lf5) (rev x),
@eq lst (rev2 x (Cons n lf5)) (lfappend (rev2 x lf5) (Cons n lf5)).

Invalid:
Lemma conj1: forall (lf2 : lst) (lf1 : lst), @eq lst lf2 lf1.
Lemma conj2: forall (x : lst) (lf1 : lst) (lf3 : lst), @eq lst (rev2 x lf3) lf1.
Lemma conj9: forall (lf2 : lst) (lf4 : lst) (lf3 : lst), @eq lst lf2 (lfappend lf4 lf3).
Lemma conj10: forall (x : lst) (lf4 : lst) (lf3 : lst), @eq lst (rev2 x lf3) (lfappend lf4 lf3).
Lemma conj13: forall (lf2 : lst) (lf5 : lst) (x : lst) (lf3 : lst), @eq lst lf2 (lfappend (rev2 x lf5) lf3).
Lemma conj14: forall (lf5 : lst) (x : lst) (lf3 : lst), @eq lst (rev2 x lf3) (lfappend (rev2 x lf5) lf3).
Lemma conj15: forall (lf2 : lst) (x : lst) (lf3 : lst), @eq lst lf2 (lfappend (rev2 x Nil) lf3).
Lemma conj18: forall (lf5 : lst) (x : lst) (lf1 : lst) (n : nat), @eq lst (rev2 x (Cons n lf5)) lf1.
Lemma conj20: forall (x : lst) (lf1 : lst) (n : nat), @eq lst (rev2 x (Cons n Nil)) lf1.
Lemma conj25: forall (lf2 : lst) (lf5 : lst) (lf4 : lst) (n : nat), @eq lst lf2 (lfappend lf4 (Cons n lf5)).
Lemma conj26: forall (lf5 : lst) (x : lst) (lf4 : lst) (n : nat), @eq lst (rev2 x (Cons n lf5)) (lfappend lf4 (Cons n lf5)).
Lemma conj27: forall (lf2 : lst) (lf4 : lst) (n : nat), @eq lst lf2 (lfappend lf4 (Cons n Nil)).
Lemma conj28: forall (x : lst) (lf4 : lst) (n : nat), @eq lst (rev2 x (Cons n Nil)) (lfappend lf4 (Cons n Nil)).
Lemma conj29: forall (lf2 : lst) (lf5 : lst) (x : lst) (n : nat), @eq lst lf2 (lfappend (rev2 x lf5) (Cons n lf5)).
Lemma conj30: forall (lf5 : lst) (x : lst) (n : nat), @eq lst (rev2 x (Cons n lf5)) (lfappend (rev2 x lf5) (Cons n lf5)).
Lemma conj31: forall (lf2 : lst) (x : lst) (n : nat), @eq lst lf2 (lfappend (rev2 x Nil) (Cons n Nil)).


<---CREATE SKETCHES--->
Time elapsed: 97 seconds
Sketches:
Sketch conj2_sketch0 : @eq lst (##hole##) lf1
Sketch conj2_term_sketch0 : @eq lst (rev2 x lf3) (##hole##)
Sketch conj9_sketch0 : @eq lst lf2 (##hole##)
Sketch conj9_term_sketch0 : @eq lst (lfappend lf4 lf3) (##hole##)
Sketch conj10_sketch0 : @eq lst (rev2 x lf3) (##hole##)
Sketch conj10_sketch1 : @eq lst (##hole##) (lfappend lf4 lf3)
Sketch conj10_term_sketch0 : @eq lst (lfappend lf4 lf3) (##hole##)
Sketch conj10_term_sketch1 : @eq lst (rev2 x lf3) (##hole##)
Sketch conj13_sketch0 : @eq lst lf2 (lfappend (##hole##) lf3)
Sketch conj13_sketch1 : @eq lst lf2 (##hole##)
Sketch conj13_term_sketch0 : @eq lst (rev2 x lf5) (##hole##)
Sketch conj13_term_sketch1 : @eq lst (lfappend (rev2 x lf5) lf3) (##hole##)
Sketch conj14_sketch0 : @eq lst (rev2 x lf3) (lfappend (##hole##) lf3)
Sketch conj14_sketch1 : @eq lst (rev2 x lf3) (##hole##)
Sketch conj14_sketch2 : @eq lst (##hole##) (lfappend (rev2 x lf5) lf3)
Sketch conj14_term_sketch0 : @eq lst (rev2 x lf5) (##hole##)
Sketch conj14_term_sketch1 : @eq lst (lfappend (rev2 x lf5) lf3) (##hole##)
Sketch conj14_term_sketch2 : @eq lst (rev2 x lf3) (##hole##)
Sketch conj15_sketch0 : @eq lst lf2 (##hole##)
Sketch conj15_sketch1 : @eq lst lf2 (lfappend (##hole##) lf3)
Sketch conj15_sketch2 : @eq lst lf2 (lfappend (rev2 x (##hole##)) lf3)
Sketch conj15_term_sketch0 : @eq lst (lfappend (rev2 x Nil) lf3) (##hole##)
Sketch conj15_term_sketch1 : @eq lst (rev2 x Nil) (##hole##)
Sketch conj15_term_sketch2 : @eq lst Nil (##hole##)
Sketch conj18_sketch0 : @eq lst (rev2 x (##hole##)) lf1
Sketch conj18_sketch1 : @eq lst (##hole##) lf1
Sketch conj18_term_sketch0 : @eq lst (Cons n lf5) (##hole##)
Sketch conj18_term_sketch1 : @eq lst (rev2 x (Cons n lf5)) (##hole##)
Sketch conj20_sketch0 : @eq lst (##hole##) lf1
Sketch conj20_sketch1 : @eq lst (rev2 x (##hole##)) lf1
Sketch conj20_sketch2 : @eq lst (rev2 x (Cons n (##hole##))) lf1
Sketch conj20_term_sketch0 : @eq lst (rev2 x (Cons n Nil)) (##hole##)
Sketch conj20_term_sketch1 : @eq lst (Cons n Nil) (##hole##)
Sketch conj20_term_sketch2 : @eq lst Nil (##hole##)
Sketch conj25_sketch0 : @eq lst lf2 (lfappend lf4 (##hole##))
Sketch conj25_sketch1 : @eq lst lf2 (##hole##)
Sketch conj25_term_sketch0 : @eq lst (Cons n lf5) (##hole##)
Sketch conj25_term_sketch1 : @eq lst (lfappend lf4 (Cons n lf5)) (##hole##)
Sketch conj26_sketch0 : @eq lst (rev2 x (##hole##)) (lfappend lf4 (##hole##))
Sketch conj26_sketch1 : @eq lst (rev2 x (Cons n lf5)) (##hole##)
Sketch conj26_sketch2 : @eq lst (##hole##) (lfappend lf4 (Cons n lf5))
Sketch conj26_term_sketch0 : @eq lst (Cons n lf5) (##hole##)
Sketch conj26_term_sketch1 : @eq lst (lfappend lf4 (Cons n lf5)) (##hole##)
Sketch conj26_term_sketch2 : @eq lst (rev2 x (Cons n lf5)) (##hole##)
Sketch conj27_sketch0 : @eq lst lf2 (lfappend lf4 (##hole##))
Sketch conj27_sketch1 : @eq lst lf2 (##hole##)
Sketch conj27_sketch2 : @eq lst lf2 (lfappend lf4 (Cons n (##hole##)))
Sketch conj27_term_sketch0 : @eq lst (Cons n Nil) (##hole##)
Sketch conj27_term_sketch1 : @eq lst (lfappend lf4 (Cons n Nil)) (##hole##)
Sketch conj27_term_sketch2 : @eq lst Nil (##hole##)
Sketch conj28_sketch0 : @eq lst (##hole##) (lfappend lf4 (Cons n Nil))
Sketch conj28_sketch1 : @eq lst (rev2 x (##hole##)) (lfappend lf4 (##hole##))
Sketch conj28_sketch2 : @eq lst (rev2 x (Cons n Nil)) (##hole##)
Sketch conj28_sketch3 : @eq lst (rev2 x (Cons n (##hole##))) (lfappend lf4 (Cons n (##hole##)))
Sketch conj28_term_sketch0 : @eq lst (rev2 x (Cons n Nil)) (##hole##)
Sketch conj28_term_sketch1 : @eq lst (Cons n Nil) (##hole##)
Sketch conj28_term_sketch2 : @eq lst (lfappend lf4 (Cons n Nil)) (##hole##)
Sketch conj28_term_sketch3 : @eq lst Nil (##hole##)
Sketch conj29_sketch0 : @eq lst lf2 (lfappend (rev2 x lf5) (##hole##))
Sketch conj29_sketch1 : @eq lst lf2 (##hole##)
Sketch conj29_sketch2 : @eq lst lf2 (lfappend (##hole##) (Cons n lf5))
Sketch conj29_term_sketch0 : @eq lst (Cons n lf5) (##hole##)
Sketch conj29_term_sketch1 : @eq lst (lfappend (rev2 x lf5) (Cons n lf5)) (##hole##)
Sketch conj29_term_sketch2 : @eq lst (rev2 x lf5) (##hole##)
Sketch conj30_sketch0 : @eq lst (rev2 x (##hole##)) (lfappend (rev2 x lf5) (##hole##))
Sketch conj30_sketch1 : @eq lst (rev2 x (Cons n lf5)) (##hole##)
Sketch conj30_sketch2 : @eq lst (rev2 x (Cons n lf5)) (lfappend (##hole##) (Cons n lf5))
Sketch conj30_sketch3 : @eq lst (##hole##) (lfappend (rev2 x lf5) (Cons n lf5))
Sketch conj30_term_sketch0 : @eq lst (Cons n lf5) (##hole##)
Sketch conj30_term_sketch1 : @eq lst (lfappend (rev2 x lf5) (Cons n lf5)) (##hole##)
Sketch conj30_term_sketch2 : @eq lst (rev2 x lf5) (##hole##)
Sketch conj30_term_sketch3 : @eq lst (rev2 x (Cons n lf5)) (##hole##)
Sketch conj31_sketch0 : @eq lst lf2 (lfappend (rev2 x Nil) (##hole##))
Sketch conj31_sketch1 : @eq lst lf2 (lfappend (##hole##) (Cons n Nil))
Sketch conj31_sketch2 : @eq lst lf2 (lfappend (rev2 x (##hole##)) (Cons n (##hole##)))
Sketch conj31_sketch3 : @eq lst lf2 (##hole##)
Sketch conj31_term_sketch0 : @eq lst (Cons n Nil) (##hole##)
Sketch conj31_term_sketch1 : @eq lst (rev2 x Nil) (##hole##)
Sketch conj31_term_sketch2 : @eq lst Nil (##hole##)
Sketch conj31_term_sketch3 : @eq lst (lfappend (rev2 x Nil) (Cons n Nil)) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 244 seconds
Problems per Sketch:
Sketch conj30_sketch0 --> Problem  synth_26
Sketch conj28_sketch0 --> Problem  synth_22
Sketch conj26_sketch2 --> Problem  synth_19
Sketch conj25_sketch1 --> Problem  synth_3
Sketch conj15_term_sketch2 --> Problem  synth_11
Sketch conj14_term_sketch2 --> Problem  synth_2
Sketch conj29_term_sketch2 --> Problem  synth_6
Sketch conj20_term_sketch2 --> Problem  synth_11
Sketch conj30_term_sketch3 --> Problem  synth_14
Sketch conj13_term_sketch1 --> Problem  synth_7
Sketch conj28_term_sketch1 --> Problem  synth_17
Sketch conj31_sketch0 --> Problem  synth_28
Sketch conj31_term_sketch3 --> Problem  synth_16
Sketch conj26_term_sketch2 --> Problem  synth_14
Sketch conj14_term_sketch1 --> Problem  synth_7
Sketch conj31_term_sketch1 --> Problem  synth_10
Sketch conj30_sketch2 --> Problem  synth_27
Sketch conj10_sketch1 --> Problem  synth_4
Sketch conj9_term_sketch0 --> Problem  synth_4
Sketch conj2_sketch0 --> Problem  synth_1
Sketch conj28_term_sketch3 --> Problem  synth_11
Sketch conj27_term_sketch2 --> Problem  synth_11
Sketch conj29_sketch0 --> Problem  synth_24
Sketch conj28_sketch2 --> Problem  synth_16
Sketch conj20_sketch0 --> Problem  synth_1
Sketch conj26_term_sketch0 --> Problem  synth_13
Sketch conj30_term_sketch1 --> Problem  synth_14
Sketch conj20_term_sketch0 --> Problem  synth_16
Sketch conj13_term_sketch0 --> Problem  synth_6
Sketch conj18_term_sketch1 --> Problem  synth_14
Sketch conj27_sketch2 --> Problem  synth_21
Sketch conj28_term_sketch2 --> Problem  synth_22
Sketch conj31_sketch2 --> Problem  synth_30
Sketch conj27_sketch1 --> Problem  synth_3
Sketch conj30_term_sketch0 --> Problem  synth_13
Sketch conj29_term_sketch1 --> Problem  synth_14
Sketch conj31_sketch3 --> Problem  synth_3
Sketch conj10_sketch0 --> Problem  synth_2
Sketch conj29_sketch1 --> Problem  synth_3
Sketch conj14_sketch1 --> Problem  synth_2
Sketch conj18_sketch1 --> Problem  synth_1
Sketch conj15_sketch1 --> Problem  synth_5
Sketch conj26_term_sketch1 --> Problem  synth_19
Sketch conj14_sketch2 --> Problem  synth_7
Sketch conj15_term_sketch1 --> Problem  synth_10
Sketch conj27_term_sketch1 --> Problem  synth_22
Sketch conj10_term_sketch1 --> Problem  synth_2
Sketch conj30_sketch3 --> Problem  synth_14
Sketch conj20_sketch2 --> Problem  synth_15
Sketch conj25_term_sketch1 --> Problem  synth_19
Sketch conj30_sketch1 --> Problem  synth_14
Sketch conj26_sketch0 --> Problem  synth_20
Sketch conj2_term_sketch0 --> Problem  synth_2
Sketch conj9_sketch0 --> Problem  synth_3
Sketch conj20_sketch1 --> Problem  synth_12
Sketch conj26_sketch1 --> Problem  synth_14
Sketch conj29_term_sketch0 --> Problem  synth_13
Sketch conj31_term_sketch0 --> Problem  synth_17
Sketch conj28_term_sketch0 --> Problem  synth_16
Sketch conj27_sketch0 --> Problem  synth_18
Sketch conj18_sketch0 --> Problem  synth_12
Sketch conj20_term_sketch1 --> Problem  synth_17
Sketch conj30_term_sketch2 --> Problem  synth_6
Sketch conj10_term_sketch0 --> Problem  synth_4
Sketch conj15_sketch2 --> Problem  synth_9
Sketch conj28_sketch3 --> Problem  synth_23
Sketch conj18_term_sketch0 --> Problem  synth_13
Sketch conj25_sketch0 --> Problem  synth_18
Sketch conj28_sketch1 --> Problem  synth_20
Sketch conj15_sketch0 --> Problem  synth_3
Sketch conj13_sketch1 --> Problem  synth_3
Sketch conj14_sketch0 --> Problem  synth_8
Sketch conj14_term_sketch0 --> Problem  synth_6
Sketch conj13_sketch0 --> Problem  synth_5
Sketch conj31_sketch1 --> Problem  synth_29
Sketch conj31_term_sketch2 --> Problem  synth_11
Sketch conj27_term_sketch0 --> Problem  synth_17
Sketch conj29_sketch2 --> Problem  synth_25
Sketch conj25_term_sketch0 --> Problem  synth_13
Sketch conj15_term_sketch0 --> Problem  synth_2


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 488 seconds

Problem: synth_28

Problem: synth_22
 lfappend (lfappend lf4 Nil) (Cons n Nil)
 rev2 (rev2 lf4 Nil) (Cons n Nil)
 lfappend (rev (rev2 lf4 Nil)) (Cons n Nil)
 rev2 (rev lf4) (Cons n Nil)
 lfappend lf4 (Cons n Nil)
 lfappend (rev (rev lf4)) (Cons n Nil)

Problem: synth_20

Problem: synth_18

Problem: synth_17
 Cons n Nil

Problem: synth_29

Problem: synth_21
 Nil

Problem: synth_26

Problem: synth_9
 Nil

Problem: synth_25

Problem: synth_13
 rev2 lf5 (Cons n Nil)
 lfappend (rev (rev lf5)) (Cons n Nil)
 lfappend (rev lf5) (Cons n Nil)
 Cons n (rev lf5)
 Cons n lf5
 Cons n Nil

Problem: synth_6
 lfappend lf5 (rev x)
 rev2 lf5 (rev x)
 rev2 x (rev lf5)
 rev2 x lf5
 rev2 x Nil
 rev x

Problem: synth_30
 Nil

Problem: synth_11
 Nil

Problem: synth_7
 lfappend (rev x) (rev lf3)
 rev (lfappend lf3 x)
 rev (rev2 lf3 x)
 lfappend (rev x) lf3
 rev2 x (rev lf3)
 rev2 x lf3

Problem: synth_4
 rev2 (rev lf4) (rev lf3)
 rev (lfappend lf3 (rev lf4))
 rev (rev2 lf3 (rev lf4))
 rev2 (rev lf4) lf3
 lfappend lf4 (rev lf3)
 lfappend lf4 lf3

Problem: synth_1
 rev2 (rev2 lf1 Nil) Nil
 rev (rev2 lf1 Nil)
 rev2 (rev lf1) Nil
 rev (rev lf1)
 lfappend lf1 Nil
 lf1

Problem: synth_23
 Nil

Problem: synth_27
 lfappend lf5 (rev x)
 rev2 lf5 (rev x)
 rev2 x (rev lf5)
 rev2 x lf5
 rev2 x Nil
 rev x

Problem: synth_16
 rev2 (lfappend x Nil) (Cons n Nil)
 lfappend (rev2 x Nil) (Cons n Nil)
 lfappend (rev (rev (rev x))) (Cons n Nil)
 lfappend (rev (lfappend x Nil)) (Cons n Nil)
 rev2 x (Cons n Nil)
 lfappend (rev x) (Cons n Nil)

Problem: synth_19
 rev2 (rev lf4) (Cons n lf5)
 rev2 (rev lf4) (Cons n Nil)
 lfappend lf4 (Cons n (rev lf5))
 lfappend lf4 (Cons n lf5)
 lfappend lf4 (Cons n Nil)
 lfappend (rev (rev lf4)) (Cons n Nil)

Problem: synth_15
 Nil

Problem: synth_14
 lfappend (rev x) (Cons n (rev lf5))
 lfappend (rev x) (Cons n lf5)
 rev2 x (Cons n (rev lf5))
 rev2 x (Cons n lf5)
 rev2 x (Cons n Nil)
 lfappend (rev x) (Cons n Nil)

Problem: synth_10
 lfappend (rev2 x Nil) Nil
 rev (rev (rev x))
 rev (lfappend x Nil)
 lfappend (rev x) Nil
 rev2 x Nil
 rev x

Problem: synth_8
 lfappend (rev2 x Nil) Nil
 rev (rev (rev x))
 rev (lfappend x Nil)
 lfappend (rev x) Nil
 rev2 x Nil
 rev x

Problem: synth_24

Problem: synth_3
 rev2 (rev2 lf2 Nil) Nil
 rev (rev2 lf2 Nil)
 rev2 (rev lf2) Nil
 rev (rev lf2)
 lfappend lf2 Nil
 lf2

Problem: synth_12

Problem: synth_5

Problem: synth_2
 lfappend (rev x) (rev lf3)
 rev (lfappend lf3 x)
 rev (rev2 lf3 x)
 lfappend (rev x) lf3
 rev2 x (rev lf3)
 rev2 x lf3

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 489 seconds
Lemmas:
Lemma candidate_1: forall (n : nat) (x : lst), @eq lst (rev2 x (Cons n Nil)) (lfappend (rev2 x Nil) (Cons n Nil)).
Lemma candidate_2: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (lfappend (rev2 x Nil) lf3).
Lemma candidate_3: forall (lf3 : lst) (lf4 : lst) (x : lst), forall _ : @eq lst lf4 (rev x), @eq lst (rev2 x lf3) (lfappend lf4 lf3).
Lemma candidate_4: forall (lf3 : lst) (x : lst) (lf5 : lst), forall _ : @eq lst (rev2 x lf5) (rev x), @eq lst (rev2 x lf3) (lfappend (rev2 x lf5) lf3).
Lemma candidate_5: forall (n : nat) (lf4 : lst) (x : lst) (lf5 : lst), forall _ : @eq lst lf4 (rev x), @eq lst (rev2 x (Cons n lf5)) (lfappend lf4 (Cons n lf5)).
Lemma candidate_6: forall (n : nat) (lf4 : lst) (x : lst), forall _ : @eq lst lf4 (rev x), @eq lst (rev2 x (Cons n Nil)) (lfappend lf4 (Cons n Nil)).
Lemma candidate_7: forall (n : nat) (x : lst) (lf5 : lst), forall _ : @eq lst (rev2 x lf5) (rev x), @eq lst (rev2 x (Cons n lf5)) (lfappend (rev2 x lf5) (Cons n lf5)).
Lemma candidate_8: forall (lf1 : lst), @eq lst (rev2 (rev2 lf1 Nil) Nil) lf1.
Lemma candidate_9: forall (lf1 : lst), @eq lst (rev (rev2 lf1 Nil)) lf1.
Lemma candidate_10: forall (lf1 : lst), @eq lst (rev2 (rev lf1) Nil) lf1.
Lemma candidate_11: forall (lf1 : lst), @eq lst (rev (rev lf1)) lf1.
Lemma candidate_12: forall (lf1 : lst), @eq lst (lfappend lf1 Nil) lf1.
Lemma candidate_13: forall (lf1 : lst), @eq lst (lf1) lf1.
Lemma candidate_14: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (lfappend (rev x) (rev lf3)).
Lemma candidate_15: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (rev (lfappend lf3 x)).
Lemma candidate_16: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (rev (rev2 lf3 x)).
Lemma candidate_17: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (lfappend (rev x) lf3).
Lemma candidate_18: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (rev2 x (rev lf3)).
Lemma candidate_19: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (rev2 x lf3).
Lemma candidate_20: forall (lf2 : lst), @eq lst lf2 (rev2 (rev2 lf2 Nil) Nil).
Lemma candidate_21: forall (lf2 : lst), @eq lst lf2 (rev (rev2 lf2 Nil)).
Lemma candidate_22: forall (lf2 : lst), @eq lst lf2 (rev2 (rev lf2) Nil).
Lemma candidate_23: forall (lf2 : lst), @eq lst lf2 (rev (rev lf2)).
Lemma candidate_24: forall (lf2 : lst), @eq lst lf2 (lfappend lf2 Nil).
Lemma candidate_25: forall (lf2 : lst), @eq lst lf2 (lf2).
Lemma candidate_26: forall (lf3 : lst) (lf4 : lst), @eq lst (lfappend lf4 lf3) (rev2 (rev lf4) (rev lf3)).
Lemma candidate_27: forall (lf3 : lst) (lf4 : lst), @eq lst (lfappend lf4 lf3) (rev (lfappend lf3 (rev lf4))).
Lemma candidate_28: forall (lf3 : lst) (lf4 : lst), @eq lst (lfappend lf4 lf3) (rev (rev2 lf3 (rev lf4))).
Lemma candidate_29: forall (lf3 : lst) (lf4 : lst), @eq lst (lfappend lf4 lf3) (rev2 (rev lf4) lf3).
Lemma candidate_30: forall (lf3 : lst) (lf4 : lst), @eq lst (lfappend lf4 lf3) (lfappend lf4 (rev lf3)).
Lemma candidate_31: forall (lf3 : lst) (lf4 : lst), @eq lst (lfappend lf4 lf3) (lfappend lf4 lf3).
Lemma candidate_32: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (lfappend (rev x) (rev lf3)).
Lemma candidate_33: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (rev (lfappend lf3 x)).
Lemma candidate_34: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (rev (rev2 lf3 x)).
Lemma candidate_35: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (lfappend (rev x) lf3).
Lemma candidate_36: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (rev2 x (rev lf3)).
Lemma candidate_37: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (rev2 x lf3).
Lemma candidate_38: forall (lf3 : lst) (lf4 : lst), @eq lst (rev2 (rev lf4) (rev lf3)) (lfappend lf4 lf3).
Lemma candidate_39: forall (lf3 : lst) (lf4 : lst), @eq lst (rev (lfappend lf3 (rev lf4))) (lfappend lf4 lf3).
Lemma candidate_40: forall (lf3 : lst) (lf4 : lst), @eq lst (rev (rev2 lf3 (rev lf4))) (lfappend lf4 lf3).
Lemma candidate_41: forall (lf3 : lst) (lf4 : lst), @eq lst (rev2 (rev lf4) lf3) (lfappend lf4 lf3).
Lemma candidate_42: forall (lf3 : lst) (lf4 : lst), @eq lst (lfappend lf4 (rev lf3)) (lfappend lf4 lf3).
Lemma candidate_43: forall (lf3 : lst) (lf4 : lst), @eq lst (lfappend lf4 lf3) (lfappend lf4 lf3).
Lemma candidate_44: forall (lf3 : lst) (lf4 : lst), @eq lst (lfappend lf4 lf3) (rev2 (rev lf4) (rev lf3)).
Lemma candidate_45: forall (lf3 : lst) (lf4 : lst), @eq lst (lfappend lf4 lf3) (rev (lfappend lf3 (rev lf4))).
Lemma candidate_46: forall (lf3 : lst) (lf4 : lst), @eq lst (lfappend lf4 lf3) (rev (rev2 lf3 (rev lf4))).
Lemma candidate_47: forall (lf3 : lst) (lf4 : lst), @eq lst (lfappend lf4 lf3) (rev2 (rev lf4) lf3).
Lemma candidate_48: forall (lf3 : lst) (lf4 : lst), @eq lst (lfappend lf4 lf3) (lfappend lf4 (rev lf3)).
Lemma candidate_49: forall (lf3 : lst) (lf4 : lst), @eq lst (lfappend lf4 lf3) (lfappend lf4 lf3).
Lemma candidate_50: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (lfappend (rev x) (rev lf3)).
Lemma candidate_51: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (rev (lfappend lf3 x)).
Lemma candidate_52: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (rev (rev2 lf3 x)).
Lemma candidate_53: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (lfappend (rev x) lf3).
Lemma candidate_54: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (rev2 x (rev lf3)).
Lemma candidate_55: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (rev2 x lf3).
Lemma candidate_56: forall (lf2 : lst), @eq lst lf2 (rev2 (rev2 lf2 Nil) Nil).
Lemma candidate_57: forall (lf2 : lst), @eq lst lf2 (rev (rev2 lf2 Nil)).
Lemma candidate_58: forall (lf2 : lst), @eq lst lf2 (rev2 (rev lf2) Nil).
Lemma candidate_59: forall (lf2 : lst), @eq lst lf2 (rev (rev lf2)).
Lemma candidate_60: forall (lf2 : lst), @eq lst lf2 (lfappend lf2 Nil).
Lemma candidate_61: forall (lf2 : lst), @eq lst lf2 (lf2).
Lemma candidate_62: forall (x : lst) (lf5 : lst), @eq lst (rev2 x lf5) (lfappend lf5 (rev x)).
Lemma candidate_63: forall (x : lst) (lf5 : lst), @eq lst (rev2 x lf5) (rev2 lf5 (rev x)).
Lemma candidate_64: forall (x : lst) (lf5 : lst), @eq lst (rev2 x lf5) (rev2 x (rev lf5)).
Lemma candidate_65: forall (x : lst) (lf5 : lst), @eq lst (rev2 x lf5) (rev2 x lf5).
Lemma candidate_66: forall (x : lst) (lf5 : lst), @eq lst (rev2 x lf5) (rev2 x Nil).
Lemma candidate_67: forall (x : lst) (lf5 : lst), @eq lst (rev2 x lf5) (rev x).
Lemma candidate_68: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (rev2 x lf5) lf3) (lfappend (rev x) (rev lf3)).
Lemma candidate_69: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (rev2 x lf5) lf3) (rev (lfappend lf3 x)).
Lemma candidate_70: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (rev2 x lf5) lf3) (rev (rev2 lf3 x)).
Lemma candidate_71: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (rev2 x lf5) lf3) (lfappend (rev x) lf3).
Lemma candidate_72: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (rev2 x lf5) lf3) (rev2 x (rev lf3)).
Lemma candidate_73: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (rev2 x lf5) lf3) (rev2 x lf3).
Lemma candidate_74: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (lfappend (lfappend (rev2 x Nil) Nil) lf3).
Lemma candidate_75: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (lfappend (rev (rev (rev x))) lf3).
Lemma candidate_76: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (lfappend (rev (lfappend x Nil)) lf3).
Lemma candidate_77: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (lfappend (lfappend (rev x) Nil) lf3).
Lemma candidate_78: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (lfappend (rev2 x Nil) lf3).
Lemma candidate_79: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (lfappend (rev x) lf3).
Lemma candidate_80: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (lfappend (rev x) (rev lf3)).
Lemma candidate_81: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (rev (lfappend lf3 x)).
Lemma candidate_82: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (rev (rev2 lf3 x)).
Lemma candidate_83: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (lfappend (rev x) lf3).
Lemma candidate_84: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (rev2 x (rev lf3)).
Lemma candidate_85: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (rev2 x lf3).
Lemma candidate_86: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) (rev lf3)) (lfappend (rev2 x lf5) lf3).
Lemma candidate_87: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (rev (lfappend lf3 x)) (lfappend (rev2 x lf5) lf3).
Lemma candidate_88: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (rev (rev2 lf3 x)) (lfappend (rev2 x lf5) lf3).
Lemma candidate_89: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) lf3) (lfappend (rev2 x lf5) lf3).
Lemma candidate_90: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (rev2 x (rev lf3)) (lfappend (rev2 x lf5) lf3).
Lemma candidate_91: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (rev2 x lf3) (lfappend (rev2 x lf5) lf3).
Lemma candidate_92: forall (x : lst) (lf5 : lst), @eq lst (rev2 x lf5) (lfappend lf5 (rev x)).
Lemma candidate_93: forall (x : lst) (lf5 : lst), @eq lst (rev2 x lf5) (rev2 lf5 (rev x)).
Lemma candidate_94: forall (x : lst) (lf5 : lst), @eq lst (rev2 x lf5) (rev2 x (rev lf5)).
Lemma candidate_95: forall (x : lst) (lf5 : lst), @eq lst (rev2 x lf5) (rev2 x lf5).
Lemma candidate_96: forall (x : lst) (lf5 : lst), @eq lst (rev2 x lf5) (rev2 x Nil).
Lemma candidate_97: forall (x : lst) (lf5 : lst), @eq lst (rev2 x lf5) (rev x).
Lemma candidate_98: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (rev2 x lf5) lf3) (lfappend (rev x) (rev lf3)).
Lemma candidate_99: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (rev2 x lf5) lf3) (rev (lfappend lf3 x)).
Lemma candidate_100: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (rev2 x lf5) lf3) (rev (rev2 lf3 x)).
Lemma candidate_101: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (rev2 x lf5) lf3) (lfappend (rev x) lf3).
Lemma candidate_102: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (rev2 x lf5) lf3) (rev2 x (rev lf3)).
Lemma candidate_103: forall (lf3 : lst) (x : lst) (lf5 : lst), @eq lst (lfappend (rev2 x lf5) lf3) (rev2 x lf3).
Lemma candidate_104: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (lfappend (rev x) (rev lf3)).
Lemma candidate_105: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (rev (lfappend lf3 x)).
Lemma candidate_106: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (rev (rev2 lf3 x)).
Lemma candidate_107: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (lfappend (rev x) lf3).
Lemma candidate_108: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (rev2 x (rev lf3)).
Lemma candidate_109: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (rev2 x lf3).
Lemma candidate_110: forall (lf2 : lst), @eq lst lf2 (rev2 (rev2 lf2 Nil) Nil).
Lemma candidate_111: forall (lf2 : lst), @eq lst lf2 (rev (rev2 lf2 Nil)).
Lemma candidate_112: forall (lf2 : lst), @eq lst lf2 (rev2 (rev lf2) Nil).
Lemma candidate_113: forall (lf2 : lst), @eq lst lf2 (rev (rev lf2)).
Lemma candidate_114: forall (lf2 : lst), @eq lst lf2 (lfappend lf2 Nil).
Lemma candidate_115: forall (lf2 : lst), @eq lst lf2 (lf2).
Lemma candidate_116: forall (lf3 : lst) (x : lst) (lf2 : lst), @eq lst lf2 (lfappend (rev2 x (Nil)) lf3).
Lemma candidate_117: forall (lf3 : lst) (x : lst), @eq lst (lfappend (rev2 x Nil) lf3) (lfappend (rev x) (rev lf3)).
Lemma candidate_118: forall (lf3 : lst) (x : lst), @eq lst (lfappend (rev2 x Nil) lf3) (rev (lfappend lf3 x)).
Lemma candidate_119: forall (lf3 : lst) (x : lst), @eq lst (lfappend (rev2 x Nil) lf3) (rev (rev2 lf3 x)).
Lemma candidate_120: forall (lf3 : lst) (x : lst), @eq lst (lfappend (rev2 x Nil) lf3) (lfappend (rev x) lf3).
Lemma candidate_121: forall (lf3 : lst) (x : lst), @eq lst (lfappend (rev2 x Nil) lf3) (rev2 x (rev lf3)).
Lemma candidate_122: forall (lf3 : lst) (x : lst), @eq lst (lfappend (rev2 x Nil) lf3) (rev2 x lf3).
Lemma candidate_123: forall (x : lst), @eq lst (rev2 x Nil) (lfappend (rev2 x Nil) Nil).
Lemma candidate_124: forall (x : lst), @eq lst (rev2 x Nil) (rev (rev (rev x))).
Lemma candidate_125: forall (x : lst), @eq lst (rev2 x Nil) (rev (lfappend x Nil)).
Lemma candidate_126: forall (x : lst), @eq lst (rev2 x Nil) (lfappend (rev x) Nil).
Lemma candidate_127: forall (x : lst), @eq lst (rev2 x Nil) (rev2 x Nil).
Lemma candidate_128: forall (x : lst), @eq lst (rev2 x Nil) (rev x).
Lemma candidate_129: @eq lst Nil (Nil).
Lemma candidate_130: forall (lf1 : lst), @eq lst (rev2 (rev2 lf1 Nil) Nil) lf1.
Lemma candidate_131: forall (lf1 : lst), @eq lst (rev (rev2 lf1 Nil)) lf1.
Lemma candidate_132: forall (lf1 : lst), @eq lst (rev2 (rev lf1) Nil) lf1.
Lemma candidate_133: forall (lf1 : lst), @eq lst (rev (rev lf1)) lf1.
Lemma candidate_134: forall (lf1 : lst), @eq lst (lfappend lf1 Nil) lf1.
Lemma candidate_135: forall (lf1 : lst), @eq lst (lf1) lf1.
Lemma candidate_136: forall (n : nat) (lf5 : lst), @eq lst (Cons n lf5) (rev2 lf5 (Cons n Nil)).
Lemma candidate_137: forall (n : nat) (lf5 : lst), @eq lst (Cons n lf5) (lfappend (rev (rev lf5)) (Cons n Nil)).
Lemma candidate_138: forall (n : nat) (lf5 : lst), @eq lst (Cons n lf5) (lfappend (rev lf5) (Cons n Nil)).
Lemma candidate_139: forall (n : nat) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (rev lf5)).
Lemma candidate_140: forall (n : nat) (lf5 : lst), @eq lst (Cons n lf5) (Cons n lf5).
Lemma candidate_141: forall (n : nat) (lf5 : lst), @eq lst (Cons n lf5) (Cons n Nil).
Lemma candidate_142: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (lfappend (rev x) (Cons n (rev lf5))).
Lemma candidate_143: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (lfappend (rev x) (Cons n lf5)).
Lemma candidate_144: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (rev2 x (Cons n (rev lf5))).
Lemma candidate_145: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (rev2 x (Cons n lf5)).
Lemma candidate_146: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (rev2 x (Cons n Nil)).
Lemma candidate_147: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (lfappend (rev x) (Cons n Nil)).
Lemma candidate_148: forall (lf1 : lst), @eq lst (rev2 (rev2 lf1 Nil) Nil) lf1.
Lemma candidate_149: forall (lf1 : lst), @eq lst (rev (rev2 lf1 Nil)) lf1.
Lemma candidate_150: forall (lf1 : lst), @eq lst (rev2 (rev lf1) Nil) lf1.
Lemma candidate_151: forall (lf1 : lst), @eq lst (rev (rev lf1)) lf1.
Lemma candidate_152: forall (lf1 : lst), @eq lst (lfappend lf1 Nil) lf1.
Lemma candidate_153: forall (lf1 : lst), @eq lst (lf1) lf1.
Lemma candidate_154: forall (n : nat) (lf1 : lst) (x : lst), @eq lst (rev2 x (Cons n (Nil))) lf1.
Lemma candidate_155: forall (n : nat) (x : lst), @eq lst (rev2 x (Cons n Nil)) (rev2 (lfappend x Nil) (Cons n Nil)).
Lemma candidate_156: forall (n : nat) (x : lst), @eq lst (rev2 x (Cons n Nil)) (lfappend (rev2 x Nil) (Cons n Nil)).
Lemma candidate_157: forall (n : nat) (x : lst), @eq lst (rev2 x (Cons n Nil)) (lfappend (rev (rev (rev x))) (Cons n Nil)).
Lemma candidate_158: forall (n : nat) (x : lst), @eq lst (rev2 x (Cons n Nil)) (lfappend (rev (lfappend x Nil)) (Cons n Nil)).
Lemma candidate_159: forall (n : nat) (x : lst), @eq lst (rev2 x (Cons n Nil)) (rev2 x (Cons n Nil)).
Lemma candidate_160: forall (n : nat) (x : lst), @eq lst (rev2 x (Cons n Nil)) (lfappend (rev x) (Cons n Nil)).
Lemma candidate_161: forall (n : nat), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_162: @eq lst Nil (Nil).
Lemma candidate_163: forall (lf2 : lst), @eq lst lf2 (rev2 (rev2 lf2 Nil) Nil).
Lemma candidate_164: forall (lf2 : lst), @eq lst lf2 (rev (rev2 lf2 Nil)).
Lemma candidate_165: forall (lf2 : lst), @eq lst lf2 (rev2 (rev lf2) Nil).
Lemma candidate_166: forall (lf2 : lst), @eq lst lf2 (rev (rev lf2)).
Lemma candidate_167: forall (lf2 : lst), @eq lst lf2 (lfappend lf2 Nil).
Lemma candidate_168: forall (lf2 : lst), @eq lst lf2 (lf2).
Lemma candidate_169: forall (n : nat) (lf5 : lst), @eq lst (Cons n lf5) (rev2 lf5 (Cons n Nil)).
Lemma candidate_170: forall (n : nat) (lf5 : lst), @eq lst (Cons n lf5) (lfappend (rev (rev lf5)) (Cons n Nil)).
Lemma candidate_171: forall (n : nat) (lf5 : lst), @eq lst (Cons n lf5) (lfappend (rev lf5) (Cons n Nil)).
Lemma candidate_172: forall (n : nat) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (rev lf5)).
Lemma candidate_173: forall (n : nat) (lf5 : lst), @eq lst (Cons n lf5) (Cons n lf5).
Lemma candidate_174: forall (n : nat) (lf5 : lst), @eq lst (Cons n lf5) (Cons n Nil).
Lemma candidate_175: forall (n : nat) (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 (Cons n lf5)) (rev2 (rev lf4) (Cons n lf5)).
Lemma candidate_176: forall (n : nat) (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 (Cons n lf5)) (rev2 (rev lf4) (Cons n Nil)).
Lemma candidate_177: forall (n : nat) (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 (Cons n lf5)) (lfappend lf4 (Cons n (rev lf5))).
Lemma candidate_178: forall (n : nat) (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 (Cons n lf5)) (lfappend lf4 (Cons n lf5)).
Lemma candidate_179: forall (n : nat) (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 (Cons n lf5)) (lfappend lf4 (Cons n Nil)).
Lemma candidate_180: forall (n : nat) (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 (Cons n lf5)) (lfappend (rev (rev lf4)) (Cons n Nil)).
Lemma candidate_181: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (lfappend (rev x) (Cons n (rev lf5))).
Lemma candidate_182: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (lfappend (rev x) (Cons n lf5)).
Lemma candidate_183: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (rev2 x (Cons n (rev lf5))).
Lemma candidate_184: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (rev2 x (Cons n lf5)).
Lemma candidate_185: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (rev2 x (Cons n Nil)).
Lemma candidate_186: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (lfappend (rev x) (Cons n Nil)).
Lemma candidate_187: forall (n : nat) (lf4 : lst) (lf5 : lst), @eq lst (rev2 (rev lf4) (Cons n lf5)) (lfappend lf4 (Cons n lf5)).
Lemma candidate_188: forall (n : nat) (lf4 : lst) (lf5 : lst), @eq lst (rev2 (rev lf4) (Cons n Nil)) (lfappend lf4 (Cons n lf5)).
Lemma candidate_189: forall (n : nat) (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 (Cons n (rev lf5))) (lfappend lf4 (Cons n lf5)).
Lemma candidate_190: forall (n : nat) (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 (Cons n lf5)) (lfappend lf4 (Cons n lf5)).
Lemma candidate_191: forall (n : nat) (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (lfappend lf4 (Cons n lf5)).
Lemma candidate_192: forall (n : nat) (lf4 : lst) (lf5 : lst), @eq lst (lfappend (rev (rev lf4)) (Cons n Nil)) (lfappend lf4 (Cons n lf5)).
Lemma candidate_193: forall (n : nat) (lf5 : lst), @eq lst (Cons n lf5) (rev2 lf5 (Cons n Nil)).
Lemma candidate_194: forall (n : nat) (lf5 : lst), @eq lst (Cons n lf5) (lfappend (rev (rev lf5)) (Cons n Nil)).
Lemma candidate_195: forall (n : nat) (lf5 : lst), @eq lst (Cons n lf5) (lfappend (rev lf5) (Cons n Nil)).
Lemma candidate_196: forall (n : nat) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (rev lf5)).
Lemma candidate_197: forall (n : nat) (lf5 : lst), @eq lst (Cons n lf5) (Cons n lf5).
Lemma candidate_198: forall (n : nat) (lf5 : lst), @eq lst (Cons n lf5) (Cons n Nil).
Lemma candidate_199: forall (n : nat) (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 (Cons n lf5)) (rev2 (rev lf4) (Cons n lf5)).
Lemma candidate_200: forall (n : nat) (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 (Cons n lf5)) (rev2 (rev lf4) (Cons n Nil)).
Lemma candidate_201: forall (n : nat) (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 (Cons n lf5)) (lfappend lf4 (Cons n (rev lf5))).
Lemma candidate_202: forall (n : nat) (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 (Cons n lf5)) (lfappend lf4 (Cons n lf5)).
Lemma candidate_203: forall (n : nat) (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 (Cons n lf5)) (lfappend lf4 (Cons n Nil)).
Lemma candidate_204: forall (n : nat) (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 (Cons n lf5)) (lfappend (rev (rev lf4)) (Cons n Nil)).
Lemma candidate_205: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (lfappend (rev x) (Cons n (rev lf5))).
Lemma candidate_206: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (lfappend (rev x) (Cons n lf5)).
Lemma candidate_207: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (rev2 x (Cons n (rev lf5))).
Lemma candidate_208: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (rev2 x (Cons n lf5)).
Lemma candidate_209: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (rev2 x (Cons n Nil)).
Lemma candidate_210: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (lfappend (rev x) (Cons n Nil)).
Lemma candidate_211: forall (lf2 : lst), @eq lst lf2 (rev2 (rev2 lf2 Nil) Nil).
Lemma candidate_212: forall (lf2 : lst), @eq lst lf2 (rev (rev2 lf2 Nil)).
Lemma candidate_213: forall (lf2 : lst), @eq lst lf2 (rev2 (rev lf2) Nil).
Lemma candidate_214: forall (lf2 : lst), @eq lst lf2 (rev (rev lf2)).
Lemma candidate_215: forall (lf2 : lst), @eq lst lf2 (lfappend lf2 Nil).
Lemma candidate_216: forall (lf2 : lst), @eq lst lf2 (lf2).
Lemma candidate_217: forall (n : nat) (lf4 : lst) (lf2 : lst), @eq lst lf2 (lfappend lf4 (Cons n (Nil))).
Lemma candidate_218: forall (n : nat), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_219: forall (n : nat) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil))   (lfappend (lfappend lf4 Nil) (Cons n Nil)).
Lemma candidate_220: forall (n : nat) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (rev2 (rev2 lf4 Nil) (Cons n Nil)).
Lemma candidate_221: forall (n : nat) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil))   (lfappend (rev (rev2 lf4 Nil)) (Cons n Nil)).
Lemma candidate_222: forall (n : nat) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (rev2 (rev lf4) (Cons n Nil)).
Lemma candidate_223: forall (n : nat) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (lfappend lf4 (Cons n Nil)).
Lemma candidate_224: forall (n : nat) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (lfappend (rev (rev lf4)) (Cons n Nil)).
Lemma candidate_225: @eq lst Nil (Nil).
Lemma candidate_226: forall (n : nat) (lf4 : lst), @eq lst (lfappend (lfappend lf4 Nil) (Cons n Nil))   (lfappend lf4 (Cons n Nil)).
Lemma candidate_227: forall (n : nat) (lf4 : lst), @eq lst (rev2 (rev2 lf4 Nil) (Cons n Nil)) (lfappend lf4 (Cons n Nil)).
Lemma candidate_228: forall (n : nat) (lf4 : lst), @eq lst (lfappend (rev (rev2 lf4 Nil)) (Cons n Nil))   (lfappend lf4 (Cons n Nil)).
Lemma candidate_229: forall (n : nat) (lf4 : lst), @eq lst (rev2 (rev lf4) (Cons n Nil)) (lfappend lf4 (Cons n Nil)).
Lemma candidate_230: forall (n : nat) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (lfappend lf4 (Cons n Nil)).
Lemma candidate_231: forall (n : nat) (lf4 : lst), @eq lst (lfappend (rev (rev lf4)) (Cons n Nil)) (lfappend lf4 (Cons n Nil)).
Lemma candidate_232: forall (n : nat) (x : lst), @eq lst (rev2 x (Cons n Nil)) (rev2 (lfappend x Nil) (Cons n Nil)).
Lemma candidate_233: forall (n : nat) (x : lst), @eq lst (rev2 x (Cons n Nil)) (lfappend (rev2 x Nil) (Cons n Nil)).
Lemma candidate_234: forall (n : nat) (x : lst), @eq lst (rev2 x (Cons n Nil)) (lfappend (rev (rev (rev x))) (Cons n Nil)).
Lemma candidate_235: forall (n : nat) (x : lst), @eq lst (rev2 x (Cons n Nil)) (lfappend (rev (lfappend x Nil)) (Cons n Nil)).
Lemma candidate_236: forall (n : nat) (x : lst), @eq lst (rev2 x (Cons n Nil)) (rev2 x (Cons n Nil)).
Lemma candidate_237: forall (n : nat) (x : lst), @eq lst (rev2 x (Cons n Nil)) (lfappend (rev x) (Cons n Nil)).
Lemma candidate_238: forall (n : nat) (lf4 : lst) (x : lst), @eq lst (rev2 x (Cons n (Nil))) (lfappend lf4 (Cons n (Nil))).
Lemma candidate_239: forall (n : nat) (x : lst), @eq lst (rev2 x (Cons n Nil)) (rev2 (lfappend x Nil) (Cons n Nil)).
Lemma candidate_240: forall (n : nat) (x : lst), @eq lst (rev2 x (Cons n Nil)) (lfappend (rev2 x Nil) (Cons n Nil)).
Lemma candidate_241: forall (n : nat) (x : lst), @eq lst (rev2 x (Cons n Nil)) (lfappend (rev (rev (rev x))) (Cons n Nil)).
Lemma candidate_242: forall (n : nat) (x : lst), @eq lst (rev2 x (Cons n Nil)) (lfappend (rev (lfappend x Nil)) (Cons n Nil)).
Lemma candidate_243: forall (n : nat) (x : lst), @eq lst (rev2 x (Cons n Nil)) (rev2 x (Cons n Nil)).
Lemma candidate_244: forall (n : nat) (x : lst), @eq lst (rev2 x (Cons n Nil)) (lfappend (rev x) (Cons n Nil)).
Lemma candidate_245: forall (n : nat), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_246: forall (n : nat) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil))   (lfappend (lfappend lf4 Nil) (Cons n Nil)).
Lemma candidate_247: forall (n : nat) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (rev2 (rev2 lf4 Nil) (Cons n Nil)).
Lemma candidate_248: forall (n : nat) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil))   (lfappend (rev (rev2 lf4 Nil)) (Cons n Nil)).
Lemma candidate_249: forall (n : nat) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (rev2 (rev lf4) (Cons n Nil)).
Lemma candidate_250: forall (n : nat) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (lfappend lf4 (Cons n Nil)).
Lemma candidate_251: forall (n : nat) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (lfappend (rev (rev lf4)) (Cons n Nil)).
Lemma candidate_252: @eq lst Nil (Nil).
Lemma candidate_253: forall (lf2 : lst), @eq lst lf2 (rev2 (rev2 lf2 Nil) Nil).
Lemma candidate_254: forall (lf2 : lst), @eq lst lf2 (rev (rev2 lf2 Nil)).
Lemma candidate_255: forall (lf2 : lst), @eq lst lf2 (rev2 (rev lf2) Nil).
Lemma candidate_256: forall (lf2 : lst), @eq lst lf2 (rev (rev lf2)).
Lemma candidate_257: forall (lf2 : lst), @eq lst lf2 (lfappend lf2 Nil).
Lemma candidate_258: forall (lf2 : lst), @eq lst lf2 (lf2).
Lemma candidate_259: forall (n : nat) (lf5 : lst), @eq lst (Cons n lf5) (rev2 lf5 (Cons n Nil)).
Lemma candidate_260: forall (n : nat) (lf5 : lst), @eq lst (Cons n lf5) (lfappend (rev (rev lf5)) (Cons n Nil)).
Lemma candidate_261: forall (n : nat) (lf5 : lst), @eq lst (Cons n lf5) (lfappend (rev lf5) (Cons n Nil)).
Lemma candidate_262: forall (n : nat) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (rev lf5)).
Lemma candidate_263: forall (n : nat) (lf5 : lst), @eq lst (Cons n lf5) (Cons n lf5).
Lemma candidate_264: forall (n : nat) (lf5 : lst), @eq lst (Cons n lf5) (Cons n Nil).
Lemma candidate_265: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (lfappend (rev2 x lf5) (Cons n lf5))   (lfappend (rev x) (Cons n (rev lf5))).
Lemma candidate_266: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (lfappend (rev2 x lf5) (Cons n lf5)) (lfappend (rev x) (Cons n lf5)).
Lemma candidate_267: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (lfappend (rev2 x lf5) (Cons n lf5)) (rev2 x (Cons n (rev lf5))).
Lemma candidate_268: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (lfappend (rev2 x lf5) (Cons n lf5)) (rev2 x (Cons n lf5)).
Lemma candidate_269: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (lfappend (rev2 x lf5) (Cons n lf5)) (rev2 x (Cons n Nil)).
Lemma candidate_270: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (lfappend (rev2 x lf5) (Cons n lf5)) (lfappend (rev x) (Cons n Nil)).
Lemma candidate_271: forall (x : lst) (lf5 : lst), @eq lst (rev2 x lf5) (lfappend lf5 (rev x)).
Lemma candidate_272: forall (x : lst) (lf5 : lst), @eq lst (rev2 x lf5) (rev2 lf5 (rev x)).
Lemma candidate_273: forall (x : lst) (lf5 : lst), @eq lst (rev2 x lf5) (rev2 x (rev lf5)).
Lemma candidate_274: forall (x : lst) (lf5 : lst), @eq lst (rev2 x lf5) (rev2 x lf5).
Lemma candidate_275: forall (x : lst) (lf5 : lst), @eq lst (rev2 x lf5) (rev2 x Nil).
Lemma candidate_276: forall (x : lst) (lf5 : lst), @eq lst (rev2 x lf5) (rev x).
Lemma candidate_277: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (lfappend (rev x) (Cons n (rev lf5))).
Lemma candidate_278: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (lfappend (rev x) (Cons n lf5)).
Lemma candidate_279: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (rev2 x (Cons n (rev lf5))).
Lemma candidate_280: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (rev2 x (Cons n lf5)).
Lemma candidate_281: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (rev2 x (Cons n Nil)).
Lemma candidate_282: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (lfappend (rev x) (Cons n Nil)).
Lemma candidate_283: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (lfappend (lfappend lf5 (rev x)) (Cons n lf5)).
Lemma candidate_284: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (lfappend (rev2 lf5 (rev x)) (Cons n lf5)).
Lemma candidate_285: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (lfappend (rev2 x (rev lf5)) (Cons n lf5)).
Lemma candidate_286: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (lfappend (rev2 x lf5) (Cons n lf5)).
Lemma candidate_287: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (lfappend (rev2 x Nil) (Cons n lf5)).
Lemma candidate_288: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (lfappend (rev x) (Cons n lf5)).
Lemma candidate_289: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) (Cons n (rev lf5)))   (lfappend (rev2 x lf5) (Cons n lf5)).
Lemma candidate_290: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) (Cons n lf5)) (lfappend (rev2 x lf5) (Cons n lf5)).
Lemma candidate_291: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n (rev lf5))) (lfappend (rev2 x lf5) (Cons n lf5)).
Lemma candidate_292: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (lfappend (rev2 x lf5) (Cons n lf5)).
Lemma candidate_293: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n Nil)) (lfappend (rev2 x lf5) (Cons n lf5)).
Lemma candidate_294: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (lfappend (rev x) (Cons n Nil)) (lfappend (rev2 x lf5) (Cons n lf5)).
Lemma candidate_295: forall (n : nat) (lf5 : lst), @eq lst (Cons n lf5) (rev2 lf5 (Cons n Nil)).
Lemma candidate_296: forall (n : nat) (lf5 : lst), @eq lst (Cons n lf5) (lfappend (rev (rev lf5)) (Cons n Nil)).
Lemma candidate_297: forall (n : nat) (lf5 : lst), @eq lst (Cons n lf5) (lfappend (rev lf5) (Cons n Nil)).
Lemma candidate_298: forall (n : nat) (lf5 : lst), @eq lst (Cons n lf5) (Cons n (rev lf5)).
Lemma candidate_299: forall (n : nat) (lf5 : lst), @eq lst (Cons n lf5) (Cons n lf5).
Lemma candidate_300: forall (n : nat) (lf5 : lst), @eq lst (Cons n lf5) (Cons n Nil).
Lemma candidate_301: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (lfappend (rev2 x lf5) (Cons n lf5))   (lfappend (rev x) (Cons n (rev lf5))).
Lemma candidate_302: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (lfappend (rev2 x lf5) (Cons n lf5)) (lfappend (rev x) (Cons n lf5)).
Lemma candidate_303: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (lfappend (rev2 x lf5) (Cons n lf5)) (rev2 x (Cons n (rev lf5))).
Lemma candidate_304: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (lfappend (rev2 x lf5) (Cons n lf5)) (rev2 x (Cons n lf5)).
Lemma candidate_305: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (lfappend (rev2 x lf5) (Cons n lf5)) (rev2 x (Cons n Nil)).
Lemma candidate_306: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (lfappend (rev2 x lf5) (Cons n lf5)) (lfappend (rev x) (Cons n Nil)).
Lemma candidate_307: forall (x : lst) (lf5 : lst), @eq lst (rev2 x lf5) (lfappend lf5 (rev x)).
Lemma candidate_308: forall (x : lst) (lf5 : lst), @eq lst (rev2 x lf5) (rev2 lf5 (rev x)).
Lemma candidate_309: forall (x : lst) (lf5 : lst), @eq lst (rev2 x lf5) (rev2 x (rev lf5)).
Lemma candidate_310: forall (x : lst) (lf5 : lst), @eq lst (rev2 x lf5) (rev2 x lf5).
Lemma candidate_311: forall (x : lst) (lf5 : lst), @eq lst (rev2 x lf5) (rev2 x Nil).
Lemma candidate_312: forall (x : lst) (lf5 : lst), @eq lst (rev2 x lf5) (rev x).
Lemma candidate_313: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (lfappend (rev x) (Cons n (rev lf5))).
Lemma candidate_314: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (lfappend (rev x) (Cons n lf5)).
Lemma candidate_315: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (rev2 x (Cons n (rev lf5))).
Lemma candidate_316: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (rev2 x (Cons n lf5)).
Lemma candidate_317: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (rev2 x (Cons n Nil)).
Lemma candidate_318: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (lfappend (rev x) (Cons n Nil)).
Lemma candidate_319: forall (n : nat) (x : lst) (lf2 : lst), @eq lst lf2 (lfappend (rev2 x (Nil)) (Cons n (Nil))).
Lemma candidate_320: forall (lf2 : lst), @eq lst lf2 (rev2 (rev2 lf2 Nil) Nil).
Lemma candidate_321: forall (lf2 : lst), @eq lst lf2 (rev (rev2 lf2 Nil)).
Lemma candidate_322: forall (lf2 : lst), @eq lst lf2 (rev2 (rev lf2) Nil).
Lemma candidate_323: forall (lf2 : lst), @eq lst lf2 (rev (rev lf2)).
Lemma candidate_324: forall (lf2 : lst), @eq lst lf2 (lfappend lf2 Nil).
Lemma candidate_325: forall (lf2 : lst), @eq lst lf2 (lf2).
Lemma candidate_326: forall (n : nat), @eq lst (Cons n Nil) (Cons n Nil).
Lemma candidate_327: forall (x : lst), @eq lst (rev2 x Nil) (lfappend (rev2 x Nil) Nil).
Lemma candidate_328: forall (x : lst), @eq lst (rev2 x Nil) (rev (rev (rev x))).
Lemma candidate_329: forall (x : lst), @eq lst (rev2 x Nil) (rev (lfappend x Nil)).
Lemma candidate_330: forall (x : lst), @eq lst (rev2 x Nil) (lfappend (rev x) Nil).
Lemma candidate_331: forall (x : lst), @eq lst (rev2 x Nil) (rev2 x Nil).
Lemma candidate_332: forall (x : lst), @eq lst (rev2 x Nil) (rev x).
Lemma candidate_333: @eq lst Nil (Nil).
Lemma candidate_334: forall (n : nat) (x : lst), @eq lst (lfappend (rev2 x Nil) (Cons n Nil))   (rev2 (lfappend x Nil) (Cons n Nil)).
Lemma candidate_335: forall (n : nat) (x : lst), @eq lst (lfappend (rev2 x Nil) (Cons n Nil))   (lfappend (rev2 x Nil) (Cons n Nil)).
Lemma candidate_336: forall (n : nat) (x : lst), @eq lst (lfappend (rev2 x Nil) (Cons n Nil))   (lfappend (rev (rev (rev x))) (Cons n Nil)).
Lemma candidate_337: forall (n : nat) (x : lst), @eq lst (lfappend (rev2 x Nil) (Cons n Nil))   (lfappend (rev (lfappend x Nil)) (Cons n Nil)).
Lemma candidate_338: forall (n : nat) (x : lst), @eq lst (lfappend (rev2 x Nil) (Cons n Nil)) (rev2 x (Cons n Nil)).
Lemma candidate_339: forall (n : nat) (x : lst), @eq lst (lfappend (rev2 x Nil) (Cons n Nil)) (lfappend (rev x) (Cons n Nil)).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 723 seconds
Duplicates removed: 202
Filtered by Quickchick: 66
Filtered by script: 17
Remaining: 54

Lemmas: 
Lemma candidate_23: forall (lf2 : lst), @eq lst lf2 (rev (rev lf2)).
Lemma candidate_11: forall (lf1 : lst), @eq lst (rev (rev lf1)) lf1.
Lemma candidate_24: forall (lf2 : lst), @eq lst lf2 (lfappend lf2 Nil).
Lemma candidate_12: forall (lf1 : lst), @eq lst (lfappend lf1 Nil) lf1.
Lemma candidate_22: forall (lf2 : lst), @eq lst lf2 (rev2 (rev lf2) Nil).
Lemma candidate_21: forall (lf2 : lst), @eq lst lf2 (rev (rev2 lf2 Nil)).
Lemma candidate_10: forall (lf1 : lst), @eq lst (rev2 (rev lf1) Nil) lf1.
Lemma candidate_9: forall (lf1 : lst), @eq lst (rev (rev2 lf1 Nil)) lf1.
Lemma candidate_20: forall (lf2 : lst), @eq lst lf2 (rev2 (rev2 lf2 Nil) Nil).
Lemma candidate_8: forall (lf1 : lst), @eq lst (rev2 (rev2 lf1 Nil) Nil) lf1.
Lemma candidate_16: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (rev (rev2 lf3 x)).
Lemma candidate_124: forall (x : lst), @eq lst (rev2 x Nil) (rev (rev (rev x))).
Lemma candidate_126: forall (x : lst), @eq lst (rev2 x Nil) (lfappend (rev x) Nil).
Lemma candidate_125: forall (x : lst), @eq lst (rev2 x Nil) (rev (lfappend x Nil)).
Lemma candidate_17: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (lfappend (rev x) lf3).
Lemma candidate_41: forall (lf3 : lst) (lf4 : lst), @eq lst (rev2 (rev lf4) lf3) (lfappend lf4 lf3).
Lemma candidate_29: forall (lf3 : lst) (lf4 : lst), @eq lst (lfappend lf4 lf3) (rev2 (rev lf4) lf3).
Lemma candidate_123: forall (x : lst), @eq lst (rev2 x Nil) (lfappend (rev2 x Nil) Nil).
Lemma candidate_122: forall (lf3 : lst) (x : lst), @eq lst (lfappend (rev2 x Nil) lf3) (rev2 x lf3).
Lemma candidate_2: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (lfappend (rev2 x Nil) lf3).
Lemma candidate_40: forall (lf3 : lst) (lf4 : lst), @eq lst (rev (rev2 lf3 (rev lf4))) (lfappend lf4 lf3).
Lemma candidate_28: forall (lf3 : lst) (lf4 : lst), @eq lst (lfappend lf4 lf3) (rev (rev2 lf3 (rev lf4))).
Lemma candidate_119: forall (lf3 : lst) (x : lst), @eq lst (lfappend (rev2 x Nil) lf3) (rev (rev2 lf3 x)).
Lemma candidate_75: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (lfappend (rev (rev (rev x))) lf3).
Lemma candidate_77: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (lfappend (lfappend (rev x) Nil) lf3).
Lemma candidate_76: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (lfappend (rev (lfappend x Nil)) lf3).
Lemma candidate_160: forall (n : nat) (x : lst), @eq lst (rev2 x (Cons n Nil)) (lfappend (rev x) (Cons n Nil)).
Lemma candidate_143: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (lfappend (rev x) (Cons n lf5)).
Lemma candidate_74: forall (lf3 : lst) (x : lst), @eq lst (rev2 x lf3) (lfappend (lfappend (rev2 x Nil) Nil) lf3).
Lemma candidate_229: forall (n : nat) (lf4 : lst), @eq lst (rev2 (rev lf4) (Cons n Nil)) (lfappend lf4 (Cons n Nil)).
Lemma candidate_222: forall (n : nat) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (rev2 (rev lf4) (Cons n Nil)).
Lemma candidate_187: forall (n : nat) (lf4 : lst) (lf5 : lst), @eq lst (rev2 (rev lf4) (Cons n lf5)) (lfappend lf4 (Cons n lf5)).
Lemma candidate_175: forall (n : nat) (lf4 : lst) (lf5 : lst), @eq lst (lfappend lf4 (Cons n lf5)) (rev2 (rev lf4) (Cons n lf5)).
Lemma candidate_338: forall (n : nat) (x : lst), @eq lst (lfappend (rev2 x Nil) (Cons n Nil)) (rev2 x (Cons n Nil)).
Lemma candidate_287: forall (n : nat) (x : lst) (lf5 : lst), @eq lst (rev2 x (Cons n lf5)) (lfappend (rev2 x Nil) (Cons n lf5)).
Lemma candidate_155: forall (n : nat) (x : lst), @eq lst (rev2 x (Cons n Nil)) (rev2 (lfappend x Nil) (Cons n Nil)).
Lemma candidate_227: forall (n : nat) (lf4 : lst), @eq lst (rev2 (rev2 lf4 Nil) (Cons n Nil)) (lfappend lf4 (Cons n Nil)).
Lemma candidate_220: forall (n : nat) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (rev2 (rev2 lf4 Nil) (Cons n Nil)).
Lemma candidate_3: forall (lf3 : lst) (lf4 : lst) (x : lst), forall _ : @eq lst lf4 (rev x), @eq lst (rev2 x lf3) (lfappend lf4 lf3).
Lemma candidate_157: forall (n : nat) (x : lst), @eq lst (rev2 x (Cons n Nil)) (lfappend (rev (rev (rev x))) (Cons n Nil)).
Lemma candidate_231: forall (n : nat) (lf4 : lst), @eq lst (lfappend (rev (rev lf4)) (Cons n Nil)) (lfappend lf4 (Cons n Nil)).
Lemma candidate_224: forall (n : nat) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil)) (lfappend (rev (rev lf4)) (Cons n Nil)).
Lemma candidate_158: forall (n : nat) (x : lst), @eq lst (rev2 x (Cons n Nil)) (lfappend (rev (lfappend x Nil)) (Cons n Nil)).
Lemma candidate_226: forall (n : nat) (lf4 : lst), @eq lst (lfappend (lfappend lf4 Nil) (Cons n Nil))   (lfappend lf4 (Cons n Nil)).
Lemma candidate_219: forall (n : nat) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil))   (lfappend (lfappend lf4 Nil) (Cons n Nil)).
Lemma candidate_228: forall (n : nat) (lf4 : lst), @eq lst (lfappend (rev (rev2 lf4 Nil)) (Cons n Nil))   (lfappend lf4 (Cons n Nil)).
Lemma candidate_221: forall (n : nat) (lf4 : lst), @eq lst (lfappend lf4 (Cons n Nil))   (lfappend (rev (rev2 lf4 Nil)) (Cons n Nil)).
Lemma candidate_334: forall (n : nat) (x : lst), @eq lst (lfappend (rev2 x Nil) (Cons n Nil))   (rev2 (lfappend x Nil) (Cons n Nil)).
Lemma candidate_6: forall (n : nat) (lf4 : lst) (x : lst), forall _ : @eq lst lf4 (rev x), @eq lst (rev2 x (Cons n Nil)) (lfappend lf4 (Cons n Nil)).
Lemma candidate_5: forall (n : nat) (lf4 : lst) (x : lst) (lf5 : lst), forall _ : @eq lst lf4 (rev x), @eq lst (rev2 x (Cons n lf5)) (lfappend lf4 (Cons n lf5)).
Lemma candidate_4: forall (lf3 : lst) (x : lst) (lf5 : lst), forall _ : @eq lst (rev2 x lf5) (rev x), @eq lst (rev2 x lf3) (lfappend (rev2 x lf5) lf3).
Lemma candidate_336: forall (n : nat) (x : lst), @eq lst (lfappend (rev2 x Nil) (Cons n Nil))   (lfappend (rev (rev (rev x))) (Cons n Nil)).
Lemma candidate_337: forall (n : nat) (x : lst), @eq lst (lfappend (rev2 x Nil) (Cons n Nil))   (lfappend (rev (lfappend x Nil)) (Cons n Nil)).
Lemma candidate_7: forall (n : nat) (x : lst) (lf5 : lst), forall _ : @eq lst (rev2 x lf5) (rev x), @eq lst (rev2 x (Cons n lf5)) (lfappend (rev2 x lf5) (Cons n lf5)).